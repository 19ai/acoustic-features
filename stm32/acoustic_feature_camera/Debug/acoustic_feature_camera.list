
acoustic_feature_camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014000  0800aa70  0800aa70  0001aa70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ea70  0801ea70  0002ea70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ea78  0801ea78  0002ea78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ea7c  0801ea7c  0002ea7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  20000000  0801ea80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000b82c  200001f0  0801ec70  000301f0  2**2
                  ALLOC
  8 ._user_heap_stack 00002400  2000ba1c  0801ec70  0003ba1c  2**0
                  ALLOC
  9 .ARM.attributes 00000034  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ccbe  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000065ad  00000000  00000000  0005cee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00015922  00000000  00000000  0006348f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000017a0  00000000  00000000  00078db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001b20  00000000  00000000  0007a558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f0d9  00000000  00000000  0007c078  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008de6  00000000  00000000  0008b151  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  00093f37  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005580  00000000  00000000  00094024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa54 	.word	0x0800aa54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800aa54 	.word	0x0800aa54

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800047e:	f1a4 0401 	sub.w	r4, r4, #1
 8000482:	d1e9      	bne.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f092 0f00 	teq	r2, #0
 800062a:	bf14      	ite	ne
 800062c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000638:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800063c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000640:	e720      	b.n	8000484 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_ul2d>:
 8000644:	ea50 0201 	orrs.w	r2, r0, r1
 8000648:	bf08      	it	eq
 800064a:	4770      	bxeq	lr
 800064c:	b530      	push	{r4, r5, lr}
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	e00a      	b.n	800066a <__aeabi_l2d+0x16>

08000654 <__aeabi_l2d>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	b530      	push	{r4, r5, lr}
 800065e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000662:	d502      	bpl.n	800066a <__aeabi_l2d+0x16>
 8000664:	4240      	negs	r0, r0
 8000666:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800066a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800066e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000672:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000676:	f43f aedc 	beq.w	8000432 <__adddf3+0xe6>
 800067a:	f04f 0203 	mov.w	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	fa00 fc03 	lsl.w	ip, r0, r3
 800069a:	fa20 f002 	lsr.w	r0, r0, r2
 800069e:	fa01 fe03 	lsl.w	lr, r1, r3
 80006a2:	ea40 000e 	orr.w	r0, r0, lr
 80006a6:	fa21 f102 	lsr.w	r1, r1, r2
 80006aa:	4414      	add	r4, r2
 80006ac:	e6c1      	b.n	8000432 <__adddf3+0xe6>
 80006ae:	bf00      	nop

080006b0 <__aeabi_dmul>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006be:	bf1d      	ittte	ne
 80006c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006c4:	ea94 0f0c 	teqne	r4, ip
 80006c8:	ea95 0f0c 	teqne	r5, ip
 80006cc:	f000 f8de 	bleq	800088c <__aeabi_dmul+0x1dc>
 80006d0:	442c      	add	r4, r5
 80006d2:	ea81 0603 	eor.w	r6, r1, r3
 80006d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006e2:	bf18      	it	ne
 80006e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f0:	d038      	beq.n	8000764 <__aeabi_dmul+0xb4>
 80006f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000702:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000706:	f04f 0600 	mov.w	r6, #0
 800070a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800070e:	f09c 0f00 	teq	ip, #0
 8000712:	bf18      	it	ne
 8000714:	f04e 0e01 	orrne.w	lr, lr, #1
 8000718:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800071c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000720:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000724:	d204      	bcs.n	8000730 <__aeabi_dmul+0x80>
 8000726:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800072a:	416d      	adcs	r5, r5
 800072c:	eb46 0606 	adc.w	r6, r6, r6
 8000730:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000734:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000738:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800073c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000740:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000744:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000748:	bf88      	it	hi
 800074a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800074e:	d81e      	bhi.n	800078e <__aeabi_dmul+0xde>
 8000750:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000754:	bf08      	it	eq
 8000756:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800075a:	f150 0000 	adcs.w	r0, r0, #0
 800075e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000768:	ea46 0101 	orr.w	r1, r6, r1
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000778:	bfc2      	ittt	gt
 800077a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800077e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000782:	bd70      	popgt	{r4, r5, r6, pc}
 8000784:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000788:	f04f 0e00 	mov.w	lr, #0
 800078c:	3c01      	subs	r4, #1
 800078e:	f300 80ab 	bgt.w	80008e8 <__aeabi_dmul+0x238>
 8000792:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000796:	bfde      	ittt	le
 8000798:	2000      	movle	r0, #0
 800079a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800079e:	bd70      	pople	{r4, r5, r6, pc}
 80007a0:	f1c4 0400 	rsb	r4, r4, #0
 80007a4:	3c20      	subs	r4, #32
 80007a6:	da35      	bge.n	8000814 <__aeabi_dmul+0x164>
 80007a8:	340c      	adds	r4, #12
 80007aa:	dc1b      	bgt.n	80007e4 <__aeabi_dmul+0x134>
 80007ac:	f104 0414 	add.w	r4, r4, #20
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f305 	lsl.w	r3, r0, r5
 80007b8:	fa20 f004 	lsr.w	r0, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea40 0002 	orr.w	r0, r0, r2
 80007c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d0:	fa21 f604 	lsr.w	r6, r1, r4
 80007d4:	eb42 0106 	adc.w	r1, r2, r6
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f1c4 040c 	rsb	r4, r4, #12
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f304 	lsl.w	r3, r0, r4
 80007f0:	fa20 f005 	lsr.w	r0, r0, r5
 80007f4:	fa01 f204 	lsl.w	r2, r1, r4
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000804:	f141 0100 	adc.w	r1, r1, #0
 8000808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800080c:	bf08      	it	eq
 800080e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f1c4 0520 	rsb	r5, r4, #32
 8000818:	fa00 f205 	lsl.w	r2, r0, r5
 800081c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000820:	fa20 f304 	lsr.w	r3, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea43 0302 	orr.w	r3, r3, r2
 800082c:	fa21 f004 	lsr.w	r0, r1, r4
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	fa21 f204 	lsr.w	r2, r1, r4
 8000838:	ea20 0002 	bic.w	r0, r0, r2
 800083c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f094 0f00 	teq	r4, #0
 8000850:	d10f      	bne.n	8000872 <__aeabi_dmul+0x1c2>
 8000852:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000856:	0040      	lsls	r0, r0, #1
 8000858:	eb41 0101 	adc.w	r1, r1, r1
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	bf08      	it	eq
 8000862:	3c01      	subeq	r4, #1
 8000864:	d0f7      	beq.n	8000856 <__aeabi_dmul+0x1a6>
 8000866:	ea41 0106 	orr.w	r1, r1, r6
 800086a:	f095 0f00 	teq	r5, #0
 800086e:	bf18      	it	ne
 8000870:	4770      	bxne	lr
 8000872:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000876:	0052      	lsls	r2, r2, #1
 8000878:	eb43 0303 	adc.w	r3, r3, r3
 800087c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000880:	bf08      	it	eq
 8000882:	3d01      	subeq	r5, #1
 8000884:	d0f7      	beq.n	8000876 <__aeabi_dmul+0x1c6>
 8000886:	ea43 0306 	orr.w	r3, r3, r6
 800088a:	4770      	bx	lr
 800088c:	ea94 0f0c 	teq	r4, ip
 8000890:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000894:	bf18      	it	ne
 8000896:	ea95 0f0c 	teqne	r5, ip
 800089a:	d00c      	beq.n	80008b6 <__aeabi_dmul+0x206>
 800089c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008a6:	d1d1      	bne.n	800084c <__aeabi_dmul+0x19c>
 80008a8:	ea81 0103 	eor.w	r1, r1, r3
 80008ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b0:	f04f 0000 	mov.w	r0, #0
 80008b4:	bd70      	pop	{r4, r5, r6, pc}
 80008b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008ba:	bf06      	itte	eq
 80008bc:	4610      	moveq	r0, r2
 80008be:	4619      	moveq	r1, r3
 80008c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008c4:	d019      	beq.n	80008fa <__aeabi_dmul+0x24a>
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	d102      	bne.n	80008d2 <__aeabi_dmul+0x222>
 80008cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d0:	d113      	bne.n	80008fa <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	d105      	bne.n	80008e4 <__aeabi_dmul+0x234>
 80008d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008dc:	bf1c      	itt	ne
 80008de:	4610      	movne	r0, r2
 80008e0:	4619      	movne	r1, r3
 80008e2:	d10a      	bne.n	80008fa <__aeabi_dmul+0x24a>
 80008e4:	ea81 0103 	eor.w	r1, r1, r3
 80008e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008f4:	f04f 0000 	mov.w	r0, #0
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
 80008fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000902:	bd70      	pop	{r4, r5, r6, pc}

08000904 <__aeabi_ddiv>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800090a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800090e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000912:	bf1d      	ittte	ne
 8000914:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000918:	ea94 0f0c 	teqne	r4, ip
 800091c:	ea95 0f0c 	teqne	r5, ip
 8000920:	f000 f8a7 	bleq	8000a72 <__aeabi_ddiv+0x16e>
 8000924:	eba4 0405 	sub.w	r4, r4, r5
 8000928:	ea81 0e03 	eor.w	lr, r1, r3
 800092c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000930:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000934:	f000 8088 	beq.w	8000a48 <__aeabi_ddiv+0x144>
 8000938:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800093c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000940:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000944:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000948:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800094c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000950:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000954:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000958:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800095c:	429d      	cmp	r5, r3
 800095e:	bf08      	it	eq
 8000960:	4296      	cmpeq	r6, r2
 8000962:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000966:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800096a:	d202      	bcs.n	8000972 <__aeabi_ddiv+0x6e>
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	1ab6      	subs	r6, r6, r2
 8000974:	eb65 0503 	sbc.w	r5, r5, r3
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000982:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 000c 	orrcs.w	r0, r0, ip
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009e4:	d018      	beq.n	8000a18 <__aeabi_ddiv+0x114>
 80009e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a02:	d1c0      	bne.n	8000986 <__aeabi_ddiv+0x82>
 8000a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a08:	d10b      	bne.n	8000a22 <__aeabi_ddiv+0x11e>
 8000a0a:	ea41 0100 	orr.w	r1, r1, r0
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a16:	e7b6      	b.n	8000986 <__aeabi_ddiv+0x82>
 8000a18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a1c:	bf04      	itt	eq
 8000a1e:	4301      	orreq	r1, r0
 8000a20:	2000      	moveq	r0, #0
 8000a22:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a26:	bf88      	it	hi
 8000a28:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a2c:	f63f aeaf 	bhi.w	800078e <__aeabi_dmul+0xde>
 8000a30:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a34:	bf04      	itt	eq
 8000a36:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a3e:	f150 0000 	adcs.w	r0, r0, #0
 8000a42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a4c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a50:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a54:	bfc2      	ittt	gt
 8000a56:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a5e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a64:	f04f 0e00 	mov.w	lr, #0
 8000a68:	3c01      	subs	r4, #1
 8000a6a:	e690      	b.n	800078e <__aeabi_dmul+0xde>
 8000a6c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a70:	e68d      	b.n	800078e <__aeabi_dmul+0xde>
 8000a72:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a76:	ea94 0f0c 	teq	r4, ip
 8000a7a:	bf08      	it	eq
 8000a7c:	ea95 0f0c 	teqeq	r5, ip
 8000a80:	f43f af3b 	beq.w	80008fa <__aeabi_dmul+0x24a>
 8000a84:	ea94 0f0c 	teq	r4, ip
 8000a88:	d10a      	bne.n	8000aa0 <__aeabi_ddiv+0x19c>
 8000a8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a8e:	f47f af34 	bne.w	80008fa <__aeabi_dmul+0x24a>
 8000a92:	ea95 0f0c 	teq	r5, ip
 8000a96:	f47f af25 	bne.w	80008e4 <__aeabi_dmul+0x234>
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	e72c      	b.n	80008fa <__aeabi_dmul+0x24a>
 8000aa0:	ea95 0f0c 	teq	r5, ip
 8000aa4:	d106      	bne.n	8000ab4 <__aeabi_ddiv+0x1b0>
 8000aa6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aaa:	f43f aefd 	beq.w	80008a8 <__aeabi_dmul+0x1f8>
 8000aae:	4610      	mov	r0, r2
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	e722      	b.n	80008fa <__aeabi_dmul+0x24a>
 8000ab4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab8:	bf18      	it	ne
 8000aba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000abe:	f47f aec5 	bne.w	800084c <__aeabi_dmul+0x19c>
 8000ac2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ac6:	f47f af0d 	bne.w	80008e4 <__aeabi_dmul+0x234>
 8000aca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ace:	f47f aeeb 	bne.w	80008a8 <__aeabi_dmul+0x1f8>
 8000ad2:	e712      	b.n	80008fa <__aeabi_dmul+0x24a>

08000ad4 <__gedf2>:
 8000ad4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad8:	e006      	b.n	8000ae8 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__ledf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	e002      	b.n	8000ae8 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__cmpdf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	bf18      	it	ne
 8000afa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000afe:	d01b      	beq.n	8000b38 <__cmpdf2+0x54>
 8000b00:	b001      	add	sp, #4
 8000b02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b06:	bf0c      	ite	eq
 8000b08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b0c:	ea91 0f03 	teqne	r1, r3
 8000b10:	bf02      	ittt	eq
 8000b12:	ea90 0f02 	teqeq	r0, r2
 8000b16:	2000      	moveq	r0, #0
 8000b18:	4770      	bxeq	lr
 8000b1a:	f110 0f00 	cmn.w	r0, #0
 8000b1e:	ea91 0f03 	teq	r1, r3
 8000b22:	bf58      	it	pl
 8000b24:	4299      	cmppl	r1, r3
 8000b26:	bf08      	it	eq
 8000b28:	4290      	cmpeq	r0, r2
 8000b2a:	bf2c      	ite	cs
 8000b2c:	17d8      	asrcs	r0, r3, #31
 8000b2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b32:	f040 0001 	orr.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b40:	d102      	bne.n	8000b48 <__cmpdf2+0x64>
 8000b42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b46:	d107      	bne.n	8000b58 <__cmpdf2+0x74>
 8000b48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b50:	d1d6      	bne.n	8000b00 <__cmpdf2+0x1c>
 8000b52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b56:	d0d3      	beq.n	8000b00 <__cmpdf2+0x1c>
 8000b58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_cdrcmple>:
 8000b60:	4684      	mov	ip, r0
 8000b62:	4610      	mov	r0, r2
 8000b64:	4662      	mov	r2, ip
 8000b66:	468c      	mov	ip, r1
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4663      	mov	r3, ip
 8000b6c:	e000      	b.n	8000b70 <__aeabi_cdcmpeq>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_cdcmpeq>:
 8000b70:	b501      	push	{r0, lr}
 8000b72:	f7ff ffb7 	bl	8000ae4 <__cmpdf2>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	bf48      	it	mi
 8000b7a:	f110 0f00 	cmnmi.w	r0, #0
 8000b7e:	bd01      	pop	{r0, pc}

08000b80 <__aeabi_dcmpeq>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff fff4 	bl	8000b70 <__aeabi_cdcmpeq>
 8000b88:	bf0c      	ite	eq
 8000b8a:	2001      	moveq	r0, #1
 8000b8c:	2000      	movne	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_dcmplt>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff ffea 	bl	8000b70 <__aeabi_cdcmpeq>
 8000b9c:	bf34      	ite	cc
 8000b9e:	2001      	movcc	r0, #1
 8000ba0:	2000      	movcs	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_dcmple>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff ffe0 	bl	8000b70 <__aeabi_cdcmpeq>
 8000bb0:	bf94      	ite	ls
 8000bb2:	2001      	movls	r0, #1
 8000bb4:	2000      	movhi	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmpge>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffce 	bl	8000b60 <__aeabi_cdrcmple>
 8000bc4:	bf94      	ite	ls
 8000bc6:	2001      	movls	r0, #1
 8000bc8:	2000      	movhi	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmpgt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffc4 	bl	8000b60 <__aeabi_cdrcmple>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpun>:
 8000be4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bec:	d102      	bne.n	8000bf4 <__aeabi_dcmpun+0x10>
 8000bee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bf2:	d10a      	bne.n	8000c0a <__aeabi_dcmpun+0x26>
 8000bf4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bfc:	d102      	bne.n	8000c04 <__aeabi_dcmpun+0x20>
 8000bfe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_dcmpun+0x26>
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0001 	mov.w	r0, #1
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2iz>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c18:	d215      	bcs.n	8000c46 <__aeabi_d2iz+0x36>
 8000c1a:	d511      	bpl.n	8000c40 <__aeabi_d2iz+0x30>
 8000c1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c24:	d912      	bls.n	8000c4c <__aeabi_d2iz+0x3c>
 8000c26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c36:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d105      	bne.n	8000c58 <__aeabi_d2iz+0x48>
 8000c4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	bf08      	it	eq
 8000c52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c56:	4770      	bx	lr
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <__aeabi_d2f>:
 8000c60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c68:	bf24      	itt	cs
 8000c6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c72:	d90d      	bls.n	8000c90 <__aeabi_d2f+0x30>
 8000c74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c88:	bf08      	it	eq
 8000c8a:	f020 0001 	biceq.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c94:	d121      	bne.n	8000cda <__aeabi_d2f+0x7a>
 8000c96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c9a:	bfbc      	itt	lt
 8000c9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ca0:	4770      	bxlt	lr
 8000ca2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ca6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000caa:	f1c2 0218 	rsb	r2, r2, #24
 8000cae:	f1c2 0c20 	rsb	ip, r2, #32
 8000cb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000cba:	bf18      	it	ne
 8000cbc:	f040 0001 	orrne.w	r0, r0, #1
 8000cc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ccc:	ea40 000c 	orr.w	r0, r0, ip
 8000cd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000cd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd8:	e7cc      	b.n	8000c74 <__aeabi_d2f+0x14>
 8000cda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cde:	d107      	bne.n	8000cf0 <__aeabi_d2f+0x90>
 8000ce0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ce4:	bf1e      	ittt	ne
 8000ce6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cee:	4770      	bxne	lr
 8000cf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <__aeabi_uldivmod>:
 8000d00:	b953      	cbnz	r3, 8000d18 <__aeabi_uldivmod+0x18>
 8000d02:	b94a      	cbnz	r2, 8000d18 <__aeabi_uldivmod+0x18>
 8000d04:	2900      	cmp	r1, #0
 8000d06:	bf08      	it	eq
 8000d08:	2800      	cmpeq	r0, #0
 8000d0a:	bf1c      	itt	ne
 8000d0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d10:	f04f 30ff 	movne.w	r0, #4294967295
 8000d14:	f000 b97a 	b.w	800100c <__aeabi_idiv0>
 8000d18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d20:	f000 f806 	bl	8000d30 <__udivmoddi4>
 8000d24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2c:	b004      	add	sp, #16
 8000d2e:	4770      	bx	lr

08000d30 <__udivmoddi4>:
 8000d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d34:	468c      	mov	ip, r1
 8000d36:	460d      	mov	r5, r1
 8000d38:	4604      	mov	r4, r0
 8000d3a:	9e08      	ldr	r6, [sp, #32]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d151      	bne.n	8000de4 <__udivmoddi4+0xb4>
 8000d40:	428a      	cmp	r2, r1
 8000d42:	4617      	mov	r7, r2
 8000d44:	d96d      	bls.n	8000e22 <__udivmoddi4+0xf2>
 8000d46:	fab2 fe82 	clz	lr, r2
 8000d4a:	f1be 0f00 	cmp.w	lr, #0
 8000d4e:	d00b      	beq.n	8000d68 <__udivmoddi4+0x38>
 8000d50:	f1ce 0c20 	rsb	ip, lr, #32
 8000d54:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d58:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d5c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d60:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d64:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d68:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d6c:	0c25      	lsrs	r5, r4, #16
 8000d6e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d72:	fa1f f987 	uxth.w	r9, r7
 8000d76:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d7a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d7e:	fb08 f309 	mul.w	r3, r8, r9
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x6c>
 8000d86:	19ed      	adds	r5, r5, r7
 8000d88:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d8c:	f080 8123 	bcs.w	8000fd6 <__udivmoddi4+0x2a6>
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	f240 8120 	bls.w	8000fd6 <__udivmoddi4+0x2a6>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	443d      	add	r5, r7
 8000d9c:	1aed      	subs	r5, r5, r3
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000da4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000da8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dac:	fb00 f909 	mul.w	r9, r0, r9
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x98>
 8000db4:	19e4      	adds	r4, r4, r7
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	f080 810a 	bcs.w	8000fd2 <__udivmoddi4+0x2a2>
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	f240 8107 	bls.w	8000fd2 <__udivmoddi4+0x2a2>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 0409 	sub.w	r4, r4, r9
 8000dcc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d061      	beq.n	8000e9a <__udivmoddi4+0x16a>
 8000dd6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000dda:	2300      	movs	r3, #0
 8000ddc:	6034      	str	r4, [r6, #0]
 8000dde:	6073      	str	r3, [r6, #4]
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0xc8>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d054      	beq.n	8000e96 <__udivmoddi4+0x166>
 8000dec:	2100      	movs	r1, #0
 8000dee:	e886 0021 	stmia.w	r6, {r0, r5}
 8000df2:	4608      	mov	r0, r1
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	fab3 f183 	clz	r1, r3
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	f040 808e 	bne.w	8000f1e <__udivmoddi4+0x1ee>
 8000e02:	42ab      	cmp	r3, r5
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xdc>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 80fa 	bhi.w	8001000 <__udivmoddi4+0x2d0>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb65 0503 	sbc.w	r5, r5, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	46ac      	mov	ip, r5
 8000e16:	2e00      	cmp	r6, #0
 8000e18:	d03f      	beq.n	8000e9a <__udivmoddi4+0x16a>
 8000e1a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	b912      	cbnz	r2, 8000e2a <__udivmoddi4+0xfa>
 8000e24:	2701      	movs	r7, #1
 8000e26:	fbb7 f7f2 	udiv	r7, r7, r2
 8000e2a:	fab7 fe87 	clz	lr, r7
 8000e2e:	f1be 0f00 	cmp.w	lr, #0
 8000e32:	d134      	bne.n	8000e9e <__udivmoddi4+0x16e>
 8000e34:	1beb      	subs	r3, r5, r7
 8000e36:	0c3a      	lsrs	r2, r7, #16
 8000e38:	fa1f fc87 	uxth.w	ip, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000e42:	0c25      	lsrs	r5, r4, #16
 8000e44:	fb02 3318 	mls	r3, r2, r8, r3
 8000e48:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e4c:	fb0c f308 	mul.w	r3, ip, r8
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x134>
 8000e54:	19ed      	adds	r5, r5, r7
 8000e56:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x132>
 8000e5c:	42ab      	cmp	r3, r5
 8000e5e:	f200 80d1 	bhi.w	8001004 <__udivmoddi4+0x2d4>
 8000e62:	4680      	mov	r8, r0
 8000e64:	1aed      	subs	r5, r5, r3
 8000e66:	b2a3      	uxth	r3, r4
 8000e68:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e6c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e70:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e74:	fb0c fc00 	mul.w	ip, ip, r0
 8000e78:	45a4      	cmp	ip, r4
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x15c>
 8000e7c:	19e4      	adds	r4, r4, r7
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x15a>
 8000e84:	45a4      	cmp	ip, r4
 8000e86:	f200 80b8 	bhi.w	8000ffa <__udivmoddi4+0x2ca>
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	eba4 040c 	sub.w	r4, r4, ip
 8000e90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e94:	e79d      	b.n	8000dd2 <__udivmoddi4+0xa2>
 8000e96:	4631      	mov	r1, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	f1ce 0420 	rsb	r4, lr, #32
 8000ea2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000ea6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000eaa:	fa20 f804 	lsr.w	r8, r0, r4
 8000eae:	0c3a      	lsrs	r2, r7, #16
 8000eb0:	fa25 f404 	lsr.w	r4, r5, r4
 8000eb4:	ea48 0803 	orr.w	r8, r8, r3
 8000eb8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000ebc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ec0:	fb02 4411 	mls	r4, r2, r1, r4
 8000ec4:	fa1f fc87 	uxth.w	ip, r7
 8000ec8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000ecc:	fb01 f30c 	mul.w	r3, r1, ip
 8000ed0:	42ab      	cmp	r3, r5
 8000ed2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ed6:	d909      	bls.n	8000eec <__udivmoddi4+0x1bc>
 8000ed8:	19ed      	adds	r5, r5, r7
 8000eda:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ede:	f080 808a 	bcs.w	8000ff6 <__udivmoddi4+0x2c6>
 8000ee2:	42ab      	cmp	r3, r5
 8000ee4:	f240 8087 	bls.w	8000ff6 <__udivmoddi4+0x2c6>
 8000ee8:	3902      	subs	r1, #2
 8000eea:	443d      	add	r5, r7
 8000eec:	1aeb      	subs	r3, r5, r3
 8000eee:	fa1f f588 	uxth.w	r5, r8
 8000ef2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ef6:	fb02 3310 	mls	r3, r2, r0, r3
 8000efa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000efe:	fb00 f30c 	mul.w	r3, r0, ip
 8000f02:	42ab      	cmp	r3, r5
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1e6>
 8000f06:	19ed      	adds	r5, r5, r7
 8000f08:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0c:	d26f      	bcs.n	8000fee <__udivmoddi4+0x2be>
 8000f0e:	42ab      	cmp	r3, r5
 8000f10:	d96d      	bls.n	8000fee <__udivmoddi4+0x2be>
 8000f12:	3802      	subs	r0, #2
 8000f14:	443d      	add	r5, r7
 8000f16:	1aeb      	subs	r3, r5, r3
 8000f18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f1c:	e78f      	b.n	8000e3e <__udivmoddi4+0x10e>
 8000f1e:	f1c1 0720 	rsb	r7, r1, #32
 8000f22:	fa22 f807 	lsr.w	r8, r2, r7
 8000f26:	408b      	lsls	r3, r1
 8000f28:	fa05 f401 	lsl.w	r4, r5, r1
 8000f2c:	ea48 0303 	orr.w	r3, r8, r3
 8000f30:	fa20 fe07 	lsr.w	lr, r0, r7
 8000f34:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000f38:	40fd      	lsrs	r5, r7
 8000f3a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000f3e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000f42:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000f46:	fb0c 5519 	mls	r5, ip, r9, r5
 8000f4a:	fa1f f883 	uxth.w	r8, r3
 8000f4e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f52:	fb09 f408 	mul.w	r4, r9, r8
 8000f56:	42ac      	cmp	r4, r5
 8000f58:	fa02 f201 	lsl.w	r2, r2, r1
 8000f5c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x244>
 8000f62:	18ed      	adds	r5, r5, r3
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d243      	bcs.n	8000ff2 <__udivmoddi4+0x2c2>
 8000f6a:	42ac      	cmp	r4, r5
 8000f6c:	d941      	bls.n	8000ff2 <__udivmoddi4+0x2c2>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	441d      	add	r5, r3
 8000f74:	1b2d      	subs	r5, r5, r4
 8000f76:	fa1f fe8e 	uxth.w	lr, lr
 8000f7a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f7e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f82:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45a0      	cmp	r8, r4
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x26e>
 8000f8e:	18e4      	adds	r4, r4, r3
 8000f90:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f94:	d229      	bcs.n	8000fea <__udivmoddi4+0x2ba>
 8000f96:	45a0      	cmp	r8, r4
 8000f98:	d927      	bls.n	8000fea <__udivmoddi4+0x2ba>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	441c      	add	r4, r3
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba4 0408 	sub.w	r4, r4, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454c      	cmp	r4, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	464d      	mov	r5, r9
 8000fb0:	d315      	bcc.n	8000fde <__udivmoddi4+0x2ae>
 8000fb2:	d012      	beq.n	8000fda <__udivmoddi4+0x2aa>
 8000fb4:	b156      	cbz	r6, 8000fcc <__udivmoddi4+0x29c>
 8000fb6:	ebba 030e 	subs.w	r3, sl, lr
 8000fba:	eb64 0405 	sbc.w	r4, r4, r5
 8000fbe:	fa04 f707 	lsl.w	r7, r4, r7
 8000fc2:	40cb      	lsrs	r3, r1
 8000fc4:	431f      	orrs	r7, r3
 8000fc6:	40cc      	lsrs	r4, r1
 8000fc8:	6037      	str	r7, [r6, #0]
 8000fca:	6074      	str	r4, [r6, #4]
 8000fcc:	2100      	movs	r1, #0
 8000fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	e6f8      	b.n	8000dc8 <__udivmoddi4+0x98>
 8000fd6:	4690      	mov	r8, r2
 8000fd8:	e6e0      	b.n	8000d9c <__udivmoddi4+0x6c>
 8000fda:	45c2      	cmp	sl, r8
 8000fdc:	d2ea      	bcs.n	8000fb4 <__udivmoddi4+0x284>
 8000fde:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fe2:	eb69 0503 	sbc.w	r5, r9, r3
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7e4      	b.n	8000fb4 <__udivmoddi4+0x284>
 8000fea:	4628      	mov	r0, r5
 8000fec:	e7d7      	b.n	8000f9e <__udivmoddi4+0x26e>
 8000fee:	4640      	mov	r0, r8
 8000ff0:	e791      	b.n	8000f16 <__udivmoddi4+0x1e6>
 8000ff2:	4681      	mov	r9, r0
 8000ff4:	e7be      	b.n	8000f74 <__udivmoddi4+0x244>
 8000ff6:	4601      	mov	r1, r0
 8000ff8:	e778      	b.n	8000eec <__udivmoddi4+0x1bc>
 8000ffa:	3802      	subs	r0, #2
 8000ffc:	443c      	add	r4, r7
 8000ffe:	e745      	b.n	8000e8c <__udivmoddi4+0x15c>
 8001000:	4608      	mov	r0, r1
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xe6>
 8001004:	f1a8 0802 	sub.w	r8, r8, #2
 8001008:	443d      	add	r5, r7
 800100a:	e72b      	b.n	8000e64 <__udivmoddi4+0x134>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 8001010:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8001012:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8001080 <arm_dot_prod_f32+0x70>

#ifndef ARM_MATH_CM0_FAMILY

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8001016:	0896      	lsrs	r6, r2, #2
 8001018:	4605      	mov	r5, r0
 800101a:	460c      	mov	r4, r1
 800101c:	4637      	mov	r7, r6
 800101e:	3510      	adds	r5, #16
 8001020:	3410      	adds	r4, #16

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8001022:	b95f      	cbnz	r7, 800103c <arm_dot_prod_f32+0x2c>
 8001024:	0134      	lsls	r4, r6, #4
 8001026:	4421      	add	r1, r4
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8001028:	f002 0203 	and.w	r2, r2, #3
 800102c:	4420      	add	r0, r4
 800102e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */


  while(blkCnt > 0u)
 8001032:	4291      	cmp	r1, r2
 8001034:	d11c      	bne.n	8001070 <arm_dot_prod_f32+0x60>

    /* Decrement the loop counter */
    blkCnt--;
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 8001036:	edc3 7a00 	vstr	s15, [r3]
 800103a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sum += (*pSrcA++) * (*pSrcB++);
 800103c:	ed55 6a04 	vldr	s13, [r5, #-16]
 8001040:	ed14 7a04 	vldr	s14, [r4, #-16]
 8001044:	eee6 7a87 	vfma.f32	s15, s13, s14
    blkCnt--;
 8001048:	3f01      	subs	r7, #1
    sum += (*pSrcA++) * (*pSrcB++);
 800104a:	ed55 6a03 	vldr	s13, [r5, #-12]
 800104e:	ed14 7a03 	vldr	s14, [r4, #-12]
 8001052:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 8001056:	ed55 6a02 	vldr	s13, [r5, #-8]
 800105a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800105e:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 8001062:	ed55 6a01 	vldr	s13, [r5, #-4]
 8001066:	ed14 7a01 	vldr	s14, [r4, #-4]
 800106a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800106e:	e7d6      	b.n	800101e <arm_dot_prod_f32+0xe>
    sum += (*pSrcA++) * (*pSrcB++);
 8001070:	ecf0 6a01 	vldmia	r0!, {s13}
 8001074:	ecb1 7a01 	vldmia	r1!, {s14}
 8001078:	eee6 7a87 	vfma.f32	s15, s13, s14
 800107c:	e7d9      	b.n	8001032 <arm_dot_prod_f32+0x22>
 800107e:	bf00      	nop
 8001080:	00000000 	.word	0x00000000

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_InitTick+0x2c>)
{
 8001088:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001090:	fbb0 f0f3 	udiv	r0, r0, r3
 8001094:	f000 f892 	bl	80011bc <HAL_SYSTICK_Config>
 8001098:	4604      	mov	r4, r0
 800109a:	b938      	cbnz	r0, 80010ac <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800109c:	4602      	mov	r2, r0
 800109e:	4629      	mov	r1, r5
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f000 f84a 	bl	800113c <HAL_NVIC_SetPriority>
 80010a8:	4620      	mov	r0, r4
 80010aa:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80010ac:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80010ae:	bd38      	pop	{r3, r4, r5, pc}
 80010b0:	20000018 	.word	0x20000018

080010b4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_Init+0x28>)
 80010b6:	6813      	ldr	r3, [r2, #0]
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80010bc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010be:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c2:	f000 f829 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff ffdc 	bl	8001084 <HAL_InitTick>
 80010cc:	4604      	mov	r4, r0
 80010ce:	b918      	cbnz	r0, 80010d8 <HAL_Init+0x24>
    HAL_MspInit();
 80010d0:	f003 fcd0 	bl	8004a74 <HAL_MspInit>
}
 80010d4:	4620      	mov	r0, r4
 80010d6:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80010d8:	2401      	movs	r4, #1
 80010da:	e7fb      	b.n	80010d4 <HAL_Init+0x20>
 80010dc:	40022000 	.word	0x40022000

080010e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80010e0:	4a02      	ldr	r2, [pc, #8]	; (80010ec <HAL_IncTick+0xc>)
 80010e2:	6813      	ldr	r3, [r2, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	2000b600 	.word	0x2000b600

080010f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010f0:	4b01      	ldr	r3, [pc, #4]	; (80010f8 <HAL_GetTick+0x8>)
 80010f2:	6818      	ldr	r0, [r3, #0]
}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	2000b600 	.word	0x2000b600

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b538      	push	{r3, r4, r5, lr}
 80010fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff fff6 	bl	80010f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001104:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001106:	4605      	mov	r5, r0
  {
    wait++;
 8001108:	bf18      	it	ne
 800110a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800110c:	f7ff fff0 	bl	80010f0 <HAL_GetTick>
 8001110:	1b40      	subs	r0, r0, r5
 8001112:	4284      	cmp	r4, r0
 8001114:	d8fa      	bhi.n	800110c <HAL_Delay+0x10>
  {
  }
}
 8001116:	bd38      	pop	{r3, r4, r5, pc}

08001118 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800111a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001120:	041b      	lsls	r3, r3, #16
 8001122:	0c1b      	lsrs	r3, r3, #16
 8001124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001128:	0200      	lsls	r0, r0, #8
 800112a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001132:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001134:	60d3      	str	r3, [r2, #12]
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113e:	b530      	push	{r4, r5, lr}
 8001140:	68dc      	ldr	r4, [r3, #12]
 8001142:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001146:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	2b04      	cmp	r3, #4
 800114e:	bf28      	it	cs
 8001150:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 0501 	mov.w	r5, #1
 8001158:	fa05 f303 	lsl.w	r3, r5, r3
 800115c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001160:	bf8c      	ite	hi
 8001162:	3c03      	subhi	r4, #3
 8001164:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001166:	4019      	ands	r1, r3
 8001168:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116a:	fa05 f404 	lsl.w	r4, r5, r4
 800116e:	3c01      	subs	r4, #1
 8001170:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001172:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	ea42 0201 	orr.w	r2, r2, r1
 8001178:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	bfaf      	iteee	ge
 800117e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	f000 000f 	andlt.w	r0, r0, #15
 8001186:	4b06      	ldrlt	r3, [pc, #24]	; (80011a0 <HAL_NVIC_SetPriority+0x64>)
 8001188:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	bfa5      	ittet	ge
 800118c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001190:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001198:	bd30      	pop	{r4, r5, pc}
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00
 80011a0:	e000ed14 	.word	0xe000ed14

080011a4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011a4:	0942      	lsrs	r2, r0, #5
 80011a6:	2301      	movs	r3, #1
 80011a8:	f000 001f 	and.w	r0, r0, #31
 80011ac:	fa03 f000 	lsl.w	r0, r3, r0
 80011b0:	4b01      	ldr	r3, [pc, #4]	; (80011b8 <HAL_NVIC_EnableIRQ+0x14>)
 80011b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100

080011bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	3801      	subs	r0, #1
 80011be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80011c2:	d20a      	bcs.n	80011da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	21f0      	movs	r1, #240	; 0xf0
 80011cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011e8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011ea:	4604      	mov	r4, r0
 80011ec:	b908      	cbnz	r0, 80011f2 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80011ee:	2001      	movs	r0, #1
 80011f0:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011f2:	7f43      	ldrb	r3, [r0, #29]
 80011f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011f8:	b913      	cbnz	r3, 8001200 <HAL_CRC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011fa:	7702      	strb	r2, [r0, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011fc:	f002 fa38 	bl	8003670 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001200:	2302      	movs	r3, #2
 8001202:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001204:	7923      	ldrb	r3, [r4, #4]
 8001206:	b9e3      	cbnz	r3, 8001242 <HAL_CRC_Init+0x5a>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	4a13      	ldr	r2, [pc, #76]	; (8001258 <HAL_CRC_Init+0x70>)
 800120c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	f022 0218 	bic.w	r2, r2, #24
 8001214:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001216:	7962      	ldrb	r2, [r4, #5]
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	b9d2      	cbnz	r2, 8001252 <HAL_CRC_Init+0x6a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001220:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	6961      	ldr	r1, [r4, #20]
 8001226:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800122a:	430a      	orrs	r2, r1
 800122c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	69a1      	ldr	r1, [r4, #24]
 8001232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001236:	430a      	orrs	r2, r1
 8001238:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800123a:	2301      	movs	r3, #1
 800123c:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800123e:	2000      	movs	r0, #0
}
 8001240:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001242:	68e2      	ldr	r2, [r4, #12]
 8001244:	68a1      	ldr	r1, [r4, #8]
 8001246:	4620      	mov	r0, r4
 8001248:	f000 f808 	bl	800125c <HAL_CRCEx_Polynomial_Set>
 800124c:	2800      	cmp	r0, #0
 800124e:	d0e2      	beq.n	8001216 <HAL_CRC_Init+0x2e>
 8001250:	e7cd      	b.n	80011ee <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001252:	6922      	ldr	r2, [r4, #16]
 8001254:	e7e4      	b.n	8001220 <HAL_CRC_Init+0x38>
 8001256:	bf00      	nop
 8001258:	04c11db7 	.word	0x04c11db7

0800125c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800125c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800125e:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001260:	f113 33ff 	adds.w	r3, r3, #4294967295
 8001264:	d306      	bcc.n	8001274 <HAL_CRCEx_Polynomial_Set+0x18>
 8001266:	fa21 f403 	lsr.w	r4, r1, r3
 800126a:	07e4      	lsls	r4, r4, #31
 800126c:	d5f8      	bpl.n	8001260 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800126e:	2a08      	cmp	r2, #8
 8001270:	d014      	beq.n	800129c <HAL_CRCEx_Polynomial_Set+0x40>
 8001272:	d809      	bhi.n	8001288 <HAL_CRCEx_Polynomial_Set+0x2c>
 8001274:	b972      	cbnz	r2, 8001294 <HAL_CRCEx_Polynomial_Set+0x38>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001276:	6800      	ldr	r0, [r0, #0]
 8001278:	6141      	str	r1, [r0, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800127a:	6883      	ldr	r3, [r0, #8]
 800127c:	f023 0318 	bic.w	r3, r3, #24
 8001280:	431a      	orrs	r2, r3
 8001282:	6082      	str	r2, [r0, #8]
 8001284:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
 8001286:	bd10      	pop	{r4, pc}
  switch (PolyLength)
 8001288:	2a10      	cmp	r2, #16
 800128a:	d005      	beq.n	8001298 <HAL_CRCEx_Polynomial_Set+0x3c>
 800128c:	2a18      	cmp	r2, #24
 800128e:	d101      	bne.n	8001294 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_7B)
 8001290:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8001292:	d9f0      	bls.n	8001276 <HAL_CRCEx_Polynomial_Set+0x1a>
  switch (PolyLength)
 8001294:	2001      	movs	r0, #1
 8001296:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001298:	2b07      	cmp	r3, #7
 800129a:	e7fa      	b.n	8001292 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 800129c:	2b0f      	cmp	r3, #15
 800129e:	e7f8      	b.n	8001292 <HAL_CRCEx_Polynomial_Set+0x36>

080012a0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80012a0:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 80012a2:	4604      	mov	r4, r0
 80012a4:	b168      	cbz	r0, 80012c2 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80012a6:	7903      	ldrb	r3, [r0, #4]
 80012a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012ac:	b913      	cbnz	r3, 80012b4 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80012ae:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80012b0:	f002 fa20 	bl	80036f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80012b4:	2302      	movs	r3, #2
 80012b6:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80012b8:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80012ba:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80012bc:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80012be:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80012c0:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80012c2:	2001      	movs	r0, #1
}
 80012c4:	bd10      	pop	{r4, pc}

080012c6 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80012c6:	7943      	ldrb	r3, [r0, #5]
 80012c8:	2b01      	cmp	r3, #1
{
 80012ca:	b530      	push	{r4, r5, lr}
 80012cc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 80012d0:	d017      	beq.n	8001302 <HAL_DAC_Start+0x3c>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80012d2:	7103      	strb	r3, [r0, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80012d4:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 80012d6:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 80012d8:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 80012da:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 80012dc:	f001 0510 	and.w	r5, r1, #16
 80012e0:	40aa      	lsls	r2, r5
 80012e2:	4322      	orrs	r2, r4
 80012e4:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80012e6:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 80012e8:	b969      	cbnz	r1, 8001306 <HAL_DAC_Start+0x40>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80012ea:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 80012ee:	2a04      	cmp	r2, #4
 80012f0:	d103      	bne.n	80012fa <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80012f8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80012fa:	2301      	movs	r3, #1
 80012fc:	7103      	strb	r3, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80012fe:	2300      	movs	r3, #0
 8001300:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001302:	4618      	mov	r0, r3

  /* Return function status */
  return HAL_OK;
}
 8001304:	bd30      	pop	{r4, r5, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001306:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 800130a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800130e:	d1f4      	bne.n	80012fa <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	f042 0202 	orr.w	r2, r2, #2
 8001316:	e7ef      	b.n	80012f8 <HAL_DAC_Start+0x32>

08001318 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800131a:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800131c:	7940      	ldrb	r0, [r0, #5]
 800131e:	2801      	cmp	r0, #1
{
 8001320:	460e      	mov	r6, r1
 8001322:	f04f 0002 	mov.w	r0, #2
 8001326:	4611      	mov	r1, r2
 8001328:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdac);
 800132a:	d054      	beq.n	80013d6 <HAL_DAC_Start_DMA+0xbe>
 800132c:	2401      	movs	r4, #1
 800132e:	716c      	strb	r4, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001330:	7128      	strb	r0, [r5, #4]
 8001332:	682c      	ldr	r4, [r5, #0]

  if(Channel == DAC_CHANNEL_1)
 8001334:	b9e6      	cbnz	r6, 8001370 <HAL_DAC_Start_DMA+0x58>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001336:	68a8      	ldr	r0, [r5, #8]
 8001338:	4f27      	ldr	r7, [pc, #156]	; (80013d8 <HAL_DAC_Start_DMA+0xc0>)
 800133a:	62c7      	str	r7, [r0, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800133c:	4f27      	ldr	r7, [pc, #156]	; (80013dc <HAL_DAC_Start_DMA+0xc4>)
 800133e:	6307      	str	r7, [r0, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001340:	4f27      	ldr	r7, [pc, #156]	; (80013e0 <HAL_DAC_Start_DMA+0xc8>)
 8001342:	6347      	str	r7, [r0, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001344:	6827      	ldr	r7, [r4, #0]

    /* Case of use of channel 1 */
    switch(Alignment)
 8001346:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001348:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 800134c:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 800134e:	d009      	beq.n	8001364 <HAL_DAC_Start_DMA+0x4c>
 8001350:	2a08      	cmp	r2, #8
 8001352:	d00a      	beq.n	800136a <HAL_DAC_Start_DMA+0x52>
 8001354:	2a00      	cmp	r2, #0
 8001356:	d13c      	bne.n	80013d2 <HAL_DAC_Start_DMA+0xba>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001358:	f104 0208 	add.w	r2, r4, #8

  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800135c:	6827      	ldr	r7, [r4, #0]
 800135e:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8001362:	e01a      	b.n	800139a <HAL_DAC_Start_DMA+0x82>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001364:	f104 020c 	add.w	r2, r4, #12
        break;
 8001368:	e7f8      	b.n	800135c <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800136a:	f104 0210 	add.w	r2, r4, #16
        break;
 800136e:	e7f5      	b.n	800135c <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001370:	68e8      	ldr	r0, [r5, #12]
 8001372:	4f1c      	ldr	r7, [pc, #112]	; (80013e4 <HAL_DAC_Start_DMA+0xcc>)
 8001374:	62c7      	str	r7, [r0, #44]	; 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001376:	4f1c      	ldr	r7, [pc, #112]	; (80013e8 <HAL_DAC_Start_DMA+0xd0>)
 8001378:	6307      	str	r7, [r0, #48]	; 0x30
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800137a:	4f1c      	ldr	r7, [pc, #112]	; (80013ec <HAL_DAC_Start_DMA+0xd4>)
 800137c:	6347      	str	r7, [r0, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800137e:	6827      	ldr	r7, [r4, #0]
    switch(Alignment)
 8001380:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001382:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8001386:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 8001388:	d016      	beq.n	80013b8 <HAL_DAC_Start_DMA+0xa0>
 800138a:	2a08      	cmp	r2, #8
 800138c:	d017      	beq.n	80013be <HAL_DAC_Start_DMA+0xa6>
 800138e:	b9f2      	cbnz	r2, 80013ce <HAL_DAC_Start_DMA+0xb6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001390:	f104 0214 	add.w	r2, r4, #20
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001394:	6827      	ldr	r7, [r4, #0]
 8001396:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800139a:	6027      	str	r7, [r4, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800139c:	f000 faf8 	bl	8001990 <HAL_DMA_Start_IT>
    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80013a0:	2300      	movs	r3, #0
 80013a2:	716b      	strb	r3, [r5, #5]

  if (status == HAL_OK)
 80013a4:	b970      	cbnz	r0, 80013c4 <HAL_DAC_Start_DMA+0xac>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80013a6:	682b      	ldr	r3, [r5, #0]
 80013a8:	f006 0110 	and.w	r1, r6, #16
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	2601      	movs	r6, #1
 80013b0:	408e      	lsls	r6, r1
 80013b2:	4316      	orrs	r6, r2
 80013b4:	601e      	str	r6, [r3, #0]
 80013b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80013b8:	f104 0218 	add.w	r2, r4, #24
        break;
 80013bc:	e7ea      	b.n	8001394 <HAL_DAC_Start_DMA+0x7c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80013be:	f104 021c 	add.w	r2, r4, #28
        break;
 80013c2:	e7e7      	b.n	8001394 <HAL_DAC_Start_DMA+0x7c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80013c4:	692b      	ldr	r3, [r5, #16]
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	612b      	str	r3, [r5, #16]
 80013cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpreg = 0U;
 80013ce:	2200      	movs	r2, #0
 80013d0:	e7e0      	b.n	8001394 <HAL_DAC_Start_DMA+0x7c>
 80013d2:	4632      	mov	r2, r6
 80013d4:	e7c2      	b.n	800135c <HAL_DAC_Start_DMA+0x44>
  }

  /* Return function status */
  return status;
}
 80013d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013d8:	080013f3 	.word	0x080013f3
 80013dc:	08001405 	.word	0x08001405
 80013e0:	08001411 	.word	0x08001411
 80013e4:	08001541 	.word	0x08001541
 80013e8:	08001551 	.word	0x08001551
 80013ec:	0800155b 	.word	0x0800155b

080013f0 <HAL_DAC_ConvCpltCallbackCh1>:
 80013f0:	4770      	bx	lr

080013f2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80013f2:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013f4:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7ff fffa 	bl	80013f0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80013fc:	2301      	movs	r3, #1
 80013fe:	7123      	strb	r3, [r4, #4]
 8001400:	bd10      	pop	{r4, pc}

08001402 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8001402:	4770      	bx	lr

08001404 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001404:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001406:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001408:	f7ff fffb 	bl	8001402 <HAL_DAC_ConvHalfCpltCallbackCh1>
 800140c:	bd08      	pop	{r3, pc}

0800140e <HAL_DAC_ErrorCallbackCh1>:
 800140e:	4770      	bx	lr

08001410 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001410:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001412:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001414:	6923      	ldr	r3, [r4, #16]
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800141c:	4620      	mov	r0, r4
 800141e:	f7ff fff6 	bl	800140e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001422:	2301      	movs	r3, #1
 8001424:	7123      	strb	r3, [r4, #4]
 8001426:	bd10      	pop	{r4, pc}

08001428 <HAL_DAC_ConfigChannel>:
{
 8001428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdac);
 800142a:	7943      	ldrb	r3, [r0, #5]
 800142c:	2b01      	cmp	r3, #1
{
 800142e:	4604      	mov	r4, r0
 8001430:	460d      	mov	r5, r1
 8001432:	4616      	mov	r6, r2
 8001434:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8001438:	d063      	beq.n	8001502 <HAL_DAC_ConfigChannel+0xda>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800143a:	680b      	ldr	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800143c:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 800143e:	2201      	movs	r2, #1
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001440:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 8001442:	7162      	strb	r2, [r4, #5]
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001444:	d125      	bne.n	8001492 <HAL_DAC_ConfigChannel+0x6a>
    if (Channel == DAC_CHANNEL_1)
 8001446:	2e00      	cmp	r6, #0
 8001448:	d16c      	bne.n	8001524 <HAL_DAC_ConfigChannel+0xfc>
      tickstart = HAL_GetTick();
 800144a:	f7ff fe51 	bl	80010f0 <HAL_GetTick>
 800144e:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001454:	041b      	lsls	r3, r3, #16
 8001456:	d455      	bmi.n	8001504 <HAL_DAC_ConfigChannel+0xdc>
      HAL_Delay(1);
 8001458:	2001      	movs	r0, #1
 800145a:	f7ff fe4f 	bl	80010fc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800145e:	6823      	ldr	r3, [r4, #0]
 8001460:	69aa      	ldr	r2, [r5, #24]
 8001462:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001464:	6821      	ldr	r1, [r4, #0]
 8001466:	f006 0010 	and.w	r0, r6, #16
 800146a:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800146c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001470:	4083      	lsls	r3, r0
 8001472:	ea22 0203 	bic.w	r2, r2, r3
 8001476:	69eb      	ldr	r3, [r5, #28]
 8001478:	4083      	lsls	r3, r0
 800147a:	431a      	orrs	r2, r3
 800147c:	648a      	str	r2, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800147e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001480:	22ff      	movs	r2, #255	; 0xff
 8001482:	4082      	lsls	r2, r0
 8001484:	ea23 0302 	bic.w	r3, r3, r2
 8001488:	6a2a      	ldr	r2, [r5, #32]
 800148a:	fa02 f000 	lsl.w	r0, r2, r0
 800148e:	4303      	orrs	r3, r0
 8001490:	64cb      	str	r3, [r1, #76]	; 0x4c
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001492:	692b      	ldr	r3, [r5, #16]
 8001494:	2b01      	cmp	r3, #1
 8001496:	f006 0210 	and.w	r2, r6, #16
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	d108      	bne.n	80014b0 <HAL_DAC_ConfigChannel+0x88>
  tmpreg1 = hdac->Instance->CCR;
 800149e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80014a0:	201f      	movs	r0, #31
 80014a2:	4090      	lsls	r0, r2
 80014a4:	ea21 0000 	bic.w	r0, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80014a8:	6969      	ldr	r1, [r5, #20]
 80014aa:	4091      	lsls	r1, r2
 80014ac:	4301      	orrs	r1, r0
  hdac->Instance->CCR = tmpreg1;
 80014ae:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg1 = hdac->Instance->MCR;
 80014b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80014b2:	68ae      	ldr	r6, [r5, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80014b4:	2007      	movs	r0, #7
 80014b6:	4090      	lsls	r0, r2
 80014b8:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80014bc:	6829      	ldr	r1, [r5, #0]
 80014be:	4331      	orrs	r1, r6
 80014c0:	68ee      	ldr	r6, [r5, #12]
 80014c2:	4331      	orrs	r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80014c4:	4091      	lsls	r1, r2
 80014c6:	4301      	orrs	r1, r0
  hdac->Instance->MCR = tmpreg1;
 80014c8:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80014ca:	6819      	ldr	r1, [r3, #0]
 80014cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014d0:	4090      	lsls	r0, r2
 80014d2:	ea21 0100 	bic.w	r1, r1, r0
 80014d6:	6019      	str	r1, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 80014d8:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80014da:	f640 70fc 	movw	r0, #4092	; 0xffc
 80014de:	4090      	lsls	r0, r2
 80014e0:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80014e4:	6869      	ldr	r1, [r5, #4]
 80014e6:	4091      	lsls	r1, r2
 80014e8:	4301      	orrs	r1, r0
  hdac->Instance->CR = tmpreg1;
 80014ea:	6019      	str	r1, [r3, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80014ec:	6819      	ldr	r1, [r3, #0]
 80014ee:	20c0      	movs	r0, #192	; 0xc0
 80014f0:	fa00 f202 	lsl.w	r2, r0, r2
 80014f4:	ea21 0202 	bic.w	r2, r1, r2
 80014f8:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hdac);
 80014fa:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80014fc:	2301      	movs	r3, #1
 80014fe:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001500:	7160      	strb	r0, [r4, #5]
}
 8001502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001504:	f7ff fdf4 	bl	80010f0 <HAL_GetTick>
 8001508:	1bc0      	subs	r0, r0, r7
 800150a:	2801      	cmp	r0, #1
 800150c:	d9a0      	bls.n	8001450 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800150e:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001510:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001512:	f043 0308 	orr.w	r3, r3, #8
 8001516:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001518:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 800151a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800151c:	f7ff fde8 	bl	80010f0 <HAL_GetTick>
 8001520:	2801      	cmp	r0, #1
 8001522:	d8f4      	bhi.n	800150e <HAL_DAC_ConfigChannel+0xe6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001528:	2b00      	cmp	r3, #0
 800152a:	dbf7      	blt.n	800151c <HAL_DAC_ConfigChannel+0xf4>
      HAL_Delay(1);
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff fde5 	bl	80010fc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	69aa      	ldr	r2, [r5, #24]
 8001536:	645a      	str	r2, [r3, #68]	; 0x44
 8001538:	e794      	b.n	8001464 <HAL_DAC_ConfigChannel+0x3c>

0800153a <HAL_DACEx_ConvCpltCallbackCh2>:
 800153a:	4770      	bx	lr

0800153c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 800153c:	4770      	bx	lr

0800153e <HAL_DACEx_ErrorCallbackCh2>:
 800153e:	4770      	bx	lr

08001540 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001540:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001542:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff fff8 	bl	800153a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 800154a:	2301      	movs	r3, #1
 800154c:	7123      	strb	r3, [r4, #4]
 800154e:	bd10      	pop	{r4, pc}

08001550 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001550:	b508      	push	{r3, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001552:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001554:	f7ff fff2 	bl	800153c <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8001558:	bd08      	pop	{r3, pc}

0800155a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800155a:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800155c:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800155e:	6923      	ldr	r3, [r4, #16]
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001566:	4620      	mov	r0, r4
 8001568:	f7ff ffe9 	bl	800153e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 800156c:	2301      	movs	r3, #1
 800156e:	7123      	strb	r3, [r4, #4]
 8001570:	bd10      	pop	{r4, pc}

08001572 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001572:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001574:	6803      	ldr	r3, [r0, #0]
 8001576:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 800157a:	b93a      	cbnz	r2, 800158c <DFSDM_RegConvStart+0x1a>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001582:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001584:	2901      	cmp	r1, #1
 8001586:	d11c      	bne.n	80015c2 <DFSDM_RegConvStart+0x50>
 8001588:	2302      	movs	r3, #2
 800158a:	e01b      	b.n	80015c4 <DFSDM_RegConvStart+0x52>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800159a:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800159c:	681a      	ldr	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800159e:	2903      	cmp	r1, #3
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80015a0:	f042 0201 	orr.w	r2, r2, #1
 80015a4:	601a      	str	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80015a6:	d1ed      	bne.n	8001584 <DFSDM_RegConvStart+0x12>
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80015a8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80015aa:	b91a      	cbnz	r2, 80015b4 <DFSDM_RegConvStart+0x42>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	f042 0202 	orr.w	r2, r2, #2
 80015b2:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80015b4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	bf0c      	ite	eq
 80015bc:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 80015be:	2301      	movne	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015c0:	6483      	str	r3, [r0, #72]	; 0x48
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80015c2:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80015c4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 80015c8:	4770      	bx	lr
	...

080015cc <DFSDM_GetChannelFromInstance>:
  if (Instance == DFSDM1_Channel0)
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <DFSDM_GetChannelFromInstance+0x54>)
 80015ce:	4298      	cmp	r0, r3
 80015d0:	d017      	beq.n	8001602 <DFSDM_GetChannelFromInstance+0x36>
  else if (Instance == DFSDM1_Channel1)
 80015d2:	3320      	adds	r3, #32
 80015d4:	4298      	cmp	r0, r3
 80015d6:	d016      	beq.n	8001606 <DFSDM_GetChannelFromInstance+0x3a>
  else if (Instance == DFSDM1_Channel2)
 80015d8:	3320      	adds	r3, #32
 80015da:	4298      	cmp	r0, r3
 80015dc:	d015      	beq.n	800160a <DFSDM_GetChannelFromInstance+0x3e>
  else if (Instance == DFSDM1_Channel3)
 80015de:	3320      	adds	r3, #32
 80015e0:	4298      	cmp	r0, r3
 80015e2:	d014      	beq.n	800160e <DFSDM_GetChannelFromInstance+0x42>
  else if (Instance == DFSDM1_Channel4)
 80015e4:	3320      	adds	r3, #32
 80015e6:	4298      	cmp	r0, r3
 80015e8:	d013      	beq.n	8001612 <DFSDM_GetChannelFromInstance+0x46>
  else if (Instance == DFSDM1_Channel5)
 80015ea:	3320      	adds	r3, #32
 80015ec:	4298      	cmp	r0, r3
 80015ee:	d012      	beq.n	8001616 <DFSDM_GetChannelFromInstance+0x4a>
  else if (Instance == DFSDM1_Channel6)
 80015f0:	3320      	adds	r3, #32
 80015f2:	4298      	cmp	r0, r3
 80015f4:	d011      	beq.n	800161a <DFSDM_GetChannelFromInstance+0x4e>
    channel = 7;
 80015f6:	3320      	adds	r3, #32
 80015f8:	4298      	cmp	r0, r3
 80015fa:	bf0c      	ite	eq
 80015fc:	2007      	moveq	r0, #7
 80015fe:	2000      	movne	r0, #0
 8001600:	4770      	bx	lr
    channel = 0;
 8001602:	2000      	movs	r0, #0
 8001604:	4770      	bx	lr
    channel = 1;
 8001606:	2001      	movs	r0, #1
 8001608:	4770      	bx	lr
    channel = 2;
 800160a:	2002      	movs	r0, #2
 800160c:	4770      	bx	lr
    channel = 3;
 800160e:	2003      	movs	r0, #3
 8001610:	4770      	bx	lr
    channel = 4;
 8001612:	2004      	movs	r0, #4
 8001614:	4770      	bx	lr
    channel = 5;
 8001616:	2005      	movs	r0, #5
 8001618:	4770      	bx	lr
    channel = 6;
 800161a:	2006      	movs	r0, #6
}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40016000 	.word	0x40016000

08001624 <HAL_DFSDM_ChannelInit>:
{
 8001624:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 8001626:	4604      	mov	r4, r0
 8001628:	2800      	cmp	r0, #0
 800162a:	d067      	beq.n	80016fc <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800162c:	6800      	ldr	r0, [r0, #0]
 800162e:	4d34      	ldr	r5, [pc, #208]	; (8001700 <HAL_DFSDM_ChannelInit+0xdc>)
 8001630:	f7ff ffcc 	bl	80015cc <DFSDM_GetChannelFromInstance>
 8001634:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d15f      	bne.n	80016fc <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800163c:	4620      	mov	r0, r4
 800163e:	f002 fab7 	bl	8003bb0 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <HAL_DFSDM_ChannelInit+0xe0>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	3201      	adds	r2, #1
 8001648:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d119      	bne.n	8001684 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <HAL_DFSDM_ChannelInit+0xe4>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001658:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68a1      	ldr	r1, [r4, #8]
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8001668:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800166a:	7922      	ldrb	r2, [r4, #4]
 800166c:	2a01      	cmp	r2, #1
 800166e:	d105      	bne.n	800167c <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001670:	68e1      	ldr	r1, [r4, #12]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	3901      	subs	r1, #1
 8001676:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800167a:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001682:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001684:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001686:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001688:	6803      	ldr	r3, [r0, #0]
 800168a:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 800168e:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001690:	6923      	ldr	r3, [r4, #16]
 8001692:	6802      	ldr	r2, [r0, #0]
 8001694:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001696:	69a1      	ldr	r1, [r4, #24]
 8001698:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800169a:	4313      	orrs	r3, r2
 800169c:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800169e:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80016a0:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80016a2:	f023 030f 	bic.w	r3, r3, #15
 80016a6:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80016a8:	69e3      	ldr	r3, [r4, #28]
 80016aa:	6802      	ldr	r2, [r0, #0]
 80016ac:	430b      	orrs	r3, r1
 80016ae:	4313      	orrs	r3, r2
 80016b0:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80016b2:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80016b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80016b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80016b8:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 80016bc:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80016be:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80016c0:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80016c2:	430b      	orrs	r3, r1
 80016c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80016c8:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80016ca:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80016cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80016d4:	6843      	ldr	r3, [r0, #4]
 80016d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80016da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016e0:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80016e2:	6803      	ldr	r3, [r0, #0]
 80016e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e8:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80016f0:	f7ff ff6c 	bl	80015cc <DFSDM_GetChannelFromInstance>
 80016f4:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 80016f8:	2000      	movs	r0, #0
 80016fa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80016fc:	2001      	movs	r0, #1
}
 80016fe:	bd38      	pop	{r3, r4, r5, pc}
 8001700:	2000020c 	.word	0x2000020c
 8001704:	2000022c 	.word	0x2000022c
 8001708:	40016000 	.word	0x40016000

0800170c <HAL_DFSDM_FilterInit>:
{
 800170c:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_filter == NULL)
 800170e:	4604      	mov	r4, r0
 8001710:	2800      	cmp	r0, #0
 8001712:	d069      	beq.n	80017e8 <HAL_DFSDM_FilterInit+0xdc>
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001714:	6802      	ldr	r2, [r0, #0]
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HAL_DFSDM_FilterInit+0xe0>)
 8001718:	429a      	cmp	r2, r3
 800171a:	d105      	bne.n	8001728 <HAL_DFSDM_FilterInit+0x1c>
 800171c:	6840      	ldr	r0, [r0, #4]
 800171e:	2801      	cmp	r0, #1
 8001720:	d063      	beq.n	80017ea <HAL_DFSDM_FilterInit+0xde>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001722:	68e0      	ldr	r0, [r4, #12]
 8001724:	2801      	cmp	r0, #1
 8001726:	d060      	beq.n	80017ea <HAL_DFSDM_FilterInit+0xde>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001728:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800172a:	2201      	movs	r2, #1
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800172c:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800172e:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001730:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001732:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001734:	4620      	mov	r0, r4
 8001736:	f002 f9b5 	bl	8003aa4 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800173a:	6823      	ldr	r3, [r4, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800173c:	7c20      	ldrb	r0, [r4, #16]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001744:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001746:	7a22      	ldrb	r2, [r4, #8]
 8001748:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	bf0c      	ite	eq
 800174e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001752:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 8001756:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001758:	7a62      	ldrb	r2, [r4, #9]
 800175a:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	bf0c      	ite	eq
 8001760:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001764:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 8001768:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800176a:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800176c:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800176e:	f422 42ce 	bic.w	r2, r2, #26368	; 0x6700
 8001772:	f022 0208 	bic.w	r2, r2, #8
 8001776:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001778:	2d02      	cmp	r5, #2
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800177a:	bf01      	itttt	eq
 800177c:	681a      	ldreq	r2, [r3, #0]
 800177e:	6961      	ldreq	r1, [r4, #20]
 8001780:	430a      	orreq	r2, r1
 8001782:	601a      	streq	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001784:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001786:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001788:	bf0c      	ite	eq
 800178a:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800178e:	f022 0210 	bicne.w	r2, r2, #16
 8001792:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001794:	7c62      	ldrb	r2, [r4, #17]
 8001796:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	bf0c      	ite	eq
 800179c:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80017a0:	f022 0220 	bicne.w	r2, r2, #32
 80017a4:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 80017ac:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80017b0:	615a      	str	r2, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80017b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017b4:	6959      	ldr	r1, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80017b6:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017b8:	430a      	orrs	r2, r1
 80017ba:	69e1      	ldr	r1, [r4, #28]
 80017bc:	430a      	orrs	r2, r1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80017be:	6a21      	ldr	r1, [r4, #32]
 80017c0:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80017c6:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80017c8:	6862      	ldr	r2, [r4, #4]
 80017ca:	6362      	str	r2, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80017cc:	69a2      	ldr	r2, [r4, #24]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80017ce:	63a5      	str	r5, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80017d0:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80017d2:	681a      	ldr	r2, [r3, #0]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80017d4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80017d8:	f042 0201 	orr.w	r2, r2, #1
 80017dc:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80017de:	2301      	movs	r3, #1
 80017e0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 80017e4:	2000      	movs	r0, #0
 80017e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80017e8:	2001      	movs	r0, #1
}
 80017ea:	bd38      	pop	{r3, r4, r5, pc}
 80017ec:	40016100 	.word	0x40016100

080017f0 <HAL_DFSDM_FilterConfigRegChannel>:
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80017f0:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2bfd      	cmp	r3, #253	; 0xfd
{
 80017fa:	b510      	push	{r4, lr}
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80017fc:	d813      	bhi.n	8001826 <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80017fe:	6803      	ldr	r3, [r0, #0]
 8001800:	681c      	ldr	r4, [r3, #0]
 8001802:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 8001806:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800180a:	601c      	str	r4, [r3, #0]
 800180c:	0209      	lsls	r1, r1, #8
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800180e:	681c      	ldr	r4, [r3, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001810:	2a01      	cmp	r2, #1
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001812:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8001816:	bf08      	it	eq
 8001818:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800181c:	4321      	orrs	r1, r4
 800181e:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001820:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8001822:	2000      	movs	r0, #0
 8001824:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001826:	2001      	movs	r0, #1
}
 8001828:	bd10      	pop	{r4, pc}
	...

0800182c <HAL_DFSDM_FilterRegularStart_DMA>:
{
 800182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182e:	4613      	mov	r3, r2
 8001830:	4605      	mov	r5, r0
  if ((pData == NULL) || (Length == 0U))
 8001832:	460a      	mov	r2, r1
 8001834:	b351      	cbz	r1, 800188c <HAL_DFSDM_FilterRegularStart_DMA+0x60>
 8001836:	b34b      	cbz	r3, 800188c <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001838:	6807      	ldr	r7, [r0, #0]
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	0289      	lsls	r1, r1, #10
 800183e:	d525      	bpl.n	800188c <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001840:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001842:	b949      	cbnz	r1, 8001858 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
 8001844:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001846:	b939      	cbnz	r1, 8001858 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001848:	6a81      	ldr	r1, [r0, #40]	; 0x28
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800184a:	69c8      	ldr	r0, [r1, #28]
 800184c:	b908      	cbnz	r0, 8001852 <HAL_DFSDM_FilterRegularStart_DMA+0x26>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800184e:	2b01      	cmp	r3, #1
 8001850:	d11c      	bne.n	800188c <HAL_DFSDM_FilterRegularStart_DMA+0x60>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001852:	69c9      	ldr	r1, [r1, #28]
 8001854:	2920      	cmp	r1, #32
 8001856:	d019      	beq.n	800188c <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001858:	f895 604c 	ldrb.w	r6, [r5, #76]	; 0x4c
 800185c:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
 8001860:	2e01      	cmp	r6, #1
 8001862:	d113      	bne.n	800188c <HAL_DFSDM_FilterRegularStart_DMA+0x60>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001864:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001866:	490d      	ldr	r1, [pc, #52]	; (800189c <HAL_DFSDM_FilterRegularStart_DMA+0x70>)
 8001868:	62c1      	str	r1, [r0, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800186a:	490d      	ldr	r1, [pc, #52]	; (80018a0 <HAL_DFSDM_FilterRegularStart_DMA+0x74>)
 800186c:	6341      	str	r1, [r0, #52]	; 0x34
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800186e:	69c1      	ldr	r1, [r0, #28]
 8001870:	4c0c      	ldr	r4, [pc, #48]	; (80018a4 <HAL_DFSDM_FilterRegularStart_DMA+0x78>)
 8001872:	2920      	cmp	r1, #32
 8001874:	bf18      	it	ne
 8001876:	2400      	movne	r4, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001878:	6304      	str	r4, [r0, #48]	; 0x30
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800187a:	f107 011c 	add.w	r1, r7, #28
 800187e:	f000 f887 	bl	8001990 <HAL_DMA_Start_IT>
 8001882:	4604      	mov	r4, r0
 8001884:	b120      	cbz	r0, 8001890 <HAL_DFSDM_FilterRegularStart_DMA+0x64>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001886:	23ff      	movs	r3, #255	; 0xff
 8001888:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
    status = HAL_ERROR;
 800188c:	2401      	movs	r4, #1
 800188e:	e002      	b.n	8001896 <HAL_DFSDM_FilterRegularStart_DMA+0x6a>
      DFSDM_RegConvStart(hdfsdm_filter);
 8001890:	4628      	mov	r0, r5
 8001892:	f7ff fe6e 	bl	8001572 <DFSDM_RegConvStart>
}
 8001896:	4620      	mov	r0, r4
 8001898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800189a:	bf00      	nop
 800189c:	080018a9 	.word	0x080018a9
 80018a0:	080018bf 	.word	0x080018bf
 80018a4:	080018b3 	.word	0x080018b3

080018a8 <DFSDM_DMARegularConvCplt>:
{
 80018a8:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80018aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80018ac:	f003 f868 	bl	8004980 <HAL_DFSDM_FilterRegConvCpltCallback>
 80018b0:	bd08      	pop	{r3, pc}

080018b2 <DFSDM_DMARegularHalfConvCplt>:
{
 80018b2:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80018b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80018b6:	f003 f851 	bl	800495c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
 80018ba:	bd08      	pop	{r3, pc}

080018bc <HAL_DFSDM_FilterErrorCallback>:
{
 80018bc:	4770      	bx	lr

080018be <DFSDM_DMAError>:
{
 80018be:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80018c2:	2303      	movs	r3, #3
 80018c4:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80018c6:	f7ff fff9 	bl	80018bc <HAL_DFSDM_FilterErrorCallback>
 80018ca:	bd08      	pop	{r3, pc}

080018cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018cc:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018ce:	2800      	cmp	r0, #0
 80018d0:	d04e      	beq.n	8001970 <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018d2:	6801      	ldr	r1, [r0, #0]
 80018d4:	4b27      	ldr	r3, [pc, #156]	; (8001974 <HAL_DMA_Init+0xa8>)
 80018d6:	4299      	cmp	r1, r3
 80018d8:	f04f 0414 	mov.w	r4, #20
 80018dc:	d840      	bhi.n	8001960 <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018de:	4a26      	ldr	r2, [pc, #152]	; (8001978 <HAL_DMA_Init+0xac>)
 80018e0:	440a      	add	r2, r1
 80018e2:	fbb2 f2f4 	udiv	r2, r2, r4
 80018e6:	0092      	lsls	r2, r2, #2
 80018e8:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80018ea:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80018ee:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018f0:	2302      	movs	r3, #2
 80018f2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018f6:	6884      	ldr	r4, [r0, #8]
 80018f8:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018fa:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80018fc:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80018fe:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001900:	432b      	orrs	r3, r5
 8001902:	6945      	ldr	r5, [r0, #20]
 8001904:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001906:	6985      	ldr	r5, [r0, #24]
 8001908:	432b      	orrs	r3, r5
 800190a:	69c5      	ldr	r5, [r0, #28]
 800190c:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800190e:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001910:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001914:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001918:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800191a:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800191c:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8001920:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001922:	d014      	beq.n	800194e <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001924:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_DMA_Init+0xb0>)
 8001928:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800192a:	bf0c      	ite	eq
 800192c:	4914      	ldreq	r1, [pc, #80]	; (8001980 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800192e:	4915      	ldrne	r1, [pc, #84]	; (8001984 <HAL_DMA_Init+0xb8>)
 8001930:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001932:	680a      	ldr	r2, [r1, #0]
 8001934:	f003 031c 	and.w	r3, r3, #28
 8001938:	240f      	movs	r4, #15
 800193a:	409c      	lsls	r4, r3
 800193c:	ea22 0204 	bic.w	r2, r2, r4
 8001940:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001942:	6842      	ldr	r2, [r0, #4]
 8001944:	680c      	ldr	r4, [r1, #0]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	4323      	orrs	r3, r4
 800194c:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194e:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001950:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001952:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001954:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001958:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 800195c:	4618      	mov	r0, r3
 800195e:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_DMA_Init+0xbc>)
 8001962:	440b      	add	r3, r1
 8001964:	fbb3 f3f4 	udiv	r3, r3, r4
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_DMA_Init+0xc0>)
 800196e:	e7be      	b.n	80018ee <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 8001970:	2001      	movs	r0, #1
}
 8001972:	bd30      	pop	{r4, r5, pc}
 8001974:	40020407 	.word	0x40020407
 8001978:	bffdfff8 	.word	0xbffdfff8
 800197c:	40020000 	.word	0x40020000
 8001980:	400200a8 	.word	0x400200a8
 8001984:	400204a8 	.word	0x400204a8
 8001988:	bffdfbf8 	.word	0xbffdfbf8
 800198c:	40020400 	.word	0x40020400

08001990 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001990:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001992:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001996:	2c01      	cmp	r4, #1
 8001998:	d038      	beq.n	8001a0c <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 800199a:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 800199e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80019a0:	b2ed      	uxtb	r5, r5
 80019a2:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80019a4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 80019a8:	f04f 0600 	mov.w	r6, #0
 80019ac:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 80019b0:	d12a      	bne.n	8001a08 <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019b2:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019b6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b8:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80019ba:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80019bc:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80019be:	f026 0601 	bic.w	r6, r6, #1
 80019c2:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80019c4:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80019c6:	f006 061c 	and.w	r6, r6, #28
 80019ca:	40b5      	lsls	r5, r6
 80019cc:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019ce:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019d0:	6883      	ldr	r3, [r0, #8]
 80019d2:	6805      	ldr	r5, [r0, #0]
 80019d4:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80019d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019d8:	bf0b      	itete	eq
 80019da:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80019dc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80019de:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80019e0:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80019e2:	b14b      	cbz	r3, 80019f8 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019ea:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80019ec:	682b      	ldr	r3, [r5, #0]
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019f4:	2000      	movs	r0, #0
 80019f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	f023 0304 	bic.w	r3, r3, #4
 80019fe:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	f043 030a 	orr.w	r3, r3, #10
 8001a06:	e7f0      	b.n	80019ea <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 8001a08:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001a0c:	2002      	movs	r0, #2
}
 8001a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a10 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a10:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001a14:	2a02      	cmp	r2, #2
{
 8001a16:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a18:	d003      	beq.n	8001a22 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001a1e:	2001      	movs	r0, #1
 8001a20:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a22:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a24:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a26:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8001a28:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a2a:	f021 010e 	bic.w	r1, r1, #14
 8001a2e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001a30:	6811      	ldr	r1, [r2, #0]
 8001a32:	f021 0101 	bic.w	r1, r1, #1
 8001a36:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	f002 021c 	and.w	r2, r2, #28
 8001a40:	fa01 f202 	lsl.w	r2, r1, r2
 8001a44:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001a46:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001a48:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001a4c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001a50:	b113      	cbz	r3, 8001a58 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8001a52:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001a54:	4620      	mov	r0, r4
 8001a56:	bd10      	pop	{r4, pc}
 8001a58:	4618      	mov	r0, r3
}
 8001a5a:	bd10      	pop	{r4, pc}

08001a5c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a5c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a5e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001a60:	6803      	ldr	r3, [r0, #0]
{
 8001a62:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a64:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a68:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001a6a:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a6c:	2404      	movs	r4, #4
 8001a6e:	4094      	lsls	r4, r2
 8001a70:	4226      	tst	r6, r4
 8001a72:	d00e      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x36>
 8001a74:	f015 0f04 	tst.w	r5, #4
 8001a78:	d00b      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a7e:	bf5e      	ittt	pl
 8001a80:	681a      	ldrpl	r2, [r3, #0]
 8001a82:	f022 0204 	bicpl.w	r2, r2, #4
 8001a86:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001a88:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001a8a:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001a8c:	b373      	cbz	r3, 8001aec <HAL_DMA_IRQHandler+0x90>
}
 8001a8e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001a90:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001a92:	2402      	movs	r4, #2
 8001a94:	4094      	lsls	r4, r2
 8001a96:	4226      	tst	r6, r4
 8001a98:	d012      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x64>
 8001a9a:	f015 0f02 	tst.w	r5, #2
 8001a9e:	d00f      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	0695      	lsls	r5, r2, #26
 8001aa4:	d406      	bmi.n	8001ab4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	f022 020a 	bic.w	r2, r2, #10
 8001aac:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001ab4:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ab6:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001ab8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001abc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001abe:	e7e5      	b.n	8001a8c <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001ac0:	2408      	movs	r4, #8
 8001ac2:	4094      	lsls	r4, r2
 8001ac4:	4234      	tst	r4, r6
 8001ac6:	d011      	beq.n	8001aec <HAL_DMA_IRQHandler+0x90>
 8001ac8:	072c      	lsls	r4, r5, #28
 8001aca:	d50f      	bpl.n	8001aec <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001acc:	681c      	ldr	r4, [r3, #0]
 8001ace:	f024 040e 	bic.w	r4, r4, #14
 8001ad2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	fa03 f202 	lsl.w	r2, r3, r2
 8001ada:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001adc:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001ade:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001ae8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001aea:	e7cf      	b.n	8001a8c <HAL_DMA_IRQHandler+0x30>
}
 8001aec:	bc70      	pop	{r4, r5, r6}
 8001aee:	4770      	bx	lr

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001af4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001ca4 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001afc:	4c67      	ldr	r4, [pc, #412]	; (8001c9c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afe:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001b00:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b02:	9a01      	ldr	r2, [sp, #4]
 8001b04:	40da      	lsrs	r2, r3
 8001b06:	d102      	bne.n	8001b0e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001b08:	b005      	add	sp, #20
 8001b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b0e:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001b10:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b12:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001b14:	ea12 0e06 	ands.w	lr, r2, r6
 8001b18:	f000 80b1 	beq.w	8001c7e <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1c:	684a      	ldr	r2, [r1, #4]
 8001b1e:	f022 0710 	bic.w	r7, r2, #16
 8001b22:	2f02      	cmp	r7, #2
 8001b24:	d116      	bne.n	8001b54 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001b26:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001b2a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b2e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001b32:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b36:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001b3a:	f04f 0c0f 	mov.w	ip, #15
 8001b3e:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001b42:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b46:	690d      	ldr	r5, [r1, #16]
 8001b48:	fa05 f50a 	lsl.w	r5, r5, sl
 8001b4c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001b50:	f8c9 5020 	str.w	r5, [r9, #32]
 8001b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b58:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001b5a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b5e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001b62:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b64:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b68:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b6c:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b70:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b72:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b76:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001b78:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b7c:	d811      	bhi.n	8001ba2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001b7e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b80:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b84:	68cf      	ldr	r7, [r1, #12]
 8001b86:	fa07 f70c 	lsl.w	r7, r7, ip
 8001b8a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001b8e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b90:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b92:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b96:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001b9a:	409f      	lsls	r7, r3
 8001b9c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001ba0:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ba2:	f1ba 0f03 	cmp.w	sl, #3
 8001ba6:	d107      	bne.n	8001bb8 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001ba8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001baa:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001bae:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001bb2:	409f      	lsls	r7, r3
 8001bb4:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8001bb6:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001bb8:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001bba:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bbc:	688e      	ldr	r6, [r1, #8]
 8001bbe:	fa06 f60c 	lsl.w	r6, r6, ip
 8001bc2:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001bc4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc6:	00d5      	lsls	r5, r2, #3
 8001bc8:	d559      	bpl.n	8001c7e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001bce:	f045 0501 	orr.w	r5, r5, #1
 8001bd2:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001bd6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001bda:	f023 0603 	bic.w	r6, r3, #3
 8001bde:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001be2:	f005 0501 	and.w	r5, r5, #1
 8001be6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001bea:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bec:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf0:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001bf2:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bf4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001bf8:	270f      	movs	r7, #15
 8001bfa:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bfe:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c02:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c06:	d03c      	beq.n	8001c82 <HAL_GPIO_Init+0x192>
 8001c08:	4d25      	ldr	r5, [pc, #148]	; (8001ca0 <HAL_GPIO_Init+0x1b0>)
 8001c0a:	42a8      	cmp	r0, r5
 8001c0c:	d03b      	beq.n	8001c86 <HAL_GPIO_Init+0x196>
 8001c0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c12:	42a8      	cmp	r0, r5
 8001c14:	d039      	beq.n	8001c8a <HAL_GPIO_Init+0x19a>
 8001c16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c1a:	42a8      	cmp	r0, r5
 8001c1c:	d037      	beq.n	8001c8e <HAL_GPIO_Init+0x19e>
 8001c1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c22:	42a8      	cmp	r0, r5
 8001c24:	d035      	beq.n	8001c92 <HAL_GPIO_Init+0x1a2>
 8001c26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c2a:	42a8      	cmp	r0, r5
 8001c2c:	d033      	beq.n	8001c96 <HAL_GPIO_Init+0x1a6>
 8001c2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c32:	42a8      	cmp	r0, r5
 8001c34:	bf14      	ite	ne
 8001c36:	2507      	movne	r5, #7
 8001c38:	2506      	moveq	r5, #6
 8001c3a:	fa05 f50c 	lsl.w	r5, r5, ip
 8001c3e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c40:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001c42:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001c44:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c48:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001c4a:	bf54      	ite	pl
 8001c4c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001c4e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001c52:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001c54:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c56:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001c58:	bf54      	ite	pl
 8001c5a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001c5c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001c60:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001c62:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c64:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001c66:	bf54      	ite	pl
 8001c68:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001c6a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8001c6e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001c70:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c72:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001c74:	bf54      	ite	pl
 8001c76:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001c78:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001c7c:	60e5      	str	r5, [r4, #12]
    position++;
 8001c7e:	3301      	adds	r3, #1
 8001c80:	e73f      	b.n	8001b02 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c82:	2500      	movs	r5, #0
 8001c84:	e7d9      	b.n	8001c3a <HAL_GPIO_Init+0x14a>
 8001c86:	2501      	movs	r5, #1
 8001c88:	e7d7      	b.n	8001c3a <HAL_GPIO_Init+0x14a>
 8001c8a:	2502      	movs	r5, #2
 8001c8c:	e7d5      	b.n	8001c3a <HAL_GPIO_Init+0x14a>
 8001c8e:	2503      	movs	r5, #3
 8001c90:	e7d3      	b.n	8001c3a <HAL_GPIO_Init+0x14a>
 8001c92:	2504      	movs	r5, #4
 8001c94:	e7d1      	b.n	8001c3a <HAL_GPIO_Init+0x14a>
 8001c96:	2505      	movs	r5, #5
 8001c98:	e7cf      	b.n	8001c3a <HAL_GPIO_Init+0x14a>
 8001c9a:	bf00      	nop
 8001c9c:	40010400 	.word	0x40010400
 8001ca0:	48000400 	.word	0x48000400
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ca8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001cac:	6959      	ldr	r1, [r3, #20]
 8001cae:	4201      	tst	r1, r0
 8001cb0:	d002      	beq.n	8001cb8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cb2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cb4:	f002 fe82 	bl	80049bc <HAL_GPIO_EXTI_Callback>
 8001cb8:	bd08      	pop	{r3, pc}
 8001cba:	bf00      	nop
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	d04a      	beq.n	8001d5e <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cc8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ccc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cd0:	b91b      	cbnz	r3, 8001cda <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cd2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cd6:	f002 facf 	bl	8004278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cda:	2324      	movs	r3, #36	; 0x24
 8001cdc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ce0:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce2:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cec:	6862      	ldr	r2, [r4, #4]
 8001cee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cf2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cf4:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf6:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d00:	d124      	bne.n	8001d4c <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d06:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d08:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d0a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d0c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d14:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d1c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d1e:	6922      	ldr	r2, [r4, #16]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	69a1      	ldr	r1, [r4, #24]
 8001d24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d28:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d2a:	6a21      	ldr	r1, [r4, #32]
 8001d2c:	69e2      	ldr	r2, [r4, #28]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	f042 0201 	orr.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d3a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001d3c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d3e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d44:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d46:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8001d4a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d4c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d50:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d52:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d54:	bf04      	itt	eq
 8001d56:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001d5a:	605a      	streq	r2, [r3, #4]
 8001d5c:	e7d4      	b.n	8001d08 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001d5e:	2001      	movs	r0, #1
}
 8001d60:	bd10      	pop	{r4, pc}

08001d62 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d62:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	2a20      	cmp	r2, #32
{
 8001d6a:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6c:	d11d      	bne.n	8001daa <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d6e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d019      	beq.n	8001daa <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d76:	2324      	movs	r3, #36	; 0x24
 8001d78:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d7c:	6803      	ldr	r3, [r0, #0]
 8001d7e:	681c      	ldr	r4, [r3, #0]
 8001d80:	f024 0401 	bic.w	r4, r4, #1
 8001d84:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d86:	681c      	ldr	r4, [r3, #0]
 8001d88:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001d8c:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d8e:	681c      	ldr	r4, [r3, #0]
 8001d90:	4321      	orrs	r1, r4
 8001d92:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	f041 0101 	orr.w	r1, r1, #1
 8001d9a:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d9c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001d9e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001da2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001daa:	2002      	movs	r0, #2
  }
}
 8001dac:	bd10      	pop	{r4, pc}

08001dae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dae:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001db4:	b2e4      	uxtb	r4, r4
 8001db6:	2c20      	cmp	r4, #32
 8001db8:	d11c      	bne.n	8001df4 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d018      	beq.n	8001df4 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc2:	2324      	movs	r3, #36	; 0x24
 8001dc4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dc8:	6803      	ldr	r3, [r0, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	f022 0201 	bic.w	r2, r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dd2:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dd4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dd8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ddc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	f042 0201 	orr.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001de8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001dec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001df4:	2002      	movs	r0, #2
  }
}
 8001df6:	bd10      	pop	{r4, pc}

08001df8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001df8:	4b02      	ldr	r3, [pc, #8]	; (8001e04 <HAL_PWREx_GetVoltageRange+0xc>)
 8001dfa:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001dfc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40007000 	.word	0x40007000

08001e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e0a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e0c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e10:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e14:	d11c      	bne.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e16:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001e1a:	d015      	beq.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e26:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e28:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001e2a:	6811      	ldr	r1, [r2, #0]
 8001e2c:	2232      	movs	r2, #50	; 0x32
 8001e2e:	434a      	muls	r2, r1
 8001e30:	490f      	ldr	r1, [pc, #60]	; (8001e70 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001e32:	fbb2 f2f1 	udiv	r2, r2, r1
 8001e36:	4619      	mov	r1, r3
 8001e38:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e3a:	6958      	ldr	r0, [r3, #20]
 8001e3c:	0540      	lsls	r0, r0, #21
 8001e3e:	d500      	bpl.n	8001e42 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001e40:	b922      	cbnz	r2, 8001e4c <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e42:	694b      	ldr	r3, [r1, #20]
 8001e44:	055b      	lsls	r3, r3, #21
 8001e46:	d40d      	bmi.n	8001e64 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e48:	2000      	movs	r0, #0
 8001e4a:	4770      	bx	lr
        wait_loop_index--;
 8001e4c:	3a01      	subs	r2, #1
 8001e4e:	e7f4      	b.n	8001e3a <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e50:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e54:	bf1f      	itttt	ne
 8001e56:	681a      	ldrne	r2, [r3, #0]
 8001e58:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001e5c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001e60:	601a      	strne	r2, [r3, #0]
 8001e62:	e7f1      	b.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001e64:	2003      	movs	r0, #3
}
 8001e66:	4770      	bx	lr
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	20000018 	.word	0x20000018
 8001e70:	000f4240 	.word	0x000f4240

08001e74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e76:	4d1e      	ldr	r5, [pc, #120]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001e78:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e7a:	00da      	lsls	r2, r3, #3
{
 8001e7c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e7e:	d518      	bpl.n	8001eb2 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e80:	f7ff ffba 	bl	8001df8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e84:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001e88:	d123      	bne.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e8a:	2c80      	cmp	r4, #128	; 0x80
 8001e8c:	d929      	bls.n	8001ee2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e8e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e90:	bf8c      	ite	hi
 8001e92:	2002      	movhi	r0, #2
 8001e94:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e96:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001e98:	6813      	ldr	r3, [r2, #0]
 8001e9a:	f023 0307 	bic.w	r3, r3, #7
 8001e9e:	4303      	orrs	r3, r0
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001ea8:	1a18      	subs	r0, r3, r0
 8001eaa:	bf18      	it	ne
 8001eac:	2001      	movne	r0, #1
 8001eae:	b003      	add	sp, #12
 8001eb0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	65ab      	str	r3, [r5, #88]	; 0x58
 8001eba:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001ec4:	f7ff ff98 	bl	8001df8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ec8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ece:	65ab      	str	r3, [r5, #88]	; 0x58
 8001ed0:	e7d8      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001ed2:	2c80      	cmp	r4, #128	; 0x80
 8001ed4:	d807      	bhi.n	8001ee6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001ed6:	d008      	beq.n	8001eea <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001ed8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001edc:	4258      	negs	r0, r3
 8001ede:	4158      	adcs	r0, r3
 8001ee0:	e7d9      	b.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	e7d7      	b.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	e7d5      	b.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eea:	2002      	movs	r0, #2
 8001eec:	e7d3      	b.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40022000 	.word	0x40022000

08001ef8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef8:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001efa:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001efc:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001efe:	f012 020c 	ands.w	r2, r2, #12
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x18>
 8001f04:	2a0c      	cmp	r2, #12
 8001f06:	d115      	bne.n	8001f34 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f08:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f0c:	2901      	cmp	r1, #1
 8001f0e:	d118      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f10:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001f12:	4820      	ldr	r0, [pc, #128]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f14:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f16:	bf55      	itete	pl
 8001f18:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f1c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f1e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f22:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001f26:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f2a:	b382      	cbz	r2, 8001f8e <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f2c:	2a0c      	cmp	r2, #12
 8001f2e:	d009      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x4c>
 8001f30:	2000      	movs	r0, #0
  return sysclockfreq;
 8001f32:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f34:	2a04      	cmp	r2, #4
 8001f36:	d029      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x94>
 8001f38:	2a08      	cmp	r2, #8
 8001f3a:	4817      	ldr	r0, [pc, #92]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f3c:	bf18      	it	ne
 8001f3e:	2000      	movne	r0, #0
 8001f40:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f42:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f44:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f46:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f48:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f4c:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8001f50:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f52:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x6c>
 8001f58:	2903      	cmp	r1, #3
 8001f5a:	d012      	beq.n	8001f82 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f5c:	68d9      	ldr	r1, [r3, #12]
 8001f5e:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001f62:	e003      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f64:	68d9      	ldr	r1, [r3, #12]
 8001f66:	480d      	ldr	r0, [pc, #52]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f68:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f6c:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f6e:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f72:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001f76:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f78:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f7a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001f7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f80:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f82:	68d9      	ldr	r1, [r3, #12]
 8001f84:	4804      	ldr	r0, [pc, #16]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f86:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001f8a:	e7ef      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8001f8c:	4803      	ldr	r0, [pc, #12]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001f8e:	4770      	bx	lr
 8001f90:	40021000 	.word	0x40021000
 8001f94:	0800aacc 	.word	0x0800aacc
 8001f98:	007a1200 	.word	0x007a1200
 8001f9c:	00f42400 	.word	0x00f42400

08001fa0 <HAL_RCC_OscConfig>:
{
 8001fa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001fa4:	4605      	mov	r5, r0
 8001fa6:	b918      	cbnz	r0, 8001fb0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001fa8:	2001      	movs	r0, #1
}
 8001faa:	b003      	add	sp, #12
 8001fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb0:	4ca5      	ldr	r4, [pc, #660]	; (8002248 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fb2:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb4:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb6:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fb8:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fba:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fbe:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fc2:	d53c      	bpl.n	800203e <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fc4:	b11e      	cbz	r6, 8001fce <HAL_RCC_OscConfig+0x2e>
 8001fc6:	2e0c      	cmp	r6, #12
 8001fc8:	d163      	bne.n	8002092 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fca:	2f01      	cmp	r7, #1
 8001fcc:	d161      	bne.n	8002092 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	0798      	lsls	r0, r3, #30
 8001fd2:	d502      	bpl.n	8001fda <HAL_RCC_OscConfig+0x3a>
 8001fd4:	69ab      	ldr	r3, [r5, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0e6      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	6a28      	ldr	r0, [r5, #32]
 8001fde:	0719      	lsls	r1, r3, #28
 8001fe0:	bf56      	itet	pl
 8001fe2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001fe6:	6823      	ldrmi	r3, [r4, #0]
 8001fe8:	091b      	lsrpl	r3, r3, #4
 8001fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fee:	4283      	cmp	r3, r0
 8001ff0:	d23a      	bcs.n	8002068 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff2:	f7ff ff3f 	bl	8001e74 <RCC_SetFlashLatencyFromMSIRange>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d1d6      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	f043 0308 	orr.w	r3, r3, #8
 8002000:	6023      	str	r3, [r4, #0]
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	6a2a      	ldr	r2, [r5, #32]
 8002006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800200a:	4313      	orrs	r3, r2
 800200c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800200e:	6863      	ldr	r3, [r4, #4]
 8002010:	69ea      	ldr	r2, [r5, #28]
 8002012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002016:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800201a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800201c:	f7ff ff6c 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8002020:	68a3      	ldr	r3, [r4, #8]
 8002022:	4a8a      	ldr	r2, [pc, #552]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002024:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002028:	5cd3      	ldrb	r3, [r2, r3]
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	40d8      	lsrs	r0, r3
 8002030:	4b87      	ldr	r3, [pc, #540]	; (8002250 <HAL_RCC_OscConfig+0x2b0>)
 8002032:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff f825 	bl	8001084 <HAL_InitTick>
        if(status != HAL_OK)
 800203a:	2800      	cmp	r0, #0
 800203c:	d1b5      	bne.n	8001faa <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203e:	682b      	ldr	r3, [r5, #0]
 8002040:	07d8      	lsls	r0, r3, #31
 8002042:	d45d      	bmi.n	8002100 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002044:	682b      	ldr	r3, [r5, #0]
 8002046:	0799      	lsls	r1, r3, #30
 8002048:	f100 809c 	bmi.w	8002184 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	0718      	lsls	r0, r3, #28
 8002050:	f100 80d0 	bmi.w	80021f4 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002054:	682b      	ldr	r3, [r5, #0]
 8002056:	0759      	lsls	r1, r3, #29
 8002058:	f100 80fc 	bmi.w	8002254 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800205c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 8165 	bne.w	800232e <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8002064:	2000      	movs	r0, #0
 8002066:	e7a0      	b.n	8001faa <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	f043 0308 	orr.w	r3, r3, #8
 800206e:	6023      	str	r3, [r4, #0]
 8002070:	6823      	ldr	r3, [r4, #0]
 8002072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002076:	4303      	orrs	r3, r0
 8002078:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800207a:	6863      	ldr	r3, [r4, #4]
 800207c:	69ea      	ldr	r2, [r5, #28]
 800207e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002082:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002086:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002088:	f7ff fef4 	bl	8001e74 <RCC_SetFlashLatencyFromMSIRange>
 800208c:	2800      	cmp	r0, #0
 800208e:	d0c5      	beq.n	800201c <HAL_RCC_OscConfig+0x7c>
 8002090:	e78a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002092:	69ab      	ldr	r3, [r5, #24]
 8002094:	b31b      	cbz	r3, 80020de <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800209e:	f7ff f827 	bl	80010f0 <HAL_GetTick>
 80020a2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	079a      	lsls	r2, r3, #30
 80020a8:	d511      	bpl.n	80020ce <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	f043 0308 	orr.w	r3, r3, #8
 80020b0:	6023      	str	r3, [r4, #0]
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	6a2a      	ldr	r2, [r5, #32]
 80020b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ba:	4313      	orrs	r3, r2
 80020bc:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	69ea      	ldr	r2, [r5, #28]
 80020c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80020ca:	6063      	str	r3, [r4, #4]
 80020cc:	e7b7      	b.n	800203e <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ce:	f7ff f80f 	bl	80010f0 <HAL_GetTick>
 80020d2:	eba0 0008 	sub.w	r0, r0, r8
 80020d6:	2802      	cmp	r0, #2
 80020d8:	d9e4      	bls.n	80020a4 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 80020da:	2003      	movs	r0, #3
 80020dc:	e765      	b.n	8001faa <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80020e6:	f7ff f803 	bl	80010f0 <HAL_GetTick>
 80020ea:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	079b      	lsls	r3, r3, #30
 80020f0:	d5a5      	bpl.n	800203e <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020f2:	f7fe fffd 	bl	80010f0 <HAL_GetTick>
 80020f6:	eba0 0008 	sub.w	r0, r0, r8
 80020fa:	2802      	cmp	r0, #2
 80020fc:	d9f6      	bls.n	80020ec <HAL_RCC_OscConfig+0x14c>
 80020fe:	e7ec      	b.n	80020da <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002100:	2e08      	cmp	r6, #8
 8002102:	d003      	beq.n	800210c <HAL_RCC_OscConfig+0x16c>
 8002104:	2e0c      	cmp	r6, #12
 8002106:	d108      	bne.n	800211a <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8002108:	2f03      	cmp	r7, #3
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	039a      	lsls	r2, r3, #14
 8002110:	d598      	bpl.n	8002044 <HAL_RCC_OscConfig+0xa4>
 8002112:	686b      	ldr	r3, [r5, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d195      	bne.n	8002044 <HAL_RCC_OscConfig+0xa4>
 8002118:	e746      	b.n	8001fa8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211a:	686b      	ldr	r3, [r5, #4]
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002120:	d110      	bne.n	8002144 <HAL_RCC_OscConfig+0x1a4>
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800212a:	f7fe ffe1 	bl	80010f0 <HAL_GetTick>
 800212e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	039b      	lsls	r3, r3, #14
 8002134:	d486      	bmi.n	8002044 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002136:	f7fe ffdb 	bl	80010f0 <HAL_GetTick>
 800213a:	eba0 0008 	sub.w	r0, r0, r8
 800213e:	2864      	cmp	r0, #100	; 0x64
 8002140:	d9f6      	bls.n	8002130 <HAL_RCC_OscConfig+0x190>
 8002142:	e7ca      	b.n	80020da <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002148:	d104      	bne.n	8002154 <HAL_RCC_OscConfig+0x1b4>
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002150:	6023      	str	r3, [r4, #0]
 8002152:	e7e6      	b.n	8002122 <HAL_RCC_OscConfig+0x182>
 8002154:	6822      	ldr	r2, [r4, #0]
 8002156:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800215a:	6022      	str	r2, [r4, #0]
 800215c:	6822      	ldr	r2, [r4, #0]
 800215e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002162:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e0      	bne.n	800212a <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8002168:	f7fe ffc2 	bl	80010f0 <HAL_GetTick>
 800216c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	0398      	lsls	r0, r3, #14
 8002172:	f57f af67 	bpl.w	8002044 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002176:	f7fe ffbb 	bl	80010f0 <HAL_GetTick>
 800217a:	eba0 0008 	sub.w	r0, r0, r8
 800217e:	2864      	cmp	r0, #100	; 0x64
 8002180:	d9f5      	bls.n	800216e <HAL_RCC_OscConfig+0x1ce>
 8002182:	e7aa      	b.n	80020da <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002184:	2e04      	cmp	r6, #4
 8002186:	d003      	beq.n	8002190 <HAL_RCC_OscConfig+0x1f0>
 8002188:	2e0c      	cmp	r6, #12
 800218a:	d110      	bne.n	80021ae <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 800218c:	2f02      	cmp	r7, #2
 800218e:	d10e      	bne.n	80021ae <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	0559      	lsls	r1, r3, #21
 8002194:	d503      	bpl.n	800219e <HAL_RCC_OscConfig+0x1fe>
 8002196:	68eb      	ldr	r3, [r5, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f43f af05 	beq.w	8001fa8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219e:	6863      	ldr	r3, [r4, #4]
 80021a0:	692a      	ldr	r2, [r5, #16]
 80021a2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80021a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80021aa:	6063      	str	r3, [r4, #4]
 80021ac:	e74e      	b.n	800204c <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ae:	68eb      	ldr	r3, [r5, #12]
 80021b0:	b17b      	cbz	r3, 80021d2 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021ba:	f7fe ff99 	bl	80010f0 <HAL_GetTick>
 80021be:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	055a      	lsls	r2, r3, #21
 80021c4:	d4eb      	bmi.n	800219e <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c6:	f7fe ff93 	bl	80010f0 <HAL_GetTick>
 80021ca:	1bc0      	subs	r0, r0, r7
 80021cc:	2802      	cmp	r0, #2
 80021ce:	d9f7      	bls.n	80021c0 <HAL_RCC_OscConfig+0x220>
 80021d0:	e783      	b.n	80020da <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021da:	f7fe ff89 	bl	80010f0 <HAL_GetTick>
 80021de:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	055b      	lsls	r3, r3, #21
 80021e4:	f57f af32 	bpl.w	800204c <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e8:	f7fe ff82 	bl	80010f0 <HAL_GetTick>
 80021ec:	1bc0      	subs	r0, r0, r7
 80021ee:	2802      	cmp	r0, #2
 80021f0:	d9f6      	bls.n	80021e0 <HAL_RCC_OscConfig+0x240>
 80021f2:	e772      	b.n	80020da <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f4:	696b      	ldr	r3, [r5, #20]
 80021f6:	b19b      	cbz	r3, 8002220 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 80021f8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002204:	f7fe ff74 	bl	80010f0 <HAL_GetTick>
 8002208:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800220a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800220e:	079a      	lsls	r2, r3, #30
 8002210:	f53f af20 	bmi.w	8002054 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002214:	f7fe ff6c 	bl	80010f0 <HAL_GetTick>
 8002218:	1bc0      	subs	r0, r0, r7
 800221a:	2802      	cmp	r0, #2
 800221c:	d9f5      	bls.n	800220a <HAL_RCC_OscConfig+0x26a>
 800221e:	e75c      	b.n	80020da <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8002220:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800222c:	f7fe ff60 	bl	80010f0 <HAL_GetTick>
 8002230:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002232:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002236:	079b      	lsls	r3, r3, #30
 8002238:	f57f af0c 	bpl.w	8002054 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223c:	f7fe ff58 	bl	80010f0 <HAL_GetTick>
 8002240:	1bc0      	subs	r0, r0, r7
 8002242:	2802      	cmp	r0, #2
 8002244:	d9f5      	bls.n	8002232 <HAL_RCC_OscConfig+0x292>
 8002246:	e748      	b.n	80020da <HAL_RCC_OscConfig+0x13a>
 8002248:	40021000 	.word	0x40021000
 800224c:	0800aab3 	.word	0x0800aab3
 8002250:	20000018 	.word	0x20000018
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002254:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002256:	00d8      	lsls	r0, r3, #3
 8002258:	d429      	bmi.n	80022ae <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	65a3      	str	r3, [r4, #88]	; 0x58
 8002262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800226c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002270:	4f5d      	ldr	r7, [pc, #372]	; (80023e8 <HAL_RCC_OscConfig+0x448>)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	05d9      	lsls	r1, r3, #23
 8002276:	d51d      	bpl.n	80022b4 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002278:	68ab      	ldr	r3, [r5, #8]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d12b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x336>
 800227e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800228a:	f7fe ff31 	bl	80010f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002292:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002294:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002298:	079b      	lsls	r3, r3, #30
 800229a:	d542      	bpl.n	8002322 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 800229c:	f1b8 0f00 	cmp.w	r8, #0
 80022a0:	f43f aedc 	beq.w	800205c <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80022a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80022ac:	e6d6      	b.n	800205c <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 80022ae:	f04f 0800 	mov.w	r8, #0
 80022b2:	e7dd      	b.n	8002270 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ba:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80022bc:	f7fe ff18 	bl	80010f0 <HAL_GetTick>
 80022c0:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	05da      	lsls	r2, r3, #23
 80022c6:	d4d7      	bmi.n	8002278 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c8:	f7fe ff12 	bl	80010f0 <HAL_GetTick>
 80022cc:	eba0 0009 	sub.w	r0, r0, r9
 80022d0:	2802      	cmp	r0, #2
 80022d2:	d9f6      	bls.n	80022c2 <HAL_RCC_OscConfig+0x322>
 80022d4:	e701      	b.n	80020da <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	d106      	bne.n	80022e8 <HAL_RCC_OscConfig+0x348>
 80022da:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80022e6:	e7ca      	b.n	800227e <HAL_RCC_OscConfig+0x2de>
 80022e8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80022ec:	f022 0201 	bic.w	r2, r2, #1
 80022f0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80022f4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80022f8:	f022 0204 	bic.w	r2, r2, #4
 80022fc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1c2      	bne.n	800228a <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8002304:	f7fe fef4 	bl	80010f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002308:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800230c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800230e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002312:	0798      	lsls	r0, r3, #30
 8002314:	d5c2      	bpl.n	800229c <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7fe feeb 	bl	80010f0 <HAL_GetTick>
 800231a:	1bc0      	subs	r0, r0, r7
 800231c:	4548      	cmp	r0, r9
 800231e:	d9f6      	bls.n	800230e <HAL_RCC_OscConfig+0x36e>
 8002320:	e6db      	b.n	80020da <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe fee5 	bl	80010f0 <HAL_GetTick>
 8002326:	1bc0      	subs	r0, r0, r7
 8002328:	4548      	cmp	r0, r9
 800232a:	d9b3      	bls.n	8002294 <HAL_RCC_OscConfig+0x2f4>
 800232c:	e6d5      	b.n	80020da <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800232e:	2e0c      	cmp	r6, #12
 8002330:	f43f ae3a 	beq.w	8001fa8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002334:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800233c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800233e:	d137      	bne.n	80023b0 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8002340:	f7fe fed6 	bl	80010f0 <HAL_GetTick>
 8002344:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	0199      	lsls	r1, r3, #6
 800234a:	d42b      	bmi.n	80023a4 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800234e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002350:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002354:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002356:	3a01      	subs	r2, #1
 8002358:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800235c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800235e:	0912      	lsrs	r2, r2, #4
 8002360:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002364:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002366:	0852      	lsrs	r2, r2, #1
 8002368:	3a01      	subs	r2, #1
 800236a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800236e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002370:	0852      	lsrs	r2, r2, #1
 8002372:	3a01      	subs	r2, #1
 8002374:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002378:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002380:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002382:	68e3      	ldr	r3, [r4, #12]
 8002384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002388:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800238a:	f7fe feb1 	bl	80010f0 <HAL_GetTick>
 800238e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	019a      	lsls	r2, r3, #6
 8002394:	f53f ae66 	bmi.w	8002064 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7fe feaa 	bl	80010f0 <HAL_GetTick>
 800239c:	1b40      	subs	r0, r0, r5
 800239e:	2802      	cmp	r0, #2
 80023a0:	d9f6      	bls.n	8002390 <HAL_RCC_OscConfig+0x3f0>
 80023a2:	e69a      	b.n	80020da <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe fea4 	bl	80010f0 <HAL_GetTick>
 80023a8:	1b80      	subs	r0, r0, r6
 80023aa:	2802      	cmp	r0, #2
 80023ac:	d9cb      	bls.n	8002346 <HAL_RCC_OscConfig+0x3a6>
 80023ae:	e694      	b.n	80020da <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023b6:	bf02      	ittt	eq
 80023b8:	68e3      	ldreq	r3, [r4, #12]
 80023ba:	f023 0303 	biceq.w	r3, r3, #3
 80023be:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023c0:	68e3      	ldr	r3, [r4, #12]
 80023c2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80023cc:	f7fe fe90 	bl	80010f0 <HAL_GetTick>
 80023d0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	019b      	lsls	r3, r3, #6
 80023d6:	f57f ae45 	bpl.w	8002064 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023da:	f7fe fe89 	bl	80010f0 <HAL_GetTick>
 80023de:	1b40      	subs	r0, r0, r5
 80023e0:	2802      	cmp	r0, #2
 80023e2:	d9f6      	bls.n	80023d2 <HAL_RCC_OscConfig+0x432>
 80023e4:	e679      	b.n	80020da <HAL_RCC_OscConfig+0x13a>
 80023e6:	bf00      	nop
 80023e8:	40007000 	.word	0x40007000

080023ec <HAL_RCC_ClockConfig>:
{
 80023ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023f0:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80023f2:	4604      	mov	r4, r0
 80023f4:	b910      	cbnz	r0, 80023fc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80023f6:	2001      	movs	r0, #1
 80023f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4a40      	ldr	r2, [pc, #256]	; (8002500 <HAL_RCC_ClockConfig+0x114>)
 80023fe:	6813      	ldr	r3, [r2, #0]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	428b      	cmp	r3, r1
 8002406:	d329      	bcc.n	800245c <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	07d9      	lsls	r1, r3, #31
 800240c:	d431      	bmi.n	8002472 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240e:	6821      	ldr	r1, [r4, #0]
 8002410:	078a      	lsls	r2, r1, #30
 8002412:	d45b      	bmi.n	80024cc <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002414:	4a3a      	ldr	r2, [pc, #232]	; (8002500 <HAL_RCC_ClockConfig+0x114>)
 8002416:	6813      	ldr	r3, [r2, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	429e      	cmp	r6, r3
 800241e:	d35d      	bcc.n	80024dc <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	f011 0f04 	tst.w	r1, #4
 8002424:	4d37      	ldr	r5, [pc, #220]	; (8002504 <HAL_RCC_ClockConfig+0x118>)
 8002426:	d164      	bne.n	80024f2 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002428:	070b      	lsls	r3, r1, #28
 800242a:	d506      	bpl.n	800243a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242c:	68ab      	ldr	r3, [r5, #8]
 800242e:	6922      	ldr	r2, [r4, #16]
 8002430:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002434:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002438:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800243a:	f7ff fd5d 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 800243e:	68ab      	ldr	r3, [r5, #8]
 8002440:	4a31      	ldr	r2, [pc, #196]	; (8002508 <HAL_RCC_ClockConfig+0x11c>)
 8002442:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	40d8      	lsrs	r0, r3
 8002452:	4b2e      	ldr	r3, [pc, #184]	; (800250c <HAL_RCC_ClockConfig+0x120>)
 8002454:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8002456:	2000      	movs	r0, #0
 8002458:	f7fe be14 	b.w	8001084 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245c:	6813      	ldr	r3, [r2, #0]
 800245e:	f023 0307 	bic.w	r3, r3, #7
 8002462:	430b      	orrs	r3, r1
 8002464:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	6813      	ldr	r3, [r2, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4299      	cmp	r1, r3
 800246e:	d1c2      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xa>
 8002470:	e7ca      	b.n	8002408 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002472:	6862      	ldr	r2, [r4, #4]
 8002474:	4d23      	ldr	r5, [pc, #140]	; (8002504 <HAL_RCC_ClockConfig+0x118>)
 8002476:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002478:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247a:	d11b      	bne.n	80024b4 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002480:	d0b9      	beq.n	80023f6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002482:	68ab      	ldr	r3, [r5, #8]
 8002484:	f023 0303 	bic.w	r3, r3, #3
 8002488:	4313      	orrs	r3, r2
 800248a:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800248c:	f7fe fe30 	bl	80010f0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002494:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	68ab      	ldr	r3, [r5, #8]
 8002498:	6862      	ldr	r2, [r4, #4]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80024a2:	d0b4      	beq.n	800240e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a4:	f7fe fe24 	bl	80010f0 <HAL_GetTick>
 80024a8:	1bc0      	subs	r0, r0, r7
 80024aa:	4540      	cmp	r0, r8
 80024ac:	d9f3      	bls.n	8002496 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80024ae:	2003      	movs	r0, #3
}
 80024b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b4:	2a02      	cmp	r2, #2
 80024b6:	d102      	bne.n	80024be <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80024bc:	e7e0      	b.n	8002480 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024be:	b912      	cbnz	r2, 80024c6 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024c0:	f013 0f02 	tst.w	r3, #2
 80024c4:	e7dc      	b.n	8002480 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80024ca:	e7d9      	b.n	8002480 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4a0d      	ldr	r2, [pc, #52]	; (8002504 <HAL_RCC_ClockConfig+0x118>)
 80024ce:	68a0      	ldr	r0, [r4, #8]
 80024d0:	6893      	ldr	r3, [r2, #8]
 80024d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024d6:	4303      	orrs	r3, r0
 80024d8:	6093      	str	r3, [r2, #8]
 80024da:	e79b      	b.n	8002414 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024dc:	6813      	ldr	r3, [r2, #0]
 80024de:	f023 0307 	bic.w	r3, r3, #7
 80024e2:	4333      	orrs	r3, r6
 80024e4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	6813      	ldr	r3, [r2, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	429e      	cmp	r6, r3
 80024ee:	d182      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xa>
 80024f0:	e796      	b.n	8002420 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f2:	68ab      	ldr	r3, [r5, #8]
 80024f4:	68e2      	ldr	r2, [r4, #12]
 80024f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60ab      	str	r3, [r5, #8]
 80024fe:	e793      	b.n	8002428 <HAL_RCC_ClockConfig+0x3c>
 8002500:	40022000 	.word	0x40022000
 8002504:	40021000 	.word	0x40021000
 8002508:	0800aab3 	.word	0x0800aab3
 800250c:	20000018 	.word	0x20000018

08002510 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002512:	4a06      	ldr	r2, [pc, #24]	; (800252c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800251e:	6810      	ldr	r0, [r2, #0]
 8002520:	f003 031f 	and.w	r3, r3, #31
}
 8002524:	40d8      	lsrs	r0, r3
 8002526:	4770      	bx	lr
 8002528:	40021000 	.word	0x40021000
 800252c:	0800aac3 	.word	0x0800aac3
 8002530:	20000018 	.word	0x20000018

08002534 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002536:	4a06      	ldr	r2, [pc, #24]	; (8002550 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	4a04      	ldr	r2, [pc, #16]	; (8002554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002542:	6810      	ldr	r0, [r2, #0]
 8002544:	f003 031f 	and.w	r3, r3, #31
}
 8002548:	40d8      	lsrs	r0, r3
 800254a:	4770      	bx	lr
 800254c:	40021000 	.word	0x40021000
 8002550:	0800aac3 	.word	0x0800aac3
 8002554:	20000018 	.word	0x20000018

08002558 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800255a:	4b45      	ldr	r3, [pc, #276]	; (8002670 <RCCEx_PLLSAI1_Config+0x118>)
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	f012 0f03 	tst.w	r2, #3
{
 8002562:	4605      	mov	r5, r0
 8002564:	460e      	mov	r6, r1
 8002566:	461c      	mov	r4, r3
 8002568:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800256a:	d02a      	beq.n	80025c2 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	f002 0203 	and.w	r2, r2, #3
 8002572:	4282      	cmp	r2, r0
 8002574:	d13c      	bne.n	80025f0 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8002576:	2a00      	cmp	r2, #0
 8002578:	d03a      	beq.n	80025f0 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800257a:	68db      	ldr	r3, [r3, #12]
       ||
 800257c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800257e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002582:	3301      	adds	r3, #1
       ||
 8002584:	4293      	cmp	r3, r2
 8002586:	d133      	bne.n	80025f0 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800258e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002590:	f7fe fdae 	bl	80010f0 <HAL_GetTick>
 8002594:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	011a      	lsls	r2, r3, #4
 800259a:	d432      	bmi.n	8002602 <RCCEx_PLLSAI1_Config+0xaa>
 800259c:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800259e:	2e00      	cmp	r6, #0
 80025a0:	d036      	beq.n	8002610 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025a2:	2e01      	cmp	r6, #1
 80025a4:	d150      	bne.n	8002648 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025a6:	6922      	ldr	r2, [r4, #16]
 80025a8:	6928      	ldr	r0, [r5, #16]
 80025aa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80025ae:	0840      	lsrs	r0, r0, #1
 80025b0:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80025b4:	3801      	subs	r0, #1
 80025b6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80025ba:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80025be:	6122      	str	r2, [r4, #16]
 80025c0:	e032      	b.n	8002628 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80025c2:	2802      	cmp	r0, #2
 80025c4:	d010      	beq.n	80025e8 <RCCEx_PLLSAI1_Config+0x90>
 80025c6:	2803      	cmp	r0, #3
 80025c8:	d014      	beq.n	80025f4 <RCCEx_PLLSAI1_Config+0x9c>
 80025ca:	2801      	cmp	r0, #1
 80025cc:	d110      	bne.n	80025f0 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	079f      	lsls	r7, r3, #30
 80025d2:	d538      	bpl.n	8002646 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025d4:	68e3      	ldr	r3, [r4, #12]
 80025d6:	686a      	ldr	r2, [r5, #4]
 80025d8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80025dc:	3a01      	subs	r2, #1
 80025de:	4318      	orrs	r0, r3
 80025e0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80025e4:	60e0      	str	r0, [r4, #12]
 80025e6:	e7cf      	b.n	8002588 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ee:	d1f1      	bne.n	80025d4 <RCCEx_PLLSAI1_Config+0x7c>
 80025f0:	2001      	movs	r0, #1
 80025f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	0391      	lsls	r1, r2, #14
 80025f8:	d4ec      	bmi.n	80025d4 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002600:	e7f5      	b.n	80025ee <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002602:	f7fe fd75 	bl	80010f0 <HAL_GetTick>
 8002606:	1bc0      	subs	r0, r0, r7
 8002608:	2802      	cmp	r0, #2
 800260a:	d9c4      	bls.n	8002596 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800260c:	2003      	movs	r0, #3
 800260e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002610:	6921      	ldr	r1, [r4, #16]
 8002612:	68eb      	ldr	r3, [r5, #12]
 8002614:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002618:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800261c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002626:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800262e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002630:	f7fe fd5e 	bl	80010f0 <HAL_GetTick>
 8002634:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	d513      	bpl.n	8002664 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800263c:	6923      	ldr	r3, [r4, #16]
 800263e:	69aa      	ldr	r2, [r5, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	6123      	str	r3, [r4, #16]
 8002644:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002648:	6923      	ldr	r3, [r4, #16]
 800264a:	6968      	ldr	r0, [r5, #20]
 800264c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002650:	0840      	lsrs	r0, r0, #1
 8002652:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002656:	3801      	subs	r0, #1
 8002658:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800265c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002660:	6123      	str	r3, [r4, #16]
 8002662:	e7e1      	b.n	8002628 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002664:	f7fe fd44 	bl	80010f0 <HAL_GetTick>
 8002668:	1b80      	subs	r0, r0, r6
 800266a:	2802      	cmp	r0, #2
 800266c:	d9e3      	bls.n	8002636 <RCCEx_PLLSAI1_Config+0xde>
 800266e:	e7cd      	b.n	800260c <RCCEx_PLLSAI1_Config+0xb4>
 8002670:	40021000 	.word	0x40021000

08002674 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002676:	4b3d      	ldr	r3, [pc, #244]	; (800276c <RCCEx_PLLSAI2_Config+0xf8>)
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	f012 0f03 	tst.w	r2, #3
{
 800267e:	4605      	mov	r5, r0
 8002680:	460e      	mov	r6, r1
 8002682:	461c      	mov	r4, r3
 8002684:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002686:	d028      	beq.n	80026da <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	f002 0203 	and.w	r2, r2, #3
 800268e:	4282      	cmp	r2, r0
 8002690:	d13a      	bne.n	8002708 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8002692:	2a00      	cmp	r2, #0
 8002694:	d038      	beq.n	8002708 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002696:	68db      	ldr	r3, [r3, #12]
       ||
 8002698:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800269a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800269e:	3301      	adds	r3, #1
       ||
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d131      	bne.n	8002708 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026aa:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ac:	f7fe fd20 	bl	80010f0 <HAL_GetTick>
 80026b0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	009a      	lsls	r2, r3, #2
 80026b6:	d430      	bmi.n	800271a <RCCEx_PLLSAI2_Config+0xa6>
 80026b8:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ba:	2e00      	cmp	r6, #0
 80026bc:	d034      	beq.n	8002728 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026be:	6963      	ldr	r3, [r4, #20]
 80026c0:	6929      	ldr	r1, [r5, #16]
 80026c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026c6:	0849      	lsrs	r1, r1, #1
 80026c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026cc:	3901      	subs	r1, #1
 80026ce:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80026d2:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80026d6:	6163      	str	r3, [r4, #20]
 80026d8:	e032      	b.n	8002740 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80026da:	2802      	cmp	r0, #2
 80026dc:	d010      	beq.n	8002700 <RCCEx_PLLSAI2_Config+0x8c>
 80026de:	2803      	cmp	r0, #3
 80026e0:	d014      	beq.n	800270c <RCCEx_PLLSAI2_Config+0x98>
 80026e2:	2801      	cmp	r0, #1
 80026e4:	d110      	bne.n	8002708 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	079f      	lsls	r7, r3, #30
 80026ea:	d538      	bpl.n	800275e <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ec:	68e3      	ldr	r3, [r4, #12]
 80026ee:	686a      	ldr	r2, [r5, #4]
 80026f0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80026f4:	3a01      	subs	r2, #1
 80026f6:	4318      	orrs	r0, r3
 80026f8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80026fc:	60e0      	str	r0, [r4, #12]
 80026fe:	e7d1      	b.n	80026a4 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002706:	d1f1      	bne.n	80026ec <RCCEx_PLLSAI2_Config+0x78>
 8002708:	2001      	movs	r0, #1
 800270a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	0391      	lsls	r1, r2, #14
 8002710:	d4ec      	bmi.n	80026ec <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002718:	e7f5      	b.n	8002706 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800271a:	f7fe fce9 	bl	80010f0 <HAL_GetTick>
 800271e:	1bc0      	subs	r0, r0, r7
 8002720:	2802      	cmp	r0, #2
 8002722:	d9c6      	bls.n	80026b2 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002724:	2003      	movs	r0, #3
 8002726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002728:	6962      	ldr	r2, [r4, #20]
 800272a:	68eb      	ldr	r3, [r5, #12]
 800272c:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002730:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002734:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800273e:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002746:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fe fcd2 	bl	80010f0 <HAL_GetTick>
 800274c:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	d505      	bpl.n	8002760 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002754:	6963      	ldr	r3, [r4, #20]
 8002756:	696a      	ldr	r2, [r5, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	6163      	str	r3, [r4, #20]
 800275c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800275e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002760:	f7fe fcc6 	bl	80010f0 <HAL_GetTick>
 8002764:	1b80      	subs	r0, r0, r6
 8002766:	2802      	cmp	r0, #2
 8002768:	d9f1      	bls.n	800274e <RCCEx_PLLSAI2_Config+0xda>
 800276a:	e7db      	b.n	8002724 <RCCEx_PLLSAI2_Config+0xb0>
 800276c:	40021000 	.word	0x40021000

08002770 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002770:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002774:	6806      	ldr	r6, [r0, #0]
 8002776:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800277a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800277c:	d024      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800277e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002780:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002784:	d02c      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002786:	d802      	bhi.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002788:	b1c1      	cbz	r1, 80027bc <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800278a:	2601      	movs	r6, #1
 800278c:	e01c      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800278e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002792:	d00d      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002794:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002798:	d1f7      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800279a:	4a4d      	ldr	r2, [pc, #308]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800279e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027a6:	430b      	orrs	r3, r1
 80027a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80027ac:	2600      	movs	r6, #0
 80027ae:	e00b      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027b0:	4a47      	ldr	r2, [pc, #284]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b2:	68d3      	ldr	r3, [r2, #12]
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	60d3      	str	r3, [r2, #12]
      break;
 80027ba:	e7ee      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027bc:	3004      	adds	r0, #4
 80027be:	f7ff fecb 	bl	8002558 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027c2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d0e8      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	04d8      	lsls	r0, r3, #19
 80027cc:	d506      	bpl.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80027ce:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80027d0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80027d4:	d074      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80027d6:	d808      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80027d8:	b1a9      	cbz	r1, 8002806 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80027da:	2601      	movs	r6, #1
 80027dc:	4635      	mov	r5, r6
 80027de:	e021      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027e0:	2100      	movs	r1, #0
 80027e2:	3020      	adds	r0, #32
 80027e4:	f7ff ff46 	bl	8002674 <RCCEx_PLLSAI2_Config>
 80027e8:	e7eb      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80027ea:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80027ee:	d004      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80027f0:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80027f4:	d1f1      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80027f6:	4635      	mov	r5, r6
 80027f8:	e009      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027fa:	4a35      	ldr	r2, [pc, #212]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fc:	68d3      	ldr	r3, [r2, #12]
 80027fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002802:	60d3      	str	r3, [r2, #12]
 8002804:	e7f7      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002806:	1d20      	adds	r0, r4, #4
 8002808:	f7ff fea6 	bl	8002558 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800280c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800280e:	2d00      	cmp	r5, #0
 8002810:	d15c      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002812:	4a2f      	ldr	r2, [pc, #188]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002814:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002816:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800281a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800281e:	430b      	orrs	r3, r1
 8002820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	0399      	lsls	r1, r3, #14
 8002828:	f140 814f 	bpl.w	8002aca <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800282c:	4f28      	ldr	r7, [pc, #160]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002830:	00da      	lsls	r2, r3, #3
 8002832:	f140 8176 	bpl.w	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002836:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800283a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80028d4 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800283e:	f8d9 3000 	ldr.w	r3, [r9]
 8002842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002846:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800284a:	f7fe fc51 	bl	80010f0 <HAL_GetTick>
 800284e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002850:	f8d9 3000 	ldr.w	r3, [r9]
 8002854:	05db      	lsls	r3, r3, #23
 8002856:	d53f      	bpl.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002858:	2d00      	cmp	r5, #0
 800285a:	d144      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800285c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002860:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002864:	d015      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002866:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800286a:	4293      	cmp	r3, r2
 800286c:	d011      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800286e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002872:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002876:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800287a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800287e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002886:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800288a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800288e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002892:	07d8      	lsls	r0, r3, #31
 8002894:	d509      	bpl.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8002896:	f7fe fc2b 	bl	80010f0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800289e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028a4:	0799      	lsls	r1, r3, #30
 80028a6:	f140 8109 	bpl.w	8002abc <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ae:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80028b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028bc:	4635      	mov	r5, r6
 80028be:	e012      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028c0:	2100      	movs	r1, #0
 80028c2:	f104 0020 	add.w	r0, r4, #32
 80028c6:	f7ff fed5 	bl	8002674 <RCCEx_PLLSAI2_Config>
 80028ca:	e79f      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80028cc:	462e      	mov	r6, r5
 80028ce:	e7a9      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d8:	f7fe fc0a 	bl	80010f0 <HAL_GetTick>
 80028dc:	eba0 000a 	sub.w	r0, r0, sl
 80028e0:	2802      	cmp	r0, #2
 80028e2:	d9b5      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 80028e4:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80028e6:	f1b8 0f00 	cmp.w	r8, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f2:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f4:	6823      	ldr	r3, [r4, #0]
 80028f6:	07da      	lsls	r2, r3, #31
 80028f8:	d508      	bpl.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fa:	4990      	ldr	r1, [pc, #576]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80028fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80028fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002902:	f022 0203 	bic.w	r2, r2, #3
 8002906:	4302      	orrs	r2, r0
 8002908:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800290c:	079f      	lsls	r7, r3, #30
 800290e:	d508      	bpl.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002910:	498a      	ldr	r1, [pc, #552]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002912:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002914:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002918:	f022 020c 	bic.w	r2, r2, #12
 800291c:	4302      	orrs	r2, r0
 800291e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002922:	075e      	lsls	r6, r3, #29
 8002924:	d508      	bpl.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002926:	4985      	ldr	r1, [pc, #532]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002928:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800292a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800292e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002932:	4302      	orrs	r2, r0
 8002934:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002938:	0718      	lsls	r0, r3, #28
 800293a:	d508      	bpl.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800293c:	497f      	ldr	r1, [pc, #508]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800293e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002940:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002944:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002948:	4302      	orrs	r2, r0
 800294a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800294e:	06d9      	lsls	r1, r3, #27
 8002950:	d508      	bpl.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002952:	497a      	ldr	r1, [pc, #488]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002954:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002956:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800295a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800295e:	4302      	orrs	r2, r0
 8002960:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002964:	069a      	lsls	r2, r3, #26
 8002966:	d508      	bpl.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002968:	4974      	ldr	r1, [pc, #464]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800296a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800296c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002970:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002974:	4302      	orrs	r2, r0
 8002976:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800297a:	059f      	lsls	r7, r3, #22
 800297c:	d508      	bpl.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800297e:	496f      	ldr	r1, [pc, #444]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002980:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002982:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002986:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800298a:	4302      	orrs	r2, r0
 800298c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002990:	055e      	lsls	r6, r3, #21
 8002992:	d508      	bpl.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002994:	4969      	ldr	r1, [pc, #420]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002996:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002998:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800299c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80029a0:	4302      	orrs	r2, r0
 80029a2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029a6:	0658      	lsls	r0, r3, #25
 80029a8:	d508      	bpl.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029aa:	4964      	ldr	r1, [pc, #400]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80029ac:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80029ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029b2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80029b6:	4302      	orrs	r2, r0
 80029b8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029bc:	0619      	lsls	r1, r3, #24
 80029be:	d508      	bpl.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029c0:	495e      	ldr	r1, [pc, #376]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80029c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029c8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80029cc:	4302      	orrs	r2, r0
 80029ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029d2:	05da      	lsls	r2, r3, #23
 80029d4:	d508      	bpl.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029d6:	4959      	ldr	r1, [pc, #356]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80029d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029da:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029de:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80029e2:	4302      	orrs	r2, r0
 80029e4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029e8:	049b      	lsls	r3, r3, #18
 80029ea:	d50f      	bpl.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029ec:	4a53      	ldr	r2, [pc, #332]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80029ee:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80029f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029f4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80029f8:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029fa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a02:	d164      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a04:	68d3      	ldr	r3, [r2, #12]
 8002a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a0a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	031f      	lsls	r7, r3, #12
 8002a10:	d50f      	bpl.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a12:	4a4a      	ldr	r2, [pc, #296]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a14:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002a16:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a1a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002a1e:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a20:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a28:	d15c      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a2a:	68d3      	ldr	r3, [r2, #12]
 8002a2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a30:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	035e      	lsls	r6, r3, #13
 8002a36:	d50f      	bpl.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a38:	4a40      	ldr	r2, [pc, #256]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a3a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002a3c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a40:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002a44:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a46:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a4e:	d154      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a50:	68d3      	ldr	r3, [r2, #12]
 8002a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a56:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	0458      	lsls	r0, r3, #17
 8002a5c:	d512      	bpl.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a5e:	4937      	ldr	r1, [pc, #220]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a60:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002a62:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a66:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002a6a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a6c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a74:	d14c      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a76:	2102      	movs	r1, #2
 8002a78:	1d20      	adds	r0, r4, #4
 8002a7a:	f7ff fd6d 	bl	8002558 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	bf18      	it	ne
 8002a82:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a84:	6822      	ldr	r2, [r4, #0]
 8002a86:	0411      	lsls	r1, r2, #16
 8002a88:	d508      	bpl.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a8a:	492c      	ldr	r1, [pc, #176]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a8c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002a8e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a96:	4303      	orrs	r3, r0
 8002a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a9c:	03d3      	lsls	r3, r2, #15
 8002a9e:	d509      	bpl.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002aa0:	4a26      	ldr	r2, [pc, #152]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002aa2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002aa6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002aaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	b002      	add	sp, #8
 8002ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	f7fe fb18 	bl	80010f0 <HAL_GetTick>
 8002ac0:	1b40      	subs	r0, r0, r5
 8002ac2:	4548      	cmp	r0, r9
 8002ac4:	f67f aeec 	bls.w	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002ac8:	e70c      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002aca:	4635      	mov	r5, r6
 8002acc:	e712      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ace:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002ad2:	d19b      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	1d20      	adds	r0, r4, #4
 8002ad8:	f7ff fd3e 	bl	8002558 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002adc:	2800      	cmp	r0, #0
 8002ade:	bf18      	it	ne
 8002ae0:	4605      	movne	r5, r0
 8002ae2:	e793      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ae4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002ae8:	d1a3      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aea:	2101      	movs	r1, #1
 8002aec:	1d20      	adds	r0, r4, #4
 8002aee:	f7ff fd33 	bl	8002558 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002af2:	2800      	cmp	r0, #0
 8002af4:	bf18      	it	ne
 8002af6:	4605      	movne	r5, r0
 8002af8:	e79b      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002afa:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002afe:	d1ab      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b00:	2101      	movs	r1, #1
 8002b02:	1d20      	adds	r0, r4, #4
 8002b04:	f7ff fd28 	bl	8002558 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	bf18      	it	ne
 8002b0c:	4605      	movne	r5, r0
 8002b0e:	e7a3      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b10:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002b14:	d1b6      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b16:	2102      	movs	r1, #2
 8002b18:	f104 0020 	add.w	r0, r4, #32
 8002b1c:	f7ff fdaa 	bl	8002674 <RCCEx_PLLSAI2_Config>
 8002b20:	e7ad      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b28:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b34:	f04f 0801 	mov.w	r8, #1
 8002b38:	e67f      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000

08002b40 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	2302      	movs	r3, #2
{
 8002b42:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8002b48:	6803      	ldr	r3, [r0, #0]
 8002b4a:	4c09      	ldr	r4, [pc, #36]	; (8002b70 <HAL_TIM_Base_Start+0x30>)
 8002b4c:	6899      	ldr	r1, [r3, #8]
 8002b4e:	4021      	ands	r1, r4
 8002b50:	2906      	cmp	r1, #6
 8002b52:	d008      	beq.n	8002b66 <HAL_TIM_Base_Start+0x26>
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	4022      	ands	r2, r4
 8002b58:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8002b5c:	bf1e      	ittt	ne
 8002b5e:	681a      	ldrne	r2, [r3, #0]
 8002b60:	f042 0201 	orrne.w	r2, r2, #1
 8002b64:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	bd10      	pop	{r4, pc}
 8002b70:	00010007 	.word	0x00010007

08002b74 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b74:	4a30      	ldr	r2, [pc, #192]	; (8002c38 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002b76:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b78:	4290      	cmp	r0, r2
 8002b7a:	d012      	beq.n	8002ba2 <TIM_Base_SetConfig+0x2e>
 8002b7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002b80:	d00f      	beq.n	8002ba2 <TIM_Base_SetConfig+0x2e>
 8002b82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002b86:	4290      	cmp	r0, r2
 8002b88:	d00b      	beq.n	8002ba2 <TIM_Base_SetConfig+0x2e>
 8002b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b8e:	4290      	cmp	r0, r2
 8002b90:	d007      	beq.n	8002ba2 <TIM_Base_SetConfig+0x2e>
 8002b92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b96:	4290      	cmp	r0, r2
 8002b98:	d003      	beq.n	8002ba2 <TIM_Base_SetConfig+0x2e>
 8002b9a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002b9e:	4290      	cmp	r0, r2
 8002ba0:	d119      	bne.n	8002bd6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002ba2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ba8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002baa:	4a23      	ldr	r2, [pc, #140]	; (8002c38 <TIM_Base_SetConfig+0xc4>)
 8002bac:	4290      	cmp	r0, r2
 8002bae:	d01d      	beq.n	8002bec <TIM_Base_SetConfig+0x78>
 8002bb0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002bb4:	d01a      	beq.n	8002bec <TIM_Base_SetConfig+0x78>
 8002bb6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002bba:	4290      	cmp	r0, r2
 8002bbc:	d016      	beq.n	8002bec <TIM_Base_SetConfig+0x78>
 8002bbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bc2:	4290      	cmp	r0, r2
 8002bc4:	d012      	beq.n	8002bec <TIM_Base_SetConfig+0x78>
 8002bc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bca:	4290      	cmp	r0, r2
 8002bcc:	d00e      	beq.n	8002bec <TIM_Base_SetConfig+0x78>
 8002bce:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002bd2:	4290      	cmp	r0, r2
 8002bd4:	d00a      	beq.n	8002bec <TIM_Base_SetConfig+0x78>
 8002bd6:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <TIM_Base_SetConfig+0xc8>)
 8002bd8:	4290      	cmp	r0, r2
 8002bda:	d007      	beq.n	8002bec <TIM_Base_SetConfig+0x78>
 8002bdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002be0:	4290      	cmp	r0, r2
 8002be2:	d003      	beq.n	8002bec <TIM_Base_SetConfig+0x78>
 8002be4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002be8:	4290      	cmp	r0, r2
 8002bea:	d103      	bne.n	8002bf4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bec:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bf4:	694a      	ldr	r2, [r1, #20]
 8002bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bfa:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002bfc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bfe:	688b      	ldr	r3, [r1, #8]
 8002c00:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c02:	680b      	ldr	r3, [r1, #0]
 8002c04:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <TIM_Base_SetConfig+0xc4>)
 8002c08:	4298      	cmp	r0, r3
 8002c0a:	d00f      	beq.n	8002c2c <TIM_Base_SetConfig+0xb8>
 8002c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c10:	4298      	cmp	r0, r3
 8002c12:	d00b      	beq.n	8002c2c <TIM_Base_SetConfig+0xb8>
 8002c14:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002c18:	4298      	cmp	r0, r3
 8002c1a:	d007      	beq.n	8002c2c <TIM_Base_SetConfig+0xb8>
 8002c1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c20:	4298      	cmp	r0, r3
 8002c22:	d003      	beq.n	8002c2c <TIM_Base_SetConfig+0xb8>
 8002c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c28:	4298      	cmp	r0, r3
 8002c2a:	d101      	bne.n	8002c30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c2c:	690b      	ldr	r3, [r1, #16]
 8002c2e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c30:	2301      	movs	r3, #1
 8002c32:	6143      	str	r3, [r0, #20]
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40014000 	.word	0x40014000

08002c40 <HAL_TIM_Base_Init>:
{
 8002c40:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002c42:	4604      	mov	r4, r0
 8002c44:	b1a0      	cbz	r0, 8002c70 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c4e:	b91b      	cbnz	r3, 8002c58 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002c50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002c54:	f001 ffce 	bl	8004bf4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c5e:	6820      	ldr	r0, [r4, #0]
 8002c60:	1d21      	adds	r1, r4, #4
 8002c62:	f7ff ff87 	bl	8002b74 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002c66:	2301      	movs	r3, #1
 8002c68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c70:	2001      	movs	r0, #1
}
 8002c72:	bd10      	pop	{r4, pc}

08002c74 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c74:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002c78:	2b01      	cmp	r3, #1
{
 8002c7a:	b530      	push	{r4, r5, lr}
 8002c7c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002c80:	d01f      	beq.n	8002cc2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c82:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c84:	4d10      	ldr	r5, [pc, #64]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002c86:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c8a:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8002c8c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002c8e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c90:	d003      	beq.n	8002c9a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8002c92:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002c96:	42aa      	cmp	r2, r5
 8002c98:	d103      	bne.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c9a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ca0:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ca2:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ca4:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002caa:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002cac:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cb0:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cb2:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cb4:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8002cb6:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002cb8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002cc2:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002cc4:	bd30      	pop	{r4, r5, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40012c00 	.word	0x40012c00

08002ccc <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ccc:	6803      	ldr	r3, [r0, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002cd4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cde:	2320      	movs	r3, #32
 8002ce0:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6603      	str	r3, [r0, #96]	; 0x60
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cec:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d149      	bne.n	8002d88 <HAL_UART_Receive_IT+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8002cf4:	2900      	cmp	r1, #0
 8002cf6:	d045      	beq.n	8002d84 <HAL_UART_Receive_IT+0x98>
 8002cf8:	2a00      	cmp	r2, #0
 8002cfa:	d043      	beq.n	8002d84 <HAL_UART_Receive_IT+0x98>
    __HAL_LOCK(huart);
 8002cfc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d041      	beq.n	8002d88 <HAL_UART_Receive_IT+0x9c>
 8002d04:	2301      	movs	r3, #1
 8002d06:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxISR       = NULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8002d0e:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 8002d10:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8002d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize  = Size;
 8002d16:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d1a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002d1e:	d121      	bne.n	8002d64 <HAL_UART_Receive_IT+0x78>
 8002d20:	6902      	ldr	r2, [r0, #16]
 8002d22:	b9ea      	cbnz	r2, 8002d60 <HAL_UART_Receive_IT+0x74>
 8002d24:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d28:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	6742      	str	r2, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d30:	2222      	movs	r2, #34	; 0x22
 8002d32:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d36:	6802      	ldr	r2, [r0, #0]
 8002d38:	6891      	ldr	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d3e:	f041 0101 	orr.w	r1, r1, #1
 8002d42:	6091      	str	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d44:	d11c      	bne.n	8002d80 <HAL_UART_Receive_IT+0x94>
 8002d46:	6903      	ldr	r3, [r0, #16]
 8002d48:	b9d3      	cbnz	r3, 8002d80 <HAL_UART_Receive_IT+0x94>
        huart->RxISR = UART_RxISR_16BIT;
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_UART_Receive_IT+0xa0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002d4c:	6811      	ldr	r1, [r2, #0]
        huart->RxISR = UART_RxISR_8BIT;
 8002d4e:	6603      	str	r3, [r0, #96]	; 0x60
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002d50:	f441 7190 	orr.w	r1, r1, #288	; 0x120
      __HAL_UNLOCK(huart);
 8002d54:	2300      	movs	r3, #0
 8002d56:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002d5a:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002d60:	22ff      	movs	r2, #255	; 0xff
 8002d62:	e7e1      	b.n	8002d28 <HAL_UART_Receive_IT+0x3c>
 8002d64:	b923      	cbnz	r3, 8002d70 <HAL_UART_Receive_IT+0x84>
 8002d66:	6902      	ldr	r2, [r0, #16]
 8002d68:	2a00      	cmp	r2, #0
 8002d6a:	d0f9      	beq.n	8002d60 <HAL_UART_Receive_IT+0x74>
 8002d6c:	227f      	movs	r2, #127	; 0x7f
 8002d6e:	e7db      	b.n	8002d28 <HAL_UART_Receive_IT+0x3c>
 8002d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d74:	d1da      	bne.n	8002d2c <HAL_UART_Receive_IT+0x40>
 8002d76:	6902      	ldr	r2, [r0, #16]
 8002d78:	2a00      	cmp	r2, #0
 8002d7a:	d0f7      	beq.n	8002d6c <HAL_UART_Receive_IT+0x80>
 8002d7c:	223f      	movs	r2, #63	; 0x3f
 8002d7e:	e7d3      	b.n	8002d28 <HAL_UART_Receive_IT+0x3c>
        huart->RxISR = UART_RxISR_8BIT;
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <HAL_UART_Receive_IT+0xa4>)
 8002d82:	e7e3      	b.n	8002d4c <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 8002d84:	2001      	movs	r0, #1
 8002d86:	4770      	bx	lr
    return HAL_BUSY;
 8002d88:	2002      	movs	r0, #2
}
 8002d8a:	4770      	bx	lr
 8002d8c:	08002e9f 	.word	0x08002e9f
 8002d90:	08002e49 	.word	0x08002e49

08002d94 <HAL_UART_Transmit_DMA>:
{
 8002d94:	b538      	push	{r3, r4, r5, lr}
 8002d96:	4604      	mov	r4, r0
 8002d98:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002d9a:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
 8002d9e:	2a20      	cmp	r2, #32
 8002da0:	d12b      	bne.n	8002dfa <HAL_UART_Transmit_DMA+0x66>
    if ((pData == NULL) || (Size == 0U))
 8002da2:	b341      	cbz	r1, 8002df6 <HAL_UART_Transmit_DMA+0x62>
 8002da4:	b33b      	cbz	r3, 8002df6 <HAL_UART_Transmit_DMA+0x62>
    __HAL_LOCK(huart);
 8002da6:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8002daa:	2a01      	cmp	r2, #1
 8002dac:	d025      	beq.n	8002dfa <HAL_UART_Transmit_DMA+0x66>
 8002dae:	2201      	movs	r2, #1
 8002db0:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002db4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferCount = Size;
 8002db6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dba:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dbc:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbe:	6765      	str	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc0:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002dc4:	4a0e      	ldr	r2, [pc, #56]	; (8002e00 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize  = Size;
 8002dc6:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr  = pData;
 8002dca:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002dcc:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002dce:	4a0d      	ldr	r2, [pc, #52]	; (8002e04 <HAL_UART_Transmit_DMA+0x70>)
 8002dd0:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002dd2:	4a0d      	ldr	r2, [pc, #52]	; (8002e08 <HAL_UART_Transmit_DMA+0x74>)
 8002dd4:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8002dd6:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8002dd8:	6385      	str	r5, [r0, #56]	; 0x38
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8002dda:	3228      	adds	r2, #40	; 0x28
 8002ddc:	f7fe fdd8 	bl	8001990 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	2240      	movs	r2, #64	; 0x40
 8002de4:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002de6:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8002de8:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002dec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002df0:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8002df2:	4628      	mov	r0, r5
 8002df4:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002df6:	2001      	movs	r0, #1
 8002df8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002dfa:	2002      	movs	r0, #2
}
 8002dfc:	bd38      	pop	{r3, r4, r5, pc}
 8002dfe:	bf00      	nop
 8002e00:	08002e0f 	.word	0x08002e0f
 8002e04:	08002e3f 	.word	0x08002e3f
 8002e08:	08002ef5 	.word	0x08002ef5

08002e0c <HAL_UART_TxCpltCallback>:
 8002e0c:	4770      	bx	lr

08002e0e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002e0e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002e10:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e12:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f013 0320 	ands.w	r3, r3, #32
 8002e1a:	d10b      	bne.n	8002e34 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 8002e1c:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e20:	6813      	ldr	r3, [r2, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e28:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	bd08      	pop	{r3, pc}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8002e34:	4610      	mov	r0, r2
 8002e36:	f7ff ffe9 	bl	8002e0c <HAL_UART_TxCpltCallback>
 8002e3a:	bd08      	pop	{r3, pc}

08002e3c <HAL_UART_TxHalfCpltCallback>:
 8002e3c:	4770      	bx	lr

08002e3e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e3e:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002e40:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002e42:	f7ff fffb 	bl	8002e3c <HAL_UART_TxHalfCpltCallback>
 8002e46:	bd08      	pop	{r3, pc}

08002e48 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e48:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8002e4c:	2a22      	cmp	r2, #34	; 0x22
{
 8002e4e:	b538      	push	{r3, r4, r5, lr}
 8002e50:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e52:	d11e      	bne.n	8002e92 <UART_RxISR_8BIT+0x4a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e54:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002e56:	6d44      	ldr	r4, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 8002e58:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002e5c:	1c65      	adds	r5, r4, #1
 8002e5e:	400a      	ands	r2, r1
 8002e60:	6545      	str	r5, [r0, #84]	; 0x54
 8002e62:	7022      	strb	r2, [r4, #0]

    if (--huart->RxXferCount == 0)
 8002e64:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8002e68:	3a01      	subs	r2, #1
 8002e6a:	b292      	uxth	r2, r2
 8002e6c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 8002e70:	b9a2      	cbnz	r2, 8002e9c <UART_RxISR_8BIT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e72:	6801      	ldr	r1, [r0, #0]
 8002e74:	680c      	ldr	r4, [r1, #0]
 8002e76:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8002e7a:	600c      	str	r4, [r1, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e7c:	688c      	ldr	r4, [r1, #8]
 8002e7e:	f024 0401 	bic.w	r4, r4, #1
 8002e82:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e84:	2120      	movs	r1, #32
 8002e86:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002e8a:	6602      	str	r2, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002e8c:	f001 fd98 	bl	80049c0 <HAL_UART_RxCpltCallback>
 8002e90:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e92:	8b13      	ldrh	r3, [r2, #24]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f043 0308 	orr.w	r3, r3, #8
 8002e9a:	8313      	strh	r3, [r2, #24]
 8002e9c:	bd38      	pop	{r3, r4, r5, pc}

08002e9e <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e9e:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8002ea2:	2a22      	cmp	r2, #34	; 0x22
{
 8002ea4:	b510      	push	{r4, lr}
 8002ea6:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ea8:	d11d      	bne.n	8002ee6 <UART_RxISR_16BIT+0x48>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002eaa:	8c94      	ldrh	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8002eac:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8002eb0:	400c      	ands	r4, r1
 8002eb2:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8002eb4:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2;
 8002eb8:	6541      	str	r1, [r0, #84]	; 0x54

    if (--huart->RxXferCount == 0)
 8002eba:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
 8002ebe:	3901      	subs	r1, #1
 8002ec0:	b289      	uxth	r1, r1
 8002ec2:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
 8002ec6:	b999      	cbnz	r1, 8002ef0 <UART_RxISR_16BIT+0x52>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ec8:	6814      	ldr	r4, [r2, #0]
 8002eca:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8002ece:	6014      	str	r4, [r2, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed0:	6894      	ldr	r4, [r2, #8]
 8002ed2:	f024 0401 	bic.w	r4, r4, #1
 8002ed6:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002ede:	6601      	str	r1, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002ee0:	f001 fd6e 	bl	80049c0 <HAL_UART_RxCpltCallback>
 8002ee4:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002ee6:	8b13      	ldrh	r3, [r2, #24]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	f043 0308 	orr.w	r3, r3, #8
 8002eee:	8313      	strh	r3, [r2, #24]
 8002ef0:	bd10      	pop	{r4, pc}

08002ef2 <HAL_UART_ErrorCallback>:
 8002ef2:	4770      	bx	lr

08002ef4 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ef4:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
 8002ef6:	b508      	push	{r3, lr}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ef8:	f891 3071 	ldrb.w	r3, [r1, #113]	; 0x71
 8002efc:	2b21      	cmp	r3, #33	; 0x21
 8002efe:	d10d      	bne.n	8002f1c <UART_DMAError+0x28>
      && (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 8002f00:	680b      	ldr	r3, [r1, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	0612      	lsls	r2, r2, #24
 8002f06:	d509      	bpl.n	8002f1c <UART_DMAError+0x28>
    huart->TxXferCount = 0U;
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002f14:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002f16:	2320      	movs	r3, #32
 8002f18:	f881 3071 	strb.w	r3, [r1, #113]	; 0x71
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f1c:	f891 3072 	ldrb.w	r3, [r1, #114]	; 0x72
 8002f20:	2b22      	cmp	r3, #34	; 0x22
 8002f22:	d109      	bne.n	8002f38 <UART_DMAError+0x44>
      && (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002f24:	680b      	ldr	r3, [r1, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	065b      	lsls	r3, r3, #25
 8002f2a:	d505      	bpl.n	8002f38 <UART_DMAError+0x44>
    huart->RxXferCount = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8002f32:	4608      	mov	r0, r1
 8002f34:	f7ff feca 	bl	8002ccc <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f38:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8002f3a:	f043 0310 	orr.w	r3, r3, #16
 8002f3e:	674b      	str	r3, [r1, #116]	; 0x74
  HAL_UART_ErrorCallback(huart);
 8002f40:	4608      	mov	r0, r1
 8002f42:	f7ff ffd6 	bl	8002ef2 <HAL_UART_ErrorCallback>
 8002f46:	bd08      	pop	{r3, pc}

08002f48 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f48:	6803      	ldr	r3, [r0, #0]
 8002f4a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f4c:	6819      	ldr	r1, [r3, #0]
{
 8002f4e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002f50:	0716      	lsls	r6, r2, #28
{
 8002f52:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f54:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8002f56:	d10a      	bne.n	8002f6e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 8002f58:	0696      	lsls	r6, r2, #26
 8002f5a:	d564      	bpl.n	8003026 <HAL_UART_IRQHandler+0xde>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f5c:	068e      	lsls	r6, r1, #26
 8002f5e:	d562      	bpl.n	8003026 <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8002f60:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8083 	beq.w	800306e <HAL_UART_IRQHandler+0x126>
}
 8002f68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8002f6c:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != RESET)
 8002f6e:	f015 0001 	ands.w	r0, r5, #1
 8002f72:	d102      	bne.n	8002f7a <HAL_UART_IRQHandler+0x32>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f74:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002f78:	d055      	beq.n	8003026 <HAL_UART_IRQHandler+0xde>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f7a:	07d5      	lsls	r5, r2, #31
 8002f7c:	d507      	bpl.n	8002f8e <HAL_UART_IRQHandler+0x46>
 8002f7e:	05ce      	lsls	r6, r1, #23
 8002f80:	d505      	bpl.n	8002f8e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f82:	2501      	movs	r5, #1
 8002f84:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f86:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002f88:	f045 0501 	orr.w	r5, r5, #1
 8002f8c:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f8e:	0795      	lsls	r5, r2, #30
 8002f90:	d506      	bpl.n	8002fa0 <HAL_UART_IRQHandler+0x58>
 8002f92:	b128      	cbz	r0, 8002fa0 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f94:	2502      	movs	r5, #2
 8002f96:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f98:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002f9a:	f045 0504 	orr.w	r5, r5, #4
 8002f9e:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fa0:	0756      	lsls	r6, r2, #29
 8002fa2:	d506      	bpl.n	8002fb2 <HAL_UART_IRQHandler+0x6a>
 8002fa4:	b128      	cbz	r0, 8002fb2 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fa6:	2504      	movs	r5, #4
 8002fa8:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002faa:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002fac:	f045 0502 	orr.w	r5, r5, #2
 8002fb0:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 8002fb2:	0715      	lsls	r5, r2, #28
 8002fb4:	d507      	bpl.n	8002fc6 <HAL_UART_IRQHandler+0x7e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8002fb6:	068e      	lsls	r6, r1, #26
 8002fb8:	d400      	bmi.n	8002fbc <HAL_UART_IRQHandler+0x74>
 8002fba:	b120      	cbz	r0, 8002fc6 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fbc:	2008      	movs	r0, #8
 8002fbe:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fc0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002fc2:	4303      	orrs	r3, r0
 8002fc4:	6763      	str	r3, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fc6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d050      	beq.n	800306e <HAL_UART_IRQHandler+0x126>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8002fcc:	0695      	lsls	r5, r2, #26
 8002fce:	d505      	bpl.n	8002fdc <HAL_UART_IRQHandler+0x94>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fd0:	0688      	lsls	r0, r1, #26
 8002fd2:	d503      	bpl.n	8002fdc <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL)
 8002fd4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002fd6:	b10b      	cbz	r3, 8002fdc <HAL_UART_IRQHandler+0x94>
          huart->RxISR(huart);
 8002fd8:	4620      	mov	r0, r4
 8002fda:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002fdc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002fde:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8002fe0:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002fe2:	d404      	bmi.n	8002fee <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002fe8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002fec:	d017      	beq.n	800301e <HAL_UART_IRQHandler+0xd6>
        UART_EndRxTransfer(huart);
 8002fee:	f7ff fe6d 	bl	8002ccc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	0652      	lsls	r2, r2, #25
 8002ff8:	d50d      	bpl.n	8003016 <HAL_UART_IRQHandler+0xce>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ffa:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002ffc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003002:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003004:	b138      	cbz	r0, 8003016 <HAL_UART_IRQHandler+0xce>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003006:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <HAL_UART_IRQHandler+0x128>)
 8003008:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800300a:	f7fe fd01 	bl	8001a10 <HAL_DMA_Abort_IT>
 800300e:	b370      	cbz	r0, 800306e <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003010:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003012:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003014:	e7a8      	b.n	8002f68 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8003016:	4620      	mov	r0, r4
 8003018:	f7ff ff6b 	bl	8002ef2 <HAL_UART_ErrorCallback>
 800301c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800301e:	f7ff ff68 	bl	8002ef2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003022:	6765      	str	r5, [r4, #116]	; 0x74
 8003024:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003026:	02d6      	lsls	r6, r2, #11
 8003028:	d509      	bpl.n	800303e <HAL_UART_IRQHandler+0xf6>
 800302a:	0268      	lsls	r0, r5, #9
 800302c:	d507      	bpl.n	800303e <HAL_UART_IRQHandler+0xf6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800302e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8003032:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003034:	621a      	str	r2, [r3, #32]
}
 8003036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800303a:	f000 bafd 	b.w	8003638 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != RESET)
 800303e:	0616      	lsls	r6, r2, #24
 8003040:	d505      	bpl.n	800304e <HAL_UART_IRQHandler+0x106>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003042:	060d      	lsls	r5, r1, #24
 8003044:	d503      	bpl.n	800304e <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 8003046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003048:	b18b      	cbz	r3, 800306e <HAL_UART_IRQHandler+0x126>
      huart->TxISR(huart);
 800304a:	4620      	mov	r0, r4
 800304c:	e78c      	b.n	8002f68 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800304e:	0650      	lsls	r0, r2, #25
 8003050:	d50d      	bpl.n	800306e <HAL_UART_IRQHandler+0x126>
 8003052:	064a      	lsls	r2, r1, #25
 8003054:	d50b      	bpl.n	800306e <HAL_UART_IRQHandler+0x126>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305c:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800305e:	2320      	movs	r3, #32
 8003060:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->TxISR = NULL;
 8003064:	2300      	movs	r3, #0
 8003066:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8003068:	4620      	mov	r0, r4
 800306a:	f7ff fecf 	bl	8002e0c <HAL_UART_TxCpltCallback>
 800306e:	bd70      	pop	{r4, r5, r6, pc}
 8003070:	08003075 	.word	0x08003075

08003074 <UART_DMAAbortOnError>:
{
 8003074:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003076:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800307e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003082:	f7ff ff36 	bl	8002ef2 <HAL_UART_ErrorCallback>
 8003086:	bd08      	pop	{r3, pc}

08003088 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8003088:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800308a:	69c1      	ldr	r1, [r0, #28]
{
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003090:	6883      	ldr	r3, [r0, #8]
 8003092:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003094:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003096:	4303      	orrs	r3, r0
 8003098:	6960      	ldr	r0, [r4, #20]
 800309a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800309c:	48ba      	ldr	r0, [pc, #744]	; (8003388 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800309e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030a0:	4028      	ands	r0, r5
 80030a2:	4303      	orrs	r3, r0
 80030a4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a6:	6853      	ldr	r3, [r2, #4]
 80030a8:	68e0      	ldr	r0, [r4, #12]
 80030aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030ae:	4303      	orrs	r3, r0
 80030b0:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030b2:	4bb6      	ldr	r3, [pc, #728]	; (800338c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030b4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030b6:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 80030b8:	bf1c      	itt	ne
 80030ba:	6a23      	ldrne	r3, [r4, #32]
 80030bc:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030be:	6893      	ldr	r3, [r2, #8]
 80030c0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80030c4:	4303      	orrs	r3, r0
 80030c6:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030c8:	4bb1      	ldr	r3, [pc, #708]	; (8003390 <UART_SetConfig+0x308>)
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d119      	bne.n	8003102 <UART_SetConfig+0x7a>
 80030ce:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80030d2:	4ab0      	ldr	r2, [pc, #704]	; (8003394 <UART_SetConfig+0x30c>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d8:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030dc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80030e0:	5cd3      	ldrb	r3, [r2, r3]
 80030e2:	f040 8138 	bne.w	8003356 <UART_SetConfig+0x2ce>
    switch (clocksource)
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	f200 808f 	bhi.w	800320a <UART_SetConfig+0x182>
 80030ec:	e8df f013 	tbh	[pc, r3, lsl #1]
 80030f0:	00ca011a 	.word	0x00ca011a
 80030f4:	008d00f9 	.word	0x008d00f9
 80030f8:	008d0114 	.word	0x008d0114
 80030fc:	008d008d 	.word	0x008d008d
 8003100:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003102:	4ba5      	ldr	r3, [pc, #660]	; (8003398 <UART_SetConfig+0x310>)
 8003104:	429a      	cmp	r2, r3
 8003106:	d107      	bne.n	8003118 <UART_SetConfig+0x90>
 8003108:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800310c:	4aa3      	ldr	r2, [pc, #652]	; (800339c <UART_SetConfig+0x314>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	e7e1      	b.n	80030dc <UART_SetConfig+0x54>
 8003118:	4ba1      	ldr	r3, [pc, #644]	; (80033a0 <UART_SetConfig+0x318>)
 800311a:	429a      	cmp	r2, r3
 800311c:	d123      	bne.n	8003166 <UART_SetConfig+0xde>
 800311e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800312a:	2b10      	cmp	r3, #16
 800312c:	f000 80f1 	beq.w	8003312 <UART_SetConfig+0x28a>
 8003130:	d80b      	bhi.n	800314a <UART_SetConfig+0xc2>
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80f3 	beq.w	800331e <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003138:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        ret = HAL_ERROR;
 800313c:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003140:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003144:	f000 80f8 	beq.w	8003338 <UART_SetConfig+0x2b0>
 8003148:	e0a8      	b.n	800329c <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800314a:	2b20      	cmp	r3, #32
 800314c:	f000 80c6 	beq.w	80032dc <UART_SetConfig+0x254>
 8003150:	2b30      	cmp	r3, #48	; 0x30
 8003152:	d1f1      	bne.n	8003138 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003154:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003158:	f040 80b8 	bne.w	80032cc <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800315c:	6860      	ldr	r0, [r4, #4]
 800315e:	0843      	lsrs	r3, r0, #1
 8003160:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003164:	e0c3      	b.n	80032ee <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003166:	4b8f      	ldr	r3, [pc, #572]	; (80033a4 <UART_SetConfig+0x31c>)
 8003168:	429a      	cmp	r2, r3
 800316a:	d11e      	bne.n	80031aa <UART_SetConfig+0x122>
 800316c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8003170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003174:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003178:	2b40      	cmp	r3, #64	; 0x40
 800317a:	f000 80bb 	beq.w	80032f4 <UART_SetConfig+0x26c>
 800317e:	d80a      	bhi.n	8003196 <UART_SetConfig+0x10e>
 8003180:	b97b      	cbnz	r3, 80031a2 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003182:	4b82      	ldr	r3, [pc, #520]	; (800338c <UART_SetConfig+0x304>)
 8003184:	429a      	cmp	r2, r3
 8003186:	f040 80ca 	bne.w	800331e <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800318a:	f7ff f9c1 	bl	8002510 <HAL_RCC_GetPCLK1Freq>
        break;
 800318e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8003190:	bbb0      	cbnz	r0, 8003200 <UART_SetConfig+0x178>
 8003192:	4602      	mov	r2, r0
 8003194:	e03a      	b.n	800320c <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003196:	2b80      	cmp	r3, #128	; 0x80
 8003198:	f000 809d 	beq.w	80032d6 <UART_SetConfig+0x24e>
 800319c:	2bc0      	cmp	r3, #192	; 0xc0
 800319e:	f000 80b0 	beq.w	8003302 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80031a2:	4b7a      	ldr	r3, [pc, #488]	; (800338c <UART_SetConfig+0x304>)
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d1c7      	bne.n	8003138 <UART_SetConfig+0xb0>
 80031a8:	e02f      	b.n	800320a <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031aa:	4b7f      	ldr	r3, [pc, #508]	; (80033a8 <UART_SetConfig+0x320>)
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d111      	bne.n	80031d4 <UART_SetConfig+0x14c>
 80031b0:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c0:	f000 8098 	beq.w	80032f4 <UART_SetConfig+0x26c>
 80031c4:	d9dc      	bls.n	8003180 <UART_SetConfig+0xf8>
 80031c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ca:	f000 8084 	beq.w	80032d6 <UART_SetConfig+0x24e>
 80031ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031d2:	e7e4      	b.n	800319e <UART_SetConfig+0x116>
 80031d4:	4b6d      	ldr	r3, [pc, #436]	; (800338c <UART_SetConfig+0x304>)
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d1ae      	bne.n	8003138 <UART_SetConfig+0xb0>
 80031da:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ea:	f000 8083 	beq.w	80032f4 <UART_SetConfig+0x26c>
 80031ee:	d9c7      	bls.n	8003180 <UART_SetConfig+0xf8>
 80031f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f4:	d06f      	beq.n	80032d6 <UART_SetConfig+0x24e>
 80031f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031fa:	e7d0      	b.n	800319e <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80031fc:	486b      	ldr	r0, [pc, #428]	; (80033ac <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 80031fe:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8003200:	6862      	ldr	r2, [r4, #4]
 8003202:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003206:	4281      	cmp	r1, r0
 8003208:	d905      	bls.n	8003216 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800320a:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 800320c:	2300      	movs	r3, #0
 800320e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003210:	6663      	str	r3, [r4, #100]	; 0x64
}
 8003212:	4610      	mov	r0, r2
 8003214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8003216:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800321a:	d8f6      	bhi.n	800320a <UART_SetConfig+0x182>
        switch (clocksource)
 800321c:	2b08      	cmp	r3, #8
 800321e:	d82e      	bhi.n	800327e <UART_SetConfig+0x1f6>
 8003220:	e8df f003 	tbb	[pc, r3]
 8003224:	2d1c2d05 	.word	0x2d1c2d05
 8003228:	2d2d2d24 	.word	0x2d2d2d24
 800322c:	27          	.byte	0x27
 800322d:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800322e:	f7ff f96f 	bl	8002510 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003232:	6862      	ldr	r2, [r4, #4]
 8003234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003238:	0856      	lsrs	r6, r2, #1
 800323a:	2700      	movs	r7, #0
 800323c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8003240:	2300      	movs	r3, #0
 8003242:	4630      	mov	r0, r6
 8003244:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003246:	f7fd fd5b 	bl	8000d00 <__aeabi_uldivmod>
            break;
 800324a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800324c:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <UART_SetConfig+0x328>)
 800324e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003252:	4299      	cmp	r1, r3
 8003254:	d8d9      	bhi.n	800320a <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	60d8      	str	r0, [r3, #12]
 800325a:	e7d7      	b.n	800320c <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800325c:	4855      	ldr	r0, [pc, #340]	; (80033b4 <UART_SetConfig+0x32c>)
 800325e:	0855      	lsrs	r5, r2, #1
 8003260:	2300      	movs	r3, #0
 8003262:	2100      	movs	r1, #0
 8003264:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003266:	f141 0100 	adc.w	r1, r1, #0
 800326a:	e7ec      	b.n	8003246 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800326c:	f7fe fe44 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8003270:	e7df      	b.n	8003232 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003272:	0850      	lsrs	r0, r2, #1
 8003274:	2100      	movs	r1, #0
 8003276:	2300      	movs	r3, #0
 8003278:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800327c:	e7f3      	b.n	8003266 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 800327e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003280:	2000      	movs	r0, #0
 8003282:	e7e3      	b.n	800324c <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003284:	f7ff f956 	bl	8002534 <HAL_RCC_GetPCLK2Freq>
 8003288:	e04e      	b.n	8003328 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800328a:	f7ff f941 	bl	8002510 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800328e:	6862      	ldr	r2, [r4, #4]
 8003290:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003294:	fbb3 f3f2 	udiv	r3, r3, r2
 8003298:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800329a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800329c:	f1a3 0010 	sub.w	r0, r3, #16
 80032a0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80032a4:	4288      	cmp	r0, r1
 80032a6:	d8b0      	bhi.n	800320a <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 80032a8:	6821      	ldr	r1, [r4, #0]
 80032aa:	60cb      	str	r3, [r1, #12]
 80032ac:	e7ae      	b.n	800320c <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80032ae:	f7ff f941 	bl	8002534 <HAL_RCC_GetPCLK2Freq>
 80032b2:	e7ec      	b.n	800328e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80032b4:	6860      	ldr	r0, [r4, #4]
 80032b6:	0843      	lsrs	r3, r0, #1
 80032b8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80032bc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80032c4:	e7e8      	b.n	8003298 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032c6:	f7fe fe17 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 80032ca:	e7e0      	b.n	800328e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032cc:	6860      	ldr	r0, [r4, #4]
 80032ce:	0843      	lsrs	r3, r0, #1
 80032d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80032d4:	e7f4      	b.n	80032c0 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 80032d6:	4b2d      	ldr	r3, [pc, #180]	; (800338c <UART_SetConfig+0x304>)
 80032d8:	429a      	cmp	r2, r3
 80032da:	d08f      	beq.n	80031fc <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032dc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80032e0:	d1e8      	bne.n	80032b4 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80032e2:	6860      	ldr	r0, [r4, #4]
 80032e4:	0843      	lsrs	r3, r0, #1
 80032e6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80032ea:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80032ee:	fbb3 f3f0 	udiv	r3, r3, r0
 80032f2:	e01f      	b.n	8003334 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 80032f4:	4b25      	ldr	r3, [pc, #148]	; (800338c <UART_SetConfig+0x304>)
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d10b      	bne.n	8003312 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80032fa:	f7fe fdfd 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
        break;
 80032fe:	2304      	movs	r3, #4
 8003300:	e746      	b.n	8003190 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003302:	4b22      	ldr	r3, [pc, #136]	; (800338c <UART_SetConfig+0x304>)
 8003304:	429a      	cmp	r2, r3
 8003306:	f47f af25 	bne.w	8003154 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800330a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 800330e:	2308      	movs	r3, #8
 8003310:	e776      	b.n	8003200 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003312:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003316:	d1d6      	bne.n	80032c6 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003318:	f7fe fdee 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 800331c:	e004      	b.n	8003328 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800331e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003322:	d1b2      	bne.n	800328a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003324:	f7ff f8f4 	bl	8002510 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003328:	6861      	ldr	r1, [r4, #4]
 800332a:	084a      	lsrs	r2, r1, #1
 800332c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003330:	fbb3 f3f1 	udiv	r3, r3, r1
 8003334:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003336:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003338:	f1a3 0010 	sub.w	r0, r3, #16
 800333c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003340:	4288      	cmp	r0, r1
 8003342:	f63f af62 	bhi.w	800320a <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8003346:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800334a:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800334c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003350:	430b      	orrs	r3, r1
 8003352:	60c3      	str	r3, [r0, #12]
 8003354:	e75a      	b.n	800320c <UART_SetConfig+0x184>
    switch (clocksource)
 8003356:	2b08      	cmp	r3, #8
 8003358:	f63f af57 	bhi.w	800320a <UART_SetConfig+0x182>
 800335c:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <UART_SetConfig+0x2dc>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	0800328b 	.word	0x0800328b
 8003368:	080032af 	.word	0x080032af
 800336c:	080032b5 	.word	0x080032b5
 8003370:	0800320b 	.word	0x0800320b
 8003374:	080032c7 	.word	0x080032c7
 8003378:	0800320b 	.word	0x0800320b
 800337c:	0800320b 	.word	0x0800320b
 8003380:	0800320b 	.word	0x0800320b
 8003384:	080032cd 	.word	0x080032cd
 8003388:	efff69f3 	.word	0xefff69f3
 800338c:	40008000 	.word	0x40008000
 8003390:	40013800 	.word	0x40013800
 8003394:	0800aa70 	.word	0x0800aa70
 8003398:	40004400 	.word	0x40004400
 800339c:	0800aa74 	.word	0x0800aa74
 80033a0:	40004800 	.word	0x40004800
 80033a4:	40004c00 	.word	0x40004c00
 80033a8:	40005000 	.word	0x40005000
 80033ac:	00f42400 	.word	0x00f42400
 80033b0:	000ffcff 	.word	0x000ffcff
 80033b4:	f4240000 	.word	0xf4240000

080033b8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80033ba:	07da      	lsls	r2, r3, #31
{
 80033bc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033be:	d506      	bpl.n	80033ce <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033c0:	6801      	ldr	r1, [r0, #0]
 80033c2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80033c4:	684a      	ldr	r2, [r1, #4]
 80033c6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80033ca:	4322      	orrs	r2, r4
 80033cc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033ce:	079c      	lsls	r4, r3, #30
 80033d0:	d506      	bpl.n	80033e0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033d2:	6801      	ldr	r1, [r0, #0]
 80033d4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80033d6:	684a      	ldr	r2, [r1, #4]
 80033d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033dc:	4322      	orrs	r2, r4
 80033de:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e0:	0759      	lsls	r1, r3, #29
 80033e2:	d506      	bpl.n	80033f2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033e4:	6801      	ldr	r1, [r0, #0]
 80033e6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80033e8:	684a      	ldr	r2, [r1, #4]
 80033ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033ee:	4322      	orrs	r2, r4
 80033f0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033f2:	071a      	lsls	r2, r3, #28
 80033f4:	d506      	bpl.n	8003404 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033f6:	6801      	ldr	r1, [r0, #0]
 80033f8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80033fa:	684a      	ldr	r2, [r1, #4]
 80033fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003400:	4322      	orrs	r2, r4
 8003402:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003404:	06dc      	lsls	r4, r3, #27
 8003406:	d506      	bpl.n	8003416 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003408:	6801      	ldr	r1, [r0, #0]
 800340a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800340c:	688a      	ldr	r2, [r1, #8]
 800340e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003412:	4322      	orrs	r2, r4
 8003414:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003416:	0699      	lsls	r1, r3, #26
 8003418:	d506      	bpl.n	8003428 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800341a:	6801      	ldr	r1, [r0, #0]
 800341c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800341e:	688a      	ldr	r2, [r1, #8]
 8003420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003424:	4322      	orrs	r2, r4
 8003426:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003428:	065a      	lsls	r2, r3, #25
 800342a:	d50f      	bpl.n	800344c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800342c:	6801      	ldr	r1, [r0, #0]
 800342e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003430:	684a      	ldr	r2, [r1, #4]
 8003432:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003436:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003438:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800343c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800343e:	d105      	bne.n	800344c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003440:	684a      	ldr	r2, [r1, #4]
 8003442:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003444:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003448:	4322      	orrs	r2, r4
 800344a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	d506      	bpl.n	800345e <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003450:	6802      	ldr	r2, [r0, #0]
 8003452:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003454:	6853      	ldr	r3, [r2, #4]
 8003456:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800345a:	430b      	orrs	r3, r1
 800345c:	6053      	str	r3, [r2, #4]
 800345e:	bd10      	pop	{r4, pc}

08003460 <UART_WaitOnFlagUntilTimeout>:
{
 8003460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003464:	9d06      	ldr	r5, [sp, #24]
 8003466:	4604      	mov	r4, r0
 8003468:	460f      	mov	r7, r1
 800346a:	4616      	mov	r6, r2
 800346c:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346e:	6821      	ldr	r1, [r4, #0]
 8003470:	69ca      	ldr	r2, [r1, #28]
 8003472:	ea37 0302 	bics.w	r3, r7, r2
 8003476:	bf0c      	ite	eq
 8003478:	2201      	moveq	r2, #1
 800347a:	2200      	movne	r2, #0
 800347c:	42b2      	cmp	r2, r6
 800347e:	d002      	beq.n	8003486 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003480:	2000      	movs	r0, #0
}
 8003482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003486:	1c6b      	adds	r3, r5, #1
 8003488:	d0f2      	beq.n	8003470 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800348a:	b99d      	cbnz	r5, 80034b4 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003494:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	f022 0201 	bic.w	r2, r2, #1
 800349c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800349e:	2320      	movs	r3, #32
 80034a0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80034a4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80034a8:	2300      	movs	r3, #0
 80034aa:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80034ae:	2003      	movs	r0, #3
 80034b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034b4:	f7fd fe1c 	bl	80010f0 <HAL_GetTick>
 80034b8:	eba0 0008 	sub.w	r0, r0, r8
 80034bc:	4285      	cmp	r5, r0
 80034be:	d2d6      	bcs.n	800346e <UART_WaitOnFlagUntilTimeout+0xe>
 80034c0:	e7e4      	b.n	800348c <UART_WaitOnFlagUntilTimeout+0x2c>

080034c2 <HAL_UART_Transmit>:
{
 80034c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80034c6:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80034c8:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80034cc:	2b20      	cmp	r3, #32
{
 80034ce:	4604      	mov	r4, r0
 80034d0:	460d      	mov	r5, r1
 80034d2:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80034d4:	d14a      	bne.n	800356c <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 80034d6:	2900      	cmp	r1, #0
 80034d8:	d046      	beq.n	8003568 <HAL_UART_Transmit+0xa6>
 80034da:	2a00      	cmp	r2, #0
 80034dc:	d044      	beq.n	8003568 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80034de:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d042      	beq.n	800356c <HAL_UART_Transmit+0xaa>
 80034e6:	2301      	movs	r3, #1
 80034e8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034f0:	2321      	movs	r3, #33	; 0x21
 80034f2:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 80034f6:	f7fd fdfb 	bl	80010f0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80034fa:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80034fe:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8003500:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003504:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003508:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 800350a:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800350c:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 800350e:	b952      	cbnz	r2, 8003526 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003510:	2140      	movs	r1, #64	; 0x40
 8003512:	4620      	mov	r0, r4
 8003514:	f7ff ffa4 	bl	8003460 <UART_WaitOnFlagUntilTimeout>
 8003518:	b958      	cbnz	r0, 8003532 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 800351a:	2320      	movs	r3, #32
 800351c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8003520:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8003524:	e006      	b.n	8003534 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003526:	2200      	movs	r2, #0
 8003528:	2180      	movs	r1, #128	; 0x80
 800352a:	4620      	mov	r0, r4
 800352c:	f7ff ff98 	bl	8003460 <UART_WaitOnFlagUntilTimeout>
 8003530:	b118      	cbz	r0, 800353a <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8003532:	2003      	movs	r0, #3
}
 8003534:	b002      	add	sp, #8
 8003536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800353a:	68a3      	ldr	r3, [r4, #8]
 800353c:	6822      	ldr	r2, [r4, #0]
 800353e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003542:	d10d      	bne.n	8003560 <HAL_UART_Transmit+0x9e>
 8003544:	6923      	ldr	r3, [r4, #16]
 8003546:	b95b      	cbnz	r3, 8003560 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003548:	f835 3b02 	ldrh.w	r3, [r5], #2
 800354c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003550:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003552:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003556:	3b01      	subs	r3, #1
 8003558:	b29b      	uxth	r3, r3
 800355a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800355e:	e7d1      	b.n	8003504 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003560:	782b      	ldrb	r3, [r5, #0]
 8003562:	8513      	strh	r3, [r2, #40]	; 0x28
 8003564:	3501      	adds	r5, #1
 8003566:	e7f4      	b.n	8003552 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8003568:	2001      	movs	r0, #1
 800356a:	e7e3      	b.n	8003534 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 800356c:	2002      	movs	r0, #2
 800356e:	e7e1      	b.n	8003534 <HAL_UART_Transmit+0x72>

08003570 <UART_CheckIdleState>:
{
 8003570:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003572:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003574:	2600      	movs	r6, #0
 8003576:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8003578:	f7fd fdba 	bl	80010f0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003582:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003584:	d417      	bmi.n	80035b6 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	075b      	lsls	r3, r3, #29
 800358c:	d50a      	bpl.n	80035a4 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800358e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2200      	movs	r2, #0
 8003596:	462b      	mov	r3, r5
 8003598:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800359c:	4620      	mov	r0, r4
 800359e:	f7ff ff5f 	bl	8003460 <UART_WaitOnFlagUntilTimeout>
 80035a2:	b9a0      	cbnz	r0, 80035ce <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 80035a4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80035a6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80035a8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 80035ac:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80035b0:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 80035b4:	e00c      	b.n	80035d0 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	4632      	mov	r2, r6
 80035be:	4603      	mov	r3, r0
 80035c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035c4:	4620      	mov	r0, r4
 80035c6:	f7ff ff4b 	bl	8003460 <UART_WaitOnFlagUntilTimeout>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d0db      	beq.n	8003586 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80035ce:	2003      	movs	r0, #3
}
 80035d0:	b002      	add	sp, #8
 80035d2:	bd70      	pop	{r4, r5, r6, pc}

080035d4 <HAL_UART_Init>:
{
 80035d4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80035d6:	4604      	mov	r4, r0
 80035d8:	b360      	cbz	r0, 8003634 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80035da:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80035de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035e2:	b91b      	cbnz	r3, 80035ec <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80035e4:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80035e8:	f001 fb36 	bl	8004c58 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80035ec:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80035ee:	2324      	movs	r3, #36	; 0x24
 80035f0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80035f4:	6813      	ldr	r3, [r2, #0]
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035fc:	4620      	mov	r0, r4
 80035fe:	f7ff fd43 	bl	8003088 <UART_SetConfig>
 8003602:	2801      	cmp	r0, #1
 8003604:	d016      	beq.n	8003634 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003608:	b113      	cbz	r3, 8003610 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800360a:	4620      	mov	r0, r4
 800360c:	f7ff fed4 	bl	80033b8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003618:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003620:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003628:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800362a:	601a      	str	r2, [r3, #0]
}
 800362c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003630:	f7ff bf9e 	b.w	8003570 <UART_CheckIdleState>
}
 8003634:	2001      	movs	r0, #1
 8003636:	bd10      	pop	{r4, pc}

08003638 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003638:	4770      	bx	lr

0800363a <MX_Core_Init>:
/*************************************************************************
  *
  */
void MX_Core_Init(void)
{
    MX_UARTx_Init();
 800363a:	f001 baef 	b.w	8004c1c <MX_USART2_UART_Init>

0800363e <MX_Core_Process>:
#endif
    /* USER CODE END 0 */
}

void MX_Core_Process(void)
{
 800363e:	4770      	bx	lr

08003640 <MX_CRC_Init>:

/* CRC init function */
void MX_CRC_Init(void)
{

  hcrc.Instance = CRC;
 8003640:	4809      	ldr	r0, [pc, #36]	; (8003668 <MX_CRC_Init+0x28>)
{
 8003642:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <MX_CRC_Init+0x2c>)
 8003646:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003648:	2300      	movs	r3, #0
 800364a:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800364c:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800364e:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003650:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003652:	2301      	movs	r3, #1
 8003654:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003656:	f7fd fdc7 	bl	80011e8 <HAL_CRC_Init>
 800365a:	b118      	cbz	r0, 8003664 <MX_CRC_Init+0x24>
  {
    Error_Handler();
  }

}
 800365c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003660:	f001 ba06 	b.w	8004a70 <Error_Handler>
 8003664:	bd08      	pop	{r3, pc}
 8003666:	bf00      	nop
 8003668:	2000b604 	.word	0x2000b604
 800366c:	40023000 	.word	0x40023000

08003670 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8003670:	6802      	ldr	r2, [r0, #0]
 8003672:	4b08      	ldr	r3, [pc, #32]	; (8003694 <HAL_CRC_MspInit+0x24>)
 8003674:	429a      	cmp	r2, r3
{
 8003676:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8003678:	d10a      	bne.n	8003690 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800367a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800367e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003680:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003684:	649a      	str	r2, [r3, #72]	; 0x48
 8003686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800368c:	9301      	str	r3, [sp, #4]
 800368e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003690:	b002      	add	sp, #8
 8003692:	4770      	bx	lr
 8003694:	40023000 	.word	0x40023000

08003698 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003698:	b510      	push	{r4, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
  DAC_ChannelConfTypeDef sConfig = {0};
 800369c:	2224      	movs	r2, #36	; 0x24
 800369e:	2100      	movs	r1, #0
 80036a0:	a801      	add	r0, sp, #4
 80036a2:	f003 f8f0 	bl	8006886 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80036a6:	4811      	ldr	r0, [pc, #68]	; (80036ec <MX_DAC1_Init+0x54>)
 80036a8:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <MX_DAC1_Init+0x58>)
 80036aa:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80036ac:	f7fd fdf8 	bl	80012a0 <HAL_DAC_Init>
 80036b0:	b108      	cbz	r0, 80036b6 <MX_DAC1_Init+0x1e>
  {
    Error_Handler();
 80036b2:	f001 f9dd 	bl	8004a70 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80036b6:	2400      	movs	r4, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80036b8:	2304      	movs	r3, #4
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80036ba:	4622      	mov	r2, r4
 80036bc:	eb0d 0103 	add.w	r1, sp, r3
 80036c0:	480a      	ldr	r0, [pc, #40]	; (80036ec <MX_DAC1_Init+0x54>)
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80036c2:	9401      	str	r4, [sp, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80036c4:	9302      	str	r3, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80036c6:	9403      	str	r4, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80036c8:	9404      	str	r4, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80036ca:	9405      	str	r4, [sp, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80036cc:	f7fd feac 	bl	8001428 <HAL_DAC_ConfigChannel>
 80036d0:	b108      	cbz	r0, 80036d6 <MX_DAC1_Init+0x3e>
  {
    Error_Handler();
 80036d2:	f001 f9cd 	bl	8004a70 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80036d6:	2210      	movs	r2, #16
 80036d8:	a901      	add	r1, sp, #4
 80036da:	4804      	ldr	r0, [pc, #16]	; (80036ec <MX_DAC1_Init+0x54>)
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80036dc:	9404      	str	r4, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80036de:	f7fd fea3 	bl	8001428 <HAL_DAC_ConfigChannel>
 80036e2:	b108      	cbz	r0, 80036e8 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 80036e4:	f001 f9c4 	bl	8004a70 <Error_Handler>
  }

}
 80036e8:	b00a      	add	sp, #40	; 0x28
 80036ea:	bd10      	pop	{r4, pc}
 80036ec:	2000b628 	.word	0x2000b628
 80036f0:	40007400 	.word	0x40007400

080036f4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80036f4:	b530      	push	{r4, r5, lr}
 80036f6:	4605      	mov	r5, r0
 80036f8:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fa:	2214      	movs	r2, #20
 80036fc:	2100      	movs	r1, #0
 80036fe:	a803      	add	r0, sp, #12
 8003700:	f003 f8c1 	bl	8006886 <memset>
  if(dacHandle->Instance==DAC1)
 8003704:	682a      	ldr	r2, [r5, #0]
 8003706:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <HAL_DAC_MspInit+0xcc>)
 8003708:	429a      	cmp	r2, r3
 800370a:	d156      	bne.n	80037ba <HAL_DAC_MspInit+0xc6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800370c:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8003710:	4c2c      	ldr	r4, [pc, #176]	; (80037c4 <HAL_DAC_MspInit+0xd0>)
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003712:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003714:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003718:	659a      	str	r2, [r3, #88]	; 0x58
 800371a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800371c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003720:	9201      	str	r2, [sp, #4]
 8003722:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003724:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	64da      	str	r2, [r3, #76]	; 0x4c
 800372c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	9302      	str	r3, [sp, #8]
 8003734:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003736:	2330      	movs	r3, #48	; 0x30
 8003738:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800373e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003740:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003742:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003744:	f7fe f9d4 	bl	8001af0 <HAL_GPIO_Init>
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003748:	2280      	movs	r2, #128	; 0x80
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800374a:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <HAL_DAC_MspInit+0xd4>)
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800374c:	6122      	str	r2, [r4, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800374e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003752:	f04f 0c06 	mov.w	ip, #6
 8003756:	f04f 0e10 	mov.w	lr, #16
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800375a:	6162      	str	r2, [r4, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800375c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003760:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003764:	61a2      	str	r2, [r4, #24]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003766:	2300      	movs	r3, #0
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8003768:	2220      	movs	r2, #32
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800376a:	4620      	mov	r0, r4
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800376c:	60e3      	str	r3, [r4, #12]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800376e:	61e2      	str	r2, [r4, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003770:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003772:	f7fe f8ab 	bl	80018cc <HAL_DMA_Init>
 8003776:	b108      	cbz	r0, 800377c <HAL_DAC_MspInit+0x88>
    {
      Error_Handler();
 8003778:	f001 f97a 	bl	8004a70 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 800377c:	60ac      	str	r4, [r5, #8]
 800377e:	62a5      	str	r5, [r4, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel5;
 8003780:	4c12      	ldr	r4, [pc, #72]	; (80037cc <HAL_DAC_MspInit+0xd8>)
    hdma_dac_ch2.Init.Request = DMA_REQUEST_3;
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003782:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <HAL_DAC_MspInit+0xdc>)
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003784:	2280      	movs	r2, #128	; 0x80
 8003786:	6122      	str	r2, [r4, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003788:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800378c:	f04f 0c03 	mov.w	ip, #3
 8003790:	f04f 0e10 	mov.w	lr, #16
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003794:	6162      	str	r2, [r4, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003796:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800379a:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800379e:	61a2      	str	r2, [r4, #24]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a0:	2300      	movs	r3, #0
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 80037a2:	2220      	movs	r2, #32
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80037a4:	4620      	mov	r0, r4
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a6:	60e3      	str	r3, [r4, #12]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 80037a8:	61e2      	str	r2, [r4, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80037aa:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80037ac:	f7fe f88e 	bl	80018cc <HAL_DMA_Init>
 80037b0:	b108      	cbz	r0, 80037b6 <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 80037b2:	f001 f95d 	bl	8004a70 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 80037b6:	60ec      	str	r4, [r5, #12]
 80037b8:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80037ba:	b009      	add	sp, #36	; 0x24
 80037bc:	bd30      	pop	{r4, r5, pc}
 80037be:	bf00      	nop
 80037c0:	40007400 	.word	0x40007400
 80037c4:	2000b63c 	.word	0x2000b63c
 80037c8:	40020030 	.word	0x40020030
 80037cc:	2000b684 	.word	0x2000b684
 80037d0:	40020458 	.word	0x40020458
 80037d4:	00000000 	.word	0x00000000

080037d8 <dct2_init_f32>:
 * @brief  Initialization function for the DCT2.
 * @param[in]     *S         points to an instance of floating-point DCT2 structure.
 * @param[in]     width      length of the DCT2.
 * @return        none.
 */
void dct2_init_f32(dct2_instance_f32 *S, uint16_t width) {
 80037d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037dc:	ed2d 8b04 	vpush	{d8-d9}
 80037e0:	460d      	mov	r5, r1
 80037e2:	b083      	sub	sp, #12
 80037e4:	4604      	mov	r4, r0
  float32_t *pDataW = NULL;
  float32_t *pDataW_I = NULL;
  float32_t *pDataX = NULL;
  S->width = width;

  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 80037e6:	2300      	movs	r3, #0
  S->width = width;
 80037e8:	f820 1b04 	strh.w	r1, [r0], #4
  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 80037ec:	2201      	movs	r2, #1

  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 80037ee:	fb05 f605 	mul.w	r6, r5, r5
  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 80037f2:	f002 f8c5 	bl	8005980 <arm_mat_init_f32>
  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 80037f6:	2104      	movs	r1, #4
 80037f8:	4630      	mov	r0, r6
 80037fa:	f003 f807 	bl	800680c <calloc>
  arm_mat_init_f32(&(S->W), width, width, pDataW);
 80037fe:	462a      	mov	r2, r5
 8003800:	4603      	mov	r3, r0
 8003802:	4629      	mov	r1, r5
 8003804:	f104 000c 	add.w	r0, r4, #12
 8003808:	f002 f8ba 	bl	8005980 <arm_mat_init_f32>

  pDataW_I = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 800380c:	2104      	movs	r1, #4
 800380e:	4630      	mov	r0, r6
 8003810:	f002 fffc 	bl	800680c <calloc>
  arm_mat_init_f32(&(S->W_I), width, width, pDataW_I);
 8003814:	462a      	mov	r2, r5
 8003816:	4603      	mov	r3, r0
 8003818:	4629      	mov	r1, r5
 800381a:	f104 0014 	add.w	r0, r4, #20
 800381e:	f002 f8af 	bl	8005980 <arm_mat_init_f32>

  pDataX = (float32_t *) (calloc(width, sizeof(float32_t)));
 8003822:	2104      	movs	r1, #4
 8003824:	4628      	mov	r0, r5
 8003826:	f002 fff1 	bl	800680c <calloc>
  arm_mat_init_f32(&(S->X), width, 1, pDataX);
 800382a:	4629      	mov	r1, r5
 800382c:	4603      	mov	r3, r0
 800382e:	2201      	movs	r2, #1
 8003830:	f104 001c 	add.w	r0, r4, #28
 8003834:	f002 f8a4 	bl	8005980 <arm_mat_init_f32>

  for (int k = 0; k < S->width; k++) {
 8003838:	2500      	movs	r5, #0
 800383a:	8823      	ldrh	r3, [r4, #0]
 800383c:	429d      	cmp	r5, r3
 800383e:	db37      	blt.n	80038b0 <dct2_init_f32+0xd8>
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 8003840:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 8003930 <dct2_init_f32+0x158>
 8003844:	2600      	movs	r6, #0
      S->W.pData[k * S->width + n] = arm_cos_f32(
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
    }
  }

  for (int n = 0; n < S->width; n++) {
 8003846:	8823      	ldrh	r3, [r4, #0]
 8003848:	429e      	cmp	r6, r3
 800384a:	da68      	bge.n	800391e <dct2_init_f32+0x146>
 800384c:	0073      	lsls	r3, r6, #1
 800384e:	3301      	adds	r3, #1
 8003850:	2700      	movs	r7, #0
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	463d      	mov	r5, r7
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 8003856:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800385a:	e05a      	b.n	8003912 <dct2_init_f32+0x13a>
      S->W.pData[k * S->width + n] = arm_cos_f32(
 800385c:	6923      	ldr	r3, [r4, #16]
 800385e:	fb0a 6b05 	mla	fp, sl, r5, r6
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
 8003862:	4638      	mov	r0, r7
      S->W.pData[k * S->width + n] = arm_cos_f32(
 8003864:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
 8003868:	f7fc febc 	bl	80005e4 <__aeabi_i2d>
 800386c:	a32e      	add	r3, pc, #184	; (adr r3, 8003928 <dct2_init_f32+0x150>)
 800386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003872:	f7fc ff1d 	bl	80006b0 <__aeabi_dmul>
 8003876:	4680      	mov	r8, r0
 8003878:	ea4f 004a 	mov.w	r0, sl, lsl #1
 800387c:	4689      	mov	r9, r1
 800387e:	f7fc feb1 	bl	80005e4 <__aeabi_i2d>
 8003882:	460b      	mov	r3, r1
 8003884:	4602      	mov	r2, r0
 8003886:	4649      	mov	r1, r9
 8003888:	4640      	mov	r0, r8
 800388a:	f7fd f83b 	bl	8000904 <__aeabi_ddiv>
      S->W.pData[k * S->width + n] = arm_cos_f32(
 800388e:	f7fd f9e7 	bl	8000c60 <__aeabi_d2f>
 8003892:	ee00 0a10 	vmov	s0, r0
 8003896:	f002 fbd5 	bl	8006044 <arm_cos_f32>
 800389a:	9b01      	ldr	r3, [sp, #4]
 800389c:	ed8b 0a00 	vstr	s0, [fp]
    for (int n = 0; n < S->width; n++) {
 80038a0:	3601      	adds	r6, #1
 80038a2:	441f      	add	r7, r3
 80038a4:	f8b4 a000 	ldrh.w	sl, [r4]
 80038a8:	4556      	cmp	r6, sl
 80038aa:	dbd7      	blt.n	800385c <dct2_init_f32+0x84>
  for (int k = 0; k < S->width; k++) {
 80038ac:	3501      	adds	r5, #1
 80038ae:	e7c4      	b.n	800383a <dct2_init_f32+0x62>
 80038b0:	006b      	lsls	r3, r5, #1
 80038b2:	462f      	mov	r7, r5
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	2600      	movs	r6, #0
 80038b8:	e7f4      	b.n	80038a4 <dct2_init_f32+0xcc>
    for (int k = 0; k < S->width; k++) {
      S->W_I.pData[n * S->width + k] = c_k(k)
 80038ba:	69a3      	ldr	r3, [r4, #24]
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 80038bc:	2d00      	cmp	r5, #0
      S->W_I.pData[n * S->width + k] = c_k(k)
 80038be:	fb0a 5b06 	mla	fp, sl, r6, r5
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 80038c2:	4638      	mov	r0, r7
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 80038c4:	bf14      	ite	ne
 80038c6:	eeb0 8a68 	vmovne.f32	s16, s17
 80038ca:	eeb0 8a49 	vmoveq.f32	s16, s18
      S->W_I.pData[n * S->width + k] = c_k(k)
 80038ce:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 80038d2:	f7fc fe87 	bl	80005e4 <__aeabi_i2d>
 80038d6:	a314      	add	r3, pc, #80	; (adr r3, 8003928 <dct2_init_f32+0x150>)
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	f7fc fee8 	bl	80006b0 <__aeabi_dmul>
 80038e0:	4680      	mov	r8, r0
 80038e2:	ea4f 004a 	mov.w	r0, sl, lsl #1
 80038e6:	4689      	mov	r9, r1
 80038e8:	f7fc fe7c 	bl	80005e4 <__aeabi_i2d>
 80038ec:	460b      	mov	r3, r1
 80038ee:	4602      	mov	r2, r0
 80038f0:	4649      	mov	r1, r9
 80038f2:	4640      	mov	r0, r8
 80038f4:	f7fd f806 	bl	8000904 <__aeabi_ddiv>
 80038f8:	f7fd f9b2 	bl	8000c60 <__aeabi_d2f>
 80038fc:	ee00 0a10 	vmov	s0, r0
 8003900:	f002 fba0 	bl	8006044 <arm_cos_f32>
 8003904:	9b01      	ldr	r3, [sp, #4]
 8003906:	ee28 0a00 	vmul.f32	s0, s16, s0
    for (int k = 0; k < S->width; k++) {
 800390a:	3501      	adds	r5, #1
      S->W_I.pData[n * S->width + k] = c_k(k)
 800390c:	ed8b 0a00 	vstr	s0, [fp]
 8003910:	441f      	add	r7, r3
    for (int k = 0; k < S->width; k++) {
 8003912:	f8b4 a000 	ldrh.w	sl, [r4]
 8003916:	4555      	cmp	r5, sl
 8003918:	dbcf      	blt.n	80038ba <dct2_init_f32+0xe2>
  for (int n = 0; n < S->width; n++) {
 800391a:	3601      	adds	r6, #1
 800391c:	e793      	b.n	8003846 <dct2_init_f32+0x6e>
    }
  }

}
 800391e:	b003      	add	sp, #12
 8003920:	ecbd 8b04 	vpop	{d8-d9}
 8003924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003928:	54442d18 	.word	0x54442d18
 800392c:	400921fb 	.word	0x400921fb
 8003930:	3f3504f3 	.word	0x3f3504f3

08003934 <dct2_f32>:
 * @param[out]    *pDst      points to the output buffer.
 * @param[in]     idctFlag   DCT if flag is 0, IDCT if flag is 1.
 * @return        none.
 */
void dct2_f32(dct2_instance_f32 *S, float32_t *pSrc, float32_t *pDst,
    uint8_t idctFlag) {
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4604      	mov	r4, r0

  S->X.pData = pSrc;
 8003938:	6201      	str	r1, [r0, #32]
    uint8_t idctFlag) {
 800393a:	4615      	mov	r5, r2
  S->Y.pData = pDst;
 800393c:	60a2      	str	r2, [r4, #8]
 800393e:	f100 011c 	add.w	r1, r0, #28
 8003942:	1d02      	adds	r2, r0, #4

  if (idctFlag == 0) {
 8003944:	bb33      	cbnz	r3, 8003994 <dct2_f32+0x60>
    arm_mat_mult_f32(&(S->W), &(S->X), &(S->Y));
 8003946:	300c      	adds	r0, #12
 8003948:	f001 ff74 	bl	8005834 <arm_mat_mult_f32>
    pDst[0] = pDst[0] * c_k(0);
 800394c:	edd5 7a00 	vldr	s15, [r5]
 8003950:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800399c <dct2_f32+0x68>
 8003954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003958:	edc5 7a00 	vstr	s15, [r5]
    arm_scale_f32(pDst, (float32_t) (sqrt(2.0 / S->width)), pDst, S->width);
  } else {
    arm_mat_mult_f32(&(S->W_I), &(S->X), &(S->Y));
    arm_scale_f32(pDst, (float32_t) (sqrt(2.0 / S->width)), pDst, S->width);
 800395c:	8820      	ldrh	r0, [r4, #0]
 800395e:	f7fc fe41 	bl	80005e4 <__aeabi_i2d>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	2000      	movs	r0, #0
 8003968:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800396c:	f7fc ffca 	bl	8000904 <__aeabi_ddiv>
 8003970:	ec41 0b10 	vmov	d0, r0, r1
 8003974:	f005 fe24 	bl	80095c0 <sqrt>
 8003978:	ec51 0b10 	vmov	r0, r1, d0
 800397c:	f7fd f970 	bl	8000c60 <__aeabi_d2f>
 8003980:	8824      	ldrh	r4, [r4, #0]
 8003982:	4629      	mov	r1, r5
 8003984:	4622      	mov	r2, r4
 8003986:	ee00 0a10 	vmov	s0, r0
 800398a:	4628      	mov	r0, r5
  }
}
 800398c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    arm_scale_f32(pDst, (float32_t) (sqrt(2.0 / S->width)), pDst, S->width);
 8003990:	f002 bb98 	b.w	80060c4 <arm_scale_f32>
    arm_mat_mult_f32(&(S->W_I), &(S->X), &(S->Y));
 8003994:	3014      	adds	r0, #20
 8003996:	f001 ff4d 	bl	8005834 <arm_mat_mult_f32>
 800399a:	e7df      	b.n	800395c <dct2_f32+0x28>
 800399c:	3f3504f3 	.word	0x3f3504f3

080039a0 <MX_DFSDM1_Init>:

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80039a0:	4836      	ldr	r0, [pc, #216]	; (8003a7c <MX_DFSDM1_Init+0xdc>)
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80039a2:	4937      	ldr	r1, [pc, #220]	; (8003a80 <MX_DFSDM1_Init+0xe0>)
{
 80039a4:	b508      	push	{r3, lr}
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80039a6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e880 000a 	stmia.w	r0, {r1, r3}
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80039b0:	61c2      	str	r2, [r0, #28]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80039b2:	2301      	movs	r3, #1
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 128;
 80039b4:	2280      	movs	r2, #128	; 0x80
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80039b6:	7203      	strb	r3, [r0, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80039b8:	7243      	strb	r3, [r0, #9]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 128;
 80039ba:	6202      	str	r2, [r0, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80039bc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80039be:	f7fd fea5 	bl	800170c <HAL_DFSDM_FilterInit>
 80039c2:	b108      	cbz	r0, 80039c8 <MX_DFSDM1_Init+0x28>
  {
    Error_Handler();
 80039c4:	f001 f854 	bl	8004a70 <Error_Handler>
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80039c8:	482e      	ldr	r0, [pc, #184]	; (8003a84 <MX_DFSDM1_Init+0xe4>)
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80039ca:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <MX_DFSDM1_Init+0xe8>)
 80039cc:	2300      	movs	r3, #0
 80039ce:	e880 000c 	stmia.w	r0, {r2, r3}
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80039d2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80039d6:	2301      	movs	r3, #1
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80039d8:	61c2      	str	r2, [r0, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 128;
 80039da:	2280      	movs	r2, #128	; 0x80
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80039dc:	7203      	strb	r3, [r0, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80039de:	7243      	strb	r3, [r0, #9]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 128;
 80039e0:	6202      	str	r2, [r0, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80039e2:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 80039e4:	f7fd fe92 	bl	800170c <HAL_DFSDM_FilterInit>
 80039e8:	b108      	cbz	r0, 80039ee <MX_DFSDM1_Init+0x4e>
  {
    Error_Handler();
 80039ea:	f001 f841 	bl	8004a70 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80039ee:	4827      	ldr	r0, [pc, #156]	; (8003a8c <MX_DFSDM1_Init+0xec>)
 80039f0:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <MX_DFSDM1_Init+0xf0>)
 80039f2:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel2.Init.OutputClock.Divider = 32;
 80039f4:	2120      	movs	r1, #32
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80039f6:	2300      	movs	r3, #0
  hdfsdm1_channel2.Init.OutputClock.Divider = 32;
 80039f8:	60c1      	str	r1, [r0, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80039fa:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80039fe:	2201      	movs	r2, #1
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8003a00:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8003a02:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8003a04:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8003a06:	6181      	str	r1, [r0, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8003a08:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8003a0a:	2104      	movs	r1, #4
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8003a0c:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
  hdfsdm1_channel2.Init.Offset = 0;
 8003a0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x06;
 8003a10:	2306      	movs	r3, #6
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8003a12:	7102      	strb	r2, [r0, #4]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8003a14:	6201      	str	r1, [r0, #32]
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8003a16:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel2.Init.RightBitShift = 0x06;
 8003a18:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8003a1a:	f7fd fe03 	bl	8001624 <HAL_DFSDM_ChannelInit>
 8003a1e:	b108      	cbz	r0, 8003a24 <MX_DFSDM1_Init+0x84>
  {
    Error_Handler();
 8003a20:	f001 f826 	bl	8004a70 <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8003a24:	481b      	ldr	r0, [pc, #108]	; (8003a94 <MX_DFSDM1_Init+0xf4>)
 8003a26:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <MX_DFSDM1_Init+0xf8>)
 8003a28:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 32;
 8003a2a:	2120      	movs	r1, #32
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8003a2c:	2300      	movs	r3, #0
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 8003a2e:	2201      	movs	r2, #1
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8003a30:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 32;
 8003a32:	60c1      	str	r1, [r0, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8003a34:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8003a36:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8003a38:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8003a3a:	2104      	movs	r1, #4
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8003a3c:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
  hdfsdm1_channel3.Init.Offset = 0;
 8003a3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x06;
 8003a40:	2306      	movs	r3, #6
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 8003a42:	7102      	strb	r2, [r0, #4]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8003a44:	61c2      	str	r2, [r0, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8003a46:	6201      	str	r1, [r0, #32]
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8003a48:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel3.Init.RightBitShift = 0x06;
 8003a4a:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 8003a4c:	f7fd fdea 	bl	8001624 <HAL_DFSDM_ChannelInit>
 8003a50:	b108      	cbz	r0, 8003a56 <MX_DFSDM1_Init+0xb6>
  {
    Error_Handler();
 8003a52:	f001 f80d 	bl	8004a70 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8003a56:	2201      	movs	r2, #1
 8003a58:	4910      	ldr	r1, [pc, #64]	; (8003a9c <MX_DFSDM1_Init+0xfc>)
 8003a5a:	4808      	ldr	r0, [pc, #32]	; (8003a7c <MX_DFSDM1_Init+0xdc>)
 8003a5c:	f7fd fec8 	bl	80017f0 <HAL_DFSDM_FilterConfigRegChannel>
 8003a60:	b108      	cbz	r0, 8003a66 <MX_DFSDM1_Init+0xc6>
  {
    Error_Handler();
 8003a62:	f001 f805 	bl	8004a70 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8003a66:	2201      	movs	r2, #1
 8003a68:	490d      	ldr	r1, [pc, #52]	; (8003aa0 <MX_DFSDM1_Init+0x100>)
 8003a6a:	4806      	ldr	r0, [pc, #24]	; (8003a84 <MX_DFSDM1_Init+0xe4>)
 8003a6c:	f7fd fec0 	bl	80017f0 <HAL_DFSDM_FilterConfigRegChannel>
 8003a70:	b118      	cbz	r0, 8003a7a <MX_DFSDM1_Init+0xda>
  {
    Error_Handler();
  }

}
 8003a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003a76:	f000 bffb 	b.w	8004a70 <Error_Handler>
 8003a7a:	bd08      	pop	{r3, pc}
 8003a7c:	2000b6cc 	.word	0x2000b6cc
 8003a80:	40016100 	.word	0x40016100
 8003a84:	2000b7e8 	.word	0x2000b7e8
 8003a88:	40016180 	.word	0x40016180
 8003a8c:	2000b83c 	.word	0x2000b83c
 8003a90:	40016040 	.word	0x40016040
 8003a94:	2000b720 	.word	0x2000b720
 8003a98:	40016060 	.word	0x40016060
 8003a9c:	00020004 	.word	0x00020004
 8003aa0:	00030008 	.word	0x00030008

08003aa4 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8003aa4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 8003aa6:	4c3a      	ldr	r4, [pc, #232]	; (8003b90 <HAL_DFSDM_FilterMspInit+0xec>)
{
 8003aa8:	b089      	sub	sp, #36	; 0x24
 8003aaa:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aac:	2214      	movs	r2, #20
 8003aae:	2100      	movs	r1, #0
 8003ab0:	a803      	add	r0, sp, #12
 8003ab2:	f002 fee8 	bl	8006886 <memset>
  if(DFSDM1_Init == 0)
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	bb2b      	cbnz	r3, 8003b06 <HAL_DFSDM_FilterMspInit+0x62>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003aba:	4a36      	ldr	r2, [pc, #216]	; (8003b94 <HAL_DFSDM_FilterMspInit+0xf0>)
 8003abc:	6813      	ldr	r3, [r2, #0]
 8003abe:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003ac0:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <HAL_DFSDM_FilterMspInit+0xf4>)
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003ac6:	d108      	bne.n	8003ada <HAL_DFSDM_FilterMspInit+0x36>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003ac8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003aca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003ace:	661a      	str	r2, [r3, #96]	; 0x60
 8003ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ad2:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8003ad6:	9201      	str	r2, [sp, #4]
 8003ad8:	9a01      	ldr	r2, [sp, #4]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003adc:	482f      	ldr	r0, [pc, #188]	; (8003b9c <HAL_DFSDM_FilterMspInit+0xf8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ade:	f042 0204 	orr.w	r2, r2, #4
 8003ae2:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	9302      	str	r3, [sp, #8]
 8003aec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 8003aee:	2384      	movs	r3, #132	; 0x84
 8003af0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af2:	2302      	movs	r3, #2
 8003af4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003af8:	2306      	movs	r3, #6
 8003afa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003afc:	f7fd fff8 	bl	8001af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	3301      	adds	r3, #1
 8003b04:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8003b06:	682a      	ldr	r2, [r5, #0]
 8003b08:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <HAL_DFSDM_FilterMspInit+0xfc>)
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d11c      	bne.n	8003b48 <HAL_DFSDM_FilterMspInit+0xa4>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003b0e:	4c25      	ldr	r4, [pc, #148]	; (8003ba4 <HAL_DFSDM_FilterMspInit+0x100>)
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003b10:	2280      	movs	r2, #128	; 0x80
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003b12:	f503 431f 	add.w	r3, r3, #40704	; 0x9f00
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003b16:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b18:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003b1c:	3344      	adds	r3, #68	; 0x44
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b1e:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003b24:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b26:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8003b28:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8003b2a:	2220      	movs	r2, #32
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8003b2c:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8003b2e:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b30:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b32:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8003b34:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8003b36:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8003b38:	f7fd fec8 	bl	80018cc <HAL_DMA_Init>
 8003b3c:	b108      	cbz	r0, 8003b42 <HAL_DFSDM_FilterMspInit+0x9e>
    {
      Error_Handler();
 8003b3e:	f000 ff97 	bl	8004a70 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8003b42:	62a5      	str	r5, [r4, #40]	; 0x28
 8003b44:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8003b46:	62ac      	str	r4, [r5, #40]	; 0x28
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8003b48:	682a      	ldr	r2, [r5, #0]
 8003b4a:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <HAL_DFSDM_FilterMspInit+0x104>)
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d11c      	bne.n	8003b8a <HAL_DFSDM_FilterMspInit+0xe6>
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8003b50:	4c16      	ldr	r4, [pc, #88]	; (8003bac <HAL_DFSDM_FilterMspInit+0x108>)
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8003b52:	2280      	movs	r2, #128	; 0x80
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8003b54:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8003b58:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8003b5e:	33d8      	adds	r3, #216	; 0xd8
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b60:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8003b66:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b68:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 8003b6a:	2300      	movs	r3, #0
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8003b6c:	2220      	movs	r2, #32
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8003b6e:	4620      	mov	r0, r4
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 8003b70:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b72:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b74:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8003b76:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_LOW;
 8003b78:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8003b7a:	f7fd fea7 	bl	80018cc <HAL_DMA_Init>
 8003b7e:	b108      	cbz	r0, 8003b84 <HAL_DFSDM_FilterMspInit+0xe0>
    {
      Error_Handler();
 8003b80:	f000 ff76 	bl	8004a70 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8003b84:	62a5      	str	r5, [r4, #40]	; 0x28
 8003b86:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8003b88:	62ac      	str	r4, [r5, #40]	; 0x28
  }

}
 8003b8a:	b009      	add	sp, #36	; 0x24
 8003b8c:	bd30      	pop	{r4, r5, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000230 	.word	0x20000230
 8003b94:	20000234 	.word	0x20000234
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	48000800 	.word	0x48000800
 8003ba0:	40016100 	.word	0x40016100
 8003ba4:	2000b7a0 	.word	0x2000b7a0
 8003ba8:	40016180 	.word	0x40016180
 8003bac:	2000b758 	.word	0x2000b758

08003bb0 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8003bb0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 8003bb2:	4c18      	ldr	r4, [pc, #96]	; (8003c14 <HAL_DFSDM_ChannelMspInit+0x64>)
{
 8003bb4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb6:	2214      	movs	r2, #20
 8003bb8:	2100      	movs	r1, #0
 8003bba:	a803      	add	r0, sp, #12
 8003bbc:	f002 fe63 	bl	8006886 <memset>
  if(DFSDM1_Init == 0)
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	bb2b      	cbnz	r3, 8003c10 <HAL_DFSDM_ChannelMspInit+0x60>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003bc4:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <HAL_DFSDM_ChannelMspInit+0x68>)
 8003bc6:	6813      	ldr	r3, [r2, #0]
 8003bc8:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003bca:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <HAL_DFSDM_ChannelMspInit+0x6c>)
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003bd0:	d108      	bne.n	8003be4 <HAL_DFSDM_ChannelMspInit+0x34>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003bd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bd4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003bd8:	661a      	str	r2, [r3, #96]	; 0x60
 8003bda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bdc:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8003be0:	9201      	str	r2, [sp, #4]
 8003be2:	9a01      	ldr	r2, [sp, #4]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be6:	480e      	ldr	r0, [pc, #56]	; (8003c20 <HAL_DFSDM_ChannelMspInit+0x70>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be8:	f042 0204 	orr.w	r2, r2, #4
 8003bec:	64da      	str	r2, [r3, #76]	; 0x4c
 8003bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	9302      	str	r3, [sp, #8]
 8003bf6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 8003bf8:	2384      	movs	r3, #132	; 0x84
 8003bfa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c00:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003c02:	2306      	movs	r3, #6
 8003c04:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c06:	f7fd ff73 	bl	8001af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	6023      	str	r3, [r4, #0]
  }
}
 8003c10:	b008      	add	sp, #32
 8003c12:	bd10      	pop	{r4, pc}
 8003c14:	20000230 	.word	0x20000230
 8003c18:	20000234 	.word	0x20000234
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	48000800 	.word	0x48000800

08003c24 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c24:	4b1f      	ldr	r3, [pc, #124]	; (8003ca4 <MX_DMA_Init+0x80>)
{
 8003c26:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	649a      	str	r2, [r3, #72]	; 0x48
 8003c30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c32:	f002 0201 	and.w	r2, r2, #1
 8003c36:	9200      	str	r2, [sp, #0]
 8003c38:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c3c:	f042 0202 	orr.w	r2, r2, #2
 8003c40:	649a      	str	r2, [r3, #72]	; 0x48
 8003c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003c44:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c46:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003c4a:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c4c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003c4e:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c50:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003c52:	f7fd fa73 	bl	800113c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003c56:	200d      	movs	r0, #13
 8003c58:	f7fd faa4 	bl	80011a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	4611      	mov	r1, r2
 8003c60:	200e      	movs	r0, #14
 8003c62:	f7fd fa6b 	bl	800113c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003c66:	200e      	movs	r0, #14
 8003c68:	f7fd fa9c 	bl	80011a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	4611      	mov	r1, r2
 8003c70:	200f      	movs	r0, #15
 8003c72:	f7fd fa63 	bl	800113c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003c76:	200f      	movs	r0, #15
 8003c78:	f7fd fa94 	bl	80011a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	4611      	mov	r1, r2
 8003c80:	2011      	movs	r0, #17
 8003c82:	f7fd fa5b 	bl	800113c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003c86:	2011      	movs	r0, #17
 8003c88:	f7fd fa8c 	bl	80011a4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	4611      	mov	r1, r2
 8003c90:	203c      	movs	r0, #60	; 0x3c
 8003c92:	f7fd fa53 	bl	800113c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8003c96:	203c      	movs	r0, #60	; 0x3c
 8003c98:	f7fd fa84 	bl	80011a4 <HAL_NVIC_EnableIRQ>

}
 8003c9c:	b003      	add	sp, #12
 8003c9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000

08003ca8 <log10_approx>:
 *  reference: https://community.arm.com/tools/f/discussions/4292/cmsis-dsp-new-functionality-proposal
 */
const float32_t C[4] = { 1.23149591368684f, -4.11852516267426f,
    6.02197014179219f, -3.13396450166353f };
const float32_t LOG10_2 = log10(2.0f);
float32_t log10_approx(float32_t x) {
 8003ca8:	b507      	push	{r0, r1, r2, lr}
  float32_t f, l;
  int e;
  f = frexpf(fabsf(x), &e);
 8003caa:	eeb0 0ac0 	vabs.f32	s0, s0
 8003cae:	a801      	add	r0, sp, #4
 8003cb0:	f003 fb6a 	bl	8007388 <frexpf>
  l = LOG10_2 * (C[0] * f * f * f + C[1] * f * f + C[2] * f + C[3] + e);
 8003cb4:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003cfc <log10_approx+0x54>
 8003cb8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003d00 <log10_approx+0x58>
 8003cbc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003cc0:	ee20 7a07 	vmul.f32	s14, s0, s14
 8003cc4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003cc8:	ee27 7a00 	vmul.f32	s14, s14, s0
 8003ccc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003cd0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003d04 <log10_approx+0x5c>
 8003cd4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003cd8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003d08 <log10_approx+0x60>
 8003cdc:	ed9d 7a01 	vldr	s14, [sp, #4]
 8003ce0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003ce4:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8003ce8:	ee77 7a80 	vadd.f32	s15, s15, s0
  return l;
  //return (l >= 0.0) ? l : 0.0;  // regard a negative value as featureless
}
 8003cec:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8003d0c <log10_approx+0x64>
 8003cf0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003cf4:	b003      	add	sp, #12
 8003cf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cfa:	bf00      	nop
 8003cfc:	c083caf5 	.word	0xc083caf5
 8003d00:	3f9da1a8 	.word	0x3f9da1a8
 8003d04:	40c0b3fb 	.word	0x40c0b3fb
 8003d08:	404892e0 	.word	0x404892e0
 8003d0c:	3e9a209b 	.word	0x3e9a209b

08003d10 <hann>:

// Hann window generation
void hann(int num) {
 8003d10:	b570      	push	{r4, r5, r6, lr}
  arm_fill_f32(0.0f, hann_window, NN);
 8003d12:	f44f 7100 	mov.w	r1, #512	; 0x200
void hann(int num) {
 8003d16:	ed2d 8b02 	vpush	{d8}
 8003d1a:	4605      	mov	r5, r0
  arm_fill_f32(0.0f, hann_window, NN);
 8003d1c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8003d68 <hann+0x58>
 8003d20:	4812      	ldr	r0, [pc, #72]	; (8003d6c <hann+0x5c>)
 8003d22:	4e12      	ldr	r6, [pc, #72]	; (8003d6c <hann+0x5c>)
 8003d24:	f001 f816 	bl	8004d54 <arm_fill_f32>
  float32_t scale = 2.0f * PI / (float32_t) num;
 8003d28:	ee07 5a90 	vmov	s15, r5
 8003d2c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003d70 <hann+0x60>
 8003d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int n = 0; n < num; n++) {
 8003d34:	2400      	movs	r4, #0
  float32_t scale = 2.0f * PI / (float32_t) num;
 8003d36:	eec7 8a27 	vdiv.f32	s17, s14, s15
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 8003d3a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
  for (int n = 0; n < num; n++) {
 8003d3e:	42ac      	cmp	r4, r5
 8003d40:	db02      	blt.n	8003d48 <hann+0x38>
  }
}
 8003d42:	ecbd 8b02 	vpop	{d8}
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 8003d48:	ee07 4a90 	vmov	s15, r4
 8003d4c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  for (int n = 0; n < num; n++) {
 8003d50:	3401      	adds	r4, #1
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 8003d52:	ee20 0a28 	vmul.f32	s0, s0, s17
 8003d56:	f002 f975 	bl	8006044 <arm_cos_f32>
 8003d5a:	eef0 7a48 	vmov.f32	s15, s16
 8003d5e:	eee0 7a48 	vfms.f32	s15, s0, s16
 8003d62:	ece6 7a01 	vstmia	r6!, {s15}
 8003d66:	e7ea      	b.n	8003d3e <hann+0x2e>
 8003d68:	00000000 	.word	0x00000000
 8003d6c:	2000173c 	.word	0x2000173c
 8003d70:	40c90fdb 	.word	0x40c90fdb
 8003d74:	00000000 	.word	0x00000000

08003d78 <freq2mel>:

// Frequency in Hz to Mel-scale
float32_t freq2mel(float32_t hz) {
  return 2595.0f * log10(hz / 700.0f + 1.0f);
 8003d78:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003dc0 <freq2mel+0x48>
 8003d7c:	ee80 0a27 	vdiv.f32	s0, s0, s15
float32_t freq2mel(float32_t hz) {
 8003d80:	b508      	push	{r3, lr}
  return 2595.0f * log10(hz / 700.0f + 1.0f);
 8003d82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003d86:	ee70 7a27 	vadd.f32	s15, s0, s15
 8003d8a:	ee17 0a90 	vmov	r0, s15
 8003d8e:	f7fc fc3b 	bl	8000608 <__aeabi_f2d>
 8003d92:	ec41 0b10 	vmov	d0, r0, r1
 8003d96:	f005 fa1b 	bl	80091d0 <log10>
 8003d9a:	a307      	add	r3, pc, #28	; (adr r3, 8003db8 <freq2mel+0x40>)
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	ec51 0b10 	vmov	r0, r1, d0
 8003da4:	f7fc fc84 	bl	80006b0 <__aeabi_dmul>
 8003da8:	f7fc ff5a 	bl	8000c60 <__aeabi_d2f>
}
 8003dac:	ee00 0a10 	vmov	s0, r0
 8003db0:	bd08      	pop	{r3, pc}
 8003db2:	bf00      	nop
 8003db4:	f3af 8000 	nop.w
 8003db8:	00000000 	.word	0x00000000
 8003dbc:	40a44600 	.word	0x40a44600
 8003dc0:	442f0000 	.word	0x442f0000
 8003dc4:	00000000 	.word	0x00000000

08003dc8 <mel2freq>:

// Mel-scale to Frequency in Hz
float32_t mel2freq(float32_t mel) {
  return 700.0 * (pow(10.0, (mel / 2595.0f)) - 1.0f);
 8003dc8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003e10 <mel2freq+0x48>
 8003dcc:	ee80 7a27 	vdiv.f32	s14, s0, s15
float32_t mel2freq(float32_t mel) {
 8003dd0:	b508      	push	{r3, lr}
  return 700.0 * (pow(10.0, (mel / 2595.0f)) - 1.0f);
 8003dd2:	ee17 0a10 	vmov	r0, s14
 8003dd6:	f7fc fc17 	bl	8000608 <__aeabi_f2d>
 8003dda:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8003e08 <mel2freq+0x40>
 8003dde:	ec41 0b11 	vmov	d1, r0, r1
 8003de2:	f005 fa75 	bl	80092d0 <pow>
 8003de6:	2200      	movs	r2, #0
 8003de8:	ec51 0b10 	vmov	r0, r1, d0
 8003dec:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <mel2freq+0x4c>)
 8003dee:	f7fc faab 	bl	8000348 <__aeabi_dsub>
 8003df2:	2200      	movs	r2, #0
 8003df4:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <mel2freq+0x50>)
 8003df6:	f7fc fc5b 	bl	80006b0 <__aeabi_dmul>
 8003dfa:	f7fc ff31 	bl	8000c60 <__aeabi_d2f>
}
 8003dfe:	ee00 0a10 	vmov	s0, r0
 8003e02:	bd08      	pop	{r3, pc}
 8003e04:	f3af 8000 	nop.w
 8003e08:	00000000 	.word	0x00000000
 8003e0c:	40240000 	.word	0x40240000
 8003e10:	45223000 	.word	0x45223000
 8003e14:	3ff00000 	.word	0x3ff00000
 8003e18:	4085e000 	.word	0x4085e000

08003e1c <generate_filters>:

// Generate Mel filter bank
void generate_filters(void) {
 8003e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e20:	ed2d 8b02 	vpush	{d8}
  const float32_t mel_min = 0.0f;
  float32_t mel_points[NUM_FILTERS + 2];
  float32_t hz_points[NUM_FILTERS + 2];
  float32_t f[NUM_FILTERS + 2];
  float32_t f_minus, f_center, f_plus;
  float32_t mel_max = freq2mel(nyq_fs);
 8003e24:	4b44      	ldr	r3, [pc, #272]	; (8003f38 <generate_filters+0x11c>)
  float32_t delta_mel = (mel_max - mel_min) / (NUM_FILTERS + 2);
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
    mel_points[m] = delta_mel * m;
    hz_points[m] = mel2freq(mel_points[m]);
    f[m] = floor((NN + 1) * hz_points[m] / fs);
 8003e26:	ed9f 8a45 	vldr	s16, [pc, #276]	; 8003f3c <generate_filters+0x120>
  float32_t mel_max = freq2mel(nyq_fs);
 8003e2a:	ed93 0a00 	vldr	s0, [r3]
    f[m] = floor((NN + 1) * hz_points[m] / fs);
 8003e2e:	4f44      	ldr	r7, [pc, #272]	; (8003f40 <generate_filters+0x124>)
void generate_filters(void) {
 8003e30:	b0ab      	sub	sp, #172	; 0xac
  float32_t mel_max = freq2mel(nyq_fs);
 8003e32:	f7ff ffa1 	bl	8003d78 <freq2mel>
  float32_t delta_mel = (mel_max - mel_min) / (NUM_FILTERS + 2);
 8003e36:	eddf 7a43 	vldr	s15, [pc, #268]	; 8003f44 <generate_filters+0x128>
 8003e3a:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8003e3e:	466d      	mov	r5, sp
 8003e40:	466e      	mov	r6, sp
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8003e42:	2400      	movs	r4, #0
    mel_points[m] = delta_mel * m;
 8003e44:	ee07 4a90 	vmov	s15, r4
 8003e48:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8003e4c:	3401      	adds	r4, #1
    hz_points[m] = mel2freq(mel_points[m]);
 8003e4e:	ee20 0a28 	vmul.f32	s0, s0, s17
 8003e52:	f7ff ffb9 	bl	8003dc8 <mel2freq>
    f[m] = floor((NN + 1) * hz_points[m] / fs);
 8003e56:	edd7 7a00 	vldr	s15, [r7]
 8003e5a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8003e5e:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8003e62:	ee17 0a10 	vmov	r0, s14
 8003e66:	f7fc fbcf 	bl	8000608 <__aeabi_f2d>
 8003e6a:	ec41 0b10 	vmov	d0, r0, r1
 8003e6e:	f005 f92b 	bl	80090c8 <floor>
 8003e72:	ec51 0b10 	vmov	r0, r1, d0
 8003e76:	f7fc fef3 	bl	8000c60 <__aeabi_d2f>
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8003e7a:	2c2a      	cmp	r4, #42	; 0x2a
    f[m] = floor((NN + 1) * hz_points[m] / fs);
 8003e7c:	f846 0b04 	str.w	r0, [r6], #4
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8003e80:	d1e0      	bne.n	8003e44 <generate_filters+0x28>
 8003e82:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8003f4c <generate_filters+0x130>
 8003e86:	4e30      	ldr	r6, [pc, #192]	; (8003f48 <generate_filters+0x12c>)
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	f06f 0c03 	mvn.w	ip, #3
 8003e8e:	46f0      	mov	r8, lr
  }
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
    for (int k = 1; k < NN / 2; k++) {
      f_minus = f[m - 1];
 8003e90:	ed95 6a00 	vldr	s12, [r5]
      f_center = f[m];
 8003e94:	3504      	adds	r5, #4
      f_plus = f[m + 1];
      for (int k = f_minus; k < f_center; k++) {
 8003e96:	eefd 6ac6 	vcvt.s32.f32	s13, s12
      f_plus = f[m + 1];
 8003e9a:	edd5 7a01 	vldr	s15, [r5, #4]
      f_center = f[m];
 8003e9e:	ed95 7a00 	vldr	s14, [r5]
      for (int k = f_minus; k < f_center; k++) {
 8003ea2:	ee16 4a90 	vmov	r4, s13
      }
      for (int k = f_center; k <= f_plus; k++) {
        filterbank[m][k - (int) f_minus] = (f_plus - k) / (f_plus - f_center);
      }
      k_range[m][0] = (int) f_minus;
      k_range[m][1] = (int) f_plus - (int) f_minus + 1;
 8003ea6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      for (int k = f_center; k <= f_plus; k++) {
 8003eaa:	eefd 5ac7 	vcvt.s32.f32	s11, s14
      k_range[m][1] = (int) f_plus - (int) f_minus + 1;
 8003eae:	ee16 2a90 	vmov	r2, s13
 8003eb2:	1b12      	subs	r2, r2, r4
 8003eb4:	3201      	adds	r2, #1
 8003eb6:	fb0c 3904 	mla	r9, ip, r4, r3
 8003eba:	20ff      	movs	r0, #255	; 0xff
 8003ebc:	eb0e 0703 	add.w	r7, lr, r3
      for (int k = f_minus; k < f_center; k++) {
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	ee06 1a90 	vmov	s13, r1
 8003ec6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003eca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed2:	dc19      	bgt.n	8003f08 <generate_filters+0xec>
 8003ed4:	ee15 1a90 	vmov	r1, s11
      for (int k = f_center; k <= f_plus; k++) {
 8003ed8:	ee06 1a90 	vmov	s13, r1
 8003edc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003ee0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee8:	da18      	bge.n	8003f1c <generate_filters+0x100>
    for (int k = 1; k < NN / 2; k++) {
 8003eea:	3801      	subs	r0, #1
      k_range[m][0] = (int) f_minus;
 8003eec:	60b4      	str	r4, [r6, #8]
      k_range[m][1] = (int) f_plus - (int) f_minus + 1;
 8003eee:	60f2      	str	r2, [r6, #12]
    for (int k = 1; k < NN / 2; k++) {
 8003ef0:	d1e4      	bne.n	8003ebc <generate_filters+0xa0>
 8003ef2:	3380      	adds	r3, #128	; 0x80
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 8003ef4:	f5b3 5fa4 	cmp.w	r3, #5248	; 0x1480
 8003ef8:	f106 0608 	add.w	r6, r6, #8
 8003efc:	d1c8      	bne.n	8003e90 <generate_filters+0x74>
    }
  }
}
 8003efe:	b02b      	add	sp, #172	; 0xac
 8003f00:	ecbd 8b02 	vpop	{d8}
 8003f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        filterbank[m][k - (int) f_minus] = (k - f_minus) / (f_center - f_minus);
 8003f08:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8003f0c:	ee77 4a46 	vsub.f32	s9, s14, s12
      for (int k = f_minus; k < f_center; k++) {
 8003f10:	3101      	adds	r1, #1
        filterbank[m][k - (int) f_minus] = (k - f_minus) / (f_center - f_minus);
 8003f12:	ee86 5aa4 	vdiv.f32	s10, s13, s9
 8003f16:	eca7 5a01 	vstmia	r7!, {s10}
 8003f1a:	e7d2      	b.n	8003ec2 <generate_filters+0xa6>
        filterbank[m][k - (int) f_minus] = (f_plus - k) / (f_plus - f_center);
 8003f1c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003f20:	ee77 4ac7 	vsub.f32	s9, s15, s14
 8003f24:	eb09 0781 	add.w	r7, r9, r1, lsl #2
 8003f28:	ee86 5aa4 	vdiv.f32	s10, s13, s9
 8003f2c:	4447      	add	r7, r8
      for (int k = f_center; k <= f_plus; k++) {
 8003f2e:	3101      	adds	r1, #1
        filterbank[m][k - (int) f_minus] = (f_plus - k) / (f_plus - f_center);
 8003f30:	ed87 5a00 	vstr	s10, [r7]
 8003f34:	e7d0      	b.n	8003ed8 <generate_filters+0xbc>
 8003f36:	bf00      	nop
 8003f38:	200020cc 	.word	0x200020cc
 8003f3c:	44004000 	.word	0x44004000
 8003f40:	20001738 	.word	0x20001738
 8003f44:	42280000 	.word	0x42280000
 8003f48:	20001f3c 	.word	0x20001f3c
 8003f4c:	20000238 	.word	0x20000238

08003f50 <init_dsp>:

/*
 * DSP pipeline initialization
 */
void init_dsp(float32_t f_s) {
 8003f50:	b510      	push	{r4, lr}
 8003f52:	ed2d 8b02 	vpush	{d8}
  // Generate Hanning window
  hann(NN);
 8003f56:	f44f 7000 	mov.w	r0, #512	; 0x200
void init_dsp(float32_t f_s) {
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	eeb0 8a40 	vmov.f32	s16, s0
  hann(NN);
 8003f60:	f7ff fed6 	bl	8003d10 <hann>
  fs = f_s;
 8003f64:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <init_dsp+0x68>)
  nyq_fs = f_s / 2.0;
  arm_rfft_fast_init_f32(&S, NN);
 8003f66:	4815      	ldr	r0, [pc, #84]	; (8003fbc <init_dsp+0x6c>)
  fs = f_s;
 8003f68:	ed83 8a00 	vstr	s16, [r3]
  nyq_fs = f_s / 2.0;
 8003f6c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003f70:	ee28 8a00 	vmul.f32	s16, s16, s0
 8003f74:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <init_dsp+0x70>)
  arm_fir_init_f32(&S_PRE, 2, fir_coefficients, state_buf, NN);
 8003f76:	f44f 7400 	mov.w	r4, #512	; 0x200
  arm_rfft_fast_init_f32(&S, NN);
 8003f7a:	f44f 7100 	mov.w	r1, #512	; 0x200
  nyq_fs = f_s / 2.0;
 8003f7e:	ed83 8a00 	vstr	s16, [r3]
  arm_rfft_fast_init_f32(&S, NN);
 8003f82:	f000 ff69 	bl	8004e58 <arm_rfft_fast_init_f32>
  arm_fir_init_f32(&S_PRE, 2, fir_coefficients, state_buf, NN);
 8003f86:	9400      	str	r4, [sp, #0]
 8003f88:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <init_dsp+0x74>)
 8003f8a:	4a0f      	ldr	r2, [pc, #60]	; (8003fc8 <init_dsp+0x78>)
 8003f8c:	480f      	ldr	r0, [pc, #60]	; (8003fcc <init_dsp+0x7c>)
 8003f8e:	2102      	movs	r1, #2
 8003f90:	f001 fcfa 	bl	8005988 <arm_fir_init_f32>
  arm_fir_init_f32(&S_WPRE, 2, fir_w_coefficients, state_w_buf, NN);
 8003f94:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <init_dsp+0x80>)
 8003f96:	4a0f      	ldr	r2, [pc, #60]	; (8003fd4 <init_dsp+0x84>)
 8003f98:	480f      	ldr	r0, [pc, #60]	; (8003fd8 <init_dsp+0x88>)
 8003f9a:	9400      	str	r4, [sp, #0]
 8003f9c:	2102      	movs	r1, #2
 8003f9e:	f001 fcf3 	bl	8005988 <arm_fir_init_f32>
  generate_filters();
 8003fa2:	f7ff ff3b 	bl	8003e1c <generate_filters>
#ifndef FEATURE_MFSC
  dct2_init_f32(&S_DCT, NUM_FILTERS);
 8003fa6:	480d      	ldr	r0, [pc, #52]	; (8003fdc <init_dsp+0x8c>)
 8003fa8:	2128      	movs	r1, #40	; 0x28
#endif
}
 8003faa:	b002      	add	sp, #8
 8003fac:	ecbd 8b02 	vpop	{d8}
 8003fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  dct2_init_f32(&S_DCT, NUM_FILTERS);
 8003fb4:	f7ff bc10 	b.w	80037d8 <dct2_init_f32>
 8003fb8:	20001738 	.word	0x20001738
 8003fbc:	2000b8a4 	.word	0x2000b8a4
 8003fc0:	200020cc 	.word	0x200020cc
 8003fc4:	200028d0 	.word	0x200028d0
 8003fc8:	20000000 	.word	0x20000000
 8003fcc:	2000b8bc 	.word	0x2000b8bc
 8003fd0:	200030d4 	.word	0x200030d4
 8003fd4:	20000008 	.word	0x20000008
 8003fd8:	2000b898 	.word	0x2000b898
 8003fdc:	2000b874 	.word	0x2000b874

08003fe0 <apply_pre_emphasis>:

//--- DSP pipeline functions -----------------------------//

// Apply pre-emphasis
void apply_pre_emphasis(float32_t *signal) {
 8003fe0:	4602      	mov	r2, r0
  arm_fir_f32(&S_PRE, signal, signal, NN);
 8003fe2:	4601      	mov	r1, r0
 8003fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fe8:	4801      	ldr	r0, [pc, #4]	; (8003ff0 <apply_pre_emphasis+0x10>)
 8003fea:	f001 bcdf 	b.w	80059ac <arm_fir_f32>
 8003fee:	bf00      	nop
 8003ff0:	2000b8bc 	.word	0x2000b8bc

08003ff4 <apply_weak_pre_emphasis>:
}

void apply_weak_pre_emphasis(float32_t *signal) {
 8003ff4:	4602      	mov	r2, r0
  arm_fir_f32(&S_WPRE, signal, signal, NN);
 8003ff6:	4601      	mov	r1, r0
 8003ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ffc:	4801      	ldr	r0, [pc, #4]	; (8004004 <apply_weak_pre_emphasis+0x10>)
 8003ffe:	f001 bcd5 	b.w	80059ac <arm_fir_f32>
 8004002:	bf00      	nop
 8004004:	2000b898 	.word	0x2000b898

08004008 <apply_ac_coupling>:
}

// AC coupling (to remove DC)
void apply_ac_coupling(float32_t *signal) {
 8004008:	b537      	push	{r0, r1, r2, r4, r5, lr}
  float32_t mean;
  static float32_t mean_hist[NUM_MEANS] = { 0.0f };
  arm_copy_f32(mean_hist + 1, mean_hist, NUM_MEANS - 1);
 800400a:	4d0f      	ldr	r5, [pc, #60]	; (8004048 <apply_ac_coupling+0x40>)
void apply_ac_coupling(float32_t *signal) {
 800400c:	4604      	mov	r4, r0
  arm_copy_f32(mean_hist + 1, mean_hist, NUM_MEANS - 1);
 800400e:	4629      	mov	r1, r5
 8004010:	1d28      	adds	r0, r5, #4
 8004012:	220f      	movs	r2, #15
 8004014:	f000 febc 	bl	8004d90 <arm_copy_f32>
  arm_mean_f32(signal, NN, mean_hist + NUM_MEANS - 1);
 8004018:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 800401c:	4620      	mov	r0, r4
 800401e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004022:	f000 fee5 	bl	8004df0 <arm_mean_f32>
  arm_mean_f32(signal, NUM_MEANS, &mean);
 8004026:	aa01      	add	r2, sp, #4
 8004028:	4620      	mov	r0, r4
 800402a:	2110      	movs	r1, #16
 800402c:	f000 fee0 	bl	8004df0 <arm_mean_f32>
  arm_offset_f32(signal, -mean, signal, NN);
 8004030:	ed9d 0a01 	vldr	s0, [sp, #4]
 8004034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004038:	4621      	mov	r1, r4
 800403a:	eeb1 0a40 	vneg.f32	s0, s0
 800403e:	4620      	mov	r0, r4
 8004040:	f002 f876 	bl	8006130 <arm_offset_f32>
}
 8004044:	b003      	add	sp, #12
 8004046:	bd30      	pop	{r4, r5, pc}
 8004048:	2000208c 	.word	0x2000208c

0800404c <apply_hann>:

// Apply Hann window
void apply_hann(float32_t *signal) {
  arm_mult_f32(signal, hann_window, signal, NN);
 800404c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004050:	4602      	mov	r2, r0
 8004052:	4901      	ldr	r1, [pc, #4]	; (8004058 <apply_hann+0xc>)
 8004054:	f002 b8a2 	b.w	800619c <arm_mult_f32>
 8004058:	2000173c 	.word	0x2000173c

0800405c <apply_fft>:
}

// FFT
void apply_fft(float32_t *signal) {
 800405c:	b538      	push	{r3, r4, r5, lr}
  // Caution: arm_rfft_fast_f32() rewrites the 2nd arg (signal)
  arm_rfft_fast_f32(&S, signal, signal_buf, 0);
 800405e:	4c08      	ldr	r4, [pc, #32]	; (8004080 <apply_fft+0x24>)
void apply_fft(float32_t *signal) {
 8004060:	4605      	mov	r5, r0
  arm_rfft_fast_f32(&S, signal, signal_buf, 0);
 8004062:	4622      	mov	r2, r4
 8004064:	4601      	mov	r1, r0
 8004066:	2300      	movs	r3, #0
 8004068:	4806      	ldr	r0, [pc, #24]	; (8004084 <apply_fft+0x28>)
 800406a:	f000 ff77 	bl	8004f5c <arm_rfft_fast_f32>
  arm_copy_f32(signal_buf, signal, NN);
 800406e:	4629      	mov	r1, r5
 8004070:	4620      	mov	r0, r4
 8004072:	f44f 7200 	mov.w	r2, #512	; 0x200
}
 8004076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  arm_copy_f32(signal_buf, signal, NN);
 800407a:	f000 be89 	b.w	8004d90 <arm_copy_f32>
 800407e:	bf00      	nop
 8004080:	200020d0 	.word	0x200020d0
 8004084:	2000b8a4 	.word	0x2000b8a4

08004088 <apply_psd>:

// PSD
void apply_psd(float32_t *signal) {
 8004088:	b538      	push	{r3, r4, r5, lr}
  arm_cmplx_mag_f32(signal, signal_buf, NN / 2);
 800408a:	4c08      	ldr	r4, [pc, #32]	; (80040ac <apply_psd+0x24>)
void apply_psd(float32_t *signal) {
 800408c:	4605      	mov	r5, r0
  arm_cmplx_mag_f32(signal, signal_buf, NN / 2);
 800408e:	4621      	mov	r1, r4
 8004090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004094:	f001 feee 	bl	8005e74 <arm_cmplx_mag_f32>
  arm_scale_f32(signal_buf, RECIPROCAL_NN, signal, NN / 2);
 8004098:	4629      	mov	r1, r5
 800409a:	4620      	mov	r0, r4
 800409c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040a0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80040b0 <apply_psd+0x28>
}
 80040a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  arm_scale_f32(signal_buf, RECIPROCAL_NN, signal, NN / 2);
 80040a8:	f002 b80c 	b.w	80060c4 <arm_scale_f32>
 80040ac:	200020d0 	.word	0x200020d0
 80040b0:	3b000000 	.word	0x3b000000

080040b4 <apply_psd_logscale>:

// PSD in logscale
void apply_psd_logscale(float32_t *signal) {
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	4604      	mov	r4, r0
 80040b8:	ed2d 8b02 	vpush	{d8}
 80040bc:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (int n = 0; n < NN / 2; n++) {
    signal[n] = 20.0 * log10_approx(signal[n]);
 80040c0:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
 80040c4:	ed94 0a00 	vldr	s0, [r4]
 80040c8:	f7ff fdee 	bl	8003ca8 <log10_approx>
 80040cc:	ee20 0a08 	vmul.f32	s0, s0, s16
 80040d0:	eca4 0a01 	vstmia	r4!, {s0}
  for (int n = 0; n < NN / 2; n++) {
 80040d4:	42ac      	cmp	r4, r5
 80040d6:	d1f5      	bne.n	80040c4 <apply_psd_logscale+0x10>
  }
}
 80040d8:	ecbd 8b02 	vpop	{d8}
 80040dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080040e0 <apply_filterbank>:

// Apply mel filter bank
void apply_filterbank(float32_t *signal) {
 80040e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  float32_t sum = 0.0f;
 80040e4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8004140 <apply_filterbank+0x60>
 80040e8:	4f16      	ldr	r7, [pc, #88]	; (8004144 <apply_filterbank+0x64>)
  int left_k, len;
  arm_fill_f32(0.0f, signal_buf, NN / 2);
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
    left_k = k_range[m][0];
    len = k_range[m][1];
 80040ea:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8004148 <apply_filterbank+0x68>
    arm_dot_prod_f32(&signal[left_k], filterbank[m], len, &sum);
 80040ee:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800414c <apply_filterbank+0x6c>
void apply_filterbank(float32_t *signal) {
 80040f2:	4606      	mov	r6, r0
  float32_t sum = 0.0f;
 80040f4:	ad02      	add	r5, sp, #8
  arm_fill_f32(0.0f, signal_buf, NN / 2);
 80040f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040fa:	4812      	ldr	r0, [pc, #72]	; (8004144 <apply_filterbank+0x64>)
  float32_t sum = 0.0f;
 80040fc:	ed25 0a01 	vstmdb	r5!, {s0}
  arm_fill_f32(0.0f, signal_buf, NN / 2);
 8004100:	f000 fe28 	bl	8004d54 <arm_fill_f32>
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 8004104:	2400      	movs	r4, #0
 8004106:	3408      	adds	r4, #8
 8004108:	f5b4 7fa4 	cmp.w	r4, #328	; 0x148
 800410c:	d107      	bne.n	800411e <apply_filterbank+0x3e>
    signal_buf[m - 1] = sum;
  }
  arm_copy_f32(signal_buf, signal, NUM_FILTERS);
 800410e:	2228      	movs	r2, #40	; 0x28
 8004110:	4631      	mov	r1, r6
 8004112:	480c      	ldr	r0, [pc, #48]	; (8004144 <apply_filterbank+0x64>)
 8004114:	f000 fe3c 	bl	8004d90 <arm_copy_f32>
}
 8004118:	b003      	add	sp, #12
 800411a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    arm_dot_prod_f32(&signal[left_k], filterbank[m], len, &sum);
 800411e:	f854 0008 	ldr.w	r0, [r4, r8]
    len = k_range[m][1];
 8004122:	eb08 0204 	add.w	r2, r8, r4
    arm_dot_prod_f32(&signal[left_k], filterbank[m], len, &sum);
 8004126:	462b      	mov	r3, r5
 8004128:	6852      	ldr	r2, [r2, #4]
 800412a:	eb09 1104 	add.w	r1, r9, r4, lsl #4
 800412e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8004132:	f7fc ff6d 	bl	8001010 <arm_dot_prod_f32>
    signal_buf[m - 1] = sum;
 8004136:	9b01      	ldr	r3, [sp, #4]
 8004138:	f847 3b04 	str.w	r3, [r7], #4
 800413c:	e7e3      	b.n	8004106 <apply_filterbank+0x26>
 800413e:	bf00      	nop
 8004140:	00000000 	.word	0x00000000
 8004144:	200020d0 	.word	0x200020d0
 8004148:	20001f3c 	.word	0x20001f3c
 800414c:	20000238 	.word	0x20000238

08004150 <apply_filterbank_logscale>:

// Filtered PSD in logscale
void apply_filterbank_logscale(float32_t *signal) {
 8004150:	b538      	push	{r3, r4, r5, lr}
 8004152:	4604      	mov	r4, r0
 8004154:	ed2d 8b02 	vpush	{d8}
 8004158:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
  for (int n = 0; n < NUM_FILTERS; n++) {
    signal[n] = 20.0 * log10_approx(signal[n]);
 800415c:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
  for (int n = 0; n < NUM_FILTERS; n++) {
 8004160:	42ac      	cmp	r4, r5
 8004162:	d102      	bne.n	800416a <apply_filterbank_logscale+0x1a>
  }
}
 8004164:	ecbd 8b02 	vpop	{d8}
 8004168:	bd38      	pop	{r3, r4, r5, pc}
    signal[n] = 20.0 * log10_approx(signal[n]);
 800416a:	ed94 0a00 	vldr	s0, [r4]
 800416e:	f7ff fd9b 	bl	8003ca8 <log10_approx>
 8004172:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004176:	eca4 0a01 	vstmia	r4!, {s0}
 800417a:	e7f1      	b.n	8004160 <apply_filterbank_logscale+0x10>

0800417c <apply_dct2>:

#ifndef FEATURE_MFSC
// DCT Type-II
void apply_dct2(float32_t *signal) {
 800417c:	b538      	push	{r3, r4, r5, lr}
  arm_copy_f32(signal, signal_buf, NUM_FILTERS);
 800417e:	4d07      	ldr	r5, [pc, #28]	; (800419c <apply_dct2+0x20>)
void apply_dct2(float32_t *signal) {
 8004180:	4604      	mov	r4, r0
  arm_copy_f32(signal, signal_buf, NUM_FILTERS);
 8004182:	2228      	movs	r2, #40	; 0x28
 8004184:	4629      	mov	r1, r5
 8004186:	f000 fe03 	bl	8004d90 <arm_copy_f32>
  // DCT Type-II
  dct2_f32(&S_DCT, signal_buf, signal, 0);
 800418a:	2300      	movs	r3, #0
 800418c:	4622      	mov	r2, r4
 800418e:	4629      	mov	r1, r5
 8004190:	4803      	ldr	r0, [pc, #12]	; (80041a0 <apply_dct2+0x24>)
 8004192:	f7ff fbcf 	bl	8003934 <dct2_f32>
  signal[0] = 0.0;  // Remove DC
 8004196:	2300      	movs	r3, #0
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	bd38      	pop	{r3, r4, r5, pc}
 800419c:	200020d0 	.word	0x200020d0
 80041a0:	2000b874 	.word	0x2000b874

080041a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80041a4:	b500      	push	{lr}
 80041a6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a8:	2214      	movs	r2, #20
 80041aa:	2100      	movs	r1, #0
 80041ac:	a803      	add	r0, sp, #12
 80041ae:	f002 fb6a 	bl	8006886 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041b2:	4b18      	ldr	r3, [pc, #96]	; (8004214 <MX_GPIO_Init+0x70>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80041b4:	4818      	ldr	r0, [pc, #96]	; (8004218 <MX_GPIO_Init+0x74>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041b8:	f042 0204 	orr.w	r2, r2, #4
 80041bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80041be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041c0:	f002 0204 	and.w	r2, r2, #4
 80041c4:	9200      	str	r2, [sp, #0]
 80041c6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80041d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041d2:	f002 0201 	and.w	r2, r2, #1
 80041d6:	9201      	str	r2, [sp, #4]
 80041d8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041dc:	f042 0202 	orr.w	r2, r2, #2
 80041e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80041e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	9302      	str	r3, [sp, #8]
 80041ea:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = B1_Pin;
 80041ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041f0:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80041f2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80041f4:	4b09      	ldr	r3, [pc, #36]	; (800421c <MX_GPIO_Init+0x78>)
 80041f6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80041f8:	f7fd fc7a 	bl	8001af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80041fc:	2200      	movs	r2, #0
 80041fe:	4611      	mov	r1, r2
 8004200:	2028      	movs	r0, #40	; 0x28
 8004202:	f7fc ff9b 	bl	800113c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004206:	2028      	movs	r0, #40	; 0x28
 8004208:	f7fc ffcc 	bl	80011a4 <HAL_NVIC_EnableIRQ>

}
 800420c:	b009      	add	sp, #36	; 0x24
 800420e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004212:	bf00      	nop
 8004214:	40021000 	.word	0x40021000
 8004218:	48000800 	.word	0x48000800
 800421c:	10210000 	.word	0x10210000

08004220 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004220:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8004222:	4812      	ldr	r0, [pc, #72]	; (800426c <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x10909CEC;
 8004224:	4b12      	ldr	r3, [pc, #72]	; (8004270 <MX_I2C1_Init+0x50>)
 8004226:	4913      	ldr	r1, [pc, #76]	; (8004274 <MX_I2C1_Init+0x54>)
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004228:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x10909CEC;
 800422a:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004232:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004234:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004236:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004238:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800423a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800423c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800423e:	f7fd fd3f 	bl	8001cc0 <HAL_I2C_Init>
 8004242:	b108      	cbz	r0, 8004248 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8004244:	f000 fc14 	bl	8004a70 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004248:	2100      	movs	r1, #0
 800424a:	4808      	ldr	r0, [pc, #32]	; (800426c <MX_I2C1_Init+0x4c>)
 800424c:	f7fd fd89 	bl	8001d62 <HAL_I2CEx_ConfigAnalogFilter>
 8004250:	b108      	cbz	r0, 8004256 <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8004252:	f000 fc0d 	bl	8004a70 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004256:	2100      	movs	r1, #0
 8004258:	4804      	ldr	r0, [pc, #16]	; (800426c <MX_I2C1_Init+0x4c>)
 800425a:	f7fd fda8 	bl	8001dae <HAL_I2CEx_ConfigDigitalFilter>
 800425e:	b118      	cbz	r0, 8004268 <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 8004260:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004264:	f000 bc04 	b.w	8004a70 <Error_Handler>
 8004268:	bd08      	pop	{r3, pc}
 800426a:	bf00      	nop
 800426c:	2000b8c8 	.word	0x2000b8c8
 8004270:	10909cec 	.word	0x10909cec
 8004274:	40005400 	.word	0x40005400

08004278 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004278:	b510      	push	{r4, lr}
 800427a:	4604      	mov	r4, r0
 800427c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427e:	2214      	movs	r2, #20
 8004280:	2100      	movs	r1, #0
 8004282:	a803      	add	r0, sp, #12
 8004284:	f002 faff 	bl	8006886 <memset>
  if(i2cHandle->Instance==I2C1)
 8004288:	6822      	ldr	r2, [r4, #0]
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_I2C_MspInit+0x60>)
 800428c:	429a      	cmp	r2, r3
 800428e:	d121      	bne.n	80042d4 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004290:	4c12      	ldr	r4, [pc, #72]	; (80042dc <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004292:	4813      	ldr	r0, [pc, #76]	; (80042e0 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004294:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004296:	f043 0302 	orr.w	r3, r3, #2
 800429a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800429c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042ac:	2312      	movs	r3, #18
 80042ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042b0:	2301      	movs	r3, #1
 80042b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b4:	2303      	movs	r3, #3
 80042b6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042b8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042ba:	2304      	movs	r3, #4
 80042bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042be:	f7fd fc17 	bl	8001af0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80042ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d0:	9302      	str	r3, [sp, #8]
 80042d2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80042d4:	b008      	add	sp, #32
 80042d6:	bd10      	pop	{r4, pc}
 80042d8:	40005400 	.word	0x40005400
 80042dc:	40021000 	.word	0x40021000
 80042e0:	48000400 	.word	0x48000400

080042e4 <uart_tx>:
  static int length = 0;
  static int idx = 0;

  static char uart_buf[NUM_FILTERS * 200 * 2] = { 0 };

  if (cnt == 0) {
 80042e4:	4b5e      	ldr	r3, [pc, #376]	; (8004460 <uart_tx+0x17c>)
bool uart_tx(float32_t *in, mode mode, bool dma_start) {
 80042e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ea:	4614      	mov	r4, r2
  if (cnt == 0) {
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	2a00      	cmp	r2, #0
 80042f0:	d144      	bne.n	800437c <uart_tx+0x98>
    idx = 0;
 80042f2:	4d5c      	ldr	r5, [pc, #368]	; (8004464 <uart_tx+0x180>)
 80042f4:	602a      	str	r2, [r5, #0]

    switch (mode) {
 80042f6:	1e4a      	subs	r2, r1, #1
 80042f8:	2a03      	cmp	r2, #3
 80042fa:	d83c      	bhi.n	8004376 <uart_tx+0x92>
 80042fc:	e8df f002 	tbb	[pc, r2]
 8004300:	42352302 	.word	0x42352302

    case RAW_WAVE:
      length = NN;
 8004304:	4a58      	ldr	r2, [pc, #352]	; (8004468 <uart_tx+0x184>)
 8004306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800430a:	6011      	str	r1, [r2, #0]
      cnt = 1;
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	4e54      	ldr	r6, [pc, #336]	; (8004464 <uart_tx+0x180>)
    }
  }

  // Quantization: convert float into int
  if (mode == RAW_WAVE) {
    for (int n = 0; n < length; n++) {
 8004312:	4a55      	ldr	r2, [pc, #340]	; (8004468 <uart_tx+0x184>)
 8004314:	6837      	ldr	r7, [r6, #0]
 8004316:	4d55      	ldr	r5, [pc, #340]	; (800446c <uart_tx+0x188>)
 8004318:	f8d2 e000 	ldr.w	lr, [r2]
 800431c:	2100      	movs	r1, #0
 800431e:	460a      	mov	r2, r1
 8004320:	443d      	add	r5, r7
 8004322:	4572      	cmp	r2, lr
 8004324:	db5a      	blt.n	80043dc <uart_tx+0xf8>
 8004326:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800432a:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800432e:	b101      	cbz	r1, 8004332 <uart_tx+0x4e>
 8004330:	6032      	str	r2, [r6, #0]

  // memory-to-peripheral DMA to UART
  if (mode == FEATURES) {
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, NUM_FILTERS * 200 * 2);
    printing = false;
  } else if (--cnt == 0) {
 8004332:	681d      	ldr	r5, [r3, #0]
 8004334:	3d01      	subs	r5, #1
 8004336:	601d      	str	r5, [r3, #0]
 8004338:	2d00      	cmp	r5, #0
 800433a:	f040 8084 	bne.w	8004446 <uart_tx+0x162>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, idx);
 800433e:	4b49      	ldr	r3, [pc, #292]	; (8004464 <uart_tx+0x180>)
 8004340:	494a      	ldr	r1, [pc, #296]	; (800446c <uart_tx+0x188>)
 8004342:	881a      	ldrh	r2, [r3, #0]
 8004344:	e043      	b.n	80043ce <uart_tx+0xea>
      length = NN / 2;
 8004346:	4a48      	ldr	r2, [pc, #288]	; (8004468 <uart_tx+0x184>)
 8004348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800434c:	6011      	str	r1, [r2, #0]
      cnt = 1;
 800434e:	2201      	movs	r2, #1
      cnt = 200;
 8004350:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < length; n++) {
 8004352:	4a45      	ldr	r2, [pc, #276]	; (8004468 <uart_tx+0x184>)
 8004354:	4943      	ldr	r1, [pc, #268]	; (8004464 <uart_tx+0x180>)
 8004356:	f8d2 e000 	ldr.w	lr, [r2]
      uart_buf[idx++] = (int8_t) in[n];
 800435a:	4e44      	ldr	r6, [pc, #272]	; (800446c <uart_tx+0x188>)
 800435c:	680a      	ldr	r2, [r1, #0]
      if (in[n] < -128.0f) in[n] = -128.0f;
 800435e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004470 <uart_tx+0x18c>
    for (int n = 0; n < length; n++) {
 8004362:	2700      	movs	r7, #0
 8004364:	463d      	mov	r5, r7
      uart_buf[idx++] = (int8_t) in[n];
 8004366:	4416      	add	r6, r2
 8004368:	e062      	b.n	8004430 <uart_tx+0x14c>
      length = NN / 2;
 800436a:	4a3f      	ldr	r2, [pc, #252]	; (8004468 <uart_tx+0x184>)
 800436c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004370:	6011      	str	r1, [r2, #0]
      cnt = 200;
 8004372:	22c8      	movs	r2, #200	; 0xc8
 8004374:	e7ec      	b.n	8004350 <uart_tx+0x6c>
      length = 0;
 8004376:	4a3c      	ldr	r2, [pc, #240]	; (8004468 <uart_tx+0x184>)
 8004378:	2500      	movs	r5, #0
 800437a:	6015      	str	r5, [r2, #0]
  if (mode == RAW_WAVE) {
 800437c:	2901      	cmp	r1, #1
 800437e:	d0c7      	beq.n	8004310 <uart_tx+0x2c>
  } else if (mode == FEATURES) {
 8004380:	2904      	cmp	r1, #4
 8004382:	d1e6      	bne.n	8004352 <uart_tx+0x6e>
    a = pos * NUM_FILTERS;
 8004384:	4b3b      	ldr	r3, [pc, #236]	; (8004474 <uart_tx+0x190>)
    memcpy(uart_buf + b, mfsc_buffer, a);
 8004386:	4d39      	ldr	r5, [pc, #228]	; (800446c <uart_tx+0x188>)
    a = pos * NUM_FILTERS;
 8004388:	681b      	ldr	r3, [r3, #0]
    memcpy(uart_buf + b, mfsc_buffer, a);
 800438a:	4f3b      	ldr	r7, [pc, #236]	; (8004478 <uart_tx+0x194>)
    a = pos * NUM_FILTERS;
 800438c:	2428      	movs	r4, #40	; 0x28
 800438e:	fb04 f603 	mul.w	r6, r4, r3
    b = (200 - pos) * NUM_FILTERS;
 8004392:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8004396:	435c      	muls	r4, r3
    memcpy(uart_buf + b, mfsc_buffer, a);
 8004398:	4639      	mov	r1, r7
 800439a:	4632      	mov	r2, r6
 800439c:	1928      	adds	r0, r5, r4
 800439e:	f002 fa67 	bl	8006870 <memcpy>
    memcpy(uart_buf, mfsc_buffer + a, b);
 80043a2:	19b9      	adds	r1, r7, r6
 80043a4:	4622      	mov	r2, r4
    memcpy(uart_buf + b + c, mfcc_buffer, a);
 80043a6:	4f35      	ldr	r7, [pc, #212]	; (800447c <uart_tx+0x198>)
    memcpy(uart_buf, mfsc_buffer + a, b);
 80043a8:	4628      	mov	r0, r5
 80043aa:	f002 fa61 	bl	8006870 <memcpy>
    memcpy(uart_buf + b + c, mfcc_buffer, a);
 80043ae:	f504 50fa 	add.w	r0, r4, #8000	; 0x1f40
 80043b2:	4632      	mov	r2, r6
 80043b4:	4639      	mov	r1, r7
 80043b6:	4428      	add	r0, r5
 80043b8:	f002 fa5a 	bl	8006870 <memcpy>
    memcpy(uart_buf + c, mfcc_buffer + a, b);
 80043bc:	4622      	mov	r2, r4
 80043be:	19b9      	adds	r1, r7, r6
 80043c0:	f505 50fa 	add.w	r0, r5, #8000	; 0x1f40
 80043c4:	f002 fa54 	bl	8006870 <memcpy>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, NUM_FILTERS * 200 * 2);
 80043c8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80043cc:	4629      	mov	r1, r5
 80043ce:	482c      	ldr	r0, [pc, #176]	; (8004480 <uart_tx+0x19c>)
 80043d0:	f7fe fce0 	bl	8002d94 <HAL_UART_Transmit_DMA>
    printing = false;
 80043d4:	2400      	movs	r4, #0
  } else {
    printing = true;
  }

  return printing;
}
 80043d6:	4620      	mov	r0, r4
 80043d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043dc:	4680      	mov	r8, r0
      uart_buf[idx++] = (uint8_t) (((int16_t) in[n]) >> 8);      // MSB
 80043de:	ecf0 7a01 	vldmia	r0!, {s15}
 80043e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      uart_buf[idx++] = (uint8_t) (((int16_t) in[n] & 0x00ff));  // LSB
 80043e6:	eb05 0c42 	add.w	ip, r5, r2, lsl #1
      uart_buf[idx++] = (uint8_t) (((int16_t) in[n]) >> 8);      // MSB
 80043ea:	ee17 1a90 	vmov	r1, s15
 80043ee:	f341 2107 	sbfx	r1, r1, #8, #8
 80043f2:	f805 1012 	strb.w	r1, [r5, r2, lsl #1]
      uart_buf[idx++] = (uint8_t) (((int16_t) in[n] & 0x00ff));  // LSB
 80043f6:	edd8 7a00 	vldr	s15, [r8]
 80043fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    for (int n = 0; n < length; n++) {
 80043fe:	3201      	adds	r2, #1
      uart_buf[idx++] = (uint8_t) (((int16_t) in[n] & 0x00ff));  // LSB
 8004400:	ee17 1a90 	vmov	r1, s15
 8004404:	f88c 1001 	strb.w	r1, [ip, #1]
 8004408:	2101      	movs	r1, #1
 800440a:	e78a      	b.n	8004322 <uart_tx+0x3e>
      if (in[n] < -128.0f) in[n] = -128.0f;
 800440c:	edd0 7a00 	vldr	s15, [r0]
 8004410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004418:	bf48      	it	mi
 800441a:	ed80 7a00 	vstrmi	s14, [r0]
      uart_buf[idx++] = (int8_t) in[n];
 800441e:	ecf0 7a01 	vldmia	r0!, {s15}
 8004422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004426:	ee17 7a90 	vmov	r7, s15
 800442a:	5577      	strb	r7, [r6, r5]
    for (int n = 0; n < length; n++) {
 800442c:	3501      	adds	r5, #1
 800442e:	2701      	movs	r7, #1
 8004430:	4575      	cmp	r5, lr
 8004432:	dbeb      	blt.n	800440c <uart_tx+0x128>
 8004434:	f1be 0f00 	cmp.w	lr, #0
 8004438:	bfa8      	it	ge
 800443a:	4472      	addge	r2, lr
 800443c:	2f00      	cmp	r7, #0
 800443e:	f43f af78 	beq.w	8004332 <uart_tx+0x4e>
 8004442:	600a      	str	r2, [r1, #0]
 8004444:	e775      	b.n	8004332 <uart_tx+0x4e>
  } else if (dma_start) {
 8004446:	b144      	cbz	r4, 800445a <uart_tx+0x176>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, idx);
 8004448:	4d06      	ldr	r5, [pc, #24]	; (8004464 <uart_tx+0x180>)
 800444a:	4908      	ldr	r1, [pc, #32]	; (800446c <uart_tx+0x188>)
 800444c:	882a      	ldrh	r2, [r5, #0]
 800444e:	480c      	ldr	r0, [pc, #48]	; (8004480 <uart_tx+0x19c>)
 8004450:	f7fe fca0 	bl	8002d94 <HAL_UART_Transmit_DMA>
    idx = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	602b      	str	r3, [r5, #0]
 8004458:	e7bd      	b.n	80043d6 <uart_tx+0xf2>
    printing = true;
 800445a:	2401      	movs	r4, #1
  return printing;
 800445c:	e7bb      	b.n	80043d6 <uart_tx+0xf2>
 800445e:	bf00      	nop
 8004460:	200038d8 	.word	0x200038d8
 8004464:	200038e0 	.word	0x200038e0
 8004468:	200038e4 	.word	0x200038e4
 800446c:	20007771 	.word	0x20007771
 8004470:	c3000000 	.word	0xc3000000
 8004474:	2000776c 	.word	0x2000776c
 8004478:	20005828 	.word	0x20005828
 800447c:	200038e8 	.word	0x200038e8
 8004480:	2000b9a0 	.word	0x2000b9a0

08004484 <dsp>:
#endif

/*
 * DSP pipeline
 */
void dsp(float32_t *s1, mode mode) {
 8004484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004488:	460e      	mov	r6, r1
 800448a:	4604      	mov	r4, r0
  static bool active = false;
  static int activity_cnt = 0;
  float32_t max_value;
  uint32_t max_index;

  start = HAL_GetTick();
 800448c:	f7fc fe30 	bl	80010f0 <HAL_GetTick>
 8004490:	4607      	mov	r7, r0

  apply_ac_coupling(s1);  // remove DC
 8004492:	4620      	mov	r0, r4
 8004494:	f7ff fdb8 	bl	8004008 <apply_ac_coupling>

  if (mode >= FFT) {
 8004498:	2e01      	cmp	r6, #1
 800449a:	4d23      	ldr	r5, [pc, #140]	; (8004528 <dsp+0xa4>)
 800449c:	d90d      	bls.n	80044ba <dsp+0x36>
    apply_hann(s1);
 800449e:	4620      	mov	r0, r4
 80044a0:	f7ff fdd4 	bl	800404c <apply_hann>
    apply_fft(s1);
 80044a4:	4620      	mov	r0, r4
 80044a6:	f7ff fdd9 	bl	800405c <apply_fft>
    apply_psd(s1);
 80044aa:	4620      	mov	r0, r4
 80044ac:	f7ff fdec 	bl	8004088 <apply_psd>
    if (mode < FEATURES) {
 80044b0:	2e03      	cmp	r6, #3
      apply_psd_logscale(s1);
 80044b2:	4620      	mov	r0, r4
    if (mode < FEATURES) {
 80044b4:	d80e      	bhi.n	80044d4 <dsp+0x50>
      apply_psd_logscale(s1);
 80044b6:	f7ff fdfd 	bl	80040b4 <apply_psd_logscale>
        mfcc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
      }
#endif
    }
  }
  if (++pos >= 200)
 80044ba:	682b      	ldr	r3, [r5, #0]
 80044bc:	3301      	adds	r3, #1
 80044be:	2bc7      	cmp	r3, #199	; 0xc7
    pos = 0;
 80044c0:	bfc8      	it	gt
 80044c2:	2300      	movgt	r3, #0
 80044c4:	602b      	str	r3, [r5, #0]

  end = HAL_GetTick();
 80044c6:	f7fc fe13 	bl	80010f0 <HAL_GetTick>
  elapsed_time = end - start;
 80044ca:	4b18      	ldr	r3, [pc, #96]	; (800452c <dsp+0xa8>)
 80044cc:	1bc0      	subs	r0, r0, r7
 80044ce:	6018      	str	r0, [r3, #0]
 80044d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      apply_filterbank(s1);
 80044d4:	f7ff fe04 	bl	80040e0 <apply_filterbank>
      apply_filterbank_logscale(s1);
 80044d8:	4620      	mov	r0, r4
 80044da:	f7ff fe39 	bl	8004150 <apply_filterbank_logscale>
        mfsc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
 80044de:	682b      	ldr	r3, [r5, #0]
 80044e0:	4a13      	ldr	r2, [pc, #76]	; (8004530 <dsp+0xac>)
 80044e2:	2028      	movs	r0, #40	; 0x28
 80044e4:	46a0      	mov	r8, r4
 80044e6:	4621      	mov	r1, r4
      for (int i = 0; i < NUM_FILTERS; i++) {
 80044e8:	2600      	movs	r6, #0
        mfsc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
 80044ea:	fb00 2303 	mla	r3, r0, r3, r2
 80044ee:	ecf1 7a01 	vldmia	r1!, {s15}
 80044f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f6:	ee17 2a90 	vmov	r2, s15
 80044fa:	559a      	strb	r2, [r3, r6]
      for (int i = 0; i < NUM_FILTERS; i++) {
 80044fc:	3601      	adds	r6, #1
 80044fe:	2e28      	cmp	r6, #40	; 0x28
 8004500:	d1f5      	bne.n	80044ee <dsp+0x6a>
      apply_dct2(s1);
 8004502:	4620      	mov	r0, r4
 8004504:	f7ff fe3a 	bl	800417c <apply_dct2>
        mfcc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
 8004508:	682a      	ldr	r2, [r5, #0]
 800450a:	490a      	ldr	r1, [pc, #40]	; (8004534 <dsp+0xb0>)
      for (int i = 0; i < NUM_FILTERS; i++) {
 800450c:	2300      	movs	r3, #0
        mfcc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
 800450e:	fb06 1602 	mla	r6, r6, r2, r1
 8004512:	ecf8 7a01 	vldmia	r8!, {s15}
 8004516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800451a:	ee17 2a90 	vmov	r2, s15
 800451e:	54f2      	strb	r2, [r6, r3]
      for (int i = 0; i < NUM_FILTERS; i++) {
 8004520:	3301      	adds	r3, #1
 8004522:	2b28      	cmp	r3, #40	; 0x28
 8004524:	d1f5      	bne.n	8004512 <dsp+0x8e>
 8004526:	e7c8      	b.n	80044ba <dsp+0x36>
 8004528:	2000776c 	.word	0x2000776c
 800452c:	200038dc 	.word	0x200038dc
 8004530:	20005828 	.word	0x20005828
 8004534:	200038e8 	.word	0x200038e8

08004538 <overlap_dsp>:
 *       [a1|b0]      b(1/2) ... 13.2msec
 *          [b0|b1]   b(2/2) ... 13.2msec
 * --- overlap dsp -------------
 *             :
 */
void overlap_dsp(float32_t *buf, mode mode) {
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
 800453e:	4606      	mov	r6, r0
 8004540:	460d      	mov	r5, r1

  float32_t signal[NN] = { 0.0f };
 8004542:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004546:	2100      	movs	r1, #0
 8004548:	4668      	mov	r0, sp
 800454a:	f002 f99c 	bl	8006886 <memset>

  arm_copy_f32(buf, signal, NN);
  dsp(signal, mode);  // (1/2)
#ifndef INFERENCE
  if (printing) {
 800454e:	4c14      	ldr	r4, [pc, #80]	; (80045a0 <overlap_dsp+0x68>)
  arm_copy_f32(buf, signal, NN);
 8004550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004554:	4669      	mov	r1, sp
 8004556:	4630      	mov	r0, r6
 8004558:	f000 fc1a 	bl	8004d90 <arm_copy_f32>
  dsp(signal, mode);  // (1/2)
 800455c:	4629      	mov	r1, r5
 800455e:	4668      	mov	r0, sp
 8004560:	f7ff ff90 	bl	8004484 <dsp>
  if (printing) {
 8004564:	7823      	ldrb	r3, [r4, #0]
 8004566:	b12b      	cbz	r3, 8004574 <overlap_dsp+0x3c>
    printing = uart_tx(signal, mode, false);  // false: UART output pending
 8004568:	2200      	movs	r2, #0
 800456a:	4629      	mov	r1, r5
 800456c:	4668      	mov	r0, sp
 800456e:	f7ff feb9 	bl	80042e4 <uart_tx>
 8004572:	7020      	strb	r0, [r4, #0]
  }
#endif

  arm_copy_f32(buf + NN_HALF, signal, NN);
 8004574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004578:	4669      	mov	r1, sp
 800457a:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 800457e:	f000 fc07 	bl	8004d90 <arm_copy_f32>
  dsp(signal, mode);  // (2/2)
 8004582:	4629      	mov	r1, r5
 8004584:	4668      	mov	r0, sp
 8004586:	f7ff ff7d 	bl	8004484 <dsp>
#ifndef INFERENCE
  if (printing) {
 800458a:	7823      	ldrb	r3, [r4, #0]
 800458c:	b12b      	cbz	r3, 800459a <overlap_dsp+0x62>
    printing = uart_tx(signal, mode, true);  // true: UART output
 800458e:	2201      	movs	r2, #1
 8004590:	4629      	mov	r1, r5
 8004592:	4668      	mov	r0, sp
 8004594:	f7ff fea6 	bl	80042e4 <uart_tx>
 8004598:	7020      	strb	r0, [r4, #0]
  }
#endif
}
 800459a:	f50d 6d00 	add.w	sp, sp, #2048	; 0x800
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	20007770 	.word	0x20007770

080045a4 <dump>:

/*
 * Dump debug info
 */
void dump(void) {
 80045a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (debug_output != DISABLED) {
 80045a8:	4d1e      	ldr	r5, [pc, #120]	; (8004624 <dump+0x80>)
 80045aa:	782b      	ldrb	r3, [r5, #0]
 80045ac:	b13b      	cbz	r3, 80045be <dump+0x1a>
    switch (debug_output) {
 80045ae:	782b      	ldrb	r3, [r5, #0]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d005      	beq.n	80045c2 <dump+0x1e>
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d02b      	beq.n	8004612 <dump+0x6e>
      printf("mode: %d, elapsed_time: %lu(msec)\n", output_mode, elapsed_time);
      break;
    default:
      break;
    }
    debug_output = DISABLED;
 80045ba:	2300      	movs	r3, #0
 80045bc:	702b      	strb	r3, [r5, #0]
 80045be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        printf("%d:%d,", k_range[m][0], k_range[m][1]);
 80045c2:	4f19      	ldr	r7, [pc, #100]	; (8004628 <dump+0x84>)
 80045c4:	f8df a074 	ldr.w	sl, [pc, #116]	; 800463c <dump+0x98>
 80045c8:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8004640 <dump+0x9c>
    switch (debug_output) {
 80045cc:	2400      	movs	r4, #0
        printf("%d:%d,", k_range[m][0], k_range[m][1]);
 80045ce:	19e3      	adds	r3, r4, r7
 80045d0:	59e1      	ldr	r1, [r4, r7]
 80045d2:	685a      	ldr	r2, [r3, #4]
          printf("%.3f,", filterbank[m][n]);
 80045d4:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8004644 <dump+0xa0>
        printf("%d:%d,", k_range[m][0], k_range[m][1]);
 80045d8:	4650      	mov	r0, sl
 80045da:	f002 fe35 	bl	8007248 <iprintf>
 80045de:	eb09 1804 	add.w	r8, r9, r4, lsl #4
        for (int n = 0; n < FILTER_LENGTH; n++) {
 80045e2:	2600      	movs	r6, #0
          printf("%.3f,", filterbank[m][n]);
 80045e4:	f858 0b04 	ldr.w	r0, [r8], #4
 80045e8:	f7fc f80e 	bl	8000608 <__aeabi_f2d>
        for (int n = 0; n < FILTER_LENGTH; n++) {
 80045ec:	3601      	adds	r6, #1
          printf("%.3f,", filterbank[m][n]);
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4658      	mov	r0, fp
 80045f4:	f002 fe28 	bl	8007248 <iprintf>
        for (int n = 0; n < FILTER_LENGTH; n++) {
 80045f8:	2e20      	cmp	r6, #32
 80045fa:	d1f3      	bne.n	80045e4 <dump+0x40>
        printf("\n");
 80045fc:	200a      	movs	r0, #10
 80045fe:	3408      	adds	r4, #8
 8004600:	f002 fe3a 	bl	8007278 <putchar>
      for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8004604:	f5b4 7fa8 	cmp.w	r4, #336	; 0x150
 8004608:	d1e1      	bne.n	80045ce <dump+0x2a>
      printf("e\n");
 800460a:	4808      	ldr	r0, [pc, #32]	; (800462c <dump+0x88>)
 800460c:	f002 fea4 	bl	8007358 <puts>
 8004610:	e7d3      	b.n	80045ba <dump+0x16>
      printf("mode: %d, elapsed_time: %lu(msec)\n", output_mode, elapsed_time);
 8004612:	4b07      	ldr	r3, [pc, #28]	; (8004630 <dump+0x8c>)
 8004614:	4807      	ldr	r0, [pc, #28]	; (8004634 <dump+0x90>)
 8004616:	7819      	ldrb	r1, [r3, #0]
 8004618:	4b07      	ldr	r3, [pc, #28]	; (8004638 <dump+0x94>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	f002 fe14 	bl	8007248 <iprintf>
 8004620:	e7cb      	b.n	80045ba <dump+0x16>
 8004622:	bf00      	nop
 8004624:	20000012 	.word	0x20000012
 8004628:	20001f3c 	.word	0x20001f3c
 800462c:	0800aa8e 	.word	0x0800aa8e
 8004630:	20000013 	.word	0x20000013
 8004634:	0800aa90 	.word	0x0800aa90
 8004638:	200038dc 	.word	0x200038dc
 800463c:	0800aa81 	.word	0x0800aa81
 8004640:	20000238 	.word	0x20000238
 8004644:	0800aa88 	.word	0x0800aa88

08004648 <pre_emphasis>:

/*
 * Apply pre emphasis
 */
void pre_emphasis(float32_t *signal, int direction) {
  if (pre_emphasis_enabled) {
 8004648:	4a07      	ldr	r2, [pc, #28]	; (8004668 <pre_emphasis+0x20>)
 800464a:	7812      	ldrb	r2, [r2, #0]
void pre_emphasis(float32_t *signal, int direction) {
 800464c:	4603      	mov	r3, r0
  if (pre_emphasis_enabled) {
 800464e:	b152      	cbz	r2, 8004666 <pre_emphasis+0x1e>
    if (beam_forming_mode == ENDFIRE && direction != 2) {
 8004650:	4a06      	ldr	r2, [pc, #24]	; (800466c <pre_emphasis+0x24>)
 8004652:	7812      	ldrb	r2, [r2, #0]
 8004654:	2a01      	cmp	r2, #1
 8004656:	d103      	bne.n	8004660 <pre_emphasis+0x18>
 8004658:	2902      	cmp	r1, #2
 800465a:	d001      	beq.n	8004660 <pre_emphasis+0x18>
      apply_weak_pre_emphasis(signal);
 800465c:	f7ff bcca 	b.w	8003ff4 <apply_weak_pre_emphasis>
    } else {
      apply_pre_emphasis(signal);
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff bcbd 	b.w	8003fe0 <apply_pre_emphasis>
 8004666:	4770      	bx	lr
 8004668:	20000014 	.word	0x20000014
 800466c:	20000011 	.word	0x20000011

08004670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004670:	b500      	push	{lr}
 8004672:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004674:	2244      	movs	r2, #68	; 0x44
 8004676:	2100      	movs	r1, #0
 8004678:	a805      	add	r0, sp, #20
 800467a:	f002 f904 	bl	8006886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800467e:	2214      	movs	r2, #20
 8004680:	2100      	movs	r1, #0
 8004682:	4668      	mov	r0, sp
 8004684:	f002 f8ff 	bl	8006886 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004688:	2288      	movs	r2, #136	; 0x88
 800468a:	2100      	movs	r1, #0
 800468c:	a816      	add	r0, sp, #88	; 0x58
 800468e:	f002 f8fa 	bl	8006886 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004696:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004698:	2210      	movs	r2, #16
 800469a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 800469c:	2201      	movs	r2, #1
 800469e:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80046a0:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80046a2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 80046a4:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046a6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80046a8:	2207      	movs	r2, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80046aa:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046ac:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80046ae:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80046b0:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80046b2:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80046b4:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046b6:	f7fd fc73 	bl	8001fa0 <HAL_RCC_OscConfig>
 80046ba:	b100      	cbz	r0, 80046be <SystemClock_Config+0x4e>
 80046bc:	e7fe      	b.n	80046bc <SystemClock_Config+0x4c>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046be:	220f      	movs	r2, #15
 80046c0:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046c2:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80046c4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046c6:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80046c8:	2104      	movs	r1, #4
 80046ca:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046cc:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80046d0:	f7fd fe8c 	bl	80023ec <HAL_RCC_ClockConfig>
 80046d4:	b100      	cbz	r0, 80046d8 <SystemClock_Config+0x68>
 80046d6:	e7fe      	b.n	80046d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80046d8:	4b09      	ldr	r3, [pc, #36]	; (8004700 <SystemClock_Config+0x90>)
                              |RCC_PERIPHCLK_DFSDM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80046da:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80046dc:	902a      	str	r0, [sp, #168]	; 0xa8
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80046de:	9036      	str	r0, [sp, #216]	; 0xd8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046e0:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80046e2:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046e4:	f7fe f844 	bl	8002770 <HAL_RCCEx_PeriphCLKConfig>
 80046e8:	b100      	cbz	r0, 80046ec <SystemClock_Config+0x7c>
 80046ea:	e7fe      	b.n	80046ea <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80046ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80046f0:	f7fd fb8a 	bl	8001e08 <HAL_PWREx_ControlVoltageScaling>
 80046f4:	b100      	cbz	r0, 80046f8 <SystemClock_Config+0x88>
 80046f6:	e7fe      	b.n	80046f6 <SystemClock_Config+0x86>
  {
    Error_Handler();
  }
}
 80046f8:	b039      	add	sp, #228	; 0xe4
 80046fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80046fe:	bf00      	nop
 8004700:	00010042 	.word	0x00010042

08004704 <main>:
{
 8004704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	f5ad 5d30 	sub.w	sp, sp, #11264	; 0x2c00
 800470c:	b082      	sub	sp, #8
  int32_t input_buf_l[NN * 2] = { 0 };
 800470e:	f50d 55e0 	add.w	r5, sp, #7168	; 0x1c00
 8004712:	3508      	adds	r5, #8
 8004714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004718:	2100      	movs	r1, #0
  volatile uint16_t dac_out_buf_a[NN * 2] = { 0 };
 800471a:	ac02      	add	r4, sp, #8
  int32_t input_buf_l[NN * 2] = { 0 };
 800471c:	4628      	mov	r0, r5
 800471e:	f002 f8b2 	bl	8006886 <memset>
  volatile uint16_t dac_out_buf_b[NN * 2] = { 0 };
 8004722:	f60d 0608 	addw	r6, sp, #2056	; 0x808
  volatile uint16_t dac_out_buf_a[NN * 2] = { 0 };
 8004726:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800472a:	2100      	movs	r1, #0
 800472c:	4620      	mov	r0, r4
 800472e:	f002 f8aa 	bl	8006886 <memset>
  volatile uint16_t dac_out_buf_b[NN * 2] = { 0 };
 8004732:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004736:	2100      	movs	r1, #0
 8004738:	4630      	mov	r0, r6
 800473a:	f002 f8a4 	bl	8006886 <memset>
  float32_t signal_buf[NN + NN / 2] = { 0.0f };  // NN/2 overlap
 800473e:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 8004742:	2100      	movs	r1, #0
 8004744:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8004748:	3008      	adds	r0, #8
 800474a:	f002 f89c 	bl	8006886 <memset>
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 800474e:	4f78      	ldr	r7, [pc, #480]	; (8004930 <main+0x22c>)
  HAL_Init();
 8004750:	f7fc fcb0 	bl	80010b4 <HAL_Init>
  SystemClock_Config();
 8004754:	f7ff ff8c 	bl	8004670 <SystemClock_Config>
  MX_GPIO_Init();
 8004758:	f7ff fd24 	bl	80041a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800475c:	f7ff fa62 	bl	8003c24 <MX_DMA_Init>
  MX_DAC1_Init();
 8004760:	f7fe ff9a 	bl	8003698 <MX_DAC1_Init>
  MX_TIM6_Init();
 8004764:	f000 fa22 	bl	8004bac <MX_TIM6_Init>
  MX_DFSDM1_Init();
 8004768:	f7ff f91a 	bl	80039a0 <MX_DFSDM1_Init>
  MX_CRC_Init();
 800476c:	f7fe ff68 	bl	8003640 <MX_CRC_Init>
  MX_I2C1_Init();
 8004770:	f7ff fd56 	bl	8004220 <MX_I2C1_Init>
  MX_Core_Init();
 8004774:	f7fe ff61 	bl	800363a <MX_Core_Init>
  f_s = SystemCoreClock / hdfsdm1_channel2.Init.OutputClock.Divider
 8004778:	4b6e      	ldr	r3, [pc, #440]	; (8004934 <main+0x230>)
 800477a:	4a6f      	ldr	r2, [pc, #444]	; (8004938 <main+0x234>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68d2      	ldr	r2, [r2, #12]
 8004780:	fbb3 f3f2 	udiv	r3, r3, r2
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 8004784:	6a3a      	ldr	r2, [r7, #32]
 8004786:	fbb3 f3f2 	udiv	r3, r3, r2
      / hdfsdm1_filter0.Init.FilterParam.IntOversampling;
 800478a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004790:	ee00 3a10 	vmov	s0, r3
  init_dsp(f_s);
 8004794:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8004798:	f7ff fbda 	bl	8003f50 <init_dsp>
  HAL_TIM_Base_Start(&htim6);
 800479c:	4867      	ldr	r0, [pc, #412]	; (800493c <main+0x238>)
 800479e:	f7fe f9cf 	bl	8002b40 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) dac_out_buf_a, NN * 2,
 80047a2:	f04f 0800 	mov.w	r8, #0
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80047a6:	2100      	movs	r1, #0
 80047a8:	4865      	ldr	r0, [pc, #404]	; (8004940 <main+0x23c>)
 80047aa:	f7fc fd8c 	bl	80012c6 <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) dac_out_buf_a, NN * 2,
 80047ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047b2:	4622      	mov	r2, r4
 80047b4:	4641      	mov	r1, r8
 80047b6:	f8cd 8000 	str.w	r8, [sp]
 80047ba:	4861      	ldr	r0, [pc, #388]	; (8004940 <main+0x23c>)
 80047bc:	f7fc fdac 	bl	8001318 <HAL_DAC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80047c0:	2110      	movs	r1, #16
 80047c2:	485f      	ldr	r0, [pc, #380]	; (8004940 <main+0x23c>)
 80047c4:	f7fc fd7f 	bl	80012c6 <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*) dac_out_buf_b, NN * 2,
 80047c8:	4632      	mov	r2, r6
 80047ca:	2110      	movs	r1, #16
 80047cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047d0:	f8cd 8000 	str.w	r8, [sp]
 80047d4:	485a      	ldr	r0, [pc, #360]	; (8004940 <main+0x23c>)
 80047d6:	f7fc fd9f 	bl	8001318 <HAL_DAC_Start_DMA>
  HAL_Delay(1);
 80047da:	2001      	movs	r0, #1
 80047dc:	f7fc fc8e 	bl	80010fc <HAL_Delay>
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, input_buf_l, NN * 2) != HAL_OK) {
 80047e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047e4:	4629      	mov	r1, r5
 80047e6:	4638      	mov	r0, r7
 80047e8:	f7fd f820 	bl	800182c <HAL_DFSDM_FilterRegularStart_DMA>
 80047ec:	b100      	cbz	r0, 80047f0 <main+0xec>
 80047ee:	e7fe      	b.n	80047ee <main+0xea>
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 80047f0:	2201      	movs	r2, #1
 80047f2:	4954      	ldr	r1, [pc, #336]	; (8004944 <main+0x240>)
 80047f4:	4854      	ldr	r0, [pc, #336]	; (8004948 <main+0x244>)
    if (new_pcm_data_l_a) {  // 1st half of the buffer
 80047f6:	4f55      	ldr	r7, [pc, #340]	; (800494c <main+0x248>)
      pre_emphasis(signal_buf + NN_HALF, angle);
 80047f8:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8004954 <main+0x250>
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 80047fc:	f7fe fa76 	bl	8002cec <HAL_UART_Receive_IT>
 8004800:	46ba      	mov	sl, r7
    if (new_pcm_data_l_a) {  // 1st half of the buffer
 8004802:	783b      	ldrb	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d042      	beq.n	800488e <main+0x18a>
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 8004808:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 800480c:	f50d 50c0 	add.w	r0, sp, #6144	; 0x1800
 8004810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004814:	3108      	adds	r1, #8
 8004816:	3008      	adds	r0, #8
 8004818:	f000 faba 	bl	8004d90 <arm_copy_f32>
 800481c:	f50d 51a0 	add.w	r1, sp, #5120	; 0x1400
 8004820:	3108      	adds	r1, #8
      for (uint32_t n = 0; n < NN; n++) {
 8004822:	2200      	movs	r2, #0
 8004824:	4608      	mov	r0, r1
        signal_buf[n+NN_HALF] = (float32_t) (input_buf_l[n] >> 9);
 8004826:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 800482a:	125b      	asrs	r3, r3, #9
 800482c:	ee07 3a90 	vmov	s15, r3
      for (uint32_t n = 0; n < NN; n++) {
 8004830:	3201      	adds	r2, #1
        signal_buf[n+NN_HALF] = (float32_t) (input_buf_l[n] >> 9);
 8004832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for (uint32_t n = 0; n < NN; n++) {
 8004836:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
        signal_buf[n+NN_HALF] = (float32_t) (input_buf_l[n] >> 9);
 800483a:	ece1 7a01 	vstmia	r1!, {s15}
      for (uint32_t n = 0; n < NN; n++) {
 800483e:	d1f2      	bne.n	8004826 <main+0x122>
      pre_emphasis(signal_buf + NN_HALF, angle);
 8004840:	f898 1000 	ldrb.w	r1, [r8]
 8004844:	f7ff ff00 	bl	8004648 <pre_emphasis>
      overlap_dsp(signal_buf, output_mode);
 8004848:	4b41      	ldr	r3, [pc, #260]	; (8004950 <main+0x24c>)
 800484a:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 800484e:	7819      	ldrb	r1, [r3, #0]
 8004850:	3008      	adds	r0, #8
 8004852:	f7ff fe71 	bl	8004538 <overlap_dsp>
 8004856:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 800485a:	3108      	adds	r1, #8
      for (uint32_t n = 0; n < NN; n++) {
 800485c:	2200      	movs	r2, #0
        dac_out_buf_a[n] = (uint16_t) (((int32_t) signal_buf[n] >> 4) + 2048); // 12bit quantization
 800485e:	ecf1 7a01 	vldmia	r1!, {s15}
 8004862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004866:	ee17 3a90 	vmov	r3, s15
 800486a:	111b      	asrs	r3, r3, #4
 800486c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004870:	b29b      	uxth	r3, r3
 8004872:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
        dac_out_buf_b[n] = dac_out_buf_a[n];
 8004876:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
      for (uint32_t n = 0; n < NN; n++) {
 8004880:	3201      	adds	r2, #1
 8004882:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004886:	d1ea      	bne.n	800485e <main+0x15a>
      new_pcm_data_l_a = false;
 8004888:	2300      	movs	r3, #0
 800488a:	f88a 3000 	strb.w	r3, [sl]
    if (new_pcm_data_l_b) {  // 2nd half of the buffer
 800488e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8004958 <main+0x254>
 8004892:	f899 3000 	ldrb.w	r3, [r9]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d044      	beq.n	8004924 <main+0x220>
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 800489a:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 800489e:	f50d 50c0 	add.w	r0, sp, #6144	; 0x1800
 80048a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048a6:	3108      	adds	r1, #8
 80048a8:	3008      	adds	r0, #8
 80048aa:	f000 fa71 	bl	8004d90 <arm_copy_f32>
 80048ae:	f50d 51a0 	add.w	r1, sp, #5120	; 0x1400
 80048b2:	3108      	adds	r1, #8
 80048b4:	2200      	movs	r2, #0
 80048b6:	4608      	mov	r0, r1
        signal_buf[n+NN_HALF] = (float32_t) (input_buf_l[NN+n] >> 9);
 80048b8:	18ab      	adds	r3, r5, r2
 80048ba:	3204      	adds	r2, #4
 80048bc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80048c0:	125b      	asrs	r3, r3, #9
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for (uint32_t n = 0; n < NN; n++) {
 80048ca:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
        signal_buf[n+NN_HALF] = (float32_t) (input_buf_l[NN+n] >> 9);
 80048ce:	ece1 7a01 	vstmia	r1!, {s15}
      for (uint32_t n = 0; n < NN; n++) {
 80048d2:	d1f1      	bne.n	80048b8 <main+0x1b4>
      pre_emphasis(signal_buf + NN_HALF, angle);
 80048d4:	f898 1000 	ldrb.w	r1, [r8]
 80048d8:	f7ff feb6 	bl	8004648 <pre_emphasis>
      overlap_dsp(signal_buf, output_mode);
 80048dc:	4b1c      	ldr	r3, [pc, #112]	; (8004950 <main+0x24c>)
 80048de:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 80048e2:	7819      	ldrb	r1, [r3, #0]
 80048e4:	3008      	adds	r0, #8
 80048e6:	f7ff fe27 	bl	8004538 <overlap_dsp>
 80048ea:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 80048ee:	3108      	adds	r1, #8
 80048f0:	f44f 7200 	mov.w	r2, #512	; 0x200
            (uint16_t) (((int32_t) signal_buf[n] >> 4) + 2048); // 12bit quantization
 80048f4:	ecf1 7a01 	vldmia	r1!, {s15}
 80048f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048fc:	ee17 3a90 	vmov	r3, s15
 8004900:	111b      	asrs	r3, r3, #4
 8004902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004906:	b29b      	uxth	r3, r3
        dac_out_buf_a[n_nn] =
 8004908:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
        dac_out_buf_b[n_nn] = dac_out_buf_a[n_nn];
 800490c:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 8004910:	b29b      	uxth	r3, r3
 8004912:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8004916:	3201      	adds	r2, #1
      for (uint32_t n = 0; n < NN; n++) {
 8004918:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800491c:	d1ea      	bne.n	80048f4 <main+0x1f0>
      new_pcm_data_l_b = false;
 800491e:	2300      	movs	r3, #0
 8004920:	f889 3000 	strb.w	r3, [r9]
    dump();
 8004924:	f7ff fe3e 	bl	80045a4 <dump>
  MX_Core_Process();
 8004928:	f7fe fe89 	bl	800363e <MX_Core_Process>
    if (new_pcm_data_l_a) {  // 1st half of the buffer
 800492c:	e769      	b.n	8004802 <main+0xfe>
 800492e:	bf00      	nop
 8004930:	2000b6cc 	.word	0x2000b6cc
 8004934:	20000018 	.word	0x20000018
 8004938:	2000b83c 	.word	0x2000b83c
 800493c:	2000b918 	.word	0x2000b918
 8004940:	2000b628 	.word	0x2000b628
 8004944:	2000b914 	.word	0x2000b914
 8004948:	2000b9a0 	.word	0x2000b9a0
 800494c:	20007768 	.word	0x20007768
 8004950:	20000013 	.word	0x20000013
 8004954:	20000010 	.word	0x20000010
 8004958:	20007769 	.word	0x20007769

0800495c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
 * @param  hdfsdm_filter DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
  if (!new_pcm_data_l_a && (hdfsdm_filter == &hdfsdm1_filter0)) {
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>)
 800495e:	781a      	ldrb	r2, [r3, #0]
 8004960:	b922      	cbnz	r2, 800496c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x10>
 8004962:	4a05      	ldr	r2, [pc, #20]	; (8004978 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8004964:	4290      	cmp	r0, r2
    new_pcm_data_l_a = true;  // ready for 1st half of the buffer
 8004966:	bf04      	itt	eq
 8004968:	2201      	moveq	r2, #1
 800496a:	701a      	strbeq	r2, [r3, #0]
  }
  if (!new_pcm_data_r_a && (hdfsdm_filter == &hdfsdm1_filter1)) {
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x20>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20007768 	.word	0x20007768
 8004978:	2000b6cc 	.word	0x2000b6cc
 800497c:	2000776a 	.word	0x2000776a

08004980 <HAL_DFSDM_FilterRegConvCpltCallback>:
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
  if (!new_pcm_data_l_b && (hdfsdm_filter == &hdfsdm1_filter0)) {
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>)
 8004982:	781a      	ldrb	r2, [r3, #0]
 8004984:	b922      	cbnz	r2, 8004990 <HAL_DFSDM_FilterRegConvCpltCallback+0x10>
 8004986:	4a05      	ldr	r2, [pc, #20]	; (800499c <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8004988:	4290      	cmp	r0, r2
    new_pcm_data_l_b = true;  // ready for 2nd half of the buffer
 800498a:	bf04      	itt	eq
 800498c:	2201      	moveq	r2, #1
 800498e:	701a      	strbeq	r2, [r3, #0]
  }
  if (!new_pcm_data_r_b && (hdfsdm_filter == &hdfsdm1_filter1)) {
 8004990:	4b03      	ldr	r3, [pc, #12]	; (80049a0 <HAL_DFSDM_FilterRegConvCpltCallback+0x20>)
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20007769 	.word	0x20007769
 800499c:	2000b6cc 	.word	0x2000b6cc
 80049a0:	2000776b 	.word	0x2000776b

080049a4 <_write>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
int _write(int file, char *ptr, int len) {
 80049a4:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295
int _write(int file, char *ptr, int len) {
 80049aa:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 80049ac:	4802      	ldr	r0, [pc, #8]	; (80049b8 <_write+0x14>)
 80049ae:	b292      	uxth	r2, r2
 80049b0:	f7fe fd87 	bl	80034c2 <HAL_UART_Transmit>
  return len;
}
 80049b4:	4620      	mov	r0, r4
 80049b6:	bd10      	pop	{r4, pc}
 80049b8:	2000b9a0 	.word	0x2000b9a0

080049bc <HAL_GPIO_EXTI_Callback>:

//  (This func is commented out: for a debug purpose only)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80049bc:	4770      	bx	lr
	...

080049c0 <HAL_UART_RxCpltCallback>:
 * One-byte command reception from an application processor
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
  char cmd;

  cmd = rxbuf[0];
 80049c0:	4b23      	ldr	r3, [pc, #140]	; (8004a50 <HAL_UART_RxCpltCallback+0x90>)
 80049c2:	781b      	ldrb	r3, [r3, #0]

  switch (cmd) {
 80049c4:	2b63      	cmp	r3, #99	; 0x63
 80049c6:	d036      	beq.n	8004a36 <HAL_UART_RxCpltCallback+0x76>
 80049c8:	d815      	bhi.n	80049f6 <HAL_UART_RxCpltCallback+0x36>
 80049ca:	2b52      	cmp	r3, #82	; 0x52
 80049cc:	d037      	beq.n	8004a3e <HAL_UART_RxCpltCallback+0x7e>
 80049ce:	d80a      	bhi.n	80049e6 <HAL_UART_RxCpltCallback+0x26>
 80049d0:	2b4c      	cmp	r3, #76	; 0x4c
 80049d2:	d02b      	beq.n	8004a2c <HAL_UART_RxCpltCallback+0x6c>
 80049d4:	2b50      	cmp	r3, #80	; 0x50
 80049d6:	d021      	beq.n	8004a1c <HAL_UART_RxCpltCallback+0x5c>
  case 't':
    debug_output = ELAPSED_TIME;
    break;
    // The others
  default:
    output_mode = (mode) (cmd - 0x30);
 80049d8:	4a1e      	ldr	r2, [pc, #120]	; (8004a54 <HAL_UART_RxCpltCallback+0x94>)
 80049da:	3b30      	subs	r3, #48	; 0x30
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	7013      	strb	r3, [r2, #0]
    printing = true;
 80049e0:	2201      	movs	r2, #1
 80049e2:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <HAL_UART_RxCpltCallback+0x98>)
 80049e4:	e01c      	b.n	8004a20 <HAL_UART_RxCpltCallback+0x60>
  switch (cmd) {
 80049e6:	2b5d      	cmp	r3, #93	; 0x5d
 80049e8:	d02e      	beq.n	8004a48 <HAL_UART_RxCpltCallback+0x88>
 80049ea:	2b62      	cmp	r3, #98	; 0x62
 80049ec:	d029      	beq.n	8004a42 <HAL_UART_RxCpltCallback+0x82>
 80049ee:	2b5b      	cmp	r3, #91	; 0x5b
 80049f0:	d1f2      	bne.n	80049d8 <HAL_UART_RxCpltCallback+0x18>
    beam_forming_mode = LEFT_MIC_ONLY;
 80049f2:	2202      	movs	r2, #2
 80049f4:	e026      	b.n	8004a44 <HAL_UART_RxCpltCallback+0x84>
  switch (cmd) {
 80049f6:	2b6c      	cmp	r3, #108	; 0x6c
 80049f8:	d01b      	beq.n	8004a32 <HAL_UART_RxCpltCallback+0x72>
 80049fa:	d807      	bhi.n	8004a0c <HAL_UART_RxCpltCallback+0x4c>
 80049fc:	2b65      	cmp	r3, #101	; 0x65
 80049fe:	f04f 0201 	mov.w	r2, #1
 8004a02:	d01f      	beq.n	8004a44 <HAL_UART_RxCpltCallback+0x84>
 8004a04:	2b66      	cmp	r3, #102	; 0x66
 8004a06:	d1e7      	bne.n	80049d8 <HAL_UART_RxCpltCallback+0x18>
    debug_output = ELAPSED_TIME;
 8004a08:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <HAL_UART_RxCpltCallback+0x9c>)
 8004a0a:	e009      	b.n	8004a20 <HAL_UART_RxCpltCallback+0x60>
  switch (cmd) {
 8004a0c:	2b72      	cmp	r3, #114	; 0x72
 8004a0e:	d014      	beq.n	8004a3a <HAL_UART_RxCpltCallback+0x7a>
 8004a10:	2b74      	cmp	r3, #116	; 0x74
 8004a12:	d01b      	beq.n	8004a4c <HAL_UART_RxCpltCallback+0x8c>
 8004a14:	2b70      	cmp	r3, #112	; 0x70
 8004a16:	d1df      	bne.n	80049d8 <HAL_UART_RxCpltCallback+0x18>
    pre_emphasis_enabled = false;
 8004a18:	2200      	movs	r2, #0
 8004a1a:	e000      	b.n	8004a1e <HAL_UART_RxCpltCallback+0x5e>
    pre_emphasis_enabled = true;
 8004a1c:	2201      	movs	r2, #1
    pre_emphasis_enabled = false;
 8004a1e:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <HAL_UART_RxCpltCallback+0xa0>)
    printing = true;
 8004a20:	701a      	strb	r2, [r3, #0]
    break;
  }

  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 8004a22:	490b      	ldr	r1, [pc, #44]	; (8004a50 <HAL_UART_RxCpltCallback+0x90>)
 8004a24:	480f      	ldr	r0, [pc, #60]	; (8004a64 <HAL_UART_RxCpltCallback+0xa4>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	f7fe b960 	b.w	8002cec <HAL_UART_Receive_IT>
    angle = LEFT2;
 8004a2c:	2200      	movs	r2, #0
    angle = RIGHT2;
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <HAL_UART_RxCpltCallback+0xa8>)
 8004a30:	e7f6      	b.n	8004a20 <HAL_UART_RxCpltCallback+0x60>
    angle = LEFT;
 8004a32:	2201      	movs	r2, #1
 8004a34:	e7fb      	b.n	8004a2e <HAL_UART_RxCpltCallback+0x6e>
    angle = CENTER;
 8004a36:	2202      	movs	r2, #2
 8004a38:	e7f9      	b.n	8004a2e <HAL_UART_RxCpltCallback+0x6e>
    angle = RIGHT;
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	e7f7      	b.n	8004a2e <HAL_UART_RxCpltCallback+0x6e>
    angle = RIGHT2;
 8004a3e:	2204      	movs	r2, #4
 8004a40:	e7f5      	b.n	8004a2e <HAL_UART_RxCpltCallback+0x6e>
    beam_forming_mode = BROADSIDE;
 8004a42:	2200      	movs	r2, #0
    beam_forming_mode = RIGHT_MIC_ONLY;
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <HAL_UART_RxCpltCallback+0xac>)
 8004a46:	e7eb      	b.n	8004a20 <HAL_UART_RxCpltCallback+0x60>
 8004a48:	2203      	movs	r2, #3
 8004a4a:	e7fb      	b.n	8004a44 <HAL_UART_RxCpltCallback+0x84>
    debug_output = ELAPSED_TIME;
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	e7db      	b.n	8004a08 <HAL_UART_RxCpltCallback+0x48>
 8004a50:	2000b914 	.word	0x2000b914
 8004a54:	20000013 	.word	0x20000013
 8004a58:	20007770 	.word	0x20007770
 8004a5c:	20000012 	.word	0x20000012
 8004a60:	20000014 	.word	0x20000014
 8004a64:	2000b9a0 	.word	0x2000b9a0
 8004a68:	20000010 	.word	0x20000010
 8004a6c:	20000011 	.word	0x20000011

08004a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a70:	e7fe      	b.n	8004a70 <Error_Handler>
	...

08004a74 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a74:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <HAL_MspInit+0x2c>)
 8004a76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a78:	f042 0201 	orr.w	r2, r2, #1
 8004a7c:	661a      	str	r2, [r3, #96]	; 0x60
 8004a7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8004a80:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a82:	f002 0201 	and.w	r2, r2, #1
 8004a86:	9200      	str	r2, [sp, #0]
 8004a88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a90:	659a      	str	r2, [r3, #88]	; 0x58
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a9c:	b002      	add	sp, #8
 8004a9e:	4770      	bx	lr
 8004aa0:	40021000 	.word	0x40021000

08004aa4 <SVC_Handler>:
 8004aa4:	4770      	bx	lr

08004aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004aa6:	4770      	bx	lr

08004aa8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004aa8:	f7fc bb1a 	b.w	80010e0 <HAL_IncTick>

08004aac <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8004aac:	4801      	ldr	r0, [pc, #4]	; (8004ab4 <DMA1_Channel3_IRQHandler+0x8>)
 8004aae:	f7fc bfd5 	b.w	8001a5c <HAL_DMA_IRQHandler>
 8004ab2:	bf00      	nop
 8004ab4:	2000b63c 	.word	0x2000b63c

08004ab8 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8004ab8:	4801      	ldr	r0, [pc, #4]	; (8004ac0 <DMA1_Channel4_IRQHandler+0x8>)
 8004aba:	f7fc bfcf 	b.w	8001a5c <HAL_DMA_IRQHandler>
 8004abe:	bf00      	nop
 8004ac0:	2000b7a0 	.word	0x2000b7a0

08004ac4 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8004ac4:	4801      	ldr	r0, [pc, #4]	; (8004acc <DMA1_Channel5_IRQHandler+0x8>)
 8004ac6:	f7fc bfc9 	b.w	8001a5c <HAL_DMA_IRQHandler>
 8004aca:	bf00      	nop
 8004acc:	2000b758 	.word	0x2000b758

08004ad0 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004ad0:	4801      	ldr	r0, [pc, #4]	; (8004ad8 <DMA1_Channel7_IRQHandler+0x8>)
 8004ad2:	f7fc bfc3 	b.w	8001a5c <HAL_DMA_IRQHandler>
 8004ad6:	bf00      	nop
 8004ad8:	2000b958 	.word	0x2000b958

08004adc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004adc:	4801      	ldr	r0, [pc, #4]	; (8004ae4 <USART2_IRQHandler+0x8>)
 8004ade:	f7fe ba33 	b.w	8002f48 <HAL_UART_IRQHandler>
 8004ae2:	bf00      	nop
 8004ae4:	2000b9a0 	.word	0x2000b9a0

08004ae8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004ae8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004aec:	f7fd b8dc 	b.w	8001ca8 <HAL_GPIO_EXTI_IRQHandler>

08004af0 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8004af0:	4801      	ldr	r0, [pc, #4]	; (8004af8 <DMA2_Channel5_IRQHandler+0x8>)
 8004af2:	f7fc bfb3 	b.w	8001a5c <HAL_DMA_IRQHandler>
 8004af6:	bf00      	nop
 8004af8:	2000b684 	.word	0x2000b684

08004afc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	460e      	mov	r6, r1
 8004b00:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b02:	460c      	mov	r4, r1
 8004b04:	1ba3      	subs	r3, r4, r6
 8004b06:	429d      	cmp	r5, r3
 8004b08:	dc01      	bgt.n	8004b0e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8004b0e:	f3af 8000 	nop.w
 8004b12:	f804 0b01 	strb.w	r0, [r4], #1
 8004b16:	e7f5      	b.n	8004b04 <_read+0x8>

08004b18 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004b18:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <_sbrk+0x2c>)
 8004b1c:	6819      	ldr	r1, [r3, #0]
{
 8004b1e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004b20:	b909      	cbnz	r1, 8004b26 <_sbrk+0xe>
		heap_end = &end;
 8004b22:	4909      	ldr	r1, [pc, #36]	; (8004b48 <_sbrk+0x30>)
 8004b24:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8004b26:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004b28:	4669      	mov	r1, sp
 8004b2a:	4402      	add	r2, r0
 8004b2c:	428a      	cmp	r2, r1
 8004b2e:	d906      	bls.n	8004b3e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004b30:	f001 fe74 	bl	800681c <__errno>
 8004b34:	230c      	movs	r3, #12
 8004b36:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004b3e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004b40:	bd08      	pop	{r3, pc}
 8004b42:	bf00      	nop
 8004b44:	2000b5f4 	.word	0x2000b5f4
 8004b48:	2000ba1c 	.word	0x2000ba1c

08004b4c <_close>:

int _close(int file)
{
	return -1;
}
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	4770      	bx	lr

08004b52 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b56:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004b58:	2000      	movs	r0, #0
 8004b5a:	4770      	bx	lr

08004b5c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	4770      	bx	lr

08004b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004b60:	2000      	movs	r0, #0
 8004b62:	4770      	bx	lr

08004b64 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b64:	490f      	ldr	r1, [pc, #60]	; (8004ba4 <SystemInit+0x40>)
 8004b66:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004b6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <SystemInit+0x44>)
 8004b74:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004b76:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8004b78:	f042 0201 	orr.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8004b7e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8004b86:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b90:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b98:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004b9a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ba0:	608b      	str	r3, [r1, #8]
 8004ba2:	4770      	bx	lr
 8004ba4:	e000ed00 	.word	0xe000ed00
 8004ba8:	40021000 	.word	0x40021000

08004bac <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
 8004bae:	480f      	ldr	r0, [pc, #60]	; (8004bec <MX_TIM6_Init+0x40>)
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <MX_TIM6_Init+0x44>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bb2:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 0;
 8004bb4:	e880 0018 	stmia.w	r0, {r3, r4}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 4095;
 8004bb8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004bbc:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004bbe:	2380      	movs	r3, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bc0:	9401      	str	r4, [sp, #4]
 8004bc2:	9402      	str	r4, [sp, #8]
 8004bc4:	9403      	str	r4, [sp, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc6:	6084      	str	r4, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004bc8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004bca:	f7fe f839 	bl	8002c40 <HAL_TIM_Base_Init>
 8004bce:	b108      	cbz	r0, 8004bd4 <MX_TIM6_Init+0x28>
  {
    Error_Handler();
 8004bd0:	f7ff ff4e 	bl	8004a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004bd4:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004bd6:	a901      	add	r1, sp, #4
 8004bd8:	4804      	ldr	r0, [pc, #16]	; (8004bec <MX_TIM6_Init+0x40>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004bda:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bdc:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004bde:	f7fe f849 	bl	8002c74 <HAL_TIMEx_MasterConfigSynchronization>
 8004be2:	b108      	cbz	r0, 8004be8 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8004be4:	f7ff ff44 	bl	8004a70 <Error_Handler>
  }

}
 8004be8:	b004      	add	sp, #16
 8004bea:	bd10      	pop	{r4, pc}
 8004bec:	2000b918 	.word	0x2000b918
 8004bf0:	40001000 	.word	0x40001000

08004bf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8004bf4:	6802      	ldr	r2, [r0, #0]
 8004bf6:	4b08      	ldr	r3, [pc, #32]	; (8004c18 <HAL_TIM_Base_MspInit+0x24>)
 8004bf8:	429a      	cmp	r2, r3
{
 8004bfa:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM6)
 8004bfc:	d10a      	bne.n	8004c14 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004bfe:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004c02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c04:	f042 0210 	orr.w	r2, r2, #16
 8004c08:	659a      	str	r2, [r3, #88]	; 0x58
 8004c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	9301      	str	r3, [sp, #4]
 8004c12:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004c14:	b002      	add	sp, #8
 8004c16:	4770      	bx	lr
 8004c18:	40001000 	.word	0x40001000

08004c1c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004c1c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8004c1e:	480c      	ldr	r0, [pc, #48]	; (8004c50 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 460800;
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <MX_USART2_UART_Init+0x38>)
 8004c22:	f44f 2ee1 	mov.w	lr, #460800	; 0x70800
 8004c26:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004c2a:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c30:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c32:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004c34:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c36:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c38:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c3a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c3c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c3e:	f7fe fcc9 	bl	80035d4 <HAL_UART_Init>
 8004c42:	b118      	cbz	r0, 8004c4c <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8004c44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004c48:	f7ff bf12 	b.w	8004a70 <Error_Handler>
 8004c4c:	bd08      	pop	{r3, pc}
 8004c4e:	bf00      	nop
 8004c50:	2000b9a0 	.word	0x2000b9a0
 8004c54:	40004400 	.word	0x40004400

08004c58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	4605      	mov	r5, r0
 8004c5c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c5e:	2214      	movs	r2, #20
 8004c60:	2100      	movs	r1, #0
 8004c62:	a803      	add	r0, sp, #12
 8004c64:	f001 fe0f 	bl	8006886 <memset>
  if(uartHandle->Instance==USART2)
 8004c68:	682a      	ldr	r2, [r5, #0]
 8004c6a:	4b22      	ldr	r3, [pc, #136]	; (8004cf4 <HAL_UART_MspInit+0x9c>)
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d13e      	bne.n	8004cee <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c70:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c74:	2602      	movs	r6, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8004c78:	4c1f      	ldr	r4, [pc, #124]	; (8004cf8 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c7a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004c7e:	659a      	str	r2, [r3, #88]	; 0x58
 8004c80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c82:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004c86:	9201      	str	r2, [sp, #4]
 8004c88:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c94:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	9302      	str	r3, [sp, #8]
 8004c9c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004c9e:	230c      	movs	r3, #12
 8004ca0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004caa:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cac:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004cae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cb0:	f7fc ff1e 	bl	8001af0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <HAL_UART_MspInit+0xa4>)
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8004cb6:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cba:	2310      	movs	r3, #16
 8004cbc:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cbe:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cc0:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004cc2:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cc4:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cc6:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cc8:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cca:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004ccc:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cce:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004cd0:	f7fc fdfc 	bl	80018cc <HAL_DMA_Init>
 8004cd4:	b108      	cbz	r0, 8004cda <HAL_UART_MspInit+0x82>
    {
      Error_Handler();
 8004cd6:	f7ff fecb 	bl	8004a70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004cde:	66ac      	str	r4, [r5, #104]	; 0x68
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ce0:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004ce2:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ce4:	f7fc fa2a 	bl	800113c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004ce8:	2026      	movs	r0, #38	; 0x26
 8004cea:	f7fc fa5b 	bl	80011a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004cee:	b008      	add	sp, #32
 8004cf0:	bd70      	pop	{r4, r5, r6, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40004400 	.word	0x40004400
 8004cf8:	2000b958 	.word	0x2000b958
 8004cfc:	40020080 	.word	0x40020080

08004d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004d04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004d06:	e003      	b.n	8004d10 <LoopCopyDataInit>

08004d08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004d0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004d0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004d0e:	3104      	adds	r1, #4

08004d10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004d10:	480b      	ldr	r0, [pc, #44]	; (8004d40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004d12:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004d14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004d16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004d18:	d3f6      	bcc.n	8004d08 <CopyDataInit>
	ldr	r2, =_sbss
 8004d1a:	4a0b      	ldr	r2, [pc, #44]	; (8004d48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004d1c:	e002      	b.n	8004d24 <LoopFillZerobss>

08004d1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004d1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004d20:	f842 3b04 	str.w	r3, [r2], #4

08004d24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004d24:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <LoopForever+0x16>)
	cmp	r2, r3
 8004d26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004d28:	d3f9      	bcc.n	8004d1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004d2a:	f7ff ff1b 	bl	8004b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d2e:	f001 fd7b 	bl	8006828 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004d32:	f7ff fce7 	bl	8004704 <main>

08004d36 <LoopForever>:

LoopForever:
    b LoopForever
 8004d36:	e7fe      	b.n	8004d36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004d38:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004d3c:	0801ea80 	.word	0x0801ea80
	ldr	r0, =_sdata
 8004d40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004d44:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8004d48:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8004d4c:	2000ba1c 	.word	0x2000ba1c

08004d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d50:	e7fe      	b.n	8004d50 <ADC1_2_IRQHandler>
	...

08004d54 <arm_fill_f32>:
 8004d54:	b410      	push	{r4}
 8004d56:	088c      	lsrs	r4, r1, #2
 8004d58:	d010      	beq.n	8004d7c <arm_fill_f32+0x28>
 8004d5a:	f100 0310 	add.w	r3, r0, #16
 8004d5e:	4622      	mov	r2, r4
 8004d60:	3a01      	subs	r2, #1
 8004d62:	ed03 0a04 	vstr	s0, [r3, #-16]
 8004d66:	ed03 0a03 	vstr	s0, [r3, #-12]
 8004d6a:	ed03 0a02 	vstr	s0, [r3, #-8]
 8004d6e:	ed03 0a01 	vstr	s0, [r3, #-4]
 8004d72:	f103 0310 	add.w	r3, r3, #16
 8004d76:	d1f3      	bne.n	8004d60 <arm_fill_f32+0xc>
 8004d78:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8004d7c:	f011 0103 	ands.w	r1, r1, #3
 8004d80:	d003      	beq.n	8004d8a <arm_fill_f32+0x36>
 8004d82:	3901      	subs	r1, #1
 8004d84:	eca0 0a01 	vstmia	r0!, {s0}
 8004d88:	d1fb      	bne.n	8004d82 <arm_fill_f32+0x2e>
 8004d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <arm_copy_f32>:
 8004d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d94:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8004d98:	d01e      	beq.n	8004dd8 <arm_copy_f32+0x48>
 8004d9a:	f100 0410 	add.w	r4, r0, #16
 8004d9e:	f101 0310 	add.w	r3, r1, #16
 8004da2:	4645      	mov	r5, r8
 8004da4:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8004da8:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 8004dac:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8004db0:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8004db4:	f843 6c04 	str.w	r6, [r3, #-4]
 8004db8:	3d01      	subs	r5, #1
 8004dba:	f843 cc10 	str.w	ip, [r3, #-16]
 8004dbe:	f843 ec0c 	str.w	lr, [r3, #-12]
 8004dc2:	f843 7c08 	str.w	r7, [r3, #-8]
 8004dc6:	f104 0410 	add.w	r4, r4, #16
 8004dca:	f103 0310 	add.w	r3, r3, #16
 8004dce:	d1e9      	bne.n	8004da4 <arm_copy_f32+0x14>
 8004dd0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004dd4:	4440      	add	r0, r8
 8004dd6:	4441      	add	r1, r8
 8004dd8:	f012 0203 	ands.w	r2, r2, #3
 8004ddc:	d005      	beq.n	8004dea <arm_copy_f32+0x5a>
 8004dde:	f850 3b04 	ldr.w	r3, [r0], #4
 8004de2:	f841 3b04 	str.w	r3, [r1], #4
 8004de6:	3a01      	subs	r2, #1
 8004de8:	d1f9      	bne.n	8004dde <arm_copy_f32+0x4e>
 8004dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dee:	bf00      	nop

08004df0 <arm_mean_f32>:
 8004df0:	b430      	push	{r4, r5}
 8004df2:	088d      	lsrs	r5, r1, #2
 8004df4:	eddf 7a17 	vldr	s15, [pc, #92]	; 8004e54 <arm_mean_f32+0x64>
 8004df8:	d018      	beq.n	8004e2c <arm_mean_f32+0x3c>
 8004dfa:	f100 0310 	add.w	r3, r0, #16
 8004dfe:	462c      	mov	r4, r5
 8004e00:	ed13 7a04 	vldr	s14, [r3, #-16]
 8004e04:	ed53 5a03 	vldr	s11, [r3, #-12]
 8004e08:	ed13 6a02 	vldr	s12, [r3, #-8]
 8004e0c:	ed53 6a01 	vldr	s13, [r3, #-4]
 8004e10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e14:	3c01      	subs	r4, #1
 8004e16:	ee77 7a25 	vadd.f32	s15, s14, s11
 8004e1a:	f103 0310 	add.w	r3, r3, #16
 8004e1e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e26:	d1eb      	bne.n	8004e00 <arm_mean_f32+0x10>
 8004e28:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8004e2c:	f011 0303 	ands.w	r3, r1, #3
 8004e30:	d005      	beq.n	8004e3e <arm_mean_f32+0x4e>
 8004e32:	ecb0 7a01 	vldmia	r0!, {s14}
 8004e36:	3b01      	subs	r3, #1
 8004e38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e3c:	d1f9      	bne.n	8004e32 <arm_mean_f32+0x42>
 8004e3e:	ee07 1a10 	vmov	s14, r1
 8004e42:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e46:	bc30      	pop	{r4, r5}
 8004e48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e4c:	edc2 6a00 	vstr	s13, [r2]
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	00000000 	.word	0x00000000

08004e58 <arm_rfft_fast_init_f32>:
 8004e58:	084b      	lsrs	r3, r1, #1
 8004e5a:	2b80      	cmp	r3, #128	; 0x80
 8004e5c:	b410      	push	{r4}
 8004e5e:	8201      	strh	r1, [r0, #16]
 8004e60:	8003      	strh	r3, [r0, #0]
 8004e62:	d046      	beq.n	8004ef2 <arm_rfft_fast_init_f32+0x9a>
 8004e64:	d916      	bls.n	8004e94 <arm_rfft_fast_init_f32+0x3c>
 8004e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e6a:	d03c      	beq.n	8004ee6 <arm_rfft_fast_init_f32+0x8e>
 8004e6c:	d928      	bls.n	8004ec0 <arm_rfft_fast_init_f32+0x68>
 8004e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e72:	d01f      	beq.n	8004eb4 <arm_rfft_fast_init_f32+0x5c>
 8004e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e78:	d112      	bne.n	8004ea0 <arm_rfft_fast_init_f32+0x48>
 8004e7a:	4920      	ldr	r1, [pc, #128]	; (8004efc <arm_rfft_fast_init_f32+0xa4>)
 8004e7c:	4a20      	ldr	r2, [pc, #128]	; (8004f00 <arm_rfft_fast_init_f32+0xa8>)
 8004e7e:	4b21      	ldr	r3, [pc, #132]	; (8004f04 <arm_rfft_fast_init_f32+0xac>)
 8004e80:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8004e84:	8184      	strh	r4, [r0, #12]
 8004e86:	6081      	str	r1, [r0, #8]
 8004e88:	6042      	str	r2, [r0, #4]
 8004e8a:	6143      	str	r3, [r0, #20]
 8004e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e90:	2000      	movs	r0, #0
 8004e92:	4770      	bx	lr
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d01c      	beq.n	8004ed2 <arm_rfft_fast_init_f32+0x7a>
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d006      	beq.n	8004eaa <arm_rfft_fast_init_f32+0x52>
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	d01d      	beq.n	8004edc <arm_rfft_fast_init_f32+0x84>
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	2438      	movs	r4, #56	; 0x38
 8004eac:	4916      	ldr	r1, [pc, #88]	; (8004f08 <arm_rfft_fast_init_f32+0xb0>)
 8004eae:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <arm_rfft_fast_init_f32+0xb4>)
 8004eb0:	4b17      	ldr	r3, [pc, #92]	; (8004f10 <arm_rfft_fast_init_f32+0xb8>)
 8004eb2:	e7e7      	b.n	8004e84 <arm_rfft_fast_init_f32+0x2c>
 8004eb4:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8004eb8:	4916      	ldr	r1, [pc, #88]	; (8004f14 <arm_rfft_fast_init_f32+0xbc>)
 8004eba:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <arm_rfft_fast_init_f32+0xc0>)
 8004ebc:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <arm_rfft_fast_init_f32+0xc4>)
 8004ebe:	e7e1      	b.n	8004e84 <arm_rfft_fast_init_f32+0x2c>
 8004ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec4:	d1ec      	bne.n	8004ea0 <arm_rfft_fast_init_f32+0x48>
 8004ec6:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8004eca:	4915      	ldr	r1, [pc, #84]	; (8004f20 <arm_rfft_fast_init_f32+0xc8>)
 8004ecc:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <arm_rfft_fast_init_f32+0xcc>)
 8004ece:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <arm_rfft_fast_init_f32+0xd0>)
 8004ed0:	e7d8      	b.n	8004e84 <arm_rfft_fast_init_f32+0x2c>
 8004ed2:	2430      	movs	r4, #48	; 0x30
 8004ed4:	4915      	ldr	r1, [pc, #84]	; (8004f2c <arm_rfft_fast_init_f32+0xd4>)
 8004ed6:	4a16      	ldr	r2, [pc, #88]	; (8004f30 <arm_rfft_fast_init_f32+0xd8>)
 8004ed8:	4b16      	ldr	r3, [pc, #88]	; (8004f34 <arm_rfft_fast_init_f32+0xdc>)
 8004eda:	e7d3      	b.n	8004e84 <arm_rfft_fast_init_f32+0x2c>
 8004edc:	2414      	movs	r4, #20
 8004ede:	4916      	ldr	r1, [pc, #88]	; (8004f38 <arm_rfft_fast_init_f32+0xe0>)
 8004ee0:	4a16      	ldr	r2, [pc, #88]	; (8004f3c <arm_rfft_fast_init_f32+0xe4>)
 8004ee2:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <arm_rfft_fast_init_f32+0xe8>)
 8004ee4:	e7ce      	b.n	8004e84 <arm_rfft_fast_init_f32+0x2c>
 8004ee6:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8004eea:	4916      	ldr	r1, [pc, #88]	; (8004f44 <arm_rfft_fast_init_f32+0xec>)
 8004eec:	4a16      	ldr	r2, [pc, #88]	; (8004f48 <arm_rfft_fast_init_f32+0xf0>)
 8004eee:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <arm_rfft_fast_init_f32+0xf4>)
 8004ef0:	e7c8      	b.n	8004e84 <arm_rfft_fast_init_f32+0x2c>
 8004ef2:	24d0      	movs	r4, #208	; 0xd0
 8004ef4:	4916      	ldr	r1, [pc, #88]	; (8004f50 <arm_rfft_fast_init_f32+0xf8>)
 8004ef6:	4a17      	ldr	r2, [pc, #92]	; (8004f54 <arm_rfft_fast_init_f32+0xfc>)
 8004ef8:	4b17      	ldr	r3, [pc, #92]	; (8004f58 <arm_rfft_fast_init_f32+0x100>)
 8004efa:	e7c3      	b.n	8004e84 <arm_rfft_fast_init_f32+0x2c>
 8004efc:	0801a108 	.word	0x0801a108
 8004f00:	0800aafc 	.word	0x0800aafc
 8004f04:	08010c6c 	.word	0x08010c6c
 8004f08:	0800ebfc 	.word	0x0800ebfc
 8004f0c:	0801bec8 	.word	0x0801bec8
 8004f10:	0801e3b8 	.word	0x0801e3b8
 8004f14:	080175ec 	.word	0x080175ec
 8004f18:	080154ec 	.word	0x080154ec
 8004f1c:	0800ec6c 	.word	0x0800ec6c
 8004f20:	0801e048 	.word	0x0801e048
 8004f24:	08014c6c 	.word	0x08014c6c
 8004f28:	0801c0c8 	.word	0x0801c0c8
 8004f2c:	080184a4 	.word	0x080184a4
 8004f30:	080174ec 	.word	0x080174ec
 8004f34:	0800eafc 	.word	0x0800eafc
 8004f38:	080183fc 	.word	0x080183fc
 8004f3c:	0801546c 	.word	0x0801546c
 8004f40:	08018424 	.word	0x08018424
 8004f44:	0801c8c8 	.word	0x0801c8c8
 8004f48:	08019108 	.word	0x08019108
 8004f4c:	0801cc48 	.word	0x0801cc48
 8004f50:	0801e5b8 	.word	0x0801e5b8
 8004f54:	08018d08 	.word	0x08018d08
 8004f58:	0801dc48 	.word	0x0801dc48

08004f5c <arm_rfft_fast_f32>:
 8004f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f60:	8a06      	ldrh	r6, [r0, #16]
 8004f62:	0876      	lsrs	r6, r6, #1
 8004f64:	4607      	mov	r7, r0
 8004f66:	4615      	mov	r5, r2
 8004f68:	8006      	strh	r6, [r0, #0]
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d15c      	bne.n	800502a <arm_rfft_fast_f32+0xce>
 8004f70:	461a      	mov	r2, r3
 8004f72:	2301      	movs	r3, #1
 8004f74:	f000 fbe4 	bl	8005740 <arm_cfft_f32>
 8004f78:	edd4 7a00 	vldr	s15, [r4]
 8004f7c:	ed94 7a01 	vldr	s14, [r4, #4]
 8004f80:	883e      	ldrh	r6, [r7, #0]
 8004f82:	6978      	ldr	r0, [r7, #20]
 8004f84:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004f88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f8c:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 8004f90:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004f94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f98:	3e01      	subs	r6, #1
 8004f9a:	ee26 7a83 	vmul.f32	s14, s13, s6
 8004f9e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004fa2:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8004fa6:	ed85 7a00 	vstr	s14, [r5]
 8004faa:	edc5 7a01 	vstr	s15, [r5, #4]
 8004fae:	3010      	adds	r0, #16
 8004fb0:	f105 0210 	add.w	r2, r5, #16
 8004fb4:	3b08      	subs	r3, #8
 8004fb6:	f104 0110 	add.w	r1, r4, #16
 8004fba:	ed93 7a02 	vldr	s14, [r3, #8]
 8004fbe:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004fc2:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004fc6:	edd3 3a03 	vldr	s7, [r3, #12]
 8004fca:	ed11 5a01 	vldr	s10, [r1, #-4]
 8004fce:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004fd2:	ee77 7a66 	vsub.f32	s15, s14, s13
 8004fd6:	ee77 4a26 	vadd.f32	s9, s14, s13
 8004fda:	ee33 4a85 	vadd.f32	s8, s7, s10
 8004fde:	ee66 6a27 	vmul.f32	s13, s12, s15
 8004fe2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004fe6:	ee35 5a63 	vsub.f32	s10, s10, s7
 8004fea:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004fee:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004ff2:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004ff6:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004ffa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004ffe:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8005002:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005006:	ee27 7a03 	vmul.f32	s14, s14, s6
 800500a:	3e01      	subs	r6, #1
 800500c:	ed02 7a02 	vstr	s14, [r2, #-8]
 8005010:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005014:	f1a3 0308 	sub.w	r3, r3, #8
 8005018:	f101 0108 	add.w	r1, r1, #8
 800501c:	f100 0008 	add.w	r0, r0, #8
 8005020:	f102 0208 	add.w	r2, r2, #8
 8005024:	d1c9      	bne.n	8004fba <arm_rfft_fast_f32+0x5e>
 8005026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800502a:	edd1 7a00 	vldr	s15, [r1]
 800502e:	edd1 6a01 	vldr	s13, [r1, #4]
 8005032:	6941      	ldr	r1, [r0, #20]
 8005034:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005038:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800503c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8005040:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005044:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005048:	3e01      	subs	r6, #1
 800504a:	ed82 7a00 	vstr	s14, [r2]
 800504e:	edc2 7a01 	vstr	s15, [r2, #4]
 8005052:	00f0      	lsls	r0, r6, #3
 8005054:	b3ee      	cbz	r6, 80050d2 <arm_rfft_fast_f32+0x176>
 8005056:	3808      	subs	r0, #8
 8005058:	f101 0e10 	add.w	lr, r1, #16
 800505c:	4420      	add	r0, r4
 800505e:	f104 0110 	add.w	r1, r4, #16
 8005062:	f102 0c10 	add.w	ip, r2, #16
 8005066:	ed90 7a02 	vldr	s14, [r0, #8]
 800506a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800506e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8005072:	ed90 4a03 	vldr	s8, [r0, #12]
 8005076:	ed11 5a01 	vldr	s10, [r1, #-4]
 800507a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800507e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8005082:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005086:	ee26 3a27 	vmul.f32	s6, s12, s15
 800508a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800508e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005092:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8005096:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800509a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800509e:	ee26 6a24 	vmul.f32	s12, s12, s9
 80050a2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80050a6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80050aa:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80050ae:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80050b2:	ee27 7a23 	vmul.f32	s14, s14, s7
 80050b6:	3e01      	subs	r6, #1
 80050b8:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80050bc:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80050c0:	f1a0 0008 	sub.w	r0, r0, #8
 80050c4:	f101 0108 	add.w	r1, r1, #8
 80050c8:	f10e 0e08 	add.w	lr, lr, #8
 80050cc:	f10c 0c08 	add.w	ip, ip, #8
 80050d0:	d1c9      	bne.n	8005066 <arm_rfft_fast_f32+0x10a>
 80050d2:	461a      	mov	r2, r3
 80050d4:	4629      	mov	r1, r5
 80050d6:	4638      	mov	r0, r7
 80050d8:	2301      	movs	r3, #1
 80050da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050de:	f000 bb2f 	b.w	8005740 <arm_cfft_f32>
 80050e2:	bf00      	nop

080050e4 <arm_cfft_radix8by2_f32>:
 80050e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e8:	ed2d 8b08 	vpush	{d8-d11}
 80050ec:	4607      	mov	r7, r0
 80050ee:	4608      	mov	r0, r1
 80050f0:	f8b7 e000 	ldrh.w	lr, [r7]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80050fa:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80050fe:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8005102:	f000 80b0 	beq.w	8005266 <arm_cfft_radix8by2_f32+0x182>
 8005106:	008b      	lsls	r3, r1, #2
 8005108:	3310      	adds	r3, #16
 800510a:	18c6      	adds	r6, r0, r3
 800510c:	3210      	adds	r2, #16
 800510e:	4443      	add	r3, r8
 8005110:	f100 0510 	add.w	r5, r0, #16
 8005114:	f108 0410 	add.w	r4, r8, #16
 8005118:	ed54 1a04 	vldr	s3, [r4, #-16]
 800511c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8005120:	ed13 4a04 	vldr	s8, [r3, #-16]
 8005124:	ed53 3a03 	vldr	s7, [r3, #-12]
 8005128:	ed53 5a02 	vldr	s11, [r3, #-8]
 800512c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8005130:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005134:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005138:	ed16 2a04 	vldr	s4, [r6, #-16]
 800513c:	ed56 2a03 	vldr	s5, [r6, #-12]
 8005140:	ed15 6a03 	vldr	s12, [r5, #-12]
 8005144:	ed15 7a01 	vldr	s14, [r5, #-4]
 8005148:	ed15 3a04 	vldr	s6, [r5, #-16]
 800514c:	ed56 0a02 	vldr	s1, [r6, #-8]
 8005150:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005154:	ed55 4a02 	vldr	s9, [r5, #-8]
 8005158:	ee73 ba21 	vadd.f32	s23, s6, s3
 800515c:	ee36 ba26 	vadd.f32	s22, s12, s13
 8005160:	ee37 aa27 	vadd.f32	s20, s14, s15
 8005164:	ee72 9a04 	vadd.f32	s19, s4, s8
 8005168:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800516c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8005170:	ee74 aa80 	vadd.f32	s21, s9, s0
 8005174:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8005178:	ed45 ba04 	vstr	s23, [r5, #-16]
 800517c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8005180:	ed45 aa02 	vstr	s21, [r5, #-8]
 8005184:	ed05 aa01 	vstr	s20, [r5, #-4]
 8005188:	ed06 8a01 	vstr	s16, [r6, #-4]
 800518c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005190:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005194:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005198:	ee76 6a66 	vsub.f32	s13, s12, s13
 800519c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80051a0:	ed12 6a03 	vldr	s12, [r2, #-12]
 80051a4:	ed52 2a04 	vldr	s5, [r2, #-16]
 80051a8:	ee33 3a61 	vsub.f32	s6, s6, s3
 80051ac:	ee34 4a42 	vsub.f32	s8, s8, s4
 80051b0:	ee26 8a86 	vmul.f32	s16, s13, s12
 80051b4:	ee24 2a06 	vmul.f32	s4, s8, s12
 80051b8:	ee63 1a22 	vmul.f32	s3, s6, s5
 80051bc:	ee24 4a22 	vmul.f32	s8, s8, s5
 80051c0:	ee23 3a06 	vmul.f32	s6, s6, s12
 80051c4:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80051c8:	ee23 6a86 	vmul.f32	s12, s7, s12
 80051cc:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80051d0:	ee36 6a04 	vadd.f32	s12, s12, s8
 80051d4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80051d8:	ee72 3a63 	vsub.f32	s7, s4, s7
 80051dc:	ee71 2a88 	vadd.f32	s5, s3, s16
 80051e0:	ed44 6a03 	vstr	s13, [r4, #-12]
 80051e4:	ed44 2a04 	vstr	s5, [r4, #-16]
 80051e8:	ed43 3a04 	vstr	s7, [r3, #-16]
 80051ec:	ed03 6a03 	vstr	s12, [r3, #-12]
 80051f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051f4:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80051f8:	ed12 7a01 	vldr	s14, [r2, #-4]
 80051fc:	ed52 5a02 	vldr	s11, [r2, #-8]
 8005200:	ee35 6a41 	vsub.f32	s12, s10, s2
 8005204:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8005208:	ee67 3a87 	vmul.f32	s7, s15, s14
 800520c:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005210:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8005214:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005218:	ee64 4a87 	vmul.f32	s9, s9, s14
 800521c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005220:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005224:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005228:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800522c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005230:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005234:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005238:	f1be 0e01 	subs.w	lr, lr, #1
 800523c:	ed44 5a02 	vstr	s11, [r4, #-8]
 8005240:	f105 0510 	add.w	r5, r5, #16
 8005244:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005248:	f106 0610 	add.w	r6, r6, #16
 800524c:	ed03 6a02 	vstr	s12, [r3, #-8]
 8005250:	ed03 7a01 	vstr	s14, [r3, #-4]
 8005254:	f102 0210 	add.w	r2, r2, #16
 8005258:	f104 0410 	add.w	r4, r4, #16
 800525c:	f103 0310 	add.w	r3, r3, #16
 8005260:	f47f af5a 	bne.w	8005118 <arm_cfft_radix8by2_f32+0x34>
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	b28c      	uxth	r4, r1
 8005268:	4621      	mov	r1, r4
 800526a:	2302      	movs	r3, #2
 800526c:	f000 ffdc 	bl	8006228 <arm_radix8_butterfly_f32>
 8005270:	ecbd 8b08 	vpop	{d8-d11}
 8005274:	4621      	mov	r1, r4
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	4640      	mov	r0, r8
 800527a:	2302      	movs	r3, #2
 800527c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005280:	f000 bfd2 	b.w	8006228 <arm_radix8_butterfly_f32>

08005284 <arm_cfft_radix8by4_f32>:
 8005284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005288:	ed2d 8b0a 	vpush	{d8-d12}
 800528c:	8802      	ldrh	r2, [r0, #0]
 800528e:	ed91 6a00 	vldr	s12, [r1]
 8005292:	b08f      	sub	sp, #60	; 0x3c
 8005294:	460f      	mov	r7, r1
 8005296:	0852      	lsrs	r2, r2, #1
 8005298:	6841      	ldr	r1, [r0, #4]
 800529a:	900c      	str	r0, [sp, #48]	; 0x30
 800529c:	0093      	lsls	r3, r2, #2
 800529e:	4638      	mov	r0, r7
 80052a0:	4418      	add	r0, r3
 80052a2:	4606      	mov	r6, r0
 80052a4:	9009      	str	r0, [sp, #36]	; 0x24
 80052a6:	4418      	add	r0, r3
 80052a8:	edd0 6a00 	vldr	s13, [r0]
 80052ac:	ed96 4a00 	vldr	s8, [r6]
 80052b0:	edd6 2a01 	vldr	s5, [r6, #4]
 80052b4:	edd0 7a01 	vldr	s15, [r0, #4]
 80052b8:	900a      	str	r0, [sp, #40]	; 0x28
 80052ba:	ee76 5a26 	vadd.f32	s11, s12, s13
 80052be:	4604      	mov	r4, r0
 80052c0:	4625      	mov	r5, r4
 80052c2:	441c      	add	r4, r3
 80052c4:	edd4 4a00 	vldr	s9, [r4]
 80052c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80052cc:	ed94 3a01 	vldr	s6, [r4, #4]
 80052d0:	9401      	str	r4, [sp, #4]
 80052d2:	ee35 5a84 	vadd.f32	s10, s11, s8
 80052d6:	4630      	mov	r0, r6
 80052d8:	ee35 5a24 	vadd.f32	s10, s10, s9
 80052dc:	463e      	mov	r6, r7
 80052de:	ee15 ea10 	vmov	lr, s10
 80052e2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80052e6:	f846 eb08 	str.w	lr, [r6], #8
 80052ea:	ee37 6a27 	vadd.f32	s12, s14, s15
 80052ee:	ed90 5a01 	vldr	s10, [r0, #4]
 80052f2:	9605      	str	r6, [sp, #20]
 80052f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052f8:	9e01      	ldr	r6, [sp, #4]
 80052fa:	9707      	str	r7, [sp, #28]
 80052fc:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8005300:	ed96 2a01 	vldr	s4, [r6, #4]
 8005304:	ee36 7a05 	vadd.f32	s14, s12, s10
 8005308:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800530c:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8005310:	ee77 7a84 	vadd.f32	s15, s15, s8
 8005314:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8005318:	4604      	mov	r4, r0
 800531a:	46a3      	mov	fp, r4
 800531c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8005320:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005324:	ee14 8a10 	vmov	r8, s8
 8005328:	46a4      	mov	ip, r4
 800532a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800532e:	ed87 7a01 	vstr	s14, [r7, #4]
 8005332:	f84b 8b08 	str.w	r8, [fp], #8
 8005336:	f1ac 0704 	sub.w	r7, ip, #4
 800533a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800533e:	f101 0c08 	add.w	ip, r1, #8
 8005342:	462c      	mov	r4, r5
 8005344:	f8cd c010 	str.w	ip, [sp, #16]
 8005348:	ee15 ca90 	vmov	ip, s11
 800534c:	ee36 6a62 	vsub.f32	s12, s12, s5
 8005350:	f844 cb08 	str.w	ip, [r4], #8
 8005354:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005358:	ee36 6a43 	vsub.f32	s12, s12, s6
 800535c:	9406      	str	r4, [sp, #24]
 800535e:	ee76 6a83 	vadd.f32	s13, s13, s6
 8005362:	f101 0410 	add.w	r4, r1, #16
 8005366:	0852      	lsrs	r2, r2, #1
 8005368:	9402      	str	r4, [sp, #8]
 800536a:	ed85 6a01 	vstr	s12, [r5, #4]
 800536e:	462c      	mov	r4, r5
 8005370:	f101 0518 	add.w	r5, r1, #24
 8005374:	920b      	str	r2, [sp, #44]	; 0x2c
 8005376:	46b2      	mov	sl, r6
 8005378:	9503      	str	r5, [sp, #12]
 800537a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800537e:	3a02      	subs	r2, #2
 8005380:	ee16 5a90 	vmov	r5, s13
 8005384:	46b6      	mov	lr, r6
 8005386:	4630      	mov	r0, r6
 8005388:	0852      	lsrs	r2, r2, #1
 800538a:	f84a 5b08 	str.w	r5, [sl], #8
 800538e:	f1a0 0604 	sub.w	r6, r0, #4
 8005392:	edce 7a01 	vstr	s15, [lr, #4]
 8005396:	9208      	str	r2, [sp, #32]
 8005398:	f000 8130 	beq.w	80055fc <arm_cfft_radix8by4_f32+0x378>
 800539c:	4691      	mov	r9, r2
 800539e:	9a07      	ldr	r2, [sp, #28]
 80053a0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80053a4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80053a8:	3b08      	subs	r3, #8
 80053aa:	f102 0510 	add.w	r5, r2, #16
 80053ae:	f101 0c20 	add.w	ip, r1, #32
 80053b2:	f1a4 020c 	sub.w	r2, r4, #12
 80053b6:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80053ba:	4433      	add	r3, r6
 80053bc:	3410      	adds	r4, #16
 80053be:	4650      	mov	r0, sl
 80053c0:	4659      	mov	r1, fp
 80053c2:	ed55 3a02 	vldr	s7, [r5, #-8]
 80053c6:	ed14 5a02 	vldr	s10, [r4, #-8]
 80053ca:	ed91 7a00 	vldr	s14, [r1]
 80053ce:	edd0 7a00 	vldr	s15, [r0]
 80053d2:	ed54 5a01 	vldr	s11, [r4, #-4]
 80053d6:	ed15 4a01 	vldr	s8, [r5, #-4]
 80053da:	edd0 6a01 	vldr	s13, [r0, #4]
 80053de:	ed91 6a01 	vldr	s12, [r1, #4]
 80053e2:	ee33 8a85 	vadd.f32	s16, s7, s10
 80053e6:	ee34 0a25 	vadd.f32	s0, s8, s11
 80053ea:	ee78 4a07 	vadd.f32	s9, s16, s14
 80053ee:	ee74 5a65 	vsub.f32	s11, s8, s11
 80053f2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80053f6:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80053fa:	ed45 4a02 	vstr	s9, [r5, #-8]
 80053fe:	edd1 4a01 	vldr	s9, [r1, #4]
 8005402:	ed90 4a01 	vldr	s8, [r0, #4]
 8005406:	ee70 4a24 	vadd.f32	s9, s0, s9
 800540a:	ee75 aa06 	vadd.f32	s21, s10, s12
 800540e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005412:	ee35 aac7 	vsub.f32	s20, s11, s14
 8005416:	ed45 4a01 	vstr	s9, [r5, #-4]
 800541a:	edd6 1a00 	vldr	s3, [r6]
 800541e:	edd7 0a00 	vldr	s1, [r7]
 8005422:	ed92 4a02 	vldr	s8, [r2, #8]
 8005426:	edd3 3a02 	vldr	s7, [r3, #8]
 800542a:	ed93 2a01 	vldr	s4, [r3, #4]
 800542e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005432:	edd2 2a01 	vldr	s5, [r2, #4]
 8005436:	ed57 9a01 	vldr	s19, [r7, #-4]
 800543a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800543e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8005442:	ee74 8a84 	vadd.f32	s17, s9, s8
 8005446:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800544a:	ee78 8aa3 	vadd.f32	s17, s17, s7
 800544e:	ee7a aae6 	vsub.f32	s21, s21, s13
 8005452:	ee18 aa90 	vmov	sl, s17
 8005456:	f847 a908 	str.w	sl, [r7], #-8
 800545a:	edd2 8a01 	vldr	s17, [r2, #4]
 800545e:	ed93 9a01 	vldr	s18, [r3, #4]
 8005462:	ee73 8a28 	vadd.f32	s17, s6, s17
 8005466:	ee3a aa27 	vadd.f32	s20, s20, s15
 800546a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800546e:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005472:	edc7 8a01 	vstr	s17, [r7, #4]
 8005476:	ed18 ba02 	vldr	s22, [r8, #-8]
 800547a:	ed58 8a01 	vldr	s17, [r8, #-4]
 800547e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005482:	ee6a ba28 	vmul.f32	s23, s20, s17
 8005486:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800548a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800548e:	ee31 9a20 	vadd.f32	s18, s2, s1
 8005492:	ee79 9a82 	vadd.f32	s19, s19, s4
 8005496:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800549a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800549e:	ee69 baa8 	vmul.f32	s23, s19, s17
 80054a2:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80054a6:	ee69 9a8b 	vmul.f32	s19, s19, s22
 80054aa:	ee69 8a28 	vmul.f32	s17, s18, s17
 80054ae:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80054b2:	ee1c aa10 	vmov	sl, s24
 80054b6:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80054ba:	f841 ab08 	str.w	sl, [r1], #8
 80054be:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80054c2:	ee3b bacb 	vsub.f32	s22, s23, s22
 80054c6:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80054ca:	ee33 3a62 	vsub.f32	s6, s6, s5
 80054ce:	ed01 aa01 	vstr	s20, [r1, #-4]
 80054d2:	edc2 8a01 	vstr	s17, [r2, #4]
 80054d6:	ed82 ba02 	vstr	s22, [r2, #8]
 80054da:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80054de:	ee74 3a63 	vsub.f32	s7, s8, s7
 80054e2:	ee38 8a47 	vsub.f32	s16, s16, s14
 80054e6:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80054ea:	ee30 0a46 	vsub.f32	s0, s0, s12
 80054ee:	ee33 3a42 	vsub.f32	s6, s6, s4
 80054f2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80054f6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80054fa:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80054fe:	ee63 8a04 	vmul.f32	s17, s6, s8
 8005502:	ee28 aa24 	vmul.f32	s20, s16, s9
 8005506:	ee60 9a04 	vmul.f32	s19, s0, s8
 800550a:	ee28 8a04 	vmul.f32	s16, s16, s8
 800550e:	ee20 0a24 	vmul.f32	s0, s0, s9
 8005512:	ee63 3a84 	vmul.f32	s7, s7, s8
 8005516:	ee39 4a68 	vsub.f32	s8, s18, s17
 800551a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800551e:	ee14 aa10 	vmov	sl, s8
 8005522:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005526:	ee63 4a24 	vmul.f32	s9, s6, s9
 800552a:	ed44 9a02 	vstr	s19, [r4, #-8]
 800552e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8005532:	ed04 0a01 	vstr	s0, [r4, #-4]
 8005536:	f846 a908 	str.w	sl, [r6], #-8
 800553a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800553e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8005542:	edc6 3a01 	vstr	s7, [r6, #4]
 8005546:	ee76 6a26 	vadd.f32	s13, s12, s13
 800554a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800554e:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8005552:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8005556:	ee67 5a86 	vmul.f32	s11, s15, s12
 800555a:	ee26 5a87 	vmul.f32	s10, s13, s14
 800555e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8005562:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005566:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800556a:	ee75 5a25 	vadd.f32	s11, s10, s11
 800556e:	ee62 0a86 	vmul.f32	s1, s5, s12
 8005572:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800557a:	ee21 6a06 	vmul.f32	s12, s2, s12
 800557e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8005582:	ee21 1a07 	vmul.f32	s2, s2, s14
 8005586:	ee15 aa90 	vmov	sl, s11
 800558a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800558e:	f840 ab08 	str.w	sl, [r0], #8
 8005592:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005596:	ee76 2a22 	vadd.f32	s5, s12, s5
 800559a:	f1b9 0901 	subs.w	r9, r9, #1
 800559e:	ed40 7a01 	vstr	s15, [r0, #-4]
 80055a2:	f105 0508 	add.w	r5, r5, #8
 80055a6:	ed83 1a02 	vstr	s2, [r3, #8]
 80055aa:	edc3 2a01 	vstr	s5, [r3, #4]
 80055ae:	f108 0808 	add.w	r8, r8, #8
 80055b2:	f1a2 0208 	sub.w	r2, r2, #8
 80055b6:	f10c 0c10 	add.w	ip, ip, #16
 80055ba:	f104 0408 	add.w	r4, r4, #8
 80055be:	f10e 0e18 	add.w	lr, lr, #24
 80055c2:	f1a3 0308 	sub.w	r3, r3, #8
 80055c6:	f47f aefc 	bne.w	80053c2 <arm_cfft_radix8by4_f32+0x13e>
 80055ca:	9908      	ldr	r1, [sp, #32]
 80055cc:	9802      	ldr	r0, [sp, #8]
 80055ce:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80055d2:	00cb      	lsls	r3, r1, #3
 80055d4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80055d8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80055dc:	9102      	str	r1, [sp, #8]
 80055de:	9905      	ldr	r1, [sp, #20]
 80055e0:	4419      	add	r1, r3
 80055e2:	9105      	str	r1, [sp, #20]
 80055e4:	9904      	ldr	r1, [sp, #16]
 80055e6:	4419      	add	r1, r3
 80055e8:	9104      	str	r1, [sp, #16]
 80055ea:	9906      	ldr	r1, [sp, #24]
 80055ec:	449b      	add	fp, r3
 80055ee:	4419      	add	r1, r3
 80055f0:	449a      	add	sl, r3
 80055f2:	9b03      	ldr	r3, [sp, #12]
 80055f4:	9106      	str	r1, [sp, #24]
 80055f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055fa:	9303      	str	r3, [sp, #12]
 80055fc:	9a05      	ldr	r2, [sp, #20]
 80055fe:	9806      	ldr	r0, [sp, #24]
 8005600:	ed92 4a00 	vldr	s8, [r2]
 8005604:	ed90 7a00 	vldr	s14, [r0]
 8005608:	ed9b 3a00 	vldr	s6, [fp]
 800560c:	edda 3a00 	vldr	s7, [sl]
 8005610:	edd2 4a01 	vldr	s9, [r2, #4]
 8005614:	edd0 6a01 	vldr	s13, [r0, #4]
 8005618:	ed9a 2a01 	vldr	s4, [sl, #4]
 800561c:	eddb 7a01 	vldr	s15, [fp, #4]
 8005620:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8005624:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005626:	ee34 6a07 	vadd.f32	s12, s8, s14
 800562a:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800562e:	ee36 5a03 	vadd.f32	s10, s12, s6
 8005632:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8005636:	ee35 5a23 	vadd.f32	s10, s10, s7
 800563a:	ee34 7a47 	vsub.f32	s14, s8, s14
 800563e:	ed82 5a00 	vstr	s10, [r2]
 8005642:	ed9b 5a01 	vldr	s10, [fp, #4]
 8005646:	edda 4a01 	vldr	s9, [sl, #4]
 800564a:	ee35 5a85 	vadd.f32	s10, s11, s10
 800564e:	ee37 4a27 	vadd.f32	s8, s14, s15
 8005652:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005656:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800565a:	ed82 5a01 	vstr	s10, [r2, #4]
 800565e:	9a04      	ldr	r2, [sp, #16]
 8005660:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8005664:	edd2 1a00 	vldr	s3, [r2]
 8005668:	edd2 2a01 	vldr	s5, [r2, #4]
 800566c:	9a02      	ldr	r2, [sp, #8]
 800566e:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005672:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005676:	ee64 4a21 	vmul.f32	s9, s8, s3
 800567a:	ee24 4a22 	vmul.f32	s8, s8, s5
 800567e:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005682:	ee25 5a21 	vmul.f32	s10, s10, s3
 8005686:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800568a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800568e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005692:	edcb 2a00 	vstr	s5, [fp]
 8005696:	ed8b 5a01 	vstr	s10, [fp, #4]
 800569a:	ed92 4a01 	vldr	s8, [r2, #4]
 800569e:	ed92 5a00 	vldr	s10, [r2]
 80056a2:	9a03      	ldr	r2, [sp, #12]
 80056a4:	ee36 6a63 	vsub.f32	s12, s12, s7
 80056a8:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80056ac:	ee66 4a05 	vmul.f32	s9, s12, s10
 80056b0:	ee25 5a85 	vmul.f32	s10, s11, s10
 80056b4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80056b8:	ee65 5a84 	vmul.f32	s11, s11, s8
 80056bc:	ee35 6a46 	vsub.f32	s12, s10, s12
 80056c0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80056c4:	ee76 6a83 	vadd.f32	s13, s13, s6
 80056c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056cc:	ed80 6a01 	vstr	s12, [r0, #4]
 80056d0:	edc0 5a00 	vstr	s11, [r0]
 80056d4:	edd2 5a01 	vldr	s11, [r2, #4]
 80056d8:	9807      	ldr	r0, [sp, #28]
 80056da:	ee77 7a02 	vadd.f32	s15, s14, s4
 80056de:	ee36 7ae3 	vsub.f32	s14, s13, s7
 80056e2:	edd2 6a00 	vldr	s13, [r2]
 80056e6:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80056ea:	ee67 6a26 	vmul.f32	s13, s14, s13
 80056ee:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80056f2:	ee27 7a25 	vmul.f32	s14, s14, s11
 80056f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80056fa:	ee36 7a07 	vadd.f32	s14, s12, s14
 80056fe:	edca 7a01 	vstr	s15, [sl, #4]
 8005702:	ed8a 7a00 	vstr	s14, [sl]
 8005706:	6872      	ldr	r2, [r6, #4]
 8005708:	4621      	mov	r1, r4
 800570a:	2304      	movs	r3, #4
 800570c:	f000 fd8c 	bl	8006228 <arm_radix8_butterfly_f32>
 8005710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005712:	6872      	ldr	r2, [r6, #4]
 8005714:	4621      	mov	r1, r4
 8005716:	2304      	movs	r3, #4
 8005718:	f000 fd86 	bl	8006228 <arm_radix8_butterfly_f32>
 800571c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800571e:	6872      	ldr	r2, [r6, #4]
 8005720:	4621      	mov	r1, r4
 8005722:	2304      	movs	r3, #4
 8005724:	f000 fd80 	bl	8006228 <arm_radix8_butterfly_f32>
 8005728:	6872      	ldr	r2, [r6, #4]
 800572a:	9801      	ldr	r0, [sp, #4]
 800572c:	4621      	mov	r1, r4
 800572e:	2304      	movs	r3, #4
 8005730:	b00f      	add	sp, #60	; 0x3c
 8005732:	ecbd 8b0a 	vpop	{d8-d12}
 8005736:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573a:	f000 bd75 	b.w	8006228 <arm_radix8_butterfly_f32>
 800573e:	bf00      	nop

08005740 <arm_cfft_f32>:
 8005740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005744:	2a01      	cmp	r2, #1
 8005746:	4606      	mov	r6, r0
 8005748:	4617      	mov	r7, r2
 800574a:	460c      	mov	r4, r1
 800574c:	4698      	mov	r8, r3
 800574e:	8805      	ldrh	r5, [r0, #0]
 8005750:	d054      	beq.n	80057fc <arm_cfft_f32+0xbc>
 8005752:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8005756:	d04c      	beq.n	80057f2 <arm_cfft_f32+0xb2>
 8005758:	d916      	bls.n	8005788 <arm_cfft_f32+0x48>
 800575a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800575e:	d01a      	beq.n	8005796 <arm_cfft_f32+0x56>
 8005760:	d95c      	bls.n	800581c <arm_cfft_f32+0xdc>
 8005762:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8005766:	d044      	beq.n	80057f2 <arm_cfft_f32+0xb2>
 8005768:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800576c:	d105      	bne.n	800577a <arm_cfft_f32+0x3a>
 800576e:	2301      	movs	r3, #1
 8005770:	6872      	ldr	r2, [r6, #4]
 8005772:	4629      	mov	r1, r5
 8005774:	4620      	mov	r0, r4
 8005776:	f000 fd57 	bl	8006228 <arm_radix8_butterfly_f32>
 800577a:	f1b8 0f00 	cmp.w	r8, #0
 800577e:	d111      	bne.n	80057a4 <arm_cfft_f32+0x64>
 8005780:	2f01      	cmp	r7, #1
 8005782:	d016      	beq.n	80057b2 <arm_cfft_f32+0x72>
 8005784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005788:	2d20      	cmp	r5, #32
 800578a:	d032      	beq.n	80057f2 <arm_cfft_f32+0xb2>
 800578c:	d94a      	bls.n	8005824 <arm_cfft_f32+0xe4>
 800578e:	2d40      	cmp	r5, #64	; 0x40
 8005790:	d0ed      	beq.n	800576e <arm_cfft_f32+0x2e>
 8005792:	2d80      	cmp	r5, #128	; 0x80
 8005794:	d1f1      	bne.n	800577a <arm_cfft_f32+0x3a>
 8005796:	4621      	mov	r1, r4
 8005798:	4630      	mov	r0, r6
 800579a:	f7ff fca3 	bl	80050e4 <arm_cfft_radix8by2_f32>
 800579e:	f1b8 0f00 	cmp.w	r8, #0
 80057a2:	d0ed      	beq.n	8005780 <arm_cfft_f32+0x40>
 80057a4:	68b2      	ldr	r2, [r6, #8]
 80057a6:	89b1      	ldrh	r1, [r6, #12]
 80057a8:	4620      	mov	r0, r4
 80057aa:	f7fa fd11 	bl	80001d0 <arm_bitreversal_32>
 80057ae:	2f01      	cmp	r7, #1
 80057b0:	d1e8      	bne.n	8005784 <arm_cfft_f32+0x44>
 80057b2:	ee07 5a90 	vmov	s15, r5
 80057b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80057c2:	2d00      	cmp	r5, #0
 80057c4:	d0de      	beq.n	8005784 <arm_cfft_f32+0x44>
 80057c6:	f104 0108 	add.w	r1, r4, #8
 80057ca:	2300      	movs	r3, #0
 80057cc:	3301      	adds	r3, #1
 80057ce:	429d      	cmp	r5, r3
 80057d0:	f101 0108 	add.w	r1, r1, #8
 80057d4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80057d8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80057dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80057e0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80057e4:	ed01 7a04 	vstr	s14, [r1, #-16]
 80057e8:	ed41 7a03 	vstr	s15, [r1, #-12]
 80057ec:	d1ee      	bne.n	80057cc <arm_cfft_f32+0x8c>
 80057ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f2:	4621      	mov	r1, r4
 80057f4:	4630      	mov	r0, r6
 80057f6:	f7ff fd45 	bl	8005284 <arm_cfft_radix8by4_f32>
 80057fa:	e7be      	b.n	800577a <arm_cfft_f32+0x3a>
 80057fc:	b1ad      	cbz	r5, 800582a <arm_cfft_f32+0xea>
 80057fe:	f101 030c 	add.w	r3, r1, #12
 8005802:	2200      	movs	r2, #0
 8005804:	ed53 7a02 	vldr	s15, [r3, #-8]
 8005808:	3201      	adds	r2, #1
 800580a:	eef1 7a67 	vneg.f32	s15, s15
 800580e:	4295      	cmp	r5, r2
 8005810:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005814:	f103 0308 	add.w	r3, r3, #8
 8005818:	d1f4      	bne.n	8005804 <arm_cfft_f32+0xc4>
 800581a:	e79a      	b.n	8005752 <arm_cfft_f32+0x12>
 800581c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8005820:	d0a5      	beq.n	800576e <arm_cfft_f32+0x2e>
 8005822:	e7aa      	b.n	800577a <arm_cfft_f32+0x3a>
 8005824:	2d10      	cmp	r5, #16
 8005826:	d0b6      	beq.n	8005796 <arm_cfft_f32+0x56>
 8005828:	e7a7      	b.n	800577a <arm_cfft_f32+0x3a>
 800582a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800582e:	d894      	bhi.n	800575a <arm_cfft_f32+0x1a>
 8005830:	e7aa      	b.n	8005788 <arm_cfft_f32+0x48>
 8005832:	bf00      	nop

08005834 <arm_mat_mult_f32>:
 8005834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005838:	8843      	ldrh	r3, [r0, #2]
 800583a:	880d      	ldrh	r5, [r1, #0]
 800583c:	8804      	ldrh	r4, [r0, #0]
 800583e:	b087      	sub	sp, #28
 8005840:	429d      	cmp	r5, r3
 8005842:	9403      	str	r4, [sp, #12]
 8005844:	f040 8094 	bne.w	8005970 <arm_mat_mult_f32+0x13c>
 8005848:	8813      	ldrh	r3, [r2, #0]
 800584a:	4626      	mov	r6, r4
 800584c:	42b3      	cmp	r3, r6
 800584e:	4614      	mov	r4, r2
 8005850:	f040 808e 	bne.w	8005970 <arm_mat_mult_f32+0x13c>
 8005854:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 8005858:	8863      	ldrh	r3, [r4, #2]
 800585a:	4543      	cmp	r3, r8
 800585c:	f040 8088 	bne.w	8005970 <arm_mat_mult_f32+0x13c>
 8005860:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 8005864:	f005 0303 	and.w	r3, r5, #3
 8005868:	461a      	mov	r2, r3
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005870:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8005874:	6860      	ldr	r0, [r4, #4]
 8005876:	9004      	str	r0, [sp, #16]
 8005878:	b29b      	uxth	r3, r3
 800587a:	3301      	adds	r3, #1
 800587c:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8005880:	3a01      	subs	r2, #1
 8005882:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 8005886:	fb03 fb0b 	mul.w	fp, r3, fp
 800588a:	00ab      	lsls	r3, r5, #2
 800588c:	b292      	uxth	r2, r2
 800588e:	9305      	str	r3, [sp, #20]
 8005890:	2300      	movs	r3, #0
 8005892:	3201      	adds	r2, #1
 8005894:	9302      	str	r3, [sp, #8]
 8005896:	460b      	mov	r3, r1
 8005898:	684c      	ldr	r4, [r1, #4]
 800589a:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800589e:	4651      	mov	r1, sl
 80058a0:	ea4f 0088 	mov.w	r0, r8, lsl #2
 80058a4:	469a      	mov	sl, r3
 80058a6:	9b04      	ldr	r3, [sp, #16]
 80058a8:	9a02      	ldr	r2, [sp, #8]
 80058aa:	2600      	movs	r6, #0
 80058ac:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 80058b0:	f10c 0510 	add.w	r5, ip, #16
 80058b4:	eddf 7a31 	vldr	s15, [pc, #196]	; 800597c <arm_mat_mult_f32+0x148>
 80058b8:	2900      	cmp	r1, #0
 80058ba:	d057      	beq.n	800596c <arm_mat_mult_f32+0x138>
 80058bc:	f10e 0210 	add.w	r2, lr, #16
 80058c0:	4623      	mov	r3, r4
 80058c2:	ed93 5a00 	vldr	s10, [r3]
 80058c6:	ed52 5a04 	vldr	s11, [r2, #-16]
 80058ca:	ed12 7a03 	vldr	s14, [r2, #-12]
 80058ce:	ed52 6a02 	vldr	s13, [r2, #-8]
 80058d2:	ed12 6a01 	vldr	s12, [r2, #-4]
 80058d6:	4403      	add	r3, r0
 80058d8:	ee65 5a25 	vmul.f32	s11, s10, s11
 80058dc:	ed93 5a00 	vldr	s10, [r3]
 80058e0:	4403      	add	r3, r0
 80058e2:	ee27 7a05 	vmul.f32	s14, s14, s10
 80058e6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80058ea:	ed93 5a00 	vldr	s10, [r3]
 80058ee:	4403      	add	r3, r0
 80058f0:	ee77 5a27 	vadd.f32	s11, s14, s15
 80058f4:	ee65 7a26 	vmul.f32	s15, s10, s13
 80058f8:	edd3 6a00 	vldr	s13, [r3]
 80058fc:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8005900:	3210      	adds	r2, #16
 8005902:	ee66 7a26 	vmul.f32	s15, s12, s13
 8005906:	42aa      	cmp	r2, r5
 8005908:	4403      	add	r3, r0
 800590a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800590e:	d1d8      	bne.n	80058c2 <arm_mat_mult_f32+0x8e>
 8005910:	445c      	add	r4, fp
 8005912:	4663      	mov	r3, ip
 8005914:	9a01      	ldr	r2, [sp, #4]
 8005916:	b162      	cbz	r2, 8005932 <arm_mat_mult_f32+0xfe>
 8005918:	eb03 0209 	add.w	r2, r3, r9
 800591c:	ecf3 6a01 	vldmia	r3!, {s13}
 8005920:	ed94 7a00 	vldr	s14, [r4]
 8005924:	ee26 7a87 	vmul.f32	s14, s13, s14
 8005928:	4293      	cmp	r3, r2
 800592a:	4404      	add	r4, r0
 800592c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005930:	d1f4      	bne.n	800591c <arm_mat_mult_f32+0xe8>
 8005932:	ece7 7a01 	vstmia	r7!, {s15}
 8005936:	3601      	adds	r6, #1
 8005938:	b2b6      	uxth	r6, r6
 800593a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800593e:	45b0      	cmp	r8, r6
 8005940:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8005944:	d1b6      	bne.n	80058b4 <arm_mat_mult_f32+0x80>
 8005946:	9a03      	ldr	r2, [sp, #12]
 8005948:	9c05      	ldr	r4, [sp, #20]
 800594a:	3a01      	subs	r2, #1
 800594c:	b292      	uxth	r2, r2
 800594e:	4615      	mov	r5, r2
 8005950:	9203      	str	r2, [sp, #12]
 8005952:	9a02      	ldr	r2, [sp, #8]
 8005954:	4442      	add	r2, r8
 8005956:	b292      	uxth	r2, r2
 8005958:	44a6      	add	lr, r4
 800595a:	44a4      	add	ip, r4
 800595c:	9202      	str	r2, [sp, #8]
 800595e:	461c      	mov	r4, r3
 8005960:	2d00      	cmp	r5, #0
 8005962:	d1a0      	bne.n	80058a6 <arm_mat_mult_f32+0x72>
 8005964:	4628      	mov	r0, r5
 8005966:	b007      	add	sp, #28
 8005968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596c:	4673      	mov	r3, lr
 800596e:	e7d1      	b.n	8005914 <arm_mat_mult_f32+0xe0>
 8005970:	f06f 0002 	mvn.w	r0, #2
 8005974:	b007      	add	sp, #28
 8005976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597a:	bf00      	nop
 800597c:	00000000 	.word	0x00000000

08005980 <arm_mat_init_f32>:
 8005980:	8001      	strh	r1, [r0, #0]
 8005982:	8042      	strh	r2, [r0, #2]
 8005984:	6043      	str	r3, [r0, #4]
 8005986:	4770      	bx	lr

08005988 <arm_fir_init_f32>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	9c04      	ldr	r4, [sp, #16]
 800598c:	6082      	str	r2, [r0, #8]
 800598e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005992:	3c01      	subs	r4, #1
 8005994:	4605      	mov	r5, r0
 8005996:	440c      	add	r4, r1
 8005998:	8001      	strh	r1, [r0, #0]
 800599a:	461e      	mov	r6, r3
 800599c:	00a2      	lsls	r2, r4, #2
 800599e:	4618      	mov	r0, r3
 80059a0:	2100      	movs	r1, #0
 80059a2:	f000 ff70 	bl	8006886 <memset>
 80059a6:	606e      	str	r6, [r5, #4]
 80059a8:	bd70      	pop	{r4, r5, r6, pc}
 80059aa:	bf00      	nop

080059ac <arm_fir_f32>:
 80059ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b0:	ed2d 8b10 	vpush	{d8-d15}
 80059b4:	b089      	sub	sp, #36	; 0x24
 80059b6:	4605      	mov	r5, r0
 80059b8:	9003      	str	r0, [sp, #12]
 80059ba:	8800      	ldrh	r0, [r0, #0]
 80059bc:	9304      	str	r3, [sp, #16]
 80059be:	461e      	mov	r6, r3
 80059c0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80059c4:	9001      	str	r0, [sp, #4]
 80059c6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80059ca:	3b01      	subs	r3, #1
 80059cc:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 80059d0:	08f3      	lsrs	r3, r6, #3
 80059d2:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80059d6:	9400      	str	r4, [sp, #0]
 80059d8:	9302      	str	r3, [sp, #8]
 80059da:	f000 81ef 	beq.w	8005dbc <arm_fir_f32+0x410>
 80059de:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 80059e2:	469e      	mov	lr, r3
 80059e4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80059e8:	1f1e      	subs	r6, r3, #4
 80059ea:	4625      	mov	r5, r4
 80059ec:	9605      	str	r6, [sp, #20]
 80059ee:	4604      	mov	r4, r0
 80059f0:	eb08 0003 	add.w	r0, r8, r3
 80059f4:	f004 0a07 	and.w	sl, r4, #7
 80059f8:	4613      	mov	r3, r2
 80059fa:	f10c 0420 	add.w	r4, ip, #32
 80059fe:	f8cd c018 	str.w	ip, [sp, #24]
 8005a02:	4684      	mov	ip, r0
 8005a04:	4648      	mov	r0, r9
 8005a06:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005a0a:	9107      	str	r1, [sp, #28]
 8005a0c:	f105 0720 	add.w	r7, r5, #32
 8005a10:	f101 0620 	add.w	r6, r1, #32
 8005a14:	f102 0520 	add.w	r5, r2, #32
 8005a18:	4652      	mov	r2, sl
 8005a1a:	469a      	mov	sl, r3
 8005a1c:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8005a20:	f847 3c20 	str.w	r3, [r7, #-32]
 8005a24:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8005a28:	f847 3c1c 	str.w	r3, [r7, #-28]
 8005a2c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8005a30:	f847 3c18 	str.w	r3, [r7, #-24]
 8005a34:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8005a38:	f847 3c14 	str.w	r3, [r7, #-20]
 8005a3c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8005a40:	f847 3c10 	str.w	r3, [r7, #-16]
 8005a44:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8005a48:	f847 3c0c 	str.w	r3, [r7, #-12]
 8005a4c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005a50:	f847 3c08 	str.w	r3, [r7, #-8]
 8005a54:	eddf 3af1 	vldr	s7, [pc, #964]	; 8005e1c <arm_fir_f32+0x470>
 8005a58:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005a5c:	f847 3c04 	str.w	r3, [r7, #-4]
 8005a60:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8005a64:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 8005a68:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8005a6c:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8005a70:	ed14 1a04 	vldr	s2, [r4, #-16]
 8005a74:	ed54 0a03 	vldr	s1, [r4, #-12]
 8005a78:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005a7c:	1f21      	subs	r1, r4, #4
 8005a7e:	eef0 8a63 	vmov.f32	s17, s7
 8005a82:	eef0 9a63 	vmov.f32	s19, s7
 8005a86:	eef0 aa63 	vmov.f32	s21, s7
 8005a8a:	eef0 ba63 	vmov.f32	s23, s7
 8005a8e:	eeb0 ca63 	vmov.f32	s24, s7
 8005a92:	eef0 ca63 	vmov.f32	s25, s7
 8005a96:	eeb0 da63 	vmov.f32	s26, s7
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	f000 81e8 	beq.w	8005e70 <arm_fir_f32+0x4c4>
 8005aa0:	f108 0120 	add.w	r1, r8, #32
 8005aa4:	f104 031c 	add.w	r3, r4, #28
 8005aa8:	4683      	mov	fp, r0
 8005aaa:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8005aae:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8005ab2:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 8005ab6:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 8005aba:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8005abe:	ed11 6a04 	vldr	s12, [r1, #-16]
 8005ac2:	ed51 6a03 	vldr	s13, [r1, #-12]
 8005ac6:	ed11 7a02 	vldr	s14, [r1, #-8]
 8005aca:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005ace:	ee24 fa03 	vmul.f32	s30, s8, s6
 8005ad2:	ee64 ea22 	vmul.f32	s29, s8, s5
 8005ad6:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 8005ada:	ee24 ea02 	vmul.f32	s28, s8, s4
 8005ade:	ee64 da21 	vmul.f32	s27, s8, s3
 8005ae2:	ee24 ba01 	vmul.f32	s22, s8, s2
 8005ae6:	ee24 aa20 	vmul.f32	s20, s8, s1
 8005aea:	ee24 9a00 	vmul.f32	s18, s8, s0
 8005aee:	ee24 4a08 	vmul.f32	s8, s8, s16
 8005af2:	ee3f da0d 	vadd.f32	s26, s30, s26
 8005af6:	ee74 3a23 	vadd.f32	s7, s8, s7
 8005afa:	ee24 faa2 	vmul.f32	s30, s9, s5
 8005afe:	ee7e caac 	vadd.f32	s25, s29, s25
 8005b02:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 8005b06:	ee64 ea82 	vmul.f32	s29, s9, s4
 8005b0a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005b0e:	ee7d baab 	vadd.f32	s23, s27, s23
 8005b12:	ee24 eaa1 	vmul.f32	s28, s9, s3
 8005b16:	ee64 da81 	vmul.f32	s27, s9, s2
 8005b1a:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005b1e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005b22:	ee24 baa0 	vmul.f32	s22, s9, s1
 8005b26:	ee24 aa80 	vmul.f32	s20, s9, s0
 8005b2a:	ee79 8a28 	vadd.f32	s17, s18, s17
 8005b2e:	ee28 9a24 	vmul.f32	s18, s16, s9
 8005b32:	ee64 4a83 	vmul.f32	s9, s9, s6
 8005b36:	ee25 4a02 	vmul.f32	s8, s10, s4
 8005b3a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005b3e:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8005b42:	ee7e caac 	vadd.f32	s25, s29, s25
 8005b46:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005b4a:	ee65 ea21 	vmul.f32	s29, s10, s3
 8005b4e:	ee25 ea01 	vmul.f32	s28, s10, s2
 8005b52:	ee7d baab 	vadd.f32	s23, s27, s23
 8005b56:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005b5a:	ee65 da20 	vmul.f32	s27, s10, s1
 8005b5e:	ee25 ba00 	vmul.f32	s22, s10, s0
 8005b62:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005b66:	ee79 8a28 	vadd.f32	s17, s18, s17
 8005b6a:	ee28 aa05 	vmul.f32	s20, s16, s10
 8005b6e:	ee23 9a05 	vmul.f32	s18, s6, s10
 8005b72:	ee3d da0f 	vadd.f32	s26, s26, s30
 8005b76:	ee25 5a22 	vmul.f32	s10, s10, s5
 8005b7a:	ee65 3aa1 	vmul.f32	s7, s11, s3
 8005b7e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005b82:	ed53 1a04 	vldr	s3, [r3, #-16]
 8005b86:	ee7e caac 	vadd.f32	s25, s29, s25
 8005b8a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005b8e:	ee65 ea81 	vmul.f32	s29, s11, s2
 8005b92:	ee25 eaa0 	vmul.f32	s28, s11, s1
 8005b96:	ee7d baab 	vadd.f32	s23, s27, s23
 8005b9a:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005b9e:	ee65 da80 	vmul.f32	s27, s11, s0
 8005ba2:	ee28 ba25 	vmul.f32	s22, s16, s11
 8005ba6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005baa:	ee79 8a28 	vadd.f32	s17, s18, s17
 8005bae:	ee23 aa25 	vmul.f32	s20, s6, s11
 8005bb2:	ee22 9aa5 	vmul.f32	s18, s5, s11
 8005bb6:	ee3d da04 	vadd.f32	s26, s26, s8
 8005bba:	ee65 5a82 	vmul.f32	s11, s11, s4
 8005bbe:	ee66 4a01 	vmul.f32	s9, s12, s2
 8005bc2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005bc6:	ed13 1a03 	vldr	s2, [r3, #-12]
 8005bca:	ee75 5a85 	vadd.f32	s11, s11, s10
 8005bce:	ee3d da23 	vadd.f32	s26, s26, s7
 8005bd2:	ee22 5a06 	vmul.f32	s10, s4, s12
 8005bd6:	ee7e caac 	vadd.f32	s25, s29, s25
 8005bda:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005bde:	ee66 ea20 	vmul.f32	s29, s12, s1
 8005be2:	ee26 ea00 	vmul.f32	s28, s12, s0
 8005be6:	ee7d baab 	vadd.f32	s23, s27, s23
 8005bea:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005bee:	ee68 da06 	vmul.f32	s27, s16, s12
 8005bf2:	ee23 ba06 	vmul.f32	s22, s6, s12
 8005bf6:	ee22 aa86 	vmul.f32	s20, s5, s12
 8005bfa:	ee79 8a28 	vadd.f32	s17, s18, s17
 8005bfe:	ee26 6a21 	vmul.f32	s12, s12, s3
 8005c02:	ee26 9aa0 	vmul.f32	s18, s13, s1
 8005c06:	ee36 6a25 	vadd.f32	s12, s12, s11
 8005c0a:	ed53 0a02 	vldr	s1, [r3, #-8]
 8005c0e:	ee61 5aa6 	vmul.f32	s11, s3, s13
 8005c12:	ee3d da24 	vadd.f32	s26, s26, s9
 8005c16:	ee7e caac 	vadd.f32	s25, s29, s25
 8005c1a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005c1e:	ee66 ea80 	vmul.f32	s29, s13, s0
 8005c22:	ee28 ea26 	vmul.f32	s28, s16, s13
 8005c26:	ee7d baab 	vadd.f32	s23, s27, s23
 8005c2a:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005c2e:	ee63 da26 	vmul.f32	s27, s6, s13
 8005c32:	ee22 baa6 	vmul.f32	s22, s5, s13
 8005c36:	ee3a aa29 	vadd.f32	s20, s20, s19
 8005c3a:	ee75 8a28 	vadd.f32	s17, s10, s17
 8005c3e:	ee62 9a26 	vmul.f32	s19, s4, s13
 8005c42:	ee66 6a81 	vmul.f32	s13, s13, s2
 8005c46:	ee27 5a00 	vmul.f32	s10, s14, s0
 8005c4a:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005c4e:	ee75 8aa8 	vadd.f32	s17, s11, s17
 8005c52:	ee7e caac 	vadd.f32	s25, s29, s25
 8005c56:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005c5a:	ee68 ea07 	vmul.f32	s29, s16, s14
 8005c5e:	ee23 ea07 	vmul.f32	s28, s6, s14
 8005c62:	ee7d baab 	vadd.f32	s23, s27, s23
 8005c66:	ee22 ba07 	vmul.f32	s22, s4, s14
 8005c6a:	ee62 da87 	vmul.f32	s27, s5, s14
 8005c6e:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8005c72:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005c76:	ee61 9a87 	vmul.f32	s19, s3, s14
 8005c7a:	ee67 3a20 	vmul.f32	s7, s14, s1
 8005c7e:	ed13 0a01 	vldr	s0, [r3, #-4]
 8005c82:	ee3d da09 	vadd.f32	s26, s26, s18
 8005c86:	ee21 6a07 	vmul.f32	s12, s2, s14
 8005c8a:	ee3d da05 	vadd.f32	s26, s26, s10
 8005c8e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005c92:	ee63 5a27 	vmul.f32	s11, s6, s15
 8005c96:	ee22 5aa7 	vmul.f32	s10, s5, s15
 8005c9a:	ee62 4a27 	vmul.f32	s9, s4, s15
 8005c9e:	ee3b ba2a 	vadd.f32	s22, s22, s21
 8005ca2:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8005ca6:	ee61 aaa7 	vmul.f32	s21, s3, s15
 8005caa:	ee61 9a27 	vmul.f32	s19, s2, s15
 8005cae:	ee36 7a28 	vadd.f32	s14, s12, s17
 8005cb2:	ee7e caac 	vadd.f32	s25, s29, s25
 8005cb6:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8005cba:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005cbe:	ee7d baab 	vadd.f32	s23, s27, s23
 8005cc2:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8005cc6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005cca:	f1bb 0b01 	subs.w	fp, fp, #1
 8005cce:	f101 0120 	add.w	r1, r1, #32
 8005cd2:	ee38 da0d 	vadd.f32	s26, s16, s26
 8005cd6:	ee75 caac 	vadd.f32	s25, s11, s25
 8005cda:	ee35 ca0c 	vadd.f32	s24, s10, s24
 8005cde:	ee74 baab 	vadd.f32	s23, s9, s23
 8005ce2:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8005ce6:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8005cea:	ee78 8a87 	vadd.f32	s17, s17, s14
 8005cee:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8005cf2:	f103 0320 	add.w	r3, r3, #32
 8005cf6:	f47f aed8 	bne.w	8005aaa <arm_fir_f32+0xfe>
 8005cfa:	eb09 0104 	add.w	r1, r9, r4
 8005cfe:	46e3      	mov	fp, ip
 8005d00:	b3a2      	cbz	r2, 8005d6c <arm_fir_f32+0x3c0>
 8005d02:	4613      	mov	r3, r2
 8005d04:	ecbb 6a01 	vldmia	fp!, {s12}
 8005d08:	ecf1 7a01 	vldmia	r1!, {s15}
 8005d0c:	ee26 3a03 	vmul.f32	s6, s12, s6
 8005d10:	ee26 4a22 	vmul.f32	s8, s12, s5
 8005d14:	ee66 4a02 	vmul.f32	s9, s12, s4
 8005d18:	ee26 5a21 	vmul.f32	s10, s12, s3
 8005d1c:	ee66 5a01 	vmul.f32	s11, s12, s2
 8005d20:	ee66 6a20 	vmul.f32	s13, s12, s1
 8005d24:	ee26 7a00 	vmul.f32	s14, s12, s0
 8005d28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	ee3d da03 	vadd.f32	s26, s26, s6
 8005d32:	ee7c ca84 	vadd.f32	s25, s25, s8
 8005d36:	eeb0 3a62 	vmov.f32	s6, s5
 8005d3a:	ee3c ca24 	vadd.f32	s24, s24, s9
 8005d3e:	eef0 2a42 	vmov.f32	s5, s4
 8005d42:	ee7b ba85 	vadd.f32	s23, s23, s10
 8005d46:	eeb0 2a61 	vmov.f32	s4, s3
 8005d4a:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8005d4e:	eef0 1a41 	vmov.f32	s3, s2
 8005d52:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8005d56:	eeb0 1a60 	vmov.f32	s2, s1
 8005d5a:	ee78 8a87 	vadd.f32	s17, s17, s14
 8005d5e:	eef0 0a40 	vmov.f32	s1, s0
 8005d62:	ee73 3a86 	vadd.f32	s7, s7, s12
 8005d66:	eeb0 0a67 	vmov.f32	s0, s15
 8005d6a:	d1cb      	bne.n	8005d04 <arm_fir_f32+0x358>
 8005d6c:	f1be 0e01 	subs.w	lr, lr, #1
 8005d70:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8005d74:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 8005d78:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8005d7c:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8005d80:	ed45 aa04 	vstr	s21, [r5, #-16]
 8005d84:	ed45 9a03 	vstr	s19, [r5, #-12]
 8005d88:	ed45 8a02 	vstr	s17, [r5, #-8]
 8005d8c:	ed45 3a01 	vstr	s7, [r5, #-4]
 8005d90:	f107 0720 	add.w	r7, r7, #32
 8005d94:	f106 0620 	add.w	r6, r6, #32
 8005d98:	f104 0420 	add.w	r4, r4, #32
 8005d9c:	f105 0520 	add.w	r5, r5, #32
 8005da0:	f47f ae3c 	bne.w	8005a1c <arm_fir_f32+0x70>
 8005da4:	9b02      	ldr	r3, [sp, #8]
 8005da6:	9800      	ldr	r0, [sp, #0]
 8005da8:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005dac:	9907      	ldr	r1, [sp, #28]
 8005dae:	015b      	lsls	r3, r3, #5
 8005db0:	4652      	mov	r2, sl
 8005db2:	4418      	add	r0, r3
 8005db4:	9000      	str	r0, [sp, #0]
 8005db6:	4419      	add	r1, r3
 8005db8:	449c      	add	ip, r3
 8005dba:	441a      	add	r2, r3
 8005dbc:	9b04      	ldr	r3, [sp, #16]
 8005dbe:	f013 0e07 	ands.w	lr, r3, #7
 8005dc2:	d01f      	beq.n	8005e04 <arm_fir_f32+0x458>
 8005dc4:	9f00      	ldr	r7, [sp, #0]
 8005dc6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005dca:	4676      	mov	r6, lr
 8005dcc:	4665      	mov	r5, ip
 8005dce:	f851 3b04 	ldr.w	r3, [r1], #4
 8005dd2:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005e1c <arm_fir_f32+0x470>
 8005dd6:	f847 3b04 	str.w	r3, [r7], #4
 8005dda:	4644      	mov	r4, r8
 8005ddc:	464b      	mov	r3, r9
 8005dde:	4628      	mov	r0, r5
 8005de0:	ecb0 7a01 	vldmia	r0!, {s14}
 8005de4:	ecf4 7a01 	vldmia	r4!, {s15}
 8005de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dec:	3b01      	subs	r3, #1
 8005dee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005df2:	d1f5      	bne.n	8005de0 <arm_fir_f32+0x434>
 8005df4:	3e01      	subs	r6, #1
 8005df6:	ece2 6a01 	vstmia	r2!, {s13}
 8005dfa:	f105 0504 	add.w	r5, r5, #4
 8005dfe:	d1e6      	bne.n	8005dce <arm_fir_f32+0x422>
 8005e00:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8005e04:	9b01      	ldr	r3, [sp, #4]
 8005e06:	1e59      	subs	r1, r3, #1
 8005e08:	9b03      	ldr	r3, [sp, #12]
 8005e0a:	088e      	lsrs	r6, r1, #2
 8005e0c:	685c      	ldr	r4, [r3, #4]
 8005e0e:	d020      	beq.n	8005e52 <arm_fir_f32+0x4a6>
 8005e10:	f104 0210 	add.w	r2, r4, #16
 8005e14:	f10c 0310 	add.w	r3, ip, #16
 8005e18:	4630      	mov	r0, r6
 8005e1a:	e001      	b.n	8005e20 <arm_fir_f32+0x474>
 8005e1c:	00000000 	.word	0x00000000
 8005e20:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8005e24:	f842 5c10 	str.w	r5, [r2, #-16]
 8005e28:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8005e2c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8005e30:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8005e34:	f842 5c08 	str.w	r5, [r2, #-8]
 8005e38:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8005e3c:	f842 5c04 	str.w	r5, [r2, #-4]
 8005e40:	3801      	subs	r0, #1
 8005e42:	f103 0310 	add.w	r3, r3, #16
 8005e46:	f102 0210 	add.w	r2, r2, #16
 8005e4a:	d1e9      	bne.n	8005e20 <arm_fir_f32+0x474>
 8005e4c:	0133      	lsls	r3, r6, #4
 8005e4e:	441c      	add	r4, r3
 8005e50:	449c      	add	ip, r3
 8005e52:	f011 0303 	ands.w	r3, r1, #3
 8005e56:	d006      	beq.n	8005e66 <arm_fir_f32+0x4ba>
 8005e58:	4622      	mov	r2, r4
 8005e5a:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005e5e:	f842 1b04 	str.w	r1, [r2], #4
 8005e62:	3b01      	subs	r3, #1
 8005e64:	d1f9      	bne.n	8005e5a <arm_fir_f32+0x4ae>
 8005e66:	b009      	add	sp, #36	; 0x24
 8005e68:	ecbd 8b10 	vpop	{d8-d15}
 8005e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e70:	46c3      	mov	fp, r8
 8005e72:	e745      	b.n	8005d00 <arm_fir_f32+0x354>

08005e74 <arm_cmplx_mag_f32>:
 8005e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e78:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	d07f      	beq.n	8005f80 <arm_cmplx_mag_f32+0x10c>
 8005e80:	2700      	movs	r7, #0
 8005e82:	f100 0420 	add.w	r4, r0, #32
 8005e86:	f101 0510 	add.w	r5, r1, #16
 8005e8a:	4646      	mov	r6, r8
 8005e8c:	e05a      	b.n	8005f44 <arm_cmplx_mag_f32+0xd0>
 8005e8e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005e92:	eeb4 0a40 	vcmp.f32	s0, s0
 8005e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e9a:	f040 80a4 	bne.w	8005fe6 <arm_cmplx_mag_f32+0x172>
 8005e9e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8005ea2:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8005ea6:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8005eaa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005eae:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005eb2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005eb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ebe:	f2c0 808f 	blt.w	8005fe0 <arm_cmplx_mag_f32+0x16c>
 8005ec2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005ec6:	eeb4 0a40 	vcmp.f32	s0, s0
 8005eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ece:	f040 80af 	bne.w	8006030 <arm_cmplx_mag_f32+0x1bc>
 8005ed2:	ed05 0a03 	vstr	s0, [r5, #-12]
 8005ed6:	ed54 7a04 	vldr	s15, [r4, #-16]
 8005eda:	ed14 0a03 	vldr	s0, [r4, #-12]
 8005ede:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005ee2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005ee6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005eea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef2:	db72      	blt.n	8005fda <arm_cmplx_mag_f32+0x166>
 8005ef4:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005ef8:	eeb4 0a40 	vcmp.f32	s0, s0
 8005efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f00:	f040 808c 	bne.w	800601c <arm_cmplx_mag_f32+0x1a8>
 8005f04:	ed05 0a02 	vstr	s0, [r5, #-8]
 8005f08:	ed54 7a02 	vldr	s15, [r4, #-8]
 8005f0c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005f10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005f14:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005f18:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005f1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f24:	db20      	blt.n	8005f68 <arm_cmplx_mag_f32+0xf4>
 8005f26:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005f2a:	eeb4 0a40 	vcmp.f32	s0, s0
 8005f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f32:	d169      	bne.n	8006008 <arm_cmplx_mag_f32+0x194>
 8005f34:	3e01      	subs	r6, #1
 8005f36:	ed05 0a01 	vstr	s0, [r5, #-4]
 8005f3a:	f104 0420 	add.w	r4, r4, #32
 8005f3e:	f105 0510 	add.w	r5, r5, #16
 8005f42:	d019      	beq.n	8005f78 <arm_cmplx_mag_f32+0x104>
 8005f44:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8005f48:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8005f4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005f50:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005f54:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005f58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f60:	da95      	bge.n	8005e8e <arm_cmplx_mag_f32+0x1a>
 8005f62:	f845 7c10 	str.w	r7, [r5, #-16]
 8005f66:	e79c      	b.n	8005ea2 <arm_cmplx_mag_f32+0x2e>
 8005f68:	3e01      	subs	r6, #1
 8005f6a:	f845 7c04 	str.w	r7, [r5, #-4]
 8005f6e:	f104 0420 	add.w	r4, r4, #32
 8005f72:	f105 0510 	add.w	r5, r5, #16
 8005f76:	d1e5      	bne.n	8005f44 <arm_cmplx_mag_f32+0xd0>
 8005f78:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8005f7c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8005f80:	f012 0503 	ands.w	r5, r2, #3
 8005f84:	d026      	beq.n	8005fd4 <arm_cmplx_mag_f32+0x160>
 8005f86:	2600      	movs	r6, #0
 8005f88:	f100 0408 	add.w	r4, r0, #8
 8005f8c:	e00c      	b.n	8005fa8 <arm_cmplx_mag_f32+0x134>
 8005f8e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005f92:	eeb4 0a40 	vcmp.f32	s0, s0
 8005f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9a:	d12e      	bne.n	8005ffa <arm_cmplx_mag_f32+0x186>
 8005f9c:	3d01      	subs	r5, #1
 8005f9e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8005fa2:	f104 0408 	add.w	r4, r4, #8
 8005fa6:	d015      	beq.n	8005fd4 <arm_cmplx_mag_f32+0x160>
 8005fa8:	ed54 7a02 	vldr	s15, [r4, #-8]
 8005fac:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005fb0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005fb4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005fb8:	3104      	adds	r1, #4
 8005fba:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005fbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc6:	dae2      	bge.n	8005f8e <arm_cmplx_mag_f32+0x11a>
 8005fc8:	3d01      	subs	r5, #1
 8005fca:	f841 6c04 	str.w	r6, [r1, #-4]
 8005fce:	f104 0408 	add.w	r4, r4, #8
 8005fd2:	d1e9      	bne.n	8005fa8 <arm_cmplx_mag_f32+0x134>
 8005fd4:	b004      	add	sp, #16
 8005fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fda:	f845 7c08 	str.w	r7, [r5, #-8]
 8005fde:	e793      	b.n	8005f08 <arm_cmplx_mag_f32+0x94>
 8005fe0:	f845 7c0c 	str.w	r7, [r5, #-12]
 8005fe4:	e777      	b.n	8005ed6 <arm_cmplx_mag_f32+0x62>
 8005fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8005fea:	9203      	str	r2, [sp, #12]
 8005fec:	9102      	str	r1, [sp, #8]
 8005fee:	9001      	str	r0, [sp, #4]
 8005ff0:	f003 fb40 	bl	8009674 <sqrtf>
 8005ff4:	a801      	add	r0, sp, #4
 8005ff6:	c807      	ldmia	r0, {r0, r1, r2}
 8005ff8:	e751      	b.n	8005e9e <arm_cmplx_mag_f32+0x2a>
 8005ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8005ffe:	9101      	str	r1, [sp, #4]
 8006000:	f003 fb38 	bl	8009674 <sqrtf>
 8006004:	9901      	ldr	r1, [sp, #4]
 8006006:	e7c9      	b.n	8005f9c <arm_cmplx_mag_f32+0x128>
 8006008:	eeb0 0a67 	vmov.f32	s0, s15
 800600c:	9203      	str	r2, [sp, #12]
 800600e:	9102      	str	r1, [sp, #8]
 8006010:	9001      	str	r0, [sp, #4]
 8006012:	f003 fb2f 	bl	8009674 <sqrtf>
 8006016:	a801      	add	r0, sp, #4
 8006018:	c807      	ldmia	r0, {r0, r1, r2}
 800601a:	e78b      	b.n	8005f34 <arm_cmplx_mag_f32+0xc0>
 800601c:	eeb0 0a67 	vmov.f32	s0, s15
 8006020:	9203      	str	r2, [sp, #12]
 8006022:	9102      	str	r1, [sp, #8]
 8006024:	9001      	str	r0, [sp, #4]
 8006026:	f003 fb25 	bl	8009674 <sqrtf>
 800602a:	a801      	add	r0, sp, #4
 800602c:	c807      	ldmia	r0, {r0, r1, r2}
 800602e:	e769      	b.n	8005f04 <arm_cmplx_mag_f32+0x90>
 8006030:	eeb0 0a67 	vmov.f32	s0, s15
 8006034:	9203      	str	r2, [sp, #12]
 8006036:	9102      	str	r1, [sp, #8]
 8006038:	9001      	str	r0, [sp, #4]
 800603a:	f003 fb1b 	bl	8009674 <sqrtf>
 800603e:	a801      	add	r0, sp, #4
 8006040:	c807      	ldmia	r0, {r0, r1, r2}
 8006042:	e746      	b.n	8005ed2 <arm_cmplx_mag_f32+0x5e>

08006044 <arm_cos_f32>:
 8006044:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80060b8 <arm_cos_f32+0x74>
 8006048:	ee20 0a27 	vmul.f32	s0, s0, s15
 800604c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006050:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006054:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800605c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006060:	d504      	bpl.n	800606c <arm_cos_f32+0x28>
 8006062:	ee17 3a90 	vmov	r3, s15
 8006066:	3b01      	subs	r3, #1
 8006068:	ee07 3a90 	vmov	s15, r3
 800606c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006070:	eddf 6a12 	vldr	s13, [pc, #72]	; 80060bc <arm_cos_f32+0x78>
 8006074:	4a12      	ldr	r2, [pc, #72]	; (80060c0 <arm_cos_f32+0x7c>)
 8006076:	ee30 0a67 	vsub.f32	s0, s0, s15
 800607a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800607e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006082:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006086:	ee17 3a90 	vmov	r3, s15
 800608a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800609a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800609e:	edd1 6a01 	vldr	s13, [r1, #4]
 80060a2:	ed91 0a00 	vldr	s0, [r1]
 80060a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80060ae:	ee27 0a00 	vmul.f32	s0, s14, s0
 80060b2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80060b6:	4770      	bx	lr
 80060b8:	3e22f983 	.word	0x3e22f983
 80060bc:	44000000 	.word	0x44000000
 80060c0:	08018504 	.word	0x08018504

080060c4 <arm_scale_f32>:
 80060c4:	b470      	push	{r4, r5, r6}
 80060c6:	0896      	lsrs	r6, r2, #2
 80060c8:	d025      	beq.n	8006116 <arm_scale_f32+0x52>
 80060ca:	f100 0410 	add.w	r4, r0, #16
 80060ce:	f101 0310 	add.w	r3, r1, #16
 80060d2:	4635      	mov	r5, r6
 80060d4:	ed14 6a04 	vldr	s12, [r4, #-16]
 80060d8:	ed54 6a03 	vldr	s13, [r4, #-12]
 80060dc:	ed14 7a02 	vldr	s14, [r4, #-8]
 80060e0:	ed54 7a01 	vldr	s15, [r4, #-4]
 80060e4:	ee26 6a00 	vmul.f32	s12, s12, s0
 80060e8:	ee66 6a80 	vmul.f32	s13, s13, s0
 80060ec:	ee20 7a07 	vmul.f32	s14, s0, s14
 80060f0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80060f4:	3d01      	subs	r5, #1
 80060f6:	ed03 6a04 	vstr	s12, [r3, #-16]
 80060fa:	ed43 6a03 	vstr	s13, [r3, #-12]
 80060fe:	ed03 7a02 	vstr	s14, [r3, #-8]
 8006102:	ed43 7a01 	vstr	s15, [r3, #-4]
 8006106:	f104 0410 	add.w	r4, r4, #16
 800610a:	f103 0310 	add.w	r3, r3, #16
 800610e:	d1e1      	bne.n	80060d4 <arm_scale_f32+0x10>
 8006110:	0136      	lsls	r6, r6, #4
 8006112:	4430      	add	r0, r6
 8006114:	4431      	add	r1, r6
 8006116:	f012 0203 	ands.w	r2, r2, #3
 800611a:	d007      	beq.n	800612c <arm_scale_f32+0x68>
 800611c:	ecf0 7a01 	vldmia	r0!, {s15}
 8006120:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006124:	3a01      	subs	r2, #1
 8006126:	ece1 7a01 	vstmia	r1!, {s15}
 800612a:	d1f7      	bne.n	800611c <arm_scale_f32+0x58>
 800612c:	bc70      	pop	{r4, r5, r6}
 800612e:	4770      	bx	lr

08006130 <arm_offset_f32>:
 8006130:	b470      	push	{r4, r5, r6}
 8006132:	0896      	lsrs	r6, r2, #2
 8006134:	d025      	beq.n	8006182 <arm_offset_f32+0x52>
 8006136:	f100 0410 	add.w	r4, r0, #16
 800613a:	f101 0310 	add.w	r3, r1, #16
 800613e:	4635      	mov	r5, r6
 8006140:	ed14 6a04 	vldr	s12, [r4, #-16]
 8006144:	ed54 6a03 	vldr	s13, [r4, #-12]
 8006148:	ed14 7a02 	vldr	s14, [r4, #-8]
 800614c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006150:	ee36 6a00 	vadd.f32	s12, s12, s0
 8006154:	ee76 6a80 	vadd.f32	s13, s13, s0
 8006158:	ee30 7a07 	vadd.f32	s14, s0, s14
 800615c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006160:	3d01      	subs	r5, #1
 8006162:	ed03 6a04 	vstr	s12, [r3, #-16]
 8006166:	ed43 6a03 	vstr	s13, [r3, #-12]
 800616a:	ed03 7a02 	vstr	s14, [r3, #-8]
 800616e:	ed43 7a01 	vstr	s15, [r3, #-4]
 8006172:	f104 0410 	add.w	r4, r4, #16
 8006176:	f103 0310 	add.w	r3, r3, #16
 800617a:	d1e1      	bne.n	8006140 <arm_offset_f32+0x10>
 800617c:	0136      	lsls	r6, r6, #4
 800617e:	4430      	add	r0, r6
 8006180:	4431      	add	r1, r6
 8006182:	f012 0203 	ands.w	r2, r2, #3
 8006186:	d007      	beq.n	8006198 <arm_offset_f32+0x68>
 8006188:	ecf0 7a01 	vldmia	r0!, {s15}
 800618c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006190:	3a01      	subs	r2, #1
 8006192:	ece1 7a01 	vstmia	r1!, {s15}
 8006196:	d1f7      	bne.n	8006188 <arm_offset_f32+0x58>
 8006198:	bc70      	pop	{r4, r5, r6}
 800619a:	4770      	bx	lr

0800619c <arm_mult_f32>:
 800619c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800619e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 80061a2:	d033      	beq.n	800620c <arm_mult_f32+0x70>
 80061a4:	f100 0610 	add.w	r6, r0, #16
 80061a8:	f101 0510 	add.w	r5, r1, #16
 80061ac:	f102 0410 	add.w	r4, r2, #16
 80061b0:	4677      	mov	r7, lr
 80061b2:	ed16 6a04 	vldr	s12, [r6, #-16]
 80061b6:	ed55 4a04 	vldr	s9, [r5, #-16]
 80061ba:	ed56 6a02 	vldr	s13, [r6, #-8]
 80061be:	ed15 5a02 	vldr	s10, [r5, #-8]
 80061c2:	ed16 7a03 	vldr	s14, [r6, #-12]
 80061c6:	ed55 5a03 	vldr	s11, [r5, #-12]
 80061ca:	ed56 7a01 	vldr	s15, [r6, #-4]
 80061ce:	ee26 6a24 	vmul.f32	s12, s12, s9
 80061d2:	ee66 6a85 	vmul.f32	s13, s13, s10
 80061d6:	ed04 6a04 	vstr	s12, [r4, #-16]
 80061da:	ed15 6a01 	vldr	s12, [r5, #-4]
 80061de:	ed44 6a02 	vstr	s13, [r4, #-8]
 80061e2:	ee27 7a25 	vmul.f32	s14, s14, s11
 80061e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80061ea:	3f01      	subs	r7, #1
 80061ec:	ed04 7a03 	vstr	s14, [r4, #-12]
 80061f0:	ed44 7a01 	vstr	s15, [r4, #-4]
 80061f4:	f106 0610 	add.w	r6, r6, #16
 80061f8:	f105 0510 	add.w	r5, r5, #16
 80061fc:	f104 0410 	add.w	r4, r4, #16
 8006200:	d1d7      	bne.n	80061b2 <arm_mult_f32+0x16>
 8006202:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006206:	4420      	add	r0, r4
 8006208:	4421      	add	r1, r4
 800620a:	4422      	add	r2, r4
 800620c:	f013 0303 	ands.w	r3, r3, #3
 8006210:	d009      	beq.n	8006226 <arm_mult_f32+0x8a>
 8006212:	ecf0 7a01 	vldmia	r0!, {s15}
 8006216:	ecb1 7a01 	vldmia	r1!, {s14}
 800621a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800621e:	3b01      	subs	r3, #1
 8006220:	ece2 7a01 	vstmia	r2!, {s15}
 8006224:	d1f5      	bne.n	8006212 <arm_mult_f32+0x76>
 8006226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006228 <arm_radix8_butterfly_f32>:
 8006228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800622c:	ed2d 8b10 	vpush	{d8-d15}
 8006230:	461c      	mov	r4, r3
 8006232:	b09d      	sub	sp, #116	; 0x74
 8006234:	4603      	mov	r3, r0
 8006236:	3304      	adds	r3, #4
 8006238:	ed9f bac4 	vldr	s22, [pc, #784]	; 800654c <arm_radix8_butterfly_f32+0x324>
 800623c:	9019      	str	r0, [sp, #100]	; 0x64
 800623e:	921a      	str	r2, [sp, #104]	; 0x68
 8006240:	468b      	mov	fp, r1
 8006242:	931b      	str	r3, [sp, #108]	; 0x6c
 8006244:	468a      	mov	sl, r1
 8006246:	46a1      	mov	r9, r4
 8006248:	4607      	mov	r7, r0
 800624a:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800624e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8006252:	eb03 0508 	add.w	r5, r3, r8
 8006256:	195c      	adds	r4, r3, r5
 8006258:	00de      	lsls	r6, r3, #3
 800625a:	191a      	adds	r2, r3, r4
 800625c:	9600      	str	r6, [sp, #0]
 800625e:	1898      	adds	r0, r3, r2
 8006260:	4619      	mov	r1, r3
 8006262:	9e00      	ldr	r6, [sp, #0]
 8006264:	9311      	str	r3, [sp, #68]	; 0x44
 8006266:	4401      	add	r1, r0
 8006268:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800626c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8006270:	19be      	adds	r6, r7, r6
 8006272:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8006276:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800627a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800627e:	9f00      	ldr	r7, [sp, #0]
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	eb06 0e07 	add.w	lr, r6, r7
 8006286:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006288:	9302      	str	r3, [sp, #8]
 800628a:	3204      	adds	r2, #4
 800628c:	3104      	adds	r1, #4
 800628e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006292:	f04f 0c00 	mov.w	ip, #0
 8006296:	edde 7a00 	vldr	s15, [lr]
 800629a:	edd6 6a00 	vldr	s13, [r6]
 800629e:	ed95 2a00 	vldr	s4, [r5]
 80062a2:	ed17 aa01 	vldr	s20, [r7, #-4]
 80062a6:	edd4 4a00 	vldr	s9, [r4]
 80062aa:	ed90 5a00 	vldr	s10, [r0]
 80062ae:	ed12 7a01 	vldr	s14, [r2, #-4]
 80062b2:	ed51 0a01 	vldr	s1, [r1, #-4]
 80062b6:	ee77 8a85 	vadd.f32	s17, s15, s10
 80062ba:	ee76 3a87 	vadd.f32	s7, s13, s14
 80062be:	ee32 4a20 	vadd.f32	s8, s4, s1
 80062c2:	ee3a 3a24 	vadd.f32	s6, s20, s9
 80062c6:	ee33 6a84 	vadd.f32	s12, s7, s8
 80062ca:	ee73 5a28 	vadd.f32	s11, s6, s17
 80062ce:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80062d2:	ee75 6a86 	vadd.f32	s13, s11, s12
 80062d6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80062da:	ed47 6a01 	vstr	s13, [r7, #-4]
 80062de:	edc4 5a00 	vstr	s11, [r4]
 80062e2:	ed92 9a00 	vldr	s18, [r2]
 80062e6:	ed95 1a01 	vldr	s2, [r5, #4]
 80062ea:	edd6 5a01 	vldr	s11, [r6, #4]
 80062ee:	ed91 6a00 	vldr	s12, [r1]
 80062f2:	edd7 2a00 	vldr	s5, [r7]
 80062f6:	edd4 1a01 	vldr	s3, [r4, #4]
 80062fa:	edde 6a01 	vldr	s13, [lr, #4]
 80062fe:	edd0 9a01 	vldr	s19, [r0, #4]
 8006302:	ee72 0a60 	vsub.f32	s1, s4, s1
 8006306:	ee71 aa46 	vsub.f32	s21, s2, s12
 800630a:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800630e:	ee37 0a60 	vsub.f32	s0, s14, s1
 8006312:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8006316:	ee37 7a20 	vadd.f32	s14, s14, s1
 800631a:	ee32 2a6a 	vsub.f32	s4, s4, s21
 800631e:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8006322:	ee75 5a89 	vadd.f32	s11, s11, s18
 8006326:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800632a:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800632e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8006332:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8006336:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800633a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800633e:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8006342:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8006346:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800634a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800634e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8006352:	ee36 0a88 	vadd.f32	s0, s13, s16
 8006356:	ee75 8a86 	vadd.f32	s17, s11, s12
 800635a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800635e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006362:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8006366:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800636a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800636e:	ee75 4a27 	vadd.f32	s9, s10, s15
 8006372:	ee71 5a49 	vsub.f32	s11, s2, s18
 8006376:	ee31 2a09 	vadd.f32	s4, s2, s18
 800637a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800637e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8006382:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8006386:	ee73 0a06 	vadd.f32	s1, s6, s12
 800638a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800638e:	ee36 5a87 	vadd.f32	s10, s13, s14
 8006392:	ee32 8a28 	vadd.f32	s16, s4, s17
 8006396:	ee33 6a46 	vsub.f32	s12, s6, s12
 800639a:	ee34 4a25 	vadd.f32	s8, s8, s11
 800639e:	ee33 3a80 	vadd.f32	s6, s7, s0
 80063a2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80063a6:	ee71 5a64 	vsub.f32	s11, s2, s9
 80063aa:	ee72 6ae7 	vsub.f32	s13, s5, s15
 80063ae:	ee32 2a68 	vsub.f32	s4, s4, s17
 80063b2:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80063b6:	ee74 4a81 	vadd.f32	s9, s9, s2
 80063ba:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80063be:	44dc      	add	ip, fp
 80063c0:	45e2      	cmp	sl, ip
 80063c2:	ed87 8a00 	vstr	s16, [r7]
 80063c6:	ed84 2a01 	vstr	s4, [r4, #4]
 80063ca:	441f      	add	r7, r3
 80063cc:	edce 0a00 	vstr	s1, [lr]
 80063d0:	441c      	add	r4, r3
 80063d2:	ed80 6a00 	vstr	s12, [r0]
 80063d6:	edce 1a01 	vstr	s3, [lr, #4]
 80063da:	ed80 4a01 	vstr	s8, [r0, #4]
 80063de:	449e      	add	lr, r3
 80063e0:	ed86 3a00 	vstr	s6, [r6]
 80063e4:	4418      	add	r0, r3
 80063e6:	ed41 3a01 	vstr	s7, [r1, #-4]
 80063ea:	ed02 5a01 	vstr	s10, [r2, #-4]
 80063ee:	ed85 7a00 	vstr	s14, [r5]
 80063f2:	edc6 5a01 	vstr	s11, [r6, #4]
 80063f6:	edc1 4a00 	vstr	s9, [r1]
 80063fa:	441e      	add	r6, r3
 80063fc:	edc2 6a00 	vstr	s13, [r2]
 8006400:	4419      	add	r1, r3
 8006402:	edc5 7a01 	vstr	s15, [r5, #4]
 8006406:	441a      	add	r2, r3
 8006408:	441d      	add	r5, r3
 800640a:	f63f af44 	bhi.w	8006296 <arm_radix8_butterfly_f32+0x6e>
 800640e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006410:	2a07      	cmp	r2, #7
 8006412:	f240 81f5 	bls.w	8006800 <arm_radix8_butterfly_f32+0x5d8>
 8006416:	f108 0101 	add.w	r1, r8, #1
 800641a:	188f      	adds	r7, r1, r2
 800641c:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8006420:	19d6      	adds	r6, r2, r7
 8006422:	eb08 0c09 	add.w	ip, r8, r9
 8006426:	1994      	adds	r4, r2, r6
 8006428:	eb0c 0e09 	add.w	lr, ip, r9
 800642c:	4610      	mov	r0, r2
 800642e:	9701      	str	r7, [sp, #4]
 8006430:	4420      	add	r0, r4
 8006432:	eb0e 0709 	add.w	r7, lr, r9
 8006436:	1815      	adds	r5, r2, r0
 8006438:	eb07 0209 	add.w	r2, r7, r9
 800643c:	9203      	str	r2, [sp, #12]
 800643e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006440:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006444:	9117      	str	r1, [sp, #92]	; 0x5c
 8006446:	440a      	add	r2, r1
 8006448:	9900      	ldr	r1, [sp, #0]
 800644a:	3108      	adds	r1, #8
 800644c:	9100      	str	r1, [sp, #0]
 800644e:	9902      	ldr	r1, [sp, #8]
 8006450:	3108      	adds	r1, #8
 8006452:	9102      	str	r1, [sp, #8]
 8006454:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006456:	00ff      	lsls	r7, r7, #3
 8006458:	9715      	str	r7, [sp, #84]	; 0x54
 800645a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800645e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006462:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8006466:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8006468:	9903      	ldr	r1, [sp, #12]
 800646a:	19d7      	adds	r7, r2, r7
 800646c:	00c9      	lsls	r1, r1, #3
 800646e:	9114      	str	r1, [sp, #80]	; 0x50
 8006470:	9710      	str	r7, [sp, #64]	; 0x40
 8006472:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006474:	9f00      	ldr	r7, [sp, #0]
 8006476:	19cf      	adds	r7, r1, r7
 8006478:	970d      	str	r7, [sp, #52]	; 0x34
 800647a:	9f02      	ldr	r7, [sp, #8]
 800647c:	19cf      	adds	r7, r1, r7
 800647e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8006482:	970c      	str	r7, [sp, #48]	; 0x30
 8006484:	9f01      	ldr	r7, [sp, #4]
 8006486:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800648a:	3504      	adds	r5, #4
 800648c:	3004      	adds	r0, #4
 800648e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8006492:	9508      	str	r5, [sp, #32]
 8006494:	9009      	str	r0, [sp, #36]	; 0x24
 8006496:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8006498:	981a      	ldr	r0, [sp, #104]	; 0x68
 800649a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800649e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80064a2:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 80064a6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80064a8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 80064ac:	1945      	adds	r5, r0, r5
 80064ae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80064b2:	460f      	mov	r7, r1
 80064b4:	3404      	adds	r4, #4
 80064b6:	4641      	mov	r1, r8
 80064b8:	1841      	adds	r1, r0, r1
 80064ba:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80064be:	940a      	str	r4, [sp, #40]	; 0x28
 80064c0:	eb00 0c06 	add.w	ip, r0, r6
 80064c4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80064c8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80064ca:	9506      	str	r5, [sp, #24]
 80064cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80064ce:	9105      	str	r1, [sp, #20]
 80064d0:	4639      	mov	r1, r7
 80064d2:	1905      	adds	r5, r0, r4
 80064d4:	3108      	adds	r1, #8
 80064d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80064d8:	9507      	str	r5, [sp, #28]
 80064da:	910f      	str	r1, [sp, #60]	; 0x3c
 80064dc:	ea4f 1509 	mov.w	r5, r9, lsl #4
 80064e0:	2101      	movs	r1, #1
 80064e2:	eb00 0e06 	add.w	lr, r0, r6
 80064e6:	9518      	str	r5, [sp, #96]	; 0x60
 80064e8:	9404      	str	r4, [sp, #16]
 80064ea:	9103      	str	r1, [sp, #12]
 80064ec:	4620      	mov	r0, r4
 80064ee:	4689      	mov	r9, r1
 80064f0:	9e06      	ldr	r6, [sp, #24]
 80064f2:	ed90 fa00 	vldr	s30, [r0]
 80064f6:	edd6 7a01 	vldr	s15, [r6, #4]
 80064fa:	edd0 ba01 	vldr	s23, [r0, #4]
 80064fe:	edcd 7a00 	vstr	s15, [sp]
 8006502:	a80d      	add	r0, sp, #52	; 0x34
 8006504:	edde 7a01 	vldr	s15, [lr, #4]
 8006508:	9c05      	ldr	r4, [sp, #20]
 800650a:	9d07      	ldr	r5, [sp, #28]
 800650c:	edd2 fa00 	vldr	s31, [r2]
 8006510:	ed92 ca01 	vldr	s24, [r2, #4]
 8006514:	edcd 7a01 	vstr	s15, [sp, #4]
 8006518:	c807      	ldmia	r0, {r0, r1, r2}
 800651a:	eddc 7a01 	vldr	s15, [ip, #4]
 800651e:	edd4 ea00 	vldr	s29, [r4]
 8006522:	ed95 ea00 	vldr	s28, [r5]
 8006526:	edd6 da00 	vldr	s27, [r6]
 800652a:	edd4 aa01 	vldr	s21, [r4, #4]
 800652e:	ed95 aa01 	vldr	s20, [r5, #4]
 8006532:	ed9e da00 	vldr	s26, [lr]
 8006536:	eddc ca00 	vldr	s25, [ip]
 800653a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800653e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006540:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006542:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006544:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006546:	edcd 7a02 	vstr	s15, [sp, #8]
 800654a:	e001      	b.n	8006550 <arm_radix8_butterfly_f32+0x328>
 800654c:	3f3504f3 	.word	0x3f3504f3
 8006550:	ed16 6a01 	vldr	s12, [r6, #-4]
 8006554:	ed91 5a00 	vldr	s10, [r1]
 8006558:	ed57 9a01 	vldr	s19, [r7, #-4]
 800655c:	edd5 7a00 	vldr	s15, [r5]
 8006560:	ed18 7a01 	vldr	s14, [r8, #-4]
 8006564:	edd2 3a00 	vldr	s7, [r2]
 8006568:	ed94 3a00 	vldr	s6, [r4]
 800656c:	ed90 2a00 	vldr	s4, [r0]
 8006570:	ed92 0a01 	vldr	s0, [r2, #4]
 8006574:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006578:	ee32 1a06 	vadd.f32	s2, s4, s12
 800657c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8006580:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006584:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006588:	ee71 6a24 	vadd.f32	s13, s2, s9
 800658c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006590:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006594:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006598:	ed82 6a00 	vstr	s12, [r2]
 800659c:	edd5 8a01 	vldr	s17, [r5, #4]
 80065a0:	ed90 9a01 	vldr	s18, [r0, #4]
 80065a4:	edd6 2a00 	vldr	s5, [r6]
 80065a8:	ed98 7a00 	vldr	s14, [r8]
 80065ac:	edd4 0a01 	vldr	s1, [r4, #4]
 80065b0:	ed91 6a01 	vldr	s12, [r1, #4]
 80065b4:	edd7 5a00 	vldr	s11, [r7]
 80065b8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80065bc:	ee33 3a69 	vsub.f32	s6, s6, s19
 80065c0:	ee39 5a62 	vsub.f32	s10, s18, s5
 80065c4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80065c8:	ee38 4a44 	vsub.f32	s8, s16, s8
 80065cc:	ee38 7a87 	vadd.f32	s14, s17, s14
 80065d0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80065d4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80065d8:	ee75 8a69 	vsub.f32	s17, s10, s19
 80065dc:	ee32 9a27 	vadd.f32	s18, s4, s15
 80065e0:	ee35 5a29 	vadd.f32	s10, s10, s19
 80065e4:	ee72 7a67 	vsub.f32	s15, s4, s15
 80065e8:	ee30 2a06 	vadd.f32	s4, s0, s12
 80065ec:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80065f0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80065f4:	ee32 9a08 	vadd.f32	s18, s4, s16
 80065f8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80065fc:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006600:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006604:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006608:	ee32 1a87 	vadd.f32	s2, s5, s14
 800660c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006610:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006614:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006618:	ee73 0a29 	vadd.f32	s1, s6, s19
 800661c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006620:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006624:	ee32 7a64 	vsub.f32	s14, s4, s9
 8006628:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800662c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006630:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006634:	ee75 8a85 	vadd.f32	s17, s11, s10
 8006638:	ee74 3a22 	vadd.f32	s7, s8, s5
 800663c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8006640:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006644:	ee79 1a41 	vsub.f32	s3, s18, s2
 8006648:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800664c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8006650:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006654:	ee74 4a82 	vadd.f32	s9, s9, s4
 8006658:	ee30 4a60 	vsub.f32	s8, s0, s1
 800665c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8006660:	ee30 0a80 	vadd.f32	s0, s1, s0
 8006664:	ee77 9a85 	vadd.f32	s19, s15, s10
 8006668:	ee33 6a06 	vadd.f32	s12, s6, s12
 800666c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006670:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8006674:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8006678:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800667c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8006680:	ee39 1a01 	vadd.f32	s2, s18, s2
 8006684:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8006688:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800668c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8006690:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8006694:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8006698:	ee35 3a03 	vadd.f32	s6, s10, s6
 800669c:	ee72 6a66 	vsub.f32	s13, s4, s13
 80066a0:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80066a4:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80066a8:	ed9d 4a02 	vldr	s8, [sp, #8]
 80066ac:	ed82 1a01 	vstr	s2, [r2, #4]
 80066b0:	ee77 3a63 	vsub.f32	s7, s14, s7
 80066b4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80066b8:	ed9d 7a01 	vldr	s14, [sp, #4]
 80066bc:	ed81 3a00 	vstr	s6, [r1]
 80066c0:	ee30 9a89 	vadd.f32	s18, s1, s18
 80066c4:	ee32 2a05 	vadd.f32	s4, s4, s10
 80066c8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80066cc:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80066d0:	ee67 2a22 	vmul.f32	s5, s14, s5
 80066d4:	ee64 1a00 	vmul.f32	s3, s8, s0
 80066d8:	ee27 7a24 	vmul.f32	s14, s14, s9
 80066dc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80066e0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80066e4:	ee64 8a28 	vmul.f32	s17, s8, s17
 80066e8:	ed9d 4a00 	vldr	s8, [sp]
 80066ec:	edc1 6a01 	vstr	s13, [r1, #4]
 80066f0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80066f4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80066f8:	ee64 9a29 	vmul.f32	s19, s8, s19
 80066fc:	ee24 4a25 	vmul.f32	s8, s8, s11
 8006700:	ee30 7a87 	vadd.f32	s14, s1, s14
 8006704:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006708:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800670c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8006710:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8006714:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8006718:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800671c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8006720:	ee75 1a21 	vadd.f32	s3, s10, s3
 8006724:	ee30 0a68 	vsub.f32	s0, s0, s17
 8006728:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800672c:	ee70 0a84 	vadd.f32	s1, s1, s8
 8006730:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006734:	44d9      	add	r9, fp
 8006736:	45ca      	cmp	sl, r9
 8006738:	ed84 9a00 	vstr	s18, [r4]
 800673c:	edc4 3a01 	vstr	s7, [r4, #4]
 8006740:	441a      	add	r2, r3
 8006742:	ed07 7a01 	vstr	s14, [r7, #-4]
 8006746:	edc7 2a00 	vstr	s5, [r7]
 800674a:	4419      	add	r1, r3
 800674c:	ed80 2a00 	vstr	s4, [r0]
 8006750:	ed80 8a01 	vstr	s16, [r0, #4]
 8006754:	441c      	add	r4, r3
 8006756:	ed48 1a01 	vstr	s3, [r8, #-4]
 800675a:	ed88 0a00 	vstr	s0, [r8]
 800675e:	441f      	add	r7, r3
 8006760:	ed46 4a01 	vstr	s9, [r6, #-4]
 8006764:	4418      	add	r0, r3
 8006766:	edc6 9a00 	vstr	s19, [r6]
 800676a:	4498      	add	r8, r3
 800676c:	edc5 0a00 	vstr	s1, [r5]
 8006770:	ed85 6a01 	vstr	s12, [r5, #4]
 8006774:	441e      	add	r6, r3
 8006776:	441d      	add	r5, r3
 8006778:	f63f aeea 	bhi.w	8006550 <arm_radix8_butterfly_f32+0x328>
 800677c:	9a03      	ldr	r2, [sp, #12]
 800677e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006780:	3201      	adds	r2, #1
 8006782:	4611      	mov	r1, r2
 8006784:	9203      	str	r2, [sp, #12]
 8006786:	9a04      	ldr	r2, [sp, #16]
 8006788:	4402      	add	r2, r0
 800678a:	9204      	str	r2, [sp, #16]
 800678c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800678e:	9a05      	ldr	r2, [sp, #20]
 8006790:	4402      	add	r2, r0
 8006792:	9205      	str	r2, [sp, #20]
 8006794:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006796:	9a07      	ldr	r2, [sp, #28]
 8006798:	4402      	add	r2, r0
 800679a:	9207      	str	r2, [sp, #28]
 800679c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800679e:	9a06      	ldr	r2, [sp, #24]
 80067a0:	4402      	add	r2, r0
 80067a2:	9206      	str	r2, [sp, #24]
 80067a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80067a6:	4496      	add	lr, r2
 80067a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80067aa:	4494      	add	ip, r2
 80067ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067ae:	3208      	adds	r2, #8
 80067b0:	920f      	str	r2, [sp, #60]	; 0x3c
 80067b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067b4:	3208      	adds	r2, #8
 80067b6:	920e      	str	r2, [sp, #56]	; 0x38
 80067b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067ba:	3208      	adds	r2, #8
 80067bc:	920d      	str	r2, [sp, #52]	; 0x34
 80067be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067c0:	3208      	adds	r2, #8
 80067c2:	920c      	str	r2, [sp, #48]	; 0x30
 80067c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067c6:	3208      	adds	r2, #8
 80067c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80067ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067cc:	3208      	adds	r2, #8
 80067ce:	920a      	str	r2, [sp, #40]	; 0x28
 80067d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067d2:	3208      	adds	r2, #8
 80067d4:	9209      	str	r2, [sp, #36]	; 0x24
 80067d6:	9a08      	ldr	r2, [sp, #32]
 80067d8:	3208      	adds	r2, #8
 80067da:	9208      	str	r2, [sp, #32]
 80067dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80067de:	9811      	ldr	r0, [sp, #68]	; 0x44
 80067e0:	4288      	cmp	r0, r1
 80067e2:	4622      	mov	r2, r4
 80067e4:	d007      	beq.n	80067f6 <arm_radix8_butterfly_f32+0x5ce>
 80067e6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80067e8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80067ec:	4621      	mov	r1, r4
 80067ee:	4401      	add	r1, r0
 80067f0:	9110      	str	r1, [sp, #64]	; 0x40
 80067f2:	9804      	ldr	r0, [sp, #16]
 80067f4:	e67c      	b.n	80064f0 <arm_radix8_butterfly_f32+0x2c8>
 80067f6:	4683      	mov	fp, r0
 80067f8:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 80067fc:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80067fe:	e524      	b.n	800624a <arm_radix8_butterfly_f32+0x22>
 8006800:	b01d      	add	sp, #116	; 0x74
 8006802:	ecbd 8b10 	vpop	{d8-d15}
 8006806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800680a:	bf00      	nop

0800680c <calloc>:
 800680c:	4b02      	ldr	r3, [pc, #8]	; (8006818 <calloc+0xc>)
 800680e:	460a      	mov	r2, r1
 8006810:	4601      	mov	r1, r0
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	f000 b83f 	b.w	8006896 <_calloc_r>
 8006818:	2000001c 	.word	0x2000001c

0800681c <__errno>:
 800681c:	4b01      	ldr	r3, [pc, #4]	; (8006824 <__errno+0x8>)
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	2000001c 	.word	0x2000001c

08006828 <__libc_init_array>:
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	4e0d      	ldr	r6, [pc, #52]	; (8006860 <__libc_init_array+0x38>)
 800682c:	4c0d      	ldr	r4, [pc, #52]	; (8006864 <__libc_init_array+0x3c>)
 800682e:	1ba4      	subs	r4, r4, r6
 8006830:	10a4      	asrs	r4, r4, #2
 8006832:	2500      	movs	r5, #0
 8006834:	42a5      	cmp	r5, r4
 8006836:	d109      	bne.n	800684c <__libc_init_array+0x24>
 8006838:	4e0b      	ldr	r6, [pc, #44]	; (8006868 <__libc_init_array+0x40>)
 800683a:	4c0c      	ldr	r4, [pc, #48]	; (800686c <__libc_init_array+0x44>)
 800683c:	f004 f90a 	bl	800aa54 <_init>
 8006840:	1ba4      	subs	r4, r4, r6
 8006842:	10a4      	asrs	r4, r4, #2
 8006844:	2500      	movs	r5, #0
 8006846:	42a5      	cmp	r5, r4
 8006848:	d105      	bne.n	8006856 <__libc_init_array+0x2e>
 800684a:	bd70      	pop	{r4, r5, r6, pc}
 800684c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006850:	4798      	blx	r3
 8006852:	3501      	adds	r5, #1
 8006854:	e7ee      	b.n	8006834 <__libc_init_array+0xc>
 8006856:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800685a:	4798      	blx	r3
 800685c:	3501      	adds	r5, #1
 800685e:	e7f2      	b.n	8006846 <__libc_init_array+0x1e>
 8006860:	0801ea78 	.word	0x0801ea78
 8006864:	0801ea78 	.word	0x0801ea78
 8006868:	0801ea78 	.word	0x0801ea78
 800686c:	0801ea7c 	.word	0x0801ea7c

08006870 <memcpy>:
 8006870:	b510      	push	{r4, lr}
 8006872:	1e43      	subs	r3, r0, #1
 8006874:	440a      	add	r2, r1
 8006876:	4291      	cmp	r1, r2
 8006878:	d100      	bne.n	800687c <memcpy+0xc>
 800687a:	bd10      	pop	{r4, pc}
 800687c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006884:	e7f7      	b.n	8006876 <memcpy+0x6>

08006886 <memset>:
 8006886:	4402      	add	r2, r0
 8006888:	4603      	mov	r3, r0
 800688a:	4293      	cmp	r3, r2
 800688c:	d100      	bne.n	8006890 <memset+0xa>
 800688e:	4770      	bx	lr
 8006890:	f803 1b01 	strb.w	r1, [r3], #1
 8006894:	e7f9      	b.n	800688a <memset+0x4>

08006896 <_calloc_r>:
 8006896:	b538      	push	{r3, r4, r5, lr}
 8006898:	fb02 f401 	mul.w	r4, r2, r1
 800689c:	4621      	mov	r1, r4
 800689e:	f000 f809 	bl	80068b4 <_malloc_r>
 80068a2:	4605      	mov	r5, r0
 80068a4:	b118      	cbz	r0, 80068ae <_calloc_r+0x18>
 80068a6:	4622      	mov	r2, r4
 80068a8:	2100      	movs	r1, #0
 80068aa:	f7ff ffec 	bl	8006886 <memset>
 80068ae:	4628      	mov	r0, r5
 80068b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080068b4 <_malloc_r>:
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	1ccd      	adds	r5, r1, #3
 80068b8:	f025 0503 	bic.w	r5, r5, #3
 80068bc:	3508      	adds	r5, #8
 80068be:	2d0c      	cmp	r5, #12
 80068c0:	bf38      	it	cc
 80068c2:	250c      	movcc	r5, #12
 80068c4:	2d00      	cmp	r5, #0
 80068c6:	4606      	mov	r6, r0
 80068c8:	db01      	blt.n	80068ce <_malloc_r+0x1a>
 80068ca:	42a9      	cmp	r1, r5
 80068cc:	d903      	bls.n	80068d6 <_malloc_r+0x22>
 80068ce:	230c      	movs	r3, #12
 80068d0:	6033      	str	r3, [r6, #0]
 80068d2:	2000      	movs	r0, #0
 80068d4:	bd70      	pop	{r4, r5, r6, pc}
 80068d6:	f001 fe93 	bl	8008600 <__malloc_lock>
 80068da:	4a23      	ldr	r2, [pc, #140]	; (8006968 <_malloc_r+0xb4>)
 80068dc:	6814      	ldr	r4, [r2, #0]
 80068de:	4621      	mov	r1, r4
 80068e0:	b991      	cbnz	r1, 8006908 <_malloc_r+0x54>
 80068e2:	4c22      	ldr	r4, [pc, #136]	; (800696c <_malloc_r+0xb8>)
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	b91b      	cbnz	r3, 80068f0 <_malloc_r+0x3c>
 80068e8:	4630      	mov	r0, r6
 80068ea:	f000 fd3d 	bl	8007368 <_sbrk_r>
 80068ee:	6020      	str	r0, [r4, #0]
 80068f0:	4629      	mov	r1, r5
 80068f2:	4630      	mov	r0, r6
 80068f4:	f000 fd38 	bl	8007368 <_sbrk_r>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	d126      	bne.n	800694a <_malloc_r+0x96>
 80068fc:	230c      	movs	r3, #12
 80068fe:	6033      	str	r3, [r6, #0]
 8006900:	4630      	mov	r0, r6
 8006902:	f001 fe7e 	bl	8008602 <__malloc_unlock>
 8006906:	e7e4      	b.n	80068d2 <_malloc_r+0x1e>
 8006908:	680b      	ldr	r3, [r1, #0]
 800690a:	1b5b      	subs	r3, r3, r5
 800690c:	d41a      	bmi.n	8006944 <_malloc_r+0x90>
 800690e:	2b0b      	cmp	r3, #11
 8006910:	d90f      	bls.n	8006932 <_malloc_r+0x7e>
 8006912:	600b      	str	r3, [r1, #0]
 8006914:	50cd      	str	r5, [r1, r3]
 8006916:	18cc      	adds	r4, r1, r3
 8006918:	4630      	mov	r0, r6
 800691a:	f001 fe72 	bl	8008602 <__malloc_unlock>
 800691e:	f104 000b 	add.w	r0, r4, #11
 8006922:	1d23      	adds	r3, r4, #4
 8006924:	f020 0007 	bic.w	r0, r0, #7
 8006928:	1ac3      	subs	r3, r0, r3
 800692a:	d01b      	beq.n	8006964 <_malloc_r+0xb0>
 800692c:	425a      	negs	r2, r3
 800692e:	50e2      	str	r2, [r4, r3]
 8006930:	bd70      	pop	{r4, r5, r6, pc}
 8006932:	428c      	cmp	r4, r1
 8006934:	bf0d      	iteet	eq
 8006936:	6863      	ldreq	r3, [r4, #4]
 8006938:	684b      	ldrne	r3, [r1, #4]
 800693a:	6063      	strne	r3, [r4, #4]
 800693c:	6013      	streq	r3, [r2, #0]
 800693e:	bf18      	it	ne
 8006940:	460c      	movne	r4, r1
 8006942:	e7e9      	b.n	8006918 <_malloc_r+0x64>
 8006944:	460c      	mov	r4, r1
 8006946:	6849      	ldr	r1, [r1, #4]
 8006948:	e7ca      	b.n	80068e0 <_malloc_r+0x2c>
 800694a:	1cc4      	adds	r4, r0, #3
 800694c:	f024 0403 	bic.w	r4, r4, #3
 8006950:	42a0      	cmp	r0, r4
 8006952:	d005      	beq.n	8006960 <_malloc_r+0xac>
 8006954:	1a21      	subs	r1, r4, r0
 8006956:	4630      	mov	r0, r6
 8006958:	f000 fd06 	bl	8007368 <_sbrk_r>
 800695c:	3001      	adds	r0, #1
 800695e:	d0cd      	beq.n	80068fc <_malloc_r+0x48>
 8006960:	6025      	str	r5, [r4, #0]
 8006962:	e7d9      	b.n	8006918 <_malloc_r+0x64>
 8006964:	bd70      	pop	{r4, r5, r6, pc}
 8006966:	bf00      	nop
 8006968:	2000b5f8 	.word	0x2000b5f8
 800696c:	2000b5fc 	.word	0x2000b5fc

08006970 <__cvt>:
 8006970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006974:	ec55 4b10 	vmov	r4, r5, d0
 8006978:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800697a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800697e:	2d00      	cmp	r5, #0
 8006980:	460e      	mov	r6, r1
 8006982:	4691      	mov	r9, r2
 8006984:	4619      	mov	r1, r3
 8006986:	bfb8      	it	lt
 8006988:	4622      	movlt	r2, r4
 800698a:	462b      	mov	r3, r5
 800698c:	f027 0720 	bic.w	r7, r7, #32
 8006990:	bfbb      	ittet	lt
 8006992:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006996:	461d      	movlt	r5, r3
 8006998:	2300      	movge	r3, #0
 800699a:	232d      	movlt	r3, #45	; 0x2d
 800699c:	bfb8      	it	lt
 800699e:	4614      	movlt	r4, r2
 80069a0:	2f46      	cmp	r7, #70	; 0x46
 80069a2:	700b      	strb	r3, [r1, #0]
 80069a4:	d004      	beq.n	80069b0 <__cvt+0x40>
 80069a6:	2f45      	cmp	r7, #69	; 0x45
 80069a8:	d100      	bne.n	80069ac <__cvt+0x3c>
 80069aa:	3601      	adds	r6, #1
 80069ac:	2102      	movs	r1, #2
 80069ae:	e000      	b.n	80069b2 <__cvt+0x42>
 80069b0:	2103      	movs	r1, #3
 80069b2:	ab03      	add	r3, sp, #12
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	ab02      	add	r3, sp, #8
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	4632      	mov	r2, r6
 80069bc:	4653      	mov	r3, sl
 80069be:	ec45 4b10 	vmov	d0, r4, r5
 80069c2:	f000 fe59 	bl	8007678 <_dtoa_r>
 80069c6:	2f47      	cmp	r7, #71	; 0x47
 80069c8:	4680      	mov	r8, r0
 80069ca:	d102      	bne.n	80069d2 <__cvt+0x62>
 80069cc:	f019 0f01 	tst.w	r9, #1
 80069d0:	d026      	beq.n	8006a20 <__cvt+0xb0>
 80069d2:	2f46      	cmp	r7, #70	; 0x46
 80069d4:	eb08 0906 	add.w	r9, r8, r6
 80069d8:	d111      	bne.n	80069fe <__cvt+0x8e>
 80069da:	f898 3000 	ldrb.w	r3, [r8]
 80069de:	2b30      	cmp	r3, #48	; 0x30
 80069e0:	d10a      	bne.n	80069f8 <__cvt+0x88>
 80069e2:	2200      	movs	r2, #0
 80069e4:	2300      	movs	r3, #0
 80069e6:	4620      	mov	r0, r4
 80069e8:	4629      	mov	r1, r5
 80069ea:	f7fa f8c9 	bl	8000b80 <__aeabi_dcmpeq>
 80069ee:	b918      	cbnz	r0, 80069f8 <__cvt+0x88>
 80069f0:	f1c6 0601 	rsb	r6, r6, #1
 80069f4:	f8ca 6000 	str.w	r6, [sl]
 80069f8:	f8da 3000 	ldr.w	r3, [sl]
 80069fc:	4499      	add	r9, r3
 80069fe:	2200      	movs	r2, #0
 8006a00:	2300      	movs	r3, #0
 8006a02:	4620      	mov	r0, r4
 8006a04:	4629      	mov	r1, r5
 8006a06:	f7fa f8bb 	bl	8000b80 <__aeabi_dcmpeq>
 8006a0a:	b938      	cbnz	r0, 8006a1c <__cvt+0xac>
 8006a0c:	2230      	movs	r2, #48	; 0x30
 8006a0e:	9b03      	ldr	r3, [sp, #12]
 8006a10:	4599      	cmp	r9, r3
 8006a12:	d905      	bls.n	8006a20 <__cvt+0xb0>
 8006a14:	1c59      	adds	r1, r3, #1
 8006a16:	9103      	str	r1, [sp, #12]
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	e7f8      	b.n	8006a0e <__cvt+0x9e>
 8006a1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a20:	9b03      	ldr	r3, [sp, #12]
 8006a22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a24:	eba3 0308 	sub.w	r3, r3, r8
 8006a28:	4640      	mov	r0, r8
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	b004      	add	sp, #16
 8006a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006a32 <__exponent>:
 8006a32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a34:	4603      	mov	r3, r0
 8006a36:	2900      	cmp	r1, #0
 8006a38:	bfb8      	it	lt
 8006a3a:	4249      	neglt	r1, r1
 8006a3c:	f803 2b02 	strb.w	r2, [r3], #2
 8006a40:	bfb4      	ite	lt
 8006a42:	222d      	movlt	r2, #45	; 0x2d
 8006a44:	222b      	movge	r2, #43	; 0x2b
 8006a46:	2909      	cmp	r1, #9
 8006a48:	7042      	strb	r2, [r0, #1]
 8006a4a:	dd20      	ble.n	8006a8e <__exponent+0x5c>
 8006a4c:	f10d 0207 	add.w	r2, sp, #7
 8006a50:	4617      	mov	r7, r2
 8006a52:	260a      	movs	r6, #10
 8006a54:	fb91 f5f6 	sdiv	r5, r1, r6
 8006a58:	fb06 1115 	mls	r1, r6, r5, r1
 8006a5c:	3130      	adds	r1, #48	; 0x30
 8006a5e:	2d09      	cmp	r5, #9
 8006a60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006a64:	f102 34ff 	add.w	r4, r2, #4294967295
 8006a68:	4629      	mov	r1, r5
 8006a6a:	dc09      	bgt.n	8006a80 <__exponent+0x4e>
 8006a6c:	3130      	adds	r1, #48	; 0x30
 8006a6e:	3a02      	subs	r2, #2
 8006a70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a74:	42ba      	cmp	r2, r7
 8006a76:	461c      	mov	r4, r3
 8006a78:	d304      	bcc.n	8006a84 <__exponent+0x52>
 8006a7a:	1a20      	subs	r0, r4, r0
 8006a7c:	b003      	add	sp, #12
 8006a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a80:	4622      	mov	r2, r4
 8006a82:	e7e7      	b.n	8006a54 <__exponent+0x22>
 8006a84:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006a88:	f803 1b01 	strb.w	r1, [r3], #1
 8006a8c:	e7f2      	b.n	8006a74 <__exponent+0x42>
 8006a8e:	2230      	movs	r2, #48	; 0x30
 8006a90:	461c      	mov	r4, r3
 8006a92:	4411      	add	r1, r2
 8006a94:	f804 2b02 	strb.w	r2, [r4], #2
 8006a98:	7059      	strb	r1, [r3, #1]
 8006a9a:	e7ee      	b.n	8006a7a <__exponent+0x48>

08006a9c <_printf_float>:
 8006a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa0:	b08d      	sub	sp, #52	; 0x34
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006aa8:	4616      	mov	r6, r2
 8006aaa:	461f      	mov	r7, r3
 8006aac:	4605      	mov	r5, r0
 8006aae:	f001 fd2d 	bl	800850c <_localeconv_r>
 8006ab2:	6803      	ldr	r3, [r0, #0]
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7f9 fbea 	bl	8000290 <strlen>
 8006abc:	2300      	movs	r3, #0
 8006abe:	930a      	str	r3, [sp, #40]	; 0x28
 8006ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ac4:	9005      	str	r0, [sp, #20]
 8006ac6:	3307      	adds	r3, #7
 8006ac8:	f023 0307 	bic.w	r3, r3, #7
 8006acc:	f103 0208 	add.w	r2, r3, #8
 8006ad0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ad4:	f8d4 b000 	ldr.w	fp, [r4]
 8006ad8:	f8c8 2000 	str.w	r2, [r8]
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ae4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006ae8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006aec:	9307      	str	r3, [sp, #28]
 8006aee:	f8cd 8018 	str.w	r8, [sp, #24]
 8006af2:	f04f 32ff 	mov.w	r2, #4294967295
 8006af6:	4ba5      	ldr	r3, [pc, #660]	; (8006d8c <_printf_float+0x2f0>)
 8006af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006afc:	f7fa f872 	bl	8000be4 <__aeabi_dcmpun>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	f040 81fb 	bne.w	8006efc <_printf_float+0x460>
 8006b06:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0a:	4ba0      	ldr	r3, [pc, #640]	; (8006d8c <_printf_float+0x2f0>)
 8006b0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b10:	f7fa f84a 	bl	8000ba8 <__aeabi_dcmple>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	f040 81f1 	bne.w	8006efc <_printf_float+0x460>
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	4640      	mov	r0, r8
 8006b20:	4649      	mov	r1, r9
 8006b22:	f7fa f837 	bl	8000b94 <__aeabi_dcmplt>
 8006b26:	b110      	cbz	r0, 8006b2e <_printf_float+0x92>
 8006b28:	232d      	movs	r3, #45	; 0x2d
 8006b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b2e:	4b98      	ldr	r3, [pc, #608]	; (8006d90 <_printf_float+0x2f4>)
 8006b30:	4a98      	ldr	r2, [pc, #608]	; (8006d94 <_printf_float+0x2f8>)
 8006b32:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006b36:	bf8c      	ite	hi
 8006b38:	4690      	movhi	r8, r2
 8006b3a:	4698      	movls	r8, r3
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	f02b 0204 	bic.w	r2, fp, #4
 8006b42:	6123      	str	r3, [r4, #16]
 8006b44:	6022      	str	r2, [r4, #0]
 8006b46:	f04f 0900 	mov.w	r9, #0
 8006b4a:	9700      	str	r7, [sp, #0]
 8006b4c:	4633      	mov	r3, r6
 8006b4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b50:	4621      	mov	r1, r4
 8006b52:	4628      	mov	r0, r5
 8006b54:	f000 f9e2 	bl	8006f1c <_printf_common>
 8006b58:	3001      	adds	r0, #1
 8006b5a:	f040 8093 	bne.w	8006c84 <_printf_float+0x1e8>
 8006b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b62:	b00d      	add	sp, #52	; 0x34
 8006b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b68:	6861      	ldr	r1, [r4, #4]
 8006b6a:	1c4b      	adds	r3, r1, #1
 8006b6c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006b70:	d13f      	bne.n	8006bf2 <_printf_float+0x156>
 8006b72:	2306      	movs	r3, #6
 8006b74:	6063      	str	r3, [r4, #4]
 8006b76:	2300      	movs	r3, #0
 8006b78:	9303      	str	r3, [sp, #12]
 8006b7a:	ab0a      	add	r3, sp, #40	; 0x28
 8006b7c:	9302      	str	r3, [sp, #8]
 8006b7e:	ab09      	add	r3, sp, #36	; 0x24
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	ec49 8b10 	vmov	d0, r8, r9
 8006b86:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b8a:	6022      	str	r2, [r4, #0]
 8006b8c:	f8cd a004 	str.w	sl, [sp, #4]
 8006b90:	6861      	ldr	r1, [r4, #4]
 8006b92:	4628      	mov	r0, r5
 8006b94:	f7ff feec 	bl	8006970 <__cvt>
 8006b98:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006b9c:	2b47      	cmp	r3, #71	; 0x47
 8006b9e:	4680      	mov	r8, r0
 8006ba0:	d109      	bne.n	8006bb6 <_printf_float+0x11a>
 8006ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba4:	1cd8      	adds	r0, r3, #3
 8006ba6:	db02      	blt.n	8006bae <_printf_float+0x112>
 8006ba8:	6862      	ldr	r2, [r4, #4]
 8006baa:	4293      	cmp	r3, r2
 8006bac:	dd57      	ble.n	8006c5e <_printf_float+0x1c2>
 8006bae:	f1aa 0a02 	sub.w	sl, sl, #2
 8006bb2:	fa5f fa8a 	uxtb.w	sl, sl
 8006bb6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006bba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bbc:	d834      	bhi.n	8006c28 <_printf_float+0x18c>
 8006bbe:	3901      	subs	r1, #1
 8006bc0:	4652      	mov	r2, sl
 8006bc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006bc6:	9109      	str	r1, [sp, #36]	; 0x24
 8006bc8:	f7ff ff33 	bl	8006a32 <__exponent>
 8006bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bce:	1883      	adds	r3, r0, r2
 8006bd0:	2a01      	cmp	r2, #1
 8006bd2:	4681      	mov	r9, r0
 8006bd4:	6123      	str	r3, [r4, #16]
 8006bd6:	dc02      	bgt.n	8006bde <_printf_float+0x142>
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	07d1      	lsls	r1, r2, #31
 8006bdc:	d501      	bpl.n	8006be2 <_printf_float+0x146>
 8006bde:	3301      	adds	r3, #1
 8006be0:	6123      	str	r3, [r4, #16]
 8006be2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0af      	beq.n	8006b4a <_printf_float+0xae>
 8006bea:	232d      	movs	r3, #45	; 0x2d
 8006bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf0:	e7ab      	b.n	8006b4a <_printf_float+0xae>
 8006bf2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006bf6:	d002      	beq.n	8006bfe <_printf_float+0x162>
 8006bf8:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006bfc:	d1bb      	bne.n	8006b76 <_printf_float+0xda>
 8006bfe:	b189      	cbz	r1, 8006c24 <_printf_float+0x188>
 8006c00:	2300      	movs	r3, #0
 8006c02:	9303      	str	r3, [sp, #12]
 8006c04:	ab0a      	add	r3, sp, #40	; 0x28
 8006c06:	9302      	str	r3, [sp, #8]
 8006c08:	ab09      	add	r3, sp, #36	; 0x24
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	ec49 8b10 	vmov	d0, r8, r9
 8006c10:	6022      	str	r2, [r4, #0]
 8006c12:	f8cd a004 	str.w	sl, [sp, #4]
 8006c16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f7ff fea8 	bl	8006970 <__cvt>
 8006c20:	4680      	mov	r8, r0
 8006c22:	e7be      	b.n	8006ba2 <_printf_float+0x106>
 8006c24:	2301      	movs	r3, #1
 8006c26:	e7a5      	b.n	8006b74 <_printf_float+0xd8>
 8006c28:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006c2c:	d119      	bne.n	8006c62 <_printf_float+0x1c6>
 8006c2e:	2900      	cmp	r1, #0
 8006c30:	6863      	ldr	r3, [r4, #4]
 8006c32:	dd0c      	ble.n	8006c4e <_printf_float+0x1b2>
 8006c34:	6121      	str	r1, [r4, #16]
 8006c36:	b913      	cbnz	r3, 8006c3e <_printf_float+0x1a2>
 8006c38:	6822      	ldr	r2, [r4, #0]
 8006c3a:	07d2      	lsls	r2, r2, #31
 8006c3c:	d502      	bpl.n	8006c44 <_printf_float+0x1a8>
 8006c3e:	3301      	adds	r3, #1
 8006c40:	440b      	add	r3, r1
 8006c42:	6123      	str	r3, [r4, #16]
 8006c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c46:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c48:	f04f 0900 	mov.w	r9, #0
 8006c4c:	e7c9      	b.n	8006be2 <_printf_float+0x146>
 8006c4e:	b913      	cbnz	r3, 8006c56 <_printf_float+0x1ba>
 8006c50:	6822      	ldr	r2, [r4, #0]
 8006c52:	07d0      	lsls	r0, r2, #31
 8006c54:	d501      	bpl.n	8006c5a <_printf_float+0x1be>
 8006c56:	3302      	adds	r3, #2
 8006c58:	e7f3      	b.n	8006c42 <_printf_float+0x1a6>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e7f1      	b.n	8006c42 <_printf_float+0x1a6>
 8006c5e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c66:	4293      	cmp	r3, r2
 8006c68:	db05      	blt.n	8006c76 <_printf_float+0x1da>
 8006c6a:	6822      	ldr	r2, [r4, #0]
 8006c6c:	6123      	str	r3, [r4, #16]
 8006c6e:	07d1      	lsls	r1, r2, #31
 8006c70:	d5e8      	bpl.n	8006c44 <_printf_float+0x1a8>
 8006c72:	3301      	adds	r3, #1
 8006c74:	e7e5      	b.n	8006c42 <_printf_float+0x1a6>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	bfd4      	ite	le
 8006c7a:	f1c3 0302 	rsble	r3, r3, #2
 8006c7e:	2301      	movgt	r3, #1
 8006c80:	4413      	add	r3, r2
 8006c82:	e7de      	b.n	8006c42 <_printf_float+0x1a6>
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	055a      	lsls	r2, r3, #21
 8006c88:	d407      	bmi.n	8006c9a <_printf_float+0x1fe>
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	4642      	mov	r2, r8
 8006c8e:	4631      	mov	r1, r6
 8006c90:	4628      	mov	r0, r5
 8006c92:	47b8      	blx	r7
 8006c94:	3001      	adds	r0, #1
 8006c96:	d12b      	bne.n	8006cf0 <_printf_float+0x254>
 8006c98:	e761      	b.n	8006b5e <_printf_float+0xc2>
 8006c9a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006c9e:	f240 80e2 	bls.w	8006e66 <_printf_float+0x3ca>
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006caa:	f7f9 ff69 	bl	8000b80 <__aeabi_dcmpeq>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d03c      	beq.n	8006d2c <_printf_float+0x290>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	4a38      	ldr	r2, [pc, #224]	; (8006d98 <_printf_float+0x2fc>)
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b8      	blx	r7
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	f43f af4e 	beq.w	8006b5e <_printf_float+0xc2>
 8006cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	db02      	blt.n	8006cd0 <_printf_float+0x234>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	07d8      	lsls	r0, r3, #31
 8006cce:	d50f      	bpl.n	8006cf0 <_printf_float+0x254>
 8006cd0:	9b05      	ldr	r3, [sp, #20]
 8006cd2:	9a04      	ldr	r2, [sp, #16]
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	47b8      	blx	r7
 8006cda:	3001      	adds	r0, #1
 8006cdc:	f43f af3f 	beq.w	8006b5e <_printf_float+0xc2>
 8006ce0:	f04f 0800 	mov.w	r8, #0
 8006ce4:	f104 091a 	add.w	r9, r4, #26
 8006ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cea:	3b01      	subs	r3, #1
 8006cec:	4598      	cmp	r8, r3
 8006cee:	db12      	blt.n	8006d16 <_printf_float+0x27a>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	079b      	lsls	r3, r3, #30
 8006cf4:	d509      	bpl.n	8006d0a <_printf_float+0x26e>
 8006cf6:	f04f 0800 	mov.w	r8, #0
 8006cfa:	f104 0919 	add.w	r9, r4, #25
 8006cfe:	68e3      	ldr	r3, [r4, #12]
 8006d00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	4598      	cmp	r8, r3
 8006d06:	f2c0 80ee 	blt.w	8006ee6 <_printf_float+0x44a>
 8006d0a:	68e0      	ldr	r0, [r4, #12]
 8006d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d0e:	4298      	cmp	r0, r3
 8006d10:	bfb8      	it	lt
 8006d12:	4618      	movlt	r0, r3
 8006d14:	e725      	b.n	8006b62 <_printf_float+0xc6>
 8006d16:	2301      	movs	r3, #1
 8006d18:	464a      	mov	r2, r9
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	47b8      	blx	r7
 8006d20:	3001      	adds	r0, #1
 8006d22:	f43f af1c 	beq.w	8006b5e <_printf_float+0xc2>
 8006d26:	f108 0801 	add.w	r8, r8, #1
 8006d2a:	e7dd      	b.n	8006ce8 <_printf_float+0x24c>
 8006d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	dc34      	bgt.n	8006d9c <_printf_float+0x300>
 8006d32:	2301      	movs	r3, #1
 8006d34:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <_printf_float+0x2fc>)
 8006d36:	4631      	mov	r1, r6
 8006d38:	4628      	mov	r0, r5
 8006d3a:	47b8      	blx	r7
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	f43f af0e 	beq.w	8006b5e <_printf_float+0xc2>
 8006d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d44:	b923      	cbnz	r3, 8006d50 <_printf_float+0x2b4>
 8006d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d48:	b913      	cbnz	r3, 8006d50 <_printf_float+0x2b4>
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	07d9      	lsls	r1, r3, #31
 8006d4e:	d5cf      	bpl.n	8006cf0 <_printf_float+0x254>
 8006d50:	9b05      	ldr	r3, [sp, #20]
 8006d52:	9a04      	ldr	r2, [sp, #16]
 8006d54:	4631      	mov	r1, r6
 8006d56:	4628      	mov	r0, r5
 8006d58:	47b8      	blx	r7
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	f43f aeff 	beq.w	8006b5e <_printf_float+0xc2>
 8006d60:	f04f 0900 	mov.w	r9, #0
 8006d64:	f104 0a1a 	add.w	sl, r4, #26
 8006d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6a:	425b      	negs	r3, r3
 8006d6c:	4599      	cmp	r9, r3
 8006d6e:	db01      	blt.n	8006d74 <_printf_float+0x2d8>
 8006d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d72:	e78b      	b.n	8006c8c <_printf_float+0x1f0>
 8006d74:	2301      	movs	r3, #1
 8006d76:	4652      	mov	r2, sl
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b8      	blx	r7
 8006d7e:	3001      	adds	r0, #1
 8006d80:	f43f aeed 	beq.w	8006b5e <_printf_float+0xc2>
 8006d84:	f109 0901 	add.w	r9, r9, #1
 8006d88:	e7ee      	b.n	8006d68 <_printf_float+0x2cc>
 8006d8a:	bf00      	nop
 8006d8c:	7fefffff 	.word	0x7fefffff
 8006d90:	0801e75c 	.word	0x0801e75c
 8006d94:	0801e760 	.word	0x0801e760
 8006d98:	0801ea1c 	.word	0x0801ea1c
 8006d9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006da0:	429a      	cmp	r2, r3
 8006da2:	bfa8      	it	ge
 8006da4:	461a      	movge	r2, r3
 8006da6:	2a00      	cmp	r2, #0
 8006da8:	4691      	mov	r9, r2
 8006daa:	dc38      	bgt.n	8006e1e <_printf_float+0x382>
 8006dac:	f104 031a 	add.w	r3, r4, #26
 8006db0:	f04f 0b00 	mov.w	fp, #0
 8006db4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006db8:	9306      	str	r3, [sp, #24]
 8006dba:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006dbe:	ebaa 0309 	sub.w	r3, sl, r9
 8006dc2:	459b      	cmp	fp, r3
 8006dc4:	db33      	blt.n	8006e2e <_printf_float+0x392>
 8006dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	db3a      	blt.n	8006e44 <_printf_float+0x3a8>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	07da      	lsls	r2, r3, #31
 8006dd2:	d437      	bmi.n	8006e44 <_printf_float+0x3a8>
 8006dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dd8:	eba3 020a 	sub.w	r2, r3, sl
 8006ddc:	eba3 0901 	sub.w	r9, r3, r1
 8006de0:	4591      	cmp	r9, r2
 8006de2:	bfa8      	it	ge
 8006de4:	4691      	movge	r9, r2
 8006de6:	f1b9 0f00 	cmp.w	r9, #0
 8006dea:	dc33      	bgt.n	8006e54 <_printf_float+0x3b8>
 8006dec:	f04f 0800 	mov.w	r8, #0
 8006df0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006df4:	f104 0a1a 	add.w	sl, r4, #26
 8006df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dfc:	1a9b      	subs	r3, r3, r2
 8006dfe:	eba3 0309 	sub.w	r3, r3, r9
 8006e02:	4598      	cmp	r8, r3
 8006e04:	f6bf af74 	bge.w	8006cf0 <_printf_float+0x254>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	4652      	mov	r2, sl
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b8      	blx	r7
 8006e12:	3001      	adds	r0, #1
 8006e14:	f43f aea3 	beq.w	8006b5e <_printf_float+0xc2>
 8006e18:	f108 0801 	add.w	r8, r8, #1
 8006e1c:	e7ec      	b.n	8006df8 <_printf_float+0x35c>
 8006e1e:	4613      	mov	r3, r2
 8006e20:	4631      	mov	r1, r6
 8006e22:	4642      	mov	r2, r8
 8006e24:	4628      	mov	r0, r5
 8006e26:	47b8      	blx	r7
 8006e28:	3001      	adds	r0, #1
 8006e2a:	d1bf      	bne.n	8006dac <_printf_float+0x310>
 8006e2c:	e697      	b.n	8006b5e <_printf_float+0xc2>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	9a06      	ldr	r2, [sp, #24]
 8006e32:	4631      	mov	r1, r6
 8006e34:	4628      	mov	r0, r5
 8006e36:	47b8      	blx	r7
 8006e38:	3001      	adds	r0, #1
 8006e3a:	f43f ae90 	beq.w	8006b5e <_printf_float+0xc2>
 8006e3e:	f10b 0b01 	add.w	fp, fp, #1
 8006e42:	e7ba      	b.n	8006dba <_printf_float+0x31e>
 8006e44:	9b05      	ldr	r3, [sp, #20]
 8006e46:	9a04      	ldr	r2, [sp, #16]
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b8      	blx	r7
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d1c0      	bne.n	8006dd4 <_printf_float+0x338>
 8006e52:	e684      	b.n	8006b5e <_printf_float+0xc2>
 8006e54:	464b      	mov	r3, r9
 8006e56:	eb08 020a 	add.w	r2, r8, sl
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	47b8      	blx	r7
 8006e60:	3001      	adds	r0, #1
 8006e62:	d1c3      	bne.n	8006dec <_printf_float+0x350>
 8006e64:	e67b      	b.n	8006b5e <_printf_float+0xc2>
 8006e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e68:	2a01      	cmp	r2, #1
 8006e6a:	dc01      	bgt.n	8006e70 <_printf_float+0x3d4>
 8006e6c:	07db      	lsls	r3, r3, #31
 8006e6e:	d537      	bpl.n	8006ee0 <_printf_float+0x444>
 8006e70:	2301      	movs	r3, #1
 8006e72:	4642      	mov	r2, r8
 8006e74:	4631      	mov	r1, r6
 8006e76:	4628      	mov	r0, r5
 8006e78:	47b8      	blx	r7
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	f43f ae6f 	beq.w	8006b5e <_printf_float+0xc2>
 8006e80:	9b05      	ldr	r3, [sp, #20]
 8006e82:	9a04      	ldr	r2, [sp, #16]
 8006e84:	4631      	mov	r1, r6
 8006e86:	4628      	mov	r0, r5
 8006e88:	47b8      	blx	r7
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	f43f ae67 	beq.w	8006b5e <_printf_float+0xc2>
 8006e90:	2200      	movs	r2, #0
 8006e92:	2300      	movs	r3, #0
 8006e94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e98:	f7f9 fe72 	bl	8000b80 <__aeabi_dcmpeq>
 8006e9c:	b158      	cbz	r0, 8006eb6 <_printf_float+0x41a>
 8006e9e:	f04f 0800 	mov.w	r8, #0
 8006ea2:	f104 0a1a 	add.w	sl, r4, #26
 8006ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	4598      	cmp	r8, r3
 8006eac:	db0d      	blt.n	8006eca <_printf_float+0x42e>
 8006eae:	464b      	mov	r3, r9
 8006eb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006eb4:	e6eb      	b.n	8006c8e <_printf_float+0x1f2>
 8006eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb8:	f108 0201 	add.w	r2, r8, #1
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	47b8      	blx	r7
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d1f2      	bne.n	8006eae <_printf_float+0x412>
 8006ec8:	e649      	b.n	8006b5e <_printf_float+0xc2>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4652      	mov	r2, sl
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	47b8      	blx	r7
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	f43f ae42 	beq.w	8006b5e <_printf_float+0xc2>
 8006eda:	f108 0801 	add.w	r8, r8, #1
 8006ede:	e7e2      	b.n	8006ea6 <_printf_float+0x40a>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	4642      	mov	r2, r8
 8006ee4:	e7eb      	b.n	8006ebe <_printf_float+0x422>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	464a      	mov	r2, r9
 8006eea:	4631      	mov	r1, r6
 8006eec:	4628      	mov	r0, r5
 8006eee:	47b8      	blx	r7
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	f43f ae34 	beq.w	8006b5e <_printf_float+0xc2>
 8006ef6:	f108 0801 	add.w	r8, r8, #1
 8006efa:	e700      	b.n	8006cfe <_printf_float+0x262>
 8006efc:	4642      	mov	r2, r8
 8006efe:	464b      	mov	r3, r9
 8006f00:	4640      	mov	r0, r8
 8006f02:	4649      	mov	r1, r9
 8006f04:	f7f9 fe6e 	bl	8000be4 <__aeabi_dcmpun>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	f43f ae2d 	beq.w	8006b68 <_printf_float+0xcc>
 8006f0e:	4b01      	ldr	r3, [pc, #4]	; (8006f14 <_printf_float+0x478>)
 8006f10:	4a01      	ldr	r2, [pc, #4]	; (8006f18 <_printf_float+0x47c>)
 8006f12:	e60e      	b.n	8006b32 <_printf_float+0x96>
 8006f14:	0801e764 	.word	0x0801e764
 8006f18:	0801e768 	.word	0x0801e768

08006f1c <_printf_common>:
 8006f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f20:	4691      	mov	r9, r2
 8006f22:	461f      	mov	r7, r3
 8006f24:	688a      	ldr	r2, [r1, #8]
 8006f26:	690b      	ldr	r3, [r1, #16]
 8006f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	bfb8      	it	lt
 8006f30:	4613      	movlt	r3, r2
 8006f32:	f8c9 3000 	str.w	r3, [r9]
 8006f36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	b112      	cbz	r2, 8006f46 <_printf_common+0x2a>
 8006f40:	3301      	adds	r3, #1
 8006f42:	f8c9 3000 	str.w	r3, [r9]
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	0699      	lsls	r1, r3, #26
 8006f4a:	bf42      	ittt	mi
 8006f4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006f50:	3302      	addmi	r3, #2
 8006f52:	f8c9 3000 	strmi.w	r3, [r9]
 8006f56:	6825      	ldr	r5, [r4, #0]
 8006f58:	f015 0506 	ands.w	r5, r5, #6
 8006f5c:	d107      	bne.n	8006f6e <_printf_common+0x52>
 8006f5e:	f104 0a19 	add.w	sl, r4, #25
 8006f62:	68e3      	ldr	r3, [r4, #12]
 8006f64:	f8d9 2000 	ldr.w	r2, [r9]
 8006f68:	1a9b      	subs	r3, r3, r2
 8006f6a:	429d      	cmp	r5, r3
 8006f6c:	db29      	blt.n	8006fc2 <_printf_common+0xa6>
 8006f6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	3300      	adds	r3, #0
 8006f76:	bf18      	it	ne
 8006f78:	2301      	movne	r3, #1
 8006f7a:	0692      	lsls	r2, r2, #26
 8006f7c:	d42e      	bmi.n	8006fdc <_printf_common+0xc0>
 8006f7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f82:	4639      	mov	r1, r7
 8006f84:	4630      	mov	r0, r6
 8006f86:	47c0      	blx	r8
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d021      	beq.n	8006fd0 <_printf_common+0xb4>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	68e5      	ldr	r5, [r4, #12]
 8006f90:	f8d9 2000 	ldr.w	r2, [r9]
 8006f94:	f003 0306 	and.w	r3, r3, #6
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	bf08      	it	eq
 8006f9c:	1aad      	subeq	r5, r5, r2
 8006f9e:	68a3      	ldr	r3, [r4, #8]
 8006fa0:	6922      	ldr	r2, [r4, #16]
 8006fa2:	bf0c      	ite	eq
 8006fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fa8:	2500      	movne	r5, #0
 8006faa:	4293      	cmp	r3, r2
 8006fac:	bfc4      	itt	gt
 8006fae:	1a9b      	subgt	r3, r3, r2
 8006fb0:	18ed      	addgt	r5, r5, r3
 8006fb2:	f04f 0900 	mov.w	r9, #0
 8006fb6:	341a      	adds	r4, #26
 8006fb8:	454d      	cmp	r5, r9
 8006fba:	d11b      	bne.n	8006ff4 <_printf_common+0xd8>
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	4652      	mov	r2, sl
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	4630      	mov	r0, r6
 8006fca:	47c0      	blx	r8
 8006fcc:	3001      	adds	r0, #1
 8006fce:	d103      	bne.n	8006fd8 <_printf_common+0xbc>
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd8:	3501      	adds	r5, #1
 8006fda:	e7c2      	b.n	8006f62 <_printf_common+0x46>
 8006fdc:	18e1      	adds	r1, r4, r3
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	2030      	movs	r0, #48	; 0x30
 8006fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fe6:	4422      	add	r2, r4
 8006fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ff0:	3302      	adds	r3, #2
 8006ff2:	e7c4      	b.n	8006f7e <_printf_common+0x62>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	4639      	mov	r1, r7
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	47c0      	blx	r8
 8006ffe:	3001      	adds	r0, #1
 8007000:	d0e6      	beq.n	8006fd0 <_printf_common+0xb4>
 8007002:	f109 0901 	add.w	r9, r9, #1
 8007006:	e7d7      	b.n	8006fb8 <_printf_common+0x9c>

08007008 <_printf_i>:
 8007008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800700c:	4617      	mov	r7, r2
 800700e:	7e0a      	ldrb	r2, [r1, #24]
 8007010:	b085      	sub	sp, #20
 8007012:	2a6e      	cmp	r2, #110	; 0x6e
 8007014:	4698      	mov	r8, r3
 8007016:	4606      	mov	r6, r0
 8007018:	460c      	mov	r4, r1
 800701a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800701c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007020:	f000 80bc 	beq.w	800719c <_printf_i+0x194>
 8007024:	d81a      	bhi.n	800705c <_printf_i+0x54>
 8007026:	2a63      	cmp	r2, #99	; 0x63
 8007028:	d02e      	beq.n	8007088 <_printf_i+0x80>
 800702a:	d80a      	bhi.n	8007042 <_printf_i+0x3a>
 800702c:	2a00      	cmp	r2, #0
 800702e:	f000 80c8 	beq.w	80071c2 <_printf_i+0x1ba>
 8007032:	2a58      	cmp	r2, #88	; 0x58
 8007034:	f000 808a 	beq.w	800714c <_printf_i+0x144>
 8007038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800703c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007040:	e02a      	b.n	8007098 <_printf_i+0x90>
 8007042:	2a64      	cmp	r2, #100	; 0x64
 8007044:	d001      	beq.n	800704a <_printf_i+0x42>
 8007046:	2a69      	cmp	r2, #105	; 0x69
 8007048:	d1f6      	bne.n	8007038 <_printf_i+0x30>
 800704a:	6821      	ldr	r1, [r4, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007052:	d023      	beq.n	800709c <_printf_i+0x94>
 8007054:	1d11      	adds	r1, r2, #4
 8007056:	6019      	str	r1, [r3, #0]
 8007058:	6813      	ldr	r3, [r2, #0]
 800705a:	e027      	b.n	80070ac <_printf_i+0xa4>
 800705c:	2a73      	cmp	r2, #115	; 0x73
 800705e:	f000 80b4 	beq.w	80071ca <_printf_i+0x1c2>
 8007062:	d808      	bhi.n	8007076 <_printf_i+0x6e>
 8007064:	2a6f      	cmp	r2, #111	; 0x6f
 8007066:	d02a      	beq.n	80070be <_printf_i+0xb6>
 8007068:	2a70      	cmp	r2, #112	; 0x70
 800706a:	d1e5      	bne.n	8007038 <_printf_i+0x30>
 800706c:	680a      	ldr	r2, [r1, #0]
 800706e:	f042 0220 	orr.w	r2, r2, #32
 8007072:	600a      	str	r2, [r1, #0]
 8007074:	e003      	b.n	800707e <_printf_i+0x76>
 8007076:	2a75      	cmp	r2, #117	; 0x75
 8007078:	d021      	beq.n	80070be <_printf_i+0xb6>
 800707a:	2a78      	cmp	r2, #120	; 0x78
 800707c:	d1dc      	bne.n	8007038 <_printf_i+0x30>
 800707e:	2278      	movs	r2, #120	; 0x78
 8007080:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007084:	496e      	ldr	r1, [pc, #440]	; (8007240 <_printf_i+0x238>)
 8007086:	e064      	b.n	8007152 <_printf_i+0x14a>
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800708e:	1d11      	adds	r1, r2, #4
 8007090:	6019      	str	r1, [r3, #0]
 8007092:	6813      	ldr	r3, [r2, #0]
 8007094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007098:	2301      	movs	r3, #1
 800709a:	e0a3      	b.n	80071e4 <_printf_i+0x1dc>
 800709c:	f011 0f40 	tst.w	r1, #64	; 0x40
 80070a0:	f102 0104 	add.w	r1, r2, #4
 80070a4:	6019      	str	r1, [r3, #0]
 80070a6:	d0d7      	beq.n	8007058 <_printf_i+0x50>
 80070a8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	da03      	bge.n	80070b8 <_printf_i+0xb0>
 80070b0:	222d      	movs	r2, #45	; 0x2d
 80070b2:	425b      	negs	r3, r3
 80070b4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80070b8:	4962      	ldr	r1, [pc, #392]	; (8007244 <_printf_i+0x23c>)
 80070ba:	220a      	movs	r2, #10
 80070bc:	e017      	b.n	80070ee <_printf_i+0xe6>
 80070be:	6820      	ldr	r0, [r4, #0]
 80070c0:	6819      	ldr	r1, [r3, #0]
 80070c2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80070c6:	d003      	beq.n	80070d0 <_printf_i+0xc8>
 80070c8:	1d08      	adds	r0, r1, #4
 80070ca:	6018      	str	r0, [r3, #0]
 80070cc:	680b      	ldr	r3, [r1, #0]
 80070ce:	e006      	b.n	80070de <_printf_i+0xd6>
 80070d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070d4:	f101 0004 	add.w	r0, r1, #4
 80070d8:	6018      	str	r0, [r3, #0]
 80070da:	d0f7      	beq.n	80070cc <_printf_i+0xc4>
 80070dc:	880b      	ldrh	r3, [r1, #0]
 80070de:	4959      	ldr	r1, [pc, #356]	; (8007244 <_printf_i+0x23c>)
 80070e0:	2a6f      	cmp	r2, #111	; 0x6f
 80070e2:	bf14      	ite	ne
 80070e4:	220a      	movne	r2, #10
 80070e6:	2208      	moveq	r2, #8
 80070e8:	2000      	movs	r0, #0
 80070ea:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80070ee:	6865      	ldr	r5, [r4, #4]
 80070f0:	60a5      	str	r5, [r4, #8]
 80070f2:	2d00      	cmp	r5, #0
 80070f4:	f2c0 809c 	blt.w	8007230 <_printf_i+0x228>
 80070f8:	6820      	ldr	r0, [r4, #0]
 80070fa:	f020 0004 	bic.w	r0, r0, #4
 80070fe:	6020      	str	r0, [r4, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d13f      	bne.n	8007184 <_printf_i+0x17c>
 8007104:	2d00      	cmp	r5, #0
 8007106:	f040 8095 	bne.w	8007234 <_printf_i+0x22c>
 800710a:	4675      	mov	r5, lr
 800710c:	2a08      	cmp	r2, #8
 800710e:	d10b      	bne.n	8007128 <_printf_i+0x120>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	07da      	lsls	r2, r3, #31
 8007114:	d508      	bpl.n	8007128 <_printf_i+0x120>
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	6862      	ldr	r2, [r4, #4]
 800711a:	429a      	cmp	r2, r3
 800711c:	bfde      	ittt	le
 800711e:	2330      	movle	r3, #48	; 0x30
 8007120:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007124:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007128:	ebae 0305 	sub.w	r3, lr, r5
 800712c:	6123      	str	r3, [r4, #16]
 800712e:	f8cd 8000 	str.w	r8, [sp]
 8007132:	463b      	mov	r3, r7
 8007134:	aa03      	add	r2, sp, #12
 8007136:	4621      	mov	r1, r4
 8007138:	4630      	mov	r0, r6
 800713a:	f7ff feef 	bl	8006f1c <_printf_common>
 800713e:	3001      	adds	r0, #1
 8007140:	d155      	bne.n	80071ee <_printf_i+0x1e6>
 8007142:	f04f 30ff 	mov.w	r0, #4294967295
 8007146:	b005      	add	sp, #20
 8007148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800714c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007150:	493c      	ldr	r1, [pc, #240]	; (8007244 <_printf_i+0x23c>)
 8007152:	6822      	ldr	r2, [r4, #0]
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	f012 0f80 	tst.w	r2, #128	; 0x80
 800715a:	f100 0504 	add.w	r5, r0, #4
 800715e:	601d      	str	r5, [r3, #0]
 8007160:	d001      	beq.n	8007166 <_printf_i+0x15e>
 8007162:	6803      	ldr	r3, [r0, #0]
 8007164:	e002      	b.n	800716c <_printf_i+0x164>
 8007166:	0655      	lsls	r5, r2, #25
 8007168:	d5fb      	bpl.n	8007162 <_printf_i+0x15a>
 800716a:	8803      	ldrh	r3, [r0, #0]
 800716c:	07d0      	lsls	r0, r2, #31
 800716e:	bf44      	itt	mi
 8007170:	f042 0220 	orrmi.w	r2, r2, #32
 8007174:	6022      	strmi	r2, [r4, #0]
 8007176:	b91b      	cbnz	r3, 8007180 <_printf_i+0x178>
 8007178:	6822      	ldr	r2, [r4, #0]
 800717a:	f022 0220 	bic.w	r2, r2, #32
 800717e:	6022      	str	r2, [r4, #0]
 8007180:	2210      	movs	r2, #16
 8007182:	e7b1      	b.n	80070e8 <_printf_i+0xe0>
 8007184:	4675      	mov	r5, lr
 8007186:	fbb3 f0f2 	udiv	r0, r3, r2
 800718a:	fb02 3310 	mls	r3, r2, r0, r3
 800718e:	5ccb      	ldrb	r3, [r1, r3]
 8007190:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007194:	4603      	mov	r3, r0
 8007196:	2800      	cmp	r0, #0
 8007198:	d1f5      	bne.n	8007186 <_printf_i+0x17e>
 800719a:	e7b7      	b.n	800710c <_printf_i+0x104>
 800719c:	6808      	ldr	r0, [r1, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	6949      	ldr	r1, [r1, #20]
 80071a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80071a6:	d004      	beq.n	80071b2 <_printf_i+0x1aa>
 80071a8:	1d10      	adds	r0, r2, #4
 80071aa:	6018      	str	r0, [r3, #0]
 80071ac:	6813      	ldr	r3, [r2, #0]
 80071ae:	6019      	str	r1, [r3, #0]
 80071b0:	e007      	b.n	80071c2 <_printf_i+0x1ba>
 80071b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071b6:	f102 0004 	add.w	r0, r2, #4
 80071ba:	6018      	str	r0, [r3, #0]
 80071bc:	6813      	ldr	r3, [r2, #0]
 80071be:	d0f6      	beq.n	80071ae <_printf_i+0x1a6>
 80071c0:	8019      	strh	r1, [r3, #0]
 80071c2:	2300      	movs	r3, #0
 80071c4:	6123      	str	r3, [r4, #16]
 80071c6:	4675      	mov	r5, lr
 80071c8:	e7b1      	b.n	800712e <_printf_i+0x126>
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	1d11      	adds	r1, r2, #4
 80071ce:	6019      	str	r1, [r3, #0]
 80071d0:	6815      	ldr	r5, [r2, #0]
 80071d2:	6862      	ldr	r2, [r4, #4]
 80071d4:	2100      	movs	r1, #0
 80071d6:	4628      	mov	r0, r5
 80071d8:	f7f9 f862 	bl	80002a0 <memchr>
 80071dc:	b108      	cbz	r0, 80071e2 <_printf_i+0x1da>
 80071de:	1b40      	subs	r0, r0, r5
 80071e0:	6060      	str	r0, [r4, #4]
 80071e2:	6863      	ldr	r3, [r4, #4]
 80071e4:	6123      	str	r3, [r4, #16]
 80071e6:	2300      	movs	r3, #0
 80071e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ec:	e79f      	b.n	800712e <_printf_i+0x126>
 80071ee:	6923      	ldr	r3, [r4, #16]
 80071f0:	462a      	mov	r2, r5
 80071f2:	4639      	mov	r1, r7
 80071f4:	4630      	mov	r0, r6
 80071f6:	47c0      	blx	r8
 80071f8:	3001      	adds	r0, #1
 80071fa:	d0a2      	beq.n	8007142 <_printf_i+0x13a>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	079b      	lsls	r3, r3, #30
 8007200:	d507      	bpl.n	8007212 <_printf_i+0x20a>
 8007202:	2500      	movs	r5, #0
 8007204:	f104 0919 	add.w	r9, r4, #25
 8007208:	68e3      	ldr	r3, [r4, #12]
 800720a:	9a03      	ldr	r2, [sp, #12]
 800720c:	1a9b      	subs	r3, r3, r2
 800720e:	429d      	cmp	r5, r3
 8007210:	db05      	blt.n	800721e <_printf_i+0x216>
 8007212:	68e0      	ldr	r0, [r4, #12]
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	4298      	cmp	r0, r3
 8007218:	bfb8      	it	lt
 800721a:	4618      	movlt	r0, r3
 800721c:	e793      	b.n	8007146 <_printf_i+0x13e>
 800721e:	2301      	movs	r3, #1
 8007220:	464a      	mov	r2, r9
 8007222:	4639      	mov	r1, r7
 8007224:	4630      	mov	r0, r6
 8007226:	47c0      	blx	r8
 8007228:	3001      	adds	r0, #1
 800722a:	d08a      	beq.n	8007142 <_printf_i+0x13a>
 800722c:	3501      	adds	r5, #1
 800722e:	e7eb      	b.n	8007208 <_printf_i+0x200>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1a7      	bne.n	8007184 <_printf_i+0x17c>
 8007234:	780b      	ldrb	r3, [r1, #0]
 8007236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800723a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800723e:	e765      	b.n	800710c <_printf_i+0x104>
 8007240:	0801e77d 	.word	0x0801e77d
 8007244:	0801e76c 	.word	0x0801e76c

08007248 <iprintf>:
 8007248:	b40f      	push	{r0, r1, r2, r3}
 800724a:	4b0a      	ldr	r3, [pc, #40]	; (8007274 <iprintf+0x2c>)
 800724c:	b513      	push	{r0, r1, r4, lr}
 800724e:	681c      	ldr	r4, [r3, #0]
 8007250:	b124      	cbz	r4, 800725c <iprintf+0x14>
 8007252:	69a3      	ldr	r3, [r4, #24]
 8007254:	b913      	cbnz	r3, 800725c <iprintf+0x14>
 8007256:	4620      	mov	r0, r4
 8007258:	f001 f8ce 	bl	80083f8 <__sinit>
 800725c:	ab05      	add	r3, sp, #20
 800725e:	9a04      	ldr	r2, [sp, #16]
 8007260:	68a1      	ldr	r1, [r4, #8]
 8007262:	9301      	str	r3, [sp, #4]
 8007264:	4620      	mov	r0, r4
 8007266:	f001 fd15 	bl	8008c94 <_vfiprintf_r>
 800726a:	b002      	add	sp, #8
 800726c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007270:	b004      	add	sp, #16
 8007272:	4770      	bx	lr
 8007274:	2000001c 	.word	0x2000001c

08007278 <putchar>:
 8007278:	b538      	push	{r3, r4, r5, lr}
 800727a:	4b08      	ldr	r3, [pc, #32]	; (800729c <putchar+0x24>)
 800727c:	681c      	ldr	r4, [r3, #0]
 800727e:	4605      	mov	r5, r0
 8007280:	b124      	cbz	r4, 800728c <putchar+0x14>
 8007282:	69a3      	ldr	r3, [r4, #24]
 8007284:	b913      	cbnz	r3, 800728c <putchar+0x14>
 8007286:	4620      	mov	r0, r4
 8007288:	f001 f8b6 	bl	80083f8 <__sinit>
 800728c:	68a2      	ldr	r2, [r4, #8]
 800728e:	4629      	mov	r1, r5
 8007290:	4620      	mov	r0, r4
 8007292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007296:	f001 be13 	b.w	8008ec0 <_putc_r>
 800729a:	bf00      	nop
 800729c:	2000001c 	.word	0x2000001c

080072a0 <_puts_r>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	460e      	mov	r6, r1
 80072a4:	4605      	mov	r5, r0
 80072a6:	b118      	cbz	r0, 80072b0 <_puts_r+0x10>
 80072a8:	6983      	ldr	r3, [r0, #24]
 80072aa:	b90b      	cbnz	r3, 80072b0 <_puts_r+0x10>
 80072ac:	f001 f8a4 	bl	80083f8 <__sinit>
 80072b0:	69ab      	ldr	r3, [r5, #24]
 80072b2:	68ac      	ldr	r4, [r5, #8]
 80072b4:	b913      	cbnz	r3, 80072bc <_puts_r+0x1c>
 80072b6:	4628      	mov	r0, r5
 80072b8:	f001 f89e 	bl	80083f8 <__sinit>
 80072bc:	4b23      	ldr	r3, [pc, #140]	; (800734c <_puts_r+0xac>)
 80072be:	429c      	cmp	r4, r3
 80072c0:	d117      	bne.n	80072f2 <_puts_r+0x52>
 80072c2:	686c      	ldr	r4, [r5, #4]
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	071b      	lsls	r3, r3, #28
 80072c8:	d51d      	bpl.n	8007306 <_puts_r+0x66>
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	b1db      	cbz	r3, 8007306 <_puts_r+0x66>
 80072ce:	3e01      	subs	r6, #1
 80072d0:	68a3      	ldr	r3, [r4, #8]
 80072d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072d6:	3b01      	subs	r3, #1
 80072d8:	60a3      	str	r3, [r4, #8]
 80072da:	b9e9      	cbnz	r1, 8007318 <_puts_r+0x78>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	da2e      	bge.n	800733e <_puts_r+0x9e>
 80072e0:	4622      	mov	r2, r4
 80072e2:	210a      	movs	r1, #10
 80072e4:	4628      	mov	r0, r5
 80072e6:	f000 f879 	bl	80073dc <__swbuf_r>
 80072ea:	3001      	adds	r0, #1
 80072ec:	d011      	beq.n	8007312 <_puts_r+0x72>
 80072ee:	200a      	movs	r0, #10
 80072f0:	bd70      	pop	{r4, r5, r6, pc}
 80072f2:	4b17      	ldr	r3, [pc, #92]	; (8007350 <_puts_r+0xb0>)
 80072f4:	429c      	cmp	r4, r3
 80072f6:	d101      	bne.n	80072fc <_puts_r+0x5c>
 80072f8:	68ac      	ldr	r4, [r5, #8]
 80072fa:	e7e3      	b.n	80072c4 <_puts_r+0x24>
 80072fc:	4b15      	ldr	r3, [pc, #84]	; (8007354 <_puts_r+0xb4>)
 80072fe:	429c      	cmp	r4, r3
 8007300:	bf08      	it	eq
 8007302:	68ec      	ldreq	r4, [r5, #12]
 8007304:	e7de      	b.n	80072c4 <_puts_r+0x24>
 8007306:	4621      	mov	r1, r4
 8007308:	4628      	mov	r0, r5
 800730a:	f000 f8b9 	bl	8007480 <__swsetup_r>
 800730e:	2800      	cmp	r0, #0
 8007310:	d0dd      	beq.n	80072ce <_puts_r+0x2e>
 8007312:	f04f 30ff 	mov.w	r0, #4294967295
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	2b00      	cmp	r3, #0
 800731a:	da04      	bge.n	8007326 <_puts_r+0x86>
 800731c:	69a2      	ldr	r2, [r4, #24]
 800731e:	4293      	cmp	r3, r2
 8007320:	db06      	blt.n	8007330 <_puts_r+0x90>
 8007322:	290a      	cmp	r1, #10
 8007324:	d004      	beq.n	8007330 <_puts_r+0x90>
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	6022      	str	r2, [r4, #0]
 800732c:	7019      	strb	r1, [r3, #0]
 800732e:	e7cf      	b.n	80072d0 <_puts_r+0x30>
 8007330:	4622      	mov	r2, r4
 8007332:	4628      	mov	r0, r5
 8007334:	f000 f852 	bl	80073dc <__swbuf_r>
 8007338:	3001      	adds	r0, #1
 800733a:	d1c9      	bne.n	80072d0 <_puts_r+0x30>
 800733c:	e7e9      	b.n	8007312 <_puts_r+0x72>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	200a      	movs	r0, #10
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	6022      	str	r2, [r4, #0]
 8007346:	7018      	strb	r0, [r3, #0]
 8007348:	bd70      	pop	{r4, r5, r6, pc}
 800734a:	bf00      	nop
 800734c:	0801e7bc 	.word	0x0801e7bc
 8007350:	0801e7dc 	.word	0x0801e7dc
 8007354:	0801e79c 	.word	0x0801e79c

08007358 <puts>:
 8007358:	4b02      	ldr	r3, [pc, #8]	; (8007364 <puts+0xc>)
 800735a:	4601      	mov	r1, r0
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	f7ff bf9f 	b.w	80072a0 <_puts_r>
 8007362:	bf00      	nop
 8007364:	2000001c 	.word	0x2000001c

08007368 <_sbrk_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4c06      	ldr	r4, [pc, #24]	; (8007384 <_sbrk_r+0x1c>)
 800736c:	2300      	movs	r3, #0
 800736e:	4605      	mov	r5, r0
 8007370:	4608      	mov	r0, r1
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	f7fd fbd0 	bl	8004b18 <_sbrk>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	d102      	bne.n	8007382 <_sbrk_r+0x1a>
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	b103      	cbz	r3, 8007382 <_sbrk_r+0x1a>
 8007380:	602b      	str	r3, [r5, #0]
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	2000ba18 	.word	0x2000ba18

08007388 <frexpf>:
 8007388:	ee10 1a10 	vmov	r1, s0
 800738c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007390:	b510      	push	{r4, lr}
 8007392:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007396:	f04f 0400 	mov.w	r4, #0
 800739a:	ee10 2a10 	vmov	r2, s0
 800739e:	6004      	str	r4, [r0, #0]
 80073a0:	da17      	bge.n	80073d2 <frexpf+0x4a>
 80073a2:	b1b3      	cbz	r3, 80073d2 <frexpf+0x4a>
 80073a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073a8:	da0a      	bge.n	80073c0 <frexpf+0x38>
 80073aa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80073d8 <frexpf+0x50>
 80073ae:	ee60 7a27 	vmul.f32	s15, s0, s15
 80073b2:	f06f 0118 	mvn.w	r1, #24
 80073b6:	ee17 2a90 	vmov	r2, s15
 80073ba:	6001      	str	r1, [r0, #0]
 80073bc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80073c0:	6801      	ldr	r1, [r0, #0]
 80073c2:	15db      	asrs	r3, r3, #23
 80073c4:	3b7e      	subs	r3, #126	; 0x7e
 80073c6:	440b      	add	r3, r1
 80073c8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80073cc:	6003      	str	r3, [r0, #0]
 80073ce:	f042 517c 	orr.w	r1, r2, #1056964608	; 0x3f000000
 80073d2:	ee00 1a10 	vmov	s0, r1
 80073d6:	bd10      	pop	{r4, pc}
 80073d8:	4c000000 	.word	0x4c000000

080073dc <__swbuf_r>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	460e      	mov	r6, r1
 80073e0:	4614      	mov	r4, r2
 80073e2:	4605      	mov	r5, r0
 80073e4:	b118      	cbz	r0, 80073ee <__swbuf_r+0x12>
 80073e6:	6983      	ldr	r3, [r0, #24]
 80073e8:	b90b      	cbnz	r3, 80073ee <__swbuf_r+0x12>
 80073ea:	f001 f805 	bl	80083f8 <__sinit>
 80073ee:	4b21      	ldr	r3, [pc, #132]	; (8007474 <__swbuf_r+0x98>)
 80073f0:	429c      	cmp	r4, r3
 80073f2:	d12a      	bne.n	800744a <__swbuf_r+0x6e>
 80073f4:	686c      	ldr	r4, [r5, #4]
 80073f6:	69a3      	ldr	r3, [r4, #24]
 80073f8:	60a3      	str	r3, [r4, #8]
 80073fa:	89a3      	ldrh	r3, [r4, #12]
 80073fc:	071a      	lsls	r2, r3, #28
 80073fe:	d52e      	bpl.n	800745e <__swbuf_r+0x82>
 8007400:	6923      	ldr	r3, [r4, #16]
 8007402:	b363      	cbz	r3, 800745e <__swbuf_r+0x82>
 8007404:	6923      	ldr	r3, [r4, #16]
 8007406:	6820      	ldr	r0, [r4, #0]
 8007408:	1ac0      	subs	r0, r0, r3
 800740a:	6963      	ldr	r3, [r4, #20]
 800740c:	b2f6      	uxtb	r6, r6
 800740e:	4298      	cmp	r0, r3
 8007410:	4637      	mov	r7, r6
 8007412:	db04      	blt.n	800741e <__swbuf_r+0x42>
 8007414:	4621      	mov	r1, r4
 8007416:	4628      	mov	r0, r5
 8007418:	f000 ff84 	bl	8008324 <_fflush_r>
 800741c:	bb28      	cbnz	r0, 800746a <__swbuf_r+0x8e>
 800741e:	68a3      	ldr	r3, [r4, #8]
 8007420:	3b01      	subs	r3, #1
 8007422:	60a3      	str	r3, [r4, #8]
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	6022      	str	r2, [r4, #0]
 800742a:	701e      	strb	r6, [r3, #0]
 800742c:	6963      	ldr	r3, [r4, #20]
 800742e:	3001      	adds	r0, #1
 8007430:	4298      	cmp	r0, r3
 8007432:	d004      	beq.n	800743e <__swbuf_r+0x62>
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	07db      	lsls	r3, r3, #31
 8007438:	d519      	bpl.n	800746e <__swbuf_r+0x92>
 800743a:	2e0a      	cmp	r6, #10
 800743c:	d117      	bne.n	800746e <__swbuf_r+0x92>
 800743e:	4621      	mov	r1, r4
 8007440:	4628      	mov	r0, r5
 8007442:	f000 ff6f 	bl	8008324 <_fflush_r>
 8007446:	b190      	cbz	r0, 800746e <__swbuf_r+0x92>
 8007448:	e00f      	b.n	800746a <__swbuf_r+0x8e>
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <__swbuf_r+0x9c>)
 800744c:	429c      	cmp	r4, r3
 800744e:	d101      	bne.n	8007454 <__swbuf_r+0x78>
 8007450:	68ac      	ldr	r4, [r5, #8]
 8007452:	e7d0      	b.n	80073f6 <__swbuf_r+0x1a>
 8007454:	4b09      	ldr	r3, [pc, #36]	; (800747c <__swbuf_r+0xa0>)
 8007456:	429c      	cmp	r4, r3
 8007458:	bf08      	it	eq
 800745a:	68ec      	ldreq	r4, [r5, #12]
 800745c:	e7cb      	b.n	80073f6 <__swbuf_r+0x1a>
 800745e:	4621      	mov	r1, r4
 8007460:	4628      	mov	r0, r5
 8007462:	f000 f80d 	bl	8007480 <__swsetup_r>
 8007466:	2800      	cmp	r0, #0
 8007468:	d0cc      	beq.n	8007404 <__swbuf_r+0x28>
 800746a:	f04f 37ff 	mov.w	r7, #4294967295
 800746e:	4638      	mov	r0, r7
 8007470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007472:	bf00      	nop
 8007474:	0801e7bc 	.word	0x0801e7bc
 8007478:	0801e7dc 	.word	0x0801e7dc
 800747c:	0801e79c 	.word	0x0801e79c

08007480 <__swsetup_r>:
 8007480:	4b32      	ldr	r3, [pc, #200]	; (800754c <__swsetup_r+0xcc>)
 8007482:	b570      	push	{r4, r5, r6, lr}
 8007484:	681d      	ldr	r5, [r3, #0]
 8007486:	4606      	mov	r6, r0
 8007488:	460c      	mov	r4, r1
 800748a:	b125      	cbz	r5, 8007496 <__swsetup_r+0x16>
 800748c:	69ab      	ldr	r3, [r5, #24]
 800748e:	b913      	cbnz	r3, 8007496 <__swsetup_r+0x16>
 8007490:	4628      	mov	r0, r5
 8007492:	f000 ffb1 	bl	80083f8 <__sinit>
 8007496:	4b2e      	ldr	r3, [pc, #184]	; (8007550 <__swsetup_r+0xd0>)
 8007498:	429c      	cmp	r4, r3
 800749a:	d10f      	bne.n	80074bc <__swsetup_r+0x3c>
 800749c:	686c      	ldr	r4, [r5, #4]
 800749e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	0715      	lsls	r5, r2, #28
 80074a6:	d42c      	bmi.n	8007502 <__swsetup_r+0x82>
 80074a8:	06d0      	lsls	r0, r2, #27
 80074aa:	d411      	bmi.n	80074d0 <__swsetup_r+0x50>
 80074ac:	2209      	movs	r2, #9
 80074ae:	6032      	str	r2, [r6, #0]
 80074b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ba:	bd70      	pop	{r4, r5, r6, pc}
 80074bc:	4b25      	ldr	r3, [pc, #148]	; (8007554 <__swsetup_r+0xd4>)
 80074be:	429c      	cmp	r4, r3
 80074c0:	d101      	bne.n	80074c6 <__swsetup_r+0x46>
 80074c2:	68ac      	ldr	r4, [r5, #8]
 80074c4:	e7eb      	b.n	800749e <__swsetup_r+0x1e>
 80074c6:	4b24      	ldr	r3, [pc, #144]	; (8007558 <__swsetup_r+0xd8>)
 80074c8:	429c      	cmp	r4, r3
 80074ca:	bf08      	it	eq
 80074cc:	68ec      	ldreq	r4, [r5, #12]
 80074ce:	e7e6      	b.n	800749e <__swsetup_r+0x1e>
 80074d0:	0751      	lsls	r1, r2, #29
 80074d2:	d512      	bpl.n	80074fa <__swsetup_r+0x7a>
 80074d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074d6:	b141      	cbz	r1, 80074ea <__swsetup_r+0x6a>
 80074d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074dc:	4299      	cmp	r1, r3
 80074de:	d002      	beq.n	80074e6 <__swsetup_r+0x66>
 80074e0:	4630      	mov	r0, r6
 80074e2:	f001 fb5f 	bl	8008ba4 <_free_r>
 80074e6:	2300      	movs	r3, #0
 80074e8:	6363      	str	r3, [r4, #52]	; 0x34
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074f0:	81a3      	strh	r3, [r4, #12]
 80074f2:	2300      	movs	r3, #0
 80074f4:	6063      	str	r3, [r4, #4]
 80074f6:	6923      	ldr	r3, [r4, #16]
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	f043 0308 	orr.w	r3, r3, #8
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	b94b      	cbnz	r3, 800751a <__swsetup_r+0x9a>
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800750c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007510:	d003      	beq.n	800751a <__swsetup_r+0x9a>
 8007512:	4621      	mov	r1, r4
 8007514:	4630      	mov	r0, r6
 8007516:	f001 f82b 	bl	8008570 <__smakebuf_r>
 800751a:	89a2      	ldrh	r2, [r4, #12]
 800751c:	f012 0301 	ands.w	r3, r2, #1
 8007520:	d00c      	beq.n	800753c <__swsetup_r+0xbc>
 8007522:	2300      	movs	r3, #0
 8007524:	60a3      	str	r3, [r4, #8]
 8007526:	6963      	ldr	r3, [r4, #20]
 8007528:	425b      	negs	r3, r3
 800752a:	61a3      	str	r3, [r4, #24]
 800752c:	6923      	ldr	r3, [r4, #16]
 800752e:	b953      	cbnz	r3, 8007546 <__swsetup_r+0xc6>
 8007530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007534:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007538:	d1ba      	bne.n	80074b0 <__swsetup_r+0x30>
 800753a:	bd70      	pop	{r4, r5, r6, pc}
 800753c:	0792      	lsls	r2, r2, #30
 800753e:	bf58      	it	pl
 8007540:	6963      	ldrpl	r3, [r4, #20]
 8007542:	60a3      	str	r3, [r4, #8]
 8007544:	e7f2      	b.n	800752c <__swsetup_r+0xac>
 8007546:	2000      	movs	r0, #0
 8007548:	e7f7      	b.n	800753a <__swsetup_r+0xba>
 800754a:	bf00      	nop
 800754c:	2000001c 	.word	0x2000001c
 8007550:	0801e7bc 	.word	0x0801e7bc
 8007554:	0801e7dc 	.word	0x0801e7dc
 8007558:	0801e79c 	.word	0x0801e79c

0800755c <quorem>:
 800755c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007560:	6903      	ldr	r3, [r0, #16]
 8007562:	690c      	ldr	r4, [r1, #16]
 8007564:	429c      	cmp	r4, r3
 8007566:	4680      	mov	r8, r0
 8007568:	f300 8082 	bgt.w	8007670 <quorem+0x114>
 800756c:	3c01      	subs	r4, #1
 800756e:	f101 0714 	add.w	r7, r1, #20
 8007572:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007576:	f100 0614 	add.w	r6, r0, #20
 800757a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800757e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007582:	eb06 030e 	add.w	r3, r6, lr
 8007586:	3501      	adds	r5, #1
 8007588:	eb07 090e 	add.w	r9, r7, lr
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007592:	b395      	cbz	r5, 80075fa <quorem+0x9e>
 8007594:	f04f 0a00 	mov.w	sl, #0
 8007598:	4638      	mov	r0, r7
 800759a:	46b4      	mov	ip, r6
 800759c:	46d3      	mov	fp, sl
 800759e:	f850 2b04 	ldr.w	r2, [r0], #4
 80075a2:	b293      	uxth	r3, r2
 80075a4:	fb05 a303 	mla	r3, r5, r3, sl
 80075a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	ebab 0303 	sub.w	r3, fp, r3
 80075b2:	0c12      	lsrs	r2, r2, #16
 80075b4:	f8bc b000 	ldrh.w	fp, [ip]
 80075b8:	fb05 a202 	mla	r2, r5, r2, sl
 80075bc:	fa13 f38b 	uxtah	r3, r3, fp
 80075c0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80075c4:	fa1f fb82 	uxth.w	fp, r2
 80075c8:	f8dc 2000 	ldr.w	r2, [ip]
 80075cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80075d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075da:	4581      	cmp	r9, r0
 80075dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80075e0:	f84c 3b04 	str.w	r3, [ip], #4
 80075e4:	d2db      	bcs.n	800759e <quorem+0x42>
 80075e6:	f856 300e 	ldr.w	r3, [r6, lr]
 80075ea:	b933      	cbnz	r3, 80075fa <quorem+0x9e>
 80075ec:	9b01      	ldr	r3, [sp, #4]
 80075ee:	3b04      	subs	r3, #4
 80075f0:	429e      	cmp	r6, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	d330      	bcc.n	8007658 <quorem+0xfc>
 80075f6:	f8c8 4010 	str.w	r4, [r8, #16]
 80075fa:	4640      	mov	r0, r8
 80075fc:	f001 fa0b 	bl	8008a16 <__mcmp>
 8007600:	2800      	cmp	r0, #0
 8007602:	db25      	blt.n	8007650 <quorem+0xf4>
 8007604:	3501      	adds	r5, #1
 8007606:	4630      	mov	r0, r6
 8007608:	f04f 0e00 	mov.w	lr, #0
 800760c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007610:	f8d0 c000 	ldr.w	ip, [r0]
 8007614:	b293      	uxth	r3, r2
 8007616:	ebae 0303 	sub.w	r3, lr, r3
 800761a:	0c12      	lsrs	r2, r2, #16
 800761c:	fa13 f38c 	uxtah	r3, r3, ip
 8007620:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007628:	b29b      	uxth	r3, r3
 800762a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800762e:	45b9      	cmp	r9, r7
 8007630:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007634:	f840 3b04 	str.w	r3, [r0], #4
 8007638:	d2e8      	bcs.n	800760c <quorem+0xb0>
 800763a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800763e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007642:	b92a      	cbnz	r2, 8007650 <quorem+0xf4>
 8007644:	3b04      	subs	r3, #4
 8007646:	429e      	cmp	r6, r3
 8007648:	461a      	mov	r2, r3
 800764a:	d30b      	bcc.n	8007664 <quorem+0x108>
 800764c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007650:	4628      	mov	r0, r5
 8007652:	b003      	add	sp, #12
 8007654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	3b04      	subs	r3, #4
 800765c:	2a00      	cmp	r2, #0
 800765e:	d1ca      	bne.n	80075f6 <quorem+0x9a>
 8007660:	3c01      	subs	r4, #1
 8007662:	e7c5      	b.n	80075f0 <quorem+0x94>
 8007664:	6812      	ldr	r2, [r2, #0]
 8007666:	3b04      	subs	r3, #4
 8007668:	2a00      	cmp	r2, #0
 800766a:	d1ef      	bne.n	800764c <quorem+0xf0>
 800766c:	3c01      	subs	r4, #1
 800766e:	e7ea      	b.n	8007646 <quorem+0xea>
 8007670:	2000      	movs	r0, #0
 8007672:	e7ee      	b.n	8007652 <quorem+0xf6>
 8007674:	0000      	movs	r0, r0
	...

08007678 <_dtoa_r>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	ec57 6b10 	vmov	r6, r7, d0
 8007680:	b097      	sub	sp, #92	; 0x5c
 8007682:	e9cd 6700 	strd	r6, r7, [sp]
 8007686:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007688:	9107      	str	r1, [sp, #28]
 800768a:	4604      	mov	r4, r0
 800768c:	920a      	str	r2, [sp, #40]	; 0x28
 800768e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007690:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007692:	b93e      	cbnz	r6, 80076a4 <_dtoa_r+0x2c>
 8007694:	2010      	movs	r0, #16
 8007696:	f000 ffab 	bl	80085f0 <malloc>
 800769a:	6260      	str	r0, [r4, #36]	; 0x24
 800769c:	6046      	str	r6, [r0, #4]
 800769e:	6086      	str	r6, [r0, #8]
 80076a0:	6006      	str	r6, [r0, #0]
 80076a2:	60c6      	str	r6, [r0, #12]
 80076a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076a6:	6819      	ldr	r1, [r3, #0]
 80076a8:	b151      	cbz	r1, 80076c0 <_dtoa_r+0x48>
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	604a      	str	r2, [r1, #4]
 80076ae:	2301      	movs	r3, #1
 80076b0:	4093      	lsls	r3, r2
 80076b2:	608b      	str	r3, [r1, #8]
 80076b4:	4620      	mov	r0, r4
 80076b6:	f000 ffd9 	bl	800866c <_Bfree>
 80076ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	9b01      	ldr	r3, [sp, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	bfbf      	itttt	lt
 80076c6:	2301      	movlt	r3, #1
 80076c8:	602b      	strlt	r3, [r5, #0]
 80076ca:	9b01      	ldrlt	r3, [sp, #4]
 80076cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076d0:	bfb2      	itee	lt
 80076d2:	9301      	strlt	r3, [sp, #4]
 80076d4:	2300      	movge	r3, #0
 80076d6:	602b      	strge	r3, [r5, #0]
 80076d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80076dc:	4ba8      	ldr	r3, [pc, #672]	; (8007980 <_dtoa_r+0x308>)
 80076de:	ea33 0308 	bics.w	r3, r3, r8
 80076e2:	d11b      	bne.n	800771c <_dtoa_r+0xa4>
 80076e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	9b00      	ldr	r3, [sp, #0]
 80076ee:	b923      	cbnz	r3, 80076fa <_dtoa_r+0x82>
 80076f0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80076f4:	2800      	cmp	r0, #0
 80076f6:	f000 8578 	beq.w	80081ea <_dtoa_r+0xb72>
 80076fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076fc:	b953      	cbnz	r3, 8007714 <_dtoa_r+0x9c>
 80076fe:	4ba1      	ldr	r3, [pc, #644]	; (8007984 <_dtoa_r+0x30c>)
 8007700:	e021      	b.n	8007746 <_dtoa_r+0xce>
 8007702:	4ba1      	ldr	r3, [pc, #644]	; (8007988 <_dtoa_r+0x310>)
 8007704:	9302      	str	r3, [sp, #8]
 8007706:	3308      	adds	r3, #8
 8007708:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800770a:	6013      	str	r3, [r2, #0]
 800770c:	9802      	ldr	r0, [sp, #8]
 800770e:	b017      	add	sp, #92	; 0x5c
 8007710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007714:	4b9b      	ldr	r3, [pc, #620]	; (8007984 <_dtoa_r+0x30c>)
 8007716:	9302      	str	r3, [sp, #8]
 8007718:	3303      	adds	r3, #3
 800771a:	e7f5      	b.n	8007708 <_dtoa_r+0x90>
 800771c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007720:	2200      	movs	r2, #0
 8007722:	2300      	movs	r3, #0
 8007724:	4630      	mov	r0, r6
 8007726:	4639      	mov	r1, r7
 8007728:	f7f9 fa2a 	bl	8000b80 <__aeabi_dcmpeq>
 800772c:	4681      	mov	r9, r0
 800772e:	b160      	cbz	r0, 800774a <_dtoa_r+0xd2>
 8007730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007732:	2301      	movs	r3, #1
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8553 	beq.w	80081e4 <_dtoa_r+0xb6c>
 800773e:	4b93      	ldr	r3, [pc, #588]	; (800798c <_dtoa_r+0x314>)
 8007740:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007742:	6013      	str	r3, [r2, #0]
 8007744:	3b01      	subs	r3, #1
 8007746:	9302      	str	r3, [sp, #8]
 8007748:	e7e0      	b.n	800770c <_dtoa_r+0x94>
 800774a:	aa14      	add	r2, sp, #80	; 0x50
 800774c:	a915      	add	r1, sp, #84	; 0x54
 800774e:	ec47 6b10 	vmov	d0, r6, r7
 8007752:	4620      	mov	r0, r4
 8007754:	f001 f9d7 	bl	8008b06 <__d2b>
 8007758:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800775c:	4682      	mov	sl, r0
 800775e:	2d00      	cmp	r5, #0
 8007760:	d07e      	beq.n	8007860 <_dtoa_r+0x1e8>
 8007762:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007766:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800776a:	4630      	mov	r0, r6
 800776c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007770:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007774:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8007778:	2200      	movs	r2, #0
 800777a:	4b85      	ldr	r3, [pc, #532]	; (8007990 <_dtoa_r+0x318>)
 800777c:	f7f8 fde4 	bl	8000348 <__aeabi_dsub>
 8007780:	a379      	add	r3, pc, #484	; (adr r3, 8007968 <_dtoa_r+0x2f0>)
 8007782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007786:	f7f8 ff93 	bl	80006b0 <__aeabi_dmul>
 800778a:	a379      	add	r3, pc, #484	; (adr r3, 8007970 <_dtoa_r+0x2f8>)
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	f7f8 fddc 	bl	800034c <__adddf3>
 8007794:	4606      	mov	r6, r0
 8007796:	4628      	mov	r0, r5
 8007798:	460f      	mov	r7, r1
 800779a:	f7f8 ff23 	bl	80005e4 <__aeabi_i2d>
 800779e:	a376      	add	r3, pc, #472	; (adr r3, 8007978 <_dtoa_r+0x300>)
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	f7f8 ff84 	bl	80006b0 <__aeabi_dmul>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4630      	mov	r0, r6
 80077ae:	4639      	mov	r1, r7
 80077b0:	f7f8 fdcc 	bl	800034c <__adddf3>
 80077b4:	4606      	mov	r6, r0
 80077b6:	460f      	mov	r7, r1
 80077b8:	f7f9 fa2a 	bl	8000c10 <__aeabi_d2iz>
 80077bc:	2200      	movs	r2, #0
 80077be:	4683      	mov	fp, r0
 80077c0:	2300      	movs	r3, #0
 80077c2:	4630      	mov	r0, r6
 80077c4:	4639      	mov	r1, r7
 80077c6:	f7f9 f9e5 	bl	8000b94 <__aeabi_dcmplt>
 80077ca:	b158      	cbz	r0, 80077e4 <_dtoa_r+0x16c>
 80077cc:	4658      	mov	r0, fp
 80077ce:	f7f8 ff09 	bl	80005e4 <__aeabi_i2d>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4630      	mov	r0, r6
 80077d8:	4639      	mov	r1, r7
 80077da:	f7f9 f9d1 	bl	8000b80 <__aeabi_dcmpeq>
 80077de:	b908      	cbnz	r0, 80077e4 <_dtoa_r+0x16c>
 80077e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077e4:	f1bb 0f16 	cmp.w	fp, #22
 80077e8:	d859      	bhi.n	800789e <_dtoa_r+0x226>
 80077ea:	496a      	ldr	r1, [pc, #424]	; (8007994 <_dtoa_r+0x31c>)
 80077ec:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80077f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077f8:	f7f9 f9ea 	bl	8000bd0 <__aeabi_dcmpgt>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d050      	beq.n	80078a2 <_dtoa_r+0x22a>
 8007800:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007804:	2300      	movs	r3, #0
 8007806:	930e      	str	r3, [sp, #56]	; 0x38
 8007808:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800780a:	1b5d      	subs	r5, r3, r5
 800780c:	1e6b      	subs	r3, r5, #1
 800780e:	9306      	str	r3, [sp, #24]
 8007810:	bf45      	ittet	mi
 8007812:	f1c5 0301 	rsbmi	r3, r5, #1
 8007816:	9305      	strmi	r3, [sp, #20]
 8007818:	2300      	movpl	r3, #0
 800781a:	2300      	movmi	r3, #0
 800781c:	bf4c      	ite	mi
 800781e:	9306      	strmi	r3, [sp, #24]
 8007820:	9305      	strpl	r3, [sp, #20]
 8007822:	f1bb 0f00 	cmp.w	fp, #0
 8007826:	db3e      	blt.n	80078a6 <_dtoa_r+0x22e>
 8007828:	9b06      	ldr	r3, [sp, #24]
 800782a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800782e:	445b      	add	r3, fp
 8007830:	9306      	str	r3, [sp, #24]
 8007832:	2300      	movs	r3, #0
 8007834:	9308      	str	r3, [sp, #32]
 8007836:	9b07      	ldr	r3, [sp, #28]
 8007838:	2b09      	cmp	r3, #9
 800783a:	f200 80af 	bhi.w	800799c <_dtoa_r+0x324>
 800783e:	2b05      	cmp	r3, #5
 8007840:	bfc4      	itt	gt
 8007842:	3b04      	subgt	r3, #4
 8007844:	9307      	strgt	r3, [sp, #28]
 8007846:	9b07      	ldr	r3, [sp, #28]
 8007848:	f1a3 0302 	sub.w	r3, r3, #2
 800784c:	bfcc      	ite	gt
 800784e:	2600      	movgt	r6, #0
 8007850:	2601      	movle	r6, #1
 8007852:	2b03      	cmp	r3, #3
 8007854:	f200 80ae 	bhi.w	80079b4 <_dtoa_r+0x33c>
 8007858:	e8df f003 	tbb	[pc, r3]
 800785c:	772f8482 	.word	0x772f8482
 8007860:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007862:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007864:	441d      	add	r5, r3
 8007866:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800786a:	2b20      	cmp	r3, #32
 800786c:	dd11      	ble.n	8007892 <_dtoa_r+0x21a>
 800786e:	9a00      	ldr	r2, [sp, #0]
 8007870:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007874:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007878:	fa22 f000 	lsr.w	r0, r2, r0
 800787c:	fa08 f303 	lsl.w	r3, r8, r3
 8007880:	4318      	orrs	r0, r3
 8007882:	f7f8 fe9f 	bl	80005c4 <__aeabi_ui2d>
 8007886:	2301      	movs	r3, #1
 8007888:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800788c:	3d01      	subs	r5, #1
 800788e:	9312      	str	r3, [sp, #72]	; 0x48
 8007890:	e772      	b.n	8007778 <_dtoa_r+0x100>
 8007892:	f1c3 0020 	rsb	r0, r3, #32
 8007896:	9b00      	ldr	r3, [sp, #0]
 8007898:	fa03 f000 	lsl.w	r0, r3, r0
 800789c:	e7f1      	b.n	8007882 <_dtoa_r+0x20a>
 800789e:	2301      	movs	r3, #1
 80078a0:	e7b1      	b.n	8007806 <_dtoa_r+0x18e>
 80078a2:	900e      	str	r0, [sp, #56]	; 0x38
 80078a4:	e7b0      	b.n	8007808 <_dtoa_r+0x190>
 80078a6:	9b05      	ldr	r3, [sp, #20]
 80078a8:	eba3 030b 	sub.w	r3, r3, fp
 80078ac:	9305      	str	r3, [sp, #20]
 80078ae:	f1cb 0300 	rsb	r3, fp, #0
 80078b2:	9308      	str	r3, [sp, #32]
 80078b4:	2300      	movs	r3, #0
 80078b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80078b8:	e7bd      	b.n	8007836 <_dtoa_r+0x1be>
 80078ba:	2301      	movs	r3, #1
 80078bc:	9309      	str	r3, [sp, #36]	; 0x24
 80078be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	dd7a      	ble.n	80079ba <_dtoa_r+0x342>
 80078c4:	9304      	str	r3, [sp, #16]
 80078c6:	9303      	str	r3, [sp, #12]
 80078c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80078ca:	2200      	movs	r2, #0
 80078cc:	606a      	str	r2, [r5, #4]
 80078ce:	2104      	movs	r1, #4
 80078d0:	f101 0214 	add.w	r2, r1, #20
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d975      	bls.n	80079c4 <_dtoa_r+0x34c>
 80078d8:	6869      	ldr	r1, [r5, #4]
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 fe92 	bl	8008604 <_Balloc>
 80078e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078e2:	6028      	str	r0, [r5, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	9302      	str	r3, [sp, #8]
 80078e8:	9b03      	ldr	r3, [sp, #12]
 80078ea:	2b0e      	cmp	r3, #14
 80078ec:	f200 80e5 	bhi.w	8007aba <_dtoa_r+0x442>
 80078f0:	2e00      	cmp	r6, #0
 80078f2:	f000 80e2 	beq.w	8007aba <_dtoa_r+0x442>
 80078f6:	ed9d 7b00 	vldr	d7, [sp]
 80078fa:	f1bb 0f00 	cmp.w	fp, #0
 80078fe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007902:	dd74      	ble.n	80079ee <_dtoa_r+0x376>
 8007904:	4a23      	ldr	r2, [pc, #140]	; (8007994 <_dtoa_r+0x31c>)
 8007906:	f00b 030f 	and.w	r3, fp, #15
 800790a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800790e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007912:	06f0      	lsls	r0, r6, #27
 8007914:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007918:	d559      	bpl.n	80079ce <_dtoa_r+0x356>
 800791a:	4b1f      	ldr	r3, [pc, #124]	; (8007998 <_dtoa_r+0x320>)
 800791c:	ec51 0b17 	vmov	r0, r1, d7
 8007920:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007924:	f7f8 ffee 	bl	8000904 <__aeabi_ddiv>
 8007928:	e9cd 0100 	strd	r0, r1, [sp]
 800792c:	f006 060f 	and.w	r6, r6, #15
 8007930:	2503      	movs	r5, #3
 8007932:	4f19      	ldr	r7, [pc, #100]	; (8007998 <_dtoa_r+0x320>)
 8007934:	2e00      	cmp	r6, #0
 8007936:	d14c      	bne.n	80079d2 <_dtoa_r+0x35a>
 8007938:	4642      	mov	r2, r8
 800793a:	464b      	mov	r3, r9
 800793c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007940:	f7f8 ffe0 	bl	8000904 <__aeabi_ddiv>
 8007944:	e9cd 0100 	strd	r0, r1, [sp]
 8007948:	e06a      	b.n	8007a20 <_dtoa_r+0x3a8>
 800794a:	2301      	movs	r3, #1
 800794c:	9309      	str	r3, [sp, #36]	; 0x24
 800794e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007950:	445b      	add	r3, fp
 8007952:	9304      	str	r3, [sp, #16]
 8007954:	3301      	adds	r3, #1
 8007956:	2b01      	cmp	r3, #1
 8007958:	9303      	str	r3, [sp, #12]
 800795a:	bfb8      	it	lt
 800795c:	2301      	movlt	r3, #1
 800795e:	e7b3      	b.n	80078c8 <_dtoa_r+0x250>
 8007960:	2300      	movs	r3, #0
 8007962:	e7ab      	b.n	80078bc <_dtoa_r+0x244>
 8007964:	2300      	movs	r3, #0
 8007966:	e7f1      	b.n	800794c <_dtoa_r+0x2d4>
 8007968:	636f4361 	.word	0x636f4361
 800796c:	3fd287a7 	.word	0x3fd287a7
 8007970:	8b60c8b3 	.word	0x8b60c8b3
 8007974:	3fc68a28 	.word	0x3fc68a28
 8007978:	509f79fb 	.word	0x509f79fb
 800797c:	3fd34413 	.word	0x3fd34413
 8007980:	7ff00000 	.word	0x7ff00000
 8007984:	0801e797 	.word	0x0801e797
 8007988:	0801e78e 	.word	0x0801e78e
 800798c:	0801ea1d 	.word	0x0801ea1d
 8007990:	3ff80000 	.word	0x3ff80000
 8007994:	0801e828 	.word	0x0801e828
 8007998:	0801e800 	.word	0x0801e800
 800799c:	2601      	movs	r6, #1
 800799e:	2300      	movs	r3, #0
 80079a0:	9307      	str	r3, [sp, #28]
 80079a2:	9609      	str	r6, [sp, #36]	; 0x24
 80079a4:	f04f 33ff 	mov.w	r3, #4294967295
 80079a8:	9304      	str	r3, [sp, #16]
 80079aa:	9303      	str	r3, [sp, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	2312      	movs	r3, #18
 80079b0:	920a      	str	r2, [sp, #40]	; 0x28
 80079b2:	e789      	b.n	80078c8 <_dtoa_r+0x250>
 80079b4:	2301      	movs	r3, #1
 80079b6:	9309      	str	r3, [sp, #36]	; 0x24
 80079b8:	e7f4      	b.n	80079a4 <_dtoa_r+0x32c>
 80079ba:	2301      	movs	r3, #1
 80079bc:	9304      	str	r3, [sp, #16]
 80079be:	9303      	str	r3, [sp, #12]
 80079c0:	461a      	mov	r2, r3
 80079c2:	e7f5      	b.n	80079b0 <_dtoa_r+0x338>
 80079c4:	686a      	ldr	r2, [r5, #4]
 80079c6:	3201      	adds	r2, #1
 80079c8:	606a      	str	r2, [r5, #4]
 80079ca:	0049      	lsls	r1, r1, #1
 80079cc:	e780      	b.n	80078d0 <_dtoa_r+0x258>
 80079ce:	2502      	movs	r5, #2
 80079d0:	e7af      	b.n	8007932 <_dtoa_r+0x2ba>
 80079d2:	07f1      	lsls	r1, r6, #31
 80079d4:	d508      	bpl.n	80079e8 <_dtoa_r+0x370>
 80079d6:	4640      	mov	r0, r8
 80079d8:	4649      	mov	r1, r9
 80079da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079de:	f7f8 fe67 	bl	80006b0 <__aeabi_dmul>
 80079e2:	3501      	adds	r5, #1
 80079e4:	4680      	mov	r8, r0
 80079e6:	4689      	mov	r9, r1
 80079e8:	1076      	asrs	r6, r6, #1
 80079ea:	3708      	adds	r7, #8
 80079ec:	e7a2      	b.n	8007934 <_dtoa_r+0x2bc>
 80079ee:	f000 809d 	beq.w	8007b2c <_dtoa_r+0x4b4>
 80079f2:	f1cb 0600 	rsb	r6, fp, #0
 80079f6:	4b9f      	ldr	r3, [pc, #636]	; (8007c74 <_dtoa_r+0x5fc>)
 80079f8:	4f9f      	ldr	r7, [pc, #636]	; (8007c78 <_dtoa_r+0x600>)
 80079fa:	f006 020f 	and.w	r2, r6, #15
 80079fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a0a:	f7f8 fe51 	bl	80006b0 <__aeabi_dmul>
 8007a0e:	e9cd 0100 	strd	r0, r1, [sp]
 8007a12:	1136      	asrs	r6, r6, #4
 8007a14:	2300      	movs	r3, #0
 8007a16:	2502      	movs	r5, #2
 8007a18:	2e00      	cmp	r6, #0
 8007a1a:	d17c      	bne.n	8007b16 <_dtoa_r+0x49e>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d191      	bne.n	8007944 <_dtoa_r+0x2cc>
 8007a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 8084 	beq.w	8007b30 <_dtoa_r+0x4b8>
 8007a28:	e9dd 8900 	ldrd	r8, r9, [sp]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	4b93      	ldr	r3, [pc, #588]	; (8007c7c <_dtoa_r+0x604>)
 8007a30:	4640      	mov	r0, r8
 8007a32:	4649      	mov	r1, r9
 8007a34:	f7f9 f8ae 	bl	8000b94 <__aeabi_dcmplt>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d079      	beq.n	8007b30 <_dtoa_r+0x4b8>
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d076      	beq.n	8007b30 <_dtoa_r+0x4b8>
 8007a42:	9b04      	ldr	r3, [sp, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	dd34      	ble.n	8007ab2 <_dtoa_r+0x43a>
 8007a48:	2200      	movs	r2, #0
 8007a4a:	4b8d      	ldr	r3, [pc, #564]	; (8007c80 <_dtoa_r+0x608>)
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	4649      	mov	r1, r9
 8007a50:	f7f8 fe2e 	bl	80006b0 <__aeabi_dmul>
 8007a54:	e9cd 0100 	strd	r0, r1, [sp]
 8007a58:	9e04      	ldr	r6, [sp, #16]
 8007a5a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007a5e:	3501      	adds	r5, #1
 8007a60:	4628      	mov	r0, r5
 8007a62:	f7f8 fdbf 	bl	80005e4 <__aeabi_i2d>
 8007a66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a6a:	f7f8 fe21 	bl	80006b0 <__aeabi_dmul>
 8007a6e:	2200      	movs	r2, #0
 8007a70:	4b84      	ldr	r3, [pc, #528]	; (8007c84 <_dtoa_r+0x60c>)
 8007a72:	f7f8 fc6b 	bl	800034c <__adddf3>
 8007a76:	4680      	mov	r8, r0
 8007a78:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8007a7c:	2e00      	cmp	r6, #0
 8007a7e:	d15a      	bne.n	8007b36 <_dtoa_r+0x4be>
 8007a80:	2200      	movs	r2, #0
 8007a82:	4b81      	ldr	r3, [pc, #516]	; (8007c88 <_dtoa_r+0x610>)
 8007a84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a88:	f7f8 fc5e 	bl	8000348 <__aeabi_dsub>
 8007a8c:	4642      	mov	r2, r8
 8007a8e:	464b      	mov	r3, r9
 8007a90:	e9cd 0100 	strd	r0, r1, [sp]
 8007a94:	f7f9 f89c 	bl	8000bd0 <__aeabi_dcmpgt>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	f040 829b 	bne.w	8007fd4 <_dtoa_r+0x95c>
 8007a9e:	4642      	mov	r2, r8
 8007aa0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007aa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007aa8:	f7f9 f874 	bl	8000b94 <__aeabi_dcmplt>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f040 828f 	bne.w	8007fd0 <_dtoa_r+0x958>
 8007ab2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ab6:	e9cd 2300 	strd	r2, r3, [sp]
 8007aba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f2c0 8150 	blt.w	8007d62 <_dtoa_r+0x6ea>
 8007ac2:	f1bb 0f0e 	cmp.w	fp, #14
 8007ac6:	f300 814c 	bgt.w	8007d62 <_dtoa_r+0x6ea>
 8007aca:	4b6a      	ldr	r3, [pc, #424]	; (8007c74 <_dtoa_r+0x5fc>)
 8007acc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ad0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f280 80da 	bge.w	8007c90 <_dtoa_r+0x618>
 8007adc:	9b03      	ldr	r3, [sp, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f300 80d6 	bgt.w	8007c90 <_dtoa_r+0x618>
 8007ae4:	f040 8273 	bne.w	8007fce <_dtoa_r+0x956>
 8007ae8:	2200      	movs	r2, #0
 8007aea:	4b67      	ldr	r3, [pc, #412]	; (8007c88 <_dtoa_r+0x610>)
 8007aec:	4640      	mov	r0, r8
 8007aee:	4649      	mov	r1, r9
 8007af0:	f7f8 fdde 	bl	80006b0 <__aeabi_dmul>
 8007af4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007af8:	f7f9 f860 	bl	8000bbc <__aeabi_dcmpge>
 8007afc:	9e03      	ldr	r6, [sp, #12]
 8007afe:	4637      	mov	r7, r6
 8007b00:	2800      	cmp	r0, #0
 8007b02:	f040 824a 	bne.w	8007f9a <_dtoa_r+0x922>
 8007b06:	9b02      	ldr	r3, [sp, #8]
 8007b08:	9a02      	ldr	r2, [sp, #8]
 8007b0a:	1c5d      	adds	r5, r3, #1
 8007b0c:	2331      	movs	r3, #49	; 0x31
 8007b0e:	7013      	strb	r3, [r2, #0]
 8007b10:	f10b 0b01 	add.w	fp, fp, #1
 8007b14:	e245      	b.n	8007fa2 <_dtoa_r+0x92a>
 8007b16:	07f2      	lsls	r2, r6, #31
 8007b18:	d505      	bpl.n	8007b26 <_dtoa_r+0x4ae>
 8007b1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b1e:	f7f8 fdc7 	bl	80006b0 <__aeabi_dmul>
 8007b22:	3501      	adds	r5, #1
 8007b24:	2301      	movs	r3, #1
 8007b26:	1076      	asrs	r6, r6, #1
 8007b28:	3708      	adds	r7, #8
 8007b2a:	e775      	b.n	8007a18 <_dtoa_r+0x3a0>
 8007b2c:	2502      	movs	r5, #2
 8007b2e:	e777      	b.n	8007a20 <_dtoa_r+0x3a8>
 8007b30:	465f      	mov	r7, fp
 8007b32:	9e03      	ldr	r6, [sp, #12]
 8007b34:	e794      	b.n	8007a60 <_dtoa_r+0x3e8>
 8007b36:	9a02      	ldr	r2, [sp, #8]
 8007b38:	4b4e      	ldr	r3, [pc, #312]	; (8007c74 <_dtoa_r+0x5fc>)
 8007b3a:	4432      	add	r2, r6
 8007b3c:	9213      	str	r2, [sp, #76]	; 0x4c
 8007b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b40:	1e71      	subs	r1, r6, #1
 8007b42:	2a00      	cmp	r2, #0
 8007b44:	d048      	beq.n	8007bd8 <_dtoa_r+0x560>
 8007b46:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4e:	2000      	movs	r0, #0
 8007b50:	494e      	ldr	r1, [pc, #312]	; (8007c8c <_dtoa_r+0x614>)
 8007b52:	f7f8 fed7 	bl	8000904 <__aeabi_ddiv>
 8007b56:	4642      	mov	r2, r8
 8007b58:	464b      	mov	r3, r9
 8007b5a:	f7f8 fbf5 	bl	8000348 <__aeabi_dsub>
 8007b5e:	9d02      	ldr	r5, [sp, #8]
 8007b60:	4680      	mov	r8, r0
 8007b62:	4689      	mov	r9, r1
 8007b64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b68:	f7f9 f852 	bl	8000c10 <__aeabi_d2iz>
 8007b6c:	4606      	mov	r6, r0
 8007b6e:	f7f8 fd39 	bl	80005e4 <__aeabi_i2d>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b7a:	f7f8 fbe5 	bl	8000348 <__aeabi_dsub>
 8007b7e:	3630      	adds	r6, #48	; 0x30
 8007b80:	f805 6b01 	strb.w	r6, [r5], #1
 8007b84:	4642      	mov	r2, r8
 8007b86:	464b      	mov	r3, r9
 8007b88:	e9cd 0100 	strd	r0, r1, [sp]
 8007b8c:	f7f9 f802 	bl	8000b94 <__aeabi_dcmplt>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d165      	bne.n	8007c60 <_dtoa_r+0x5e8>
 8007b94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b98:	2000      	movs	r0, #0
 8007b9a:	4938      	ldr	r1, [pc, #224]	; (8007c7c <_dtoa_r+0x604>)
 8007b9c:	f7f8 fbd4 	bl	8000348 <__aeabi_dsub>
 8007ba0:	4642      	mov	r2, r8
 8007ba2:	464b      	mov	r3, r9
 8007ba4:	f7f8 fff6 	bl	8000b94 <__aeabi_dcmplt>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	f040 80ba 	bne.w	8007d22 <_dtoa_r+0x6aa>
 8007bae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007bb0:	429d      	cmp	r5, r3
 8007bb2:	f43f af7e 	beq.w	8007ab2 <_dtoa_r+0x43a>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	4b31      	ldr	r3, [pc, #196]	; (8007c80 <_dtoa_r+0x608>)
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	f7f8 fd77 	bl	80006b0 <__aeabi_dmul>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	4680      	mov	r8, r0
 8007bc6:	4689      	mov	r9, r1
 8007bc8:	4b2d      	ldr	r3, [pc, #180]	; (8007c80 <_dtoa_r+0x608>)
 8007bca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bce:	f7f8 fd6f 	bl	80006b0 <__aeabi_dmul>
 8007bd2:	e9cd 0100 	strd	r0, r1, [sp]
 8007bd6:	e7c5      	b.n	8007b64 <_dtoa_r+0x4ec>
 8007bd8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007bdc:	4642      	mov	r2, r8
 8007bde:	464b      	mov	r3, r9
 8007be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007be4:	f7f8 fd64 	bl	80006b0 <__aeabi_dmul>
 8007be8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bec:	9d02      	ldr	r5, [sp, #8]
 8007bee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bf2:	f7f9 f80d 	bl	8000c10 <__aeabi_d2iz>
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	f7f8 fcf4 	bl	80005e4 <__aeabi_i2d>
 8007bfc:	3630      	adds	r6, #48	; 0x30
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c06:	f7f8 fb9f 	bl	8000348 <__aeabi_dsub>
 8007c0a:	f805 6b01 	strb.w	r6, [r5], #1
 8007c0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c10:	42ab      	cmp	r3, r5
 8007c12:	4680      	mov	r8, r0
 8007c14:	4689      	mov	r9, r1
 8007c16:	f04f 0200 	mov.w	r2, #0
 8007c1a:	d125      	bne.n	8007c68 <_dtoa_r+0x5f0>
 8007c1c:	4b1b      	ldr	r3, [pc, #108]	; (8007c8c <_dtoa_r+0x614>)
 8007c1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c22:	f7f8 fb93 	bl	800034c <__adddf3>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	f7f8 ffcf 	bl	8000bd0 <__aeabi_dcmpgt>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d175      	bne.n	8007d22 <_dtoa_r+0x6aa>
 8007c36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	4913      	ldr	r1, [pc, #76]	; (8007c8c <_dtoa_r+0x614>)
 8007c3e:	f7f8 fb83 	bl	8000348 <__aeabi_dsub>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	4640      	mov	r0, r8
 8007c48:	4649      	mov	r1, r9
 8007c4a:	f7f8 ffa3 	bl	8000b94 <__aeabi_dcmplt>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f43f af2f 	beq.w	8007ab2 <_dtoa_r+0x43a>
 8007c54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c58:	2b30      	cmp	r3, #48	; 0x30
 8007c5a:	f105 32ff 	add.w	r2, r5, #4294967295
 8007c5e:	d001      	beq.n	8007c64 <_dtoa_r+0x5ec>
 8007c60:	46bb      	mov	fp, r7
 8007c62:	e04d      	b.n	8007d00 <_dtoa_r+0x688>
 8007c64:	4615      	mov	r5, r2
 8007c66:	e7f5      	b.n	8007c54 <_dtoa_r+0x5dc>
 8007c68:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <_dtoa_r+0x608>)
 8007c6a:	f7f8 fd21 	bl	80006b0 <__aeabi_dmul>
 8007c6e:	e9cd 0100 	strd	r0, r1, [sp]
 8007c72:	e7bc      	b.n	8007bee <_dtoa_r+0x576>
 8007c74:	0801e828 	.word	0x0801e828
 8007c78:	0801e800 	.word	0x0801e800
 8007c7c:	3ff00000 	.word	0x3ff00000
 8007c80:	40240000 	.word	0x40240000
 8007c84:	401c0000 	.word	0x401c0000
 8007c88:	40140000 	.word	0x40140000
 8007c8c:	3fe00000 	.word	0x3fe00000
 8007c90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007c94:	9d02      	ldr	r5, [sp, #8]
 8007c96:	4642      	mov	r2, r8
 8007c98:	464b      	mov	r3, r9
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	f7f8 fe31 	bl	8000904 <__aeabi_ddiv>
 8007ca2:	f7f8 ffb5 	bl	8000c10 <__aeabi_d2iz>
 8007ca6:	9000      	str	r0, [sp, #0]
 8007ca8:	f7f8 fc9c 	bl	80005e4 <__aeabi_i2d>
 8007cac:	4642      	mov	r2, r8
 8007cae:	464b      	mov	r3, r9
 8007cb0:	f7f8 fcfe 	bl	80006b0 <__aeabi_dmul>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4630      	mov	r0, r6
 8007cba:	4639      	mov	r1, r7
 8007cbc:	f7f8 fb44 	bl	8000348 <__aeabi_dsub>
 8007cc0:	9e00      	ldr	r6, [sp, #0]
 8007cc2:	9f03      	ldr	r7, [sp, #12]
 8007cc4:	3630      	adds	r6, #48	; 0x30
 8007cc6:	f805 6b01 	strb.w	r6, [r5], #1
 8007cca:	9e02      	ldr	r6, [sp, #8]
 8007ccc:	1bae      	subs	r6, r5, r6
 8007cce:	42b7      	cmp	r7, r6
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	d138      	bne.n	8007d48 <_dtoa_r+0x6d0>
 8007cd6:	f7f8 fb39 	bl	800034c <__adddf3>
 8007cda:	4606      	mov	r6, r0
 8007cdc:	460f      	mov	r7, r1
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4640      	mov	r0, r8
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	f7f8 ff55 	bl	8000b94 <__aeabi_dcmplt>
 8007cea:	b9c8      	cbnz	r0, 8007d20 <_dtoa_r+0x6a8>
 8007cec:	4632      	mov	r2, r6
 8007cee:	463b      	mov	r3, r7
 8007cf0:	4640      	mov	r0, r8
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	f7f8 ff44 	bl	8000b80 <__aeabi_dcmpeq>
 8007cf8:	b110      	cbz	r0, 8007d00 <_dtoa_r+0x688>
 8007cfa:	9b00      	ldr	r3, [sp, #0]
 8007cfc:	07db      	lsls	r3, r3, #31
 8007cfe:	d40f      	bmi.n	8007d20 <_dtoa_r+0x6a8>
 8007d00:	4651      	mov	r1, sl
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 fcb2 	bl	800866c <_Bfree>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d0c:	702b      	strb	r3, [r5, #0]
 8007d0e:	f10b 0301 	add.w	r3, fp, #1
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f43f acf8 	beq.w	800770c <_dtoa_r+0x94>
 8007d1c:	601d      	str	r5, [r3, #0]
 8007d1e:	e4f5      	b.n	800770c <_dtoa_r+0x94>
 8007d20:	465f      	mov	r7, fp
 8007d22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d26:	2a39      	cmp	r2, #57	; 0x39
 8007d28:	f105 33ff 	add.w	r3, r5, #4294967295
 8007d2c:	d106      	bne.n	8007d3c <_dtoa_r+0x6c4>
 8007d2e:	9a02      	ldr	r2, [sp, #8]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d107      	bne.n	8007d44 <_dtoa_r+0x6cc>
 8007d34:	2330      	movs	r3, #48	; 0x30
 8007d36:	7013      	strb	r3, [r2, #0]
 8007d38:	3701      	adds	r7, #1
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	781a      	ldrb	r2, [r3, #0]
 8007d3e:	3201      	adds	r2, #1
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	e78d      	b.n	8007c60 <_dtoa_r+0x5e8>
 8007d44:	461d      	mov	r5, r3
 8007d46:	e7ec      	b.n	8007d22 <_dtoa_r+0x6aa>
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4ba4      	ldr	r3, [pc, #656]	; (8007fdc <_dtoa_r+0x964>)
 8007d4c:	f7f8 fcb0 	bl	80006b0 <__aeabi_dmul>
 8007d50:	2200      	movs	r2, #0
 8007d52:	2300      	movs	r3, #0
 8007d54:	4606      	mov	r6, r0
 8007d56:	460f      	mov	r7, r1
 8007d58:	f7f8 ff12 	bl	8000b80 <__aeabi_dcmpeq>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d09a      	beq.n	8007c96 <_dtoa_r+0x61e>
 8007d60:	e7ce      	b.n	8007d00 <_dtoa_r+0x688>
 8007d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d64:	2a00      	cmp	r2, #0
 8007d66:	f000 80cd 	beq.w	8007f04 <_dtoa_r+0x88c>
 8007d6a:	9a07      	ldr	r2, [sp, #28]
 8007d6c:	2a01      	cmp	r2, #1
 8007d6e:	f300 80af 	bgt.w	8007ed0 <_dtoa_r+0x858>
 8007d72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d74:	2a00      	cmp	r2, #0
 8007d76:	f000 80a7 	beq.w	8007ec8 <_dtoa_r+0x850>
 8007d7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d7e:	9e08      	ldr	r6, [sp, #32]
 8007d80:	9d05      	ldr	r5, [sp, #20]
 8007d82:	9a05      	ldr	r2, [sp, #20]
 8007d84:	441a      	add	r2, r3
 8007d86:	9205      	str	r2, [sp, #20]
 8007d88:	9a06      	ldr	r2, [sp, #24]
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	441a      	add	r2, r3
 8007d8e:	4620      	mov	r0, r4
 8007d90:	9206      	str	r2, [sp, #24]
 8007d92:	f000 fd0b 	bl	80087ac <__i2b>
 8007d96:	4607      	mov	r7, r0
 8007d98:	2d00      	cmp	r5, #0
 8007d9a:	dd0c      	ble.n	8007db6 <_dtoa_r+0x73e>
 8007d9c:	9b06      	ldr	r3, [sp, #24]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	dd09      	ble.n	8007db6 <_dtoa_r+0x73e>
 8007da2:	42ab      	cmp	r3, r5
 8007da4:	9a05      	ldr	r2, [sp, #20]
 8007da6:	bfa8      	it	ge
 8007da8:	462b      	movge	r3, r5
 8007daa:	1ad2      	subs	r2, r2, r3
 8007dac:	9205      	str	r2, [sp, #20]
 8007dae:	9a06      	ldr	r2, [sp, #24]
 8007db0:	1aed      	subs	r5, r5, r3
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	9306      	str	r3, [sp, #24]
 8007db6:	9b08      	ldr	r3, [sp, #32]
 8007db8:	b1f3      	cbz	r3, 8007df8 <_dtoa_r+0x780>
 8007dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 80a5 	beq.w	8007f0c <_dtoa_r+0x894>
 8007dc2:	2e00      	cmp	r6, #0
 8007dc4:	dd10      	ble.n	8007de8 <_dtoa_r+0x770>
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	4632      	mov	r2, r6
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fd84 	bl	80088d8 <__pow5mult>
 8007dd0:	4652      	mov	r2, sl
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f000 fcf1 	bl	80087be <__multiply>
 8007ddc:	4651      	mov	r1, sl
 8007dde:	4680      	mov	r8, r0
 8007de0:	4620      	mov	r0, r4
 8007de2:	f000 fc43 	bl	800866c <_Bfree>
 8007de6:	46c2      	mov	sl, r8
 8007de8:	9b08      	ldr	r3, [sp, #32]
 8007dea:	1b9a      	subs	r2, r3, r6
 8007dec:	d004      	beq.n	8007df8 <_dtoa_r+0x780>
 8007dee:	4651      	mov	r1, sl
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 fd71 	bl	80088d8 <__pow5mult>
 8007df6:	4682      	mov	sl, r0
 8007df8:	2101      	movs	r1, #1
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f000 fcd6 	bl	80087ac <__i2b>
 8007e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	4606      	mov	r6, r0
 8007e06:	f340 8083 	ble.w	8007f10 <_dtoa_r+0x898>
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	4601      	mov	r1, r0
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 fd62 	bl	80088d8 <__pow5mult>
 8007e14:	9b07      	ldr	r3, [sp, #28]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	4606      	mov	r6, r0
 8007e1a:	dd7c      	ble.n	8007f16 <_dtoa_r+0x89e>
 8007e1c:	f04f 0800 	mov.w	r8, #0
 8007e20:	6933      	ldr	r3, [r6, #16]
 8007e22:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e26:	6918      	ldr	r0, [r3, #16]
 8007e28:	f000 fc72 	bl	8008710 <__hi0bits>
 8007e2c:	f1c0 0020 	rsb	r0, r0, #32
 8007e30:	9b06      	ldr	r3, [sp, #24]
 8007e32:	4418      	add	r0, r3
 8007e34:	f010 001f 	ands.w	r0, r0, #31
 8007e38:	f000 8096 	beq.w	8007f68 <_dtoa_r+0x8f0>
 8007e3c:	f1c0 0320 	rsb	r3, r0, #32
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	f340 8087 	ble.w	8007f54 <_dtoa_r+0x8dc>
 8007e46:	9b05      	ldr	r3, [sp, #20]
 8007e48:	f1c0 001c 	rsb	r0, r0, #28
 8007e4c:	4403      	add	r3, r0
 8007e4e:	9305      	str	r3, [sp, #20]
 8007e50:	9b06      	ldr	r3, [sp, #24]
 8007e52:	4405      	add	r5, r0
 8007e54:	4403      	add	r3, r0
 8007e56:	9306      	str	r3, [sp, #24]
 8007e58:	9b05      	ldr	r3, [sp, #20]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	dd05      	ble.n	8007e6a <_dtoa_r+0x7f2>
 8007e5e:	4651      	mov	r1, sl
 8007e60:	461a      	mov	r2, r3
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 fd86 	bl	8008974 <__lshift>
 8007e68:	4682      	mov	sl, r0
 8007e6a:	9b06      	ldr	r3, [sp, #24]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dd05      	ble.n	8007e7c <_dtoa_r+0x804>
 8007e70:	4631      	mov	r1, r6
 8007e72:	461a      	mov	r2, r3
 8007e74:	4620      	mov	r0, r4
 8007e76:	f000 fd7d 	bl	8008974 <__lshift>
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d074      	beq.n	8007f6c <_dtoa_r+0x8f4>
 8007e82:	4631      	mov	r1, r6
 8007e84:	4650      	mov	r0, sl
 8007e86:	f000 fdc6 	bl	8008a16 <__mcmp>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	da6e      	bge.n	8007f6c <_dtoa_r+0x8f4>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	4651      	mov	r1, sl
 8007e92:	220a      	movs	r2, #10
 8007e94:	4620      	mov	r0, r4
 8007e96:	f000 fc00 	bl	800869a <__multadd>
 8007e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 81a8 	beq.w	80081f8 <_dtoa_r+0xb80>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4639      	mov	r1, r7
 8007eac:	220a      	movs	r2, #10
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 fbf3 	bl	800869a <__multadd>
 8007eb4:	9b04      	ldr	r3, [sp, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	4607      	mov	r7, r0
 8007eba:	f300 80c8 	bgt.w	800804e <_dtoa_r+0x9d6>
 8007ebe:	9b07      	ldr	r3, [sp, #28]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	f340 80c4 	ble.w	800804e <_dtoa_r+0x9d6>
 8007ec6:	e059      	b.n	8007f7c <_dtoa_r+0x904>
 8007ec8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007eca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ece:	e756      	b.n	8007d7e <_dtoa_r+0x706>
 8007ed0:	9b03      	ldr	r3, [sp, #12]
 8007ed2:	1e5e      	subs	r6, r3, #1
 8007ed4:	9b08      	ldr	r3, [sp, #32]
 8007ed6:	42b3      	cmp	r3, r6
 8007ed8:	bfbf      	itttt	lt
 8007eda:	9b08      	ldrlt	r3, [sp, #32]
 8007edc:	9608      	strlt	r6, [sp, #32]
 8007ede:	1af2      	sublt	r2, r6, r3
 8007ee0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8007ee2:	bfb6      	itet	lt
 8007ee4:	189b      	addlt	r3, r3, r2
 8007ee6:	1b9e      	subge	r6, r3, r6
 8007ee8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8007eea:	9b03      	ldr	r3, [sp, #12]
 8007eec:	bfb8      	it	lt
 8007eee:	2600      	movlt	r6, #0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	bfb9      	ittee	lt
 8007ef4:	9b05      	ldrlt	r3, [sp, #20]
 8007ef6:	9a03      	ldrlt	r2, [sp, #12]
 8007ef8:	9d05      	ldrge	r5, [sp, #20]
 8007efa:	9b03      	ldrge	r3, [sp, #12]
 8007efc:	bfbc      	itt	lt
 8007efe:	1a9d      	sublt	r5, r3, r2
 8007f00:	2300      	movlt	r3, #0
 8007f02:	e73e      	b.n	8007d82 <_dtoa_r+0x70a>
 8007f04:	9e08      	ldr	r6, [sp, #32]
 8007f06:	9d05      	ldr	r5, [sp, #20]
 8007f08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007f0a:	e745      	b.n	8007d98 <_dtoa_r+0x720>
 8007f0c:	9a08      	ldr	r2, [sp, #32]
 8007f0e:	e76e      	b.n	8007dee <_dtoa_r+0x776>
 8007f10:	9b07      	ldr	r3, [sp, #28]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	dc19      	bgt.n	8007f4a <_dtoa_r+0x8d2>
 8007f16:	9b00      	ldr	r3, [sp, #0]
 8007f18:	b9bb      	cbnz	r3, 8007f4a <_dtoa_r+0x8d2>
 8007f1a:	9b01      	ldr	r3, [sp, #4]
 8007f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f20:	b99b      	cbnz	r3, 8007f4a <_dtoa_r+0x8d2>
 8007f22:	9b01      	ldr	r3, [sp, #4]
 8007f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f28:	0d1b      	lsrs	r3, r3, #20
 8007f2a:	051b      	lsls	r3, r3, #20
 8007f2c:	b183      	cbz	r3, 8007f50 <_dtoa_r+0x8d8>
 8007f2e:	9b05      	ldr	r3, [sp, #20]
 8007f30:	3301      	adds	r3, #1
 8007f32:	9305      	str	r3, [sp, #20]
 8007f34:	9b06      	ldr	r3, [sp, #24]
 8007f36:	3301      	adds	r3, #1
 8007f38:	9306      	str	r3, [sp, #24]
 8007f3a:	f04f 0801 	mov.w	r8, #1
 8007f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f47f af6d 	bne.w	8007e20 <_dtoa_r+0x7a8>
 8007f46:	2001      	movs	r0, #1
 8007f48:	e772      	b.n	8007e30 <_dtoa_r+0x7b8>
 8007f4a:	f04f 0800 	mov.w	r8, #0
 8007f4e:	e7f6      	b.n	8007f3e <_dtoa_r+0x8c6>
 8007f50:	4698      	mov	r8, r3
 8007f52:	e7f4      	b.n	8007f3e <_dtoa_r+0x8c6>
 8007f54:	d080      	beq.n	8007e58 <_dtoa_r+0x7e0>
 8007f56:	9a05      	ldr	r2, [sp, #20]
 8007f58:	331c      	adds	r3, #28
 8007f5a:	441a      	add	r2, r3
 8007f5c:	9205      	str	r2, [sp, #20]
 8007f5e:	9a06      	ldr	r2, [sp, #24]
 8007f60:	441a      	add	r2, r3
 8007f62:	441d      	add	r5, r3
 8007f64:	4613      	mov	r3, r2
 8007f66:	e776      	b.n	8007e56 <_dtoa_r+0x7de>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	e7f4      	b.n	8007f56 <_dtoa_r+0x8de>
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	dc36      	bgt.n	8007fe0 <_dtoa_r+0x968>
 8007f72:	9b07      	ldr	r3, [sp, #28]
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	dd33      	ble.n	8007fe0 <_dtoa_r+0x968>
 8007f78:	9b03      	ldr	r3, [sp, #12]
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	9b04      	ldr	r3, [sp, #16]
 8007f7e:	b963      	cbnz	r3, 8007f9a <_dtoa_r+0x922>
 8007f80:	4631      	mov	r1, r6
 8007f82:	2205      	movs	r2, #5
 8007f84:	4620      	mov	r0, r4
 8007f86:	f000 fb88 	bl	800869a <__multadd>
 8007f8a:	4601      	mov	r1, r0
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	4650      	mov	r0, sl
 8007f90:	f000 fd41 	bl	8008a16 <__mcmp>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	f73f adb6 	bgt.w	8007b06 <_dtoa_r+0x48e>
 8007f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9c:	9d02      	ldr	r5, [sp, #8]
 8007f9e:	ea6f 0b03 	mvn.w	fp, r3
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	9303      	str	r3, [sp, #12]
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 fb5f 	bl	800866c <_Bfree>
 8007fae:	2f00      	cmp	r7, #0
 8007fb0:	f43f aea6 	beq.w	8007d00 <_dtoa_r+0x688>
 8007fb4:	9b03      	ldr	r3, [sp, #12]
 8007fb6:	b12b      	cbz	r3, 8007fc4 <_dtoa_r+0x94c>
 8007fb8:	42bb      	cmp	r3, r7
 8007fba:	d003      	beq.n	8007fc4 <_dtoa_r+0x94c>
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 fb54 	bl	800866c <_Bfree>
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f000 fb50 	bl	800866c <_Bfree>
 8007fcc:	e698      	b.n	8007d00 <_dtoa_r+0x688>
 8007fce:	2600      	movs	r6, #0
 8007fd0:	4637      	mov	r7, r6
 8007fd2:	e7e2      	b.n	8007f9a <_dtoa_r+0x922>
 8007fd4:	46bb      	mov	fp, r7
 8007fd6:	4637      	mov	r7, r6
 8007fd8:	e595      	b.n	8007b06 <_dtoa_r+0x48e>
 8007fda:	bf00      	nop
 8007fdc:	40240000 	.word	0x40240000
 8007fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe2:	bb93      	cbnz	r3, 800804a <_dtoa_r+0x9d2>
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	9304      	str	r3, [sp, #16]
 8007fe8:	9d02      	ldr	r5, [sp, #8]
 8007fea:	4631      	mov	r1, r6
 8007fec:	4650      	mov	r0, sl
 8007fee:	f7ff fab5 	bl	800755c <quorem>
 8007ff2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007ff6:	f805 9b01 	strb.w	r9, [r5], #1
 8007ffa:	9b02      	ldr	r3, [sp, #8]
 8007ffc:	9a04      	ldr	r2, [sp, #16]
 8007ffe:	1aeb      	subs	r3, r5, r3
 8008000:	429a      	cmp	r2, r3
 8008002:	f300 80dc 	bgt.w	80081be <_dtoa_r+0xb46>
 8008006:	9b02      	ldr	r3, [sp, #8]
 8008008:	2a01      	cmp	r2, #1
 800800a:	bfac      	ite	ge
 800800c:	189b      	addge	r3, r3, r2
 800800e:	3301      	addlt	r3, #1
 8008010:	4698      	mov	r8, r3
 8008012:	2300      	movs	r3, #0
 8008014:	9303      	str	r3, [sp, #12]
 8008016:	4651      	mov	r1, sl
 8008018:	2201      	movs	r2, #1
 800801a:	4620      	mov	r0, r4
 800801c:	f000 fcaa 	bl	8008974 <__lshift>
 8008020:	4631      	mov	r1, r6
 8008022:	4682      	mov	sl, r0
 8008024:	f000 fcf7 	bl	8008a16 <__mcmp>
 8008028:	2800      	cmp	r0, #0
 800802a:	f300 808d 	bgt.w	8008148 <_dtoa_r+0xad0>
 800802e:	d103      	bne.n	8008038 <_dtoa_r+0x9c0>
 8008030:	f019 0f01 	tst.w	r9, #1
 8008034:	f040 8088 	bne.w	8008148 <_dtoa_r+0xad0>
 8008038:	4645      	mov	r5, r8
 800803a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800803e:	2b30      	cmp	r3, #48	; 0x30
 8008040:	f105 32ff 	add.w	r2, r5, #4294967295
 8008044:	d1af      	bne.n	8007fa6 <_dtoa_r+0x92e>
 8008046:	4615      	mov	r5, r2
 8008048:	e7f7      	b.n	800803a <_dtoa_r+0x9c2>
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	9304      	str	r3, [sp, #16]
 800804e:	2d00      	cmp	r5, #0
 8008050:	dd05      	ble.n	800805e <_dtoa_r+0x9e6>
 8008052:	4639      	mov	r1, r7
 8008054:	462a      	mov	r2, r5
 8008056:	4620      	mov	r0, r4
 8008058:	f000 fc8c 	bl	8008974 <__lshift>
 800805c:	4607      	mov	r7, r0
 800805e:	f1b8 0f00 	cmp.w	r8, #0
 8008062:	d04c      	beq.n	80080fe <_dtoa_r+0xa86>
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	4620      	mov	r0, r4
 8008068:	f000 facc 	bl	8008604 <_Balloc>
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	3202      	adds	r2, #2
 8008070:	4605      	mov	r5, r0
 8008072:	0092      	lsls	r2, r2, #2
 8008074:	f107 010c 	add.w	r1, r7, #12
 8008078:	300c      	adds	r0, #12
 800807a:	f7fe fbf9 	bl	8006870 <memcpy>
 800807e:	2201      	movs	r2, #1
 8008080:	4629      	mov	r1, r5
 8008082:	4620      	mov	r0, r4
 8008084:	f000 fc76 	bl	8008974 <__lshift>
 8008088:	9b00      	ldr	r3, [sp, #0]
 800808a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800808e:	9703      	str	r7, [sp, #12]
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	4607      	mov	r7, r0
 8008096:	9305      	str	r3, [sp, #20]
 8008098:	4631      	mov	r1, r6
 800809a:	4650      	mov	r0, sl
 800809c:	f7ff fa5e 	bl	800755c <quorem>
 80080a0:	9903      	ldr	r1, [sp, #12]
 80080a2:	4605      	mov	r5, r0
 80080a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80080a8:	4650      	mov	r0, sl
 80080aa:	f000 fcb4 	bl	8008a16 <__mcmp>
 80080ae:	463a      	mov	r2, r7
 80080b0:	9000      	str	r0, [sp, #0]
 80080b2:	4631      	mov	r1, r6
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fcc8 	bl	8008a4a <__mdiff>
 80080ba:	68c3      	ldr	r3, [r0, #12]
 80080bc:	4602      	mov	r2, r0
 80080be:	bb03      	cbnz	r3, 8008102 <_dtoa_r+0xa8a>
 80080c0:	4601      	mov	r1, r0
 80080c2:	9006      	str	r0, [sp, #24]
 80080c4:	4650      	mov	r0, sl
 80080c6:	f000 fca6 	bl	8008a16 <__mcmp>
 80080ca:	9a06      	ldr	r2, [sp, #24]
 80080cc:	4603      	mov	r3, r0
 80080ce:	4611      	mov	r1, r2
 80080d0:	4620      	mov	r0, r4
 80080d2:	9306      	str	r3, [sp, #24]
 80080d4:	f000 faca 	bl	800866c <_Bfree>
 80080d8:	9b06      	ldr	r3, [sp, #24]
 80080da:	b9a3      	cbnz	r3, 8008106 <_dtoa_r+0xa8e>
 80080dc:	9a07      	ldr	r2, [sp, #28]
 80080de:	b992      	cbnz	r2, 8008106 <_dtoa_r+0xa8e>
 80080e0:	9a05      	ldr	r2, [sp, #20]
 80080e2:	b982      	cbnz	r2, 8008106 <_dtoa_r+0xa8e>
 80080e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080e8:	d029      	beq.n	800813e <_dtoa_r+0xac6>
 80080ea:	9b00      	ldr	r3, [sp, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dd01      	ble.n	80080f4 <_dtoa_r+0xa7c>
 80080f0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80080f4:	f108 0501 	add.w	r5, r8, #1
 80080f8:	f888 9000 	strb.w	r9, [r8]
 80080fc:	e753      	b.n	8007fa6 <_dtoa_r+0x92e>
 80080fe:	4638      	mov	r0, r7
 8008100:	e7c2      	b.n	8008088 <_dtoa_r+0xa10>
 8008102:	2301      	movs	r3, #1
 8008104:	e7e3      	b.n	80080ce <_dtoa_r+0xa56>
 8008106:	9a00      	ldr	r2, [sp, #0]
 8008108:	2a00      	cmp	r2, #0
 800810a:	db04      	blt.n	8008116 <_dtoa_r+0xa9e>
 800810c:	d125      	bne.n	800815a <_dtoa_r+0xae2>
 800810e:	9a07      	ldr	r2, [sp, #28]
 8008110:	bb1a      	cbnz	r2, 800815a <_dtoa_r+0xae2>
 8008112:	9a05      	ldr	r2, [sp, #20]
 8008114:	bb0a      	cbnz	r2, 800815a <_dtoa_r+0xae2>
 8008116:	2b00      	cmp	r3, #0
 8008118:	ddec      	ble.n	80080f4 <_dtoa_r+0xa7c>
 800811a:	4651      	mov	r1, sl
 800811c:	2201      	movs	r2, #1
 800811e:	4620      	mov	r0, r4
 8008120:	f000 fc28 	bl	8008974 <__lshift>
 8008124:	4631      	mov	r1, r6
 8008126:	4682      	mov	sl, r0
 8008128:	f000 fc75 	bl	8008a16 <__mcmp>
 800812c:	2800      	cmp	r0, #0
 800812e:	dc03      	bgt.n	8008138 <_dtoa_r+0xac0>
 8008130:	d1e0      	bne.n	80080f4 <_dtoa_r+0xa7c>
 8008132:	f019 0f01 	tst.w	r9, #1
 8008136:	d0dd      	beq.n	80080f4 <_dtoa_r+0xa7c>
 8008138:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800813c:	d1d8      	bne.n	80080f0 <_dtoa_r+0xa78>
 800813e:	2339      	movs	r3, #57	; 0x39
 8008140:	f888 3000 	strb.w	r3, [r8]
 8008144:	f108 0801 	add.w	r8, r8, #1
 8008148:	4645      	mov	r5, r8
 800814a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800814e:	2b39      	cmp	r3, #57	; 0x39
 8008150:	f105 32ff 	add.w	r2, r5, #4294967295
 8008154:	d03b      	beq.n	80081ce <_dtoa_r+0xb56>
 8008156:	3301      	adds	r3, #1
 8008158:	e040      	b.n	80081dc <_dtoa_r+0xb64>
 800815a:	2b00      	cmp	r3, #0
 800815c:	f108 0501 	add.w	r5, r8, #1
 8008160:	dd05      	ble.n	800816e <_dtoa_r+0xaf6>
 8008162:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008166:	d0ea      	beq.n	800813e <_dtoa_r+0xac6>
 8008168:	f109 0901 	add.w	r9, r9, #1
 800816c:	e7c4      	b.n	80080f8 <_dtoa_r+0xa80>
 800816e:	9b02      	ldr	r3, [sp, #8]
 8008170:	9a04      	ldr	r2, [sp, #16]
 8008172:	f805 9c01 	strb.w	r9, [r5, #-1]
 8008176:	1aeb      	subs	r3, r5, r3
 8008178:	4293      	cmp	r3, r2
 800817a:	46a8      	mov	r8, r5
 800817c:	f43f af4b 	beq.w	8008016 <_dtoa_r+0x99e>
 8008180:	4651      	mov	r1, sl
 8008182:	2300      	movs	r3, #0
 8008184:	220a      	movs	r2, #10
 8008186:	4620      	mov	r0, r4
 8008188:	f000 fa87 	bl	800869a <__multadd>
 800818c:	9b03      	ldr	r3, [sp, #12]
 800818e:	9903      	ldr	r1, [sp, #12]
 8008190:	42bb      	cmp	r3, r7
 8008192:	4682      	mov	sl, r0
 8008194:	f04f 0300 	mov.w	r3, #0
 8008198:	f04f 020a 	mov.w	r2, #10
 800819c:	4620      	mov	r0, r4
 800819e:	d104      	bne.n	80081aa <_dtoa_r+0xb32>
 80081a0:	f000 fa7b 	bl	800869a <__multadd>
 80081a4:	9003      	str	r0, [sp, #12]
 80081a6:	4607      	mov	r7, r0
 80081a8:	e776      	b.n	8008098 <_dtoa_r+0xa20>
 80081aa:	f000 fa76 	bl	800869a <__multadd>
 80081ae:	2300      	movs	r3, #0
 80081b0:	9003      	str	r0, [sp, #12]
 80081b2:	220a      	movs	r2, #10
 80081b4:	4639      	mov	r1, r7
 80081b6:	4620      	mov	r0, r4
 80081b8:	f000 fa6f 	bl	800869a <__multadd>
 80081bc:	e7f3      	b.n	80081a6 <_dtoa_r+0xb2e>
 80081be:	4651      	mov	r1, sl
 80081c0:	2300      	movs	r3, #0
 80081c2:	220a      	movs	r2, #10
 80081c4:	4620      	mov	r0, r4
 80081c6:	f000 fa68 	bl	800869a <__multadd>
 80081ca:	4682      	mov	sl, r0
 80081cc:	e70d      	b.n	8007fea <_dtoa_r+0x972>
 80081ce:	9b02      	ldr	r3, [sp, #8]
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d105      	bne.n	80081e0 <_dtoa_r+0xb68>
 80081d4:	9a02      	ldr	r2, [sp, #8]
 80081d6:	f10b 0b01 	add.w	fp, fp, #1
 80081da:	2331      	movs	r3, #49	; 0x31
 80081dc:	7013      	strb	r3, [r2, #0]
 80081de:	e6e2      	b.n	8007fa6 <_dtoa_r+0x92e>
 80081e0:	4615      	mov	r5, r2
 80081e2:	e7b2      	b.n	800814a <_dtoa_r+0xad2>
 80081e4:	4b09      	ldr	r3, [pc, #36]	; (800820c <_dtoa_r+0xb94>)
 80081e6:	f7ff baae 	b.w	8007746 <_dtoa_r+0xce>
 80081ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f47f aa88 	bne.w	8007702 <_dtoa_r+0x8a>
 80081f2:	4b07      	ldr	r3, [pc, #28]	; (8008210 <_dtoa_r+0xb98>)
 80081f4:	f7ff baa7 	b.w	8007746 <_dtoa_r+0xce>
 80081f8:	9b04      	ldr	r3, [sp, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f73f aef4 	bgt.w	8007fe8 <_dtoa_r+0x970>
 8008200:	9b07      	ldr	r3, [sp, #28]
 8008202:	2b02      	cmp	r3, #2
 8008204:	f77f aef0 	ble.w	8007fe8 <_dtoa_r+0x970>
 8008208:	e6b8      	b.n	8007f7c <_dtoa_r+0x904>
 800820a:	bf00      	nop
 800820c:	0801ea1c 	.word	0x0801ea1c
 8008210:	0801e78e 	.word	0x0801e78e

08008214 <__sflush_r>:
 8008214:	898a      	ldrh	r2, [r1, #12]
 8008216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800821a:	4605      	mov	r5, r0
 800821c:	0710      	lsls	r0, r2, #28
 800821e:	460c      	mov	r4, r1
 8008220:	d45a      	bmi.n	80082d8 <__sflush_r+0xc4>
 8008222:	684b      	ldr	r3, [r1, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	dc05      	bgt.n	8008234 <__sflush_r+0x20>
 8008228:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800822a:	2b00      	cmp	r3, #0
 800822c:	dc02      	bgt.n	8008234 <__sflush_r+0x20>
 800822e:	2000      	movs	r0, #0
 8008230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008236:	2e00      	cmp	r6, #0
 8008238:	d0f9      	beq.n	800822e <__sflush_r+0x1a>
 800823a:	2300      	movs	r3, #0
 800823c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008240:	682f      	ldr	r7, [r5, #0]
 8008242:	602b      	str	r3, [r5, #0]
 8008244:	d033      	beq.n	80082ae <__sflush_r+0x9a>
 8008246:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	075a      	lsls	r2, r3, #29
 800824c:	d505      	bpl.n	800825a <__sflush_r+0x46>
 800824e:	6863      	ldr	r3, [r4, #4]
 8008250:	1ac0      	subs	r0, r0, r3
 8008252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008254:	b10b      	cbz	r3, 800825a <__sflush_r+0x46>
 8008256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008258:	1ac0      	subs	r0, r0, r3
 800825a:	2300      	movs	r3, #0
 800825c:	4602      	mov	r2, r0
 800825e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008260:	6a21      	ldr	r1, [r4, #32]
 8008262:	4628      	mov	r0, r5
 8008264:	47b0      	blx	r6
 8008266:	1c43      	adds	r3, r0, #1
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	d106      	bne.n	800827a <__sflush_r+0x66>
 800826c:	6829      	ldr	r1, [r5, #0]
 800826e:	291d      	cmp	r1, #29
 8008270:	d84b      	bhi.n	800830a <__sflush_r+0xf6>
 8008272:	4a2b      	ldr	r2, [pc, #172]	; (8008320 <__sflush_r+0x10c>)
 8008274:	40ca      	lsrs	r2, r1
 8008276:	07d6      	lsls	r6, r2, #31
 8008278:	d547      	bpl.n	800830a <__sflush_r+0xf6>
 800827a:	2200      	movs	r2, #0
 800827c:	6062      	str	r2, [r4, #4]
 800827e:	04d9      	lsls	r1, r3, #19
 8008280:	6922      	ldr	r2, [r4, #16]
 8008282:	6022      	str	r2, [r4, #0]
 8008284:	d504      	bpl.n	8008290 <__sflush_r+0x7c>
 8008286:	1c42      	adds	r2, r0, #1
 8008288:	d101      	bne.n	800828e <__sflush_r+0x7a>
 800828a:	682b      	ldr	r3, [r5, #0]
 800828c:	b903      	cbnz	r3, 8008290 <__sflush_r+0x7c>
 800828e:	6560      	str	r0, [r4, #84]	; 0x54
 8008290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008292:	602f      	str	r7, [r5, #0]
 8008294:	2900      	cmp	r1, #0
 8008296:	d0ca      	beq.n	800822e <__sflush_r+0x1a>
 8008298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800829c:	4299      	cmp	r1, r3
 800829e:	d002      	beq.n	80082a6 <__sflush_r+0x92>
 80082a0:	4628      	mov	r0, r5
 80082a2:	f000 fc7f 	bl	8008ba4 <_free_r>
 80082a6:	2000      	movs	r0, #0
 80082a8:	6360      	str	r0, [r4, #52]	; 0x34
 80082aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ae:	6a21      	ldr	r1, [r4, #32]
 80082b0:	2301      	movs	r3, #1
 80082b2:	4628      	mov	r0, r5
 80082b4:	47b0      	blx	r6
 80082b6:	1c41      	adds	r1, r0, #1
 80082b8:	d1c6      	bne.n	8008248 <__sflush_r+0x34>
 80082ba:	682b      	ldr	r3, [r5, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0c3      	beq.n	8008248 <__sflush_r+0x34>
 80082c0:	2b1d      	cmp	r3, #29
 80082c2:	d001      	beq.n	80082c8 <__sflush_r+0xb4>
 80082c4:	2b16      	cmp	r3, #22
 80082c6:	d101      	bne.n	80082cc <__sflush_r+0xb8>
 80082c8:	602f      	str	r7, [r5, #0]
 80082ca:	e7b0      	b.n	800822e <__sflush_r+0x1a>
 80082cc:	89a3      	ldrh	r3, [r4, #12]
 80082ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082d2:	81a3      	strh	r3, [r4, #12]
 80082d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d8:	690f      	ldr	r7, [r1, #16]
 80082da:	2f00      	cmp	r7, #0
 80082dc:	d0a7      	beq.n	800822e <__sflush_r+0x1a>
 80082de:	0793      	lsls	r3, r2, #30
 80082e0:	680e      	ldr	r6, [r1, #0]
 80082e2:	bf08      	it	eq
 80082e4:	694b      	ldreq	r3, [r1, #20]
 80082e6:	600f      	str	r7, [r1, #0]
 80082e8:	bf18      	it	ne
 80082ea:	2300      	movne	r3, #0
 80082ec:	eba6 0807 	sub.w	r8, r6, r7
 80082f0:	608b      	str	r3, [r1, #8]
 80082f2:	f1b8 0f00 	cmp.w	r8, #0
 80082f6:	dd9a      	ble.n	800822e <__sflush_r+0x1a>
 80082f8:	4643      	mov	r3, r8
 80082fa:	463a      	mov	r2, r7
 80082fc:	6a21      	ldr	r1, [r4, #32]
 80082fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008300:	4628      	mov	r0, r5
 8008302:	47b0      	blx	r6
 8008304:	2800      	cmp	r0, #0
 8008306:	dc07      	bgt.n	8008318 <__sflush_r+0x104>
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800830e:	81a3      	strh	r3, [r4, #12]
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008318:	4407      	add	r7, r0
 800831a:	eba8 0800 	sub.w	r8, r8, r0
 800831e:	e7e8      	b.n	80082f2 <__sflush_r+0xde>
 8008320:	20400001 	.word	0x20400001

08008324 <_fflush_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	690b      	ldr	r3, [r1, #16]
 8008328:	4605      	mov	r5, r0
 800832a:	460c      	mov	r4, r1
 800832c:	b1db      	cbz	r3, 8008366 <_fflush_r+0x42>
 800832e:	b118      	cbz	r0, 8008338 <_fflush_r+0x14>
 8008330:	6983      	ldr	r3, [r0, #24]
 8008332:	b90b      	cbnz	r3, 8008338 <_fflush_r+0x14>
 8008334:	f000 f860 	bl	80083f8 <__sinit>
 8008338:	4b0c      	ldr	r3, [pc, #48]	; (800836c <_fflush_r+0x48>)
 800833a:	429c      	cmp	r4, r3
 800833c:	d109      	bne.n	8008352 <_fflush_r+0x2e>
 800833e:	686c      	ldr	r4, [r5, #4]
 8008340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008344:	b17b      	cbz	r3, 8008366 <_fflush_r+0x42>
 8008346:	4621      	mov	r1, r4
 8008348:	4628      	mov	r0, r5
 800834a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800834e:	f7ff bf61 	b.w	8008214 <__sflush_r>
 8008352:	4b07      	ldr	r3, [pc, #28]	; (8008370 <_fflush_r+0x4c>)
 8008354:	429c      	cmp	r4, r3
 8008356:	d101      	bne.n	800835c <_fflush_r+0x38>
 8008358:	68ac      	ldr	r4, [r5, #8]
 800835a:	e7f1      	b.n	8008340 <_fflush_r+0x1c>
 800835c:	4b05      	ldr	r3, [pc, #20]	; (8008374 <_fflush_r+0x50>)
 800835e:	429c      	cmp	r4, r3
 8008360:	bf08      	it	eq
 8008362:	68ec      	ldreq	r4, [r5, #12]
 8008364:	e7ec      	b.n	8008340 <_fflush_r+0x1c>
 8008366:	2000      	movs	r0, #0
 8008368:	bd38      	pop	{r3, r4, r5, pc}
 800836a:	bf00      	nop
 800836c:	0801e7bc 	.word	0x0801e7bc
 8008370:	0801e7dc 	.word	0x0801e7dc
 8008374:	0801e79c 	.word	0x0801e79c

08008378 <_cleanup_r>:
 8008378:	4901      	ldr	r1, [pc, #4]	; (8008380 <_cleanup_r+0x8>)
 800837a:	f000 b8a9 	b.w	80084d0 <_fwalk_reent>
 800837e:	bf00      	nop
 8008380:	08008325 	.word	0x08008325

08008384 <std.isra.0>:
 8008384:	2300      	movs	r3, #0
 8008386:	b510      	push	{r4, lr}
 8008388:	4604      	mov	r4, r0
 800838a:	6003      	str	r3, [r0, #0]
 800838c:	6043      	str	r3, [r0, #4]
 800838e:	6083      	str	r3, [r0, #8]
 8008390:	8181      	strh	r1, [r0, #12]
 8008392:	6643      	str	r3, [r0, #100]	; 0x64
 8008394:	81c2      	strh	r2, [r0, #14]
 8008396:	6103      	str	r3, [r0, #16]
 8008398:	6143      	str	r3, [r0, #20]
 800839a:	6183      	str	r3, [r0, #24]
 800839c:	4619      	mov	r1, r3
 800839e:	2208      	movs	r2, #8
 80083a0:	305c      	adds	r0, #92	; 0x5c
 80083a2:	f7fe fa70 	bl	8006886 <memset>
 80083a6:	4b05      	ldr	r3, [pc, #20]	; (80083bc <std.isra.0+0x38>)
 80083a8:	6263      	str	r3, [r4, #36]	; 0x24
 80083aa:	4b05      	ldr	r3, [pc, #20]	; (80083c0 <std.isra.0+0x3c>)
 80083ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80083ae:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <std.isra.0+0x40>)
 80083b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083b2:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <std.isra.0+0x44>)
 80083b4:	6224      	str	r4, [r4, #32]
 80083b6:	6323      	str	r3, [r4, #48]	; 0x30
 80083b8:	bd10      	pop	{r4, pc}
 80083ba:	bf00      	nop
 80083bc:	08008f2d 	.word	0x08008f2d
 80083c0:	08008f4f 	.word	0x08008f4f
 80083c4:	08008f87 	.word	0x08008f87
 80083c8:	08008fab 	.word	0x08008fab

080083cc <__sfmoreglue>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	1e4a      	subs	r2, r1, #1
 80083d0:	2568      	movs	r5, #104	; 0x68
 80083d2:	4355      	muls	r5, r2
 80083d4:	460e      	mov	r6, r1
 80083d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083da:	f7fe fa6b 	bl	80068b4 <_malloc_r>
 80083de:	4604      	mov	r4, r0
 80083e0:	b140      	cbz	r0, 80083f4 <__sfmoreglue+0x28>
 80083e2:	2100      	movs	r1, #0
 80083e4:	e880 0042 	stmia.w	r0, {r1, r6}
 80083e8:	300c      	adds	r0, #12
 80083ea:	60a0      	str	r0, [r4, #8]
 80083ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083f0:	f7fe fa49 	bl	8006886 <memset>
 80083f4:	4620      	mov	r0, r4
 80083f6:	bd70      	pop	{r4, r5, r6, pc}

080083f8 <__sinit>:
 80083f8:	6983      	ldr	r3, [r0, #24]
 80083fa:	b510      	push	{r4, lr}
 80083fc:	4604      	mov	r4, r0
 80083fe:	bb33      	cbnz	r3, 800844e <__sinit+0x56>
 8008400:	6483      	str	r3, [r0, #72]	; 0x48
 8008402:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008404:	6503      	str	r3, [r0, #80]	; 0x50
 8008406:	4b12      	ldr	r3, [pc, #72]	; (8008450 <__sinit+0x58>)
 8008408:	4a12      	ldr	r2, [pc, #72]	; (8008454 <__sinit+0x5c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6282      	str	r2, [r0, #40]	; 0x28
 800840e:	4298      	cmp	r0, r3
 8008410:	bf04      	itt	eq
 8008412:	2301      	moveq	r3, #1
 8008414:	6183      	streq	r3, [r0, #24]
 8008416:	f000 f81f 	bl	8008458 <__sfp>
 800841a:	6060      	str	r0, [r4, #4]
 800841c:	4620      	mov	r0, r4
 800841e:	f000 f81b 	bl	8008458 <__sfp>
 8008422:	60a0      	str	r0, [r4, #8]
 8008424:	4620      	mov	r0, r4
 8008426:	f000 f817 	bl	8008458 <__sfp>
 800842a:	2200      	movs	r2, #0
 800842c:	60e0      	str	r0, [r4, #12]
 800842e:	2104      	movs	r1, #4
 8008430:	6860      	ldr	r0, [r4, #4]
 8008432:	f7ff ffa7 	bl	8008384 <std.isra.0>
 8008436:	2201      	movs	r2, #1
 8008438:	2109      	movs	r1, #9
 800843a:	68a0      	ldr	r0, [r4, #8]
 800843c:	f7ff ffa2 	bl	8008384 <std.isra.0>
 8008440:	2202      	movs	r2, #2
 8008442:	2112      	movs	r1, #18
 8008444:	68e0      	ldr	r0, [r4, #12]
 8008446:	f7ff ff9d 	bl	8008384 <std.isra.0>
 800844a:	2301      	movs	r3, #1
 800844c:	61a3      	str	r3, [r4, #24]
 800844e:	bd10      	pop	{r4, pc}
 8008450:	0801e758 	.word	0x0801e758
 8008454:	08008379 	.word	0x08008379

08008458 <__sfp>:
 8008458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845a:	4b1c      	ldr	r3, [pc, #112]	; (80084cc <__sfp+0x74>)
 800845c:	681e      	ldr	r6, [r3, #0]
 800845e:	69b3      	ldr	r3, [r6, #24]
 8008460:	4607      	mov	r7, r0
 8008462:	b913      	cbnz	r3, 800846a <__sfp+0x12>
 8008464:	4630      	mov	r0, r6
 8008466:	f7ff ffc7 	bl	80083f8 <__sinit>
 800846a:	3648      	adds	r6, #72	; 0x48
 800846c:	68b4      	ldr	r4, [r6, #8]
 800846e:	6873      	ldr	r3, [r6, #4]
 8008470:	3b01      	subs	r3, #1
 8008472:	d503      	bpl.n	800847c <__sfp+0x24>
 8008474:	6833      	ldr	r3, [r6, #0]
 8008476:	b133      	cbz	r3, 8008486 <__sfp+0x2e>
 8008478:	6836      	ldr	r6, [r6, #0]
 800847a:	e7f7      	b.n	800846c <__sfp+0x14>
 800847c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008480:	b16d      	cbz	r5, 800849e <__sfp+0x46>
 8008482:	3468      	adds	r4, #104	; 0x68
 8008484:	e7f4      	b.n	8008470 <__sfp+0x18>
 8008486:	2104      	movs	r1, #4
 8008488:	4638      	mov	r0, r7
 800848a:	f7ff ff9f 	bl	80083cc <__sfmoreglue>
 800848e:	6030      	str	r0, [r6, #0]
 8008490:	2800      	cmp	r0, #0
 8008492:	d1f1      	bne.n	8008478 <__sfp+0x20>
 8008494:	230c      	movs	r3, #12
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	4604      	mov	r4, r0
 800849a:	4620      	mov	r0, r4
 800849c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800849e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80084a2:	81e3      	strh	r3, [r4, #14]
 80084a4:	2301      	movs	r3, #1
 80084a6:	81a3      	strh	r3, [r4, #12]
 80084a8:	6665      	str	r5, [r4, #100]	; 0x64
 80084aa:	6025      	str	r5, [r4, #0]
 80084ac:	60a5      	str	r5, [r4, #8]
 80084ae:	6065      	str	r5, [r4, #4]
 80084b0:	6125      	str	r5, [r4, #16]
 80084b2:	6165      	str	r5, [r4, #20]
 80084b4:	61a5      	str	r5, [r4, #24]
 80084b6:	2208      	movs	r2, #8
 80084b8:	4629      	mov	r1, r5
 80084ba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084be:	f7fe f9e2 	bl	8006886 <memset>
 80084c2:	6365      	str	r5, [r4, #52]	; 0x34
 80084c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80084c6:	64a5      	str	r5, [r4, #72]	; 0x48
 80084c8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80084ca:	e7e6      	b.n	800849a <__sfp+0x42>
 80084cc:	0801e758 	.word	0x0801e758

080084d0 <_fwalk_reent>:
 80084d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d4:	4680      	mov	r8, r0
 80084d6:	4689      	mov	r9, r1
 80084d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084dc:	2600      	movs	r6, #0
 80084de:	b914      	cbnz	r4, 80084e6 <_fwalk_reent+0x16>
 80084e0:	4630      	mov	r0, r6
 80084e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e6:	68a5      	ldr	r5, [r4, #8]
 80084e8:	6867      	ldr	r7, [r4, #4]
 80084ea:	3f01      	subs	r7, #1
 80084ec:	d501      	bpl.n	80084f2 <_fwalk_reent+0x22>
 80084ee:	6824      	ldr	r4, [r4, #0]
 80084f0:	e7f5      	b.n	80084de <_fwalk_reent+0xe>
 80084f2:	89ab      	ldrh	r3, [r5, #12]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d907      	bls.n	8008508 <_fwalk_reent+0x38>
 80084f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084fc:	3301      	adds	r3, #1
 80084fe:	d003      	beq.n	8008508 <_fwalk_reent+0x38>
 8008500:	4629      	mov	r1, r5
 8008502:	4640      	mov	r0, r8
 8008504:	47c8      	blx	r9
 8008506:	4306      	orrs	r6, r0
 8008508:	3568      	adds	r5, #104	; 0x68
 800850a:	e7ee      	b.n	80084ea <_fwalk_reent+0x1a>

0800850c <_localeconv_r>:
 800850c:	4b04      	ldr	r3, [pc, #16]	; (8008520 <_localeconv_r+0x14>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6a18      	ldr	r0, [r3, #32]
 8008512:	4b04      	ldr	r3, [pc, #16]	; (8008524 <_localeconv_r+0x18>)
 8008514:	2800      	cmp	r0, #0
 8008516:	bf08      	it	eq
 8008518:	4618      	moveq	r0, r3
 800851a:	30f0      	adds	r0, #240	; 0xf0
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	2000001c 	.word	0x2000001c
 8008524:	20000080 	.word	0x20000080

08008528 <__swhatbuf_r>:
 8008528:	b570      	push	{r4, r5, r6, lr}
 800852a:	460e      	mov	r6, r1
 800852c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008530:	2900      	cmp	r1, #0
 8008532:	b090      	sub	sp, #64	; 0x40
 8008534:	4614      	mov	r4, r2
 8008536:	461d      	mov	r5, r3
 8008538:	da07      	bge.n	800854a <__swhatbuf_r+0x22>
 800853a:	2300      	movs	r3, #0
 800853c:	602b      	str	r3, [r5, #0]
 800853e:	89b3      	ldrh	r3, [r6, #12]
 8008540:	061a      	lsls	r2, r3, #24
 8008542:	d410      	bmi.n	8008566 <__swhatbuf_r+0x3e>
 8008544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008548:	e00e      	b.n	8008568 <__swhatbuf_r+0x40>
 800854a:	aa01      	add	r2, sp, #4
 800854c:	f000 fd54 	bl	8008ff8 <_fstat_r>
 8008550:	2800      	cmp	r0, #0
 8008552:	dbf2      	blt.n	800853a <__swhatbuf_r+0x12>
 8008554:	9a02      	ldr	r2, [sp, #8]
 8008556:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800855a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800855e:	425a      	negs	r2, r3
 8008560:	415a      	adcs	r2, r3
 8008562:	602a      	str	r2, [r5, #0]
 8008564:	e7ee      	b.n	8008544 <__swhatbuf_r+0x1c>
 8008566:	2340      	movs	r3, #64	; 0x40
 8008568:	2000      	movs	r0, #0
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	b010      	add	sp, #64	; 0x40
 800856e:	bd70      	pop	{r4, r5, r6, pc}

08008570 <__smakebuf_r>:
 8008570:	898b      	ldrh	r3, [r1, #12]
 8008572:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008574:	079d      	lsls	r5, r3, #30
 8008576:	4606      	mov	r6, r0
 8008578:	460c      	mov	r4, r1
 800857a:	d507      	bpl.n	800858c <__smakebuf_r+0x1c>
 800857c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	6123      	str	r3, [r4, #16]
 8008584:	2301      	movs	r3, #1
 8008586:	6163      	str	r3, [r4, #20]
 8008588:	b002      	add	sp, #8
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	ab01      	add	r3, sp, #4
 800858e:	466a      	mov	r2, sp
 8008590:	f7ff ffca 	bl	8008528 <__swhatbuf_r>
 8008594:	9900      	ldr	r1, [sp, #0]
 8008596:	4605      	mov	r5, r0
 8008598:	4630      	mov	r0, r6
 800859a:	f7fe f98b 	bl	80068b4 <_malloc_r>
 800859e:	b948      	cbnz	r0, 80085b4 <__smakebuf_r+0x44>
 80085a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085a4:	059a      	lsls	r2, r3, #22
 80085a6:	d4ef      	bmi.n	8008588 <__smakebuf_r+0x18>
 80085a8:	f023 0303 	bic.w	r3, r3, #3
 80085ac:	f043 0302 	orr.w	r3, r3, #2
 80085b0:	81a3      	strh	r3, [r4, #12]
 80085b2:	e7e3      	b.n	800857c <__smakebuf_r+0xc>
 80085b4:	4b0d      	ldr	r3, [pc, #52]	; (80085ec <__smakebuf_r+0x7c>)
 80085b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	6020      	str	r0, [r4, #0]
 80085bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c0:	81a3      	strh	r3, [r4, #12]
 80085c2:	9b00      	ldr	r3, [sp, #0]
 80085c4:	6163      	str	r3, [r4, #20]
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	6120      	str	r0, [r4, #16]
 80085ca:	b15b      	cbz	r3, 80085e4 <__smakebuf_r+0x74>
 80085cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085d0:	4630      	mov	r0, r6
 80085d2:	f000 fd23 	bl	800901c <_isatty_r>
 80085d6:	b128      	cbz	r0, 80085e4 <__smakebuf_r+0x74>
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	f023 0303 	bic.w	r3, r3, #3
 80085de:	f043 0301 	orr.w	r3, r3, #1
 80085e2:	81a3      	strh	r3, [r4, #12]
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	431d      	orrs	r5, r3
 80085e8:	81a5      	strh	r5, [r4, #12]
 80085ea:	e7cd      	b.n	8008588 <__smakebuf_r+0x18>
 80085ec:	08008379 	.word	0x08008379

080085f0 <malloc>:
 80085f0:	4b02      	ldr	r3, [pc, #8]	; (80085fc <malloc+0xc>)
 80085f2:	4601      	mov	r1, r0
 80085f4:	6818      	ldr	r0, [r3, #0]
 80085f6:	f7fe b95d 	b.w	80068b4 <_malloc_r>
 80085fa:	bf00      	nop
 80085fc:	2000001c 	.word	0x2000001c

08008600 <__malloc_lock>:
 8008600:	4770      	bx	lr

08008602 <__malloc_unlock>:
 8008602:	4770      	bx	lr

08008604 <_Balloc>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008608:	4604      	mov	r4, r0
 800860a:	460e      	mov	r6, r1
 800860c:	b93d      	cbnz	r5, 800861e <_Balloc+0x1a>
 800860e:	2010      	movs	r0, #16
 8008610:	f7ff ffee 	bl	80085f0 <malloc>
 8008614:	6260      	str	r0, [r4, #36]	; 0x24
 8008616:	6045      	str	r5, [r0, #4]
 8008618:	6085      	str	r5, [r0, #8]
 800861a:	6005      	str	r5, [r0, #0]
 800861c:	60c5      	str	r5, [r0, #12]
 800861e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008620:	68eb      	ldr	r3, [r5, #12]
 8008622:	b183      	cbz	r3, 8008646 <_Balloc+0x42>
 8008624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800862c:	b9b8      	cbnz	r0, 800865e <_Balloc+0x5a>
 800862e:	2101      	movs	r1, #1
 8008630:	fa01 f506 	lsl.w	r5, r1, r6
 8008634:	1d6a      	adds	r2, r5, #5
 8008636:	0092      	lsls	r2, r2, #2
 8008638:	4620      	mov	r0, r4
 800863a:	f7fe f92c 	bl	8006896 <_calloc_r>
 800863e:	b160      	cbz	r0, 800865a <_Balloc+0x56>
 8008640:	6046      	str	r6, [r0, #4]
 8008642:	6085      	str	r5, [r0, #8]
 8008644:	e00e      	b.n	8008664 <_Balloc+0x60>
 8008646:	2221      	movs	r2, #33	; 0x21
 8008648:	2104      	movs	r1, #4
 800864a:	4620      	mov	r0, r4
 800864c:	f7fe f923 	bl	8006896 <_calloc_r>
 8008650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008652:	60e8      	str	r0, [r5, #12]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1e4      	bne.n	8008624 <_Balloc+0x20>
 800865a:	2000      	movs	r0, #0
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	6802      	ldr	r2, [r0, #0]
 8008660:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008664:	2300      	movs	r3, #0
 8008666:	6103      	str	r3, [r0, #16]
 8008668:	60c3      	str	r3, [r0, #12]
 800866a:	bd70      	pop	{r4, r5, r6, pc}

0800866c <_Bfree>:
 800866c:	b570      	push	{r4, r5, r6, lr}
 800866e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008670:	4606      	mov	r6, r0
 8008672:	460d      	mov	r5, r1
 8008674:	b93c      	cbnz	r4, 8008686 <_Bfree+0x1a>
 8008676:	2010      	movs	r0, #16
 8008678:	f7ff ffba 	bl	80085f0 <malloc>
 800867c:	6270      	str	r0, [r6, #36]	; 0x24
 800867e:	6044      	str	r4, [r0, #4]
 8008680:	6084      	str	r4, [r0, #8]
 8008682:	6004      	str	r4, [r0, #0]
 8008684:	60c4      	str	r4, [r0, #12]
 8008686:	b13d      	cbz	r5, 8008698 <_Bfree+0x2c>
 8008688:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800868a:	686a      	ldr	r2, [r5, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008692:	6029      	str	r1, [r5, #0]
 8008694:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008698:	bd70      	pop	{r4, r5, r6, pc}

0800869a <__multadd>:
 800869a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800869e:	690d      	ldr	r5, [r1, #16]
 80086a0:	461f      	mov	r7, r3
 80086a2:	4606      	mov	r6, r0
 80086a4:	460c      	mov	r4, r1
 80086a6:	f101 0e14 	add.w	lr, r1, #20
 80086aa:	2300      	movs	r3, #0
 80086ac:	f8de 0000 	ldr.w	r0, [lr]
 80086b0:	b281      	uxth	r1, r0
 80086b2:	fb02 7101 	mla	r1, r2, r1, r7
 80086b6:	0c0f      	lsrs	r7, r1, #16
 80086b8:	0c00      	lsrs	r0, r0, #16
 80086ba:	fb02 7000 	mla	r0, r2, r0, r7
 80086be:	b289      	uxth	r1, r1
 80086c0:	3301      	adds	r3, #1
 80086c2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80086c6:	429d      	cmp	r5, r3
 80086c8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80086cc:	f84e 1b04 	str.w	r1, [lr], #4
 80086d0:	dcec      	bgt.n	80086ac <__multadd+0x12>
 80086d2:	b1d7      	cbz	r7, 800870a <__multadd+0x70>
 80086d4:	68a3      	ldr	r3, [r4, #8]
 80086d6:	429d      	cmp	r5, r3
 80086d8:	db12      	blt.n	8008700 <__multadd+0x66>
 80086da:	6861      	ldr	r1, [r4, #4]
 80086dc:	4630      	mov	r0, r6
 80086de:	3101      	adds	r1, #1
 80086e0:	f7ff ff90 	bl	8008604 <_Balloc>
 80086e4:	6922      	ldr	r2, [r4, #16]
 80086e6:	3202      	adds	r2, #2
 80086e8:	f104 010c 	add.w	r1, r4, #12
 80086ec:	4680      	mov	r8, r0
 80086ee:	0092      	lsls	r2, r2, #2
 80086f0:	300c      	adds	r0, #12
 80086f2:	f7fe f8bd 	bl	8006870 <memcpy>
 80086f6:	4621      	mov	r1, r4
 80086f8:	4630      	mov	r0, r6
 80086fa:	f7ff ffb7 	bl	800866c <_Bfree>
 80086fe:	4644      	mov	r4, r8
 8008700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008704:	3501      	adds	r5, #1
 8008706:	615f      	str	r7, [r3, #20]
 8008708:	6125      	str	r5, [r4, #16]
 800870a:	4620      	mov	r0, r4
 800870c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008710 <__hi0bits>:
 8008710:	0c02      	lsrs	r2, r0, #16
 8008712:	0412      	lsls	r2, r2, #16
 8008714:	4603      	mov	r3, r0
 8008716:	b9b2      	cbnz	r2, 8008746 <__hi0bits+0x36>
 8008718:	0403      	lsls	r3, r0, #16
 800871a:	2010      	movs	r0, #16
 800871c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008720:	bf04      	itt	eq
 8008722:	021b      	lsleq	r3, r3, #8
 8008724:	3008      	addeq	r0, #8
 8008726:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800872a:	bf04      	itt	eq
 800872c:	011b      	lsleq	r3, r3, #4
 800872e:	3004      	addeq	r0, #4
 8008730:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008734:	bf04      	itt	eq
 8008736:	009b      	lsleq	r3, r3, #2
 8008738:	3002      	addeq	r0, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	db06      	blt.n	800874c <__hi0bits+0x3c>
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	d503      	bpl.n	800874a <__hi0bits+0x3a>
 8008742:	3001      	adds	r0, #1
 8008744:	4770      	bx	lr
 8008746:	2000      	movs	r0, #0
 8008748:	e7e8      	b.n	800871c <__hi0bits+0xc>
 800874a:	2020      	movs	r0, #32
 800874c:	4770      	bx	lr

0800874e <__lo0bits>:
 800874e:	6803      	ldr	r3, [r0, #0]
 8008750:	f013 0207 	ands.w	r2, r3, #7
 8008754:	4601      	mov	r1, r0
 8008756:	d00b      	beq.n	8008770 <__lo0bits+0x22>
 8008758:	07da      	lsls	r2, r3, #31
 800875a:	d423      	bmi.n	80087a4 <__lo0bits+0x56>
 800875c:	0798      	lsls	r0, r3, #30
 800875e:	bf49      	itett	mi
 8008760:	085b      	lsrmi	r3, r3, #1
 8008762:	089b      	lsrpl	r3, r3, #2
 8008764:	2001      	movmi	r0, #1
 8008766:	600b      	strmi	r3, [r1, #0]
 8008768:	bf5c      	itt	pl
 800876a:	600b      	strpl	r3, [r1, #0]
 800876c:	2002      	movpl	r0, #2
 800876e:	4770      	bx	lr
 8008770:	b298      	uxth	r0, r3
 8008772:	b9a8      	cbnz	r0, 80087a0 <__lo0bits+0x52>
 8008774:	0c1b      	lsrs	r3, r3, #16
 8008776:	2010      	movs	r0, #16
 8008778:	f013 0fff 	tst.w	r3, #255	; 0xff
 800877c:	bf04      	itt	eq
 800877e:	0a1b      	lsreq	r3, r3, #8
 8008780:	3008      	addeq	r0, #8
 8008782:	071a      	lsls	r2, r3, #28
 8008784:	bf04      	itt	eq
 8008786:	091b      	lsreq	r3, r3, #4
 8008788:	3004      	addeq	r0, #4
 800878a:	079a      	lsls	r2, r3, #30
 800878c:	bf04      	itt	eq
 800878e:	089b      	lsreq	r3, r3, #2
 8008790:	3002      	addeq	r0, #2
 8008792:	07da      	lsls	r2, r3, #31
 8008794:	d402      	bmi.n	800879c <__lo0bits+0x4e>
 8008796:	085b      	lsrs	r3, r3, #1
 8008798:	d006      	beq.n	80087a8 <__lo0bits+0x5a>
 800879a:	3001      	adds	r0, #1
 800879c:	600b      	str	r3, [r1, #0]
 800879e:	4770      	bx	lr
 80087a0:	4610      	mov	r0, r2
 80087a2:	e7e9      	b.n	8008778 <__lo0bits+0x2a>
 80087a4:	2000      	movs	r0, #0
 80087a6:	4770      	bx	lr
 80087a8:	2020      	movs	r0, #32
 80087aa:	4770      	bx	lr

080087ac <__i2b>:
 80087ac:	b510      	push	{r4, lr}
 80087ae:	460c      	mov	r4, r1
 80087b0:	2101      	movs	r1, #1
 80087b2:	f7ff ff27 	bl	8008604 <_Balloc>
 80087b6:	2201      	movs	r2, #1
 80087b8:	6144      	str	r4, [r0, #20]
 80087ba:	6102      	str	r2, [r0, #16]
 80087bc:	bd10      	pop	{r4, pc}

080087be <__multiply>:
 80087be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c2:	4614      	mov	r4, r2
 80087c4:	690a      	ldr	r2, [r1, #16]
 80087c6:	6923      	ldr	r3, [r4, #16]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	bfb8      	it	lt
 80087cc:	460b      	movlt	r3, r1
 80087ce:	4689      	mov	r9, r1
 80087d0:	bfbc      	itt	lt
 80087d2:	46a1      	movlt	r9, r4
 80087d4:	461c      	movlt	r4, r3
 80087d6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80087da:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80087de:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80087e2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80087e6:	eb07 060a 	add.w	r6, r7, sl
 80087ea:	429e      	cmp	r6, r3
 80087ec:	bfc8      	it	gt
 80087ee:	3101      	addgt	r1, #1
 80087f0:	f7ff ff08 	bl	8008604 <_Balloc>
 80087f4:	f100 0514 	add.w	r5, r0, #20
 80087f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087fc:	462b      	mov	r3, r5
 80087fe:	2200      	movs	r2, #0
 8008800:	4543      	cmp	r3, r8
 8008802:	d316      	bcc.n	8008832 <__multiply+0x74>
 8008804:	f104 0214 	add.w	r2, r4, #20
 8008808:	f109 0114 	add.w	r1, r9, #20
 800880c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8008810:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	9c01      	ldr	r4, [sp, #4]
 8008818:	4294      	cmp	r4, r2
 800881a:	4613      	mov	r3, r2
 800881c:	d80c      	bhi.n	8008838 <__multiply+0x7a>
 800881e:	2e00      	cmp	r6, #0
 8008820:	dd03      	ble.n	800882a <__multiply+0x6c>
 8008822:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008826:	2b00      	cmp	r3, #0
 8008828:	d054      	beq.n	80088d4 <__multiply+0x116>
 800882a:	6106      	str	r6, [r0, #16]
 800882c:	b003      	add	sp, #12
 800882e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008832:	f843 2b04 	str.w	r2, [r3], #4
 8008836:	e7e3      	b.n	8008800 <__multiply+0x42>
 8008838:	f8b3 a000 	ldrh.w	sl, [r3]
 800883c:	3204      	adds	r2, #4
 800883e:	f1ba 0f00 	cmp.w	sl, #0
 8008842:	d020      	beq.n	8008886 <__multiply+0xc8>
 8008844:	46ae      	mov	lr, r5
 8008846:	4689      	mov	r9, r1
 8008848:	f04f 0c00 	mov.w	ip, #0
 800884c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008850:	f8be b000 	ldrh.w	fp, [lr]
 8008854:	b2a3      	uxth	r3, r4
 8008856:	fb0a b303 	mla	r3, sl, r3, fp
 800885a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800885e:	f8de 4000 	ldr.w	r4, [lr]
 8008862:	4463      	add	r3, ip
 8008864:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008868:	fb0a c40b 	mla	r4, sl, fp, ip
 800886c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008870:	b29b      	uxth	r3, r3
 8008872:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008876:	454f      	cmp	r7, r9
 8008878:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800887c:	f84e 3b04 	str.w	r3, [lr], #4
 8008880:	d8e4      	bhi.n	800884c <__multiply+0x8e>
 8008882:	f8ce c000 	str.w	ip, [lr]
 8008886:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800888a:	f1b9 0f00 	cmp.w	r9, #0
 800888e:	d01f      	beq.n	80088d0 <__multiply+0x112>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	46ae      	mov	lr, r5
 8008894:	468c      	mov	ip, r1
 8008896:	f04f 0a00 	mov.w	sl, #0
 800889a:	f8bc 4000 	ldrh.w	r4, [ip]
 800889e:	f8be b002 	ldrh.w	fp, [lr, #2]
 80088a2:	fb09 b404 	mla	r4, r9, r4, fp
 80088a6:	44a2      	add	sl, r4
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80088ae:	f84e 3b04 	str.w	r3, [lr], #4
 80088b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088b6:	f8be 4000 	ldrh.w	r4, [lr]
 80088ba:	0c1b      	lsrs	r3, r3, #16
 80088bc:	fb09 4303 	mla	r3, r9, r3, r4
 80088c0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80088c4:	4567      	cmp	r7, ip
 80088c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088ca:	d8e6      	bhi.n	800889a <__multiply+0xdc>
 80088cc:	f8ce 3000 	str.w	r3, [lr]
 80088d0:	3504      	adds	r5, #4
 80088d2:	e7a0      	b.n	8008816 <__multiply+0x58>
 80088d4:	3e01      	subs	r6, #1
 80088d6:	e7a2      	b.n	800881e <__multiply+0x60>

080088d8 <__pow5mult>:
 80088d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088dc:	4615      	mov	r5, r2
 80088de:	f012 0203 	ands.w	r2, r2, #3
 80088e2:	4606      	mov	r6, r0
 80088e4:	460f      	mov	r7, r1
 80088e6:	d007      	beq.n	80088f8 <__pow5mult+0x20>
 80088e8:	3a01      	subs	r2, #1
 80088ea:	4c21      	ldr	r4, [pc, #132]	; (8008970 <__pow5mult+0x98>)
 80088ec:	2300      	movs	r3, #0
 80088ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088f2:	f7ff fed2 	bl	800869a <__multadd>
 80088f6:	4607      	mov	r7, r0
 80088f8:	10ad      	asrs	r5, r5, #2
 80088fa:	d035      	beq.n	8008968 <__pow5mult+0x90>
 80088fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088fe:	b93c      	cbnz	r4, 8008910 <__pow5mult+0x38>
 8008900:	2010      	movs	r0, #16
 8008902:	f7ff fe75 	bl	80085f0 <malloc>
 8008906:	6270      	str	r0, [r6, #36]	; 0x24
 8008908:	6044      	str	r4, [r0, #4]
 800890a:	6084      	str	r4, [r0, #8]
 800890c:	6004      	str	r4, [r0, #0]
 800890e:	60c4      	str	r4, [r0, #12]
 8008910:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008914:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008918:	b94c      	cbnz	r4, 800892e <__pow5mult+0x56>
 800891a:	f240 2171 	movw	r1, #625	; 0x271
 800891e:	4630      	mov	r0, r6
 8008920:	f7ff ff44 	bl	80087ac <__i2b>
 8008924:	2300      	movs	r3, #0
 8008926:	f8c8 0008 	str.w	r0, [r8, #8]
 800892a:	4604      	mov	r4, r0
 800892c:	6003      	str	r3, [r0, #0]
 800892e:	f04f 0800 	mov.w	r8, #0
 8008932:	07eb      	lsls	r3, r5, #31
 8008934:	d50a      	bpl.n	800894c <__pow5mult+0x74>
 8008936:	4639      	mov	r1, r7
 8008938:	4622      	mov	r2, r4
 800893a:	4630      	mov	r0, r6
 800893c:	f7ff ff3f 	bl	80087be <__multiply>
 8008940:	4639      	mov	r1, r7
 8008942:	4681      	mov	r9, r0
 8008944:	4630      	mov	r0, r6
 8008946:	f7ff fe91 	bl	800866c <_Bfree>
 800894a:	464f      	mov	r7, r9
 800894c:	106d      	asrs	r5, r5, #1
 800894e:	d00b      	beq.n	8008968 <__pow5mult+0x90>
 8008950:	6820      	ldr	r0, [r4, #0]
 8008952:	b938      	cbnz	r0, 8008964 <__pow5mult+0x8c>
 8008954:	4622      	mov	r2, r4
 8008956:	4621      	mov	r1, r4
 8008958:	4630      	mov	r0, r6
 800895a:	f7ff ff30 	bl	80087be <__multiply>
 800895e:	6020      	str	r0, [r4, #0]
 8008960:	f8c0 8000 	str.w	r8, [r0]
 8008964:	4604      	mov	r4, r0
 8008966:	e7e4      	b.n	8008932 <__pow5mult+0x5a>
 8008968:	4638      	mov	r0, r7
 800896a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800896e:	bf00      	nop
 8008970:	0801e8f0 	.word	0x0801e8f0

08008974 <__lshift>:
 8008974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008978:	460c      	mov	r4, r1
 800897a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800897e:	6923      	ldr	r3, [r4, #16]
 8008980:	6849      	ldr	r1, [r1, #4]
 8008982:	eb0a 0903 	add.w	r9, sl, r3
 8008986:	68a3      	ldr	r3, [r4, #8]
 8008988:	4607      	mov	r7, r0
 800898a:	4616      	mov	r6, r2
 800898c:	f109 0501 	add.w	r5, r9, #1
 8008990:	42ab      	cmp	r3, r5
 8008992:	db31      	blt.n	80089f8 <__lshift+0x84>
 8008994:	4638      	mov	r0, r7
 8008996:	f7ff fe35 	bl	8008604 <_Balloc>
 800899a:	2200      	movs	r2, #0
 800899c:	4680      	mov	r8, r0
 800899e:	f100 0314 	add.w	r3, r0, #20
 80089a2:	4611      	mov	r1, r2
 80089a4:	4552      	cmp	r2, sl
 80089a6:	db2a      	blt.n	80089fe <__lshift+0x8a>
 80089a8:	6920      	ldr	r0, [r4, #16]
 80089aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089ae:	f104 0114 	add.w	r1, r4, #20
 80089b2:	f016 021f 	ands.w	r2, r6, #31
 80089b6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80089ba:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80089be:	d022      	beq.n	8008a06 <__lshift+0x92>
 80089c0:	f1c2 0c20 	rsb	ip, r2, #32
 80089c4:	2000      	movs	r0, #0
 80089c6:	680e      	ldr	r6, [r1, #0]
 80089c8:	4096      	lsls	r6, r2
 80089ca:	4330      	orrs	r0, r6
 80089cc:	f843 0b04 	str.w	r0, [r3], #4
 80089d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80089d4:	458e      	cmp	lr, r1
 80089d6:	fa20 f00c 	lsr.w	r0, r0, ip
 80089da:	d8f4      	bhi.n	80089c6 <__lshift+0x52>
 80089dc:	6018      	str	r0, [r3, #0]
 80089de:	b108      	cbz	r0, 80089e4 <__lshift+0x70>
 80089e0:	f109 0502 	add.w	r5, r9, #2
 80089e4:	3d01      	subs	r5, #1
 80089e6:	4638      	mov	r0, r7
 80089e8:	f8c8 5010 	str.w	r5, [r8, #16]
 80089ec:	4621      	mov	r1, r4
 80089ee:	f7ff fe3d 	bl	800866c <_Bfree>
 80089f2:	4640      	mov	r0, r8
 80089f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f8:	3101      	adds	r1, #1
 80089fa:	005b      	lsls	r3, r3, #1
 80089fc:	e7c8      	b.n	8008990 <__lshift+0x1c>
 80089fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008a02:	3201      	adds	r2, #1
 8008a04:	e7ce      	b.n	80089a4 <__lshift+0x30>
 8008a06:	3b04      	subs	r3, #4
 8008a08:	f851 2b04 	ldr.w	r2, [r1], #4
 8008a0c:	f843 2f04 	str.w	r2, [r3, #4]!
 8008a10:	458e      	cmp	lr, r1
 8008a12:	d8f9      	bhi.n	8008a08 <__lshift+0x94>
 8008a14:	e7e6      	b.n	80089e4 <__lshift+0x70>

08008a16 <__mcmp>:
 8008a16:	6903      	ldr	r3, [r0, #16]
 8008a18:	690a      	ldr	r2, [r1, #16]
 8008a1a:	1a9b      	subs	r3, r3, r2
 8008a1c:	b530      	push	{r4, r5, lr}
 8008a1e:	d10c      	bne.n	8008a3a <__mcmp+0x24>
 8008a20:	0092      	lsls	r2, r2, #2
 8008a22:	3014      	adds	r0, #20
 8008a24:	3114      	adds	r1, #20
 8008a26:	1884      	adds	r4, r0, r2
 8008a28:	4411      	add	r1, r2
 8008a2a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a2e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a32:	4295      	cmp	r5, r2
 8008a34:	d003      	beq.n	8008a3e <__mcmp+0x28>
 8008a36:	d305      	bcc.n	8008a44 <__mcmp+0x2e>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	bd30      	pop	{r4, r5, pc}
 8008a3e:	42a0      	cmp	r0, r4
 8008a40:	d3f3      	bcc.n	8008a2a <__mcmp+0x14>
 8008a42:	e7fa      	b.n	8008a3a <__mcmp+0x24>
 8008a44:	f04f 33ff 	mov.w	r3, #4294967295
 8008a48:	e7f7      	b.n	8008a3a <__mcmp+0x24>

08008a4a <__mdiff>:
 8008a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a4e:	460d      	mov	r5, r1
 8008a50:	4607      	mov	r7, r0
 8008a52:	4611      	mov	r1, r2
 8008a54:	4628      	mov	r0, r5
 8008a56:	4614      	mov	r4, r2
 8008a58:	f7ff ffdd 	bl	8008a16 <__mcmp>
 8008a5c:	1e06      	subs	r6, r0, #0
 8008a5e:	d108      	bne.n	8008a72 <__mdiff+0x28>
 8008a60:	4631      	mov	r1, r6
 8008a62:	4638      	mov	r0, r7
 8008a64:	f7ff fdce 	bl	8008604 <_Balloc>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	6103      	str	r3, [r0, #16]
 8008a6c:	6146      	str	r6, [r0, #20]
 8008a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a72:	bfa4      	itt	ge
 8008a74:	4623      	movge	r3, r4
 8008a76:	462c      	movge	r4, r5
 8008a78:	4638      	mov	r0, r7
 8008a7a:	6861      	ldr	r1, [r4, #4]
 8008a7c:	bfa6      	itte	ge
 8008a7e:	461d      	movge	r5, r3
 8008a80:	2600      	movge	r6, #0
 8008a82:	2601      	movlt	r6, #1
 8008a84:	f7ff fdbe 	bl	8008604 <_Balloc>
 8008a88:	692b      	ldr	r3, [r5, #16]
 8008a8a:	60c6      	str	r6, [r0, #12]
 8008a8c:	6926      	ldr	r6, [r4, #16]
 8008a8e:	f105 0914 	add.w	r9, r5, #20
 8008a92:	f104 0214 	add.w	r2, r4, #20
 8008a96:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008a9a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008a9e:	f100 0514 	add.w	r5, r0, #20
 8008aa2:	f04f 0c00 	mov.w	ip, #0
 8008aa6:	f852 ab04 	ldr.w	sl, [r2], #4
 8008aaa:	f859 4b04 	ldr.w	r4, [r9], #4
 8008aae:	fa1c f18a 	uxtah	r1, ip, sl
 8008ab2:	b2a3      	uxth	r3, r4
 8008ab4:	1ac9      	subs	r1, r1, r3
 8008ab6:	0c23      	lsrs	r3, r4, #16
 8008ab8:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008abc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008ac0:	b289      	uxth	r1, r1
 8008ac2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008ac6:	45c8      	cmp	r8, r9
 8008ac8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008acc:	4696      	mov	lr, r2
 8008ace:	f845 3b04 	str.w	r3, [r5], #4
 8008ad2:	d8e8      	bhi.n	8008aa6 <__mdiff+0x5c>
 8008ad4:	45be      	cmp	lr, r7
 8008ad6:	d305      	bcc.n	8008ae4 <__mdiff+0x9a>
 8008ad8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008adc:	b18b      	cbz	r3, 8008b02 <__mdiff+0xb8>
 8008ade:	6106      	str	r6, [r0, #16]
 8008ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae4:	f85e 1b04 	ldr.w	r1, [lr], #4
 8008ae8:	fa1c f381 	uxtah	r3, ip, r1
 8008aec:	141a      	asrs	r2, r3, #16
 8008aee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008af8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008afc:	f845 3b04 	str.w	r3, [r5], #4
 8008b00:	e7e8      	b.n	8008ad4 <__mdiff+0x8a>
 8008b02:	3e01      	subs	r6, #1
 8008b04:	e7e8      	b.n	8008ad8 <__mdiff+0x8e>

08008b06 <__d2b>:
 8008b06:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b0a:	460e      	mov	r6, r1
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	ec59 8b10 	vmov	r8, r9, d0
 8008b12:	4615      	mov	r5, r2
 8008b14:	f7ff fd76 	bl	8008604 <_Balloc>
 8008b18:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b22:	bb34      	cbnz	r4, 8008b72 <__d2b+0x6c>
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	f1b8 0f00 	cmp.w	r8, #0
 8008b2a:	d027      	beq.n	8008b7c <__d2b+0x76>
 8008b2c:	a802      	add	r0, sp, #8
 8008b2e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8008b32:	f7ff fe0c 	bl	800874e <__lo0bits>
 8008b36:	9900      	ldr	r1, [sp, #0]
 8008b38:	b1f0      	cbz	r0, 8008b78 <__d2b+0x72>
 8008b3a:	9a01      	ldr	r2, [sp, #4]
 8008b3c:	f1c0 0320 	rsb	r3, r0, #32
 8008b40:	fa02 f303 	lsl.w	r3, r2, r3
 8008b44:	430b      	orrs	r3, r1
 8008b46:	40c2      	lsrs	r2, r0
 8008b48:	617b      	str	r3, [r7, #20]
 8008b4a:	9201      	str	r2, [sp, #4]
 8008b4c:	9b01      	ldr	r3, [sp, #4]
 8008b4e:	61bb      	str	r3, [r7, #24]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	bf14      	ite	ne
 8008b54:	2102      	movne	r1, #2
 8008b56:	2101      	moveq	r1, #1
 8008b58:	6139      	str	r1, [r7, #16]
 8008b5a:	b1c4      	cbz	r4, 8008b8e <__d2b+0x88>
 8008b5c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008b60:	4404      	add	r4, r0
 8008b62:	6034      	str	r4, [r6, #0]
 8008b64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b68:	6028      	str	r0, [r5, #0]
 8008b6a:	4638      	mov	r0, r7
 8008b6c:	b003      	add	sp, #12
 8008b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b76:	e7d5      	b.n	8008b24 <__d2b+0x1e>
 8008b78:	6179      	str	r1, [r7, #20]
 8008b7a:	e7e7      	b.n	8008b4c <__d2b+0x46>
 8008b7c:	a801      	add	r0, sp, #4
 8008b7e:	f7ff fde6 	bl	800874e <__lo0bits>
 8008b82:	9b01      	ldr	r3, [sp, #4]
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	2101      	movs	r1, #1
 8008b88:	6139      	str	r1, [r7, #16]
 8008b8a:	3020      	adds	r0, #32
 8008b8c:	e7e5      	b.n	8008b5a <__d2b+0x54>
 8008b8e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008b92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b96:	6030      	str	r0, [r6, #0]
 8008b98:	6918      	ldr	r0, [r3, #16]
 8008b9a:	f7ff fdb9 	bl	8008710 <__hi0bits>
 8008b9e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008ba2:	e7e1      	b.n	8008b68 <__d2b+0x62>

08008ba4 <_free_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	2900      	cmp	r1, #0
 8008baa:	d045      	beq.n	8008c38 <_free_r+0x94>
 8008bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bb0:	1f0c      	subs	r4, r1, #4
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	bfb8      	it	lt
 8008bb6:	18e4      	addlt	r4, r4, r3
 8008bb8:	f7ff fd22 	bl	8008600 <__malloc_lock>
 8008bbc:	4a1f      	ldr	r2, [pc, #124]	; (8008c3c <_free_r+0x98>)
 8008bbe:	6813      	ldr	r3, [r2, #0]
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	b933      	cbnz	r3, 8008bd2 <_free_r+0x2e>
 8008bc4:	6063      	str	r3, [r4, #4]
 8008bc6:	6014      	str	r4, [r2, #0]
 8008bc8:	4628      	mov	r0, r5
 8008bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bce:	f7ff bd18 	b.w	8008602 <__malloc_unlock>
 8008bd2:	42a3      	cmp	r3, r4
 8008bd4:	d90c      	bls.n	8008bf0 <_free_r+0x4c>
 8008bd6:	6821      	ldr	r1, [r4, #0]
 8008bd8:	1862      	adds	r2, r4, r1
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	bf04      	itt	eq
 8008bde:	681a      	ldreq	r2, [r3, #0]
 8008be0:	685b      	ldreq	r3, [r3, #4]
 8008be2:	6063      	str	r3, [r4, #4]
 8008be4:	bf04      	itt	eq
 8008be6:	1852      	addeq	r2, r2, r1
 8008be8:	6022      	streq	r2, [r4, #0]
 8008bea:	6004      	str	r4, [r0, #0]
 8008bec:	e7ec      	b.n	8008bc8 <_free_r+0x24>
 8008bee:	4613      	mov	r3, r2
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	b10a      	cbz	r2, 8008bf8 <_free_r+0x54>
 8008bf4:	42a2      	cmp	r2, r4
 8008bf6:	d9fa      	bls.n	8008bee <_free_r+0x4a>
 8008bf8:	6819      	ldr	r1, [r3, #0]
 8008bfa:	1858      	adds	r0, r3, r1
 8008bfc:	42a0      	cmp	r0, r4
 8008bfe:	d10b      	bne.n	8008c18 <_free_r+0x74>
 8008c00:	6820      	ldr	r0, [r4, #0]
 8008c02:	4401      	add	r1, r0
 8008c04:	1858      	adds	r0, r3, r1
 8008c06:	4282      	cmp	r2, r0
 8008c08:	6019      	str	r1, [r3, #0]
 8008c0a:	d1dd      	bne.n	8008bc8 <_free_r+0x24>
 8008c0c:	6810      	ldr	r0, [r2, #0]
 8008c0e:	6852      	ldr	r2, [r2, #4]
 8008c10:	605a      	str	r2, [r3, #4]
 8008c12:	4401      	add	r1, r0
 8008c14:	6019      	str	r1, [r3, #0]
 8008c16:	e7d7      	b.n	8008bc8 <_free_r+0x24>
 8008c18:	d902      	bls.n	8008c20 <_free_r+0x7c>
 8008c1a:	230c      	movs	r3, #12
 8008c1c:	602b      	str	r3, [r5, #0]
 8008c1e:	e7d3      	b.n	8008bc8 <_free_r+0x24>
 8008c20:	6820      	ldr	r0, [r4, #0]
 8008c22:	1821      	adds	r1, r4, r0
 8008c24:	428a      	cmp	r2, r1
 8008c26:	bf04      	itt	eq
 8008c28:	6811      	ldreq	r1, [r2, #0]
 8008c2a:	6852      	ldreq	r2, [r2, #4]
 8008c2c:	6062      	str	r2, [r4, #4]
 8008c2e:	bf04      	itt	eq
 8008c30:	1809      	addeq	r1, r1, r0
 8008c32:	6021      	streq	r1, [r4, #0]
 8008c34:	605c      	str	r4, [r3, #4]
 8008c36:	e7c7      	b.n	8008bc8 <_free_r+0x24>
 8008c38:	bd38      	pop	{r3, r4, r5, pc}
 8008c3a:	bf00      	nop
 8008c3c:	2000b5f8 	.word	0x2000b5f8

08008c40 <__sfputc_r>:
 8008c40:	6893      	ldr	r3, [r2, #8]
 8008c42:	3b01      	subs	r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	b410      	push	{r4}
 8008c48:	6093      	str	r3, [r2, #8]
 8008c4a:	da09      	bge.n	8008c60 <__sfputc_r+0x20>
 8008c4c:	6994      	ldr	r4, [r2, #24]
 8008c4e:	42a3      	cmp	r3, r4
 8008c50:	db02      	blt.n	8008c58 <__sfputc_r+0x18>
 8008c52:	b2cb      	uxtb	r3, r1
 8008c54:	2b0a      	cmp	r3, #10
 8008c56:	d103      	bne.n	8008c60 <__sfputc_r+0x20>
 8008c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c5c:	f7fe bbbe 	b.w	80073dc <__swbuf_r>
 8008c60:	6813      	ldr	r3, [r2, #0]
 8008c62:	1c58      	adds	r0, r3, #1
 8008c64:	6010      	str	r0, [r2, #0]
 8008c66:	7019      	strb	r1, [r3, #0]
 8008c68:	b2c8      	uxtb	r0, r1
 8008c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <__sfputs_r>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	4606      	mov	r6, r0
 8008c74:	460f      	mov	r7, r1
 8008c76:	4614      	mov	r4, r2
 8008c78:	18d5      	adds	r5, r2, r3
 8008c7a:	42ac      	cmp	r4, r5
 8008c7c:	d101      	bne.n	8008c82 <__sfputs_r+0x12>
 8008c7e:	2000      	movs	r0, #0
 8008c80:	e007      	b.n	8008c92 <__sfputs_r+0x22>
 8008c82:	463a      	mov	r2, r7
 8008c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c88:	4630      	mov	r0, r6
 8008c8a:	f7ff ffd9 	bl	8008c40 <__sfputc_r>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	d1f3      	bne.n	8008c7a <__sfputs_r+0xa>
 8008c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c94 <_vfiprintf_r>:
 8008c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c98:	b09d      	sub	sp, #116	; 0x74
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	4617      	mov	r7, r2
 8008c9e:	9303      	str	r3, [sp, #12]
 8008ca0:	4606      	mov	r6, r0
 8008ca2:	b118      	cbz	r0, 8008cac <_vfiprintf_r+0x18>
 8008ca4:	6983      	ldr	r3, [r0, #24]
 8008ca6:	b90b      	cbnz	r3, 8008cac <_vfiprintf_r+0x18>
 8008ca8:	f7ff fba6 	bl	80083f8 <__sinit>
 8008cac:	4b7c      	ldr	r3, [pc, #496]	; (8008ea0 <_vfiprintf_r+0x20c>)
 8008cae:	429c      	cmp	r4, r3
 8008cb0:	d157      	bne.n	8008d62 <_vfiprintf_r+0xce>
 8008cb2:	6874      	ldr	r4, [r6, #4]
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	0718      	lsls	r0, r3, #28
 8008cb8:	d55d      	bpl.n	8008d76 <_vfiprintf_r+0xe2>
 8008cba:	6923      	ldr	r3, [r4, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d05a      	beq.n	8008d76 <_vfiprintf_r+0xe2>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc4:	2320      	movs	r3, #32
 8008cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cca:	2330      	movs	r3, #48	; 0x30
 8008ccc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cd0:	f04f 0b01 	mov.w	fp, #1
 8008cd4:	46b8      	mov	r8, r7
 8008cd6:	4645      	mov	r5, r8
 8008cd8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d155      	bne.n	8008d8c <_vfiprintf_r+0xf8>
 8008ce0:	ebb8 0a07 	subs.w	sl, r8, r7
 8008ce4:	d00b      	beq.n	8008cfe <_vfiprintf_r+0x6a>
 8008ce6:	4653      	mov	r3, sl
 8008ce8:	463a      	mov	r2, r7
 8008cea:	4621      	mov	r1, r4
 8008cec:	4630      	mov	r0, r6
 8008cee:	f7ff ffbf 	bl	8008c70 <__sfputs_r>
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	f000 80c4 	beq.w	8008e80 <_vfiprintf_r+0x1ec>
 8008cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cfa:	4453      	add	r3, sl
 8008cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cfe:	f898 3000 	ldrb.w	r3, [r8]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 80bc 	beq.w	8008e80 <_vfiprintf_r+0x1ec>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d0e:	9304      	str	r3, [sp, #16]
 8008d10:	9307      	str	r3, [sp, #28]
 8008d12:	9205      	str	r2, [sp, #20]
 8008d14:	9306      	str	r3, [sp, #24]
 8008d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d1c:	2205      	movs	r2, #5
 8008d1e:	7829      	ldrb	r1, [r5, #0]
 8008d20:	4860      	ldr	r0, [pc, #384]	; (8008ea4 <_vfiprintf_r+0x210>)
 8008d22:	f7f7 fabd 	bl	80002a0 <memchr>
 8008d26:	f105 0801 	add.w	r8, r5, #1
 8008d2a:	9b04      	ldr	r3, [sp, #16]
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d131      	bne.n	8008d94 <_vfiprintf_r+0x100>
 8008d30:	06d9      	lsls	r1, r3, #27
 8008d32:	bf44      	itt	mi
 8008d34:	2220      	movmi	r2, #32
 8008d36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d3a:	071a      	lsls	r2, r3, #28
 8008d3c:	bf44      	itt	mi
 8008d3e:	222b      	movmi	r2, #43	; 0x2b
 8008d40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d44:	782a      	ldrb	r2, [r5, #0]
 8008d46:	2a2a      	cmp	r2, #42	; 0x2a
 8008d48:	d02c      	beq.n	8008da4 <_vfiprintf_r+0x110>
 8008d4a:	9a07      	ldr	r2, [sp, #28]
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	200a      	movs	r0, #10
 8008d50:	46a8      	mov	r8, r5
 8008d52:	3501      	adds	r5, #1
 8008d54:	f898 3000 	ldrb.w	r3, [r8]
 8008d58:	3b30      	subs	r3, #48	; 0x30
 8008d5a:	2b09      	cmp	r3, #9
 8008d5c:	d96d      	bls.n	8008e3a <_vfiprintf_r+0x1a6>
 8008d5e:	b371      	cbz	r1, 8008dbe <_vfiprintf_r+0x12a>
 8008d60:	e026      	b.n	8008db0 <_vfiprintf_r+0x11c>
 8008d62:	4b51      	ldr	r3, [pc, #324]	; (8008ea8 <_vfiprintf_r+0x214>)
 8008d64:	429c      	cmp	r4, r3
 8008d66:	d101      	bne.n	8008d6c <_vfiprintf_r+0xd8>
 8008d68:	68b4      	ldr	r4, [r6, #8]
 8008d6a:	e7a3      	b.n	8008cb4 <_vfiprintf_r+0x20>
 8008d6c:	4b4f      	ldr	r3, [pc, #316]	; (8008eac <_vfiprintf_r+0x218>)
 8008d6e:	429c      	cmp	r4, r3
 8008d70:	bf08      	it	eq
 8008d72:	68f4      	ldreq	r4, [r6, #12]
 8008d74:	e79e      	b.n	8008cb4 <_vfiprintf_r+0x20>
 8008d76:	4621      	mov	r1, r4
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f7fe fb81 	bl	8007480 <__swsetup_r>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d09e      	beq.n	8008cc0 <_vfiprintf_r+0x2c>
 8008d82:	f04f 30ff 	mov.w	r0, #4294967295
 8008d86:	b01d      	add	sp, #116	; 0x74
 8008d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8c:	2b25      	cmp	r3, #37	; 0x25
 8008d8e:	d0a7      	beq.n	8008ce0 <_vfiprintf_r+0x4c>
 8008d90:	46a8      	mov	r8, r5
 8008d92:	e7a0      	b.n	8008cd6 <_vfiprintf_r+0x42>
 8008d94:	4a43      	ldr	r2, [pc, #268]	; (8008ea4 <_vfiprintf_r+0x210>)
 8008d96:	1a80      	subs	r0, r0, r2
 8008d98:	fa0b f000 	lsl.w	r0, fp, r0
 8008d9c:	4318      	orrs	r0, r3
 8008d9e:	9004      	str	r0, [sp, #16]
 8008da0:	4645      	mov	r5, r8
 8008da2:	e7bb      	b.n	8008d1c <_vfiprintf_r+0x88>
 8008da4:	9a03      	ldr	r2, [sp, #12]
 8008da6:	1d11      	adds	r1, r2, #4
 8008da8:	6812      	ldr	r2, [r2, #0]
 8008daa:	9103      	str	r1, [sp, #12]
 8008dac:	2a00      	cmp	r2, #0
 8008dae:	db01      	blt.n	8008db4 <_vfiprintf_r+0x120>
 8008db0:	9207      	str	r2, [sp, #28]
 8008db2:	e004      	b.n	8008dbe <_vfiprintf_r+0x12a>
 8008db4:	4252      	negs	r2, r2
 8008db6:	f043 0302 	orr.w	r3, r3, #2
 8008dba:	9207      	str	r2, [sp, #28]
 8008dbc:	9304      	str	r3, [sp, #16]
 8008dbe:	f898 3000 	ldrb.w	r3, [r8]
 8008dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8008dc4:	d110      	bne.n	8008de8 <_vfiprintf_r+0x154>
 8008dc6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008dca:	2b2a      	cmp	r3, #42	; 0x2a
 8008dcc:	f108 0101 	add.w	r1, r8, #1
 8008dd0:	d137      	bne.n	8008e42 <_vfiprintf_r+0x1ae>
 8008dd2:	9b03      	ldr	r3, [sp, #12]
 8008dd4:	1d1a      	adds	r2, r3, #4
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	9203      	str	r2, [sp, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bfb8      	it	lt
 8008dde:	f04f 33ff 	movlt.w	r3, #4294967295
 8008de2:	f108 0802 	add.w	r8, r8, #2
 8008de6:	9305      	str	r3, [sp, #20]
 8008de8:	4d31      	ldr	r5, [pc, #196]	; (8008eb0 <_vfiprintf_r+0x21c>)
 8008dea:	f898 1000 	ldrb.w	r1, [r8]
 8008dee:	2203      	movs	r2, #3
 8008df0:	4628      	mov	r0, r5
 8008df2:	f7f7 fa55 	bl	80002a0 <memchr>
 8008df6:	b140      	cbz	r0, 8008e0a <_vfiprintf_r+0x176>
 8008df8:	2340      	movs	r3, #64	; 0x40
 8008dfa:	1b40      	subs	r0, r0, r5
 8008dfc:	fa03 f000 	lsl.w	r0, r3, r0
 8008e00:	9b04      	ldr	r3, [sp, #16]
 8008e02:	4303      	orrs	r3, r0
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	f108 0801 	add.w	r8, r8, #1
 8008e0a:	f898 1000 	ldrb.w	r1, [r8]
 8008e0e:	4829      	ldr	r0, [pc, #164]	; (8008eb4 <_vfiprintf_r+0x220>)
 8008e10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e14:	2206      	movs	r2, #6
 8008e16:	f108 0701 	add.w	r7, r8, #1
 8008e1a:	f7f7 fa41 	bl	80002a0 <memchr>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d034      	beq.n	8008e8c <_vfiprintf_r+0x1f8>
 8008e22:	4b25      	ldr	r3, [pc, #148]	; (8008eb8 <_vfiprintf_r+0x224>)
 8008e24:	bb03      	cbnz	r3, 8008e68 <_vfiprintf_r+0x1d4>
 8008e26:	9b03      	ldr	r3, [sp, #12]
 8008e28:	3307      	adds	r3, #7
 8008e2a:	f023 0307 	bic.w	r3, r3, #7
 8008e2e:	3308      	adds	r3, #8
 8008e30:	9303      	str	r3, [sp, #12]
 8008e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e34:	444b      	add	r3, r9
 8008e36:	9309      	str	r3, [sp, #36]	; 0x24
 8008e38:	e74c      	b.n	8008cd4 <_vfiprintf_r+0x40>
 8008e3a:	fb00 3202 	mla	r2, r0, r2, r3
 8008e3e:	2101      	movs	r1, #1
 8008e40:	e786      	b.n	8008d50 <_vfiprintf_r+0xbc>
 8008e42:	2300      	movs	r3, #0
 8008e44:	9305      	str	r3, [sp, #20]
 8008e46:	4618      	mov	r0, r3
 8008e48:	250a      	movs	r5, #10
 8008e4a:	4688      	mov	r8, r1
 8008e4c:	3101      	adds	r1, #1
 8008e4e:	f898 2000 	ldrb.w	r2, [r8]
 8008e52:	3a30      	subs	r2, #48	; 0x30
 8008e54:	2a09      	cmp	r2, #9
 8008e56:	d903      	bls.n	8008e60 <_vfiprintf_r+0x1cc>
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d0c5      	beq.n	8008de8 <_vfiprintf_r+0x154>
 8008e5c:	9005      	str	r0, [sp, #20]
 8008e5e:	e7c3      	b.n	8008de8 <_vfiprintf_r+0x154>
 8008e60:	fb05 2000 	mla	r0, r5, r0, r2
 8008e64:	2301      	movs	r3, #1
 8008e66:	e7f0      	b.n	8008e4a <_vfiprintf_r+0x1b6>
 8008e68:	ab03      	add	r3, sp, #12
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	4622      	mov	r2, r4
 8008e6e:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <_vfiprintf_r+0x228>)
 8008e70:	a904      	add	r1, sp, #16
 8008e72:	4630      	mov	r0, r6
 8008e74:	f7fd fe12 	bl	8006a9c <_printf_float>
 8008e78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008e7c:	4681      	mov	r9, r0
 8008e7e:	d1d8      	bne.n	8008e32 <_vfiprintf_r+0x19e>
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	065b      	lsls	r3, r3, #25
 8008e84:	f53f af7d 	bmi.w	8008d82 <_vfiprintf_r+0xee>
 8008e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e8a:	e77c      	b.n	8008d86 <_vfiprintf_r+0xf2>
 8008e8c:	ab03      	add	r3, sp, #12
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	4622      	mov	r2, r4
 8008e92:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <_vfiprintf_r+0x228>)
 8008e94:	a904      	add	r1, sp, #16
 8008e96:	4630      	mov	r0, r6
 8008e98:	f7fe f8b6 	bl	8007008 <_printf_i>
 8008e9c:	e7ec      	b.n	8008e78 <_vfiprintf_r+0x1e4>
 8008e9e:	bf00      	nop
 8008ea0:	0801e7bc 	.word	0x0801e7bc
 8008ea4:	0801e8fc 	.word	0x0801e8fc
 8008ea8:	0801e7dc 	.word	0x0801e7dc
 8008eac:	0801e79c 	.word	0x0801e79c
 8008eb0:	0801e902 	.word	0x0801e902
 8008eb4:	0801e906 	.word	0x0801e906
 8008eb8:	08006a9d 	.word	0x08006a9d
 8008ebc:	08008c71 	.word	0x08008c71

08008ec0 <_putc_r>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	460d      	mov	r5, r1
 8008ec4:	4614      	mov	r4, r2
 8008ec6:	4606      	mov	r6, r0
 8008ec8:	b118      	cbz	r0, 8008ed2 <_putc_r+0x12>
 8008eca:	6983      	ldr	r3, [r0, #24]
 8008ecc:	b90b      	cbnz	r3, 8008ed2 <_putc_r+0x12>
 8008ece:	f7ff fa93 	bl	80083f8 <__sinit>
 8008ed2:	4b13      	ldr	r3, [pc, #76]	; (8008f20 <_putc_r+0x60>)
 8008ed4:	429c      	cmp	r4, r3
 8008ed6:	d112      	bne.n	8008efe <_putc_r+0x3e>
 8008ed8:	6874      	ldr	r4, [r6, #4]
 8008eda:	68a3      	ldr	r3, [r4, #8]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	60a3      	str	r3, [r4, #8]
 8008ee2:	da16      	bge.n	8008f12 <_putc_r+0x52>
 8008ee4:	69a2      	ldr	r2, [r4, #24]
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	db02      	blt.n	8008ef0 <_putc_r+0x30>
 8008eea:	b2eb      	uxtb	r3, r5
 8008eec:	2b0a      	cmp	r3, #10
 8008eee:	d110      	bne.n	8008f12 <_putc_r+0x52>
 8008ef0:	4622      	mov	r2, r4
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008efa:	f7fe ba6f 	b.w	80073dc <__swbuf_r>
 8008efe:	4b09      	ldr	r3, [pc, #36]	; (8008f24 <_putc_r+0x64>)
 8008f00:	429c      	cmp	r4, r3
 8008f02:	d101      	bne.n	8008f08 <_putc_r+0x48>
 8008f04:	68b4      	ldr	r4, [r6, #8]
 8008f06:	e7e8      	b.n	8008eda <_putc_r+0x1a>
 8008f08:	4b07      	ldr	r3, [pc, #28]	; (8008f28 <_putc_r+0x68>)
 8008f0a:	429c      	cmp	r4, r3
 8008f0c:	bf08      	it	eq
 8008f0e:	68f4      	ldreq	r4, [r6, #12]
 8008f10:	e7e3      	b.n	8008eda <_putc_r+0x1a>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	1c5a      	adds	r2, r3, #1
 8008f16:	6022      	str	r2, [r4, #0]
 8008f18:	701d      	strb	r5, [r3, #0]
 8008f1a:	b2e8      	uxtb	r0, r5
 8008f1c:	bd70      	pop	{r4, r5, r6, pc}
 8008f1e:	bf00      	nop
 8008f20:	0801e7bc 	.word	0x0801e7bc
 8008f24:	0801e7dc 	.word	0x0801e7dc
 8008f28:	0801e79c 	.word	0x0801e79c

08008f2c <__sread>:
 8008f2c:	b510      	push	{r4, lr}
 8008f2e:	460c      	mov	r4, r1
 8008f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f34:	f000 f8a6 	bl	8009084 <_read_r>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	bfab      	itete	ge
 8008f3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f40:	181b      	addge	r3, r3, r0
 8008f42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f46:	bfac      	ite	ge
 8008f48:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f4a:	81a3      	strhlt	r3, [r4, #12]
 8008f4c:	bd10      	pop	{r4, pc}

08008f4e <__swrite>:
 8008f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f52:	461f      	mov	r7, r3
 8008f54:	898b      	ldrh	r3, [r1, #12]
 8008f56:	05db      	lsls	r3, r3, #23
 8008f58:	4605      	mov	r5, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	4616      	mov	r6, r2
 8008f5e:	d505      	bpl.n	8008f6c <__swrite+0x1e>
 8008f60:	2302      	movs	r3, #2
 8008f62:	2200      	movs	r2, #0
 8008f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f68:	f000 f868 	bl	800903c <_lseek_r>
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f76:	81a3      	strh	r3, [r4, #12]
 8008f78:	4632      	mov	r2, r6
 8008f7a:	463b      	mov	r3, r7
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f82:	f000 b817 	b.w	8008fb4 <_write_r>

08008f86 <__sseek>:
 8008f86:	b510      	push	{r4, lr}
 8008f88:	460c      	mov	r4, r1
 8008f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8e:	f000 f855 	bl	800903c <_lseek_r>
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	bf15      	itete	ne
 8008f98:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fa2:	81a3      	strheq	r3, [r4, #12]
 8008fa4:	bf18      	it	ne
 8008fa6:	81a3      	strhne	r3, [r4, #12]
 8008fa8:	bd10      	pop	{r4, pc}

08008faa <__sclose>:
 8008faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fae:	f000 b813 	b.w	8008fd8 <_close_r>
	...

08008fb4 <_write_r>:
 8008fb4:	b538      	push	{r3, r4, r5, lr}
 8008fb6:	4c07      	ldr	r4, [pc, #28]	; (8008fd4 <_write_r+0x20>)
 8008fb8:	4605      	mov	r5, r0
 8008fba:	4608      	mov	r0, r1
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	6022      	str	r2, [r4, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	f7fb fcee 	bl	80049a4 <_write>
 8008fc8:	1c43      	adds	r3, r0, #1
 8008fca:	d102      	bne.n	8008fd2 <_write_r+0x1e>
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	b103      	cbz	r3, 8008fd2 <_write_r+0x1e>
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	bd38      	pop	{r3, r4, r5, pc}
 8008fd4:	2000ba18 	.word	0x2000ba18

08008fd8 <_close_r>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	4c06      	ldr	r4, [pc, #24]	; (8008ff4 <_close_r+0x1c>)
 8008fdc:	2300      	movs	r3, #0
 8008fde:	4605      	mov	r5, r0
 8008fe0:	4608      	mov	r0, r1
 8008fe2:	6023      	str	r3, [r4, #0]
 8008fe4:	f7fb fdb2 	bl	8004b4c <_close>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d102      	bne.n	8008ff2 <_close_r+0x1a>
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	b103      	cbz	r3, 8008ff2 <_close_r+0x1a>
 8008ff0:	602b      	str	r3, [r5, #0]
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	2000ba18 	.word	0x2000ba18

08008ff8 <_fstat_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4c07      	ldr	r4, [pc, #28]	; (8009018 <_fstat_r+0x20>)
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4605      	mov	r5, r0
 8009000:	4608      	mov	r0, r1
 8009002:	4611      	mov	r1, r2
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	f7fb fda4 	bl	8004b52 <_fstat>
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	d102      	bne.n	8009014 <_fstat_r+0x1c>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	b103      	cbz	r3, 8009014 <_fstat_r+0x1c>
 8009012:	602b      	str	r3, [r5, #0]
 8009014:	bd38      	pop	{r3, r4, r5, pc}
 8009016:	bf00      	nop
 8009018:	2000ba18 	.word	0x2000ba18

0800901c <_isatty_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4c06      	ldr	r4, [pc, #24]	; (8009038 <_isatty_r+0x1c>)
 8009020:	2300      	movs	r3, #0
 8009022:	4605      	mov	r5, r0
 8009024:	4608      	mov	r0, r1
 8009026:	6023      	str	r3, [r4, #0]
 8009028:	f7fb fd98 	bl	8004b5c <_isatty>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_isatty_r+0x1a>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	b103      	cbz	r3, 8009036 <_isatty_r+0x1a>
 8009034:	602b      	str	r3, [r5, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	2000ba18 	.word	0x2000ba18

0800903c <_lseek_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4c07      	ldr	r4, [pc, #28]	; (800905c <_lseek_r+0x20>)
 8009040:	4605      	mov	r5, r0
 8009042:	4608      	mov	r0, r1
 8009044:	4611      	mov	r1, r2
 8009046:	2200      	movs	r2, #0
 8009048:	6022      	str	r2, [r4, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	f7fb fd88 	bl	8004b60 <_lseek>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d102      	bne.n	800905a <_lseek_r+0x1e>
 8009054:	6823      	ldr	r3, [r4, #0]
 8009056:	b103      	cbz	r3, 800905a <_lseek_r+0x1e>
 8009058:	602b      	str	r3, [r5, #0]
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	2000ba18 	.word	0x2000ba18

08009060 <__ascii_mbtowc>:
 8009060:	b082      	sub	sp, #8
 8009062:	b901      	cbnz	r1, 8009066 <__ascii_mbtowc+0x6>
 8009064:	a901      	add	r1, sp, #4
 8009066:	b142      	cbz	r2, 800907a <__ascii_mbtowc+0x1a>
 8009068:	b14b      	cbz	r3, 800907e <__ascii_mbtowc+0x1e>
 800906a:	7813      	ldrb	r3, [r2, #0]
 800906c:	600b      	str	r3, [r1, #0]
 800906e:	7812      	ldrb	r2, [r2, #0]
 8009070:	1c10      	adds	r0, r2, #0
 8009072:	bf18      	it	ne
 8009074:	2001      	movne	r0, #1
 8009076:	b002      	add	sp, #8
 8009078:	4770      	bx	lr
 800907a:	4610      	mov	r0, r2
 800907c:	e7fb      	b.n	8009076 <__ascii_mbtowc+0x16>
 800907e:	f06f 0001 	mvn.w	r0, #1
 8009082:	e7f8      	b.n	8009076 <__ascii_mbtowc+0x16>

08009084 <_read_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4c07      	ldr	r4, [pc, #28]	; (80090a4 <_read_r+0x20>)
 8009088:	4605      	mov	r5, r0
 800908a:	4608      	mov	r0, r1
 800908c:	4611      	mov	r1, r2
 800908e:	2200      	movs	r2, #0
 8009090:	6022      	str	r2, [r4, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	f7fb fd32 	bl	8004afc <_read>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_read_r+0x1e>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_read_r+0x1e>
 80090a0:	602b      	str	r3, [r5, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	2000ba18 	.word	0x2000ba18

080090a8 <__ascii_wctomb>:
 80090a8:	b149      	cbz	r1, 80090be <__ascii_wctomb+0x16>
 80090aa:	2aff      	cmp	r2, #255	; 0xff
 80090ac:	bf85      	ittet	hi
 80090ae:	238a      	movhi	r3, #138	; 0x8a
 80090b0:	6003      	strhi	r3, [r0, #0]
 80090b2:	700a      	strbls	r2, [r1, #0]
 80090b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80090b8:	bf98      	it	ls
 80090ba:	2001      	movls	r0, #1
 80090bc:	4770      	bx	lr
 80090be:	4608      	mov	r0, r1
 80090c0:	4770      	bx	lr
 80090c2:	0000      	movs	r0, r0
 80090c4:	0000      	movs	r0, r0
	...

080090c8 <floor>:
 80090c8:	ec51 0b10 	vmov	r0, r1, d0
 80090cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80090d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80090d8:	2e13      	cmp	r6, #19
 80090da:	ee10 8a10 	vmov	r8, s0
 80090de:	460c      	mov	r4, r1
 80090e0:	ee10 5a10 	vmov	r5, s0
 80090e4:	dc35      	bgt.n	8009152 <floor+0x8a>
 80090e6:	2e00      	cmp	r6, #0
 80090e8:	da17      	bge.n	800911a <floor+0x52>
 80090ea:	a335      	add	r3, pc, #212	; (adr r3, 80091c0 <floor+0xf8>)
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	f7f7 f92c 	bl	800034c <__adddf3>
 80090f4:	2200      	movs	r2, #0
 80090f6:	2300      	movs	r3, #0
 80090f8:	f7f7 fd6a 	bl	8000bd0 <__aeabi_dcmpgt>
 80090fc:	b150      	cbz	r0, 8009114 <floor+0x4c>
 80090fe:	2c00      	cmp	r4, #0
 8009100:	da5a      	bge.n	80091b8 <floor+0xf0>
 8009102:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009106:	ea53 0308 	orrs.w	r3, r3, r8
 800910a:	4b2f      	ldr	r3, [pc, #188]	; (80091c8 <floor+0x100>)
 800910c:	f04f 0500 	mov.w	r5, #0
 8009110:	bf18      	it	ne
 8009112:	461c      	movne	r4, r3
 8009114:	4621      	mov	r1, r4
 8009116:	4628      	mov	r0, r5
 8009118:	e025      	b.n	8009166 <floor+0x9e>
 800911a:	4f2c      	ldr	r7, [pc, #176]	; (80091cc <floor+0x104>)
 800911c:	4137      	asrs	r7, r6
 800911e:	ea01 0307 	and.w	r3, r1, r7
 8009122:	4303      	orrs	r3, r0
 8009124:	d01f      	beq.n	8009166 <floor+0x9e>
 8009126:	a326      	add	r3, pc, #152	; (adr r3, 80091c0 <floor+0xf8>)
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	f7f7 f90e 	bl	800034c <__adddf3>
 8009130:	2200      	movs	r2, #0
 8009132:	2300      	movs	r3, #0
 8009134:	f7f7 fd4c 	bl	8000bd0 <__aeabi_dcmpgt>
 8009138:	2800      	cmp	r0, #0
 800913a:	d0eb      	beq.n	8009114 <floor+0x4c>
 800913c:	2c00      	cmp	r4, #0
 800913e:	bfbe      	ittt	lt
 8009140:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009144:	fa43 f606 	asrlt.w	r6, r3, r6
 8009148:	19a4      	addlt	r4, r4, r6
 800914a:	ea24 0407 	bic.w	r4, r4, r7
 800914e:	2500      	movs	r5, #0
 8009150:	e7e0      	b.n	8009114 <floor+0x4c>
 8009152:	2e33      	cmp	r6, #51	; 0x33
 8009154:	dd0b      	ble.n	800916e <floor+0xa6>
 8009156:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800915a:	d104      	bne.n	8009166 <floor+0x9e>
 800915c:	ee10 2a10 	vmov	r2, s0
 8009160:	460b      	mov	r3, r1
 8009162:	f7f7 f8f3 	bl	800034c <__adddf3>
 8009166:	ec41 0b10 	vmov	d0, r0, r1
 800916a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800916e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009172:	f04f 33ff 	mov.w	r3, #4294967295
 8009176:	fa23 f707 	lsr.w	r7, r3, r7
 800917a:	4238      	tst	r0, r7
 800917c:	d0f3      	beq.n	8009166 <floor+0x9e>
 800917e:	a310      	add	r3, pc, #64	; (adr r3, 80091c0 <floor+0xf8>)
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	f7f7 f8e2 	bl	800034c <__adddf3>
 8009188:	2200      	movs	r2, #0
 800918a:	2300      	movs	r3, #0
 800918c:	f7f7 fd20 	bl	8000bd0 <__aeabi_dcmpgt>
 8009190:	2800      	cmp	r0, #0
 8009192:	d0bf      	beq.n	8009114 <floor+0x4c>
 8009194:	2c00      	cmp	r4, #0
 8009196:	da02      	bge.n	800919e <floor+0xd6>
 8009198:	2e14      	cmp	r6, #20
 800919a:	d103      	bne.n	80091a4 <floor+0xdc>
 800919c:	3401      	adds	r4, #1
 800919e:	ea25 0507 	bic.w	r5, r5, r7
 80091a2:	e7b7      	b.n	8009114 <floor+0x4c>
 80091a4:	2301      	movs	r3, #1
 80091a6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80091aa:	fa03 f606 	lsl.w	r6, r3, r6
 80091ae:	4435      	add	r5, r6
 80091b0:	45a8      	cmp	r8, r5
 80091b2:	bf88      	it	hi
 80091b4:	18e4      	addhi	r4, r4, r3
 80091b6:	e7f2      	b.n	800919e <floor+0xd6>
 80091b8:	2500      	movs	r5, #0
 80091ba:	462c      	mov	r4, r5
 80091bc:	e7aa      	b.n	8009114 <floor+0x4c>
 80091be:	bf00      	nop
 80091c0:	8800759c 	.word	0x8800759c
 80091c4:	7e37e43c 	.word	0x7e37e43c
 80091c8:	bff00000 	.word	0xbff00000
 80091cc:	000fffff 	.word	0x000fffff

080091d0 <log10>:
 80091d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091d2:	ed2d 8b02 	vpush	{d8}
 80091d6:	b08b      	sub	sp, #44	; 0x2c
 80091d8:	ec55 4b10 	vmov	r4, r5, d0
 80091dc:	f000 fa9c 	bl	8009718 <__ieee754_log10>
 80091e0:	4b36      	ldr	r3, [pc, #216]	; (80092bc <log10+0xec>)
 80091e2:	eeb0 8a40 	vmov.f32	s16, s0
 80091e6:	eef0 8a60 	vmov.f32	s17, s1
 80091ea:	f993 6000 	ldrsb.w	r6, [r3]
 80091ee:	1c73      	adds	r3, r6, #1
 80091f0:	d05c      	beq.n	80092ac <log10+0xdc>
 80091f2:	4622      	mov	r2, r4
 80091f4:	462b      	mov	r3, r5
 80091f6:	4620      	mov	r0, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	f7f7 fcf3 	bl	8000be4 <__aeabi_dcmpun>
 80091fe:	4607      	mov	r7, r0
 8009200:	2800      	cmp	r0, #0
 8009202:	d153      	bne.n	80092ac <log10+0xdc>
 8009204:	2200      	movs	r2, #0
 8009206:	2300      	movs	r3, #0
 8009208:	4620      	mov	r0, r4
 800920a:	4629      	mov	r1, r5
 800920c:	f7f7 fccc 	bl	8000ba8 <__aeabi_dcmple>
 8009210:	2800      	cmp	r0, #0
 8009212:	d04b      	beq.n	80092ac <log10+0xdc>
 8009214:	4b2a      	ldr	r3, [pc, #168]	; (80092c0 <log10+0xf0>)
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	9708      	str	r7, [sp, #32]
 800921a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800921e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009222:	b9a6      	cbnz	r6, 800924e <log10+0x7e>
 8009224:	4b27      	ldr	r3, [pc, #156]	; (80092c4 <log10+0xf4>)
 8009226:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800922a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800922e:	4620      	mov	r0, r4
 8009230:	2200      	movs	r2, #0
 8009232:	2300      	movs	r3, #0
 8009234:	4629      	mov	r1, r5
 8009236:	f7f7 fca3 	bl	8000b80 <__aeabi_dcmpeq>
 800923a:	bb40      	cbnz	r0, 800928e <log10+0xbe>
 800923c:	2301      	movs	r3, #1
 800923e:	2e02      	cmp	r6, #2
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	d119      	bne.n	8009278 <log10+0xa8>
 8009244:	f7fd faea 	bl	800681c <__errno>
 8009248:	2321      	movs	r3, #33	; 0x21
 800924a:	6003      	str	r3, [r0, #0]
 800924c:	e019      	b.n	8009282 <log10+0xb2>
 800924e:	4b1e      	ldr	r3, [pc, #120]	; (80092c8 <log10+0xf8>)
 8009250:	2200      	movs	r2, #0
 8009252:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009256:	4620      	mov	r0, r4
 8009258:	2200      	movs	r2, #0
 800925a:	2300      	movs	r3, #0
 800925c:	4629      	mov	r1, r5
 800925e:	f7f7 fc8f 	bl	8000b80 <__aeabi_dcmpeq>
 8009262:	2800      	cmp	r0, #0
 8009264:	d0ea      	beq.n	800923c <log10+0x6c>
 8009266:	2302      	movs	r3, #2
 8009268:	429e      	cmp	r6, r3
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	d111      	bne.n	8009292 <log10+0xc2>
 800926e:	f7fd fad5 	bl	800681c <__errno>
 8009272:	2322      	movs	r3, #34	; 0x22
 8009274:	6003      	str	r3, [r0, #0]
 8009276:	e011      	b.n	800929c <log10+0xcc>
 8009278:	4668      	mov	r0, sp
 800927a:	f001 f8f5 	bl	800a468 <matherr>
 800927e:	2800      	cmp	r0, #0
 8009280:	d0e0      	beq.n	8009244 <log10+0x74>
 8009282:	4812      	ldr	r0, [pc, #72]	; (80092cc <log10+0xfc>)
 8009284:	f001 f8f4 	bl	800a470 <nan>
 8009288:	ed8d 0b06 	vstr	d0, [sp, #24]
 800928c:	e006      	b.n	800929c <log10+0xcc>
 800928e:	2302      	movs	r3, #2
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	4668      	mov	r0, sp
 8009294:	f001 f8e8 	bl	800a468 <matherr>
 8009298:	2800      	cmp	r0, #0
 800929a:	d0e8      	beq.n	800926e <log10+0x9e>
 800929c:	9b08      	ldr	r3, [sp, #32]
 800929e:	b11b      	cbz	r3, 80092a8 <log10+0xd8>
 80092a0:	f7fd fabc 	bl	800681c <__errno>
 80092a4:	9b08      	ldr	r3, [sp, #32]
 80092a6:	6003      	str	r3, [r0, #0]
 80092a8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80092ac:	eeb0 0a48 	vmov.f32	s0, s16
 80092b0:	eef0 0a68 	vmov.f32	s1, s17
 80092b4:	b00b      	add	sp, #44	; 0x2c
 80092b6:	ecbd 8b02 	vpop	{d8}
 80092ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092bc:	200001ec 	.word	0x200001ec
 80092c0:	0801ea18 	.word	0x0801ea18
 80092c4:	c7efffff 	.word	0xc7efffff
 80092c8:	fff00000 	.word	0xfff00000
 80092cc:	0800aab2 	.word	0x0800aab2

080092d0 <pow>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	ed2d 8b04 	vpush	{d8-d9}
 80092d8:	b08d      	sub	sp, #52	; 0x34
 80092da:	ec57 6b10 	vmov	r6, r7, d0
 80092de:	ec55 4b11 	vmov	r4, r5, d1
 80092e2:	f000 faa9 	bl	8009838 <__ieee754_pow>
 80092e6:	4bae      	ldr	r3, [pc, #696]	; (80095a0 <pow+0x2d0>)
 80092e8:	eeb0 8a40 	vmov.f32	s16, s0
 80092ec:	eef0 8a60 	vmov.f32	s17, s1
 80092f0:	f993 9000 	ldrsb.w	r9, [r3]
 80092f4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80092f8:	4698      	mov	r8, r3
 80092fa:	d05f      	beq.n	80093bc <pow+0xec>
 80092fc:	4622      	mov	r2, r4
 80092fe:	462b      	mov	r3, r5
 8009300:	4620      	mov	r0, r4
 8009302:	4629      	mov	r1, r5
 8009304:	f7f7 fc6e 	bl	8000be4 <__aeabi_dcmpun>
 8009308:	4683      	mov	fp, r0
 800930a:	2800      	cmp	r0, #0
 800930c:	d156      	bne.n	80093bc <pow+0xec>
 800930e:	4632      	mov	r2, r6
 8009310:	463b      	mov	r3, r7
 8009312:	4630      	mov	r0, r6
 8009314:	4639      	mov	r1, r7
 8009316:	f7f7 fc65 	bl	8000be4 <__aeabi_dcmpun>
 800931a:	9001      	str	r0, [sp, #4]
 800931c:	b1e8      	cbz	r0, 800935a <pow+0x8a>
 800931e:	2200      	movs	r2, #0
 8009320:	2300      	movs	r3, #0
 8009322:	4620      	mov	r0, r4
 8009324:	4629      	mov	r1, r5
 8009326:	f7f7 fc2b 	bl	8000b80 <__aeabi_dcmpeq>
 800932a:	2800      	cmp	r0, #0
 800932c:	d046      	beq.n	80093bc <pow+0xec>
 800932e:	2301      	movs	r3, #1
 8009330:	9302      	str	r3, [sp, #8]
 8009332:	4b9c      	ldr	r3, [pc, #624]	; (80095a4 <pow+0x2d4>)
 8009334:	9303      	str	r3, [sp, #12]
 8009336:	4b9c      	ldr	r3, [pc, #624]	; (80095a8 <pow+0x2d8>)
 8009338:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800933c:	2200      	movs	r2, #0
 800933e:	f1b9 0f02 	cmp.w	r9, #2
 8009342:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009346:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800934a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800934e:	d033      	beq.n	80093b8 <pow+0xe8>
 8009350:	a802      	add	r0, sp, #8
 8009352:	f001 f889 	bl	800a468 <matherr>
 8009356:	bb48      	cbnz	r0, 80093ac <pow+0xdc>
 8009358:	e05e      	b.n	8009418 <pow+0x148>
 800935a:	f04f 0a00 	mov.w	sl, #0
 800935e:	f04f 0b00 	mov.w	fp, #0
 8009362:	4652      	mov	r2, sl
 8009364:	465b      	mov	r3, fp
 8009366:	4630      	mov	r0, r6
 8009368:	4639      	mov	r1, r7
 800936a:	f7f7 fc09 	bl	8000b80 <__aeabi_dcmpeq>
 800936e:	ec4b ab19 	vmov	d9, sl, fp
 8009372:	2800      	cmp	r0, #0
 8009374:	d055      	beq.n	8009422 <pow+0x152>
 8009376:	4652      	mov	r2, sl
 8009378:	465b      	mov	r3, fp
 800937a:	4620      	mov	r0, r4
 800937c:	4629      	mov	r1, r5
 800937e:	f7f7 fbff 	bl	8000b80 <__aeabi_dcmpeq>
 8009382:	4680      	mov	r8, r0
 8009384:	b318      	cbz	r0, 80093ce <pow+0xfe>
 8009386:	2301      	movs	r3, #1
 8009388:	9302      	str	r3, [sp, #8]
 800938a:	4b86      	ldr	r3, [pc, #536]	; (80095a4 <pow+0x2d4>)
 800938c:	9303      	str	r3, [sp, #12]
 800938e:	9b01      	ldr	r3, [sp, #4]
 8009390:	930a      	str	r3, [sp, #40]	; 0x28
 8009392:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009396:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800939a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800939e:	f1b9 0f00 	cmp.w	r9, #0
 80093a2:	d0d5      	beq.n	8009350 <pow+0x80>
 80093a4:	4b80      	ldr	r3, [pc, #512]	; (80095a8 <pow+0x2d8>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ae:	b11b      	cbz	r3, 80093b8 <pow+0xe8>
 80093b0:	f7fd fa34 	bl	800681c <__errno>
 80093b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b6:	6003      	str	r3, [r0, #0]
 80093b8:	ed9d 8b08 	vldr	d8, [sp, #32]
 80093bc:	eeb0 0a48 	vmov.f32	s0, s16
 80093c0:	eef0 0a68 	vmov.f32	s1, s17
 80093c4:	b00d      	add	sp, #52	; 0x34
 80093c6:	ecbd 8b04 	vpop	{d8-d9}
 80093ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ce:	ec45 4b10 	vmov	d0, r4, r5
 80093d2:	f001 f841 	bl	800a458 <finite>
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d0f0      	beq.n	80093bc <pow+0xec>
 80093da:	4652      	mov	r2, sl
 80093dc:	465b      	mov	r3, fp
 80093de:	4620      	mov	r0, r4
 80093e0:	4629      	mov	r1, r5
 80093e2:	f7f7 fbd7 	bl	8000b94 <__aeabi_dcmplt>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d0e8      	beq.n	80093bc <pow+0xec>
 80093ea:	2301      	movs	r3, #1
 80093ec:	9302      	str	r3, [sp, #8]
 80093ee:	4b6d      	ldr	r3, [pc, #436]	; (80095a4 <pow+0x2d4>)
 80093f0:	9303      	str	r3, [sp, #12]
 80093f2:	4b6b      	ldr	r3, [pc, #428]	; (80095a0 <pow+0x2d0>)
 80093f4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80093f8:	f993 3000 	ldrsb.w	r3, [r3]
 80093fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009400:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009404:	b913      	cbnz	r3, 800940c <pow+0x13c>
 8009406:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800940a:	e7a1      	b.n	8009350 <pow+0x80>
 800940c:	4967      	ldr	r1, [pc, #412]	; (80095ac <pow+0x2dc>)
 800940e:	2000      	movs	r0, #0
 8009410:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009414:	2b02      	cmp	r3, #2
 8009416:	d19b      	bne.n	8009350 <pow+0x80>
 8009418:	f7fd fa00 	bl	800681c <__errno>
 800941c:	2321      	movs	r3, #33	; 0x21
 800941e:	6003      	str	r3, [r0, #0]
 8009420:	e7c4      	b.n	80093ac <pow+0xdc>
 8009422:	eeb0 0a48 	vmov.f32	s0, s16
 8009426:	eef0 0a68 	vmov.f32	s1, s17
 800942a:	f001 f815 	bl	800a458 <finite>
 800942e:	9001      	str	r0, [sp, #4]
 8009430:	2800      	cmp	r0, #0
 8009432:	f040 808a 	bne.w	800954a <pow+0x27a>
 8009436:	ec47 6b10 	vmov	d0, r6, r7
 800943a:	f001 f80d 	bl	800a458 <finite>
 800943e:	2800      	cmp	r0, #0
 8009440:	f000 8083 	beq.w	800954a <pow+0x27a>
 8009444:	ec45 4b10 	vmov	d0, r4, r5
 8009448:	f001 f806 	bl	800a458 <finite>
 800944c:	2800      	cmp	r0, #0
 800944e:	d07c      	beq.n	800954a <pow+0x27a>
 8009450:	ec53 2b18 	vmov	r2, r3, d8
 8009454:	ee18 0a10 	vmov	r0, s16
 8009458:	4619      	mov	r1, r3
 800945a:	f7f7 fbc3 	bl	8000be4 <__aeabi_dcmpun>
 800945e:	f998 9000 	ldrsb.w	r9, [r8]
 8009462:	4b50      	ldr	r3, [pc, #320]	; (80095a4 <pow+0x2d4>)
 8009464:	b1b0      	cbz	r0, 8009494 <pow+0x1c4>
 8009466:	2201      	movs	r2, #1
 8009468:	9303      	str	r3, [sp, #12]
 800946a:	9b01      	ldr	r3, [sp, #4]
 800946c:	9202      	str	r2, [sp, #8]
 800946e:	930a      	str	r3, [sp, #40]	; 0x28
 8009470:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009474:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009478:	f1b9 0f00 	cmp.w	r9, #0
 800947c:	d0c3      	beq.n	8009406 <pow+0x136>
 800947e:	4652      	mov	r2, sl
 8009480:	465b      	mov	r3, fp
 8009482:	4650      	mov	r0, sl
 8009484:	4659      	mov	r1, fp
 8009486:	f7f7 fa3d 	bl	8000904 <__aeabi_ddiv>
 800948a:	f1b9 0f02 	cmp.w	r9, #2
 800948e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009492:	e7c0      	b.n	8009416 <pow+0x146>
 8009494:	2203      	movs	r2, #3
 8009496:	9202      	str	r2, [sp, #8]
 8009498:	9303      	str	r3, [sp, #12]
 800949a:	900a      	str	r0, [sp, #40]	; 0x28
 800949c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80094a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80094a4:	f1b9 0f00 	cmp.w	r9, #0
 80094a8:	d12c      	bne.n	8009504 <pow+0x234>
 80094aa:	4b41      	ldr	r3, [pc, #260]	; (80095b0 <pow+0x2e0>)
 80094ac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80094b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094b4:	4630      	mov	r0, r6
 80094b6:	4652      	mov	r2, sl
 80094b8:	465b      	mov	r3, fp
 80094ba:	4639      	mov	r1, r7
 80094bc:	f7f7 fb6a 	bl	8000b94 <__aeabi_dcmplt>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d066      	beq.n	8009592 <pow+0x2c2>
 80094c4:	2200      	movs	r2, #0
 80094c6:	4b3b      	ldr	r3, [pc, #236]	; (80095b4 <pow+0x2e4>)
 80094c8:	4620      	mov	r0, r4
 80094ca:	4629      	mov	r1, r5
 80094cc:	f7f7 f8f0 	bl	80006b0 <__aeabi_dmul>
 80094d0:	4604      	mov	r4, r0
 80094d2:	460d      	mov	r5, r1
 80094d4:	ec45 4b10 	vmov	d0, r4, r5
 80094d8:	f000 ffd2 	bl	800a480 <rint>
 80094dc:	4620      	mov	r0, r4
 80094de:	ec53 2b10 	vmov	r2, r3, d0
 80094e2:	4629      	mov	r1, r5
 80094e4:	f7f7 fb4c 	bl	8000b80 <__aeabi_dcmpeq>
 80094e8:	b920      	cbnz	r0, 80094f4 <pow+0x224>
 80094ea:	4b33      	ldr	r3, [pc, #204]	; (80095b8 <pow+0x2e8>)
 80094ec:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80094f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094f4:	f998 3000 	ldrsb.w	r3, [r8]
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d14a      	bne.n	8009592 <pow+0x2c2>
 80094fc:	f7fd f98e 	bl	800681c <__errno>
 8009500:	2322      	movs	r3, #34	; 0x22
 8009502:	e78c      	b.n	800941e <pow+0x14e>
 8009504:	4b2d      	ldr	r3, [pc, #180]	; (80095bc <pow+0x2ec>)
 8009506:	2200      	movs	r2, #0
 8009508:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800950c:	4630      	mov	r0, r6
 800950e:	4652      	mov	r2, sl
 8009510:	465b      	mov	r3, fp
 8009512:	4639      	mov	r1, r7
 8009514:	f7f7 fb3e 	bl	8000b94 <__aeabi_dcmplt>
 8009518:	2800      	cmp	r0, #0
 800951a:	d0eb      	beq.n	80094f4 <pow+0x224>
 800951c:	2200      	movs	r2, #0
 800951e:	4b25      	ldr	r3, [pc, #148]	; (80095b4 <pow+0x2e4>)
 8009520:	4620      	mov	r0, r4
 8009522:	4629      	mov	r1, r5
 8009524:	f7f7 f8c4 	bl	80006b0 <__aeabi_dmul>
 8009528:	4604      	mov	r4, r0
 800952a:	460d      	mov	r5, r1
 800952c:	ec45 4b10 	vmov	d0, r4, r5
 8009530:	f000 ffa6 	bl	800a480 <rint>
 8009534:	4620      	mov	r0, r4
 8009536:	ec53 2b10 	vmov	r2, r3, d0
 800953a:	4629      	mov	r1, r5
 800953c:	f7f7 fb20 	bl	8000b80 <__aeabi_dcmpeq>
 8009540:	2800      	cmp	r0, #0
 8009542:	d1d7      	bne.n	80094f4 <pow+0x224>
 8009544:	2200      	movs	r2, #0
 8009546:	4b19      	ldr	r3, [pc, #100]	; (80095ac <pow+0x2dc>)
 8009548:	e7d2      	b.n	80094f0 <pow+0x220>
 800954a:	2200      	movs	r2, #0
 800954c:	2300      	movs	r3, #0
 800954e:	ec51 0b18 	vmov	r0, r1, d8
 8009552:	f7f7 fb15 	bl	8000b80 <__aeabi_dcmpeq>
 8009556:	2800      	cmp	r0, #0
 8009558:	f43f af30 	beq.w	80093bc <pow+0xec>
 800955c:	ec47 6b10 	vmov	d0, r6, r7
 8009560:	f000 ff7a 	bl	800a458 <finite>
 8009564:	2800      	cmp	r0, #0
 8009566:	f43f af29 	beq.w	80093bc <pow+0xec>
 800956a:	ec45 4b10 	vmov	d0, r4, r5
 800956e:	f000 ff73 	bl	800a458 <finite>
 8009572:	2800      	cmp	r0, #0
 8009574:	f43f af22 	beq.w	80093bc <pow+0xec>
 8009578:	2304      	movs	r3, #4
 800957a:	9302      	str	r3, [sp, #8]
 800957c:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <pow+0x2d4>)
 800957e:	9303      	str	r3, [sp, #12]
 8009580:	2300      	movs	r3, #0
 8009582:	930a      	str	r3, [sp, #40]	; 0x28
 8009584:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009588:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800958c:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009590:	e7b0      	b.n	80094f4 <pow+0x224>
 8009592:	a802      	add	r0, sp, #8
 8009594:	f000 ff68 	bl	800a468 <matherr>
 8009598:	2800      	cmp	r0, #0
 800959a:	f47f af07 	bne.w	80093ac <pow+0xdc>
 800959e:	e7ad      	b.n	80094fc <pow+0x22c>
 80095a0:	200001ec 	.word	0x200001ec
 80095a4:	0801ea1e 	.word	0x0801ea1e
 80095a8:	3ff00000 	.word	0x3ff00000
 80095ac:	fff00000 	.word	0xfff00000
 80095b0:	47efffff 	.word	0x47efffff
 80095b4:	3fe00000 	.word	0x3fe00000
 80095b8:	c7efffff 	.word	0xc7efffff
 80095bc:	7ff00000 	.word	0x7ff00000

080095c0 <sqrt>:
 80095c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095c4:	ed2d 8b02 	vpush	{d8}
 80095c8:	b08b      	sub	sp, #44	; 0x2c
 80095ca:	ec55 4b10 	vmov	r4, r5, d0
 80095ce:	f000 fe45 	bl	800a25c <__ieee754_sqrt>
 80095d2:	4b26      	ldr	r3, [pc, #152]	; (800966c <sqrt+0xac>)
 80095d4:	eeb0 8a40 	vmov.f32	s16, s0
 80095d8:	eef0 8a60 	vmov.f32	s17, s1
 80095dc:	f993 6000 	ldrsb.w	r6, [r3]
 80095e0:	1c73      	adds	r3, r6, #1
 80095e2:	d02a      	beq.n	800963a <sqrt+0x7a>
 80095e4:	4622      	mov	r2, r4
 80095e6:	462b      	mov	r3, r5
 80095e8:	4620      	mov	r0, r4
 80095ea:	4629      	mov	r1, r5
 80095ec:	f7f7 fafa 	bl	8000be4 <__aeabi_dcmpun>
 80095f0:	4607      	mov	r7, r0
 80095f2:	bb10      	cbnz	r0, 800963a <sqrt+0x7a>
 80095f4:	f04f 0800 	mov.w	r8, #0
 80095f8:	f04f 0900 	mov.w	r9, #0
 80095fc:	4642      	mov	r2, r8
 80095fe:	464b      	mov	r3, r9
 8009600:	4620      	mov	r0, r4
 8009602:	4629      	mov	r1, r5
 8009604:	f7f7 fac6 	bl	8000b94 <__aeabi_dcmplt>
 8009608:	b1b8      	cbz	r0, 800963a <sqrt+0x7a>
 800960a:	2301      	movs	r3, #1
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	4b18      	ldr	r3, [pc, #96]	; (8009670 <sqrt+0xb0>)
 8009610:	9301      	str	r3, [sp, #4]
 8009612:	9708      	str	r7, [sp, #32]
 8009614:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009618:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800961c:	b9b6      	cbnz	r6, 800964c <sqrt+0x8c>
 800961e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009622:	4668      	mov	r0, sp
 8009624:	f000 ff20 	bl	800a468 <matherr>
 8009628:	b1d0      	cbz	r0, 8009660 <sqrt+0xa0>
 800962a:	9b08      	ldr	r3, [sp, #32]
 800962c:	b11b      	cbz	r3, 8009636 <sqrt+0x76>
 800962e:	f7fd f8f5 	bl	800681c <__errno>
 8009632:	9b08      	ldr	r3, [sp, #32]
 8009634:	6003      	str	r3, [r0, #0]
 8009636:	ed9d 8b06 	vldr	d8, [sp, #24]
 800963a:	eeb0 0a48 	vmov.f32	s0, s16
 800963e:	eef0 0a68 	vmov.f32	s1, s17
 8009642:	b00b      	add	sp, #44	; 0x2c
 8009644:	ecbd 8b02 	vpop	{d8}
 8009648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800964c:	4642      	mov	r2, r8
 800964e:	464b      	mov	r3, r9
 8009650:	4640      	mov	r0, r8
 8009652:	4649      	mov	r1, r9
 8009654:	f7f7 f956 	bl	8000904 <__aeabi_ddiv>
 8009658:	2e02      	cmp	r6, #2
 800965a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800965e:	d1e0      	bne.n	8009622 <sqrt+0x62>
 8009660:	f7fd f8dc 	bl	800681c <__errno>
 8009664:	2321      	movs	r3, #33	; 0x21
 8009666:	6003      	str	r3, [r0, #0]
 8009668:	e7df      	b.n	800962a <sqrt+0x6a>
 800966a:	bf00      	nop
 800966c:	200001ec 	.word	0x200001ec
 8009670:	0801ea22 	.word	0x0801ea22

08009674 <sqrtf>:
 8009674:	b510      	push	{r4, lr}
 8009676:	ed2d 8b02 	vpush	{d8}
 800967a:	b08a      	sub	sp, #40	; 0x28
 800967c:	eeb0 8a40 	vmov.f32	s16, s0
 8009680:	f000 fe9c 	bl	800a3bc <__ieee754_sqrtf>
 8009684:	4b21      	ldr	r3, [pc, #132]	; (800970c <sqrtf+0x98>)
 8009686:	f993 4000 	ldrsb.w	r4, [r3]
 800968a:	1c63      	adds	r3, r4, #1
 800968c:	d02c      	beq.n	80096e8 <sqrtf+0x74>
 800968e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009696:	d627      	bvs.n	80096e8 <sqrtf+0x74>
 8009698:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800969c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a0:	d522      	bpl.n	80096e8 <sqrtf+0x74>
 80096a2:	2301      	movs	r3, #1
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	4b1a      	ldr	r3, [pc, #104]	; (8009710 <sqrtf+0x9c>)
 80096a8:	9301      	str	r3, [sp, #4]
 80096aa:	ee18 0a10 	vmov	r0, s16
 80096ae:	2300      	movs	r3, #0
 80096b0:	9308      	str	r3, [sp, #32]
 80096b2:	f7f6 ffa9 	bl	8000608 <__aeabi_f2d>
 80096b6:	2200      	movs	r2, #0
 80096b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096c0:	2300      	movs	r3, #0
 80096c2:	b9ac      	cbnz	r4, 80096f0 <sqrtf+0x7c>
 80096c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80096c8:	4668      	mov	r0, sp
 80096ca:	f000 fecd 	bl	800a468 <matherr>
 80096ce:	b1b8      	cbz	r0, 8009700 <sqrtf+0x8c>
 80096d0:	9b08      	ldr	r3, [sp, #32]
 80096d2:	b11b      	cbz	r3, 80096dc <sqrtf+0x68>
 80096d4:	f7fd f8a2 	bl	800681c <__errno>
 80096d8:	9b08      	ldr	r3, [sp, #32]
 80096da:	6003      	str	r3, [r0, #0]
 80096dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096e0:	f7f7 fabe 	bl	8000c60 <__aeabi_d2f>
 80096e4:	ee00 0a10 	vmov	s0, r0
 80096e8:	b00a      	add	sp, #40	; 0x28
 80096ea:	ecbd 8b02 	vpop	{d8}
 80096ee:	bd10      	pop	{r4, pc}
 80096f0:	4610      	mov	r0, r2
 80096f2:	4619      	mov	r1, r3
 80096f4:	f7f7 f906 	bl	8000904 <__aeabi_ddiv>
 80096f8:	2c02      	cmp	r4, #2
 80096fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80096fe:	d1e3      	bne.n	80096c8 <sqrtf+0x54>
 8009700:	f7fd f88c 	bl	800681c <__errno>
 8009704:	2321      	movs	r3, #33	; 0x21
 8009706:	6003      	str	r3, [r0, #0]
 8009708:	e7e2      	b.n	80096d0 <sqrtf+0x5c>
 800970a:	bf00      	nop
 800970c:	200001ec 	.word	0x200001ec
 8009710:	0801ea27 	.word	0x0801ea27
 8009714:	00000000 	.word	0x00000000

08009718 <__ieee754_log10>:
 8009718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800971c:	ec55 4b10 	vmov	r4, r5, d0
 8009720:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8009724:	ee10 2a10 	vmov	r2, s0
 8009728:	462b      	mov	r3, r5
 800972a:	da30      	bge.n	800978e <__ieee754_log10+0x76>
 800972c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8009730:	430a      	orrs	r2, r1
 8009732:	d10a      	bne.n	800974a <__ieee754_log10+0x32>
 8009734:	493c      	ldr	r1, [pc, #240]	; (8009828 <__ieee754_log10+0x110>)
 8009736:	2200      	movs	r2, #0
 8009738:	2300      	movs	r3, #0
 800973a:	2000      	movs	r0, #0
 800973c:	f7f7 f8e2 	bl	8000904 <__aeabi_ddiv>
 8009740:	ec41 0b10 	vmov	d0, r0, r1
 8009744:	b003      	add	sp, #12
 8009746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800974a:	2d00      	cmp	r5, #0
 800974c:	da09      	bge.n	8009762 <__ieee754_log10+0x4a>
 800974e:	ee10 2a10 	vmov	r2, s0
 8009752:	462b      	mov	r3, r5
 8009754:	4620      	mov	r0, r4
 8009756:	4629      	mov	r1, r5
 8009758:	f7f6 fdf6 	bl	8000348 <__aeabi_dsub>
 800975c:	2200      	movs	r2, #0
 800975e:	2300      	movs	r3, #0
 8009760:	e7ec      	b.n	800973c <__ieee754_log10+0x24>
 8009762:	2200      	movs	r2, #0
 8009764:	4b31      	ldr	r3, [pc, #196]	; (800982c <__ieee754_log10+0x114>)
 8009766:	4629      	mov	r1, r5
 8009768:	ee10 0a10 	vmov	r0, s0
 800976c:	f7f6 ffa0 	bl	80006b0 <__aeabi_dmul>
 8009770:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8009774:	4604      	mov	r4, r0
 8009776:	460d      	mov	r5, r1
 8009778:	460b      	mov	r3, r1
 800977a:	492d      	ldr	r1, [pc, #180]	; (8009830 <__ieee754_log10+0x118>)
 800977c:	428b      	cmp	r3, r1
 800977e:	dd08      	ble.n	8009792 <__ieee754_log10+0x7a>
 8009780:	4622      	mov	r2, r4
 8009782:	462b      	mov	r3, r5
 8009784:	4620      	mov	r0, r4
 8009786:	4629      	mov	r1, r5
 8009788:	f7f6 fde0 	bl	800034c <__adddf3>
 800978c:	e7d8      	b.n	8009740 <__ieee754_log10+0x28>
 800978e:	2200      	movs	r2, #0
 8009790:	e7f3      	b.n	800977a <__ieee754_log10+0x62>
 8009792:	1518      	asrs	r0, r3, #20
 8009794:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009798:	4410      	add	r0, r2
 800979a:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800979e:	4448      	add	r0, r9
 80097a0:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80097a4:	f7f6 ff1e 	bl	80005e4 <__aeabi_i2d>
 80097a8:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80097ac:	3303      	adds	r3, #3
 80097ae:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80097b2:	ec45 4b10 	vmov	d0, r4, r5
 80097b6:	4606      	mov	r6, r0
 80097b8:	460f      	mov	r7, r1
 80097ba:	f000 ff65 	bl	800a688 <__ieee754_log>
 80097be:	a314      	add	r3, pc, #80	; (adr r3, 8009810 <__ieee754_log10+0xf8>)
 80097c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c4:	4630      	mov	r0, r6
 80097c6:	4639      	mov	r1, r7
 80097c8:	ed8d 0b00 	vstr	d0, [sp]
 80097cc:	f7f6 ff70 	bl	80006b0 <__aeabi_dmul>
 80097d0:	ed9d 0b00 	vldr	d0, [sp]
 80097d4:	4604      	mov	r4, r0
 80097d6:	460d      	mov	r5, r1
 80097d8:	a30f      	add	r3, pc, #60	; (adr r3, 8009818 <__ieee754_log10+0x100>)
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	ec51 0b10 	vmov	r0, r1, d0
 80097e2:	f7f6 ff65 	bl	80006b0 <__aeabi_dmul>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4620      	mov	r0, r4
 80097ec:	4629      	mov	r1, r5
 80097ee:	f7f6 fdad 	bl	800034c <__adddf3>
 80097f2:	a30b      	add	r3, pc, #44	; (adr r3, 8009820 <__ieee754_log10+0x108>)
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	4604      	mov	r4, r0
 80097fa:	460d      	mov	r5, r1
 80097fc:	4630      	mov	r0, r6
 80097fe:	4639      	mov	r1, r7
 8009800:	f7f6 ff56 	bl	80006b0 <__aeabi_dmul>
 8009804:	4602      	mov	r2, r0
 8009806:	460b      	mov	r3, r1
 8009808:	4620      	mov	r0, r4
 800980a:	4629      	mov	r1, r5
 800980c:	e7bc      	b.n	8009788 <__ieee754_log10+0x70>
 800980e:	bf00      	nop
 8009810:	11f12b36 	.word	0x11f12b36
 8009814:	3d59fef3 	.word	0x3d59fef3
 8009818:	1526e50e 	.word	0x1526e50e
 800981c:	3fdbcb7b 	.word	0x3fdbcb7b
 8009820:	509f6000 	.word	0x509f6000
 8009824:	3fd34413 	.word	0x3fd34413
 8009828:	c3500000 	.word	0xc3500000
 800982c:	43500000 	.word	0x43500000
 8009830:	7fefffff 	.word	0x7fefffff
 8009834:	00000000 	.word	0x00000000

08009838 <__ieee754_pow>:
 8009838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983c:	b091      	sub	sp, #68	; 0x44
 800983e:	ed8d 1b00 	vstr	d1, [sp]
 8009842:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8009846:	ec57 6b10 	vmov	r6, r7, d0
 800984a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800984e:	ea58 0302 	orrs.w	r3, r8, r2
 8009852:	ee10 aa10 	vmov	sl, s0
 8009856:	463d      	mov	r5, r7
 8009858:	f000 84bd 	beq.w	800a1d6 <__ieee754_pow+0x99e>
 800985c:	4b78      	ldr	r3, [pc, #480]	; (8009a40 <__ieee754_pow+0x208>)
 800985e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009862:	429c      	cmp	r4, r3
 8009864:	dc09      	bgt.n	800987a <__ieee754_pow+0x42>
 8009866:	d103      	bne.n	8009870 <__ieee754_pow+0x38>
 8009868:	b93e      	cbnz	r6, 800987a <__ieee754_pow+0x42>
 800986a:	45a0      	cmp	r8, r4
 800986c:	dc0d      	bgt.n	800988a <__ieee754_pow+0x52>
 800986e:	e001      	b.n	8009874 <__ieee754_pow+0x3c>
 8009870:	4598      	cmp	r8, r3
 8009872:	dc02      	bgt.n	800987a <__ieee754_pow+0x42>
 8009874:	4598      	cmp	r8, r3
 8009876:	d10e      	bne.n	8009896 <__ieee754_pow+0x5e>
 8009878:	b16a      	cbz	r2, 8009896 <__ieee754_pow+0x5e>
 800987a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800987e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009882:	ea54 030a 	orrs.w	r3, r4, sl
 8009886:	f000 84a6 	beq.w	800a1d6 <__ieee754_pow+0x99e>
 800988a:	486e      	ldr	r0, [pc, #440]	; (8009a44 <__ieee754_pow+0x20c>)
 800988c:	b011      	add	sp, #68	; 0x44
 800988e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009892:	f000 bded 	b.w	800a470 <nan>
 8009896:	2d00      	cmp	r5, #0
 8009898:	da53      	bge.n	8009942 <__ieee754_pow+0x10a>
 800989a:	4b6b      	ldr	r3, [pc, #428]	; (8009a48 <__ieee754_pow+0x210>)
 800989c:	4598      	cmp	r8, r3
 800989e:	dc4d      	bgt.n	800993c <__ieee754_pow+0x104>
 80098a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80098a4:	4598      	cmp	r8, r3
 80098a6:	dd4c      	ble.n	8009942 <__ieee754_pow+0x10a>
 80098a8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80098ac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80098b0:	2b14      	cmp	r3, #20
 80098b2:	dd26      	ble.n	8009902 <__ieee754_pow+0xca>
 80098b4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80098b8:	fa22 f103 	lsr.w	r1, r2, r3
 80098bc:	fa01 f303 	lsl.w	r3, r1, r3
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d13e      	bne.n	8009942 <__ieee754_pow+0x10a>
 80098c4:	f001 0101 	and.w	r1, r1, #1
 80098c8:	f1c1 0b02 	rsb	fp, r1, #2
 80098cc:	2a00      	cmp	r2, #0
 80098ce:	d15b      	bne.n	8009988 <__ieee754_pow+0x150>
 80098d0:	4b5b      	ldr	r3, [pc, #364]	; (8009a40 <__ieee754_pow+0x208>)
 80098d2:	4598      	cmp	r8, r3
 80098d4:	d124      	bne.n	8009920 <__ieee754_pow+0xe8>
 80098d6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80098da:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80098de:	ea53 030a 	orrs.w	r3, r3, sl
 80098e2:	f000 8478 	beq.w	800a1d6 <__ieee754_pow+0x99e>
 80098e6:	4b59      	ldr	r3, [pc, #356]	; (8009a4c <__ieee754_pow+0x214>)
 80098e8:	429c      	cmp	r4, r3
 80098ea:	dd2d      	ble.n	8009948 <__ieee754_pow+0x110>
 80098ec:	f1b9 0f00 	cmp.w	r9, #0
 80098f0:	f280 8475 	bge.w	800a1de <__ieee754_pow+0x9a6>
 80098f4:	2000      	movs	r0, #0
 80098f6:	2100      	movs	r1, #0
 80098f8:	ec41 0b10 	vmov	d0, r0, r1
 80098fc:	b011      	add	sp, #68	; 0x44
 80098fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009902:	2a00      	cmp	r2, #0
 8009904:	d13e      	bne.n	8009984 <__ieee754_pow+0x14c>
 8009906:	f1c3 0314 	rsb	r3, r3, #20
 800990a:	fa48 f103 	asr.w	r1, r8, r3
 800990e:	fa01 f303 	lsl.w	r3, r1, r3
 8009912:	4598      	cmp	r8, r3
 8009914:	f040 846b 	bne.w	800a1ee <__ieee754_pow+0x9b6>
 8009918:	f001 0101 	and.w	r1, r1, #1
 800991c:	f1c1 0b02 	rsb	fp, r1, #2
 8009920:	4b4b      	ldr	r3, [pc, #300]	; (8009a50 <__ieee754_pow+0x218>)
 8009922:	4598      	cmp	r8, r3
 8009924:	d118      	bne.n	8009958 <__ieee754_pow+0x120>
 8009926:	f1b9 0f00 	cmp.w	r9, #0
 800992a:	f280 845c 	bge.w	800a1e6 <__ieee754_pow+0x9ae>
 800992e:	4948      	ldr	r1, [pc, #288]	; (8009a50 <__ieee754_pow+0x218>)
 8009930:	4632      	mov	r2, r6
 8009932:	463b      	mov	r3, r7
 8009934:	2000      	movs	r0, #0
 8009936:	f7f6 ffe5 	bl	8000904 <__aeabi_ddiv>
 800993a:	e7dd      	b.n	80098f8 <__ieee754_pow+0xc0>
 800993c:	f04f 0b02 	mov.w	fp, #2
 8009940:	e7c4      	b.n	80098cc <__ieee754_pow+0x94>
 8009942:	f04f 0b00 	mov.w	fp, #0
 8009946:	e7c1      	b.n	80098cc <__ieee754_pow+0x94>
 8009948:	f1b9 0f00 	cmp.w	r9, #0
 800994c:	dad2      	bge.n	80098f4 <__ieee754_pow+0xbc>
 800994e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8009952:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009956:	e7cf      	b.n	80098f8 <__ieee754_pow+0xc0>
 8009958:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800995c:	d106      	bne.n	800996c <__ieee754_pow+0x134>
 800995e:	4632      	mov	r2, r6
 8009960:	463b      	mov	r3, r7
 8009962:	4610      	mov	r0, r2
 8009964:	4619      	mov	r1, r3
 8009966:	f7f6 fea3 	bl	80006b0 <__aeabi_dmul>
 800996a:	e7c5      	b.n	80098f8 <__ieee754_pow+0xc0>
 800996c:	4b39      	ldr	r3, [pc, #228]	; (8009a54 <__ieee754_pow+0x21c>)
 800996e:	4599      	cmp	r9, r3
 8009970:	d10a      	bne.n	8009988 <__ieee754_pow+0x150>
 8009972:	2d00      	cmp	r5, #0
 8009974:	db08      	blt.n	8009988 <__ieee754_pow+0x150>
 8009976:	ec47 6b10 	vmov	d0, r6, r7
 800997a:	b011      	add	sp, #68	; 0x44
 800997c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009980:	f000 bc6c 	b.w	800a25c <__ieee754_sqrt>
 8009984:	f04f 0b00 	mov.w	fp, #0
 8009988:	ec47 6b10 	vmov	d0, r6, r7
 800998c:	f000 fd5d 	bl	800a44a <fabs>
 8009990:	ec51 0b10 	vmov	r0, r1, d0
 8009994:	f1ba 0f00 	cmp.w	sl, #0
 8009998:	d127      	bne.n	80099ea <__ieee754_pow+0x1b2>
 800999a:	b124      	cbz	r4, 80099a6 <__ieee754_pow+0x16e>
 800999c:	4b2c      	ldr	r3, [pc, #176]	; (8009a50 <__ieee754_pow+0x218>)
 800999e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d121      	bne.n	80099ea <__ieee754_pow+0x1b2>
 80099a6:	f1b9 0f00 	cmp.w	r9, #0
 80099aa:	da05      	bge.n	80099b8 <__ieee754_pow+0x180>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	2000      	movs	r0, #0
 80099b2:	4927      	ldr	r1, [pc, #156]	; (8009a50 <__ieee754_pow+0x218>)
 80099b4:	f7f6 ffa6 	bl	8000904 <__aeabi_ddiv>
 80099b8:	2d00      	cmp	r5, #0
 80099ba:	da9d      	bge.n	80098f8 <__ieee754_pow+0xc0>
 80099bc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80099c0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80099c4:	ea54 030b 	orrs.w	r3, r4, fp
 80099c8:	d108      	bne.n	80099dc <__ieee754_pow+0x1a4>
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	4610      	mov	r0, r2
 80099d0:	4619      	mov	r1, r3
 80099d2:	f7f6 fcb9 	bl	8000348 <__aeabi_dsub>
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	e7ac      	b.n	8009936 <__ieee754_pow+0xfe>
 80099dc:	f1bb 0f01 	cmp.w	fp, #1
 80099e0:	d18a      	bne.n	80098f8 <__ieee754_pow+0xc0>
 80099e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099e6:	4619      	mov	r1, r3
 80099e8:	e786      	b.n	80098f8 <__ieee754_pow+0xc0>
 80099ea:	0fed      	lsrs	r5, r5, #31
 80099ec:	1e6b      	subs	r3, r5, #1
 80099ee:	930d      	str	r3, [sp, #52]	; 0x34
 80099f0:	ea5b 0303 	orrs.w	r3, fp, r3
 80099f4:	d102      	bne.n	80099fc <__ieee754_pow+0x1c4>
 80099f6:	4632      	mov	r2, r6
 80099f8:	463b      	mov	r3, r7
 80099fa:	e7e8      	b.n	80099ce <__ieee754_pow+0x196>
 80099fc:	4b16      	ldr	r3, [pc, #88]	; (8009a58 <__ieee754_pow+0x220>)
 80099fe:	4598      	cmp	r8, r3
 8009a00:	f340 80fe 	ble.w	8009c00 <__ieee754_pow+0x3c8>
 8009a04:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009a08:	4598      	cmp	r8, r3
 8009a0a:	dd0a      	ble.n	8009a22 <__ieee754_pow+0x1ea>
 8009a0c:	4b0f      	ldr	r3, [pc, #60]	; (8009a4c <__ieee754_pow+0x214>)
 8009a0e:	429c      	cmp	r4, r3
 8009a10:	dc0d      	bgt.n	8009a2e <__ieee754_pow+0x1f6>
 8009a12:	f1b9 0f00 	cmp.w	r9, #0
 8009a16:	f6bf af6d 	bge.w	80098f4 <__ieee754_pow+0xbc>
 8009a1a:	a307      	add	r3, pc, #28	; (adr r3, 8009a38 <__ieee754_pow+0x200>)
 8009a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a20:	e79f      	b.n	8009962 <__ieee754_pow+0x12a>
 8009a22:	4b0e      	ldr	r3, [pc, #56]	; (8009a5c <__ieee754_pow+0x224>)
 8009a24:	429c      	cmp	r4, r3
 8009a26:	ddf4      	ble.n	8009a12 <__ieee754_pow+0x1da>
 8009a28:	4b09      	ldr	r3, [pc, #36]	; (8009a50 <__ieee754_pow+0x218>)
 8009a2a:	429c      	cmp	r4, r3
 8009a2c:	dd18      	ble.n	8009a60 <__ieee754_pow+0x228>
 8009a2e:	f1b9 0f00 	cmp.w	r9, #0
 8009a32:	dcf2      	bgt.n	8009a1a <__ieee754_pow+0x1e2>
 8009a34:	e75e      	b.n	80098f4 <__ieee754_pow+0xbc>
 8009a36:	bf00      	nop
 8009a38:	8800759c 	.word	0x8800759c
 8009a3c:	7e37e43c 	.word	0x7e37e43c
 8009a40:	7ff00000 	.word	0x7ff00000
 8009a44:	0800aab2 	.word	0x0800aab2
 8009a48:	433fffff 	.word	0x433fffff
 8009a4c:	3fefffff 	.word	0x3fefffff
 8009a50:	3ff00000 	.word	0x3ff00000
 8009a54:	3fe00000 	.word	0x3fe00000
 8009a58:	41e00000 	.word	0x41e00000
 8009a5c:	3feffffe 	.word	0x3feffffe
 8009a60:	2200      	movs	r2, #0
 8009a62:	4b63      	ldr	r3, [pc, #396]	; (8009bf0 <__ieee754_pow+0x3b8>)
 8009a64:	f7f6 fc70 	bl	8000348 <__aeabi_dsub>
 8009a68:	a355      	add	r3, pc, #340	; (adr r3, 8009bc0 <__ieee754_pow+0x388>)
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	4604      	mov	r4, r0
 8009a70:	460d      	mov	r5, r1
 8009a72:	f7f6 fe1d 	bl	80006b0 <__aeabi_dmul>
 8009a76:	a354      	add	r3, pc, #336	; (adr r3, 8009bc8 <__ieee754_pow+0x390>)
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	460f      	mov	r7, r1
 8009a80:	4620      	mov	r0, r4
 8009a82:	4629      	mov	r1, r5
 8009a84:	f7f6 fe14 	bl	80006b0 <__aeabi_dmul>
 8009a88:	2200      	movs	r2, #0
 8009a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a8e:	4b59      	ldr	r3, [pc, #356]	; (8009bf4 <__ieee754_pow+0x3bc>)
 8009a90:	4620      	mov	r0, r4
 8009a92:	4629      	mov	r1, r5
 8009a94:	f7f6 fe0c 	bl	80006b0 <__aeabi_dmul>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	a14c      	add	r1, pc, #304	; (adr r1, 8009bd0 <__ieee754_pow+0x398>)
 8009a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009aa2:	f7f6 fc51 	bl	8000348 <__aeabi_dsub>
 8009aa6:	4622      	mov	r2, r4
 8009aa8:	462b      	mov	r3, r5
 8009aaa:	f7f6 fe01 	bl	80006b0 <__aeabi_dmul>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	4950      	ldr	r1, [pc, #320]	; (8009bf8 <__ieee754_pow+0x3c0>)
 8009ab6:	f7f6 fc47 	bl	8000348 <__aeabi_dsub>
 8009aba:	4622      	mov	r2, r4
 8009abc:	462b      	mov	r3, r5
 8009abe:	4680      	mov	r8, r0
 8009ac0:	4689      	mov	r9, r1
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	f7f6 fdf3 	bl	80006b0 <__aeabi_dmul>
 8009aca:	4602      	mov	r2, r0
 8009acc:	460b      	mov	r3, r1
 8009ace:	4640      	mov	r0, r8
 8009ad0:	4649      	mov	r1, r9
 8009ad2:	f7f6 fded 	bl	80006b0 <__aeabi_dmul>
 8009ad6:	a340      	add	r3, pc, #256	; (adr r3, 8009bd8 <__ieee754_pow+0x3a0>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f7f6 fde8 	bl	80006b0 <__aeabi_dmul>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ae8:	f7f6 fc2e 	bl	8000348 <__aeabi_dsub>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	4604      	mov	r4, r0
 8009af2:	460d      	mov	r5, r1
 8009af4:	4630      	mov	r0, r6
 8009af6:	4639      	mov	r1, r7
 8009af8:	f7f6 fc28 	bl	800034c <__adddf3>
 8009afc:	2000      	movs	r0, #0
 8009afe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b02:	4632      	mov	r2, r6
 8009b04:	463b      	mov	r3, r7
 8009b06:	f7f6 fc1f 	bl	8000348 <__aeabi_dsub>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4620      	mov	r0, r4
 8009b10:	4629      	mov	r1, r5
 8009b12:	f7f6 fc19 	bl	8000348 <__aeabi_dsub>
 8009b16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b18:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	4606      	mov	r6, r0
 8009b20:	460f      	mov	r7, r1
 8009b22:	f040 81eb 	bne.w	8009efc <__ieee754_pow+0x6c4>
 8009b26:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009be0 <__ieee754_pow+0x3a8>
 8009b2a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009b2e:	2400      	movs	r4, #0
 8009b30:	4622      	mov	r2, r4
 8009b32:	462b      	mov	r3, r5
 8009b34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b3c:	f7f6 fc04 	bl	8000348 <__aeabi_dsub>
 8009b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b44:	f7f6 fdb4 	bl	80006b0 <__aeabi_dmul>
 8009b48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b4c:	4680      	mov	r8, r0
 8009b4e:	4689      	mov	r9, r1
 8009b50:	4630      	mov	r0, r6
 8009b52:	4639      	mov	r1, r7
 8009b54:	f7f6 fdac 	bl	80006b0 <__aeabi_dmul>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4640      	mov	r0, r8
 8009b5e:	4649      	mov	r1, r9
 8009b60:	f7f6 fbf4 	bl	800034c <__adddf3>
 8009b64:	4622      	mov	r2, r4
 8009b66:	462b      	mov	r3, r5
 8009b68:	4680      	mov	r8, r0
 8009b6a:	4689      	mov	r9, r1
 8009b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b70:	f7f6 fd9e 	bl	80006b0 <__aeabi_dmul>
 8009b74:	460b      	mov	r3, r1
 8009b76:	4604      	mov	r4, r0
 8009b78:	460d      	mov	r5, r1
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	4640      	mov	r0, r8
 8009b80:	e9cd 4500 	strd	r4, r5, [sp]
 8009b84:	f7f6 fbe2 	bl	800034c <__adddf3>
 8009b88:	4b1c      	ldr	r3, [pc, #112]	; (8009bfc <__ieee754_pow+0x3c4>)
 8009b8a:	4299      	cmp	r1, r3
 8009b8c:	4606      	mov	r6, r0
 8009b8e:	460f      	mov	r7, r1
 8009b90:	468b      	mov	fp, r1
 8009b92:	f340 82f7 	ble.w	800a184 <__ieee754_pow+0x94c>
 8009b96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009b9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009b9e:	4303      	orrs	r3, r0
 8009ba0:	f000 81ea 	beq.w	8009f78 <__ieee754_pow+0x740>
 8009ba4:	a310      	add	r3, pc, #64	; (adr r3, 8009be8 <__ieee754_pow+0x3b0>)
 8009ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009baa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bae:	f7f6 fd7f 	bl	80006b0 <__aeabi_dmul>
 8009bb2:	a30d      	add	r3, pc, #52	; (adr r3, 8009be8 <__ieee754_pow+0x3b0>)
 8009bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb8:	e6d5      	b.n	8009966 <__ieee754_pow+0x12e>
 8009bba:	bf00      	nop
 8009bbc:	f3af 8000 	nop.w
 8009bc0:	60000000 	.word	0x60000000
 8009bc4:	3ff71547 	.word	0x3ff71547
 8009bc8:	f85ddf44 	.word	0xf85ddf44
 8009bcc:	3e54ae0b 	.word	0x3e54ae0b
 8009bd0:	55555555 	.word	0x55555555
 8009bd4:	3fd55555 	.word	0x3fd55555
 8009bd8:	652b82fe 	.word	0x652b82fe
 8009bdc:	3ff71547 	.word	0x3ff71547
 8009be0:	00000000 	.word	0x00000000
 8009be4:	bff00000 	.word	0xbff00000
 8009be8:	8800759c 	.word	0x8800759c
 8009bec:	7e37e43c 	.word	0x7e37e43c
 8009bf0:	3ff00000 	.word	0x3ff00000
 8009bf4:	3fd00000 	.word	0x3fd00000
 8009bf8:	3fe00000 	.word	0x3fe00000
 8009bfc:	408fffff 	.word	0x408fffff
 8009c00:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009c04:	f04f 0200 	mov.w	r2, #0
 8009c08:	da05      	bge.n	8009c16 <__ieee754_pow+0x3de>
 8009c0a:	4bd3      	ldr	r3, [pc, #844]	; (8009f58 <__ieee754_pow+0x720>)
 8009c0c:	f7f6 fd50 	bl	80006b0 <__aeabi_dmul>
 8009c10:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009c14:	460c      	mov	r4, r1
 8009c16:	1523      	asrs	r3, r4, #20
 8009c18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009c1c:	4413      	add	r3, r2
 8009c1e:	9307      	str	r3, [sp, #28]
 8009c20:	4bce      	ldr	r3, [pc, #824]	; (8009f5c <__ieee754_pow+0x724>)
 8009c22:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009c26:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009c2a:	429c      	cmp	r4, r3
 8009c2c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009c30:	dd08      	ble.n	8009c44 <__ieee754_pow+0x40c>
 8009c32:	4bcb      	ldr	r3, [pc, #812]	; (8009f60 <__ieee754_pow+0x728>)
 8009c34:	429c      	cmp	r4, r3
 8009c36:	f340 815e 	ble.w	8009ef6 <__ieee754_pow+0x6be>
 8009c3a:	9b07      	ldr	r3, [sp, #28]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	9307      	str	r3, [sp, #28]
 8009c40:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009c44:	f04f 0a00 	mov.w	sl, #0
 8009c48:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009c4c:	930c      	str	r3, [sp, #48]	; 0x30
 8009c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c50:	4bc4      	ldr	r3, [pc, #784]	; (8009f64 <__ieee754_pow+0x72c>)
 8009c52:	4413      	add	r3, r2
 8009c54:	ed93 7b00 	vldr	d7, [r3]
 8009c58:	4629      	mov	r1, r5
 8009c5a:	ec53 2b17 	vmov	r2, r3, d7
 8009c5e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009c62:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c66:	f7f6 fb6f 	bl	8000348 <__aeabi_dsub>
 8009c6a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c6e:	4606      	mov	r6, r0
 8009c70:	460f      	mov	r7, r1
 8009c72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c76:	f7f6 fb69 	bl	800034c <__adddf3>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	2000      	movs	r0, #0
 8009c80:	49b9      	ldr	r1, [pc, #740]	; (8009f68 <__ieee754_pow+0x730>)
 8009c82:	f7f6 fe3f 	bl	8000904 <__aeabi_ddiv>
 8009c86:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4630      	mov	r0, r6
 8009c90:	4639      	mov	r1, r7
 8009c92:	f7f6 fd0d 	bl	80006b0 <__aeabi_dmul>
 8009c96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c9a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009c9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	9302      	str	r3, [sp, #8]
 8009ca6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009caa:	106d      	asrs	r5, r5, #1
 8009cac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009cb0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009cba:	4640      	mov	r0, r8
 8009cbc:	4649      	mov	r1, r9
 8009cbe:	4614      	mov	r4, r2
 8009cc0:	461d      	mov	r5, r3
 8009cc2:	f7f6 fcf5 	bl	80006b0 <__aeabi_dmul>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4630      	mov	r0, r6
 8009ccc:	4639      	mov	r1, r7
 8009cce:	f7f6 fb3b 	bl	8000348 <__aeabi_dsub>
 8009cd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	460f      	mov	r7, r1
 8009cda:	4620      	mov	r0, r4
 8009cdc:	4629      	mov	r1, r5
 8009cde:	f7f6 fb33 	bl	8000348 <__aeabi_dsub>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009cea:	f7f6 fb2d 	bl	8000348 <__aeabi_dsub>
 8009cee:	4642      	mov	r2, r8
 8009cf0:	464b      	mov	r3, r9
 8009cf2:	f7f6 fcdd 	bl	80006b0 <__aeabi_dmul>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	f7f6 fb23 	bl	8000348 <__aeabi_dsub>
 8009d02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009d06:	f7f6 fcd3 	bl	80006b0 <__aeabi_dmul>
 8009d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d12:	4610      	mov	r0, r2
 8009d14:	4619      	mov	r1, r3
 8009d16:	f7f6 fccb 	bl	80006b0 <__aeabi_dmul>
 8009d1a:	a37b      	add	r3, pc, #492	; (adr r3, 8009f08 <__ieee754_pow+0x6d0>)
 8009d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d20:	4604      	mov	r4, r0
 8009d22:	460d      	mov	r5, r1
 8009d24:	f7f6 fcc4 	bl	80006b0 <__aeabi_dmul>
 8009d28:	a379      	add	r3, pc, #484	; (adr r3, 8009f10 <__ieee754_pow+0x6d8>)
 8009d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2e:	f7f6 fb0d 	bl	800034c <__adddf3>
 8009d32:	4622      	mov	r2, r4
 8009d34:	462b      	mov	r3, r5
 8009d36:	f7f6 fcbb 	bl	80006b0 <__aeabi_dmul>
 8009d3a:	a377      	add	r3, pc, #476	; (adr r3, 8009f18 <__ieee754_pow+0x6e0>)
 8009d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d40:	f7f6 fb04 	bl	800034c <__adddf3>
 8009d44:	4622      	mov	r2, r4
 8009d46:	462b      	mov	r3, r5
 8009d48:	f7f6 fcb2 	bl	80006b0 <__aeabi_dmul>
 8009d4c:	a374      	add	r3, pc, #464	; (adr r3, 8009f20 <__ieee754_pow+0x6e8>)
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	f7f6 fafb 	bl	800034c <__adddf3>
 8009d56:	4622      	mov	r2, r4
 8009d58:	462b      	mov	r3, r5
 8009d5a:	f7f6 fca9 	bl	80006b0 <__aeabi_dmul>
 8009d5e:	a372      	add	r3, pc, #456	; (adr r3, 8009f28 <__ieee754_pow+0x6f0>)
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	f7f6 faf2 	bl	800034c <__adddf3>
 8009d68:	4622      	mov	r2, r4
 8009d6a:	462b      	mov	r3, r5
 8009d6c:	f7f6 fca0 	bl	80006b0 <__aeabi_dmul>
 8009d70:	a36f      	add	r3, pc, #444	; (adr r3, 8009f30 <__ieee754_pow+0x6f8>)
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	f7f6 fae9 	bl	800034c <__adddf3>
 8009d7a:	4622      	mov	r2, r4
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	460f      	mov	r7, r1
 8009d80:	462b      	mov	r3, r5
 8009d82:	4620      	mov	r0, r4
 8009d84:	4629      	mov	r1, r5
 8009d86:	f7f6 fc93 	bl	80006b0 <__aeabi_dmul>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4630      	mov	r0, r6
 8009d90:	4639      	mov	r1, r7
 8009d92:	f7f6 fc8d 	bl	80006b0 <__aeabi_dmul>
 8009d96:	4642      	mov	r2, r8
 8009d98:	4604      	mov	r4, r0
 8009d9a:	460d      	mov	r5, r1
 8009d9c:	464b      	mov	r3, r9
 8009d9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009da2:	f7f6 fad3 	bl	800034c <__adddf3>
 8009da6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009daa:	f7f6 fc81 	bl	80006b0 <__aeabi_dmul>
 8009dae:	4622      	mov	r2, r4
 8009db0:	462b      	mov	r3, r5
 8009db2:	f7f6 facb 	bl	800034c <__adddf3>
 8009db6:	4642      	mov	r2, r8
 8009db8:	4606      	mov	r6, r0
 8009dba:	460f      	mov	r7, r1
 8009dbc:	464b      	mov	r3, r9
 8009dbe:	4640      	mov	r0, r8
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	f7f6 fc75 	bl	80006b0 <__aeabi_dmul>
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	4b68      	ldr	r3, [pc, #416]	; (8009f6c <__ieee754_pow+0x734>)
 8009dca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009dce:	f7f6 fabd 	bl	800034c <__adddf3>
 8009dd2:	4632      	mov	r2, r6
 8009dd4:	463b      	mov	r3, r7
 8009dd6:	f7f6 fab9 	bl	800034c <__adddf3>
 8009dda:	9802      	ldr	r0, [sp, #8]
 8009ddc:	460d      	mov	r5, r1
 8009dde:	4604      	mov	r4, r0
 8009de0:	4602      	mov	r2, r0
 8009de2:	460b      	mov	r3, r1
 8009de4:	4640      	mov	r0, r8
 8009de6:	4649      	mov	r1, r9
 8009de8:	f7f6 fc62 	bl	80006b0 <__aeabi_dmul>
 8009dec:	2200      	movs	r2, #0
 8009dee:	4680      	mov	r8, r0
 8009df0:	4689      	mov	r9, r1
 8009df2:	4b5e      	ldr	r3, [pc, #376]	; (8009f6c <__ieee754_pow+0x734>)
 8009df4:	4620      	mov	r0, r4
 8009df6:	4629      	mov	r1, r5
 8009df8:	f7f6 faa6 	bl	8000348 <__aeabi_dsub>
 8009dfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e00:	f7f6 faa2 	bl	8000348 <__aeabi_dsub>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4630      	mov	r0, r6
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	f7f6 fa9c 	bl	8000348 <__aeabi_dsub>
 8009e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e14:	f7f6 fc4c 	bl	80006b0 <__aeabi_dmul>
 8009e18:	4622      	mov	r2, r4
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	460f      	mov	r7, r1
 8009e1e:	462b      	mov	r3, r5
 8009e20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e24:	f7f6 fc44 	bl	80006b0 <__aeabi_dmul>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	4639      	mov	r1, r7
 8009e30:	f7f6 fa8c 	bl	800034c <__adddf3>
 8009e34:	4606      	mov	r6, r0
 8009e36:	460f      	mov	r7, r1
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	4640      	mov	r0, r8
 8009e3e:	4649      	mov	r1, r9
 8009e40:	f7f6 fa84 	bl	800034c <__adddf3>
 8009e44:	9802      	ldr	r0, [sp, #8]
 8009e46:	a33c      	add	r3, pc, #240	; (adr r3, 8009f38 <__ieee754_pow+0x700>)
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	460d      	mov	r5, r1
 8009e50:	f7f6 fc2e 	bl	80006b0 <__aeabi_dmul>
 8009e54:	4642      	mov	r2, r8
 8009e56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e5a:	464b      	mov	r3, r9
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	4629      	mov	r1, r5
 8009e60:	f7f6 fa72 	bl	8000348 <__aeabi_dsub>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4630      	mov	r0, r6
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	f7f6 fa6c 	bl	8000348 <__aeabi_dsub>
 8009e70:	a333      	add	r3, pc, #204	; (adr r3, 8009f40 <__ieee754_pow+0x708>)
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	f7f6 fc1b 	bl	80006b0 <__aeabi_dmul>
 8009e7a:	a333      	add	r3, pc, #204	; (adr r3, 8009f48 <__ieee754_pow+0x710>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	4606      	mov	r6, r0
 8009e82:	460f      	mov	r7, r1
 8009e84:	4620      	mov	r0, r4
 8009e86:	4629      	mov	r1, r5
 8009e88:	f7f6 fc12 	bl	80006b0 <__aeabi_dmul>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	4630      	mov	r0, r6
 8009e92:	4639      	mov	r1, r7
 8009e94:	f7f6 fa5a 	bl	800034c <__adddf3>
 8009e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e9a:	4b35      	ldr	r3, [pc, #212]	; (8009f70 <__ieee754_pow+0x738>)
 8009e9c:	4413      	add	r3, r2
 8009e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea2:	f7f6 fa53 	bl	800034c <__adddf3>
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	9807      	ldr	r0, [sp, #28]
 8009eaa:	460d      	mov	r5, r1
 8009eac:	f7f6 fb9a 	bl	80005e4 <__aeabi_i2d>
 8009eb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009eb2:	4b30      	ldr	r3, [pc, #192]	; (8009f74 <__ieee754_pow+0x73c>)
 8009eb4:	4413      	add	r3, r2
 8009eb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009eba:	4606      	mov	r6, r0
 8009ebc:	460f      	mov	r7, r1
 8009ebe:	4622      	mov	r2, r4
 8009ec0:	462b      	mov	r3, r5
 8009ec2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ec6:	f7f6 fa41 	bl	800034c <__adddf3>
 8009eca:	4642      	mov	r2, r8
 8009ecc:	464b      	mov	r3, r9
 8009ece:	f7f6 fa3d 	bl	800034c <__adddf3>
 8009ed2:	4632      	mov	r2, r6
 8009ed4:	463b      	mov	r3, r7
 8009ed6:	f7f6 fa39 	bl	800034c <__adddf3>
 8009eda:	9802      	ldr	r0, [sp, #8]
 8009edc:	4632      	mov	r2, r6
 8009ede:	463b      	mov	r3, r7
 8009ee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ee4:	f7f6 fa30 	bl	8000348 <__aeabi_dsub>
 8009ee8:	4642      	mov	r2, r8
 8009eea:	464b      	mov	r3, r9
 8009eec:	f7f6 fa2c 	bl	8000348 <__aeabi_dsub>
 8009ef0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ef4:	e607      	b.n	8009b06 <__ieee754_pow+0x2ce>
 8009ef6:	f04f 0a01 	mov.w	sl, #1
 8009efa:	e6a5      	b.n	8009c48 <__ieee754_pow+0x410>
 8009efc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009f50 <__ieee754_pow+0x718>
 8009f00:	e613      	b.n	8009b2a <__ieee754_pow+0x2f2>
 8009f02:	bf00      	nop
 8009f04:	f3af 8000 	nop.w
 8009f08:	4a454eef 	.word	0x4a454eef
 8009f0c:	3fca7e28 	.word	0x3fca7e28
 8009f10:	93c9db65 	.word	0x93c9db65
 8009f14:	3fcd864a 	.word	0x3fcd864a
 8009f18:	a91d4101 	.word	0xa91d4101
 8009f1c:	3fd17460 	.word	0x3fd17460
 8009f20:	518f264d 	.word	0x518f264d
 8009f24:	3fd55555 	.word	0x3fd55555
 8009f28:	db6fabff 	.word	0xdb6fabff
 8009f2c:	3fdb6db6 	.word	0x3fdb6db6
 8009f30:	33333303 	.word	0x33333303
 8009f34:	3fe33333 	.word	0x3fe33333
 8009f38:	e0000000 	.word	0xe0000000
 8009f3c:	3feec709 	.word	0x3feec709
 8009f40:	dc3a03fd 	.word	0xdc3a03fd
 8009f44:	3feec709 	.word	0x3feec709
 8009f48:	145b01f5 	.word	0x145b01f5
 8009f4c:	be3e2fe0 	.word	0xbe3e2fe0
 8009f50:	00000000 	.word	0x00000000
 8009f54:	3ff00000 	.word	0x3ff00000
 8009f58:	43400000 	.word	0x43400000
 8009f5c:	0003988e 	.word	0x0003988e
 8009f60:	000bb679 	.word	0x000bb679
 8009f64:	0801ea30 	.word	0x0801ea30
 8009f68:	3ff00000 	.word	0x3ff00000
 8009f6c:	40080000 	.word	0x40080000
 8009f70:	0801ea50 	.word	0x0801ea50
 8009f74:	0801ea40 	.word	0x0801ea40
 8009f78:	a3b6      	add	r3, pc, #728	; (adr r3, 800a254 <__ieee754_pow+0xa1c>)
 8009f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7e:	4640      	mov	r0, r8
 8009f80:	4649      	mov	r1, r9
 8009f82:	f7f6 f9e3 	bl	800034c <__adddf3>
 8009f86:	4622      	mov	r2, r4
 8009f88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f8c:	462b      	mov	r3, r5
 8009f8e:	4630      	mov	r0, r6
 8009f90:	4639      	mov	r1, r7
 8009f92:	f7f6 f9d9 	bl	8000348 <__aeabi_dsub>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f9e:	f7f6 fe17 	bl	8000bd0 <__aeabi_dcmpgt>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	f47f adfe 	bne.w	8009ba4 <__ieee754_pow+0x36c>
 8009fa8:	4aa5      	ldr	r2, [pc, #660]	; (800a240 <__ieee754_pow+0xa08>)
 8009faa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	f340 810c 	ble.w	800a1cc <__ieee754_pow+0x994>
 8009fb4:	151b      	asrs	r3, r3, #20
 8009fb6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009fba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009fbe:	fa4a f303 	asr.w	r3, sl, r3
 8009fc2:	445b      	add	r3, fp
 8009fc4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009fc8:	4e9e      	ldr	r6, [pc, #632]	; (800a244 <__ieee754_pow+0xa0c>)
 8009fca:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009fce:	4116      	asrs	r6, r2
 8009fd0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	ea23 0106 	bic.w	r1, r3, r6
 8009fda:	f1c2 0214 	rsb	r2, r2, #20
 8009fde:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009fe2:	fa4a fa02 	asr.w	sl, sl, r2
 8009fe6:	f1bb 0f00 	cmp.w	fp, #0
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4620      	mov	r0, r4
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	bfb8      	it	lt
 8009ff4:	f1ca 0a00 	rsblt	sl, sl, #0
 8009ff8:	f7f6 f9a6 	bl	8000348 <__aeabi_dsub>
 8009ffc:	e9cd 0100 	strd	r0, r1, [sp]
 800a000:	4642      	mov	r2, r8
 800a002:	464b      	mov	r3, r9
 800a004:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a008:	f7f6 f9a0 	bl	800034c <__adddf3>
 800a00c:	2000      	movs	r0, #0
 800a00e:	a37a      	add	r3, pc, #488	; (adr r3, 800a1f8 <__ieee754_pow+0x9c0>)
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	4604      	mov	r4, r0
 800a016:	460d      	mov	r5, r1
 800a018:	f7f6 fb4a 	bl	80006b0 <__aeabi_dmul>
 800a01c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a020:	4606      	mov	r6, r0
 800a022:	460f      	mov	r7, r1
 800a024:	4620      	mov	r0, r4
 800a026:	4629      	mov	r1, r5
 800a028:	f7f6 f98e 	bl	8000348 <__aeabi_dsub>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	4640      	mov	r0, r8
 800a032:	4649      	mov	r1, r9
 800a034:	f7f6 f988 	bl	8000348 <__aeabi_dsub>
 800a038:	a371      	add	r3, pc, #452	; (adr r3, 800a200 <__ieee754_pow+0x9c8>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	f7f6 fb37 	bl	80006b0 <__aeabi_dmul>
 800a042:	a371      	add	r3, pc, #452	; (adr r3, 800a208 <__ieee754_pow+0x9d0>)
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	4680      	mov	r8, r0
 800a04a:	4689      	mov	r9, r1
 800a04c:	4620      	mov	r0, r4
 800a04e:	4629      	mov	r1, r5
 800a050:	f7f6 fb2e 	bl	80006b0 <__aeabi_dmul>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4640      	mov	r0, r8
 800a05a:	4649      	mov	r1, r9
 800a05c:	f7f6 f976 	bl	800034c <__adddf3>
 800a060:	4604      	mov	r4, r0
 800a062:	460d      	mov	r5, r1
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4630      	mov	r0, r6
 800a06a:	4639      	mov	r1, r7
 800a06c:	f7f6 f96e 	bl	800034c <__adddf3>
 800a070:	4632      	mov	r2, r6
 800a072:	463b      	mov	r3, r7
 800a074:	4680      	mov	r8, r0
 800a076:	4689      	mov	r9, r1
 800a078:	f7f6 f966 	bl	8000348 <__aeabi_dsub>
 800a07c:	4602      	mov	r2, r0
 800a07e:	460b      	mov	r3, r1
 800a080:	4620      	mov	r0, r4
 800a082:	4629      	mov	r1, r5
 800a084:	f7f6 f960 	bl	8000348 <__aeabi_dsub>
 800a088:	4642      	mov	r2, r8
 800a08a:	4606      	mov	r6, r0
 800a08c:	460f      	mov	r7, r1
 800a08e:	464b      	mov	r3, r9
 800a090:	4640      	mov	r0, r8
 800a092:	4649      	mov	r1, r9
 800a094:	f7f6 fb0c 	bl	80006b0 <__aeabi_dmul>
 800a098:	a35d      	add	r3, pc, #372	; (adr r3, 800a210 <__ieee754_pow+0x9d8>)
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	4604      	mov	r4, r0
 800a0a0:	460d      	mov	r5, r1
 800a0a2:	f7f6 fb05 	bl	80006b0 <__aeabi_dmul>
 800a0a6:	a35c      	add	r3, pc, #368	; (adr r3, 800a218 <__ieee754_pow+0x9e0>)
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	f7f6 f94c 	bl	8000348 <__aeabi_dsub>
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	462b      	mov	r3, r5
 800a0b4:	f7f6 fafc 	bl	80006b0 <__aeabi_dmul>
 800a0b8:	a359      	add	r3, pc, #356	; (adr r3, 800a220 <__ieee754_pow+0x9e8>)
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	f7f6 f945 	bl	800034c <__adddf3>
 800a0c2:	4622      	mov	r2, r4
 800a0c4:	462b      	mov	r3, r5
 800a0c6:	f7f6 faf3 	bl	80006b0 <__aeabi_dmul>
 800a0ca:	a357      	add	r3, pc, #348	; (adr r3, 800a228 <__ieee754_pow+0x9f0>)
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	f7f6 f93a 	bl	8000348 <__aeabi_dsub>
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	462b      	mov	r3, r5
 800a0d8:	f7f6 faea 	bl	80006b0 <__aeabi_dmul>
 800a0dc:	a354      	add	r3, pc, #336	; (adr r3, 800a230 <__ieee754_pow+0x9f8>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f7f6 f933 	bl	800034c <__adddf3>
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	462b      	mov	r3, r5
 800a0ea:	f7f6 fae1 	bl	80006b0 <__aeabi_dmul>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	f7f6 f927 	bl	8000348 <__aeabi_dsub>
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	460d      	mov	r5, r1
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	4640      	mov	r0, r8
 800a104:	4649      	mov	r1, r9
 800a106:	f7f6 fad3 	bl	80006b0 <__aeabi_dmul>
 800a10a:	2200      	movs	r2, #0
 800a10c:	e9cd 0100 	strd	r0, r1, [sp]
 800a110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a114:	4620      	mov	r0, r4
 800a116:	4629      	mov	r1, r5
 800a118:	f7f6 f916 	bl	8000348 <__aeabi_dsub>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a124:	f7f6 fbee 	bl	8000904 <__aeabi_ddiv>
 800a128:	4632      	mov	r2, r6
 800a12a:	4604      	mov	r4, r0
 800a12c:	460d      	mov	r5, r1
 800a12e:	463b      	mov	r3, r7
 800a130:	4640      	mov	r0, r8
 800a132:	4649      	mov	r1, r9
 800a134:	f7f6 fabc 	bl	80006b0 <__aeabi_dmul>
 800a138:	4632      	mov	r2, r6
 800a13a:	463b      	mov	r3, r7
 800a13c:	f7f6 f906 	bl	800034c <__adddf3>
 800a140:	4602      	mov	r2, r0
 800a142:	460b      	mov	r3, r1
 800a144:	4620      	mov	r0, r4
 800a146:	4629      	mov	r1, r5
 800a148:	f7f6 f8fe 	bl	8000348 <__aeabi_dsub>
 800a14c:	4642      	mov	r2, r8
 800a14e:	464b      	mov	r3, r9
 800a150:	f7f6 f8fa 	bl	8000348 <__aeabi_dsub>
 800a154:	4602      	mov	r2, r0
 800a156:	460b      	mov	r3, r1
 800a158:	2000      	movs	r0, #0
 800a15a:	493b      	ldr	r1, [pc, #236]	; (800a248 <__ieee754_pow+0xa10>)
 800a15c:	f7f6 f8f4 	bl	8000348 <__aeabi_dsub>
 800a160:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a164:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	da31      	bge.n	800a1d2 <__ieee754_pow+0x99a>
 800a16e:	4650      	mov	r0, sl
 800a170:	ec43 2b10 	vmov	d0, r2, r3
 800a174:	f000 fa0c 	bl	800a590 <scalbn>
 800a178:	ec51 0b10 	vmov	r0, r1, d0
 800a17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a180:	f7ff bbf1 	b.w	8009966 <__ieee754_pow+0x12e>
 800a184:	4b31      	ldr	r3, [pc, #196]	; (800a24c <__ieee754_pow+0xa14>)
 800a186:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a18a:	429e      	cmp	r6, r3
 800a18c:	f77f af0c 	ble.w	8009fa8 <__ieee754_pow+0x770>
 800a190:	4b2f      	ldr	r3, [pc, #188]	; (800a250 <__ieee754_pow+0xa18>)
 800a192:	440b      	add	r3, r1
 800a194:	4303      	orrs	r3, r0
 800a196:	d00b      	beq.n	800a1b0 <__ieee754_pow+0x978>
 800a198:	a327      	add	r3, pc, #156	; (adr r3, 800a238 <__ieee754_pow+0xa00>)
 800a19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1a2:	f7f6 fa85 	bl	80006b0 <__aeabi_dmul>
 800a1a6:	a324      	add	r3, pc, #144	; (adr r3, 800a238 <__ieee754_pow+0xa00>)
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	f7ff bbdb 	b.w	8009966 <__ieee754_pow+0x12e>
 800a1b0:	4622      	mov	r2, r4
 800a1b2:	462b      	mov	r3, r5
 800a1b4:	f7f6 f8c8 	bl	8000348 <__aeabi_dsub>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	4640      	mov	r0, r8
 800a1be:	4649      	mov	r1, r9
 800a1c0:	f7f6 fcf2 	bl	8000ba8 <__aeabi_dcmple>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	f43f aeef 	beq.w	8009fa8 <__ieee754_pow+0x770>
 800a1ca:	e7e5      	b.n	800a198 <__ieee754_pow+0x960>
 800a1cc:	f04f 0a00 	mov.w	sl, #0
 800a1d0:	e716      	b.n	800a000 <__ieee754_pow+0x7c8>
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	e7d2      	b.n	800a17c <__ieee754_pow+0x944>
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	491b      	ldr	r1, [pc, #108]	; (800a248 <__ieee754_pow+0xa10>)
 800a1da:	f7ff bb8d 	b.w	80098f8 <__ieee754_pow+0xc0>
 800a1de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1e2:	f7ff bb89 	b.w	80098f8 <__ieee754_pow+0xc0>
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	f7ff bb85 	b.w	80098f8 <__ieee754_pow+0xc0>
 800a1ee:	4693      	mov	fp, r2
 800a1f0:	f7ff bb96 	b.w	8009920 <__ieee754_pow+0xe8>
 800a1f4:	f3af 8000 	nop.w
 800a1f8:	00000000 	.word	0x00000000
 800a1fc:	3fe62e43 	.word	0x3fe62e43
 800a200:	fefa39ef 	.word	0xfefa39ef
 800a204:	3fe62e42 	.word	0x3fe62e42
 800a208:	0ca86c39 	.word	0x0ca86c39
 800a20c:	be205c61 	.word	0xbe205c61
 800a210:	72bea4d0 	.word	0x72bea4d0
 800a214:	3e663769 	.word	0x3e663769
 800a218:	c5d26bf1 	.word	0xc5d26bf1
 800a21c:	3ebbbd41 	.word	0x3ebbbd41
 800a220:	af25de2c 	.word	0xaf25de2c
 800a224:	3f11566a 	.word	0x3f11566a
 800a228:	16bebd93 	.word	0x16bebd93
 800a22c:	3f66c16c 	.word	0x3f66c16c
 800a230:	5555553e 	.word	0x5555553e
 800a234:	3fc55555 	.word	0x3fc55555
 800a238:	c2f8f359 	.word	0xc2f8f359
 800a23c:	01a56e1f 	.word	0x01a56e1f
 800a240:	3fe00000 	.word	0x3fe00000
 800a244:	000fffff 	.word	0x000fffff
 800a248:	3ff00000 	.word	0x3ff00000
 800a24c:	4090cbff 	.word	0x4090cbff
 800a250:	3f6f3400 	.word	0x3f6f3400
 800a254:	652b82fe 	.word	0x652b82fe
 800a258:	3c971547 	.word	0x3c971547

0800a25c <__ieee754_sqrt>:
 800a25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a260:	ec55 4b10 	vmov	r4, r5, d0
 800a264:	4e54      	ldr	r6, [pc, #336]	; (800a3b8 <__ieee754_sqrt+0x15c>)
 800a266:	43ae      	bics	r6, r5
 800a268:	ee10 0a10 	vmov	r0, s0
 800a26c:	462b      	mov	r3, r5
 800a26e:	462a      	mov	r2, r5
 800a270:	4621      	mov	r1, r4
 800a272:	d113      	bne.n	800a29c <__ieee754_sqrt+0x40>
 800a274:	ee10 2a10 	vmov	r2, s0
 800a278:	462b      	mov	r3, r5
 800a27a:	ee10 0a10 	vmov	r0, s0
 800a27e:	4629      	mov	r1, r5
 800a280:	f7f6 fa16 	bl	80006b0 <__aeabi_dmul>
 800a284:	4602      	mov	r2, r0
 800a286:	460b      	mov	r3, r1
 800a288:	4620      	mov	r0, r4
 800a28a:	4629      	mov	r1, r5
 800a28c:	f7f6 f85e 	bl	800034c <__adddf3>
 800a290:	4604      	mov	r4, r0
 800a292:	460d      	mov	r5, r1
 800a294:	ec45 4b10 	vmov	d0, r4, r5
 800a298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a29c:	2d00      	cmp	r5, #0
 800a29e:	dc10      	bgt.n	800a2c2 <__ieee754_sqrt+0x66>
 800a2a0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a2a4:	4330      	orrs	r0, r6
 800a2a6:	d0f5      	beq.n	800a294 <__ieee754_sqrt+0x38>
 800a2a8:	b15d      	cbz	r5, 800a2c2 <__ieee754_sqrt+0x66>
 800a2aa:	ee10 2a10 	vmov	r2, s0
 800a2ae:	462b      	mov	r3, r5
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	f7f6 f848 	bl	8000348 <__aeabi_dsub>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	f7f6 fb22 	bl	8000904 <__aeabi_ddiv>
 800a2c0:	e7e6      	b.n	800a290 <__ieee754_sqrt+0x34>
 800a2c2:	151b      	asrs	r3, r3, #20
 800a2c4:	d10c      	bne.n	800a2e0 <__ieee754_sqrt+0x84>
 800a2c6:	2a00      	cmp	r2, #0
 800a2c8:	d06d      	beq.n	800a3a6 <__ieee754_sqrt+0x14a>
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	02d6      	lsls	r6, r2, #11
 800a2ce:	d56e      	bpl.n	800a3ae <__ieee754_sqrt+0x152>
 800a2d0:	1e44      	subs	r4, r0, #1
 800a2d2:	1b1b      	subs	r3, r3, r4
 800a2d4:	f1c0 0420 	rsb	r4, r0, #32
 800a2d8:	fa21 f404 	lsr.w	r4, r1, r4
 800a2dc:	4322      	orrs	r2, r4
 800a2de:	4081      	lsls	r1, r0
 800a2e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a2e4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a2e8:	07dd      	lsls	r5, r3, #31
 800a2ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a2ee:	bf42      	ittt	mi
 800a2f0:	0052      	lslmi	r2, r2, #1
 800a2f2:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800a2f6:	0049      	lslmi	r1, r1, #1
 800a2f8:	1058      	asrs	r0, r3, #1
 800a2fa:	2500      	movs	r5, #0
 800a2fc:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 800a300:	441a      	add	r2, r3
 800a302:	0049      	lsls	r1, r1, #1
 800a304:	2316      	movs	r3, #22
 800a306:	462c      	mov	r4, r5
 800a308:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a30c:	19a7      	adds	r7, r4, r6
 800a30e:	4297      	cmp	r7, r2
 800a310:	bfde      	ittt	le
 800a312:	1bd2      	suble	r2, r2, r7
 800a314:	19bc      	addle	r4, r7, r6
 800a316:	19ad      	addle	r5, r5, r6
 800a318:	0052      	lsls	r2, r2, #1
 800a31a:	3b01      	subs	r3, #1
 800a31c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a320:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a324:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a328:	d1f0      	bne.n	800a30c <__ieee754_sqrt+0xb0>
 800a32a:	f04f 0e20 	mov.w	lr, #32
 800a32e:	469c      	mov	ip, r3
 800a330:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a334:	42a2      	cmp	r2, r4
 800a336:	eb06 070c 	add.w	r7, r6, ip
 800a33a:	dc02      	bgt.n	800a342 <__ieee754_sqrt+0xe6>
 800a33c:	d112      	bne.n	800a364 <__ieee754_sqrt+0x108>
 800a33e:	428f      	cmp	r7, r1
 800a340:	d810      	bhi.n	800a364 <__ieee754_sqrt+0x108>
 800a342:	2f00      	cmp	r7, #0
 800a344:	eb07 0c06 	add.w	ip, r7, r6
 800a348:	da34      	bge.n	800a3b4 <__ieee754_sqrt+0x158>
 800a34a:	f1bc 0f00 	cmp.w	ip, #0
 800a34e:	db31      	blt.n	800a3b4 <__ieee754_sqrt+0x158>
 800a350:	f104 0801 	add.w	r8, r4, #1
 800a354:	1b12      	subs	r2, r2, r4
 800a356:	428f      	cmp	r7, r1
 800a358:	bf88      	it	hi
 800a35a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a35e:	1bc9      	subs	r1, r1, r7
 800a360:	4433      	add	r3, r6
 800a362:	4644      	mov	r4, r8
 800a364:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800a368:	f1be 0e01 	subs.w	lr, lr, #1
 800a36c:	443a      	add	r2, r7
 800a36e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a372:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a376:	d1dd      	bne.n	800a334 <__ieee754_sqrt+0xd8>
 800a378:	430a      	orrs	r2, r1
 800a37a:	d006      	beq.n	800a38a <__ieee754_sqrt+0x12e>
 800a37c:	1c5c      	adds	r4, r3, #1
 800a37e:	bf13      	iteet	ne
 800a380:	3301      	addne	r3, #1
 800a382:	3501      	addeq	r5, #1
 800a384:	4673      	moveq	r3, lr
 800a386:	f023 0301 	bicne.w	r3, r3, #1
 800a38a:	106a      	asrs	r2, r5, #1
 800a38c:	085b      	lsrs	r3, r3, #1
 800a38e:	07e9      	lsls	r1, r5, #31
 800a390:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a394:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a398:	bf48      	it	mi
 800a39a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a39e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a3a2:	461c      	mov	r4, r3
 800a3a4:	e776      	b.n	800a294 <__ieee754_sqrt+0x38>
 800a3a6:	0aca      	lsrs	r2, r1, #11
 800a3a8:	3b15      	subs	r3, #21
 800a3aa:	0549      	lsls	r1, r1, #21
 800a3ac:	e78b      	b.n	800a2c6 <__ieee754_sqrt+0x6a>
 800a3ae:	0052      	lsls	r2, r2, #1
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	e78b      	b.n	800a2cc <__ieee754_sqrt+0x70>
 800a3b4:	46a0      	mov	r8, r4
 800a3b6:	e7cd      	b.n	800a354 <__ieee754_sqrt+0xf8>
 800a3b8:	7ff00000 	.word	0x7ff00000

0800a3bc <__ieee754_sqrtf>:
 800a3bc:	ee10 2a10 	vmov	r2, s0
 800a3c0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a3c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	d302      	bcc.n	800a3d2 <__ieee754_sqrtf+0x16>
 800a3cc:	eea0 0a00 	vfma.f32	s0, s0, s0
 800a3d0:	bd70      	pop	{r4, r5, r6, pc}
 800a3d2:	b3b1      	cbz	r1, 800a442 <__ieee754_sqrtf+0x86>
 800a3d4:	2a00      	cmp	r2, #0
 800a3d6:	da04      	bge.n	800a3e2 <__ieee754_sqrtf+0x26>
 800a3d8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a3dc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a3e0:	bd70      	pop	{r4, r5, r6, pc}
 800a3e2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a3e6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800a3ea:	d204      	bcs.n	800a3f6 <__ieee754_sqrtf+0x3a>
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	0210      	lsls	r0, r2, #8
 800a3f0:	d528      	bpl.n	800a444 <__ieee754_sqrtf+0x88>
 800a3f2:	3901      	subs	r1, #1
 800a3f4:	1a5b      	subs	r3, r3, r1
 800a3f6:	3b7f      	subs	r3, #127	; 0x7f
 800a3f8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a3fc:	07d9      	lsls	r1, r3, #31
 800a3fe:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a402:	bf48      	it	mi
 800a404:	0052      	lslmi	r2, r2, #1
 800a406:	1059      	asrs	r1, r3, #1
 800a408:	2300      	movs	r3, #0
 800a40a:	0052      	lsls	r2, r2, #1
 800a40c:	2419      	movs	r4, #25
 800a40e:	461e      	mov	r6, r3
 800a410:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a414:	1835      	adds	r5, r6, r0
 800a416:	4295      	cmp	r5, r2
 800a418:	bfde      	ittt	le
 800a41a:	182e      	addle	r6, r5, r0
 800a41c:	1b52      	suble	r2, r2, r5
 800a41e:	181b      	addle	r3, r3, r0
 800a420:	3c01      	subs	r4, #1
 800a422:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a426:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a42a:	d1f3      	bne.n	800a414 <__ieee754_sqrtf+0x58>
 800a42c:	b112      	cbz	r2, 800a434 <__ieee754_sqrtf+0x78>
 800a42e:	3301      	adds	r3, #1
 800a430:	f023 0301 	bic.w	r3, r3, #1
 800a434:	105b      	asrs	r3, r3, #1
 800a436:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 800a43a:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 800a43e:	ee00 3a10 	vmov	s0, r3
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	0052      	lsls	r2, r2, #1
 800a446:	3101      	adds	r1, #1
 800a448:	e7d1      	b.n	800a3ee <__ieee754_sqrtf+0x32>

0800a44a <fabs>:
 800a44a:	ec53 2b10 	vmov	r2, r3, d0
 800a44e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a452:	ec43 2b10 	vmov	d0, r2, r3
 800a456:	4770      	bx	lr

0800a458 <finite>:
 800a458:	ee10 3a90 	vmov	r3, s1
 800a45c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a460:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a464:	0fc0      	lsrs	r0, r0, #31
 800a466:	4770      	bx	lr

0800a468 <matherr>:
 800a468:	2000      	movs	r0, #0
 800a46a:	4770      	bx	lr
 800a46c:	0000      	movs	r0, r0
	...

0800a470 <nan>:
 800a470:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a478 <nan+0x8>
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	00000000 	.word	0x00000000
 800a47c:	7ff80000 	.word	0x7ff80000

0800a480 <rint>:
 800a480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a482:	ec51 0b10 	vmov	r0, r1, d0
 800a486:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a48a:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800a48e:	2e13      	cmp	r6, #19
 800a490:	ee10 7a10 	vmov	r7, s0
 800a494:	460b      	mov	r3, r1
 800a496:	4602      	mov	r2, r0
 800a498:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a49c:	dc58      	bgt.n	800a550 <rint+0xd0>
 800a49e:	2e00      	cmp	r6, #0
 800a4a0:	da2b      	bge.n	800a4fa <rint+0x7a>
 800a4a2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a4a6:	4302      	orrs	r2, r0
 800a4a8:	d023      	beq.n	800a4f2 <rint+0x72>
 800a4aa:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a4ae:	4302      	orrs	r2, r0
 800a4b0:	4251      	negs	r1, r2
 800a4b2:	4311      	orrs	r1, r2
 800a4b4:	0b09      	lsrs	r1, r1, #12
 800a4b6:	0c5b      	lsrs	r3, r3, #17
 800a4b8:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800a4bc:	045b      	lsls	r3, r3, #17
 800a4be:	ea41 0703 	orr.w	r7, r1, r3
 800a4c2:	4b31      	ldr	r3, [pc, #196]	; (800a588 <rint+0x108>)
 800a4c4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a4c8:	4639      	mov	r1, r7
 800a4ca:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a4ce:	ee10 0a10 	vmov	r0, s0
 800a4d2:	4632      	mov	r2, r6
 800a4d4:	463b      	mov	r3, r7
 800a4d6:	f7f5 ff39 	bl	800034c <__adddf3>
 800a4da:	e9cd 0100 	strd	r0, r1, [sp]
 800a4de:	463b      	mov	r3, r7
 800a4e0:	4632      	mov	r2, r6
 800a4e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4e6:	f7f5 ff2f 	bl	8000348 <__aeabi_dsub>
 800a4ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a4ee:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800a4f2:	ec41 0b10 	vmov	d0, r0, r1
 800a4f6:	b003      	add	sp, #12
 800a4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4fa:	4c24      	ldr	r4, [pc, #144]	; (800a58c <rint+0x10c>)
 800a4fc:	4134      	asrs	r4, r6
 800a4fe:	ea01 0704 	and.w	r7, r1, r4
 800a502:	4307      	orrs	r7, r0
 800a504:	d0f5      	beq.n	800a4f2 <rint+0x72>
 800a506:	0861      	lsrs	r1, r4, #1
 800a508:	ea03 0001 	and.w	r0, r3, r1
 800a50c:	4302      	orrs	r2, r0
 800a50e:	d00b      	beq.n	800a528 <rint+0xa8>
 800a510:	ea23 0101 	bic.w	r1, r3, r1
 800a514:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a518:	2e13      	cmp	r6, #19
 800a51a:	fa43 f306 	asr.w	r3, r3, r6
 800a51e:	bf0c      	ite	eq
 800a520:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800a524:	2200      	movne	r2, #0
 800a526:	430b      	orrs	r3, r1
 800a528:	4619      	mov	r1, r3
 800a52a:	4b17      	ldr	r3, [pc, #92]	; (800a588 <rint+0x108>)
 800a52c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a530:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a534:	4610      	mov	r0, r2
 800a536:	462b      	mov	r3, r5
 800a538:	4622      	mov	r2, r4
 800a53a:	f7f5 ff07 	bl	800034c <__adddf3>
 800a53e:	e9cd 0100 	strd	r0, r1, [sp]
 800a542:	4622      	mov	r2, r4
 800a544:	462b      	mov	r3, r5
 800a546:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a54a:	f7f5 fefd 	bl	8000348 <__aeabi_dsub>
 800a54e:	e7d0      	b.n	800a4f2 <rint+0x72>
 800a550:	2e33      	cmp	r6, #51	; 0x33
 800a552:	dd08      	ble.n	800a566 <rint+0xe6>
 800a554:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a558:	d1cb      	bne.n	800a4f2 <rint+0x72>
 800a55a:	ee10 2a10 	vmov	r2, s0
 800a55e:	460b      	mov	r3, r1
 800a560:	f7f5 fef4 	bl	800034c <__adddf3>
 800a564:	e7c5      	b.n	800a4f2 <rint+0x72>
 800a566:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800a56a:	f04f 34ff 	mov.w	r4, #4294967295
 800a56e:	40f4      	lsrs	r4, r6
 800a570:	4220      	tst	r0, r4
 800a572:	d0be      	beq.n	800a4f2 <rint+0x72>
 800a574:	0861      	lsrs	r1, r4, #1
 800a576:	420f      	tst	r7, r1
 800a578:	bf1f      	itttt	ne
 800a57a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800a57e:	ea27 0101 	bicne.w	r1, r7, r1
 800a582:	4132      	asrne	r2, r6
 800a584:	430a      	orrne	r2, r1
 800a586:	e7cf      	b.n	800a528 <rint+0xa8>
 800a588:	0801ea60 	.word	0x0801ea60
 800a58c:	000fffff 	.word	0x000fffff

0800a590 <scalbn>:
 800a590:	b570      	push	{r4, r5, r6, lr}
 800a592:	ec55 4b10 	vmov	r4, r5, d0
 800a596:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a59a:	4606      	mov	r6, r0
 800a59c:	462b      	mov	r3, r5
 800a59e:	b9b2      	cbnz	r2, 800a5ce <scalbn+0x3e>
 800a5a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a5a4:	4323      	orrs	r3, r4
 800a5a6:	d03c      	beq.n	800a622 <scalbn+0x92>
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	4b33      	ldr	r3, [pc, #204]	; (800a678 <scalbn+0xe8>)
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	ee10 0a10 	vmov	r0, s0
 800a5b2:	f7f6 f87d 	bl	80006b0 <__aeabi_dmul>
 800a5b6:	4a31      	ldr	r2, [pc, #196]	; (800a67c <scalbn+0xec>)
 800a5b8:	4296      	cmp	r6, r2
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	460d      	mov	r5, r1
 800a5be:	460b      	mov	r3, r1
 800a5c0:	da13      	bge.n	800a5ea <scalbn+0x5a>
 800a5c2:	a329      	add	r3, pc, #164	; (adr r3, 800a668 <scalbn+0xd8>)
 800a5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c8:	f7f6 f872 	bl	80006b0 <__aeabi_dmul>
 800a5cc:	e00a      	b.n	800a5e4 <scalbn+0x54>
 800a5ce:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a5d2:	428a      	cmp	r2, r1
 800a5d4:	d10c      	bne.n	800a5f0 <scalbn+0x60>
 800a5d6:	ee10 2a10 	vmov	r2, s0
 800a5da:	462b      	mov	r3, r5
 800a5dc:	4620      	mov	r0, r4
 800a5de:	4629      	mov	r1, r5
 800a5e0:	f7f5 feb4 	bl	800034c <__adddf3>
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	460d      	mov	r5, r1
 800a5e8:	e01b      	b.n	800a622 <scalbn+0x92>
 800a5ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a5ee:	3a36      	subs	r2, #54	; 0x36
 800a5f0:	4432      	add	r2, r6
 800a5f2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a5f6:	428a      	cmp	r2, r1
 800a5f8:	dd0b      	ble.n	800a612 <scalbn+0x82>
 800a5fa:	ec45 4b11 	vmov	d1, r4, r5
 800a5fe:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800a670 <scalbn+0xe0>
 800a602:	f000 fa19 	bl	800aa38 <copysign>
 800a606:	a31a      	add	r3, pc, #104	; (adr r3, 800a670 <scalbn+0xe0>)
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	ec51 0b10 	vmov	r0, r1, d0
 800a610:	e7da      	b.n	800a5c8 <scalbn+0x38>
 800a612:	2a00      	cmp	r2, #0
 800a614:	dd08      	ble.n	800a628 <scalbn+0x98>
 800a616:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a61a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a61e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a622:	ec45 4b10 	vmov	d0, r4, r5
 800a626:	bd70      	pop	{r4, r5, r6, pc}
 800a628:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a62c:	da0d      	bge.n	800a64a <scalbn+0xba>
 800a62e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a632:	429e      	cmp	r6, r3
 800a634:	ec45 4b11 	vmov	d1, r4, r5
 800a638:	dce1      	bgt.n	800a5fe <scalbn+0x6e>
 800a63a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800a668 <scalbn+0xd8>
 800a63e:	f000 f9fb 	bl	800aa38 <copysign>
 800a642:	a309      	add	r3, pc, #36	; (adr r3, 800a668 <scalbn+0xd8>)
 800a644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a648:	e7e0      	b.n	800a60c <scalbn+0x7c>
 800a64a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a64e:	3236      	adds	r2, #54	; 0x36
 800a650:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a654:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a658:	4620      	mov	r0, r4
 800a65a:	4629      	mov	r1, r5
 800a65c:	2200      	movs	r2, #0
 800a65e:	4b08      	ldr	r3, [pc, #32]	; (800a680 <scalbn+0xf0>)
 800a660:	e7b2      	b.n	800a5c8 <scalbn+0x38>
 800a662:	bf00      	nop
 800a664:	f3af 8000 	nop.w
 800a668:	c2f8f359 	.word	0xc2f8f359
 800a66c:	01a56e1f 	.word	0x01a56e1f
 800a670:	8800759c 	.word	0x8800759c
 800a674:	7e37e43c 	.word	0x7e37e43c
 800a678:	43500000 	.word	0x43500000
 800a67c:	ffff3cb0 	.word	0xffff3cb0
 800a680:	3c900000 	.word	0x3c900000
 800a684:	00000000 	.word	0x00000000

0800a688 <__ieee754_log>:
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	ec51 0b10 	vmov	r0, r1, d0
 800a690:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a694:	b087      	sub	sp, #28
 800a696:	ee10 3a10 	vmov	r3, s0
 800a69a:	460d      	mov	r5, r1
 800a69c:	da27      	bge.n	800a6ee <__ieee754_log+0x66>
 800a69e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	d10a      	bne.n	800a6bc <__ieee754_log+0x34>
 800a6a6:	49cc      	ldr	r1, [pc, #816]	; (800a9d8 <__ieee754_log+0x350>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	f7f6 f929 	bl	8000904 <__aeabi_ddiv>
 800a6b2:	ec41 0b10 	vmov	d0, r0, r1
 800a6b6:	b007      	add	sp, #28
 800a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6bc:	2900      	cmp	r1, #0
 800a6be:	da07      	bge.n	800a6d0 <__ieee754_log+0x48>
 800a6c0:	ee10 2a10 	vmov	r2, s0
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	f7f5 fe3f 	bl	8000348 <__aeabi_dsub>
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	e7ee      	b.n	800a6ae <__ieee754_log+0x26>
 800a6d0:	4bc2      	ldr	r3, [pc, #776]	; (800a9dc <__ieee754_log+0x354>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f7f5 ffec 	bl	80006b0 <__aeabi_dmul>
 800a6d8:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a6dc:	460d      	mov	r5, r1
 800a6de:	4ac0      	ldr	r2, [pc, #768]	; (800a9e0 <__ieee754_log+0x358>)
 800a6e0:	4295      	cmp	r5, r2
 800a6e2:	dd06      	ble.n	800a6f2 <__ieee754_log+0x6a>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	f7f5 fe30 	bl	800034c <__adddf3>
 800a6ec:	e7e1      	b.n	800a6b2 <__ieee754_log+0x2a>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	e7f5      	b.n	800a6de <__ieee754_log+0x56>
 800a6f2:	152c      	asrs	r4, r5, #20
 800a6f4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a6f8:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a6fc:	441c      	add	r4, r3
 800a6fe:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800a702:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800a706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a70a:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800a70e:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800a712:	ea42 0105 	orr.w	r1, r2, r5
 800a716:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a71a:	2200      	movs	r2, #0
 800a71c:	4bb1      	ldr	r3, [pc, #708]	; (800a9e4 <__ieee754_log+0x35c>)
 800a71e:	f7f5 fe13 	bl	8000348 <__aeabi_dsub>
 800a722:	1cab      	adds	r3, r5, #2
 800a724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a728:	2b02      	cmp	r3, #2
 800a72a:	4682      	mov	sl, r0
 800a72c:	468b      	mov	fp, r1
 800a72e:	f04f 0200 	mov.w	r2, #0
 800a732:	dc5b      	bgt.n	800a7ec <__ieee754_log+0x164>
 800a734:	2300      	movs	r3, #0
 800a736:	f7f6 fa23 	bl	8000b80 <__aeabi_dcmpeq>
 800a73a:	b1d0      	cbz	r0, 800a772 <__ieee754_log+0xea>
 800a73c:	2c00      	cmp	r4, #0
 800a73e:	f000 8170 	beq.w	800aa22 <__ieee754_log+0x39a>
 800a742:	4620      	mov	r0, r4
 800a744:	f7f5 ff4e 	bl	80005e4 <__aeabi_i2d>
 800a748:	a38f      	add	r3, pc, #572	; (adr r3, 800a988 <__ieee754_log+0x300>)
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	4606      	mov	r6, r0
 800a750:	460f      	mov	r7, r1
 800a752:	f7f5 ffad 	bl	80006b0 <__aeabi_dmul>
 800a756:	a38e      	add	r3, pc, #568	; (adr r3, 800a990 <__ieee754_log+0x308>)
 800a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75c:	4604      	mov	r4, r0
 800a75e:	460d      	mov	r5, r1
 800a760:	4630      	mov	r0, r6
 800a762:	4639      	mov	r1, r7
 800a764:	f7f5 ffa4 	bl	80006b0 <__aeabi_dmul>
 800a768:	4602      	mov	r2, r0
 800a76a:	460b      	mov	r3, r1
 800a76c:	4620      	mov	r0, r4
 800a76e:	4629      	mov	r1, r5
 800a770:	e7ba      	b.n	800a6e8 <__ieee754_log+0x60>
 800a772:	a389      	add	r3, pc, #548	; (adr r3, 800a998 <__ieee754_log+0x310>)
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	4650      	mov	r0, sl
 800a77a:	4659      	mov	r1, fp
 800a77c:	f7f5 ff98 	bl	80006b0 <__aeabi_dmul>
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	2000      	movs	r0, #0
 800a786:	4998      	ldr	r1, [pc, #608]	; (800a9e8 <__ieee754_log+0x360>)
 800a788:	f7f5 fdde 	bl	8000348 <__aeabi_dsub>
 800a78c:	4652      	mov	r2, sl
 800a78e:	4606      	mov	r6, r0
 800a790:	460f      	mov	r7, r1
 800a792:	465b      	mov	r3, fp
 800a794:	4650      	mov	r0, sl
 800a796:	4659      	mov	r1, fp
 800a798:	f7f5 ff8a 	bl	80006b0 <__aeabi_dmul>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	4639      	mov	r1, r7
 800a7a4:	f7f5 ff84 	bl	80006b0 <__aeabi_dmul>
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	460f      	mov	r7, r1
 800a7ac:	b934      	cbnz	r4, 800a7bc <__ieee754_log+0x134>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4650      	mov	r0, sl
 800a7b4:	4659      	mov	r1, fp
 800a7b6:	f7f5 fdc7 	bl	8000348 <__aeabi_dsub>
 800a7ba:	e77a      	b.n	800a6b2 <__ieee754_log+0x2a>
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f7f5 ff11 	bl	80005e4 <__aeabi_i2d>
 800a7c2:	a371      	add	r3, pc, #452	; (adr r3, 800a988 <__ieee754_log+0x300>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	4680      	mov	r8, r0
 800a7ca:	4689      	mov	r9, r1
 800a7cc:	f7f5 ff70 	bl	80006b0 <__aeabi_dmul>
 800a7d0:	a36f      	add	r3, pc, #444	; (adr r3, 800a990 <__ieee754_log+0x308>)
 800a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	460d      	mov	r5, r1
 800a7da:	4640      	mov	r0, r8
 800a7dc:	4649      	mov	r1, r9
 800a7de:	f7f5 ff67 	bl	80006b0 <__aeabi_dmul>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	e0b2      	b.n	800a952 <__ieee754_log+0x2ca>
 800a7ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a7f0:	f7f5 fdac 	bl	800034c <__adddf3>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4650      	mov	r0, sl
 800a7fa:	4659      	mov	r1, fp
 800a7fc:	f7f6 f882 	bl	8000904 <__aeabi_ddiv>
 800a800:	e9cd 0100 	strd	r0, r1, [sp]
 800a804:	4620      	mov	r0, r4
 800a806:	f7f5 feed 	bl	80005e4 <__aeabi_i2d>
 800a80a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a80e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a812:	4610      	mov	r0, r2
 800a814:	4619      	mov	r1, r3
 800a816:	f7f5 ff4b 	bl	80006b0 <__aeabi_dmul>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a822:	f7f5 ff45 	bl	80006b0 <__aeabi_dmul>
 800a826:	a35e      	add	r3, pc, #376	; (adr r3, 800a9a0 <__ieee754_log+0x318>)
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	4606      	mov	r6, r0
 800a82e:	460f      	mov	r7, r1
 800a830:	f7f5 ff3e 	bl	80006b0 <__aeabi_dmul>
 800a834:	a35c      	add	r3, pc, #368	; (adr r3, 800a9a8 <__ieee754_log+0x320>)
 800a836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83a:	f7f5 fd87 	bl	800034c <__adddf3>
 800a83e:	4632      	mov	r2, r6
 800a840:	463b      	mov	r3, r7
 800a842:	f7f5 ff35 	bl	80006b0 <__aeabi_dmul>
 800a846:	a35a      	add	r3, pc, #360	; (adr r3, 800a9b0 <__ieee754_log+0x328>)
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	f7f5 fd7e 	bl	800034c <__adddf3>
 800a850:	4632      	mov	r2, r6
 800a852:	463b      	mov	r3, r7
 800a854:	f7f5 ff2c 	bl	80006b0 <__aeabi_dmul>
 800a858:	a357      	add	r3, pc, #348	; (adr r3, 800a9b8 <__ieee754_log+0x330>)
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	f7f5 fd75 	bl	800034c <__adddf3>
 800a862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a866:	f7f5 ff23 	bl	80006b0 <__aeabi_dmul>
 800a86a:	a355      	add	r3, pc, #340	; (adr r3, 800a9c0 <__ieee754_log+0x338>)
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a874:	4630      	mov	r0, r6
 800a876:	4639      	mov	r1, r7
 800a878:	f7f5 ff1a 	bl	80006b0 <__aeabi_dmul>
 800a87c:	a352      	add	r3, pc, #328	; (adr r3, 800a9c8 <__ieee754_log+0x340>)
 800a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a882:	f7f5 fd63 	bl	800034c <__adddf3>
 800a886:	4632      	mov	r2, r6
 800a888:	463b      	mov	r3, r7
 800a88a:	f7f5 ff11 	bl	80006b0 <__aeabi_dmul>
 800a88e:	a350      	add	r3, pc, #320	; (adr r3, 800a9d0 <__ieee754_log+0x348>)
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	f7f5 fd5a 	bl	800034c <__adddf3>
 800a898:	4632      	mov	r2, r6
 800a89a:	463b      	mov	r3, r7
 800a89c:	f7f5 ff08 	bl	80006b0 <__aeabi_dmul>
 800a8a0:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a8ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8b0:	f7f5 fd4c 	bl	800034c <__adddf3>
 800a8b4:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 800a8b8:	3551      	adds	r5, #81	; 0x51
 800a8ba:	ea45 0508 	orr.w	r5, r5, r8
 800a8be:	2d00      	cmp	r5, #0
 800a8c0:	4606      	mov	r6, r0
 800a8c2:	460f      	mov	r7, r1
 800a8c4:	dd50      	ble.n	800a968 <__ieee754_log+0x2e0>
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	4b47      	ldr	r3, [pc, #284]	; (800a9e8 <__ieee754_log+0x360>)
 800a8ca:	4650      	mov	r0, sl
 800a8cc:	4659      	mov	r1, fp
 800a8ce:	f7f5 feef 	bl	80006b0 <__aeabi_dmul>
 800a8d2:	4652      	mov	r2, sl
 800a8d4:	465b      	mov	r3, fp
 800a8d6:	f7f5 feeb 	bl	80006b0 <__aeabi_dmul>
 800a8da:	4680      	mov	r8, r0
 800a8dc:	4689      	mov	r9, r1
 800a8de:	b994      	cbnz	r4, 800a906 <__ieee754_log+0x27e>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	4639      	mov	r1, r7
 800a8e8:	f7f5 fd30 	bl	800034c <__adddf3>
 800a8ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8f0:	f7f5 fede 	bl	80006b0 <__aeabi_dmul>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4640      	mov	r0, r8
 800a8fa:	4649      	mov	r1, r9
 800a8fc:	f7f5 fd24 	bl	8000348 <__aeabi_dsub>
 800a900:	4602      	mov	r2, r0
 800a902:	460b      	mov	r3, r1
 800a904:	e755      	b.n	800a7b2 <__ieee754_log+0x12a>
 800a906:	a320      	add	r3, pc, #128	; (adr r3, 800a988 <__ieee754_log+0x300>)
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a910:	f7f5 fece 	bl	80006b0 <__aeabi_dmul>
 800a914:	4642      	mov	r2, r8
 800a916:	464b      	mov	r3, r9
 800a918:	4604      	mov	r4, r0
 800a91a:	460d      	mov	r5, r1
 800a91c:	4630      	mov	r0, r6
 800a91e:	4639      	mov	r1, r7
 800a920:	f7f5 fd14 	bl	800034c <__adddf3>
 800a924:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a928:	f7f5 fec2 	bl	80006b0 <__aeabi_dmul>
 800a92c:	a318      	add	r3, pc, #96	; (adr r3, 800a990 <__ieee754_log+0x308>)
 800a92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a932:	4606      	mov	r6, r0
 800a934:	460f      	mov	r7, r1
 800a936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a93a:	f7f5 feb9 	bl	80006b0 <__aeabi_dmul>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	4630      	mov	r0, r6
 800a944:	4639      	mov	r1, r7
 800a946:	f7f5 fd01 	bl	800034c <__adddf3>
 800a94a:	4602      	mov	r2, r0
 800a94c:	460b      	mov	r3, r1
 800a94e:	4640      	mov	r0, r8
 800a950:	4649      	mov	r1, r9
 800a952:	f7f5 fcf9 	bl	8000348 <__aeabi_dsub>
 800a956:	4652      	mov	r2, sl
 800a958:	465b      	mov	r3, fp
 800a95a:	f7f5 fcf5 	bl	8000348 <__aeabi_dsub>
 800a95e:	4602      	mov	r2, r0
 800a960:	460b      	mov	r3, r1
 800a962:	4620      	mov	r0, r4
 800a964:	4629      	mov	r1, r5
 800a966:	e726      	b.n	800a7b6 <__ieee754_log+0x12e>
 800a968:	2c00      	cmp	r4, #0
 800a96a:	d13f      	bne.n	800a9ec <__ieee754_log+0x364>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4650      	mov	r0, sl
 800a972:	4659      	mov	r1, fp
 800a974:	f7f5 fce8 	bl	8000348 <__aeabi_dsub>
 800a978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a97c:	f7f5 fe98 	bl	80006b0 <__aeabi_dmul>
 800a980:	e7be      	b.n	800a900 <__ieee754_log+0x278>
 800a982:	bf00      	nop
 800a984:	f3af 8000 	nop.w
 800a988:	fee00000 	.word	0xfee00000
 800a98c:	3fe62e42 	.word	0x3fe62e42
 800a990:	35793c76 	.word	0x35793c76
 800a994:	3dea39ef 	.word	0x3dea39ef
 800a998:	55555555 	.word	0x55555555
 800a99c:	3fd55555 	.word	0x3fd55555
 800a9a0:	df3e5244 	.word	0xdf3e5244
 800a9a4:	3fc2f112 	.word	0x3fc2f112
 800a9a8:	96cb03de 	.word	0x96cb03de
 800a9ac:	3fc74664 	.word	0x3fc74664
 800a9b0:	94229359 	.word	0x94229359
 800a9b4:	3fd24924 	.word	0x3fd24924
 800a9b8:	55555593 	.word	0x55555593
 800a9bc:	3fe55555 	.word	0x3fe55555
 800a9c0:	d078c69f 	.word	0xd078c69f
 800a9c4:	3fc39a09 	.word	0x3fc39a09
 800a9c8:	1d8e78af 	.word	0x1d8e78af
 800a9cc:	3fcc71c5 	.word	0x3fcc71c5
 800a9d0:	9997fa04 	.word	0x9997fa04
 800a9d4:	3fd99999 	.word	0x3fd99999
 800a9d8:	c3500000 	.word	0xc3500000
 800a9dc:	43500000 	.word	0x43500000
 800a9e0:	7fefffff 	.word	0x7fefffff
 800a9e4:	3ff00000 	.word	0x3ff00000
 800a9e8:	3fe00000 	.word	0x3fe00000
 800a9ec:	a30e      	add	r3, pc, #56	; (adr r3, 800aa28 <__ieee754_log+0x3a0>)
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9f6:	f7f5 fe5b 	bl	80006b0 <__aeabi_dmul>
 800a9fa:	4632      	mov	r2, r6
 800a9fc:	463b      	mov	r3, r7
 800a9fe:	4604      	mov	r4, r0
 800aa00:	460d      	mov	r5, r1
 800aa02:	4650      	mov	r0, sl
 800aa04:	4659      	mov	r1, fp
 800aa06:	f7f5 fc9f 	bl	8000348 <__aeabi_dsub>
 800aa0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa0e:	f7f5 fe4f 	bl	80006b0 <__aeabi_dmul>
 800aa12:	a307      	add	r3, pc, #28	; (adr r3, 800aa30 <__ieee754_log+0x3a8>)
 800aa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa18:	4606      	mov	r6, r0
 800aa1a:	460f      	mov	r7, r1
 800aa1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa20:	e6dd      	b.n	800a7de <__ieee754_log+0x156>
 800aa22:	2000      	movs	r0, #0
 800aa24:	2100      	movs	r1, #0
 800aa26:	e644      	b.n	800a6b2 <__ieee754_log+0x2a>
 800aa28:	fee00000 	.word	0xfee00000
 800aa2c:	3fe62e42 	.word	0x3fe62e42
 800aa30:	35793c76 	.word	0x35793c76
 800aa34:	3dea39ef 	.word	0x3dea39ef

0800aa38 <copysign>:
 800aa38:	ec53 2b10 	vmov	r2, r3, d0
 800aa3c:	ee11 0a90 	vmov	r0, s3
 800aa40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aa44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800aa48:	ea41 0300 	orr.w	r3, r1, r0
 800aa4c:	ec43 2b10 	vmov	d0, r2, r3
 800aa50:	4770      	bx	lr
	...

0800aa54 <_init>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	bf00      	nop
 800aa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5a:	bc08      	pop	{r3}
 800aa5c:	469e      	mov	lr, r3
 800aa5e:	4770      	bx	lr

0800aa60 <_fini>:
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa62:	bf00      	nop
 800aa64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa66:	bc08      	pop	{r3}
 800aa68:	469e      	mov	lr, r3
 800aa6a:	4770      	bx	lr
