
acoustic_feature_camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00016458  0800e0b0  0800e0b0  0001e0b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08024508  08024508  00034508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08024510  08024510  00034510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08024514  08024514  00034514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000740  20000000  08024518  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000f4a0  20000740  08024c58  00040740  2**2
                  ALLOC
  8 ._user_heap_stack 00002400  2000fbe0  08024c58  0004fbe0  2**0
                  ALLOC
  9 .ARM.attributes 00000034  00000000  00000000  00040740  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027599  00000000  00000000  00040774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005e50  00000000  00000000  00067d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001182a  00000000  00000000  0006db5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001458  00000000  00000000  0007f388  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001758  00000000  00000000  000807e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000cfe9  00000000  00000000  00081f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008a5b  00000000  00000000  0008ef21  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      00002f02  00000000  00000000  0009797c  2**0
                  CONTENTS, READONLY
 18 .iar.rtmodel  00000218  00000000  00000000  0009a87e  2**0
                  CONTENTS, READONLY
 19 .iar_vfe_header 0000001c  00000000  00000000  0009aa98  2**2
                  CONTENTS, READONLY
 20 .debug_frame  00006dd8  00000000  00000000  0009aab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000084  00000000  00000000  000a188c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  000a1910  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000740 	.word	0x20000740
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e094 	.word	0x0800e094

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000744 	.word	0x20000744
 80001cc:	0800e094 	.word	0x0800e094

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <ai_array_get_byte_size>:
 8000290:	b909      	cbnz	r1, 8000296 <ai_array_get_byte_size+0x6>
 8000292:	2000      	movs	r0, #0
 8000294:	4770      	bx	lr
 8000296:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800029a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800029e:	18d3      	adds	r3, r2, r3
 80002a0:	4359      	muls	r1, r3
 80002a2:	1dc9      	adds	r1, r1, #7
 80002a4:	08c9      	lsrs	r1, r1, #3
 80002a6:	0d42      	lsrs	r2, r0, #21
 80002a8:	00c9      	lsls	r1, r1, #3
 80002aa:	f002 0203 	and.w	r2, r2, #3
 80002ae:	0c43      	lsrs	r3, r0, #17
 80002b0:	40d1      	lsrs	r1, r2
 80002b2:	f003 030f 	and.w	r3, r3, #15
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	d00b      	beq.n	80002d2 <ai_array_get_byte_size+0x42>
 80002ba:	2b08      	cmp	r3, #8
 80002bc:	bf01      	itttt	eq
 80002be:	f3c0 12c6 	ubfxeq	r2, r0, #7, #7
 80002c2:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 80002c6:	1882      	addeq	r2, r0, r2
 80002c8:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 80002cc:	1dc9      	adds	r1, r1, #7
 80002ce:	08c8      	lsrs	r0, r1, #3
 80002d0:	4770      	bx	lr
 80002d2:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80002d6:	f3c0 3082 	ubfx	r0, r0, #14, #3
 80002da:	1882      	adds	r2, r0, r2
 80002dc:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80002e0:	1dc9      	adds	r1, r1, #7
 80002e2:	08c8      	lsrs	r0, r1, #3
 80002e4:	4770      	bx	lr

080002e6 <ai_mem_copy_buffer>:
 80002e6:	b510      	push	{r4, lr}
 80002e8:	4604      	mov	r4, r0
 80002ea:	f008 fdd3 	bl	8008e94 <__aeabi_memcpy>
 80002ee:	4620      	mov	r0, r4
 80002f0:	bd10      	pop	{r4, pc}

080002f2 <ai_platform_runtime_get_revision>:
 80002f2:	f8df 0414 	ldr.w	r0, [pc, #1044]	; 8000708 <.text_19>
 80002f6:	6801      	ldr	r1, [r0, #0]
 80002f8:	0849      	lsrs	r1, r1, #1
 80002fa:	0049      	lsls	r1, r1, #1
 80002fc:	6001      	str	r1, [r0, #0]
 80002fe:	2001      	movs	r0, #1
 8000300:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 800070c <.text_20>
 8000304:	6088      	str	r0, [r1, #8]
 8000306:	6888      	ldr	r0, [r1, #8]
 8000308:	2800      	cmp	r0, #0
 800030a:	d1fc      	bne.n	8000306 <ai_platform_runtime_get_revision+0x14>
 800030c:	f8df 2400 	ldr.w	r2, [pc, #1024]	; 8000710 <.text_21>
 8000310:	600a      	str	r2, [r1, #0]
 8000312:	6808      	ldr	r0, [r1, #0]
 8000314:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000714 <.text_22>
 8000318:	4288      	cmp	r0, r1
 800031a:	d000      	beq.n	800031e <ai_platform_runtime_get_revision+0x2c>
 800031c:	e7fe      	b.n	800031c <ai_platform_runtime_get_revision+0x2a>
 800031e:	a0a1      	add	r0, pc, #644	; (adr r0, 80005a4 <.text_17>)
 8000320:	4770      	bx	lr

08000322 <ai_platform_runtime_get_version>:
 8000322:	f8df 03e4 	ldr.w	r0, [pc, #996]	; 8000708 <.text_19>
 8000326:	6801      	ldr	r1, [r0, #0]
 8000328:	0849      	lsrs	r1, r1, #1
 800032a:	0049      	lsls	r1, r1, #1
 800032c:	6001      	str	r1, [r0, #0]
 800032e:	2001      	movs	r0, #1
 8000330:	f8df 13d8 	ldr.w	r1, [pc, #984]	; 800070c <.text_20>
 8000334:	6088      	str	r0, [r1, #8]
 8000336:	6888      	ldr	r0, [r1, #8]
 8000338:	2800      	cmp	r0, #0
 800033a:	d1fc      	bne.n	8000336 <ai_platform_runtime_get_version+0x14>
 800033c:	f8df 23d0 	ldr.w	r2, [pc, #976]	; 8000710 <.text_21>
 8000340:	600a      	str	r2, [r1, #0]
 8000342:	6808      	ldr	r0, [r1, #0]
 8000344:	f8df 13cc 	ldr.w	r1, [pc, #972]	; 8000714 <.text_22>
 8000348:	4288      	cmp	r0, r1
 800034a:	d000      	beq.n	800034e <ai_platform_runtime_get_version+0x2c>
 800034c:	e7fe      	b.n	800034c <ai_platform_runtime_get_version+0x2a>
 800034e:	f20f 32dc 	addw	r2, pc, #988	; 0x3dc
 8000352:	6810      	ldr	r0, [r2, #0]
 8000354:	4770      	bx	lr

08000356 <ai_platform_api_get_version>:
 8000356:	f8df 03b0 	ldr.w	r0, [pc, #944]	; 8000708 <.text_19>
 800035a:	6801      	ldr	r1, [r0, #0]
 800035c:	0849      	lsrs	r1, r1, #1
 800035e:	0049      	lsls	r1, r1, #1
 8000360:	6001      	str	r1, [r0, #0]
 8000362:	2001      	movs	r0, #1
 8000364:	f8df 13a4 	ldr.w	r1, [pc, #932]	; 800070c <.text_20>
 8000368:	6088      	str	r0, [r1, #8]
 800036a:	6888      	ldr	r0, [r1, #8]
 800036c:	2800      	cmp	r0, #0
 800036e:	d1fc      	bne.n	800036a <ai_platform_api_get_version+0x14>
 8000370:	f8df 239c 	ldr.w	r2, [pc, #924]	; 8000710 <.text_21>
 8000374:	600a      	str	r2, [r1, #0]
 8000376:	6808      	ldr	r0, [r1, #0]
 8000378:	f8df 1398 	ldr.w	r1, [pc, #920]	; 8000714 <.text_22>
 800037c:	4288      	cmp	r0, r1
 800037e:	d000      	beq.n	8000382 <ai_platform_api_get_version+0x2c>
 8000380:	e7fe      	b.n	8000380 <ai_platform_api_get_version+0x2a>
 8000382:	f20f 32ac 	addw	r2, pc, #940	; 0x3ac
 8000386:	6810      	ldr	r0, [r2, #0]
 8000388:	4770      	bx	lr

0800038a <ai_platform_interface_api_get_version>:
 800038a:	f8df 037c 	ldr.w	r0, [pc, #892]	; 8000708 <.text_19>
 800038e:	6801      	ldr	r1, [r0, #0]
 8000390:	0849      	lsrs	r1, r1, #1
 8000392:	0049      	lsls	r1, r1, #1
 8000394:	6001      	str	r1, [r0, #0]
 8000396:	2001      	movs	r0, #1
 8000398:	f8df 1370 	ldr.w	r1, [pc, #880]	; 800070c <.text_20>
 800039c:	6088      	str	r0, [r1, #8]
 800039e:	6888      	ldr	r0, [r1, #8]
 80003a0:	2800      	cmp	r0, #0
 80003a2:	d1fc      	bne.n	800039e <ai_platform_interface_api_get_version+0x14>
 80003a4:	f8df 2368 	ldr.w	r2, [pc, #872]	; 8000710 <.text_21>
 80003a8:	600a      	str	r2, [r1, #0]
 80003aa:	6808      	ldr	r0, [r1, #0]
 80003ac:	f8df 1364 	ldr.w	r1, [pc, #868]	; 8000714 <.text_22>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	d000      	beq.n	80003b6 <ai_platform_interface_api_get_version+0x2c>
 80003b4:	e7fe      	b.n	80003b4 <ai_platform_interface_api_get_version+0x2a>
 80003b6:	f20f 327c 	addw	r2, pc, #892	; 0x37c
 80003ba:	6810      	ldr	r0, [r2, #0]
 80003bc:	4770      	bx	lr

080003be <ai_platform_context_acquire>:
 80003be:	b120      	cbz	r0, 80003ca <ai_platform_context_acquire+0xc>
 80003c0:	6801      	ldr	r1, [r0, #0]
 80003c2:	f8df 2354 	ldr.w	r2, [pc, #852]	; 8000718 <.text_23>
 80003c6:	4291      	cmp	r1, r2
 80003c8:	d000      	beq.n	80003cc <ai_platform_context_acquire+0xe>
 80003ca:	2000      	movs	r0, #0
 80003cc:	f8df 1338 	ldr.w	r1, [pc, #824]	; 8000708 <.text_19>
 80003d0:	680a      	ldr	r2, [r1, #0]
 80003d2:	0852      	lsrs	r2, r2, #1
 80003d4:	0052      	lsls	r2, r2, #1
 80003d6:	600a      	str	r2, [r1, #0]
 80003d8:	2101      	movs	r1, #1
 80003da:	f8df 2330 	ldr.w	r2, [pc, #816]	; 800070c <.text_20>
 80003de:	6091      	str	r1, [r2, #8]
 80003e0:	6891      	ldr	r1, [r2, #8]
 80003e2:	2900      	cmp	r1, #0
 80003e4:	d1fc      	bne.n	80003e0 <ai_platform_context_acquire+0x22>
 80003e6:	f8df 3328 	ldr.w	r3, [pc, #808]	; 8000710 <.text_21>
 80003ea:	6013      	str	r3, [r2, #0]
 80003ec:	6811      	ldr	r1, [r2, #0]
 80003ee:	f8df 2324 	ldr.w	r2, [pc, #804]	; 8000714 <.text_22>
 80003f2:	4291      	cmp	r1, r2
 80003f4:	d000      	beq.n	80003f8 <ai_platform_context_acquire+0x3a>
 80003f6:	e7fe      	b.n	80003f6 <ai_platform_context_acquire+0x38>
 80003f8:	4770      	bx	lr

080003fa <ai_platform_context_release>:
 80003fa:	f8df 131c 	ldr.w	r1, [pc, #796]	; 8000718 <.text_23>
 80003fe:	6001      	str	r1, [r0, #0]
 8000400:	4770      	bx	lr

08000402 <ai_copy_buffer_fake_src>:
 8000402:	4608      	mov	r0, r1
 8000404:	4770      	bx	lr

08000406 <ai_copy_buffer_fake_dst>:
 8000406:	4770      	bx	lr

08000408 <ai_platform_network_get_error>:
 8000408:	b120      	cbz	r0, 8000414 <ai_platform_network_get_error+0xc>
 800040a:	6801      	ldr	r1, [r0, #0]
 800040c:	f8df 2308 	ldr.w	r2, [pc, #776]	; 8000718 <.text_23>
 8000410:	4291      	cmp	r1, r2
 8000412:	d000      	beq.n	8000416 <ai_platform_network_get_error+0xe>
 8000414:	2000      	movs	r0, #0
 8000416:	49bc      	ldr	r1, [pc, #752]	; (8000708 <.text_19>)
 8000418:	680a      	ldr	r2, [r1, #0]
 800041a:	0852      	lsrs	r2, r2, #1
 800041c:	0052      	lsls	r2, r2, #1
 800041e:	600a      	str	r2, [r1, #0]
 8000420:	2101      	movs	r1, #1
 8000422:	4aba      	ldr	r2, [pc, #744]	; (800070c <.text_20>)
 8000424:	6091      	str	r1, [r2, #8]
 8000426:	6891      	ldr	r1, [r2, #8]
 8000428:	2900      	cmp	r1, #0
 800042a:	d1fc      	bne.n	8000426 <ai_platform_network_get_error+0x1e>
 800042c:	4bb8      	ldr	r3, [pc, #736]	; (8000710 <.text_21>)
 800042e:	6013      	str	r3, [r2, #0]
 8000430:	6811      	ldr	r1, [r2, #0]
 8000432:	4ab8      	ldr	r2, [pc, #736]	; (8000714 <.text_22>)
 8000434:	4291      	cmp	r1, r2
 8000436:	d000      	beq.n	800043a <ai_platform_network_get_error+0x32>
 8000438:	e7fe      	b.n	8000438 <ai_platform_network_get_error+0x30>
 800043a:	2800      	cmp	r0, #0
 800043c:	bf1c      	itt	ne
 800043e:	300c      	addne	r0, #12
 8000440:	f000 b98a 	bne.w	8000758 <core_get_error>
 8000444:	f20f 3000 	addw	r0, pc, #768	; 0x300
 8000448:	6800      	ldr	r0, [r0, #0]
 800044a:	4770      	bx	lr

0800044c <ai_platform_network_set_error>:
 800044c:	2800      	cmp	r0, #0
 800044e:	bf1c      	itt	ne
 8000450:	300c      	addne	r0, #12
 8000452:	f000 b986 	bne.w	8000762 <core_set_error>
 8000456:	4770      	bx	lr

08000458 <ai_platform_network_create>:
 8000458:	b570      	push	{r4, r5, r6, lr}
 800045a:	9d04      	ldr	r5, [sp, #16]
 800045c:	4604      	mov	r4, r0
 800045e:	9805      	ldr	r0, [sp, #20]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	042d      	lsls	r5, r5, #16
 8000464:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8000468:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 800046c:	f20f 20dc 	addw	r0, pc, #732	; 0x2dc
 8000470:	6806      	ldr	r6, [r0, #0]
 8000472:	48a5      	ldr	r0, [pc, #660]	; (8000708 <.text_19>)
 8000474:	6801      	ldr	r1, [r0, #0]
 8000476:	0849      	lsrs	r1, r1, #1
 8000478:	0049      	lsls	r1, r1, #1
 800047a:	6001      	str	r1, [r0, #0]
 800047c:	2001      	movs	r0, #1
 800047e:	49a3      	ldr	r1, [pc, #652]	; (800070c <.text_20>)
 8000480:	6088      	str	r0, [r1, #8]
 8000482:	6888      	ldr	r0, [r1, #8]
 8000484:	2800      	cmp	r0, #0
 8000486:	d1fc      	bne.n	8000482 <ai_platform_network_create+0x2a>
 8000488:	4ba1      	ldr	r3, [pc, #644]	; (8000710 <.text_21>)
 800048a:	600b      	str	r3, [r1, #0]
 800048c:	6808      	ldr	r0, [r1, #0]
 800048e:	49a1      	ldr	r1, [pc, #644]	; (8000714 <.text_22>)
 8000490:	4288      	cmp	r0, r1
 8000492:	d000      	beq.n	8000496 <ai_platform_network_create+0x3e>
 8000494:	e7fe      	b.n	8000494 <ai_platform_network_create+0x3c>
 8000496:	b91c      	cbnz	r4, 80004a0 <ai_platform_network_create+0x48>
 8000498:	f20f 20b4 	addw	r0, pc, #692	; 0x2b4
 800049c:	6800      	ldr	r0, [r0, #0]
 800049e:	bd70      	pop	{r4, r5, r6, pc}
 80004a0:	499d      	ldr	r1, [pc, #628]	; (8000718 <.text_23>)
 80004a2:	6011      	str	r1, [r2, #0]
 80004a4:	6022      	str	r2, [r4, #0]
 80004a6:	f000 f955 	bl	8000754 <core_init>
 80004aa:	b910      	cbnz	r0, 80004b2 <ai_platform_network_create+0x5a>
 80004ac:	f20f 2088 	addw	r0, pc, #648	; 0x288
 80004b0:	e00b      	b.n	80004ca <ai_platform_network_create+0x72>
 80004b2:	499a      	ldr	r1, [pc, #616]	; (800071c <.text_24>)
 80004b4:	428d      	cmp	r5, r1
 80004b6:	bf28      	it	cs
 80004b8:	f20f 2080 	addwcs	r0, pc, #640	; 0x280
 80004bc:	d205      	bcs.n	80004ca <ai_platform_network_create+0x72>
 80004be:	f20f 2080 	addw	r0, pc, #640	; 0x280
 80004c2:	f000 f963 	bl	800078c <ai_check_custom_types>
 80004c6:	b918      	cbnz	r0, 80004d0 <ai_platform_network_create+0x78>
 80004c8:	a09e      	add	r0, pc, #632	; (adr r0, 8000744 <.text_34>)
 80004ca:	6806      	ldr	r6, [r0, #0]
 80004cc:	2100      	movs	r1, #0
 80004ce:	6021      	str	r1, [r4, #0]
 80004d0:	4630      	mov	r0, r6
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <ai_platform_network_destroy>:
 80004d4:	b128      	cbz	r0, 80004e2 <ai_platform_network_destroy+0xe>
 80004d6:	6801      	ldr	r1, [r0, #0]
 80004d8:	4a8f      	ldr	r2, [pc, #572]	; (8000718 <.text_23>)
 80004da:	4291      	cmp	r1, r2
 80004dc:	bf08      	it	eq
 80004de:	4602      	moveq	r2, r0
 80004e0:	d000      	beq.n	80004e4 <ai_platform_network_destroy+0x10>
 80004e2:	2200      	movs	r2, #0
 80004e4:	4988      	ldr	r1, [pc, #544]	; (8000708 <.text_19>)
 80004e6:	680b      	ldr	r3, [r1, #0]
 80004e8:	085b      	lsrs	r3, r3, #1
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	600b      	str	r3, [r1, #0]
 80004ee:	2101      	movs	r1, #1
 80004f0:	4b86      	ldr	r3, [pc, #536]	; (800070c <.text_20>)
 80004f2:	6099      	str	r1, [r3, #8]
 80004f4:	6899      	ldr	r1, [r3, #8]
 80004f6:	2900      	cmp	r1, #0
 80004f8:	d1fc      	bne.n	80004f4 <ai_platform_network_destroy+0x20>
 80004fa:	f8df c214 	ldr.w	ip, [pc, #532]	; 8000710 <.text_21>
 80004fe:	f8c3 c000 	str.w	ip, [r3]
 8000502:	6819      	ldr	r1, [r3, #0]
 8000504:	4b83      	ldr	r3, [pc, #524]	; (8000714 <.text_22>)
 8000506:	4299      	cmp	r1, r3
 8000508:	d000      	beq.n	800050c <ai_platform_network_destroy+0x38>
 800050a:	e7fe      	b.n	800050a <ai_platform_network_destroy+0x36>
 800050c:	b102      	cbz	r2, 8000510 <ai_platform_network_destroy+0x3c>
 800050e:	2000      	movs	r0, #0
 8000510:	4770      	bx	lr

08000512 <ai_platform_network_init>:
 8000512:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000516:	b081      	sub	sp, #4
 8000518:	460a      	mov	r2, r1
 800051a:	b118      	cbz	r0, 8000524 <ai_platform_network_init+0x12>
 800051c:	6801      	ldr	r1, [r0, #0]
 800051e:	4b7e      	ldr	r3, [pc, #504]	; (8000718 <.text_23>)
 8000520:	4299      	cmp	r1, r3
 8000522:	d000      	beq.n	8000526 <ai_platform_network_init+0x14>
 8000524:	2000      	movs	r0, #0
 8000526:	4978      	ldr	r1, [pc, #480]	; (8000708 <.text_19>)
 8000528:	680b      	ldr	r3, [r1, #0]
 800052a:	085b      	lsrs	r3, r3, #1
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	600b      	str	r3, [r1, #0]
 8000530:	2101      	movs	r1, #1
 8000532:	4b76      	ldr	r3, [pc, #472]	; (800070c <.text_20>)
 8000534:	6099      	str	r1, [r3, #8]
 8000536:	6899      	ldr	r1, [r3, #8]
 8000538:	2900      	cmp	r1, #0
 800053a:	d1fc      	bne.n	8000536 <ai_platform_network_init+0x24>
 800053c:	4c74      	ldr	r4, [pc, #464]	; (8000710 <.text_21>)
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	6819      	ldr	r1, [r3, #0]
 8000542:	4b74      	ldr	r3, [pc, #464]	; (8000714 <.text_22>)
 8000544:	4299      	cmp	r1, r3
 8000546:	d000      	beq.n	800054a <ai_platform_network_init+0x38>
 8000548:	e7fe      	b.n	8000548 <ai_platform_network_init+0x36>
 800054a:	b340      	cbz	r0, 800059e <ai_platform_network_init+0x8c>
 800054c:	b90a      	cbnz	r2, 8000552 <ai_platform_network_init+0x40>
 800054e:	2211      	movs	r2, #17
 8000550:	e006      	b.n	8000560 <ai_platform_network_init+0x4e>
 8000552:	69d1      	ldr	r1, [r2, #28]
 8000554:	b909      	cbnz	r1, 800055a <ai_platform_network_init+0x48>
 8000556:	2213      	movs	r2, #19
 8000558:	e002      	b.n	8000560 <ai_platform_network_init+0x4e>
 800055a:	68d1      	ldr	r1, [r2, #12]
 800055c:	b941      	cbnz	r1, 8000570 <ai_platform_network_init+0x5e>
 800055e:	2212      	movs	r2, #18
 8000560:	2110      	movs	r1, #16
 8000562:	300c      	adds	r0, #12
 8000564:	f000 f8fd 	bl	8000762 <core_set_error>
 8000568:	2000      	movs	r0, #0
 800056a:	b001      	add	sp, #4
 800056c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000570:	ca78      	ldmia	r2!, {r3, r4, r5, r6}
 8000572:	f100 0114 	add.w	r1, r0, #20
 8000576:	f100 0724 	add.w	r7, r0, #36	; 0x24
 800057a:	e881 0078 	stmia.w	r1, {r3, r4, r5, r6}
 800057e:	e892 5300 	ldmia.w	r2, {r8, r9, ip, lr}
 8000582:	e887 5300 	stmia.w	r7, {r8, r9, ip, lr}
 8000586:	2103      	movs	r1, #3
 8000588:	6081      	str	r1, [r0, #8]
 800058a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800058c:	b13a      	cbz	r2, 800059e <ai_platform_network_init+0x8c>
 800058e:	6891      	ldr	r1, [r2, #8]
 8000590:	6050      	str	r0, [r2, #4]
 8000592:	428a      	cmp	r2, r1
 8000594:	bf18      	it	ne
 8000596:	2900      	cmpne	r1, #0
 8000598:	bf18      	it	ne
 800059a:	460a      	movne	r2, r1
 800059c:	d1f7      	bne.n	800058e <ai_platform_network_init+0x7c>
 800059e:	b001      	add	sp, #4
 80005a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080005a4 <.text_17>:
 80005a4:	00000000 	.word	0x00000000

080005a8 <ai_platform_network_process>:
 80005a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005ac:	b083      	sub	sp, #12
 80005ae:	b128      	cbz	r0, 80005bc <ai_platform_network_process+0x14>
 80005b0:	6803      	ldr	r3, [r0, #0]
 80005b2:	4c59      	ldr	r4, [pc, #356]	; (8000718 <.text_23>)
 80005b4:	42a3      	cmp	r3, r4
 80005b6:	bf08      	it	eq
 80005b8:	4605      	moveq	r5, r0
 80005ba:	d000      	beq.n	80005be <ai_platform_network_process+0x16>
 80005bc:	2500      	movs	r5, #0
 80005be:	4852      	ldr	r0, [pc, #328]	; (8000708 <.text_19>)
 80005c0:	6803      	ldr	r3, [r0, #0]
 80005c2:	085b      	lsrs	r3, r3, #1
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	6003      	str	r3, [r0, #0]
 80005c8:	2001      	movs	r0, #1
 80005ca:	4b50      	ldr	r3, [pc, #320]	; (800070c <.text_20>)
 80005cc:	6098      	str	r0, [r3, #8]
 80005ce:	6898      	ldr	r0, [r3, #8]
 80005d0:	2800      	cmp	r0, #0
 80005d2:	d1fc      	bne.n	80005ce <ai_platform_network_process+0x26>
 80005d4:	4c4e      	ldr	r4, [pc, #312]	; (8000710 <.text_21>)
 80005d6:	601c      	str	r4, [r3, #0]
 80005d8:	6818      	ldr	r0, [r3, #0]
 80005da:	4b4e      	ldr	r3, [pc, #312]	; (8000714 <.text_22>)
 80005dc:	4298      	cmp	r0, r3
 80005de:	d000      	beq.n	80005e2 <ai_platform_network_process+0x3a>
 80005e0:	e7fe      	b.n	80005e0 <ai_platform_network_process+0x38>
 80005e2:	2d00      	cmp	r5, #0
 80005e4:	d048      	beq.n	8000678 <ai_platform_network_process+0xd0>
 80005e6:	68ab      	ldr	r3, [r5, #8]
 80005e8:	f003 0003 	and.w	r0, r3, #3
 80005ec:	2803      	cmp	r0, #3
 80005ee:	d002      	beq.n	80005f6 <ai_platform_network_process+0x4e>
 80005f0:	2230      	movs	r2, #48	; 0x30
 80005f2:	2111      	movs	r1, #17
 80005f4:	e03c      	b.n	8000670 <ai_platform_network_process+0xc8>
 80005f6:	000f      	movs	r7, r1
 80005f8:	bf1c      	itt	ne
 80005fa:	68f8      	ldrne	r0, [r7, #12]
 80005fc:	2800      	cmpne	r0, #0
 80005fe:	d035      	beq.n	800066c <ai_platform_network_process+0xc4>
 8000600:	8878      	ldrh	r0, [r7, #2]
 8000602:	b908      	cbnz	r0, 8000608 <ai_platform_network_process+0x60>
 8000604:	2221      	movs	r2, #33	; 0x21
 8000606:	e032      	b.n	800066e <ai_platform_network_process+0xc6>
 8000608:	0014      	movs	r4, r2
 800060a:	d00b      	beq.n	8000624 <ai_platform_network_process+0x7c>
 800060c:	68e1      	ldr	r1, [r4, #12]
 800060e:	b351      	cbz	r1, 8000666 <ai_platform_network_process+0xbe>
 8000610:	8861      	ldrh	r1, [r4, #2]
 8000612:	b911      	cbnz	r1, 800061a <ai_platform_network_process+0x72>
 8000614:	2221      	movs	r2, #33	; 0x21
 8000616:	2113      	movs	r1, #19
 8000618:	e02a      	b.n	8000670 <ai_platform_network_process+0xc8>
 800061a:	4288      	cmp	r0, r1
 800061c:	d002      	beq.n	8000624 <ai_platform_network_process+0x7c>
 800061e:	2221      	movs	r2, #33	; 0x21
 8000620:	2102      	movs	r1, #2
 8000622:	e025      	b.n	8000670 <ai_platform_network_process+0xc8>
 8000624:	05d8      	lsls	r0, r3, #23
 8000626:	bf4c      	ite	mi
 8000628:	2002      	movmi	r0, #2
 800062a:	2000      	movpl	r0, #0
 800062c:	0a59      	lsrs	r1, r3, #9
 800062e:	f001 0101 	and.w	r1, r1, #1
 8000632:	ea41 0800 	orr.w	r8, r1, r0
 8000636:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000638:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800063a:	6806      	ldr	r6, [r0, #0]
 800063c:	6808      	ldr	r0, [r1, #0]
 800063e:	9000      	str	r0, [sp, #0]
 8000640:	6871      	ldr	r1, [r6, #4]
 8000642:	6830      	ldr	r0, [r6, #0]
 8000644:	f7ff fe24 	bl	8000290 <ai_array_get_byte_size>
 8000648:	9001      	str	r0, [sp, #4]
 800064a:	9800      	ldr	r0, [sp, #0]
 800064c:	6841      	ldr	r1, [r0, #4]
 800064e:	6800      	ldr	r0, [r0, #0]
 8000650:	f7ff fe1e 	bl	8000290 <ai_array_get_byte_size>
 8000654:	68f9      	ldr	r1, [r7, #12]
 8000656:	2c00      	cmp	r4, #0
 8000658:	4602      	mov	r2, r0
 800065a:	bf14      	ite	ne
 800065c:	f8d4 b00c 	ldrne.w	fp, [r4, #12]
 8000660:	f04f 0b00 	moveq.w	fp, #0
 8000664:	e00c      	b.n	8000680 <ai_platform_network_process+0xd8>
 8000666:	2217      	movs	r2, #23
 8000668:	2113      	movs	r1, #19
 800066a:	e001      	b.n	8000670 <ai_platform_network_process+0xc8>
 800066c:	2217      	movs	r2, #23
 800066e:	2112      	movs	r1, #18
 8000670:	f105 000c 	add.w	r0, r5, #12
 8000674:	f000 f875 	bl	8000762 <core_set_error>
 8000678:	2000      	movs	r0, #0
 800067a:	b003      	add	sp, #12
 800067c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000680:	f018 0002 	ands.w	r0, r8, #2
 8000684:	bf14      	ite	ne
 8000686:	f8df 9098 	ldrne.w	r9, [pc, #152]	; 8000720 <.text_25>
 800068a:	f8df 9098 	ldreq.w	r9, [pc, #152]	; 8000724 <.text_26>
 800068e:	ea5f 73c8 	movs.w	r3, r8, lsl #31
 8000692:	bf4c      	ite	mi
 8000694:	f8df a088 	ldrmi.w	sl, [pc, #136]	; 8000720 <.text_25>
 8000698:	f8df a08c 	ldrpl.w	sl, [pc, #140]	; 8000728 <.text_27>
 800069c:	887b      	ldrh	r3, [r7, #2]
 800069e:	822b      	strh	r3, [r5, #16]
 80006a0:	2700      	movs	r7, #0
 80006a2:	826f      	strh	r7, [r5, #18]
 80006a4:	b908      	cbnz	r0, 80006aa <ai_platform_network_process+0x102>
 80006a6:	60b1      	str	r1, [r6, #8]
 80006a8:	60f1      	str	r1, [r6, #12]
 80006aa:	b144      	cbz	r4, 80006be <ai_platform_network_process+0x116>
 80006ac:	ea5f 70c8 	movs.w	r0, r8, lsl #31
 80006b0:	d405      	bmi.n	80006be <ai_platform_network_process+0x116>
 80006b2:	9b00      	ldr	r3, [sp, #0]
 80006b4:	f8c3 b008 	str.w	fp, [r3, #8]
 80006b8:	9800      	ldr	r0, [sp, #0]
 80006ba:	f8c0 b00c 	str.w	fp, [r0, #12]
 80006be:	8a68      	ldrh	r0, [r5, #18]
 80006c0:	8a2b      	ldrh	r3, [r5, #16]
 80006c2:	4298      	cmp	r0, r3
 80006c4:	d21c      	bcs.n	8000700 <ai_platform_network_process+0x158>
 80006c6:	462c      	mov	r4, r5
 80006c8:	4635      	mov	r5, r6
 80006ca:	9e01      	ldr	r6, [sp, #4]
 80006cc:	4617      	mov	r7, r2
 80006ce:	4688      	mov	r8, r1
 80006d0:	68a8      	ldr	r0, [r5, #8]
 80006d2:	4632      	mov	r2, r6
 80006d4:	4641      	mov	r1, r8
 80006d6:	47c8      	blx	r9
 80006d8:	60a8      	str	r0, [r5, #8]
 80006da:	44b0      	add	r8, r6
 80006dc:	4620      	mov	r0, r4
 80006de:	f000 f8d7 	bl	8000890 <ai_layers_forward_all>
 80006e2:	9800      	ldr	r0, [sp, #0]
 80006e4:	6881      	ldr	r1, [r0, #8]
 80006e6:	463a      	mov	r2, r7
 80006e8:	4658      	mov	r0, fp
 80006ea:	47d0      	blx	sl
 80006ec:	eb00 0b07 	add.w	fp, r0, r7
 80006f0:	8a60      	ldrh	r0, [r4, #18]
 80006f2:	8a21      	ldrh	r1, [r4, #16]
 80006f4:	1c40      	adds	r0, r0, #1
 80006f6:	8260      	strh	r0, [r4, #18]
 80006f8:	b280      	uxth	r0, r0
 80006fa:	4288      	cmp	r0, r1
 80006fc:	d3e8      	bcc.n	80006d0 <ai_platform_network_process+0x128>
 80006fe:	4625      	mov	r5, r4
 8000700:	8a68      	ldrh	r0, [r5, #18]
 8000702:	b003      	add	sp, #12
 8000704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000708 <.text_19>:
 8000708:	e0002000 	.word	0xe0002000

0800070c <.text_20>:
 800070c:	40023000 	.word	0x40023000

08000710 <.text_21>:
 8000710:	f407a5c2 	.word	0xf407a5c2

08000714 <.text_22>:
 8000714:	b5e8b5cd 	.word	0xb5e8b5cd

08000718 <.text_23>:
 8000718:	a1c00100 	.word	0xa1c00100

0800071c <.text_24>:
 800071c:	01010001 	.word	0x01010001

08000720 <.text_25>:
 8000720:	080002e7 	.word	0x080002e7

08000724 <.text_26>:
 8000724:	08000403 	.word	0x08000403

08000728 <.text_27>:
 8000728:	08000407 	.word	0x08000407

0800072c <.text_28>:
 800072c:	00000303 	.word	0x00000303

08000730 <.text_29>:
 8000730:	00000001 	.word	0x00000001

08000734 <.text_30>:
 8000734:	00000101 	.word	0x00000101

08000738 <.text_31>:
 8000738:	00001030 	.word	0x00001030

0800073c <.text_32>:
 800073c:	00001001 	.word	0x00001001

08000740 <_platform_network_sanity_check{8}::signatures>:
 8000740:	84048403                                ....

08000744 <.text_34>:
 8000744:	00001002 	.word	0x00001002

08000748 <.text_35>:
 8000748:	00001010 	.word	0x00001010

0800074c <.text_36>:
 800074c:	00000000 	.word	0x00000000

08000750 <.text_37>:
 8000750:	00001010 	.word	0x00001010

08000754 <core_init>:
 8000754:	2001      	movs	r0, #1
 8000756:	4770      	bx	lr

08000758 <core_get_error>:
 8000758:	4601      	mov	r1, r0
 800075a:	2200      	movs	r2, #0
 800075c:	6808      	ldr	r0, [r1, #0]
 800075e:	600a      	str	r2, [r1, #0]
 8000760:	4770      	bx	lr

08000762 <core_set_error>:
 8000762:	7803      	ldrb	r3, [r0, #0]
 8000764:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000768:	d104      	bne.n	8000774 <core_set_error+0x12>
 800076a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800076e:	6001      	str	r1, [r0, #0]
 8000770:	2001      	movs	r0, #1
 8000772:	4770      	bx	lr
 8000774:	2000      	movs	r0, #0
 8000776:	4770      	bx	lr

08000778 <ai_layers_forward_layer>:
 8000778:	b510      	push	{r4, lr}
 800077a:	4604      	mov	r4, r0
 800077c:	68e1      	ldr	r1, [r4, #12]
 800077e:	4788      	blx	r1
 8000780:	68a0      	ldr	r0, [r4, #8]
 8000782:	42a0      	cmp	r0, r4
 8000784:	bf08      	it	eq
 8000786:	2000      	moveq	r0, #0
 8000788:	bd10      	pop	{r4, pc}
	...

0800078c <ai_check_custom_types>:
 800078c:	b500      	push	{lr}
 800078e:	b081      	sub	sp, #4
 8000790:	b160      	cbz	r0, 80007ac <ai_check_custom_types+0x20>
 8000792:	7801      	ldrb	r1, [r0, #0]
 8000794:	2903      	cmp	r1, #3
 8000796:	d109      	bne.n	80007ac <ai_check_custom_types+0x20>
 8000798:	f05f 0204 	movs.w	r2, #4
 800079c:	a163      	add	r1, pc, #396	; (adr r1, 800092c <ai_check_custom_types::ref_signatures>)
 800079e:	f008 fb9f 	bl	8008ee0 <memcmp>
 80007a2:	1e40      	subs	r0, r0, #1
 80007a4:	4180      	sbcs	r0, r0
 80007a6:	0fc0      	lsrs	r0, r0, #31
 80007a8:	b001      	add	sp, #4
 80007aa:	bd00      	pop	{pc}
 80007ac:	2000      	movs	r0, #0
 80007ae:	b001      	add	sp, #4
 80007b0:	bd00      	pop	{pc}
	...

080007b4 <ai_layer_type_name>:
 80007b4:	f242 7211 	movw	r2, #10001	; 0x2711
 80007b8:	1a81      	subs	r1, r0, r2
 80007ba:	2901      	cmp	r1, #1
 80007bc:	bf84      	itt	hi
 80007be:	1ec9      	subhi	r1, r1, #3
 80007c0:	290d      	cmphi	r1, #13
 80007c2:	d901      	bls.n	80007c8 <ai_layer_type_name+0x14>
 80007c4:	390f      	subs	r1, #15
 80007c6:	d145      	bne.n	8000854 <ai_layer_type_name+0xa0>
 80007c8:	1a80      	subs	r0, r0, r2
 80007ca:	d021      	beq.n	8000810 <ai_layer_type_name+0x5c>
 80007cc:	1e40      	subs	r0, r0, #1
 80007ce:	d021      	beq.n	8000814 <ai_layer_type_name+0x60>
 80007d0:	1e80      	subs	r0, r0, #2
 80007d2:	d021      	beq.n	8000818 <ai_layer_type_name+0x64>
 80007d4:	1e40      	subs	r0, r0, #1
 80007d6:	d021      	beq.n	800081c <ai_layer_type_name+0x68>
 80007d8:	1e40      	subs	r0, r0, #1
 80007da:	d021      	beq.n	8000820 <ai_layer_type_name+0x6c>
 80007dc:	1e40      	subs	r0, r0, #1
 80007de:	d021      	beq.n	8000824 <ai_layer_type_name+0x70>
 80007e0:	1e40      	subs	r0, r0, #1
 80007e2:	d021      	beq.n	8000828 <ai_layer_type_name+0x74>
 80007e4:	1e40      	subs	r0, r0, #1
 80007e6:	d021      	beq.n	800082c <ai_layer_type_name+0x78>
 80007e8:	1e40      	subs	r0, r0, #1
 80007ea:	d021      	beq.n	8000830 <ai_layer_type_name+0x7c>
 80007ec:	1e40      	subs	r0, r0, #1
 80007ee:	d021      	beq.n	8000834 <ai_layer_type_name+0x80>
 80007f0:	1e40      	subs	r0, r0, #1
 80007f2:	d021      	beq.n	8000838 <ai_layer_type_name+0x84>
 80007f4:	1e40      	subs	r0, r0, #1
 80007f6:	d021      	beq.n	800083c <ai_layer_type_name+0x88>
 80007f8:	1e40      	subs	r0, r0, #1
 80007fa:	d021      	beq.n	8000840 <ai_layer_type_name+0x8c>
 80007fc:	1e40      	subs	r0, r0, #1
 80007fe:	d021      	beq.n	8000844 <ai_layer_type_name+0x90>
 8000800:	1e40      	subs	r0, r0, #1
 8000802:	d021      	beq.n	8000848 <ai_layer_type_name+0x94>
 8000804:	1e40      	subs	r0, r0, #1
 8000806:	d021      	beq.n	800084c <ai_layer_type_name+0x98>
 8000808:	1e80      	subs	r0, r0, #2
 800080a:	d021      	beq.n	8000850 <ai_layer_type_name+0x9c>
 800080c:	a012      	add	r0, pc, #72	; (adr r0, 8000858 <.text_5>)
 800080e:	4770      	bx	lr
 8000810:	a012      	add	r0, pc, #72	; (adr r0, 800085c <.text_6>)
 8000812:	4770      	bx	lr
 8000814:	a012      	add	r0, pc, #72	; (adr r0, 8000860 <.text_7>)
 8000816:	4770      	bx	lr
 8000818:	a027      	add	r0, pc, #156	; (adr r0, 80008b8 <.text_14>)
 800081a:	4770      	bx	lr
 800081c:	a028      	add	r0, pc, #160	; (adr r0, 80008c0 <.text_15>)
 800081e:	4770      	bx	lr
 8000820:	a010      	add	r0, pc, #64	; (adr r0, 8000864 <.text_8>)
 8000822:	4770      	bx	lr
 8000824:	a010      	add	r0, pc, #64	; (adr r0, 8000868 <.text_9>)
 8000826:	4770      	bx	lr
 8000828:	a027      	add	r0, pc, #156	; (adr r0, 80008c8 <.text_16>)
 800082a:	4770      	bx	lr
 800082c:	a00f      	add	r0, pc, #60	; (adr r0, 800086c <.text_10>)
 800082e:	4770      	bx	lr
 8000830:	a027      	add	r0, pc, #156	; (adr r0, 80008d0 <.text_17>)
 8000832:	4770      	bx	lr
 8000834:	a028      	add	r0, pc, #160	; (adr r0, 80008d8 <.text_18>)
 8000836:	4770      	bx	lr
 8000838:	a02c      	add	r0, pc, #176	; (adr r0, 80008ec <.text_19>)
 800083a:	4770      	bx	lr
 800083c:	a02d      	add	r0, pc, #180	; (adr r0, 80008f4 <.text_20>)
 800083e:	4770      	bx	lr
 8000840:	a00b      	add	r0, pc, #44	; (adr r0, 8000870 <.text_11>)
 8000842:	4770      	bx	lr
 8000844:	a02d      	add	r0, pc, #180	; (adr r0, 80008fc <.text_21>)
 8000846:	4770      	bx	lr
 8000848:	a02e      	add	r0, pc, #184	; (adr r0, 8000904 <.text_22>)
 800084a:	4770      	bx	lr
 800084c:	a030      	add	r0, pc, #192	; (adr r0, 8000910 <.text_23>)
 800084e:	4770      	bx	lr
 8000850:	a034      	add	r0, pc, #208	; (adr r0, 8000924 <.text_24>)
 8000852:	4770      	bx	lr
 8000854:	a000      	add	r0, pc, #0	; (adr r0, 8000858 <.text_5>)
 8000856:	4770      	bx	lr

08000858 <.text_5>:
 8000858:	00000000 	.word	0x00000000

0800085c <.text_6>:
 800085c:	00444441 	.word	0x00444441

08000860 <.text_7>:
 8000860:	00004e42 	.word	0x00004e42

08000864 <.text_8>:
 8000864:	00555247 	.word	0x00555247

08000868 <.text_9>:
 8000868:	004e524c 	.word	0x004e524c

0800086c <.text_10>:
 800086c:	00004c4e 	.word	0x00004c4e

08000870 <.text_11>:
 8000870:	00004d53 	.word	0x00004d53

08000874 <ai_layer_type_is_valid>:
 8000874:	f242 7111 	movw	r1, #10001	; 0x2711
 8000878:	1a40      	subs	r0, r0, r1
 800087a:	2801      	cmp	r0, #1
 800087c:	bf84      	itt	hi
 800087e:	1ec0      	subhi	r0, r0, #3
 8000880:	280d      	cmphi	r0, #13
 8000882:	d901      	bls.n	8000888 <ai_layer_type_is_valid+0x14>
 8000884:	380f      	subs	r0, #15
 8000886:	d101      	bne.n	800088c <ai_layer_type_is_valid+0x18>
 8000888:	2001      	movs	r0, #1
 800088a:	4770      	bx	lr
 800088c:	2000      	movs	r0, #0
 800088e:	4770      	bx	lr

08000890 <ai_layers_forward_all>:
 8000890:	b530      	push	{r4, r5, lr}
 8000892:	4604      	mov	r4, r0
 8000894:	b081      	sub	sp, #4
 8000896:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000898:	b158      	cbz	r0, 80008b2 <ai_layers_forward_all+0x22>
 800089a:	6420      	str	r0, [r4, #64]	; 0x40
 800089c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800089e:	68e9      	ldr	r1, [r5, #12]
 80008a0:	4628      	mov	r0, r5
 80008a2:	4788      	blx	r1
 80008a4:	68a8      	ldr	r0, [r5, #8]
 80008a6:	42a8      	cmp	r0, r5
 80008a8:	bf08      	it	eq
 80008aa:	2000      	moveq	r0, #0
 80008ac:	2800      	cmp	r0, #0
 80008ae:	6420      	str	r0, [r4, #64]	; 0x40
 80008b0:	d1f4      	bne.n	800089c <ai_layers_forward_all+0xc>
 80008b2:	b001      	add	sp, #4
 80008b4:	bd30      	pop	{r4, r5, pc}
	...

080008b8 <.text_14>:
 80008b8:	564e4f43 	.word	0x564e4f43
 80008bc:	00004432 	.word	0x00004432

080008c0 <.text_15>:
 80008c0:	534e4544 	.word	0x534e4544
 80008c4:	00000045 	.word	0x00000045

080008c8 <.text_16>:
 80008c8:	4d54534c 	.word	0x4d54534c
 80008cc:	00000000 	.word	0x00000000

080008d0 <.text_17>:
 80008d0:	4d524f4e 	.word	0x4d524f4e
 80008d4:	00000000 	.word	0x00000000

080008d8 <.text_18>:
 80008d8:	4954504f 	.word	0x4954504f
 80008dc:	455a494d 	.word	0x455a494d
 80008e0:	4f435f44 	.word	0x4f435f44
 80008e4:	4432564e 	.word	0x4432564e
 80008e8:	00000000 	.word	0x00000000

080008ec <.text_19>:
 80008ec:	4d524550 	.word	0x4d524550
 80008f0:	00455455 	.word	0x00455455

080008f4 <.text_20>:
 80008f4:	4c4f4f50 	.word	0x4c4f4f50
 80008f8:	00000000 	.word	0x00000000

080008fc <.text_21>:
 80008fc:	494c5053 	.word	0x494c5053
 8000900:	00000054 	.word	0x00000054

08000904 <.text_22>:
 8000904:	454d4954 	.word	0x454d4954
 8000908:	4c45445f 	.word	0x4c45445f
 800090c:	00005941 	.word	0x00005941

08000910 <.text_23>:
 8000910:	454d4954 	.word	0x454d4954
 8000914:	5349445f 	.word	0x5349445f
 8000918:	42495254 	.word	0x42495254
 800091c:	44455455 	.word	0x44455455
 8000920:	00000000 	.word	0x00000000

08000924 <.text_24>:
 8000924:	434e4f43 	.word	0x434e4f43
 8000928:	00005441 	.word	0x00005441

0800092c <ai_check_custom_types::ref_signatures>:
 800092c:	84048403                                ....

08000930 <ai_conv2d_kernel_simple_f32>:
 8000930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000934:	b081      	sub	sp, #4
 8000936:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8000938:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800093a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800093e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8000940:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000942:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8000946:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 800094a:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 800094e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8000952:	1b2f      	subs	r7, r5, r4
 8000954:	fb09 fa07 	mul.w	sl, r9, r7
 8000958:	1b37      	subs	r7, r6, r4
 800095a:	fb07 f709 	mul.w	r7, r7, r9
 800095e:	9700      	str	r7, [sp, #0]
 8000960:	4288      	cmp	r0, r1
 8000962:	bf0c      	ite	eq
 8000964:	ed9f 0a86 	vldreq	s0, [pc, #536]	; 8000b80 <.text_4>
 8000968:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 800096c:	fb05 f50c 	mul.w	r5, r5, ip
 8000970:	fb06 f709 	mul.w	r7, r6, r9
 8000974:	fb06 860c 	mla	r6, r6, ip, r8
 8000978:	fb06 f609 	mul.w	r6, r6, r9
 800097c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8000980:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8000982:	ebab 0b0e 	sub.w	fp, fp, lr
 8000986:	fb04 f409 	mul.w	r4, r4, r9
 800098a:	fb09 f505 	mul.w	r5, r9, r5
 800098e:	2e00      	cmp	r6, #0
 8000990:	fb0b fb07 	mul.w	fp, fp, r7
 8000994:	eb02 0985 	add.w	r9, r2, r5, lsl #2
 8000998:	d04e      	beq.n	8000a38 <ai_conv2d_kernel_simple_f32+0x108>
 800099a:	460d      	mov	r5, r1
 800099c:	4619      	mov	r1, r3
 800099e:	4632      	mov	r2, r6
 80009a0:	ea4f 0300 	mov.w	r3, r0
 80009a4:	edd3 0a00 	vldr	s1, [r3]
 80009a8:	f1be 0f01 	cmp.w	lr, #1
 80009ac:	ee60 0a80 	vmul.f32	s1, s1, s0
 80009b0:	464e      	mov	r6, r9
 80009b2:	db39      	blt.n	8000a28 <ai_conv2d_kernel_simple_f32+0xf8>
 80009b4:	f8dd c000 	ldr.w	ip, [sp]
 80009b8:	4670      	mov	r0, lr
 80009ba:	2c01      	cmp	r4, #1
 80009bc:	db2c      	blt.n	8000a18 <ai_conv2d_kernel_simple_f32+0xe8>
 80009be:	f014 0803 	ands.w	r8, r4, #3
 80009c2:	d00a      	beq.n	80009da <ai_conv2d_kernel_simple_f32+0xaa>
 80009c4:	ed91 1a00 	vldr	s2, [r1]
 80009c8:	edd6 1a00 	vldr	s3, [r6]
 80009cc:	1d36      	adds	r6, r6, #4
 80009ce:	1d09      	adds	r1, r1, #4
 80009d0:	f1b8 0801 	subs.w	r8, r8, #1
 80009d4:	ee41 0a21 	vmla.f32	s1, s2, s3
 80009d8:	d1f4      	bne.n	80009c4 <ai_conv2d_kernel_simple_f32+0x94>
 80009da:	08a7      	lsrs	r7, r4, #2
 80009dc:	f000 801c 	beq.w	8000a18 <ai_conv2d_kernel_simple_f32+0xe8>
 80009e0:	ed91 2a00 	vldr	s4, [r1]
 80009e4:	ed96 1a00 	vldr	s2, [r6]
 80009e8:	edd1 1a01 	vldr	s3, [r1, #4]
 80009ec:	edd6 2a01 	vldr	s5, [r6, #4]
 80009f0:	ee42 0a01 	vmla.f32	s1, s4, s2
 80009f4:	ee41 0aa2 	vmla.f32	s1, s3, s5
 80009f8:	ed91 2a02 	vldr	s4, [r1, #8]
 80009fc:	ed96 1a02 	vldr	s2, [r6, #8]
 8000a00:	edd1 1a03 	vldr	s3, [r1, #12]
 8000a04:	edd6 2a03 	vldr	s5, [r6, #12]
 8000a08:	3610      	adds	r6, #16
 8000a0a:	3110      	adds	r1, #16
 8000a0c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8000a10:	1e7f      	subs	r7, r7, #1
 8000a12:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8000a16:	d1e3      	bne.n	80009e0 <ai_conv2d_kernel_simple_f32+0xb0>
 8000a18:	1e40      	subs	r0, r0, #1
 8000a1a:	eb06 068a 	add.w	r6, r6, sl, lsl #2
 8000a1e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8000a22:	d1ca      	bne.n	80009ba <ai_conv2d_kernel_simple_f32+0x8a>
 8000a24:	f8cd c000 	str.w	ip, [sp]
 8000a28:	edc5 0a00 	vstr	s1, [r5]
 8000a2c:	1d2d      	adds	r5, r5, #4
 8000a2e:	1d1b      	adds	r3, r3, #4
 8000a30:	1e52      	subs	r2, r2, #1
 8000a32:	eb01 018b 	add.w	r1, r1, fp, lsl #2
 8000a36:	d1b5      	bne.n	80009a4 <ai_conv2d_kernel_simple_f32+0x74>
 8000a38:	b001      	add	sp, #4
 8000a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000a40 <ai_conv2d_kernel_depthwise_f32>:
 8000a40:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a44:	b084      	sub	sp, #16
 8000a46:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8000a48:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8000a4c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8000a4e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8000a50:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000a52:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 8000a56:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8000a5a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8000a5c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8000a60:	fb09 bb07 	mla	fp, r9, r7, fp
 8000a64:	4611      	mov	r1, r2
 8000a66:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 8000a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000a6c:	9b04      	ldr	r3, [sp, #16]
 8000a6e:	eba5 0e0c 	sub.w	lr, r5, ip
 8000a72:	1b00      	subs	r0, r0, r4
 8000a74:	429a      	cmp	r2, r3
 8000a76:	bf0c      	ite	eq
 8000a78:	ed9f 0a41 	vldreq	s0, [pc, #260]	; 8000b80 <.text_4>
 8000a7c:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000a80:	437d      	muls	r5, r7
 8000a82:	fb0a f505 	mul.w	r5, sl, r5
 8000a86:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8000a8a:	2500      	movs	r5, #0
 8000a8c:	eb01 078a 	add.w	r7, r1, sl, lsl #2
 8000a90:	42b9      	cmp	r1, r7
 8000a92:	fbb6 f6fa 	udiv	r6, r6, sl
 8000a96:	fb0a fe0e 	mul.w	lr, sl, lr
 8000a9a:	eba9 080c 	sub.w	r8, r9, ip
 8000a9e:	fb00 f009 	mul.w	r0, r0, r9
 8000aa2:	9700      	str	r7, [sp, #0]
 8000aa4:	d268      	bcs.n	8000b78 <ai_conv2d_kernel_depthwise_f32+0x138>
 8000aa6:	920e      	str	r2, [sp, #56]	; 0x38
 8000aa8:	9603      	str	r6, [sp, #12]
 8000aaa:	9a03      	ldr	r2, [sp, #12]
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	d05f      	beq.n	8000b70 <ai_conv2d_kernel_depthwise_f32+0x130>
 8000ab0:	9b04      	ldr	r3, [sp, #16]
 8000ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000ab4:	9002      	str	r0, [sp, #8]
 8000ab6:	eb03 0785 	add.w	r7, r3, r5, lsl #2
 8000aba:	9b03      	ldr	r3, [sp, #12]
 8000abc:	f8cd 1004 	str.w	r1, [sp, #4]
 8000ac0:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000ac4:	edd6 0a00 	vldr	s1, [r6]
 8000ac8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8000acc:	2c01      	cmp	r4, #1
 8000ace:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000ad2:	db41      	blt.n	8000b58 <ai_conv2d_kernel_depthwise_f32+0x118>
 8000ad4:	ea4f 0204 	mov.w	r2, r4
 8000ad8:	f1bc 0f01 	cmp.w	ip, #1
 8000adc:	db36      	blt.n	8000b4c <ai_conv2d_kernel_depthwise_f32+0x10c>
 8000ade:	f01c 0103 	ands.w	r1, ip, #3
 8000ae2:	d00b      	beq.n	8000afc <ai_conv2d_kernel_depthwise_f32+0xbc>
 8000ae4:	ed9b 1a00 	vldr	s2, [fp]
 8000ae8:	edd9 1a00 	vldr	s3, [r9]
 8000aec:	1e49      	subs	r1, r1, #1
 8000aee:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000af2:	f10b 0b04 	add.w	fp, fp, #4
 8000af6:	eb09 098a 	add.w	r9, r9, sl, lsl #2
 8000afa:	d1f3      	bne.n	8000ae4 <ai_conv2d_kernel_depthwise_f32+0xa4>
 8000afc:	ea5f 009c 	movs.w	r0, ip, lsr #2
 8000b00:	f000 8024 	beq.w	8000b4c <ai_conv2d_kernel_depthwise_f32+0x10c>
 8000b04:	ed9b 1a00 	vldr	s2, [fp]
 8000b08:	edd9 1a00 	vldr	s3, [r9]
 8000b0c:	eb09 018a 	add.w	r1, r9, sl, lsl #2
 8000b10:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000b14:	eddb 1a01 	vldr	s3, [fp, #4]
 8000b18:	ed91 1a00 	vldr	s2, [r1]
 8000b1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8000b20:	ee41 0a81 	vmla.f32	s1, s3, s2
 8000b24:	ed9b 1a02 	vldr	s2, [fp, #8]
 8000b28:	edd1 1a00 	vldr	s3, [r1]
 8000b2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8000b30:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000b34:	eddb 1a03 	vldr	s3, [fp, #12]
 8000b38:	ed91 1a00 	vldr	s2, [r1]
 8000b3c:	1e40      	subs	r0, r0, #1
 8000b3e:	ee41 0a81 	vmla.f32	s1, s3, s2
 8000b42:	f10b 0b10 	add.w	fp, fp, #16
 8000b46:	eb01 098a 	add.w	r9, r1, sl, lsl #2
 8000b4a:	d1db      	bne.n	8000b04 <ai_conv2d_kernel_depthwise_f32+0xc4>
 8000b4c:	1e52      	subs	r2, r2, #1
 8000b4e:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8000b52:	eb0b 0b88 	add.w	fp, fp, r8, lsl #2
 8000b56:	d1bf      	bne.n	8000ad8 <ai_conv2d_kernel_depthwise_f32+0x98>
 8000b58:	9802      	ldr	r0, [sp, #8]
 8000b5a:	edc7 0a00 	vstr	s1, [r7]
 8000b5e:	1c6d      	adds	r5, r5, #1
 8000b60:	1d3f      	adds	r7, r7, #4
 8000b62:	1d36      	adds	r6, r6, #4
 8000b64:	1e5b      	subs	r3, r3, #1
 8000b66:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
 8000b6a:	d1ab      	bne.n	8000ac4 <ai_conv2d_kernel_depthwise_f32+0x84>
 8000b6c:	9802      	ldr	r0, [sp, #8]
 8000b6e:	9901      	ldr	r1, [sp, #4]
 8000b70:	9a00      	ldr	r2, [sp, #0]
 8000b72:	1d09      	adds	r1, r1, #4
 8000b74:	4291      	cmp	r1, r2
 8000b76:	d398      	bcc.n	8000aaa <ai_conv2d_kernel_depthwise_f32+0x6a>
 8000b78:	b005      	add	sp, #20
 8000b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000b80 <.text_4>:
 8000b80:	00000000 	.word	0x00000000

08000b84 <ai_conv2d_kernel_group_f32>:
 8000b84:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8000b8e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8000b92:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000b94:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000b96:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8000b98:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8000b9a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8000b9c:	ebae 0e0c 	sub.w	lr, lr, ip
 8000ba0:	4692      	mov	sl, r2
 8000ba2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000ba4:	fbb1 f9f2 	udiv	r9, r1, r2
 8000ba8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000baa:	f8cd 900c 	str.w	r9, [sp, #12]
 8000bae:	1a09      	subs	r1, r1, r0
 8000bb0:	4379      	muls	r1, r7
 8000bb2:	461e      	mov	r6, r3
 8000bb4:	fbb7 f3f2 	udiv	r3, r7, r2
 8000bb8:	fb04 fb03 	mul.w	fp, r4, r3
 8000bbc:	fb0e fe0b 	mul.w	lr, lr, fp
 8000bc0:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 8000bc4:	eba7 0903 	sub.w	r9, r7, r3
 8000bc8:	eba4 0800 	sub.w	r8, r4, r0
 8000bcc:	fb04 b405 	mla	r4, r4, r5, fp
 8000bd0:	435c      	muls	r4, r3
 8000bd2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8000bd6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8000bd8:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000bdc:	455e      	cmp	r6, fp
 8000bde:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8000be0:	bf0c      	ite	eq
 8000be2:	ed9f 0a3f 	vldreq	s0, [pc, #252]	; 8000ce0 <.text_6>
 8000be6:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000bea:	4375      	muls	r5, r6
 8000bec:	436f      	muls	r7, r5
 8000bee:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	fb08 f803 	mul.w	r8, r8, r3
 8000bf8:	f04f 0a00 	mov.w	sl, #0
 8000bfc:	d06c      	beq.n	8000cd8 <ai_conv2d_kernel_group_f32+0x154>
 8000bfe:	9200      	str	r2, [sp, #0]
 8000c00:	9a03      	ldr	r2, [sp, #12]
 8000c02:	2a00      	cmp	r2, #0
 8000c04:	d062      	beq.n	8000ccc <ai_conv2d_kernel_group_f32+0x148>
 8000c06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000c08:	9f04      	ldr	r7, [sp, #16]
 8000c0a:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8000c0e:	eb02 068a 	add.w	r6, r2, sl, lsl #2
 8000c12:	9a03      	ldr	r2, [sp, #12]
 8000c14:	f8cd e008 	str.w	lr, [sp, #8]
 8000c18:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 8000c1c:	f8cd 5004 	str.w	r5, [sp, #4]
 8000c20:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8000c24:	edd6 0a00 	vldr	s1, [r6]
 8000c28:	9d01      	ldr	r5, [sp, #4]
 8000c2a:	f1be 0f01 	cmp.w	lr, #1
 8000c2e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000c32:	db3b      	blt.n	8000cac <ai_conv2d_kernel_group_f32+0x128>
 8000c34:	2801      	cmp	r0, #1
 8000c36:	db32      	blt.n	8000c9e <ai_conv2d_kernel_group_f32+0x11a>
 8000c38:	ea4f 0c00 	mov.w	ip, r0
 8000c3c:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8000c40:	455d      	cmp	r5, fp
 8000c42:	d227      	bcs.n	8000c94 <ai_conv2d_kernel_group_f32+0x110>
 8000c44:	ed94 1a00 	vldr	s2, [r4]
 8000c48:	edd5 1a00 	vldr	s3, [r5]
 8000c4c:	1d2d      	adds	r5, r5, #4
 8000c4e:	1d24      	adds	r4, r4, #4
 8000c50:	455d      	cmp	r5, fp
 8000c52:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000c56:	d21d      	bcs.n	8000c94 <ai_conv2d_kernel_group_f32+0x110>
 8000c58:	ed94 1a00 	vldr	s2, [r4]
 8000c5c:	edd5 1a00 	vldr	s3, [r5]
 8000c60:	1d2d      	adds	r5, r5, #4
 8000c62:	1d24      	adds	r4, r4, #4
 8000c64:	455d      	cmp	r5, fp
 8000c66:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000c6a:	d213      	bcs.n	8000c94 <ai_conv2d_kernel_group_f32+0x110>
 8000c6c:	ed94 1a00 	vldr	s2, [r4]
 8000c70:	edd5 1a00 	vldr	s3, [r5]
 8000c74:	1d2d      	adds	r5, r5, #4
 8000c76:	1d24      	adds	r4, r4, #4
 8000c78:	455d      	cmp	r5, fp
 8000c7a:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000c7e:	d209      	bcs.n	8000c94 <ai_conv2d_kernel_group_f32+0x110>
 8000c80:	ed94 1a00 	vldr	s2, [r4]
 8000c84:	edd5 1a00 	vldr	s3, [r5]
 8000c88:	1d2d      	adds	r5, r5, #4
 8000c8a:	1d24      	adds	r4, r4, #4
 8000c8c:	455d      	cmp	r5, fp
 8000c8e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000c92:	d3d7      	bcc.n	8000c44 <ai_conv2d_kernel_group_f32+0xc0>
 8000c94:	f1bc 0c01 	subs.w	ip, ip, #1
 8000c98:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8000c9c:	d1ce      	bne.n	8000c3c <ai_conv2d_kernel_group_f32+0xb8>
 8000c9e:	f1be 0e01 	subs.w	lr, lr, #1
 8000ca2:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8000ca6:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8000caa:	d1c3      	bne.n	8000c34 <ai_conv2d_kernel_group_f32+0xb0>
 8000cac:	9d02      	ldr	r5, [sp, #8]
 8000cae:	edc7 0a00 	vstr	s1, [r7]
 8000cb2:	1d3f      	adds	r7, r7, #4
 8000cb4:	1d36      	adds	r6, r6, #4
 8000cb6:	1e52      	subs	r2, r2, #1
 8000cb8:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8000cbc:	f10a 0a01 	add.w	sl, sl, #1
 8000cc0:	d1ae      	bne.n	8000c20 <ai_conv2d_kernel_group_f32+0x9c>
 8000cc2:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8000cc6:	f8dd e008 	ldr.w	lr, [sp, #8]
 8000cca:	9d01      	ldr	r5, [sp, #4]
 8000ccc:	9a00      	ldr	r2, [sp, #0]
 8000cce:	1e52      	subs	r2, r2, #1
 8000cd0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8000cd4:	9200      	str	r2, [sp, #0]
 8000cd6:	d193      	bne.n	8000c00 <ai_conv2d_kernel_group_f32+0x7c>
 8000cd8:	b005      	add	sp, #20
 8000cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000ce0 <.text_6>:
 8000ce0:	00000000 	.word	0x00000000

08000ce4 <ai_conv2d_kernel_f32>:
 8000ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ce8:	b08d      	sub	sp, #52	; 0x34
 8000cea:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8000cec:	b904      	cbnz	r4, 8000cf0 <ai_conv2d_kernel_f32+0xc>
 8000cee:	460c      	mov	r4, r1
 8000cf0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8000cf2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8000cf4:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8000cf8:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 8000cfc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8000cfe:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8000d02:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8000d06:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8000d0a:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8000d0e:	900b      	str	r0, [sp, #44]	; 0x2c
 8000d10:	1bbf      	subs	r7, r7, r6
 8000d12:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000d14:	f1b8 0f01 	cmp.w	r8, #1
 8000d18:	ebae 0e05 	sub.w	lr, lr, r5
 8000d1c:	d114      	bne.n	8000d48 <ai_conv2d_kernel_f32+0x64>
 8000d1e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8000d22:	9508      	str	r5, [sp, #32]
 8000d24:	9707      	str	r7, [sp, #28]
 8000d26:	9001      	str	r0, [sp, #4]
 8000d28:	f8cd c008 	str.w	ip, [sp, #8]
 8000d2c:	9606      	str	r6, [sp, #24]
 8000d2e:	f8cd b014 	str.w	fp, [sp, #20]
 8000d32:	f8cd a010 	str.w	sl, [sp, #16]
 8000d36:	f8cd 900c 	str.w	r9, [sp, #12]
 8000d3a:	9400      	str	r4, [sp, #0]
 8000d3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000d3e:	f7ff fdf7 	bl	8000930 <ai_conv2d_kernel_simple_f32>
 8000d42:	b00d      	add	sp, #52	; 0x34
 8000d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d48:	4580      	cmp	r8, r0
 8000d4a:	d114      	bne.n	8000d76 <ai_conv2d_kernel_f32+0x92>
 8000d4c:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8000d50:	9508      	str	r5, [sp, #32]
 8000d52:	9707      	str	r7, [sp, #28]
 8000d54:	9001      	str	r0, [sp, #4]
 8000d56:	f8cd c008 	str.w	ip, [sp, #8]
 8000d5a:	9606      	str	r6, [sp, #24]
 8000d5c:	f8cd b014 	str.w	fp, [sp, #20]
 8000d60:	f8cd a010 	str.w	sl, [sp, #16]
 8000d64:	f8cd 900c 	str.w	r9, [sp, #12]
 8000d68:	9400      	str	r4, [sp, #0]
 8000d6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000d6c:	f7ff fe68 	bl	8000a40 <ai_conv2d_kernel_depthwise_f32>
 8000d70:	b00d      	add	sp, #52	; 0x34
 8000d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d76:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8000d7a:	9509      	str	r5, [sp, #36]	; 0x24
 8000d7c:	9708      	str	r7, [sp, #32]
 8000d7e:	9001      	str	r0, [sp, #4]
 8000d80:	f8cd c008 	str.w	ip, [sp, #8]
 8000d84:	9607      	str	r6, [sp, #28]
 8000d86:	f8cd 8018 	str.w	r8, [sp, #24]
 8000d8a:	f8cd b014 	str.w	fp, [sp, #20]
 8000d8e:	f8cd a010 	str.w	sl, [sp, #16]
 8000d92:	f8cd 900c 	str.w	r9, [sp, #12]
 8000d96:	9400      	str	r4, [sp, #0]
 8000d98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000d9a:	f7ff fef3 	bl	8000b84 <ai_conv2d_kernel_group_f32>
 8000d9e:	b00d      	add	sp, #52	; 0x34
 8000da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000da4 <func_dummy>:
 8000da4:	4770      	bx	lr
	...

08000da8 <ai_dict8_dot_array_f32>:
 8000da8:	b4f0      	push	{r4, r5, r6, r7}
 8000daa:	9c04      	ldr	r4, [sp, #16]
 8000dac:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 8000db0:	3d20      	subs	r5, #32
 8000db2:	2c08      	cmp	r4, #8
 8000db4:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8001088 <.text_10>
 8000db8:	d230      	bcs.n	8000e1c <ai_dict8_dot_array_f32+0x74>
 8000dba:	f105 0420 	add.w	r4, r5, #32
 8000dbe:	42a3      	cmp	r3, r4
 8000dc0:	d224      	bcs.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000dc2:	780d      	ldrb	r5, [r1, #0]
 8000dc4:	ed93 1a00 	vldr	s2, [r3]
 8000dc8:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000dcc:	1d1b      	adds	r3, r3, #4
 8000dce:	edd6 0a00 	vldr	s1, [r6]
 8000dd2:	42a3      	cmp	r3, r4
 8000dd4:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000dd8:	d218      	bcs.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000dda:	784d      	ldrb	r5, [r1, #1]
 8000ddc:	ed93 1a00 	vldr	s2, [r3]
 8000de0:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000de4:	1d1b      	adds	r3, r3, #4
 8000de6:	edd6 0a00 	vldr	s1, [r6]
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000df0:	d20c      	bcs.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000df2:	788d      	ldrb	r5, [r1, #2]
 8000df4:	ed93 1a00 	vldr	s2, [r3]
 8000df8:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000dfc:	1d1b      	adds	r3, r3, #4
 8000dfe:	1cc9      	adds	r1, r1, #3
 8000e00:	edd6 0a00 	vldr	s1, [r6]
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e0a:	d3da      	bcc.n	8000dc2 <ai_dict8_dot_array_f32+0x1a>
 8000e0c:	edd0 0a00 	vldr	s1, [r0]
 8000e10:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000e14:	ed80 0a00 	vstr	s0, [r0]
 8000e18:	bcf0      	pop	{r4, r5, r6, r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	f001 0403 	and.w	r4, r1, #3
 8000e20:	2c03      	cmp	r4, #3
 8000e22:	d8f3      	bhi.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000e24:	e8df f004 	tbb	[pc, r4]
 8000e28:	4f433703 	.word	0x4f433703
 8000e2c:	e7ee      	b.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000e2e:	429d      	cmp	r5, r3
 8000e30:	f080 80da 	bcs.w	8000fe8 <ai_dict8_dot_array_f32+0x240>
 8000e34:	f105 0420 	add.w	r4, r5, #32
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d2e7      	bcs.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000e3c:	780d      	ldrb	r5, [r1, #0]
 8000e3e:	ed93 1a00 	vldr	s2, [r3]
 8000e42:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000e46:	1d1b      	adds	r3, r3, #4
 8000e48:	edd6 0a00 	vldr	s1, [r6]
 8000e4c:	42a3      	cmp	r3, r4
 8000e4e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e52:	d2db      	bcs.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000e54:	784d      	ldrb	r5, [r1, #1]
 8000e56:	ed93 1a00 	vldr	s2, [r3]
 8000e5a:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000e5e:	1d1b      	adds	r3, r3, #4
 8000e60:	edd6 0a00 	vldr	s1, [r6]
 8000e64:	42a3      	cmp	r3, r4
 8000e66:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e6a:	d2cf      	bcs.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000e6c:	788d      	ldrb	r5, [r1, #2]
 8000e6e:	ed93 1a00 	vldr	s2, [r3]
 8000e72:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000e76:	1d1b      	adds	r3, r3, #4
 8000e78:	1cc9      	adds	r1, r1, #3
 8000e7a:	edd6 0a00 	vldr	s1, [r6]
 8000e7e:	42a3      	cmp	r3, r4
 8000e80:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e84:	d3da      	bcc.n	8000e3c <ai_dict8_dot_array_f32+0x94>
 8000e86:	edd0 0a00 	vldr	s1, [r0]
 8000e8a:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000e8e:	ed80 0a00 	vstr	s0, [r0]
 8000e92:	bcf0      	pop	{r4, r5, r6, r7}
 8000e94:	4770      	bx	lr
 8000e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000e9a:	ed93 1a00 	vldr	s2, [r3]
 8000e9e:	eb02 0684 	add.w	r6, r2, r4, lsl #2
 8000ea2:	1d1b      	adds	r3, r3, #4
 8000ea4:	edd6 0a00 	vldr	s1, [r6]
 8000ea8:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000eac:	1f2d      	subs	r5, r5, #4
 8000eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000eb2:	ed93 1a00 	vldr	s2, [r3]
 8000eb6:	eb02 0684 	add.w	r6, r2, r4, lsl #2
 8000eba:	1d1b      	adds	r3, r3, #4
 8000ebc:	edd6 0a00 	vldr	s1, [r6]
 8000ec0:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000ec4:	1f2d      	subs	r5, r5, #4
 8000ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000eca:	ed93 1a00 	vldr	s2, [r3]
 8000ece:	eb02 0684 	add.w	r6, r2, r4, lsl #2
 8000ed2:	1d1c      	adds	r4, r3, #4
 8000ed4:	1f2d      	subs	r5, r5, #4
 8000ed6:	edd6 0a00 	vldr	s1, [r6]
 8000eda:	42a5      	cmp	r5, r4
 8000edc:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000ee0:	d34e      	bcc.n	8000f80 <ai_dict8_dot_array_f32+0x1d8>
 8000ee2:	78cf      	ldrb	r7, [r1, #3]
 8000ee4:	ed94 4a00 	vldr	s8, [r4]
 8000ee8:	ed94 3a01 	vldr	s6, [r4, #4]
 8000eec:	ed94 2a02 	vldr	s4, [r4, #8]
 8000ef0:	ed94 1a03 	vldr	s2, [r4, #12]
 8000ef4:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000ef8:	788f      	ldrb	r7, [r1, #2]
 8000efa:	edd6 0a00 	vldr	s1, [r6]
 8000efe:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f02:	784f      	ldrb	r7, [r1, #1]
 8000f04:	edd6 1a00 	vldr	s3, [r6]
 8000f08:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f0c:	780f      	ldrb	r7, [r1, #0]
 8000f0e:	edd6 2a00 	vldr	s5, [r6]
 8000f12:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f16:	f104 0310 	add.w	r3, r4, #16
 8000f1a:	edd6 3a00 	vldr	s7, [r6]
 8000f1e:	790c      	ldrb	r4, [r1, #4]
 8000f20:	ee03 0a84 	vmla.f32	s0, s7, s8
 8000f24:	ee02 0a83 	vmla.f32	s0, s5, s6
 8000f28:	ee01 0a82 	vmla.f32	s0, s3, s4
 8000f2c:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8000f30:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000f34:	794c      	ldrb	r4, [r1, #5]
 8000f36:	edd7 0a00 	vldr	s1, [r7]
 8000f3a:	ed93 4a00 	vldr	s8, [r3]
 8000f3e:	edd3 3a01 	vldr	s7, [r3, #4]
 8000f42:	ed93 3a02 	vldr	s6, [r3, #8]
 8000f46:	edd3 2a03 	vldr	s5, [r3, #12]
 8000f4a:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8000f4e:	798c      	ldrb	r4, [r1, #6]
 8000f50:	ed97 1a00 	vldr	s2, [r7]
 8000f54:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8000f58:	79cc      	ldrb	r4, [r1, #7]
 8000f5a:	edd7 1a00 	vldr	s3, [r7]
 8000f5e:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8000f62:	ee00 0a84 	vmla.f32	s0, s1, s8
 8000f66:	3108      	adds	r1, #8
 8000f68:	f103 0410 	add.w	r4, r3, #16
 8000f6c:	ee01 0a23 	vmla.f32	s0, s2, s7
 8000f70:	ed97 2a00 	vldr	s4, [r7]
 8000f74:	ee01 0a83 	vmla.f32	s0, s3, s6
 8000f78:	42a5      	cmp	r5, r4
 8000f7a:	ee02 0a22 	vmla.f32	s0, s4, s5
 8000f7e:	d2b0      	bcs.n	8000ee2 <ai_dict8_dot_array_f32+0x13a>
 8000f80:	f105 0320 	add.w	r3, r5, #32
 8000f84:	429c      	cmp	r4, r3
 8000f86:	f4bf af41 	bcs.w	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000f8a:	780d      	ldrb	r5, [r1, #0]
 8000f8c:	ed94 1a00 	vldr	s2, [r4]
 8000f90:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000f94:	1d24      	adds	r4, r4, #4
 8000f96:	edd6 0a00 	vldr	s1, [r6]
 8000f9a:	429c      	cmp	r4, r3
 8000f9c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000fa0:	f4bf af34 	bcs.w	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000fa4:	784d      	ldrb	r5, [r1, #1]
 8000fa6:	ed94 1a00 	vldr	s2, [r4]
 8000faa:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000fae:	1d24      	adds	r4, r4, #4
 8000fb0:	edd6 0a00 	vldr	s1, [r6]
 8000fb4:	429c      	cmp	r4, r3
 8000fb6:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000fba:	f4bf af27 	bcs.w	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000fbe:	788d      	ldrb	r5, [r1, #2]
 8000fc0:	ed94 1a00 	vldr	s2, [r4]
 8000fc4:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000fc8:	1d24      	adds	r4, r4, #4
 8000fca:	1cc9      	adds	r1, r1, #3
 8000fcc:	edd6 0a00 	vldr	s1, [r6]
 8000fd0:	429c      	cmp	r4, r3
 8000fd2:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000fd6:	d3d8      	bcc.n	8000f8a <ai_dict8_dot_array_f32+0x1e2>
 8000fd8:	edd0 0a00 	vldr	s1, [r0]
 8000fdc:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000fe0:	ed80 0a00 	vstr	s0, [r0]
 8000fe4:	bcf0      	pop	{r4, r5, r6, r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	78cf      	ldrb	r7, [r1, #3]
 8000fea:	ed93 4a00 	vldr	s8, [r3]
 8000fee:	ed93 3a01 	vldr	s6, [r3, #4]
 8000ff2:	ed93 2a02 	vldr	s4, [r3, #8]
 8000ff6:	ed93 1a03 	vldr	s2, [r3, #12]
 8000ffa:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000ffe:	788f      	ldrb	r7, [r1, #2]
 8001000:	edd6 0a00 	vldr	s1, [r6]
 8001004:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8001008:	784f      	ldrb	r7, [r1, #1]
 800100a:	edd6 1a00 	vldr	s3, [r6]
 800100e:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8001012:	780f      	ldrb	r7, [r1, #0]
 8001014:	edd6 2a00 	vldr	s5, [r6]
 8001018:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 800101c:	f103 0410 	add.w	r4, r3, #16
 8001020:	edd6 3a00 	vldr	s7, [r6]
 8001024:	790b      	ldrb	r3, [r1, #4]
 8001026:	ee03 0a84 	vmla.f32	s0, s7, s8
 800102a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800102e:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001032:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001036:	ee00 0a81 	vmla.f32	s0, s1, s2
 800103a:	794b      	ldrb	r3, [r1, #5]
 800103c:	edd7 0a00 	vldr	s1, [r7]
 8001040:	ed94 4a00 	vldr	s8, [r4]
 8001044:	edd4 3a01 	vldr	s7, [r4, #4]
 8001048:	ed94 3a02 	vldr	s6, [r4, #8]
 800104c:	edd4 2a03 	vldr	s5, [r4, #12]
 8001050:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001054:	798b      	ldrb	r3, [r1, #6]
 8001056:	ed97 1a00 	vldr	s2, [r7]
 800105a:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800105e:	79cb      	ldrb	r3, [r1, #7]
 8001060:	edd7 1a00 	vldr	s3, [r7]
 8001064:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001068:	ee00 0a84 	vmla.f32	s0, s1, s8
 800106c:	3108      	adds	r1, #8
 800106e:	f104 0310 	add.w	r3, r4, #16
 8001072:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001076:	ed97 2a00 	vldr	s4, [r7]
 800107a:	ee01 0a83 	vmla.f32	s0, s3, s6
 800107e:	429d      	cmp	r5, r3
 8001080:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001084:	d2b0      	bcs.n	8000fe8 <ai_dict8_dot_array_f32+0x240>
 8001086:	e6d5      	b.n	8000e34 <ai_dict8_dot_array_f32+0x8c>

08001088 <.text_10>:
 8001088:	00000000 	.word	0x00000000

0800108c <ai_dict4_dot_array_f32>:
 800108c:	b4f0      	push	{r4, r5, r6, r7}
 800108e:	9c04      	ldr	r4, [sp, #16]
 8001090:	0865      	lsrs	r5, r4, #1
 8001092:	006d      	lsls	r5, r5, #1
 8001094:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001098:	42ab      	cmp	r3, r5
 800109a:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 800128c <.text_13>
 800109e:	d22f      	bcs.n	8001100 <ai_dict4_dot_array_f32+0x74>
 80010a0:	f811 6b01 	ldrb.w	r6, [r1], #1
 80010a4:	ed93 2a00 	vldr	s4, [r3]
 80010a8:	ed93 1a01 	vldr	s2, [r3, #4]
 80010ac:	f006 070f 	and.w	r7, r6, #15
 80010b0:	0936      	lsrs	r6, r6, #4
 80010b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80010b6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80010ba:	edd6 1a00 	vldr	s3, [r6]
 80010be:	edd7 0a00 	vldr	s1, [r7]
 80010c2:	3308      	adds	r3, #8
 80010c4:	ee01 0a82 	vmla.f32	s0, s3, s4
 80010c8:	42ab      	cmp	r3, r5
 80010ca:	ee00 0a81 	vmla.f32	s0, s1, s2
 80010ce:	d217      	bcs.n	8001100 <ai_dict4_dot_array_f32+0x74>
 80010d0:	f811 6b01 	ldrb.w	r6, [r1], #1
 80010d4:	ed93 2a00 	vldr	s4, [r3]
 80010d8:	ed93 1a01 	vldr	s2, [r3, #4]
 80010dc:	f006 070f 	and.w	r7, r6, #15
 80010e0:	0936      	lsrs	r6, r6, #4
 80010e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80010e6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80010ea:	edd6 1a00 	vldr	s3, [r6]
 80010ee:	edd7 0a00 	vldr	s1, [r7]
 80010f2:	3308      	adds	r3, #8
 80010f4:	ee01 0a82 	vmla.f32	s0, s3, s4
 80010f8:	42ab      	cmp	r3, r5
 80010fa:	ee00 0a81 	vmla.f32	s0, s1, s2
 80010fe:	d3cf      	bcc.n	80010a0 <ai_dict4_dot_array_f32+0x14>
 8001100:	07e4      	lsls	r4, r4, #31
 8001102:	d509      	bpl.n	8001118 <ai_dict4_dot_array_f32+0x8c>
 8001104:	7809      	ldrb	r1, [r1, #0]
 8001106:	ed93 1a00 	vldr	s2, [r3]
 800110a:	0909      	lsrs	r1, r1, #4
 800110c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001110:	edd2 0a00 	vldr	s1, [r2]
 8001114:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001118:	edd0 1a00 	vldr	s3, [r0]
 800111c:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001120:	ed80 0a00 	vstr	s0, [r0]
 8001124:	bcf0      	pop	{r4, r5, r6, r7}
 8001126:	4770      	bx	lr

08001128 <forward_conv2d>:
 8001128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800112c:	4605      	mov	r5, r0
 800112e:	b09b      	sub	sp, #108	; 0x6c
 8001130:	6968      	ldr	r0, [r5, #20]
 8001132:	6800      	ldr	r0, [r0, #0]
 8001134:	6801      	ldr	r1, [r0, #0]
 8001136:	6842      	ldr	r2, [r0, #4]
 8001138:	6880      	ldr	r0, [r0, #8]
 800113a:	680f      	ldr	r7, [r1, #0]
 800113c:	f8d2 a000 	ldr.w	sl, [r2]
 8001140:	f8d0 e000 	ldr.w	lr, [r0]
 8001144:	6840      	ldr	r0, [r0, #4]
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	920d      	str	r2, [sp, #52]	; 0x34
 800114a:	2800      	cmp	r0, #0
 800114c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	f8da 1010 	ldr.w	r1, [sl, #16]
 8001156:	f8da 900c 	ldr.w	r9, [sl, #12]
 800115a:	693c      	ldr	r4, [r7, #16]
 800115c:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8001160:	8c2b      	ldrh	r3, [r5, #32]
 8001162:	930c      	str	r3, [sp, #48]	; 0x30
 8001164:	8cae      	ldrh	r6, [r5, #36]	; 0x24
 8001166:	960f      	str	r6, [sp, #60]	; 0x3c
 8001168:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800116a:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 800116c:	f8de 300c 	ldr.w	r3, [lr, #12]
 8001170:	930e      	str	r3, [sp, #56]	; 0x38
 8001172:	b292      	uxth	r2, r2
 8001174:	f8de 3008 	ldr.w	r3, [lr, #8]
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	683f      	ldr	r7, [r7, #0]
 800117c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001180:	f8de 7000 	ldr.w	r7, [lr]
 8001184:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8001188:	69ab      	ldr	r3, [r5, #24]
 800118a:	bf1a      	itte	ne
 800118c:	6800      	ldrne	r0, [r0, #0]
 800118e:	6887      	ldrne	r7, [r0, #8]
 8001190:	2700      	moveq	r7, #0
 8001192:	f8da 0000 	ldr.w	r0, [sl]
 8001196:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800119a:	69e8      	ldr	r0, [r5, #28]
 800119c:	2800      	cmp	r0, #0
 800119e:	bf14      	ite	ne
 80011a0:	4605      	movne	r5, r0
 80011a2:	f8df 5714 	ldreq.w	r5, [pc, #1812]	; 80018b8 <.text_18>
 80011a6:	4252      	negs	r2, r2
 80011a8:	2900      	cmp	r1, #0
 80011aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80011ac:	d06b      	beq.n	8001286 <forward_conv2d+0x15e>
 80011ae:	4276      	negs	r6, r6
 80011b0:	9619      	str	r6, [sp, #100]	; 0x64
 80011b2:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 80011b6:	9415      	str	r4, [sp, #84]	; 0x54
 80011b8:	9110      	str	r1, [sp, #64]	; 0x40
 80011ba:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80011be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80011c0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80011c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80011c4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80011c6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80011c8:	4240      	negs	r0, r0
 80011ca:	bfd8      	it	le
 80011cc:	2000      	movle	r0, #0
 80011ce:	1a89      	subs	r1, r1, r2
 80011d0:	4559      	cmp	r1, fp
 80011d2:	bf28      	it	cs
 80011d4:	4659      	movcs	r1, fp
 80011d6:	2c00      	cmp	r4, #0
 80011d8:	fb08 6202 	mla	r2, r8, r2, r6
 80011dc:	d04b      	beq.n	8001276 <forward_conv2d+0x14e>
 80011de:	9402      	str	r4, [sp, #8]
 80011e0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80011e4:	9c01      	ldr	r4, [sp, #4]
 80011e6:	f8dd 9000 	ldr.w	r9, [sp]
 80011ea:	9314      	str	r3, [sp, #80]	; 0x50
 80011ec:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 80011f0:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 80011f4:	9711      	str	r7, [sp, #68]	; 0x44
 80011f6:	9018      	str	r0, [sp, #96]	; 0x60
 80011f8:	9117      	str	r1, [sp, #92]	; 0x5c
 80011fa:	4693      	mov	fp, r2
 80011fc:	9f02      	ldr	r7, [sp, #8]
 80011fe:	4270      	negs	r0, r6
 8001200:	bfd8      	it	le
 8001202:	2000      	movle	r0, #0
 8001204:	eba8 0106 	sub.w	r1, r8, r6
 8001208:	4549      	cmp	r1, r9
 800120a:	bf28      	it	cs
 800120c:	4649      	movcs	r1, r9
 800120e:	910a      	str	r1, [sp, #40]	; 0x28
 8001210:	9009      	str	r0, [sp, #36]	; 0x24
 8001212:	f8cd 9010 	str.w	r9, [sp, #16]
 8001216:	f8cd 800c 	str.w	r8, [sp, #12]
 800121a:	9402      	str	r4, [sp, #8]
 800121c:	4458      	add	r0, fp
 800121e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001220:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8001222:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001224:	9108      	str	r1, [sp, #32]
 8001226:	9207      	str	r2, [sp, #28]
 8001228:	9914      	ldr	r1, [sp, #80]	; 0x50
 800122a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800122c:	9106      	str	r1, [sp, #24]
 800122e:	9205      	str	r2, [sp, #20]
 8001230:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001232:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001234:	9101      	str	r1, [sp, #4]
 8001236:	9200      	str	r2, [sp, #0]
 8001238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800123a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800123c:	4350      	muls	r0, r2
 800123e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001242:	4651      	mov	r1, sl
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff fd4d 	bl	8000ce4 <ai_conv2d_kernel_f32>
 800124a:	4622      	mov	r2, r4
 800124c:	4651      	mov	r1, sl
 800124e:	4650      	mov	r0, sl
 8001250:	47a8      	blx	r5
 8001252:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001254:	1986      	adds	r6, r0, r6
 8001256:	1e7f      	subs	r7, r7, #1
 8001258:	eb0a 0a84 	add.w	sl, sl, r4, lsl #2
 800125c:	4483      	add	fp, r0
 800125e:	d1ce      	bne.n	80011fe <forward_conv2d+0xd6>
 8001260:	9401      	str	r4, [sp, #4]
 8001262:	f8cd 9000 	str.w	r9, [sp]
 8001266:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800126a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800126c:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8001270:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 8001274:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8001276:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001278:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800127a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800127c:	1851      	adds	r1, r2, r1
 800127e:	1e64      	subs	r4, r4, #1
 8001280:	910b      	str	r1, [sp, #44]	; 0x2c
 8001282:	9410      	str	r4, [sp, #64]	; 0x40
 8001284:	d19b      	bne.n	80011be <forward_conv2d+0x96>
 8001286:	b01b      	add	sp, #108	; 0x6c
 8001288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800128c <.text_13>:
 800128c:	00000000 	.word	0x00000000

08001290 <forward_conv2d_nl_pool>:
 8001290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001294:	4603      	mov	r3, r0
 8001296:	b0b5      	sub	sp, #212	; 0xd4
 8001298:	6958      	ldr	r0, [r3, #20]
 800129a:	6800      	ldr	r0, [r0, #0]
 800129c:	6801      	ldr	r1, [r0, #0]
 800129e:	6842      	ldr	r2, [r0, #4]
 80012a0:	f8d1 b000 	ldr.w	fp, [r1]
 80012a4:	6817      	ldr	r7, [r2, #0]
 80012a6:	6880      	ldr	r0, [r0, #8]
 80012a8:	f8d0 a000 	ldr.w	sl, [r0]
 80012ac:	6844      	ldr	r4, [r0, #4]
 80012ae:	f10b 0114 	add.w	r1, fp, #20
 80012b2:	e891 1064 	ldmia.w	r1, {r2, r5, r6, ip}
 80012b6:	a82d      	add	r0, sp, #180	; 0xb4
 80012b8:	e880 1064 	stmia.w	r0, {r2, r5, r6, ip}
 80012bc:	f8db 0008 	ldr.w	r0, [fp, #8]
 80012c0:	9004      	str	r0, [sp, #16]
 80012c2:	68b9      	ldr	r1, [r7, #8]
 80012c4:	9103      	str	r1, [sp, #12]
 80012c6:	6938      	ldr	r0, [r7, #16]
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80012cc:	f8db 5010 	ldr.w	r5, [fp, #16]
 80012d0:	950d      	str	r5, [sp, #52]	; 0x34
 80012d2:	f8db 200c 	ldr.w	r2, [fp, #12]
 80012d6:	9202      	str	r2, [sp, #8]
 80012d8:	8c1d      	ldrh	r5, [r3, #32]
 80012da:	9511      	str	r5, [sp, #68]	; 0x44
 80012dc:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80012de:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80012e0:	9110      	str	r1, [sp, #64]	; 0x40
 80012e2:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
 80012e6:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 80012ea:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80012ec:	f8ad 5004 	strh.w	r5, [sp, #4]
 80012f0:	699e      	ldr	r6, [r3, #24]
 80012f2:	960c      	str	r6, [sp, #48]	; 0x30
 80012f4:	f8da 1008 	ldr.w	r1, [sl, #8]
 80012f8:	9100      	str	r1, [sp, #0]
 80012fa:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80012fc:	f8da 100c 	ldr.w	r1, [sl, #12]
 8001300:	950f      	str	r5, [sp, #60]	; 0x3c
 8001302:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8001304:	951a      	str	r5, [sp, #104]	; 0x68
 8001306:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8001308:	9519      	str	r5, [sp, #100]	; 0x64
 800130a:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800130c:	951d      	str	r5, [sp, #116]	; 0x74
 800130e:	6a3e      	ldr	r6, [r7, #32]
 8001310:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
 8001314:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8001316:	4346      	muls	r6, r0
 8001318:	9605      	str	r6, [sp, #20]
 800131a:	2c00      	cmp	r4, #0
 800131c:	69fe      	ldr	r6, [r7, #28]
 800131e:	9618      	str	r6, [sp, #96]	; 0x60
 8001320:	f8db 6000 	ldr.w	r6, [fp]
 8001324:	68b6      	ldr	r6, [r6, #8]
 8001326:	9617      	str	r6, [sp, #92]	; 0x5c
 8001328:	f8da 6000 	ldr.w	r6, [sl]
 800132c:	68b6      	ldr	r6, [r6, #8]
 800132e:	960b      	str	r6, [sp, #44]	; 0x2c
 8001330:	bf1a      	itte	ne
 8001332:	6824      	ldrne	r4, [r4, #0]
 8001334:	f8d4 b008 	ldrne.w	fp, [r4, #8]
 8001338:	f04f 0b00 	moveq.w	fp, #0
 800133c:	69dc      	ldr	r4, [r3, #28]
 800133e:	2c00      	cmp	r4, #0
 8001340:	bf12      	itee	ne
 8001342:	940e      	strne	r4, [sp, #56]	; 0x38
 8001344:	f8df 4570 	ldreq.w	r4, [pc, #1392]	; 80018b8 <.text_18>
 8001348:	940e      	streq	r4, [sp, #56]	; 0x38
 800134a:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 800134c:	9c00      	ldr	r4, [sp, #0]
 800134e:	9616      	str	r6, [sp, #88]	; 0x58
 8001350:	426d      	negs	r5, r5
 8001352:	9b02      	ldr	r3, [sp, #8]
 8001354:	683f      	ldr	r7, [r7, #0]
 8001356:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 800135a:	eba3 0904 	sub.w	r9, r3, r4
 800135e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001360:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8001362:	4499      	add	r9, r3
 8001364:	fa19 f38e 	uxtah	r3, r9, lr
 8001368:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800136c:	9f05      	ldr	r7, [sp, #20]
 800136e:	fbb3 f4f4 	udiv	r4, r3, r4
 8001372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001374:	1a5b      	subs	r3, r3, r1
 8001376:	4463      	add	r3, ip
 8001378:	199e      	adds	r6, r3, r6
 800137a:	fbb6 f3f2 	udiv	r3, r6, r2
 800137e:	1c64      	adds	r4, r4, #1
 8001380:	1c5b      	adds	r3, r3, #1
 8001382:	4477      	add	r7, lr
 8001384:	2800      	cmp	r0, #0
 8001386:	9715      	str	r7, [sp, #84]	; 0x54
 8001388:	f000 8118 	beq.w	80015bc <forward_conv2d_nl_pool+0x32c>
 800138c:	f1c8 0800 	rsb	r8, r8, #0
 8001390:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
 8001394:	932a      	str	r3, [sp, #168]	; 0xa8
 8001396:	9514      	str	r5, [sp, #80]	; 0x50
 8001398:	9024      	str	r0, [sp, #144]	; 0x90
 800139a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800139c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800139e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80013a0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	bfd8      	it	le
 80013a6:	2300      	movle	r3, #0
 80013a8:	1975      	adds	r5, r6, r5
 80013aa:	42a8      	cmp	r0, r5
 80013ac:	bf32      	itee	cc
 80013ae:	4607      	movcc	r7, r0
 80013b0:	9f14      	ldrcs	r7, [sp, #80]	; 0x50
 80013b2:	19f7      	addcs	r7, r6, r7
 80013b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80013b6:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 80013b8:	2800      	cmp	r0, #0
 80013ba:	f000 80f6 	beq.w	80015aa <forward_conv2d_nl_pool+0x31a>
 80013be:	1bde      	subs	r6, r3, r7
 80013c0:	9633      	str	r6, [sp, #204]	; 0xcc
 80013c2:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
 80013c6:	9425      	str	r4, [sp, #148]	; 0x94
 80013c8:	9323      	str	r3, [sp, #140]	; 0x8c
 80013ca:	9728      	str	r7, [sp, #160]	; 0xa0
 80013cc:	9513      	str	r5, [sp, #76]	; 0x4c
 80013ce:	9022      	str	r0, [sp, #136]	; 0x88
 80013d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80013d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80013d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80013d6:	2800      	cmp	r0, #0
 80013d8:	bfcc      	ite	gt
 80013da:	4606      	movgt	r6, r0
 80013dc:	2600      	movle	r6, #0
 80013de:	9825      	ldr	r0, [sp, #148]	; 0x94
 80013e0:	18e3      	adds	r3, r4, r3
 80013e2:	4298      	cmp	r0, r3
 80013e4:	bf32      	itee	cc
 80013e6:	4603      	movcc	r3, r0
 80013e8:	9b13      	ldrcs	r3, [sp, #76]	; 0x4c
 80013ea:	18e3      	addcs	r3, r4, r3
 80013ec:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80013ee:	1af4      	subs	r4, r6, r3
 80013f0:	fb04 fa00 	mul.w	sl, r4, r0
 80013f4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80013f6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80013f8:	42a0      	cmp	r0, r4
 80013fa:	46f0      	mov	r8, lr
 80013fc:	f04f 0900 	mov.w	r9, #0
 8001400:	f280 80c5 	bge.w	800158e <forward_conv2d_nl_pool+0x2fe>
 8001404:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8001406:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8001408:	922c      	str	r2, [sp, #176]	; 0xb0
 800140a:	4350      	muls	r0, r2
 800140c:	1b04      	subs	r4, r0, r4
 800140e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8001410:	9621      	str	r6, [sp, #132]	; 0x84
 8001412:	1b45      	subs	r5, r0, r5
 8001414:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001416:	9327      	str	r3, [sp, #156]	; 0x9c
 8001418:	9412      	str	r4, [sp, #72]	; 0x48
 800141a:	951f      	str	r5, [sp, #124]	; 0x7c
 800141c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800141e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001420:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8001422:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8001424:	4252      	negs	r2, r2
 8001426:	bfd8      	it	le
 8001428:	2200      	movle	r2, #0
 800142a:	1b1b      	subs	r3, r3, r4
 800142c:	428b      	cmp	r3, r1
 800142e:	bf3a      	itte	cc
 8001430:	9b0d      	ldrcc	r3, [sp, #52]	; 0x34
 8001432:	1b1d      	subcc	r5, r3, r4
 8001434:	460d      	movcs	r5, r1
 8001436:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8001438:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800143a:	4344      	muls	r4, r0
 800143c:	1ae3      	subs	r3, r4, r3
 800143e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8001440:	42b4      	cmp	r4, r6
 8001442:	f280 8099 	bge.w	8001578 <forward_conv2d_nl_pool+0x2e8>
 8001446:	1aad      	subs	r5, r5, r2
 8001448:	9532      	str	r5, [sp, #200]	; 0xc8
 800144a:	eba6 0c04 	sub.w	ip, r6, r4
 800144e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8001450:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 8001452:	9c04      	ldr	r4, [sp, #16]
 8001454:	9f00      	ldr	r7, [sp, #0]
 8001456:	f8cd b098 	str.w	fp, [sp, #152]	; 0x98
 800145a:	4375      	muls	r5, r6
 800145c:	9531      	str	r5, [sp, #196]	; 0xc4
 800145e:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
 8001462:	9d03      	ldr	r5, [sp, #12]
 8001464:	9e02      	ldr	r6, [sp, #8]
 8001466:	9011      	str	r0, [sp, #68]	; 0x44
 8001468:	911c      	str	r1, [sp, #112]	; 0x70
 800146a:	f8cd e0a4 	str.w	lr, [sp, #164]	; 0xa4
 800146e:	921e      	str	r2, [sp, #120]	; 0x78
 8001470:	469a      	mov	sl, r3
 8001472:	46e3      	mov	fp, ip
 8001474:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8001476:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
 800147a:	f1da 0100 	rsbs	r1, sl, #0
 800147e:	bfd8      	it	le
 8001480:	2100      	movle	r1, #0
 8001482:	eb01 0c0a 	add.w	ip, r1, sl
 8001486:	fb0e 220c 	mla	r2, lr, ip, r2
 800148a:	eba6 000a 	sub.w	r0, r6, sl
 800148e:	42b8      	cmp	r0, r7
 8001490:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001492:	4402      	add	r2, r0
 8001494:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001496:	bf34      	ite	cc
 8001498:	eba6 030a 	subcc.w	r3, r6, sl
 800149c:	463b      	movcs	r3, r7
 800149e:	b908      	cbnz	r0, 80014a4 <forward_conv2d_nl_pool+0x214>
 80014a0:	ea4f 0008 	mov.w	r0, r8
 80014a4:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80014a8:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
 80014ac:	1a5b      	subs	r3, r3, r1
 80014ae:	f1be 0f01 	cmp.w	lr, #1
 80014b2:	d112      	bne.n	80014da <forward_conv2d_nl_pool+0x24a>
 80014b4:	9108      	str	r1, [sp, #32]
 80014b6:	9309      	str	r3, [sp, #36]	; 0x24
 80014b8:	f8cd c01c 	str.w	ip, [sp, #28]
 80014bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80014be:	9106      	str	r1, [sp, #24]
 80014c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80014c2:	9105      	str	r1, [sp, #20]
 80014c4:	9000      	str	r0, [sp, #0]
 80014c6:	9704      	str	r7, [sp, #16]
 80014c8:	9603      	str	r6, [sp, #12]
 80014ca:	9502      	str	r5, [sp, #8]
 80014cc:	9401      	str	r4, [sp, #4]
 80014ce:	4641      	mov	r1, r8
 80014d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff fa2c 	bl	8000930 <ai_conv2d_kernel_simple_f32>
 80014d8:	e028      	b.n	800152c <forward_conv2d_nl_pool+0x29c>
 80014da:	45a6      	cmp	lr, r4
 80014dc:	d112      	bne.n	8001504 <forward_conv2d_nl_pool+0x274>
 80014de:	9309      	str	r3, [sp, #36]	; 0x24
 80014e0:	9108      	str	r1, [sp, #32]
 80014e2:	9000      	str	r0, [sp, #0]
 80014e4:	f8cd c01c 	str.w	ip, [sp, #28]
 80014e8:	9704      	str	r7, [sp, #16]
 80014ea:	9603      	str	r6, [sp, #12]
 80014ec:	9502      	str	r5, [sp, #8]
 80014ee:	9401      	str	r4, [sp, #4]
 80014f0:	2000      	movs	r0, #0
 80014f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80014f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80014f6:	9305      	str	r3, [sp, #20]
 80014f8:	9106      	str	r1, [sp, #24]
 80014fa:	4641      	mov	r1, r8
 80014fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014fe:	f7ff fa9f 	bl	8000a40 <ai_conv2d_kernel_depthwise_f32>
 8001502:	e013      	b.n	800152c <forward_conv2d_nl_pool+0x29c>
 8001504:	9109      	str	r1, [sp, #36]	; 0x24
 8001506:	930a      	str	r3, [sp, #40]	; 0x28
 8001508:	9000      	str	r0, [sp, #0]
 800150a:	f8cd c020 	str.w	ip, [sp, #32]
 800150e:	9704      	str	r7, [sp, #16]
 8001510:	9603      	str	r6, [sp, #12]
 8001512:	9502      	str	r5, [sp, #8]
 8001514:	9401      	str	r4, [sp, #4]
 8001516:	2000      	movs	r0, #0
 8001518:	991e      	ldr	r1, [sp, #120]	; 0x78
 800151a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800151c:	9107      	str	r1, [sp, #28]
 800151e:	9306      	str	r3, [sp, #24]
 8001520:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001524:	9105      	str	r1, [sp, #20]
 8001526:	4641      	mov	r1, r8
 8001528:	f7ff fb2c 	bl	8000b84 <ai_conv2d_kernel_group_f32>
 800152c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800152e:	462a      	mov	r2, r5
 8001530:	4641      	mov	r1, r8
 8001532:	4640      	mov	r0, r8
 8001534:	4798      	blx	r3
 8001536:	9820      	ldr	r0, [sp, #128]	; 0x80
 8001538:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800153c:	f109 0901 	add.w	r9, r9, #1
 8001540:	4548      	cmp	r0, r9
 8001542:	bf18      	it	ne
 8001544:	2000      	movne	r0, #0
 8001546:	9000      	str	r0, [sp, #0]
 8001548:	462b      	mov	r3, r5
 800154a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800154c:	462a      	mov	r2, r5
 800154e:	4641      	mov	r1, r8
 8001550:	47e0      	blx	ip
 8001552:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001554:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8001558:	f1bb 0b01 	subs.w	fp, fp, #1
 800155c:	4482      	add	sl, r0
 800155e:	d189      	bne.n	8001474 <forward_conv2d_nl_pool+0x1e4>
 8001560:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001562:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001564:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 8001568:	f8dd e0a4 	ldr.w	lr, [sp, #164]	; 0xa4
 800156c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8001570:	9404      	str	r4, [sp, #16]
 8001572:	9503      	str	r5, [sp, #12]
 8001574:	9602      	str	r6, [sp, #8]
 8001576:	9700      	str	r7, [sp, #0]
 8001578:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800157a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800157c:	189a      	adds	r2, r3, r2
 800157e:	9212      	str	r2, [sp, #72]	; 0x48
 8001580:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8001582:	1e52      	subs	r2, r2, #1
 8001584:	921f      	str	r2, [sp, #124]	; 0x7c
 8001586:	f47f af49 	bne.w	800141c <forward_conv2d_nl_pool+0x18c>
 800158a:	9011      	str	r0, [sp, #68]	; 0x44
 800158c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800158e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001590:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001592:	1818      	adds	r0, r3, r0
 8001594:	9013      	str	r0, [sp, #76]	; 0x4c
 8001596:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001598:	9818      	ldr	r0, [sp, #96]	; 0x60
 800159a:	1e5b      	subs	r3, r3, #1
 800159c:	4486      	add	lr, r0
 800159e:	9322      	str	r3, [sp, #136]	; 0x88
 80015a0:	f47f af16 	bne.w	80013d0 <forward_conv2d_nl_pool+0x140>
 80015a4:	f8dd c0ac 	ldr.w	ip, [sp, #172]	; 0xac
 80015a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80015aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80015ac:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80015ae:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80015b0:	18eb      	adds	r3, r5, r3
 80015b2:	1e76      	subs	r6, r6, #1
 80015b4:	9314      	str	r3, [sp, #80]	; 0x50
 80015b6:	9624      	str	r6, [sp, #144]	; 0x90
 80015b8:	f47f aeef 	bne.w	800139a <forward_conv2d_nl_pool+0x10a>
 80015bc:	b035      	add	sp, #212	; 0xd4
 80015be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080015c4 <forward_dense>:
 80015c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015c8:	b089      	sub	sp, #36	; 0x24
 80015ca:	6940      	ldr	r0, [r0, #20]
 80015cc:	6800      	ldr	r0, [r0, #0]
 80015ce:	6801      	ldr	r1, [r0, #0]
 80015d0:	6842      	ldr	r2, [r0, #4]
 80015d2:	6880      	ldr	r0, [r0, #8]
 80015d4:	f8d0 8000 	ldr.w	r8, [r0]
 80015d8:	6844      	ldr	r4, [r0, #4]
 80015da:	680e      	ldr	r6, [r1, #0]
 80015dc:	f8d2 e000 	ldr.w	lr, [r2]
 80015e0:	f8de 000c 	ldr.w	r0, [lr, #12]
 80015e4:	f8de 2010 	ldr.w	r2, [lr, #16]
 80015e8:	68b5      	ldr	r5, [r6, #8]
 80015ea:	f8de 1008 	ldr.w	r1, [lr, #8]
 80015ee:	4350      	muls	r0, r2
 80015f0:	f8d8 2000 	ldr.w	r2, [r8]
 80015f4:	6813      	ldr	r3, [r2, #0]
 80015f6:	ea4f 5a53 	mov.w	sl, r3, lsr #21
 80015fa:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 80015fe:	f00a 0a03 	and.w	sl, sl, #3
 8001602:	0c5b      	lsrs	r3, r3, #17
 8001604:	2700      	movs	r7, #0
 8001606:	fa29 f90a 	lsr.w	r9, r9, sl
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	f8cd 9004 	str.w	r9, [sp, #4]
 8001612:	2b04      	cmp	r3, #4
 8001614:	6836      	ldr	r6, [r6, #0]
 8001616:	bf14      	ite	ne
 8001618:	2b08      	cmpne	r3, #8
 800161a:	68d7      	ldreq	r7, [r2, #12]
 800161c:	f8de 2000 	ldr.w	r2, [lr]
 8001620:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8001624:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8001628:	68b2      	ldr	r2, [r6, #8]
 800162a:	2800      	cmp	r0, #0
 800162c:	eb09 0681 	add.w	r6, r9, r1, lsl #2
 8001630:	d066      	beq.n	8001700 <forward_dense+0x13c>
 8001632:	f8cd 801c 	str.w	r8, [sp, #28]
 8001636:	9405      	str	r4, [sp, #20]
 8001638:	9106      	str	r1, [sp, #24]
 800163a:	9704      	str	r7, [sp, #16]
 800163c:	9600      	str	r6, [sp, #0]
 800163e:	9003      	str	r0, [sp, #12]
 8001640:	9807      	ldr	r0, [sp, #28]
 8001642:	6801      	ldr	r1, [r0, #0]
 8001644:	6888      	ldr	r0, [r1, #8]
 8001646:	9905      	ldr	r1, [sp, #20]
 8001648:	b109      	cbz	r1, 800164e <forward_dense+0x8a>
 800164a:	680c      	ldr	r4, [r1, #0]
 800164c:	68a1      	ldr	r1, [r4, #8]
 800164e:	9c04      	ldr	r4, [sp, #16]
 8001650:	2c00      	cmp	r4, #0
 8001652:	9c00      	ldr	r4, [sp, #0]
 8001654:	d110      	bne.n	8001678 <forward_dense+0xb4>
 8001656:	45a1      	cmp	r9, r4
 8001658:	d247      	bcs.n	80016ea <forward_dense+0x126>
 800165a:	46a2      	mov	sl, r4
 800165c:	462e      	mov	r6, r5
 800165e:	464f      	mov	r7, r9
 8001660:	461c      	mov	r4, r3
 8001662:	4690      	mov	r8, r2
 8001664:	4681      	mov	r9, r0
 8001666:	460d      	mov	r5, r1
 8001668:	2d00      	cmp	r5, #0
 800166a:	bf19      	ittee	ne
 800166c:	f855 0b04 	ldrne.w	r0, [r5], #4
 8001670:	9002      	strne	r0, [sp, #8]
 8001672:	2100      	moveq	r1, #0
 8001674:	9102      	streq	r1, [sp, #8]
 8001676:	e028      	b.n	80016ca <forward_dense+0x106>
 8001678:	45a1      	cmp	r9, r4
 800167a:	d236      	bcs.n	80016ea <forward_dense+0x126>
 800167c:	9c04      	ldr	r4, [sp, #16]
 800167e:	9f00      	ldr	r7, [sp, #0]
 8001680:	4698      	mov	r8, r3
 8001682:	4616      	mov	r6, r2
 8001684:	4682      	mov	sl, r0
 8001686:	468b      	mov	fp, r1
 8001688:	f1bb 0f00 	cmp.w	fp, #0
 800168c:	bf19      	ittee	ne
 800168e:	f85b 0b04 	ldrne.w	r0, [fp], #4
 8001692:	9002      	strne	r0, [sp, #8]
 8001694:	2000      	moveq	r0, #0
 8001696:	9002      	streq	r0, [sp, #8]
 8001698:	9901      	ldr	r1, [sp, #4]
 800169a:	9500      	str	r5, [sp, #0]
 800169c:	2904      	cmp	r1, #4
 800169e:	4633      	mov	r3, r6
 80016a0:	4622      	mov	r2, r4
 80016a2:	4651      	mov	r1, sl
 80016a4:	a802      	add	r0, sp, #8
 80016a6:	d103      	bne.n	80016b0 <forward_dense+0xec>
 80016a8:	f7ff fcf0 	bl	800108c <ai_dict4_dot_array_f32>
 80016ac:	e002      	b.n	80016b4 <forward_dense+0xf0>
 80016ae:	bf00      	nop
 80016b0:	f7ff fb7a 	bl	8000da8 <ai_dict8_dot_array_f32>
 80016b4:	9802      	ldr	r0, [sp, #8]
 80016b6:	f849 0b04 	str.w	r0, [r9], #4
 80016ba:	45b9      	cmp	r9, r7
 80016bc:	44c2      	add	sl, r8
 80016be:	d3e3      	bcc.n	8001688 <forward_dense+0xc4>
 80016c0:	9404      	str	r4, [sp, #16]
 80016c2:	4643      	mov	r3, r8
 80016c4:	4632      	mov	r2, r6
 80016c6:	9700      	str	r7, [sp, #0]
 80016c8:	e00f      	b.n	80016ea <forward_dense+0x126>
 80016ca:	4633      	mov	r3, r6
 80016cc:	4642      	mov	r2, r8
 80016ce:	4649      	mov	r1, r9
 80016d0:	a802      	add	r0, sp, #8
 80016d2:	f000 fff5 	bl	80026c0 <ai_math_dot_array>
 80016d6:	9802      	ldr	r0, [sp, #8]
 80016d8:	f847 0b04 	str.w	r0, [r7], #4
 80016dc:	4557      	cmp	r7, sl
 80016de:	44a1      	add	r9, r4
 80016e0:	d3c2      	bcc.n	8001668 <forward_dense+0xa4>
 80016e2:	4635      	mov	r5, r6
 80016e4:	4623      	mov	r3, r4
 80016e6:	46b9      	mov	r9, r7
 80016e8:	4642      	mov	r2, r8
 80016ea:	9800      	ldr	r0, [sp, #0]
 80016ec:	9906      	ldr	r1, [sp, #24]
 80016ee:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 80016f2:	9803      	ldr	r0, [sp, #12]
 80016f4:	9400      	str	r4, [sp, #0]
 80016f6:	1e40      	subs	r0, r0, #1
 80016f8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80016fc:	9003      	str	r0, [sp, #12]
 80016fe:	d19f      	bne.n	8001640 <forward_dense+0x7c>
 8001700:	b009      	add	sp, #36	; 0x24
 8001702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001708 <arm_mat_gemm_f32>:
 8001708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800170c:	b08a      	sub	sp, #40	; 0x28
 800170e:	4615      	mov	r5, r2
 8001710:	468b      	mov	fp, r1
 8001712:	469a      	mov	sl, r3
 8001714:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001716:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800171a:	6869      	ldr	r1, [r5, #4]
 800171c:	9100      	str	r1, [sp, #0]
 800171e:	685c      	ldr	r4, [r3, #4]
 8001720:	9402      	str	r4, [sp, #8]
 8001722:	f8b3 9000 	ldrh.w	r9, [r3]
 8001726:	8804      	ldrh	r4, [r0, #0]
 8001728:	885e      	ldrh	r6, [r3, #2]
 800172a:	8840      	ldrh	r0, [r0, #2]
 800172c:	f8bb 1000 	ldrh.w	r1, [fp]
 8001730:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8001734:	f8b5 e000 	ldrh.w	lr, [r5]
 8001738:	886f      	ldrh	r7, [r5, #2]
 800173a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800173e:	9305      	str	r3, [sp, #20]
 8001740:	9304      	str	r3, [sp, #16]
 8001742:	2500      	movs	r5, #0
 8001744:	fa4f f38a 	sxtb.w	r3, sl
 8001748:	2b00      	cmp	r3, #0
 800174a:	bf0c      	ite	eq
 800174c:	46a0      	moveq	r8, r4
 800174e:	4680      	movne	r8, r0
 8001750:	2f01      	cmp	r7, #1
 8001752:	bf0c      	ite	eq
 8001754:	2300      	moveq	r3, #0
 8001756:	2304      	movne	r3, #4
 8001758:	f1be 0f01 	cmp.w	lr, #1
 800175c:	d104      	bne.n	8001768 <arm_mat_gemm_f32+0x60>
 800175e:	2f01      	cmp	r7, #1
 8001760:	d007      	beq.n	8001772 <arm_mat_gemm_f32+0x6a>
 8001762:	f1c6 0e00 	rsb	lr, r6, #0
 8001766:	e005      	b.n	8001774 <arm_mat_gemm_f32+0x6c>
 8001768:	2f01      	cmp	r7, #1
 800176a:	bf08      	it	eq
 800176c:	f04f 0e01 	moveq.w	lr, #1
 8001770:	d000      	beq.n	8001774 <arm_mat_gemm_f32+0x6c>
 8001772:	46ae      	mov	lr, r5
 8001774:	fa0f f78e 	sxth.w	r7, lr
 8001778:	9701      	str	r7, [sp, #4]
 800177a:	fa4f f78a 	sxtb.w	r7, sl
 800177e:	2f00      	cmp	r7, #0
 8001780:	bf0c      	ite	eq
 8001782:	46a3      	moveq	fp, r4
 8001784:	4683      	movne	fp, r0
 8001786:	45cb      	cmp	fp, r9
 8001788:	d115      	bne.n	80017b6 <arm_mat_gemm_f32+0xae>
 800178a:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 800178e:	f1be 0f00 	cmp.w	lr, #0
 8001792:	bf0c      	ite	eq
 8001794:	4691      	moveq	r9, r2
 8001796:	4689      	movne	r9, r1
 8001798:	45b1      	cmp	r9, r6
 800179a:	d10c      	bne.n	80017b6 <arm_mat_gemm_f32+0xae>
 800179c:	fa4f f68a 	sxtb.w	r6, sl
 80017a0:	2e00      	cmp	r6, #0
 80017a2:	bf0c      	ite	eq
 80017a4:	4683      	moveq	fp, r0
 80017a6:	46a3      	movne	fp, r4
 80017a8:	f1be 0f00 	cmp.w	lr, #0
 80017ac:	bf0c      	ite	eq
 80017ae:	460e      	moveq	r6, r1
 80017b0:	4616      	movne	r6, r2
 80017b2:	45b3      	cmp	fp, r6
 80017b4:	d06c      	beq.n	8001890 <arm_mat_gemm_f32+0x188>
 80017b6:	f06f 0002 	mvn.w	r0, #2
 80017ba:	b00a      	add	sp, #40	; 0x28
 80017bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017c0:	9d05      	ldr	r5, [sp, #20]
 80017c2:	0097      	lsls	r7, r2, #2
 80017c4:	9708      	str	r7, [sp, #32]
 80017c6:	0086      	lsls	r6, r0, #2
 80017c8:	9607      	str	r6, [sp, #28]
 80017ca:	f8cd c018 	str.w	ip, [sp, #24]
 80017ce:	f8ad 4002 	strh.w	r4, [sp, #2]
 80017d2:	4644      	mov	r4, r8
 80017d4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80017d8:	fa4f f68a 	sxtb.w	r6, sl
 80017dc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80017e0:	2e00      	cmp	r6, #0
 80017e2:	ed9f 1a34 	vldr	s2, [pc, #208]	; 80018b4 <.text_17>
 80017e6:	bf0c      	ite	eq
 80017e8:	4606      	moveq	r6, r0
 80017ea:	f8bd 6002 	ldrhne.w	r6, [sp, #2]
 80017ee:	b1b6      	cbz	r6, 800181e <arm_mat_gemm_f32+0x116>
 80017f0:	fa4f f78a 	sxtb.w	r7, sl
 80017f4:	2f00      	cmp	r7, #0
 80017f6:	bf0c      	ite	eq
 80017f8:	2704      	moveq	r7, #4
 80017fa:	9f07      	ldrne	r7, [sp, #28]
 80017fc:	f1be 0f00 	cmp.w	lr, #0
 8001800:	edd8 1a00 	vldr	s3, [r8]
 8001804:	ed95 2a00 	vldr	s4, [r5]
 8001808:	44b8      	add	r8, r7
 800180a:	bf0c      	ite	eq
 800180c:	9f08      	ldreq	r7, [sp, #32]
 800180e:	2704      	movne	r7, #4
 8001810:	19ed      	adds	r5, r5, r7
 8001812:	1e76      	subs	r6, r6, #1
 8001814:	b2b7      	uxth	r7, r6
 8001816:	2f00      	cmp	r7, #0
 8001818:	ee01 1a82 	vmla.f32	s2, s3, s4
 800181c:	d1e8      	bne.n	80017f0 <arm_mat_gemm_f32+0xe8>
 800181e:	ee20 1a01 	vmul.f32	s2, s0, s2
 8001822:	eddb 1a00 	vldr	s3, [fp]
 8001826:	1e64      	subs	r4, r4, #1
 8001828:	ee00 1aa1 	vmla.f32	s2, s1, s3
 800182c:	b2a4      	uxth	r4, r4
 800182e:	f1be 0f00 	cmp.w	lr, #0
 8001832:	ed89 1a00 	vstr	s2, [r9]
 8001836:	bf0e      	itee	eq
 8001838:	1b15      	subeq	r5, r2, r4
 800183a:	1b0d      	subne	r5, r1, r4
 800183c:	4355      	mulne	r5, r2
 800183e:	2c00      	cmp	r4, #0
 8001840:	f109 0904 	add.w	r9, r9, #4
 8001844:	449b      	add	fp, r3
 8001846:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 800184a:	d1c5      	bne.n	80017d8 <arm_mat_gemm_f32+0xd0>
 800184c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001850:	9d06      	ldr	r5, [sp, #24]
 8001852:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 8001856:	f8cd c010 	str.w	ip, [sp, #16]
 800185a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800185c:	444e      	add	r6, r9
 800185e:	9603      	str	r6, [sp, #12]
 8001860:	fa4f f68a 	sxtb.w	r6, sl
 8001864:	2e00      	cmp	r6, #0
 8001866:	bf0c      	ite	eq
 8001868:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 800186c:	f04f 0c04 	movne.w	ip, #4
 8001870:	44ac      	add	ip, r5
 8001872:	9d01      	ldr	r5, [sp, #4]
 8001874:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 8001878:	f8bd 5000 	ldrh.w	r5, [sp]
 800187c:	1e6e      	subs	r6, r5, #1
 800187e:	f8ad 6000 	strh.w	r6, [sp]
 8001882:	f8bd 5000 	ldrh.w	r5, [sp]
 8001886:	b955      	cbnz	r5, 800189e <arm_mat_gemm_f32+0x196>
 8001888:	2000      	movs	r0, #0
 800188a:	b00a      	add	sp, #40	; 0x28
 800188c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001890:	f8dd b000 	ldr.w	fp, [sp]
 8001894:	9503      	str	r5, [sp, #12]
 8001896:	f8ad 8000 	strh.w	r8, [sp]
 800189a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800189e:	ae03      	add	r6, sp, #12
 80018a0:	9d02      	ldr	r5, [sp, #8]
 80018a2:	8836      	ldrh	r6, [r6, #0]
 80018a4:	f1be 0f00 	cmp.w	lr, #0
 80018a8:	eb05 0986 	add.w	r9, r5, r6, lsl #2
 80018ac:	bf0c      	ite	eq
 80018ae:	4690      	moveq	r8, r2
 80018b0:	4688      	movne	r8, r1
 80018b2:	e785      	b.n	80017c0 <arm_mat_gemm_f32+0xb8>

080018b4 <.text_17>:
 80018b4:	00000000 	.word	0x00000000

080018b8 <.text_18>:
 80018b8:	08000da5 	.word	0x08000da5

080018bc <forward_gemm>:
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018be:	b08b      	sub	sp, #44	; 0x2c
 80018c0:	6941      	ldr	r1, [r0, #20]
 80018c2:	6809      	ldr	r1, [r1, #0]
 80018c4:	680a      	ldr	r2, [r1, #0]
 80018c6:	6849      	ldr	r1, [r1, #4]
 80018c8:	6809      	ldr	r1, [r1, #0]
 80018ca:	680d      	ldr	r5, [r1, #0]
 80018cc:	6814      	ldr	r4, [r2, #0]
 80018ce:	6853      	ldr	r3, [r2, #4]
 80018d0:	6892      	ldr	r2, [r2, #8]
 80018d2:	68ad      	ldr	r5, [r5, #8]
 80018d4:	68ce      	ldr	r6, [r1, #12]
 80018d6:	690f      	ldr	r7, [r1, #16]
 80018d8:	9509      	str	r5, [sp, #36]	; 0x24
 80018da:	f8ad 7020 	strh.w	r7, [sp, #32]
 80018de:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 80018e2:	6825      	ldr	r5, [r4, #0]
 80018e4:	68e6      	ldr	r6, [r4, #12]
 80018e6:	68ad      	ldr	r5, [r5, #8]
 80018e8:	6924      	ldr	r4, [r4, #16]
 80018ea:	f8ad 4018 	strh.w	r4, [sp, #24]
 80018ee:	f8ad 601a 	strh.w	r6, [sp, #26]
 80018f2:	9507      	str	r5, [sp, #28]
 80018f4:	681c      	ldr	r4, [r3, #0]
 80018f6:	68dd      	ldr	r5, [r3, #12]
 80018f8:	68a4      	ldr	r4, [r4, #8]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001900:	f8ad 5012 	strh.w	r5, [sp, #18]
 8001904:	9405      	str	r4, [sp, #20]
 8001906:	6813      	ldr	r3, [r2, #0]
 8001908:	68d4      	ldr	r4, [r2, #12]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	6912      	ldr	r2, [r2, #16]
 800190e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8001912:	f8ad 400a 	strh.w	r4, [sp, #10]
 8001916:	aa08      	add	r2, sp, #32
 8001918:	9303      	str	r3, [sp, #12]
 800191a:	9201      	str	r2, [sp, #4]
 800191c:	aa02      	add	r2, sp, #8
 800191e:	f990 1021 	ldrsb.w	r1, [r0, #33]	; 0x21
 8001922:	9100      	str	r1, [sp, #0]
 8001924:	a904      	add	r1, sp, #16
 8001926:	f990 3020 	ldrsb.w	r3, [r0, #32]
 800192a:	edd0 0a07 	vldr	s1, [r0, #28]
 800192e:	ed90 0a06 	vldr	s0, [r0, #24]
 8001932:	a806      	add	r0, sp, #24
 8001934:	f7ff fee8 	bl	8001708 <arm_mat_gemm_f32>
 8001938:	b00b      	add	sp, #44	; 0x2c
 800193a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800193c <nl_func_sm_channel_f32>:
 800193c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001940:	460f      	mov	r7, r1
 8001942:	4614      	mov	r4, r2
 8001944:	ed2d 8b02 	vpush	{d8}
 8001948:	2c02      	cmp	r4, #2
 800194a:	4606      	mov	r6, r0
 800194c:	ed97 8a00 	vldr	s16, [r7]
 8001950:	eddf 8ac3 	vldr	s17, [pc, #780]	; 8001c60 <.text_11>
 8001954:	d33d      	bcc.n	80019d2 <nl_func_sm_channel_f32+0x96>
 8001956:	1e61      	subs	r1, r4, #1
 8001958:	1d3a      	adds	r2, r7, #4
 800195a:	f011 0003 	ands.w	r0, r1, #3
 800195e:	d00c      	beq.n	800197a <nl_func_sm_channel_f32+0x3e>
 8001960:	ed92 0a00 	vldr	s0, [r2]
 8001964:	eeb4 0a48 	vcmp.f32	s0, s16
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	bf58      	it	pl
 800196e:	eeb0 8a40 	vmovpl.f32	s16, s0
 8001972:	1e40      	subs	r0, r0, #1
 8001974:	f102 0204 	add.w	r2, r2, #4
 8001978:	d1f2      	bne.n	8001960 <nl_func_sm_channel_f32+0x24>
 800197a:	0889      	lsrs	r1, r1, #2
 800197c:	f000 802b 	beq.w	80019d6 <nl_func_sm_channel_f32+0x9a>
 8001980:	ed92 0a00 	vldr	s0, [r2]
 8001984:	eeb4 0a48 	vcmp.f32	s0, s16
 8001988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198c:	bf58      	it	pl
 800198e:	eeb0 8a40 	vmovpl.f32	s16, s0
 8001992:	ed92 0a01 	vldr	s0, [r2, #4]
 8001996:	eeb4 0a48 	vcmp.f32	s0, s16
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	bf58      	it	pl
 80019a0:	eeb0 8a40 	vmovpl.f32	s16, s0
 80019a4:	ed92 0a02 	vldr	s0, [r2, #8]
 80019a8:	eeb4 0a48 	vcmp.f32	s0, s16
 80019ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b0:	bf58      	it	pl
 80019b2:	eeb0 8a40 	vmovpl.f32	s16, s0
 80019b6:	ed92 0a03 	vldr	s0, [r2, #12]
 80019ba:	eeb4 0a48 	vcmp.f32	s0, s16
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	bf58      	it	pl
 80019c4:	eeb0 8a40 	vmovpl.f32	s16, s0
 80019c8:	1e49      	subs	r1, r1, #1
 80019ca:	f102 0210 	add.w	r2, r2, #16
 80019ce:	d1d7      	bne.n	8001980 <nl_func_sm_channel_f32+0x44>
 80019d0:	e001      	b.n	80019d6 <nl_func_sm_channel_f32+0x9a>
 80019d2:	2c00      	cmp	r4, #0
 80019d4:	d040      	beq.n	8001a58 <nl_func_sm_channel_f32+0x11c>
 80019d6:	46b0      	mov	r8, r6
 80019d8:	ea4f 0504 	mov.w	r5, r4
 80019dc:	ed97 0a00 	vldr	s0, [r7]
 80019e0:	ee30 0a48 	vsub.f32	s0, s0, s16
 80019e4:	f00a f9f0 	bl	800bdc8 <expf>
 80019e8:	1d3f      	adds	r7, r7, #4
 80019ea:	ed88 0a00 	vstr	s0, [r8]
 80019ee:	1e6d      	subs	r5, r5, #1
 80019f0:	ee78 8a80 	vadd.f32	s17, s17, s0
 80019f4:	f108 0804 	add.w	r8, r8, #4
 80019f8:	d1f0      	bne.n	80019dc <nl_func_sm_channel_f32+0xa0>
 80019fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80019fe:	f014 0003 	ands.w	r0, r4, #3
 8001a02:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8001a06:	d009      	beq.n	8001a1c <nl_func_sm_channel_f32+0xe0>
 8001a08:	edd6 0a00 	vldr	s1, [r6]
 8001a0c:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001a10:	edc6 0a00 	vstr	s1, [r6]
 8001a14:	1e40      	subs	r0, r0, #1
 8001a16:	f106 0604 	add.w	r6, r6, #4
 8001a1a:	d1f5      	bne.n	8001a08 <nl_func_sm_channel_f32+0xcc>
 8001a1c:	08a4      	lsrs	r4, r4, #2
 8001a1e:	d01b      	beq.n	8001a58 <nl_func_sm_channel_f32+0x11c>
 8001a20:	edd6 0a00 	vldr	s1, [r6]
 8001a24:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001a28:	edc6 0a00 	vstr	s1, [r6]
 8001a2c:	1e64      	subs	r4, r4, #1
 8001a2e:	ed96 1a01 	vldr	s2, [r6, #4]
 8001a32:	edd6 0a02 	vldr	s1, [r6, #8]
 8001a36:	ee21 1a00 	vmul.f32	s2, s2, s0
 8001a3a:	ed86 1a01 	vstr	s2, [r6, #4]
 8001a3e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001a42:	ed96 1a03 	vldr	s2, [r6, #12]
 8001a46:	edc6 0a02 	vstr	s1, [r6, #8]
 8001a4a:	ee21 1a00 	vmul.f32	s2, s2, s0
 8001a4e:	ed86 1a03 	vstr	s2, [r6, #12]
 8001a52:	f106 0610 	add.w	r6, r6, #16
 8001a56:	d1e3      	bne.n	8001a20 <nl_func_sm_channel_f32+0xe4>
 8001a58:	ecbd 8b02 	vpop	{d8}
 8001a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a60 <nl_func_sm_array_f32>:
 8001a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a64:	b081      	sub	sp, #4
 8001a66:	460c      	mov	r4, r1
 8001a68:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8001a6c:	9e08      	ldr	r6, [sp, #32]
 8001a6e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8001a70:	454c      	cmp	r4, r9
 8001a72:	4680      	mov	r8, r0
 8001a74:	461d      	mov	r5, r3
 8001a76:	d20a      	bcs.n	8001a8e <nl_func_sm_array_f32+0x2e>
 8001a78:	462a      	mov	r2, r5
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	f7ff ff5d 	bl	800193c <nl_func_sm_channel_f32>
 8001a82:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8001a86:	454c      	cmp	r4, r9
 8001a88:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 8001a8c:	d3f4      	bcc.n	8001a78 <nl_func_sm_array_f32+0x18>
 8001a8e:	b001      	add	sp, #4
 8001a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001a94 <nl_func_tanh_array_f32>:
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	460d      	mov	r5, r1
 8001a98:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8001a9c:	42b5      	cmp	r5, r6
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	f080 800a 	bcs.w	8001ab8 <nl_func_tanh_array_f32+0x24>
 8001aa4:	ed95 0a00 	vldr	s0, [r5]
 8001aa8:	f009 feea 	bl	800b880 <tanhf>
 8001aac:	ed84 0a00 	vstr	s0, [r4]
 8001ab0:	1d24      	adds	r4, r4, #4
 8001ab2:	1d2d      	adds	r5, r5, #4
 8001ab4:	42b5      	cmp	r5, r6
 8001ab6:	d3f5      	bcc.n	8001aa4 <nl_func_tanh_array_f32+0x10>
 8001ab8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001abc <nl_func_sigmoid_array_f32>:
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	460d      	mov	r5, r1
 8001ac0:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8001ac4:	42b5      	cmp	r5, r6
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	f080 8014 	bcs.w	8001af4 <nl_func_sigmoid_array_f32+0x38>
 8001acc:	ed95 0a00 	vldr	s0, [r5]
 8001ad0:	eeb1 0a40 	vneg.f32	s0, s0
 8001ad4:	f00a f978 	bl	800bdc8 <expf>
 8001ad8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001adc:	ee70 0a20 	vadd.f32	s1, s0, s1
 8001ae0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001ae4:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001ae8:	ed84 0a00 	vstr	s0, [r4]
 8001aec:	1d24      	adds	r4, r4, #4
 8001aee:	1d2d      	adds	r5, r5, #4
 8001af0:	42b5      	cmp	r5, r6
 8001af2:	d3eb      	bcc.n	8001acc <nl_func_sigmoid_array_f32+0x10>
 8001af4:	bd70      	pop	{r4, r5, r6, pc}
	...

08001af8 <nl_func_sign_array_f32>:
 8001af8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001afc:	4291      	cmp	r1, r2
 8001afe:	d216      	bcs.n	8001b2e <nl_func_sign_array_f32+0x36>
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	ed91 0a00 	vldr	s0, [r1]
 8001b08:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b10:	bfcc      	ite	gt
 8001b12:	ed9f 0ac6 	vldrgt	s0, [pc, #792]	; 8001e2c <.text_16>
 8001b16:	ee00 3a10 	vmovle	s0, r3
 8001b1a:	1d09      	adds	r1, r1, #4
 8001b1c:	4684      	mov	ip, r0
 8001b1e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001b22:	4291      	cmp	r1, r2
 8001b24:	f10c 0004 	add.w	r0, ip, #4
 8001b28:	ed8c 0a00 	vstr	s0, [ip]
 8001b2c:	d3ea      	bcc.n	8001b04 <nl_func_sign_array_f32+0xc>
 8001b2e:	4770      	bx	lr

08001b30 <nl_func_clip_array_f32>:
 8001b30:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001b34:	4291      	cmp	r1, r2
 8001b36:	d216      	bcs.n	8001b66 <nl_func_clip_array_f32+0x36>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	ed91 1a00 	vldr	s2, [r1]
 8001b3e:	1d18      	adds	r0, r3, #4
 8001b40:	eeb4 0a41 	vcmp.f32	s0, s2
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	bf58      	it	pl
 8001b4a:	eeb0 1a40 	vmovpl.f32	s2, s0
 8001b4e:	eeb4 1a60 	vcmp.f32	s2, s1
 8001b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b56:	bf58      	it	pl
 8001b58:	eeb0 1a60 	vmovpl.f32	s2, s1
 8001b5c:	1d09      	adds	r1, r1, #4
 8001b5e:	4291      	cmp	r1, r2
 8001b60:	ed83 1a00 	vstr	s2, [r3]
 8001b64:	d3e8      	bcc.n	8001b38 <nl_func_clip_array_f32+0x8>
 8001b66:	4770      	bx	lr

08001b68 <nl_func_relu_array_f32>:
 8001b68:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001b6c:	4291      	cmp	r1, r2
 8001b6e:	d20f      	bcs.n	8001b90 <nl_func_relu_array_f32+0x28>
 8001b70:	4603      	mov	r3, r0
 8001b72:	ed91 0a00 	vldr	s0, [r1]
 8001b76:	1d18      	adds	r0, r3, #4
 8001b78:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	bfd8      	it	le
 8001b82:	ed9f 0a37 	vldrle	s0, [pc, #220]	; 8001c60 <.text_11>
 8001b86:	1d09      	adds	r1, r1, #4
 8001b88:	4291      	cmp	r1, r2
 8001b8a:	ed83 0a00 	vstr	s0, [r3]
 8001b8e:	d3ef      	bcc.n	8001b70 <nl_func_relu_array_f32+0x8>
 8001b90:	4770      	bx	lr
	...

08001b94 <nl_func_relu6_array_f32>:
 8001b94:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001b98:	4291      	cmp	r1, r2
 8001b9a:	d21a      	bcs.n	8001bd2 <nl_func_relu6_array_f32+0x3e>
 8001b9c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	edd1 0a00 	vldr	s1, [r1]
 8001ba6:	1d18      	adds	r0, r3, #4
 8001ba8:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb0:	dd08      	ble.n	8001bc4 <nl_func_relu6_array_f32+0x30>
 8001bb2:	eef4 0a40 	vcmp.f32	s1, s0
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	bf58      	it	pl
 8001bbc:	eef0 0a40 	vmovpl.f32	s1, s0
 8001bc0:	e002      	b.n	8001bc8 <nl_func_relu6_array_f32+0x34>
 8001bc2:	bf00      	nop
 8001bc4:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001c60 <.text_11>
 8001bc8:	1d09      	adds	r1, r1, #4
 8001bca:	4291      	cmp	r1, r2
 8001bcc:	edc3 0a00 	vstr	s1, [r3]
 8001bd0:	d3e6      	bcc.n	8001ba0 <nl_func_relu6_array_f32+0xc>
 8001bd2:	4770      	bx	lr

08001bd4 <nl_func_selu_array_f32>:
 8001bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd6:	b081      	sub	sp, #4
 8001bd8:	460d      	mov	r5, r1
 8001bda:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8001bde:	ed2d 8b04 	vpush	{d8-d9}
 8001be2:	42b5      	cmp	r5, r6
 8001be4:	4604      	mov	r4, r0
 8001be6:	eef0 8a40 	vmov.f32	s17, s0
 8001bea:	eeb0 8a60 	vmov.f32	s16, s1
 8001bee:	d232      	bcs.n	8001c56 <nl_func_selu_array_f32+0x82>
 8001bf0:	4627      	mov	r7, r4
 8001bf2:	ed95 9a00 	vldr	s18, [r5]
 8001bf6:	1d3c      	adds	r4, r7, #4
 8001bf8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	bf4c      	ite	mi
 8001c02:	eddf 9a17 	vldrmi	s19, [pc, #92]	; 8001c60 <.text_11>
 8001c06:	eef0 9a49 	vmovpl.f32	s19, s18
 8001c0a:	eeb0 0a49 	vmov.f32	s0, s18
 8001c0e:	f00a f8db 	bl	800bdc8 <expf>
 8001c12:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001c16:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001c1a:	ee20 0a28 	vmul.f32	s0, s0, s17
 8001c1e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	dd05      	ble.n	8001c34 <nl_func_selu_array_f32+0x60>
 8001c28:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8001c60 <.text_11>
 8001c2c:	ee79 9a81 	vadd.f32	s19, s19, s2
 8001c30:	e00a      	b.n	8001c48 <nl_func_selu_array_f32+0x74>
 8001c32:	bf00      	nop
 8001c34:	eeb0 0a49 	vmov.f32	s0, s18
 8001c38:	f00a f8c6 	bl	800bdc8 <expf>
 8001c3c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001c40:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001c44:	ee40 9a28 	vmla.f32	s19, s0, s17
 8001c48:	1d2d      	adds	r5, r5, #4
 8001c4a:	ee28 0a29 	vmul.f32	s0, s16, s19
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	ed87 0a00 	vstr	s0, [r7]
 8001c54:	d3cc      	bcc.n	8001bf0 <nl_func_selu_array_f32+0x1c>
 8001c56:	ecbd 8b04 	vpop	{d8-d9}
 8001c5a:	b001      	add	sp, #4
 8001c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001c60 <.text_11>:
 8001c60:	00000000 	.word	0x00000000

08001c64 <nl_func_prelu_array_f32>:
 8001c64:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001c68:	4299      	cmp	r1, r3
 8001c6a:	d220      	bcs.n	8001cae <nl_func_prelu_array_f32+0x4a>
 8001c6c:	ed91 0a00 	vldr	s0, [r1]
 8001c70:	ed92 1a00 	vldr	s2, [r2]
 8001c74:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	bf4c      	ite	mi
 8001c7e:	eddf 0aa5 	vldrmi	s1, [pc, #660]	; 8001f14 <.text_19>
 8001c82:	eef0 0a40 	vmovpl.f32	s1, s0
 8001c86:	eeb1 0a40 	vneg.f32	s0, s0
 8001c8a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	bf48      	it	mi
 8001c94:	ed9f 0a9f 	vldrmi	s0, [pc, #636]	; 8001f14 <.text_19>
 8001c98:	1d09      	adds	r1, r1, #4
 8001c9a:	1d12      	adds	r2, r2, #4
 8001c9c:	4684      	mov	ip, r0
 8001c9e:	ee41 0a40 	vmls.f32	s1, s2, s0
 8001ca2:	4299      	cmp	r1, r3
 8001ca4:	f10c 0004 	add.w	r0, ip, #4
 8001ca8:	edcc 0a00 	vstr	s1, [ip]
 8001cac:	d3de      	bcc.n	8001c6c <nl_func_prelu_array_f32+0x8>
 8001cae:	4770      	bx	lr

08001cb0 <forward_relu>:
 8001cb0:	6940      	ldr	r0, [r0, #20]
 8001cb2:	6803      	ldr	r3, [r0, #0]
 8001cb4:	6819      	ldr	r1, [r3, #0]
 8001cb6:	f8d1 c000 	ldr.w	ip, [r1]
 8001cba:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001cbe:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001cc2:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001cc6:	4342      	muls	r2, r0
 8001cc8:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001ccc:	f8dc c000 	ldr.w	ip, [ip]
 8001cd0:	434a      	muls	r2, r1
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	680b      	ldr	r3, [r1, #0]
 8001cd6:	4342      	muls	r2, r0
 8001cd8:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001cdc:	f8d3 c000 	ldr.w	ip, [r3]
 8001ce0:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001ce4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001ce8:	4290      	cmp	r0, r2
 8001cea:	d20f      	bcs.n	8001d0c <forward_relu+0x5c>
 8001cec:	460b      	mov	r3, r1
 8001cee:	ed90 0a00 	vldr	s0, [r0]
 8001cf2:	1d19      	adds	r1, r3, #4
 8001cf4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfc:	bfd8      	it	le
 8001cfe:	ed9f 0a85 	vldrle	s0, [pc, #532]	; 8001f14 <.text_19>
 8001d02:	1d00      	adds	r0, r0, #4
 8001d04:	4290      	cmp	r0, r2
 8001d06:	ed83 0a00 	vstr	s0, [r3]
 8001d0a:	d3ef      	bcc.n	8001cec <forward_relu+0x3c>
 8001d0c:	4770      	bx	lr
	...

08001d10 <forward_relu6>:
 8001d10:	6940      	ldr	r0, [r0, #20]
 8001d12:	6803      	ldr	r3, [r0, #0]
 8001d14:	6819      	ldr	r1, [r3, #0]
 8001d16:	f8d1 c000 	ldr.w	ip, [r1]
 8001d1a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001d1e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001d22:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001d26:	4342      	muls	r2, r0
 8001d28:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001d2c:	f8dc c000 	ldr.w	ip, [ip]
 8001d30:	434a      	muls	r2, r1
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	680b      	ldr	r3, [r1, #0]
 8001d36:	4342      	muls	r2, r0
 8001d38:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001d3c:	f8d3 c000 	ldr.w	ip, [r3]
 8001d40:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001d44:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001d48:	4290      	cmp	r0, r2
 8001d4a:	d21a      	bcs.n	8001d82 <forward_relu6+0x72>
 8001d4c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001d50:	460b      	mov	r3, r1
 8001d52:	edd0 0a00 	vldr	s1, [r0]
 8001d56:	1d19      	adds	r1, r3, #4
 8001d58:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d60:	dd08      	ble.n	8001d74 <forward_relu6+0x64>
 8001d62:	eef4 0a40 	vcmp.f32	s1, s0
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	bf58      	it	pl
 8001d6c:	eef0 0a40 	vmovpl.f32	s1, s0
 8001d70:	e002      	b.n	8001d78 <forward_relu6+0x68>
 8001d72:	bf00      	nop
 8001d74:	eddf 0a67 	vldr	s1, [pc, #412]	; 8001f14 <.text_19>
 8001d78:	1d00      	adds	r0, r0, #4
 8001d7a:	4290      	cmp	r0, r2
 8001d7c:	edc3 0a00 	vstr	s1, [r3]
 8001d80:	d3e6      	bcc.n	8001d50 <forward_relu6+0x40>
 8001d82:	4770      	bx	lr

08001d84 <forward_selu>:
 8001d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d86:	b081      	sub	sp, #4
 8001d88:	ed2d 8b04 	vpush	{d8-d9}
 8001d8c:	6941      	ldr	r1, [r0, #20]
 8001d8e:	ed90 8a07 	vldr	s16, [r0, #28]
 8001d92:	680d      	ldr	r5, [r1, #0]
 8001d94:	edd0 8a06 	vldr	s17, [r0, #24]
 8001d98:	682a      	ldr	r2, [r5, #0]
 8001d9a:	6814      	ldr	r4, [r2, #0]
 8001d9c:	6820      	ldr	r0, [r4, #0]
 8001d9e:	6863      	ldr	r3, [r4, #4]
 8001da0:	68a1      	ldr	r1, [r4, #8]
 8001da2:	68e2      	ldr	r2, [r4, #12]
 8001da4:	434b      	muls	r3, r1
 8001da6:	6921      	ldr	r1, [r4, #16]
 8001da8:	6884      	ldr	r4, [r0, #8]
 8001daa:	6868      	ldr	r0, [r5, #4]
 8001dac:	4353      	muls	r3, r2
 8001dae:	434b      	muls	r3, r1
 8001db0:	6801      	ldr	r1, [r0, #0]
 8001db2:	680a      	ldr	r2, [r1, #0]
 8001db4:	6895      	ldr	r5, [r2, #8]
 8001db6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8001dba:	42b4      	cmp	r4, r6
 8001dbc:	d231      	bcs.n	8001e22 <forward_selu+0x9e>
 8001dbe:	462f      	mov	r7, r5
 8001dc0:	ed94 9a00 	vldr	s18, [r4]
 8001dc4:	1d3d      	adds	r5, r7, #4
 8001dc6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	bf4c      	ite	mi
 8001dd0:	eddf 9a50 	vldrmi	s19, [pc, #320]	; 8001f14 <.text_19>
 8001dd4:	eef0 9a49 	vmovpl.f32	s19, s18
 8001dd8:	eeb0 0a49 	vmov.f32	s0, s18
 8001ddc:	f009 fff4 	bl	800bdc8 <expf>
 8001de0:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001de4:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001de8:	ee20 0a28 	vmul.f32	s0, s0, s17
 8001dec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	dd04      	ble.n	8001e00 <forward_selu+0x7c>
 8001df6:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8001f14 <.text_19>
 8001dfa:	ee79 9a81 	vadd.f32	s19, s19, s2
 8001dfe:	e009      	b.n	8001e14 <forward_selu+0x90>
 8001e00:	eeb0 0a49 	vmov.f32	s0, s18
 8001e04:	f009 ffe0 	bl	800bdc8 <expf>
 8001e08:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001e0c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001e10:	ee40 9a28 	vmla.f32	s19, s0, s17
 8001e14:	1d24      	adds	r4, r4, #4
 8001e16:	ee28 0a29 	vmul.f32	s0, s16, s19
 8001e1a:	42b4      	cmp	r4, r6
 8001e1c:	ed87 0a00 	vstr	s0, [r7]
 8001e20:	d3cd      	bcc.n	8001dbe <forward_selu+0x3a>
 8001e22:	ecbd 8b04 	vpop	{d8-d9}
 8001e26:	b001      	add	sp, #4
 8001e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e2c <.text_16>:
 8001e2c:	00000001 	.word	0x00000001

08001e30 <forward_prelu>:
 8001e30:	b430      	push	{r4, r5}
 8001e32:	6941      	ldr	r1, [r0, #20]
 8001e34:	680c      	ldr	r4, [r1, #0]
 8001e36:	6822      	ldr	r2, [r4, #0]
 8001e38:	6815      	ldr	r5, [r2, #0]
 8001e3a:	686b      	ldr	r3, [r5, #4]
 8001e3c:	68a9      	ldr	r1, [r5, #8]
 8001e3e:	68ea      	ldr	r2, [r5, #12]
 8001e40:	6980      	ldr	r0, [r0, #24]
 8001e42:	434b      	muls	r3, r1
 8001e44:	6929      	ldr	r1, [r5, #16]
 8001e46:	682d      	ldr	r5, [r5, #0]
 8001e48:	4353      	muls	r3, r2
 8001e4a:	6862      	ldr	r2, [r4, #4]
 8001e4c:	6814      	ldr	r4, [r2, #0]
 8001e4e:	434b      	muls	r3, r1
 8001e50:	68a9      	ldr	r1, [r5, #8]
 8001e52:	6825      	ldr	r5, [r4, #0]
 8001e54:	6804      	ldr	r4, [r0, #0]
 8001e56:	68aa      	ldr	r2, [r5, #8]
 8001e58:	68a0      	ldr	r0, [r4, #8]
 8001e5a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001e5e:	4299      	cmp	r1, r3
 8001e60:	d21f      	bcs.n	8001ea2 <forward_prelu+0x72>
 8001e62:	4614      	mov	r4, r2
 8001e64:	ed91 0a00 	vldr	s0, [r1]
 8001e68:	1d22      	adds	r2, r4, #4
 8001e6a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e72:	bf4c      	ite	mi
 8001e74:	eddf 0a27 	vldrmi	s1, [pc, #156]	; 8001f14 <.text_19>
 8001e78:	eef0 0a40 	vmovpl.f32	s1, s0
 8001e7c:	eeb1 0a40 	vneg.f32	s0, s0
 8001e80:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	bf48      	it	mi
 8001e8a:	ed9f 0a22 	vldrmi	s0, [pc, #136]	; 8001f14 <.text_19>
 8001e8e:	ed90 1a00 	vldr	s2, [r0]
 8001e92:	1d09      	adds	r1, r1, #4
 8001e94:	1d00      	adds	r0, r0, #4
 8001e96:	ee41 0a40 	vmls.f32	s1, s2, s0
 8001e9a:	4299      	cmp	r1, r3
 8001e9c:	edc4 0a00 	vstr	s1, [r4]
 8001ea0:	d3df      	bcc.n	8001e62 <forward_prelu+0x32>
 8001ea2:	bc30      	pop	{r4, r5}
 8001ea4:	4770      	bx	lr
	...

08001ea8 <forward_sign>:
 8001ea8:	6940      	ldr	r0, [r0, #20]
 8001eaa:	6803      	ldr	r3, [r0, #0]
 8001eac:	6819      	ldr	r1, [r3, #0]
 8001eae:	f8d1 c000 	ldr.w	ip, [r1]
 8001eb2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001eb6:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001eba:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001ebe:	4342      	muls	r2, r0
 8001ec0:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001ec4:	f8dc c000 	ldr.w	ip, [ip]
 8001ec8:	434a      	muls	r2, r1
 8001eca:	6859      	ldr	r1, [r3, #4]
 8001ecc:	680b      	ldr	r3, [r1, #0]
 8001ece:	4342      	muls	r2, r0
 8001ed0:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001ed4:	f8d3 c000 	ldr.w	ip, [r3]
 8001ed8:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001edc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001ee0:	4290      	cmp	r0, r2
 8001ee2:	d216      	bcs.n	8001f12 <forward_sign+0x6a>
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee8:	ed90 0a00 	vldr	s0, [r0]
 8001eec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef4:	bfcc      	ite	gt
 8001ef6:	ed9f 0a08 	vldrgt	s0, [pc, #32]	; 8001f18 <.text_20>
 8001efa:	ee00 3a10 	vmovle	s0, r3
 8001efe:	1d00      	adds	r0, r0, #4
 8001f00:	468c      	mov	ip, r1
 8001f02:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001f06:	4290      	cmp	r0, r2
 8001f08:	f10c 0104 	add.w	r1, ip, #4
 8001f0c:	ed8c 0a00 	vstr	s0, [ip]
 8001f10:	d3ea      	bcc.n	8001ee8 <forward_sign+0x40>
 8001f12:	4770      	bx	lr

08001f14 <.text_19>:
 8001f14:	00000000 	.word	0x00000000

08001f18 <.text_20>:
 8001f18:	00000001 	.word	0x00000001

08001f1c <forward_clip>:
 8001f1c:	b430      	push	{r4, r5}
 8001f1e:	6941      	ldr	r1, [r0, #20]
 8001f20:	ed90 0a07 	vldr	s0, [r0, #28]
 8001f24:	680c      	ldr	r4, [r1, #0]
 8001f26:	edd0 0a06 	vldr	s1, [r0, #24]
 8001f2a:	6822      	ldr	r2, [r4, #0]
 8001f2c:	6815      	ldr	r5, [r2, #0]
 8001f2e:	686b      	ldr	r3, [r5, #4]
 8001f30:	68a9      	ldr	r1, [r5, #8]
 8001f32:	68ea      	ldr	r2, [r5, #12]
 8001f34:	6828      	ldr	r0, [r5, #0]
 8001f36:	6880      	ldr	r0, [r0, #8]
 8001f38:	434b      	muls	r3, r1
 8001f3a:	6929      	ldr	r1, [r5, #16]
 8001f3c:	4353      	muls	r3, r2
 8001f3e:	434b      	muls	r3, r1
 8001f40:	6861      	ldr	r1, [r4, #4]
 8001f42:	680a      	ldr	r2, [r1, #0]
 8001f44:	6814      	ldr	r4, [r2, #0]
 8001f46:	68a1      	ldr	r1, [r4, #8]
 8001f48:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8001f4c:	4290      	cmp	r0, r2
 8001f4e:	d216      	bcs.n	8001f7e <forward_clip+0x62>
 8001f50:	460b      	mov	r3, r1
 8001f52:	ed90 1a00 	vldr	s2, [r0]
 8001f56:	1d19      	adds	r1, r3, #4
 8001f58:	eef4 0a41 	vcmp.f32	s1, s2
 8001f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f60:	bf58      	it	pl
 8001f62:	eeb0 1a60 	vmovpl.f32	s2, s1
 8001f66:	eeb4 1a40 	vcmp.f32	s2, s0
 8001f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6e:	bf58      	it	pl
 8001f70:	eeb0 1a40 	vmovpl.f32	s2, s0
 8001f74:	1d00      	adds	r0, r0, #4
 8001f76:	4290      	cmp	r0, r2
 8001f78:	ed83 1a00 	vstr	s2, [r3]
 8001f7c:	d3e8      	bcc.n	8001f50 <forward_clip+0x34>
 8001f7e:	bc30      	pop	{r4, r5}
 8001f80:	4770      	bx	lr
	...

08001f84 <forward_sigmoid>:
 8001f84:	b570      	push	{r4, r5, r6, lr}
 8001f86:	6940      	ldr	r0, [r0, #20]
 8001f88:	6803      	ldr	r3, [r0, #0]
 8001f8a:	6819      	ldr	r1, [r3, #0]
 8001f8c:	680c      	ldr	r4, [r1, #0]
 8001f8e:	6862      	ldr	r2, [r4, #4]
 8001f90:	68a0      	ldr	r0, [r4, #8]
 8001f92:	68e1      	ldr	r1, [r4, #12]
 8001f94:	4342      	muls	r2, r0
 8001f96:	6920      	ldr	r0, [r4, #16]
 8001f98:	6824      	ldr	r4, [r4, #0]
 8001f9a:	68a4      	ldr	r4, [r4, #8]
 8001f9c:	434a      	muls	r2, r1
 8001f9e:	4342      	muls	r2, r0
 8001fa0:	6858      	ldr	r0, [r3, #4]
 8001fa2:	6801      	ldr	r1, [r0, #0]
 8001fa4:	680b      	ldr	r3, [r1, #0]
 8001fa6:	689d      	ldr	r5, [r3, #8]
 8001fa8:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8001fac:	42b4      	cmp	r4, r6
 8001fae:	d213      	bcs.n	8001fd8 <forward_sigmoid+0x54>
 8001fb0:	ed94 0a00 	vldr	s0, [r4]
 8001fb4:	eeb1 0a40 	vneg.f32	s0, s0
 8001fb8:	f009 ff06 	bl	800bdc8 <expf>
 8001fbc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001fc0:	ee70 0a20 	vadd.f32	s1, s0, s1
 8001fc4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001fc8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001fcc:	ed85 0a00 	vstr	s0, [r5]
 8001fd0:	1d2d      	adds	r5, r5, #4
 8001fd2:	1d24      	adds	r4, r4, #4
 8001fd4:	42b4      	cmp	r4, r6
 8001fd6:	d3eb      	bcc.n	8001fb0 <forward_sigmoid+0x2c>
 8001fd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001fdc <forward_tanh>:
 8001fdc:	b570      	push	{r4, r5, r6, lr}
 8001fde:	6940      	ldr	r0, [r0, #20]
 8001fe0:	6803      	ldr	r3, [r0, #0]
 8001fe2:	6819      	ldr	r1, [r3, #0]
 8001fe4:	680c      	ldr	r4, [r1, #0]
 8001fe6:	6862      	ldr	r2, [r4, #4]
 8001fe8:	68a0      	ldr	r0, [r4, #8]
 8001fea:	68e1      	ldr	r1, [r4, #12]
 8001fec:	4342      	muls	r2, r0
 8001fee:	6920      	ldr	r0, [r4, #16]
 8001ff0:	6824      	ldr	r4, [r4, #0]
 8001ff2:	68a4      	ldr	r4, [r4, #8]
 8001ff4:	434a      	muls	r2, r1
 8001ff6:	4342      	muls	r2, r0
 8001ff8:	6858      	ldr	r0, [r3, #4]
 8001ffa:	6801      	ldr	r1, [r0, #0]
 8001ffc:	680b      	ldr	r3, [r1, #0]
 8001ffe:	689d      	ldr	r5, [r3, #8]
 8002000:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8002004:	42b4      	cmp	r4, r6
 8002006:	d209      	bcs.n	800201c <forward_tanh+0x40>
 8002008:	ed94 0a00 	vldr	s0, [r4]
 800200c:	f009 fc38 	bl	800b880 <tanhf>
 8002010:	ed85 0a00 	vstr	s0, [r5]
 8002014:	1d2d      	adds	r5, r5, #4
 8002016:	1d24      	adds	r4, r4, #4
 8002018:	42b4      	cmp	r4, r6
 800201a:	d3f5      	bcc.n	8002008 <forward_tanh+0x2c>
 800201c:	bd70      	pop	{r4, r5, r6, pc}

0800201e <forward_sm>:
 800201e:	b530      	push	{r4, r5, lr}
 8002020:	b083      	sub	sp, #12
 8002022:	6940      	ldr	r0, [r0, #20]
 8002024:	6804      	ldr	r4, [r0, #0]
 8002026:	6821      	ldr	r1, [r4, #0]
 8002028:	680d      	ldr	r5, [r1, #0]
 800202a:	68aa      	ldr	r2, [r5, #8]
 800202c:	9201      	str	r2, [sp, #4]
 800202e:	9200      	str	r2, [sp, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	6868      	ldr	r0, [r5, #4]
 8002034:	68e9      	ldr	r1, [r5, #12]
 8002036:	4342      	muls	r2, r0
 8002038:	6928      	ldr	r0, [r5, #16]
 800203a:	682d      	ldr	r5, [r5, #0]
 800203c:	434a      	muls	r2, r1
 800203e:	4342      	muls	r2, r0
 8002040:	6860      	ldr	r0, [r4, #4]
 8002042:	6804      	ldr	r4, [r0, #0]
 8002044:	68a9      	ldr	r1, [r5, #8]
 8002046:	6825      	ldr	r5, [r4, #0]
 8002048:	68a8      	ldr	r0, [r5, #8]
 800204a:	f7ff fd09 	bl	8001a60 <nl_func_sm_array_f32>
 800204e:	b003      	add	sp, #12
 8002050:	bd30      	pop	{r4, r5, pc}
	...

08002054 <pool_func_mp_array_f32>:
 8002054:	b470      	push	{r4, r5, r6}
 8002056:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800205a:	42a1      	cmp	r1, r4
 800205c:	d257      	bcs.n	800210e <pool_func_mp_array_f32+0xba>
 800205e:	2b00      	cmp	r3, #0
 8002060:	d051      	beq.n	8002106 <pool_func_mp_array_f32+0xb2>
 8002062:	f013 0203 	ands.w	r2, r3, #3
 8002066:	460d      	mov	r5, r1
 8002068:	4606      	mov	r6, r0
 800206a:	d011      	beq.n	8002090 <pool_func_mp_array_f32+0x3c>
 800206c:	ed96 0a00 	vldr	s0, [r6]
 8002070:	edd5 0a00 	vldr	s1, [r5]
 8002074:	eef4 0a40 	vcmp.f32	s1, s0
 8002078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207c:	bf58      	it	pl
 800207e:	eeb0 0a60 	vmovpl.f32	s0, s1
 8002082:	ed86 0a00 	vstr	s0, [r6]
 8002086:	1e52      	subs	r2, r2, #1
 8002088:	1d36      	adds	r6, r6, #4
 800208a:	1d2d      	adds	r5, r5, #4
 800208c:	2a00      	cmp	r2, #0
 800208e:	d1ed      	bne.n	800206c <pool_func_mp_array_f32+0x18>
 8002090:	089a      	lsrs	r2, r3, #2
 8002092:	d038      	beq.n	8002106 <pool_func_mp_array_f32+0xb2>
 8002094:	edd5 0a00 	vldr	s1, [r5]
 8002098:	edd6 1a00 	vldr	s3, [r6]
 800209c:	eef4 0a61 	vcmp.f32	s1, s3
 80020a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a4:	bf48      	it	mi
 80020a6:	eef0 0a61 	vmovmi.f32	s1, s3
 80020aa:	edc6 0a00 	vstr	s1, [r6]
 80020ae:	edd5 0a01 	vldr	s1, [r5, #4]
 80020b2:	edd6 1a01 	vldr	s3, [r6, #4]
 80020b6:	ed96 0a02 	vldr	s0, [r6, #8]
 80020ba:	eef4 0a61 	vcmp.f32	s1, s3
 80020be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c2:	bf48      	it	mi
 80020c4:	eef0 0a61 	vmovmi.f32	s1, s3
 80020c8:	edc6 0a01 	vstr	s1, [r6, #4]
 80020cc:	ed95 1a02 	vldr	s2, [r5, #8]
 80020d0:	edd6 1a03 	vldr	s3, [r6, #12]
 80020d4:	eeb4 1a40 	vcmp.f32	s2, s0
 80020d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020dc:	bf48      	it	mi
 80020de:	eeb0 1a40 	vmovmi.f32	s2, s0
 80020e2:	ed86 1a02 	vstr	s2, [r6, #8]
 80020e6:	edd5 0a03 	vldr	s1, [r5, #12]
 80020ea:	eef4 0a61 	vcmp.f32	s1, s3
 80020ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f2:	bf58      	it	pl
 80020f4:	eef0 1a60 	vmovpl.f32	s3, s1
 80020f8:	edc6 1a03 	vstr	s3, [r6, #12]
 80020fc:	1e52      	subs	r2, r2, #1
 80020fe:	3610      	adds	r6, #16
 8002100:	3510      	adds	r5, #16
 8002102:	2a00      	cmp	r2, #0
 8002104:	d1c6      	bne.n	8002094 <pool_func_mp_array_f32+0x40>
 8002106:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800210a:	42a1      	cmp	r1, r4
 800210c:	d3a7      	bcc.n	800205e <pool_func_mp_array_f32+0xa>
 800210e:	bc70      	pop	{r4, r5, r6}
 8002110:	4770      	bx	lr
	...

08002114 <pool_func_ap_array_f32>:
 8002114:	b470      	push	{r4, r5, r6}
 8002116:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800211a:	42a1      	cmp	r1, r4
 800211c:	d24f      	bcs.n	80021be <pool_func_ap_array_f32+0xaa>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d049      	beq.n	80021b6 <pool_func_ap_array_f32+0xa2>
 8002122:	f013 0203 	ands.w	r2, r3, #3
 8002126:	460d      	mov	r5, r1
 8002128:	4606      	mov	r6, r0
 800212a:	d00e      	beq.n	800214a <pool_func_ap_array_f32+0x36>
 800212c:	ed95 0a00 	vldr	s0, [r5]
 8002130:	4288      	cmp	r0, r1
 8002132:	bf1c      	itt	ne
 8002134:	edd6 0a00 	vldrne	s1, [r6]
 8002138:	ee30 0a80 	vaddne.f32	s0, s1, s0
 800213c:	ed86 0a00 	vstr	s0, [r6]
 8002140:	1e52      	subs	r2, r2, #1
 8002142:	1d36      	adds	r6, r6, #4
 8002144:	1d2d      	adds	r5, r5, #4
 8002146:	2a00      	cmp	r2, #0
 8002148:	d1f0      	bne.n	800212c <pool_func_ap_array_f32+0x18>
 800214a:	089a      	lsrs	r2, r3, #2
 800214c:	d033      	beq.n	80021b6 <pool_func_ap_array_f32+0xa2>
 800214e:	4288      	cmp	r0, r1
 8002150:	edd5 1a00 	vldr	s3, [r5]
 8002154:	d10c      	bne.n	8002170 <pool_func_ap_array_f32+0x5c>
 8002156:	edc6 1a00 	vstr	s3, [r6]
 800215a:	ed95 0a01 	vldr	s0, [r5, #4]
 800215e:	ed86 0a01 	vstr	s0, [r6, #4]
 8002162:	edd5 1a02 	vldr	s3, [r5, #8]
 8002166:	edc6 1a02 	vstr	s3, [r6, #8]
 800216a:	edd5 1a03 	vldr	s3, [r5, #12]
 800216e:	e01b      	b.n	80021a8 <pool_func_ap_array_f32+0x94>
 8002170:	edd6 0a00 	vldr	s1, [r6]
 8002174:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8002178:	ed86 0a00 	vstr	s0, [r6]
 800217c:	ed96 1a01 	vldr	s2, [r6, #4]
 8002180:	ed95 0a01 	vldr	s0, [r5, #4]
 8002184:	edd6 1a02 	vldr	s3, [r6, #8]
 8002188:	ee31 0a00 	vadd.f32	s0, s2, s0
 800218c:	ed86 0a01 	vstr	s0, [r6, #4]
 8002190:	edd5 0a02 	vldr	s1, [r5, #8]
 8002194:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8002198:	ed86 0a02 	vstr	s0, [r6, #8]
 800219c:	ed96 0a03 	vldr	s0, [r6, #12]
 80021a0:	ed95 1a03 	vldr	s2, [r5, #12]
 80021a4:	ee70 1a01 	vadd.f32	s3, s0, s2
 80021a8:	edc6 1a03 	vstr	s3, [r6, #12]
 80021ac:	1e52      	subs	r2, r2, #1
 80021ae:	3610      	adds	r6, #16
 80021b0:	3510      	adds	r5, #16
 80021b2:	2a00      	cmp	r2, #0
 80021b4:	d1cb      	bne.n	800214e <pool_func_ap_array_f32+0x3a>
 80021b6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80021ba:	42a1      	cmp	r1, r4
 80021bc:	d3af      	bcc.n	800211e <pool_func_ap_array_f32+0xa>
 80021be:	9903      	ldr	r1, [sp, #12]
 80021c0:	b3a1      	cbz	r1, 800222c <pool_func_ap_array_f32+0x118>
 80021c2:	ee00 1a10 	vmov	s0, r1
 80021c6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80021ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80021ce:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80021d2:	b35b      	cbz	r3, 800222c <pool_func_ap_array_f32+0x118>
 80021d4:	f013 0103 	ands.w	r1, r3, #3
 80021d8:	f000 800a 	beq.w	80021f0 <pool_func_ap_array_f32+0xdc>
 80021dc:	edd0 0a00 	vldr	s1, [r0]
 80021e0:	ee60 0a80 	vmul.f32	s1, s1, s0
 80021e4:	edc0 0a00 	vstr	s1, [r0]
 80021e8:	1e49      	subs	r1, r1, #1
 80021ea:	f100 0004 	add.w	r0, r0, #4
 80021ee:	d1f5      	bne.n	80021dc <pool_func_ap_array_f32+0xc8>
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	d01b      	beq.n	800222c <pool_func_ap_array_f32+0x118>
 80021f4:	edd0 0a00 	vldr	s1, [r0]
 80021f8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80021fc:	edc0 0a00 	vstr	s1, [r0]
 8002200:	1e5b      	subs	r3, r3, #1
 8002202:	ed90 1a01 	vldr	s2, [r0, #4]
 8002206:	edd0 0a02 	vldr	s1, [r0, #8]
 800220a:	ee21 1a00 	vmul.f32	s2, s2, s0
 800220e:	ed80 1a01 	vstr	s2, [r0, #4]
 8002212:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002216:	ed90 1a03 	vldr	s2, [r0, #12]
 800221a:	edc0 0a02 	vstr	s1, [r0, #8]
 800221e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002222:	ed80 1a03 	vstr	s2, [r0, #12]
 8002226:	f100 0010 	add.w	r0, r0, #16
 800222a:	d1e3      	bne.n	80021f4 <pool_func_ap_array_f32+0xe0>
 800222c:	bc70      	pop	{r4, r5, r6}
 800222e:	4770      	bx	lr

08002230 <forward_mp>:
 8002230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002234:	4603      	mov	r3, r0
 8002236:	b08e      	sub	sp, #56	; 0x38
 8002238:	6958      	ldr	r0, [r3, #20]
 800223a:	6800      	ldr	r0, [r0, #0]
 800223c:	6801      	ldr	r1, [r0, #0]
 800223e:	6840      	ldr	r0, [r0, #4]
 8002240:	680c      	ldr	r4, [r1, #0]
 8002242:	6807      	ldr	r7, [r0, #0]
 8002244:	6921      	ldr	r1, [r4, #16]
 8002246:	693d      	ldr	r5, [r7, #16]
 8002248:	9109      	str	r1, [sp, #36]	; 0x24
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	9208      	str	r2, [sp, #32]
 800224e:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8002252:	68a1      	ldr	r1, [r4, #8]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	69d8      	ldr	r0, [r3, #28]
 8002258:	9007      	str	r0, [sp, #28]
 800225a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800225c:	6a18      	ldr	r0, [r3, #32]
 800225e:	960d      	str	r6, [sp, #52]	; 0x34
 8002260:	683f      	ldr	r7, [r7, #0]
 8002262:	6824      	ldr	r4, [r4, #0]
 8002264:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8002268:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 800226a:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800226c:	68a4      	ldr	r4, [r4, #8]
 800226e:	427f      	negs	r7, r7
 8002270:	2d00      	cmp	r5, #0
 8002272:	9700      	str	r7, [sp, #0]
 8002274:	f000 80d9 	beq.w	800242a <forward_mp+0x1fa>
 8002278:	9501      	str	r5, [sp, #4]
 800227a:	4276      	negs	r6, r6
 800227c:	960c      	str	r6, [sp, #48]	; 0x30
 800227e:	fb01 f508 	mul.w	r5, r1, r8
 8002282:	950b      	str	r5, [sp, #44]	; 0x2c
 8002284:	9d00      	ldr	r5, [sp, #0]
 8002286:	9b00      	ldr	r3, [sp, #0]
 8002288:	9f00      	ldr	r7, [sp, #0]
 800228a:	426d      	negs	r5, r5
 800228c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800228e:	bfcc      	ite	gt
 8002290:	2600      	movgt	r6, #0
 8002292:	9e00      	ldrle	r6, [sp, #0]
 8002294:	1aeb      	subs	r3, r5, r3
 8002296:	9d07      	ldr	r5, [sp, #28]
 8002298:	42ab      	cmp	r3, r5
 800229a:	bf88      	it	hi
 800229c:	462b      	movhi	r3, r5
 800229e:	19df      	adds	r7, r3, r7
 80022a0:	9b08      	ldr	r3, [sp, #32]
 80022a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80b7 	beq.w	8002418 <forward_mp+0x1e8>
 80022aa:	fb08 fa06 	mul.w	sl, r8, r6
 80022ae:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80022b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80022b6:	9202      	str	r2, [sp, #8]
 80022b8:	9006      	str	r0, [sp, #24]
 80022ba:	9605      	str	r6, [sp, #20]
 80022bc:	9704      	str	r7, [sp, #16]
 80022be:	4268      	negs	r0, r5
 80022c0:	9f03      	ldr	r7, [sp, #12]
 80022c2:	9a02      	ldr	r2, [sp, #8]
 80022c4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80022c8:	bfcc      	ite	gt
 80022ca:	2000      	movgt	r0, #0
 80022cc:	4628      	movle	r0, r5
 80022ce:	1b7f      	subs	r7, r7, r5
 80022d0:	4297      	cmp	r7, r2
 80022d2:	bf88      	it	hi
 80022d4:	4617      	movhi	r7, r2
 80022d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80022d8:	197f      	adds	r7, r7, r5
 80022da:	1a3f      	subs	r7, r7, r0
 80022dc:	1880      	adds	r0, r0, r2
 80022de:	4348      	muls	r0, r1
 80022e0:	434f      	muls	r7, r1
 80022e2:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 80022e6:	b311      	cbz	r1, 800232e <forward_mp+0xfe>
 80022e8:	f011 0003 	ands.w	r0, r1, #3
 80022ec:	4672      	mov	r2, lr
 80022ee:	4666      	mov	r6, ip
 80022f0:	f000 8006 	beq.w	8002300 <forward_mp+0xd0>
 80022f4:	f856 9b04 	ldr.w	r9, [r6], #4
 80022f8:	f842 9b04 	str.w	r9, [r2], #4
 80022fc:	1e40      	subs	r0, r0, #1
 80022fe:	d1f9      	bne.n	80022f4 <forward_mp+0xc4>
 8002300:	0888      	lsrs	r0, r1, #2
 8002302:	d014      	beq.n	800232e <forward_mp+0xfe>
 8002304:	ed96 0a00 	vldr	s0, [r6]
 8002308:	ed82 0a00 	vstr	s0, [r2]
 800230c:	1e40      	subs	r0, r0, #1
 800230e:	edd6 0a01 	vldr	s1, [r6, #4]
 8002312:	edc2 0a01 	vstr	s1, [r2, #4]
 8002316:	ed96 0a02 	vldr	s0, [r6, #8]
 800231a:	ed82 0a02 	vstr	s0, [r2, #8]
 800231e:	edd6 0a03 	vldr	s1, [r6, #12]
 8002322:	edc2 0a03 	vstr	s1, [r2, #12]
 8002326:	3210      	adds	r2, #16
 8002328:	3610      	adds	r6, #16
 800232a:	2800      	cmp	r0, #0
 800232c:	d1ea      	bne.n	8002304 <forward_mp+0xd4>
 800232e:	9805      	ldr	r0, [sp, #20]
 8002330:	9a04      	ldr	r2, [sp, #16]
 8002332:	4290      	cmp	r0, r2
 8002334:	da66      	bge.n	8002404 <forward_mp+0x1d4>
 8002336:	4610      	mov	r0, r2
 8002338:	9a05      	ldr	r2, [sp, #20]
 800233a:	1a82      	subs	r2, r0, r2
 800233c:	46e2      	mov	sl, ip
 800233e:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 8002342:	45da      	cmp	sl, fp
 8002344:	d25a      	bcs.n	80023fc <forward_mp+0x1cc>
 8002346:	2900      	cmp	r1, #0
 8002348:	d054      	beq.n	80023f4 <forward_mp+0x1c4>
 800234a:	f011 0003 	ands.w	r0, r1, #3
 800234e:	4656      	mov	r6, sl
 8002350:	46f1      	mov	r9, lr
 8002352:	d012      	beq.n	800237a <forward_mp+0x14a>
 8002354:	ed99 0a00 	vldr	s0, [r9]
 8002358:	edd6 0a00 	vldr	s1, [r6]
 800235c:	eef4 0a40 	vcmp.f32	s1, s0
 8002360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002364:	bf58      	it	pl
 8002366:	eeb0 0a60 	vmovpl.f32	s0, s1
 800236a:	1e40      	subs	r0, r0, #1
 800236c:	1d36      	adds	r6, r6, #4
 800236e:	ed89 0a00 	vstr	s0, [r9]
 8002372:	2800      	cmp	r0, #0
 8002374:	f109 0904 	add.w	r9, r9, #4
 8002378:	d1ec      	bne.n	8002354 <forward_mp+0x124>
 800237a:	0888      	lsrs	r0, r1, #2
 800237c:	f000 803a 	beq.w	80023f4 <forward_mp+0x1c4>
 8002380:	edd6 0a00 	vldr	s1, [r6]
 8002384:	edd9 1a00 	vldr	s3, [r9]
 8002388:	eef4 0a61 	vcmp.f32	s1, s3
 800238c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002390:	bf48      	it	mi
 8002392:	eef0 0a61 	vmovmi.f32	s1, s3
 8002396:	edc9 0a00 	vstr	s1, [r9]
 800239a:	edd6 0a01 	vldr	s1, [r6, #4]
 800239e:	edd9 1a01 	vldr	s3, [r9, #4]
 80023a2:	ed99 0a02 	vldr	s0, [r9, #8]
 80023a6:	eef4 0a61 	vcmp.f32	s1, s3
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	bf48      	it	mi
 80023b0:	eef0 0a61 	vmovmi.f32	s1, s3
 80023b4:	edc9 0a01 	vstr	s1, [r9, #4]
 80023b8:	ed96 1a02 	vldr	s2, [r6, #8]
 80023bc:	edd9 1a03 	vldr	s3, [r9, #12]
 80023c0:	eeb4 1a40 	vcmp.f32	s2, s0
 80023c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c8:	bf48      	it	mi
 80023ca:	eeb0 1a40 	vmovmi.f32	s2, s0
 80023ce:	ed89 1a02 	vstr	s2, [r9, #8]
 80023d2:	edd6 0a03 	vldr	s1, [r6, #12]
 80023d6:	eef4 0a61 	vcmp.f32	s1, s3
 80023da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023de:	bf58      	it	pl
 80023e0:	eef0 1a60 	vmovpl.f32	s3, s1
 80023e4:	1e40      	subs	r0, r0, #1
 80023e6:	3610      	adds	r6, #16
 80023e8:	edc9 1a03 	vstr	s3, [r9, #12]
 80023ec:	2800      	cmp	r0, #0
 80023ee:	f109 0910 	add.w	r9, r9, #16
 80023f2:	d1c5      	bne.n	8002380 <forward_mp+0x150>
 80023f4:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 80023f8:	45da      	cmp	sl, fp
 80023fa:	d3a4      	bcc.n	8002346 <forward_mp+0x116>
 80023fc:	1e52      	subs	r2, r2, #1
 80023fe:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 8002402:	d19b      	bne.n	800233c <forward_mp+0x10c>
 8002404:	9806      	ldr	r0, [sp, #24]
 8002406:	1945      	adds	r5, r0, r5
 8002408:	1e5b      	subs	r3, r3, #1
 800240a:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 800240e:	f47f af56 	bne.w	80022be <forward_mp+0x8e>
 8002412:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002416:	9a02      	ldr	r2, [sp, #8]
 8002418:	9d00      	ldr	r5, [sp, #0]
 800241a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800241c:	195d      	adds	r5, r3, r5
 800241e:	9500      	str	r5, [sp, #0]
 8002420:	9d01      	ldr	r5, [sp, #4]
 8002422:	1e6d      	subs	r5, r5, #1
 8002424:	9501      	str	r5, [sp, #4]
 8002426:	f47f af2d 	bne.w	8002284 <forward_mp+0x54>
 800242a:	b00e      	add	sp, #56	; 0x38
 800242c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002430 <forward_ap>:
 8002430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002434:	b094      	sub	sp, #80	; 0x50
 8002436:	6941      	ldr	r1, [r0, #20]
 8002438:	6809      	ldr	r1, [r1, #0]
 800243a:	680a      	ldr	r2, [r1, #0]
 800243c:	6849      	ldr	r1, [r1, #4]
 800243e:	6815      	ldr	r5, [r2, #0]
 8002440:	680e      	ldr	r6, [r1, #0]
 8002442:	692a      	ldr	r2, [r5, #16]
 8002444:	6933      	ldr	r3, [r6, #16]
 8002446:	920c      	str	r2, [sp, #48]	; 0x30
 8002448:	68f4      	ldr	r4, [r6, #12]
 800244a:	940b      	str	r4, [sp, #44]	; 0x2c
 800244c:	68ea      	ldr	r2, [r5, #12]
 800244e:	68a9      	ldr	r1, [r5, #8]
 8002450:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8002454:	69c4      	ldr	r4, [r0, #28]
 8002456:	940a      	str	r4, [sp, #40]	; 0x28
 8002458:	f8d0 c020 	ldr.w	ip, [r0, #32]
 800245c:	6a47      	ldr	r7, [r0, #36]	; 0x24
 800245e:	9713      	str	r7, [sp, #76]	; 0x4c
 8002460:	682d      	ldr	r5, [r5, #0]
 8002462:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8002464:	6834      	ldr	r4, [r6, #0]
 8002466:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002468:	f8d5 e008 	ldr.w	lr, [r5, #8]
 800246c:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8002470:	4240      	negs	r0, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	9001      	str	r0, [sp, #4]
 8002476:	f000 8120 	beq.w	80026ba <forward_ap+0x28a>
 800247a:	427f      	negs	r7, r7
 800247c:	fb01 f402 	mul.w	r4, r1, r2
 8002480:	9303      	str	r3, [sp, #12]
 8002482:	9712      	str	r7, [sp, #72]	; 0x48
 8002484:	9411      	str	r4, [sp, #68]	; 0x44
 8002486:	9801      	ldr	r0, [sp, #4]
 8002488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800248a:	9e01      	ldr	r6, [sp, #4]
 800248c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800248e:	4240      	negs	r0, r0
 8002490:	9801      	ldr	r0, [sp, #4]
 8002492:	bfcc      	ite	gt
 8002494:	2700      	movgt	r7, #0
 8002496:	9f01      	ldrle	r7, [sp, #4]
 8002498:	1a18      	subs	r0, r3, r0
 800249a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800249c:	4298      	cmp	r0, r3
 800249e:	bf88      	it	hi
 80024a0:	4618      	movhi	r0, r3
 80024a2:	1986      	adds	r6, r0, r6
 80024a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80024a6:	2800      	cmp	r0, #0
 80024a8:	f000 80fe 	beq.w	80026a8 <forward_ap+0x278>
 80024ac:	4605      	mov	r5, r0
 80024ae:	fb02 f007 	mul.w	r0, r2, r7
 80024b2:	9010      	str	r0, [sp, #64]	; 0x40
 80024b4:	9205      	str	r2, [sp, #20]
 80024b6:	1bb8      	subs	r0, r7, r6
 80024b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80024ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80024be:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80024c2:	f8cd e020 	str.w	lr, [sp, #32]
 80024c6:	9707      	str	r7, [sp, #28]
 80024c8:	9606      	str	r6, [sp, #24]
 80024ca:	9400      	str	r4, [sp, #0]
 80024cc:	9502      	str	r5, [sp, #8]
 80024ce:	9800      	ldr	r0, [sp, #0]
 80024d0:	9a05      	ldr	r2, [sp, #20]
 80024d2:	f8dd e000 	ldr.w	lr, [sp]
 80024d6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80024d8:	4240      	negs	r0, r0
 80024da:	9800      	ldr	r0, [sp, #0]
 80024dc:	bfcc      	ite	gt
 80024de:	f04f 0c00 	movgt.w	ip, #0
 80024e2:	f8dd c000 	ldrle.w	ip, [sp]
 80024e6:	1a10      	subs	r0, r2, r0
 80024e8:	9a04      	ldr	r2, [sp, #16]
 80024ea:	4290      	cmp	r0, r2
 80024ec:	bf88      	it	hi
 80024ee:	4610      	movhi	r0, r2
 80024f0:	4486      	add	lr, r0
 80024f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80024f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80024f6:	ebac 050e 	sub.w	r5, ip, lr
 80024fa:	4345      	muls	r5, r0
 80024fc:	9808      	ldr	r0, [sp, #32]
 80024fe:	4462      	add	r2, ip
 8002500:	434a      	muls	r2, r1
 8002502:	ebae 060c 	sub.w	r6, lr, ip
 8002506:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 800250a:	434e      	muls	r6, r1
 800250c:	2200      	movs	r2, #0
 800250e:	b189      	cbz	r1, 8002534 <forward_ap+0x104>
 8002510:	f011 0003 	ands.w	r0, r1, #3
 8002514:	464b      	mov	r3, r9
 8002516:	d003      	beq.n	8002520 <forward_ap+0xf0>
 8002518:	1e40      	subs	r0, r0, #1
 800251a:	f843 2b04 	str.w	r2, [r3], #4
 800251e:	d1fb      	bne.n	8002518 <forward_ap+0xe8>
 8002520:	0888      	lsrs	r0, r1, #2
 8002522:	d007      	beq.n	8002534 <forward_ap+0x104>
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
 800252c:	1e40      	subs	r0, r0, #1
 800252e:	f103 0310 	add.w	r3, r3, #16
 8002532:	d1f7      	bne.n	8002524 <forward_ap+0xf4>
 8002534:	9807      	ldr	r0, [sp, #28]
 8002536:	9b06      	ldr	r3, [sp, #24]
 8002538:	4298      	cmp	r0, r3
 800253a:	f280 80a3 	bge.w	8002684 <forward_ap+0x254>
 800253e:	1a1b      	subs	r3, r3, r0
 8002540:	ebae 000c 	sub.w	r0, lr, ip
 8002544:	900d      	str	r0, [sp, #52]	; 0x34
 8002546:	940e      	str	r4, [sp, #56]	; 0x38
 8002548:	4694      	mov	ip, r2
 800254a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800254c:	4484      	add	ip, r0
 800254e:	4565      	cmp	r5, ip
 8002550:	46be      	mov	lr, r7
 8002552:	bf0c      	ite	eq
 8002554:	462c      	moveq	r4, r5
 8002556:	2400      	movne	r4, #0
 8002558:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800255c:	45c6      	cmp	lr, r8
 800255e:	d24e      	bcs.n	80025fe <forward_ap+0x1ce>
 8002560:	2200      	movs	r2, #0
 8002562:	2900      	cmp	r1, #0
 8002564:	d047      	beq.n	80025f6 <forward_ap+0x1c6>
 8002566:	f011 0003 	ands.w	r0, r1, #3
 800256a:	46f2      	mov	sl, lr
 800256c:	46cb      	mov	fp, r9
 800256e:	d010      	beq.n	8002592 <forward_ap+0x162>
 8002570:	ed9a 0a00 	vldr	s0, [sl]
 8002574:	45f1      	cmp	r9, lr
 8002576:	bf1c      	itt	ne
 8002578:	eddb 0a00 	vldrne	s1, [fp]
 800257c:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8002580:	1c52      	adds	r2, r2, #1
 8002582:	ed8b 0a00 	vstr	s0, [fp]
 8002586:	1e40      	subs	r0, r0, #1
 8002588:	f10b 0b04 	add.w	fp, fp, #4
 800258c:	f10a 0a04 	add.w	sl, sl, #4
 8002590:	d1ee      	bne.n	8002570 <forward_ap+0x140>
 8002592:	0888      	lsrs	r0, r1, #2
 8002594:	f000 802f 	beq.w	80025f6 <forward_ap+0x1c6>
 8002598:	eb0e 0a82 	add.w	sl, lr, r2, lsl #2
 800259c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80025a0:	edda 1a00 	vldr	s3, [sl]
 80025a4:	45f1      	cmp	r9, lr
 80025a6:	bf1c      	itt	ne
 80025a8:	ed92 0a00 	vldrne	s0, [r2]
 80025ac:	ee70 1a21 	vaddne.f32	s3, s0, s3
 80025b0:	edc2 1a00 	vstr	s3, [r2]
 80025b4:	edda 1a01 	vldr	s3, [sl, #4]
 80025b8:	bf1c      	itt	ne
 80025ba:	edd2 0a01 	vldrne	s1, [r2, #4]
 80025be:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 80025c2:	edc2 1a01 	vstr	s3, [r2, #4]
 80025c6:	ed9a 1a02 	vldr	s2, [sl, #8]
 80025ca:	bf1c      	itt	ne
 80025cc:	ed92 0a02 	vldrne	s0, [r2, #8]
 80025d0:	ee30 1a01 	vaddne.f32	s2, s0, s2
 80025d4:	ed82 1a02 	vstr	s2, [r2, #8]
 80025d8:	edda 1a03 	vldr	s3, [sl, #12]
 80025dc:	bf1c      	itt	ne
 80025de:	edd2 0a03 	vldrne	s1, [r2, #12]
 80025e2:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 80025e6:	edc2 1a03 	vstr	s3, [r2, #12]
 80025ea:	1e40      	subs	r0, r0, #1
 80025ec:	3210      	adds	r2, #16
 80025ee:	2800      	cmp	r0, #0
 80025f0:	f10a 0a10 	add.w	sl, sl, #16
 80025f4:	d1d4      	bne.n	80025a0 <forward_ap+0x170>
 80025f6:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 80025fa:	45c6      	cmp	lr, r8
 80025fc:	d3b0      	bcc.n	8002560 <forward_ap+0x130>
 80025fe:	2c00      	cmp	r4, #0
 8002600:	d03a      	beq.n	8002678 <forward_ap+0x248>
 8002602:	ee00 4a10 	vmov	s0, r4
 8002606:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800260a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800260e:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8002612:	2200      	movs	r2, #0
 8002614:	b381      	cbz	r1, 8002678 <forward_ap+0x248>
 8002616:	f011 0003 	ands.w	r0, r1, #3
 800261a:	464c      	mov	r4, r9
 800261c:	f000 800b 	beq.w	8002636 <forward_ap+0x206>
 8002620:	edd4 0a00 	vldr	s1, [r4]
 8002624:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002628:	1c52      	adds	r2, r2, #1
 800262a:	edc4 0a00 	vstr	s1, [r4]
 800262e:	1e40      	subs	r0, r0, #1
 8002630:	f104 0404 	add.w	r4, r4, #4
 8002634:	d1f4      	bne.n	8002620 <forward_ap+0x1f0>
 8002636:	0888      	lsrs	r0, r1, #2
 8002638:	f000 801e 	beq.w	8002678 <forward_ap+0x248>
 800263c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002640:	edd2 0a00 	vldr	s1, [r2]
 8002644:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002648:	edc2 0a00 	vstr	s1, [r2]
 800264c:	1e40      	subs	r0, r0, #1
 800264e:	ed92 1a01 	vldr	s2, [r2, #4]
 8002652:	edd2 0a02 	vldr	s1, [r2, #8]
 8002656:	ee21 1a00 	vmul.f32	s2, s2, s0
 800265a:	ed82 1a01 	vstr	s2, [r2, #4]
 800265e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002662:	ed92 1a03 	vldr	s2, [r2, #12]
 8002666:	edc2 0a02 	vstr	s1, [r2, #8]
 800266a:	ee21 1a00 	vmul.f32	s2, s2, s0
 800266e:	ed82 1a03 	vstr	s2, [r2, #12]
 8002672:	f102 0210 	add.w	r2, r2, #16
 8002676:	d1e3      	bne.n	8002640 <forward_ap+0x210>
 8002678:	980e      	ldr	r0, [sp, #56]	; 0x38
 800267a:	1e5b      	subs	r3, r3, #1
 800267c:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8002680:	f47f af63 	bne.w	800254a <forward_ap+0x11a>
 8002684:	9800      	ldr	r0, [sp, #0]
 8002686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002688:	1810      	adds	r0, r2, r0
 800268a:	9000      	str	r0, [sp, #0]
 800268c:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 8002690:	9802      	ldr	r0, [sp, #8]
 8002692:	1e40      	subs	r0, r0, #1
 8002694:	9002      	str	r0, [sp, #8]
 8002696:	f47f af1a 	bne.w	80024ce <forward_ap+0x9e>
 800269a:	9a05      	ldr	r2, [sp, #20]
 800269c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80026a0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80026a4:	f8dd e020 	ldr.w	lr, [sp, #32]
 80026a8:	9c01      	ldr	r4, [sp, #4]
 80026aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80026ac:	191c      	adds	r4, r3, r4
 80026ae:	9401      	str	r4, [sp, #4]
 80026b0:	9c03      	ldr	r4, [sp, #12]
 80026b2:	1e64      	subs	r4, r4, #1
 80026b4:	9403      	str	r4, [sp, #12]
 80026b6:	f47f aee6 	bne.w	8002486 <forward_ap+0x56>
 80026ba:	b014      	add	sp, #80	; 0x50
 80026bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080026c0 <ai_math_dot_array>:
 80026c0:	b530      	push	{r4, r5, lr}
 80026c2:	4604      	mov	r4, r0
 80026c4:	4608      	mov	r0, r1
 80026c6:	b081      	sub	sp, #4
 80026c8:	4611      	mov	r1, r2
 80026ca:	461a      	mov	r2, r3
 80026cc:	2500      	movs	r5, #0
 80026ce:	9500      	str	r5, [sp, #0]
 80026d0:	466b      	mov	r3, sp
 80026d2:	f000 ff2d 	bl	8003530 <arm_dot_prod_f32>
 80026d6:	ed94 0a00 	vldr	s0, [r4]
 80026da:	eddd 0a00 	vldr	s1, [sp]
 80026de:	ee70 0a20 	vadd.f32	s1, s0, s1
 80026e2:	edc4 0a00 	vstr	s1, [r4]
 80026e6:	b001      	add	sp, #4
 80026e8:	bd30      	pop	{r4, r5, pc}
	...

080026ec <ai_math_sqrt>:
 80026ec:	eef0 0a40 	vmov.f32	s1, s0
 80026f0:	eef5 0a40 	vcmp.f32	s1, #0.0
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800279c <.text_12>
 80026fc:	db01      	blt.n	8002702 <ai_math_sqrt+0x16>
 80026fe:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8002702:	4770      	bx	lr

08002704 <ai_math_exp>:
 8002704:	f009 bb60 	b.w	800bdc8 <expf>

08002708 <ai_math_pow>:
 8002708:	f009 bbd8 	b.w	800bebc <powf>

0800270c <ai_math_tanh>:
 800270c:	f009 b8b8 	b.w	800b880 <tanhf>

08002710 <ai_math_relu>:
 8002710:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002718:	bfd8      	it	le
 800271a:	ed9f 0a20 	vldrle	s0, [pc, #128]	; 800279c <.text_12>
 800271e:	4770      	bx	lr

08002720 <ai_math_prelu>:
 8002720:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002728:	bfd8      	it	le
 800272a:	ee20 0a20 	vmulle.f32	s0, s0, s1
 800272e:	4770      	bx	lr

08002730 <ai_math_sigmoid>:
 8002730:	b500      	push	{lr}
 8002732:	b081      	sub	sp, #4
 8002734:	eeb1 0a40 	vneg.f32	s0, s0
 8002738:	f009 fb46 	bl	800bdc8 <expf>
 800273c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002740:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002744:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002748:	ee81 0a00 	vdiv.f32	s0, s2, s0
 800274c:	b001      	add	sp, #4
 800274e:	bd00      	pop	{pc}

08002750 <ai_math_hard_sigmoid>:
 8002750:	eef0 0a40 	vmov.f32	s1, s0
 8002754:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80027a0 <.text_13>
 8002758:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800275c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002760:	eddf 0a10 	vldr	s1, [pc, #64]	; 80027a4 <.text_14>
 8002764:	eeb4 0a60 	vcmp.f32	s0, s1
 8002768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276c:	da07      	bge.n	800277e <ai_math_hard_sigmoid+0x2e>
 800276e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002776:	d504      	bpl.n	8002782 <ai_math_hard_sigmoid+0x32>
 8002778:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800279c <.text_12>
 800277c:	4770      	bx	lr
 800277e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002782:	4770      	bx	lr

08002784 <ai_math_sign>:
 8002784:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278c:	bfcc      	ite	gt
 800278e:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 80027a8 <.text_15>
 8002792:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 80027ac <.text_16>
 8002796:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800279a:	4770      	bx	lr

0800279c <.text_12>:
 800279c:	00000000 	.word	0x00000000

080027a0 <.text_13>:
 80027a0:	3e4ccccd 	.word	0x3e4ccccd

080027a4 <.text_14>:
 80027a4:	3f800001 	.word	0x3f800001

080027a8 <.text_15>:
 80027a8:	00000001 	.word	0x00000001

080027ac <.text_16>:
 80027ac:	ffffffff 	.word	0xffffffff

080027b0 <strlen>:
 80027b0:	4603      	mov	r3, r0
 80027b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027b6:	2a00      	cmp	r2, #0
 80027b8:	d1fb      	bne.n	80027b2 <strlen+0x2>
 80027ba:	1a18      	subs	r0, r3, r0
 80027bc:	3801      	subs	r0, #1
 80027be:	4770      	bx	lr

080027c0 <memchr>:
 80027c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80027c4:	2a10      	cmp	r2, #16
 80027c6:	db2b      	blt.n	8002820 <memchr+0x60>
 80027c8:	f010 0f07 	tst.w	r0, #7
 80027cc:	d008      	beq.n	80027e0 <memchr+0x20>
 80027ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80027d2:	3a01      	subs	r2, #1
 80027d4:	428b      	cmp	r3, r1
 80027d6:	d02d      	beq.n	8002834 <memchr+0x74>
 80027d8:	f010 0f07 	tst.w	r0, #7
 80027dc:	b342      	cbz	r2, 8002830 <memchr+0x70>
 80027de:	d1f6      	bne.n	80027ce <memchr+0xe>
 80027e0:	b4f0      	push	{r4, r5, r6, r7}
 80027e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80027e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80027ea:	f022 0407 	bic.w	r4, r2, #7
 80027ee:	f07f 0700 	mvns.w	r7, #0
 80027f2:	2300      	movs	r3, #0
 80027f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80027f8:	3c08      	subs	r4, #8
 80027fa:	ea85 0501 	eor.w	r5, r5, r1
 80027fe:	ea86 0601 	eor.w	r6, r6, r1
 8002802:	fa85 f547 	uadd8	r5, r5, r7
 8002806:	faa3 f587 	sel	r5, r3, r7
 800280a:	fa86 f647 	uadd8	r6, r6, r7
 800280e:	faa5 f687 	sel	r6, r5, r7
 8002812:	b98e      	cbnz	r6, 8002838 <memchr+0x78>
 8002814:	d1ee      	bne.n	80027f4 <memchr+0x34>
 8002816:	bcf0      	pop	{r4, r5, r6, r7}
 8002818:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800281c:	f002 0207 	and.w	r2, r2, #7
 8002820:	b132      	cbz	r2, 8002830 <memchr+0x70>
 8002822:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002826:	3a01      	subs	r2, #1
 8002828:	ea83 0301 	eor.w	r3, r3, r1
 800282c:	b113      	cbz	r3, 8002834 <memchr+0x74>
 800282e:	d1f8      	bne.n	8002822 <memchr+0x62>
 8002830:	2000      	movs	r0, #0
 8002832:	4770      	bx	lr
 8002834:	3801      	subs	r0, #1
 8002836:	4770      	bx	lr
 8002838:	2d00      	cmp	r5, #0
 800283a:	bf06      	itte	eq
 800283c:	4635      	moveq	r5, r6
 800283e:	3803      	subeq	r0, #3
 8002840:	3807      	subne	r0, #7
 8002842:	f015 0f01 	tst.w	r5, #1
 8002846:	d107      	bne.n	8002858 <memchr+0x98>
 8002848:	3001      	adds	r0, #1
 800284a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800284e:	bf02      	ittt	eq
 8002850:	3001      	addeq	r0, #1
 8002852:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8002856:	3001      	addeq	r0, #1
 8002858:	bcf0      	pop	{r4, r5, r6, r7}
 800285a:	3801      	subs	r0, #1
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop

08002860 <__aeabi_drsub>:
 8002860:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002864:	e002      	b.n	800286c <__adddf3>
 8002866:	bf00      	nop

08002868 <__aeabi_dsub>:
 8002868:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800286c <__adddf3>:
 800286c:	b530      	push	{r4, r5, lr}
 800286e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8002872:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002876:	ea94 0f05 	teq	r4, r5
 800287a:	bf08      	it	eq
 800287c:	ea90 0f02 	teqeq	r0, r2
 8002880:	bf1f      	itttt	ne
 8002882:	ea54 0c00 	orrsne.w	ip, r4, r0
 8002886:	ea55 0c02 	orrsne.w	ip, r5, r2
 800288a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800288e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002892:	f000 80e2 	beq.w	8002a5a <__adddf3+0x1ee>
 8002896:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800289a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800289e:	bfb8      	it	lt
 80028a0:	426d      	neglt	r5, r5
 80028a2:	dd0c      	ble.n	80028be <__adddf3+0x52>
 80028a4:	442c      	add	r4, r5
 80028a6:	ea80 0202 	eor.w	r2, r0, r2
 80028aa:	ea81 0303 	eor.w	r3, r1, r3
 80028ae:	ea82 0000 	eor.w	r0, r2, r0
 80028b2:	ea83 0101 	eor.w	r1, r3, r1
 80028b6:	ea80 0202 	eor.w	r2, r0, r2
 80028ba:	ea81 0303 	eor.w	r3, r1, r3
 80028be:	2d36      	cmp	r5, #54	; 0x36
 80028c0:	bf88      	it	hi
 80028c2:	bd30      	pophi	{r4, r5, pc}
 80028c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80028c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80028cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80028d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80028d4:	d002      	beq.n	80028dc <__adddf3+0x70>
 80028d6:	4240      	negs	r0, r0
 80028d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80028dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80028e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80028e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80028e8:	d002      	beq.n	80028f0 <__adddf3+0x84>
 80028ea:	4252      	negs	r2, r2
 80028ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80028f0:	ea94 0f05 	teq	r4, r5
 80028f4:	f000 80a7 	beq.w	8002a46 <__adddf3+0x1da>
 80028f8:	f1a4 0401 	sub.w	r4, r4, #1
 80028fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8002900:	db0d      	blt.n	800291e <__adddf3+0xb2>
 8002902:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002906:	fa22 f205 	lsr.w	r2, r2, r5
 800290a:	1880      	adds	r0, r0, r2
 800290c:	f141 0100 	adc.w	r1, r1, #0
 8002910:	fa03 f20e 	lsl.w	r2, r3, lr
 8002914:	1880      	adds	r0, r0, r2
 8002916:	fa43 f305 	asr.w	r3, r3, r5
 800291a:	4159      	adcs	r1, r3
 800291c:	e00e      	b.n	800293c <__adddf3+0xd0>
 800291e:	f1a5 0520 	sub.w	r5, r5, #32
 8002922:	f10e 0e20 	add.w	lr, lr, #32
 8002926:	2a01      	cmp	r2, #1
 8002928:	fa03 fc0e 	lsl.w	ip, r3, lr
 800292c:	bf28      	it	cs
 800292e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002932:	fa43 f305 	asr.w	r3, r3, r5
 8002936:	18c0      	adds	r0, r0, r3
 8002938:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800293c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002940:	d507      	bpl.n	8002952 <__adddf3+0xe6>
 8002942:	f04f 0e00 	mov.w	lr, #0
 8002946:	f1dc 0c00 	rsbs	ip, ip, #0
 800294a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800294e:	eb6e 0101 	sbc.w	r1, lr, r1
 8002952:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002956:	d31b      	bcc.n	8002990 <__adddf3+0x124>
 8002958:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800295c:	d30c      	bcc.n	8002978 <__adddf3+0x10c>
 800295e:	0849      	lsrs	r1, r1, #1
 8002960:	ea5f 0030 	movs.w	r0, r0, rrx
 8002964:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002968:	f104 0401 	add.w	r4, r4, #1
 800296c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002970:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002974:	f080 809a 	bcs.w	8002aac <__adddf3+0x240>
 8002978:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800297c:	bf08      	it	eq
 800297e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002982:	f150 0000 	adcs.w	r0, r0, #0
 8002986:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800298a:	ea41 0105 	orr.w	r1, r1, r5
 800298e:	bd30      	pop	{r4, r5, pc}
 8002990:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002994:	4140      	adcs	r0, r0
 8002996:	eb41 0101 	adc.w	r1, r1, r1
 800299a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800299e:	f1a4 0401 	sub.w	r4, r4, #1
 80029a2:	d1e9      	bne.n	8002978 <__adddf3+0x10c>
 80029a4:	f091 0f00 	teq	r1, #0
 80029a8:	bf04      	itt	eq
 80029aa:	4601      	moveq	r1, r0
 80029ac:	2000      	moveq	r0, #0
 80029ae:	fab1 f381 	clz	r3, r1
 80029b2:	bf08      	it	eq
 80029b4:	3320      	addeq	r3, #32
 80029b6:	f1a3 030b 	sub.w	r3, r3, #11
 80029ba:	f1b3 0220 	subs.w	r2, r3, #32
 80029be:	da0c      	bge.n	80029da <__adddf3+0x16e>
 80029c0:	320c      	adds	r2, #12
 80029c2:	dd08      	ble.n	80029d6 <__adddf3+0x16a>
 80029c4:	f102 0c14 	add.w	ip, r2, #20
 80029c8:	f1c2 020c 	rsb	r2, r2, #12
 80029cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80029d0:	fa21 f102 	lsr.w	r1, r1, r2
 80029d4:	e00c      	b.n	80029f0 <__adddf3+0x184>
 80029d6:	f102 0214 	add.w	r2, r2, #20
 80029da:	bfd8      	it	le
 80029dc:	f1c2 0c20 	rsble	ip, r2, #32
 80029e0:	fa01 f102 	lsl.w	r1, r1, r2
 80029e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80029e8:	bfdc      	itt	le
 80029ea:	ea41 010c 	orrle.w	r1, r1, ip
 80029ee:	4090      	lslle	r0, r2
 80029f0:	1ae4      	subs	r4, r4, r3
 80029f2:	bfa2      	ittt	ge
 80029f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80029f8:	4329      	orrge	r1, r5
 80029fa:	bd30      	popge	{r4, r5, pc}
 80029fc:	ea6f 0404 	mvn.w	r4, r4
 8002a00:	3c1f      	subs	r4, #31
 8002a02:	da1c      	bge.n	8002a3e <__adddf3+0x1d2>
 8002a04:	340c      	adds	r4, #12
 8002a06:	dc0e      	bgt.n	8002a26 <__adddf3+0x1ba>
 8002a08:	f104 0414 	add.w	r4, r4, #20
 8002a0c:	f1c4 0220 	rsb	r2, r4, #32
 8002a10:	fa20 f004 	lsr.w	r0, r0, r4
 8002a14:	fa01 f302 	lsl.w	r3, r1, r2
 8002a18:	ea40 0003 	orr.w	r0, r0, r3
 8002a1c:	fa21 f304 	lsr.w	r3, r1, r4
 8002a20:	ea45 0103 	orr.w	r1, r5, r3
 8002a24:	bd30      	pop	{r4, r5, pc}
 8002a26:	f1c4 040c 	rsb	r4, r4, #12
 8002a2a:	f1c4 0220 	rsb	r2, r4, #32
 8002a2e:	fa20 f002 	lsr.w	r0, r0, r2
 8002a32:	fa01 f304 	lsl.w	r3, r1, r4
 8002a36:	ea40 0003 	orr.w	r0, r0, r3
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	bd30      	pop	{r4, r5, pc}
 8002a3e:	fa21 f004 	lsr.w	r0, r1, r4
 8002a42:	4629      	mov	r1, r5
 8002a44:	bd30      	pop	{r4, r5, pc}
 8002a46:	f094 0f00 	teq	r4, #0
 8002a4a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002a4e:	bf06      	itte	eq
 8002a50:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002a54:	3401      	addeq	r4, #1
 8002a56:	3d01      	subne	r5, #1
 8002a58:	e74e      	b.n	80028f8 <__adddf3+0x8c>
 8002a5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002a5e:	bf18      	it	ne
 8002a60:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002a64:	d029      	beq.n	8002aba <__adddf3+0x24e>
 8002a66:	ea94 0f05 	teq	r4, r5
 8002a6a:	bf08      	it	eq
 8002a6c:	ea90 0f02 	teqeq	r0, r2
 8002a70:	d005      	beq.n	8002a7e <__adddf3+0x212>
 8002a72:	ea54 0c00 	orrs.w	ip, r4, r0
 8002a76:	bf04      	itt	eq
 8002a78:	4619      	moveq	r1, r3
 8002a7a:	4610      	moveq	r0, r2
 8002a7c:	bd30      	pop	{r4, r5, pc}
 8002a7e:	ea91 0f03 	teq	r1, r3
 8002a82:	bf1e      	ittt	ne
 8002a84:	2100      	movne	r1, #0
 8002a86:	2000      	movne	r0, #0
 8002a88:	bd30      	popne	{r4, r5, pc}
 8002a8a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002a8e:	d105      	bne.n	8002a9c <__adddf3+0x230>
 8002a90:	0040      	lsls	r0, r0, #1
 8002a92:	4149      	adcs	r1, r1
 8002a94:	bf28      	it	cs
 8002a96:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8002a9a:	bd30      	pop	{r4, r5, pc}
 8002a9c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8002aa0:	bf3c      	itt	cc
 8002aa2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8002aa6:	bd30      	popcc	{r4, r5, pc}
 8002aa8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002aac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002ab0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002ab4:	f04f 0000 	mov.w	r0, #0
 8002ab8:	bd30      	pop	{r4, r5, pc}
 8002aba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002abe:	bf1a      	itte	ne
 8002ac0:	4619      	movne	r1, r3
 8002ac2:	4610      	movne	r0, r2
 8002ac4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002ac8:	bf1c      	itt	ne
 8002aca:	460b      	movne	r3, r1
 8002acc:	4602      	movne	r2, r0
 8002ace:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002ad2:	bf06      	itte	eq
 8002ad4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002ad8:	ea91 0f03 	teqeq	r1, r3
 8002adc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002ae0:	bd30      	pop	{r4, r5, pc}
 8002ae2:	bf00      	nop

08002ae4 <__aeabi_ui2d>:
 8002ae4:	f090 0f00 	teq	r0, #0
 8002ae8:	bf04      	itt	eq
 8002aea:	2100      	moveq	r1, #0
 8002aec:	4770      	bxeq	lr
 8002aee:	b530      	push	{r4, r5, lr}
 8002af0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002af4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002af8:	f04f 0500 	mov.w	r5, #0
 8002afc:	f04f 0100 	mov.w	r1, #0
 8002b00:	e750      	b.n	80029a4 <__adddf3+0x138>
 8002b02:	bf00      	nop

08002b04 <__aeabi_i2d>:
 8002b04:	f090 0f00 	teq	r0, #0
 8002b08:	bf04      	itt	eq
 8002b0a:	2100      	moveq	r1, #0
 8002b0c:	4770      	bxeq	lr
 8002b0e:	b530      	push	{r4, r5, lr}
 8002b10:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002b14:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002b18:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002b1c:	bf48      	it	mi
 8002b1e:	4240      	negmi	r0, r0
 8002b20:	f04f 0100 	mov.w	r1, #0
 8002b24:	e73e      	b.n	80029a4 <__adddf3+0x138>
 8002b26:	bf00      	nop

08002b28 <__aeabi_f2d>:
 8002b28:	0042      	lsls	r2, r0, #1
 8002b2a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8002b32:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002b36:	bf1f      	itttt	ne
 8002b38:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002b3c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002b40:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002b44:	4770      	bxne	lr
 8002b46:	f092 0f00 	teq	r2, #0
 8002b4a:	bf14      	ite	ne
 8002b4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002b50:	4770      	bxeq	lr
 8002b52:	b530      	push	{r4, r5, lr}
 8002b54:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002b58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002b5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002b60:	e720      	b.n	80029a4 <__adddf3+0x138>
 8002b62:	bf00      	nop

08002b64 <__aeabi_ul2d>:
 8002b64:	ea50 0201 	orrs.w	r2, r0, r1
 8002b68:	bf08      	it	eq
 8002b6a:	4770      	bxeq	lr
 8002b6c:	b530      	push	{r4, r5, lr}
 8002b6e:	f04f 0500 	mov.w	r5, #0
 8002b72:	e00a      	b.n	8002b8a <__aeabi_l2d+0x16>

08002b74 <__aeabi_l2d>:
 8002b74:	ea50 0201 	orrs.w	r2, r0, r1
 8002b78:	bf08      	it	eq
 8002b7a:	4770      	bxeq	lr
 8002b7c:	b530      	push	{r4, r5, lr}
 8002b7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8002b82:	d502      	bpl.n	8002b8a <__aeabi_l2d+0x16>
 8002b84:	4240      	negs	r0, r0
 8002b86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002b8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002b8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002b92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002b96:	f43f aedc 	beq.w	8002952 <__adddf3+0xe6>
 8002b9a:	f04f 0203 	mov.w	r2, #3
 8002b9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002ba2:	bf18      	it	ne
 8002ba4:	3203      	addne	r2, #3
 8002ba6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002baa:	bf18      	it	ne
 8002bac:	3203      	addne	r2, #3
 8002bae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002bb2:	f1c2 0320 	rsb	r3, r2, #32
 8002bb6:	fa00 fc03 	lsl.w	ip, r0, r3
 8002bba:	fa20 f002 	lsr.w	r0, r0, r2
 8002bbe:	fa01 fe03 	lsl.w	lr, r1, r3
 8002bc2:	ea40 000e 	orr.w	r0, r0, lr
 8002bc6:	fa21 f102 	lsr.w	r1, r1, r2
 8002bca:	4414      	add	r4, r2
 8002bcc:	e6c1      	b.n	8002952 <__adddf3+0xe6>
 8002bce:	bf00      	nop

08002bd0 <__aeabi_dmul>:
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002bd6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002bda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002bde:	bf1d      	ittte	ne
 8002be0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002be4:	ea94 0f0c 	teqne	r4, ip
 8002be8:	ea95 0f0c 	teqne	r5, ip
 8002bec:	f000 f8de 	bleq	8002dac <__aeabi_dmul+0x1dc>
 8002bf0:	442c      	add	r4, r5
 8002bf2:	ea81 0603 	eor.w	r6, r1, r3
 8002bf6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002bfa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002bfe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002c02:	bf18      	it	ne
 8002c04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002c08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c10:	d038      	beq.n	8002c84 <__aeabi_dmul+0xb4>
 8002c12:	fba0 ce02 	umull	ip, lr, r0, r2
 8002c16:	f04f 0500 	mov.w	r5, #0
 8002c1a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002c1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8002c22:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002c26:	f04f 0600 	mov.w	r6, #0
 8002c2a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002c2e:	f09c 0f00 	teq	ip, #0
 8002c32:	bf18      	it	ne
 8002c34:	f04e 0e01 	orrne.w	lr, lr, #1
 8002c38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002c3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002c40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002c44:	d204      	bcs.n	8002c50 <__aeabi_dmul+0x80>
 8002c46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002c4a:	416d      	adcs	r5, r5
 8002c4c:	eb46 0606 	adc.w	r6, r6, r6
 8002c50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002c54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002c58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002c5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002c60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002c64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002c68:	bf88      	it	hi
 8002c6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002c6e:	d81e      	bhi.n	8002cae <__aeabi_dmul+0xde>
 8002c70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8002c74:	bf08      	it	eq
 8002c76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002c7a:	f150 0000 	adcs.w	r0, r0, #0
 8002c7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002c88:	ea46 0101 	orr.w	r1, r6, r1
 8002c8c:	ea40 0002 	orr.w	r0, r0, r2
 8002c90:	ea81 0103 	eor.w	r1, r1, r3
 8002c94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002c98:	bfc2      	ittt	gt
 8002c9a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002c9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002ca2:	bd70      	popgt	{r4, r5, r6, pc}
 8002ca4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002ca8:	f04f 0e00 	mov.w	lr, #0
 8002cac:	3c01      	subs	r4, #1
 8002cae:	f300 80ab 	bgt.w	8002e08 <__aeabi_dmul+0x238>
 8002cb2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8002cb6:	bfde      	ittt	le
 8002cb8:	2000      	movle	r0, #0
 8002cba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002cbe:	bd70      	pople	{r4, r5, r6, pc}
 8002cc0:	f1c4 0400 	rsb	r4, r4, #0
 8002cc4:	3c20      	subs	r4, #32
 8002cc6:	da35      	bge.n	8002d34 <__aeabi_dmul+0x164>
 8002cc8:	340c      	adds	r4, #12
 8002cca:	dc1b      	bgt.n	8002d04 <__aeabi_dmul+0x134>
 8002ccc:	f104 0414 	add.w	r4, r4, #20
 8002cd0:	f1c4 0520 	rsb	r5, r4, #32
 8002cd4:	fa00 f305 	lsl.w	r3, r0, r5
 8002cd8:	fa20 f004 	lsr.w	r0, r0, r4
 8002cdc:	fa01 f205 	lsl.w	r2, r1, r5
 8002ce0:	ea40 0002 	orr.w	r0, r0, r2
 8002ce4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002ce8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002cec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002cf0:	fa21 f604 	lsr.w	r6, r1, r4
 8002cf4:	eb42 0106 	adc.w	r1, r2, r6
 8002cf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002cfc:	bf08      	it	eq
 8002cfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
 8002d04:	f1c4 040c 	rsb	r4, r4, #12
 8002d08:	f1c4 0520 	rsb	r5, r4, #32
 8002d0c:	fa00 f304 	lsl.w	r3, r0, r4
 8002d10:	fa20 f005 	lsr.w	r0, r0, r5
 8002d14:	fa01 f204 	lsl.w	r2, r1, r4
 8002d18:	ea40 0002 	orr.w	r0, r0, r2
 8002d1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002d20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002d24:	f141 0100 	adc.w	r1, r1, #0
 8002d28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002d2c:	bf08      	it	eq
 8002d2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
 8002d34:	f1c4 0520 	rsb	r5, r4, #32
 8002d38:	fa00 f205 	lsl.w	r2, r0, r5
 8002d3c:	ea4e 0e02 	orr.w	lr, lr, r2
 8002d40:	fa20 f304 	lsr.w	r3, r0, r4
 8002d44:	fa01 f205 	lsl.w	r2, r1, r5
 8002d48:	ea43 0302 	orr.w	r3, r3, r2
 8002d4c:	fa21 f004 	lsr.w	r0, r1, r4
 8002d50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002d54:	fa21 f204 	lsr.w	r2, r1, r4
 8002d58:	ea20 0002 	bic.w	r0, r0, r2
 8002d5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002d64:	bf08      	it	eq
 8002d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f094 0f00 	teq	r4, #0
 8002d70:	d10f      	bne.n	8002d92 <__aeabi_dmul+0x1c2>
 8002d72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8002d76:	0040      	lsls	r0, r0, #1
 8002d78:	eb41 0101 	adc.w	r1, r1, r1
 8002d7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002d80:	bf08      	it	eq
 8002d82:	3c01      	subeq	r4, #1
 8002d84:	d0f7      	beq.n	8002d76 <__aeabi_dmul+0x1a6>
 8002d86:	ea41 0106 	orr.w	r1, r1, r6
 8002d8a:	f095 0f00 	teq	r5, #0
 8002d8e:	bf18      	it	ne
 8002d90:	4770      	bxne	lr
 8002d92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8002d96:	0052      	lsls	r2, r2, #1
 8002d98:	eb43 0303 	adc.w	r3, r3, r3
 8002d9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002da0:	bf08      	it	eq
 8002da2:	3d01      	subeq	r5, #1
 8002da4:	d0f7      	beq.n	8002d96 <__aeabi_dmul+0x1c6>
 8002da6:	ea43 0306 	orr.w	r3, r3, r6
 8002daa:	4770      	bx	lr
 8002dac:	ea94 0f0c 	teq	r4, ip
 8002db0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002db4:	bf18      	it	ne
 8002db6:	ea95 0f0c 	teqne	r5, ip
 8002dba:	d00c      	beq.n	8002dd6 <__aeabi_dmul+0x206>
 8002dbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002dc0:	bf18      	it	ne
 8002dc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002dc6:	d1d1      	bne.n	8002d6c <__aeabi_dmul+0x19c>
 8002dc8:	ea81 0103 	eor.w	r1, r1, r3
 8002dcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002dd0:	f04f 0000 	mov.w	r0, #0
 8002dd4:	bd70      	pop	{r4, r5, r6, pc}
 8002dd6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002dda:	bf06      	itte	eq
 8002ddc:	4610      	moveq	r0, r2
 8002dde:	4619      	moveq	r1, r3
 8002de0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002de4:	d019      	beq.n	8002e1a <__aeabi_dmul+0x24a>
 8002de6:	ea94 0f0c 	teq	r4, ip
 8002dea:	d102      	bne.n	8002df2 <__aeabi_dmul+0x222>
 8002dec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002df0:	d113      	bne.n	8002e1a <__aeabi_dmul+0x24a>
 8002df2:	ea95 0f0c 	teq	r5, ip
 8002df6:	d105      	bne.n	8002e04 <__aeabi_dmul+0x234>
 8002df8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002dfc:	bf1c      	itt	ne
 8002dfe:	4610      	movne	r0, r2
 8002e00:	4619      	movne	r1, r3
 8002e02:	d10a      	bne.n	8002e1a <__aeabi_dmul+0x24a>
 8002e04:	ea81 0103 	eor.w	r1, r1, r3
 8002e08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002e0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002e10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
 8002e1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002e1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8002e22:	bd70      	pop	{r4, r5, r6, pc}

08002e24 <__aeabi_ddiv>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002e2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002e2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002e32:	bf1d      	ittte	ne
 8002e34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002e38:	ea94 0f0c 	teqne	r4, ip
 8002e3c:	ea95 0f0c 	teqne	r5, ip
 8002e40:	f000 f8a7 	bleq	8002f92 <__aeabi_ddiv+0x16e>
 8002e44:	eba4 0405 	sub.w	r4, r4, r5
 8002e48:	ea81 0e03 	eor.w	lr, r1, r3
 8002e4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002e50:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002e54:	f000 8088 	beq.w	8002f68 <__aeabi_ddiv+0x144>
 8002e58:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002e5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002e60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002e64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002e68:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002e6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002e70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002e74:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002e78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8002e7c:	429d      	cmp	r5, r3
 8002e7e:	bf08      	it	eq
 8002e80:	4296      	cmpeq	r6, r2
 8002e82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8002e86:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8002e8a:	d202      	bcs.n	8002e92 <__aeabi_ddiv+0x6e>
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	ea4f 0232 	mov.w	r2, r2, rrx
 8002e92:	1ab6      	subs	r6, r6, r2
 8002e94:	eb65 0503 	sbc.w	r5, r5, r3
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	ea4f 0232 	mov.w	r2, r2, rrx
 8002e9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002ea2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8002ea6:	ebb6 0e02 	subs.w	lr, r6, r2
 8002eaa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002eae:	bf22      	ittt	cs
 8002eb0:	1ab6      	subcs	r6, r6, r2
 8002eb2:	4675      	movcs	r5, lr
 8002eb4:	ea40 000c 	orrcs.w	r0, r0, ip
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	ea4f 0232 	mov.w	r2, r2, rrx
 8002ebe:	ebb6 0e02 	subs.w	lr, r6, r2
 8002ec2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002ec6:	bf22      	ittt	cs
 8002ec8:	1ab6      	subcs	r6, r6, r2
 8002eca:	4675      	movcs	r5, lr
 8002ecc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	ea4f 0232 	mov.w	r2, r2, rrx
 8002ed6:	ebb6 0e02 	subs.w	lr, r6, r2
 8002eda:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002ede:	bf22      	ittt	cs
 8002ee0:	1ab6      	subcs	r6, r6, r2
 8002ee2:	4675      	movcs	r5, lr
 8002ee4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	ea4f 0232 	mov.w	r2, r2, rrx
 8002eee:	ebb6 0e02 	subs.w	lr, r6, r2
 8002ef2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002ef6:	bf22      	ittt	cs
 8002ef8:	1ab6      	subcs	r6, r6, r2
 8002efa:	4675      	movcs	r5, lr
 8002efc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002f00:	ea55 0e06 	orrs.w	lr, r5, r6
 8002f04:	d018      	beq.n	8002f38 <__aeabi_ddiv+0x114>
 8002f06:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002f0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8002f0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8002f12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002f16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002f1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8002f1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8002f22:	d1c0      	bne.n	8002ea6 <__aeabi_ddiv+0x82>
 8002f24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002f28:	d10b      	bne.n	8002f42 <__aeabi_ddiv+0x11e>
 8002f2a:	ea41 0100 	orr.w	r1, r1, r0
 8002f2e:	f04f 0000 	mov.w	r0, #0
 8002f32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8002f36:	e7b6      	b.n	8002ea6 <__aeabi_ddiv+0x82>
 8002f38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002f3c:	bf04      	itt	eq
 8002f3e:	4301      	orreq	r1, r0
 8002f40:	2000      	moveq	r0, #0
 8002f42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002f46:	bf88      	it	hi
 8002f48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002f4c:	f63f aeaf 	bhi.w	8002cae <__aeabi_dmul+0xde>
 8002f50:	ebb5 0c03 	subs.w	ip, r5, r3
 8002f54:	bf04      	itt	eq
 8002f56:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002f5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002f5e:	f150 0000 	adcs.w	r0, r0, #0
 8002f62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
 8002f68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8002f6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002f70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002f74:	bfc2      	ittt	gt
 8002f76:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002f7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002f7e:	bd70      	popgt	{r4, r5, r6, pc}
 8002f80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002f84:	f04f 0e00 	mov.w	lr, #0
 8002f88:	3c01      	subs	r4, #1
 8002f8a:	e690      	b.n	8002cae <__aeabi_dmul+0xde>
 8002f8c:	ea45 0e06 	orr.w	lr, r5, r6
 8002f90:	e68d      	b.n	8002cae <__aeabi_dmul+0xde>
 8002f92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002f96:	ea94 0f0c 	teq	r4, ip
 8002f9a:	bf08      	it	eq
 8002f9c:	ea95 0f0c 	teqeq	r5, ip
 8002fa0:	f43f af3b 	beq.w	8002e1a <__aeabi_dmul+0x24a>
 8002fa4:	ea94 0f0c 	teq	r4, ip
 8002fa8:	d10a      	bne.n	8002fc0 <__aeabi_ddiv+0x19c>
 8002faa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002fae:	f47f af34 	bne.w	8002e1a <__aeabi_dmul+0x24a>
 8002fb2:	ea95 0f0c 	teq	r5, ip
 8002fb6:	f47f af25 	bne.w	8002e04 <__aeabi_dmul+0x234>
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	e72c      	b.n	8002e1a <__aeabi_dmul+0x24a>
 8002fc0:	ea95 0f0c 	teq	r5, ip
 8002fc4:	d106      	bne.n	8002fd4 <__aeabi_ddiv+0x1b0>
 8002fc6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002fca:	f43f aefd 	beq.w	8002dc8 <__aeabi_dmul+0x1f8>
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	e722      	b.n	8002e1a <__aeabi_dmul+0x24a>
 8002fd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002fd8:	bf18      	it	ne
 8002fda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002fde:	f47f aec5 	bne.w	8002d6c <__aeabi_dmul+0x19c>
 8002fe2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002fe6:	f47f af0d 	bne.w	8002e04 <__aeabi_dmul+0x234>
 8002fea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002fee:	f47f aeeb 	bne.w	8002dc8 <__aeabi_dmul+0x1f8>
 8002ff2:	e712      	b.n	8002e1a <__aeabi_dmul+0x24a>

08002ff4 <__gedf2>:
 8002ff4:	f04f 3cff 	mov.w	ip, #4294967295
 8002ff8:	e006      	b.n	8003008 <__cmpdf2+0x4>
 8002ffa:	bf00      	nop

08002ffc <__ledf2>:
 8002ffc:	f04f 0c01 	mov.w	ip, #1
 8003000:	e002      	b.n	8003008 <__cmpdf2+0x4>
 8003002:	bf00      	nop

08003004 <__cmpdf2>:
 8003004:	f04f 0c01 	mov.w	ip, #1
 8003008:	f84d cd04 	str.w	ip, [sp, #-4]!
 800300c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003010:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003014:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003018:	bf18      	it	ne
 800301a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800301e:	d01b      	beq.n	8003058 <__cmpdf2+0x54>
 8003020:	b001      	add	sp, #4
 8003022:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8003026:	bf0c      	ite	eq
 8003028:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800302c:	ea91 0f03 	teqne	r1, r3
 8003030:	bf02      	ittt	eq
 8003032:	ea90 0f02 	teqeq	r0, r2
 8003036:	2000      	moveq	r0, #0
 8003038:	4770      	bxeq	lr
 800303a:	f110 0f00 	cmn.w	r0, #0
 800303e:	ea91 0f03 	teq	r1, r3
 8003042:	bf58      	it	pl
 8003044:	4299      	cmppl	r1, r3
 8003046:	bf08      	it	eq
 8003048:	4290      	cmpeq	r0, r2
 800304a:	bf2c      	ite	cs
 800304c:	17d8      	asrcs	r0, r3, #31
 800304e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8003052:	f040 0001 	orr.w	r0, r0, #1
 8003056:	4770      	bx	lr
 8003058:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800305c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003060:	d102      	bne.n	8003068 <__cmpdf2+0x64>
 8003062:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003066:	d107      	bne.n	8003078 <__cmpdf2+0x74>
 8003068:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800306c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003070:	d1d6      	bne.n	8003020 <__cmpdf2+0x1c>
 8003072:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003076:	d0d3      	beq.n	8003020 <__cmpdf2+0x1c>
 8003078:	f85d 0b04 	ldr.w	r0, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop

08003080 <__aeabi_cdrcmple>:
 8003080:	4684      	mov	ip, r0
 8003082:	4610      	mov	r0, r2
 8003084:	4662      	mov	r2, ip
 8003086:	468c      	mov	ip, r1
 8003088:	4619      	mov	r1, r3
 800308a:	4663      	mov	r3, ip
 800308c:	e000      	b.n	8003090 <__aeabi_cdcmpeq>
 800308e:	bf00      	nop

08003090 <__aeabi_cdcmpeq>:
 8003090:	b501      	push	{r0, lr}
 8003092:	f7ff ffb7 	bl	8003004 <__cmpdf2>
 8003096:	2800      	cmp	r0, #0
 8003098:	bf48      	it	mi
 800309a:	f110 0f00 	cmnmi.w	r0, #0
 800309e:	bd01      	pop	{r0, pc}

080030a0 <__aeabi_dcmpeq>:
 80030a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80030a4:	f7ff fff4 	bl	8003090 <__aeabi_cdcmpeq>
 80030a8:	bf0c      	ite	eq
 80030aa:	2001      	moveq	r0, #1
 80030ac:	2000      	movne	r0, #0
 80030ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80030b2:	bf00      	nop

080030b4 <__aeabi_dcmplt>:
 80030b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80030b8:	f7ff ffea 	bl	8003090 <__aeabi_cdcmpeq>
 80030bc:	bf34      	ite	cc
 80030be:	2001      	movcc	r0, #1
 80030c0:	2000      	movcs	r0, #0
 80030c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80030c6:	bf00      	nop

080030c8 <__aeabi_dcmple>:
 80030c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80030cc:	f7ff ffe0 	bl	8003090 <__aeabi_cdcmpeq>
 80030d0:	bf94      	ite	ls
 80030d2:	2001      	movls	r0, #1
 80030d4:	2000      	movhi	r0, #0
 80030d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80030da:	bf00      	nop

080030dc <__aeabi_dcmpge>:
 80030dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80030e0:	f7ff ffce 	bl	8003080 <__aeabi_cdrcmple>
 80030e4:	bf94      	ite	ls
 80030e6:	2001      	movls	r0, #1
 80030e8:	2000      	movhi	r0, #0
 80030ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80030ee:	bf00      	nop

080030f0 <__aeabi_dcmpgt>:
 80030f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80030f4:	f7ff ffc4 	bl	8003080 <__aeabi_cdrcmple>
 80030f8:	bf34      	ite	cc
 80030fa:	2001      	movcc	r0, #1
 80030fc:	2000      	movcs	r0, #0
 80030fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8003102:	bf00      	nop

08003104 <__aeabi_dcmpun>:
 8003104:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003108:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800310c:	d102      	bne.n	8003114 <__aeabi_dcmpun+0x10>
 800310e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003112:	d10a      	bne.n	800312a <__aeabi_dcmpun+0x26>
 8003114:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003118:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800311c:	d102      	bne.n	8003124 <__aeabi_dcmpun+0x20>
 800311e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003122:	d102      	bne.n	800312a <__aeabi_dcmpun+0x26>
 8003124:	f04f 0000 	mov.w	r0, #0
 8003128:	4770      	bx	lr
 800312a:	f04f 0001 	mov.w	r0, #1
 800312e:	4770      	bx	lr

08003130 <__aeabi_d2iz>:
 8003130:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003134:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8003138:	d215      	bcs.n	8003166 <__aeabi_d2iz+0x36>
 800313a:	d511      	bpl.n	8003160 <__aeabi_d2iz+0x30>
 800313c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003140:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003144:	d912      	bls.n	800316c <__aeabi_d2iz+0x3c>
 8003146:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800314a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800314e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003152:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003156:	fa23 f002 	lsr.w	r0, r3, r2
 800315a:	bf18      	it	ne
 800315c:	4240      	negne	r0, r0
 800315e:	4770      	bx	lr
 8003160:	f04f 0000 	mov.w	r0, #0
 8003164:	4770      	bx	lr
 8003166:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800316a:	d105      	bne.n	8003178 <__aeabi_d2iz+0x48>
 800316c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8003170:	bf08      	it	eq
 8003172:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8003176:	4770      	bx	lr
 8003178:	f04f 0000 	mov.w	r0, #0
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop

08003180 <__aeabi_d2f>:
 8003180:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003184:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8003188:	bf24      	itt	cs
 800318a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800318e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8003192:	d90d      	bls.n	80031b0 <__aeabi_d2f+0x30>
 8003194:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003198:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800319c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80031a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80031a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80031a8:	bf08      	it	eq
 80031aa:	f020 0001 	biceq.w	r0, r0, #1
 80031ae:	4770      	bx	lr
 80031b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80031b4:	d121      	bne.n	80031fa <__aeabi_d2f+0x7a>
 80031b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80031ba:	bfbc      	itt	lt
 80031bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80031c0:	4770      	bxlt	lr
 80031c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80031c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80031ca:	f1c2 0218 	rsb	r2, r2, #24
 80031ce:	f1c2 0c20 	rsb	ip, r2, #32
 80031d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80031d6:	fa20 f002 	lsr.w	r0, r0, r2
 80031da:	bf18      	it	ne
 80031dc:	f040 0001 	orrne.w	r0, r0, #1
 80031e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80031e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80031e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80031ec:	ea40 000c 	orr.w	r0, r0, ip
 80031f0:	fa23 f302 	lsr.w	r3, r3, r2
 80031f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80031f8:	e7cc      	b.n	8003194 <__aeabi_d2f+0x14>
 80031fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80031fe:	d107      	bne.n	8003210 <__aeabi_d2f+0x90>
 8003200:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8003204:	bf1e      	ittt	ne
 8003206:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800320a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800320e:	4770      	bxne	lr
 8003210:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8003214:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003218:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop

08003220 <__aeabi_uldivmod>:
 8003220:	b953      	cbnz	r3, 8003238 <__aeabi_uldivmod+0x18>
 8003222:	b94a      	cbnz	r2, 8003238 <__aeabi_uldivmod+0x18>
 8003224:	2900      	cmp	r1, #0
 8003226:	bf08      	it	eq
 8003228:	2800      	cmpeq	r0, #0
 800322a:	bf1c      	itt	ne
 800322c:	f04f 31ff 	movne.w	r1, #4294967295
 8003230:	f04f 30ff 	movne.w	r0, #4294967295
 8003234:	f000 b97a 	b.w	800352c <__aeabi_idiv0>
 8003238:	f1ad 0c08 	sub.w	ip, sp, #8
 800323c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003240:	f000 f806 	bl	8003250 <__udivmoddi4>
 8003244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800324c:	b004      	add	sp, #16
 800324e:	4770      	bx	lr

08003250 <__udivmoddi4>:
 8003250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003254:	468c      	mov	ip, r1
 8003256:	460d      	mov	r5, r1
 8003258:	4604      	mov	r4, r0
 800325a:	9e08      	ldr	r6, [sp, #32]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d151      	bne.n	8003304 <__udivmoddi4+0xb4>
 8003260:	428a      	cmp	r2, r1
 8003262:	4617      	mov	r7, r2
 8003264:	d96d      	bls.n	8003342 <__udivmoddi4+0xf2>
 8003266:	fab2 fe82 	clz	lr, r2
 800326a:	f1be 0f00 	cmp.w	lr, #0
 800326e:	d00b      	beq.n	8003288 <__udivmoddi4+0x38>
 8003270:	f1ce 0c20 	rsb	ip, lr, #32
 8003274:	fa01 f50e 	lsl.w	r5, r1, lr
 8003278:	fa20 fc0c 	lsr.w	ip, r0, ip
 800327c:	fa02 f70e 	lsl.w	r7, r2, lr
 8003280:	ea4c 0c05 	orr.w	ip, ip, r5
 8003284:	fa00 f40e 	lsl.w	r4, r0, lr
 8003288:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800328c:	0c25      	lsrs	r5, r4, #16
 800328e:	fbbc f8fa 	udiv	r8, ip, sl
 8003292:	fa1f f987 	uxth.w	r9, r7
 8003296:	fb0a cc18 	mls	ip, sl, r8, ip
 800329a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800329e:	fb08 f309 	mul.w	r3, r8, r9
 80032a2:	42ab      	cmp	r3, r5
 80032a4:	d90a      	bls.n	80032bc <__udivmoddi4+0x6c>
 80032a6:	19ed      	adds	r5, r5, r7
 80032a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80032ac:	f080 8123 	bcs.w	80034f6 <__udivmoddi4+0x2a6>
 80032b0:	42ab      	cmp	r3, r5
 80032b2:	f240 8120 	bls.w	80034f6 <__udivmoddi4+0x2a6>
 80032b6:	f1a8 0802 	sub.w	r8, r8, #2
 80032ba:	443d      	add	r5, r7
 80032bc:	1aed      	subs	r5, r5, r3
 80032be:	b2a4      	uxth	r4, r4
 80032c0:	fbb5 f0fa 	udiv	r0, r5, sl
 80032c4:	fb0a 5510 	mls	r5, sl, r0, r5
 80032c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80032cc:	fb00 f909 	mul.w	r9, r0, r9
 80032d0:	45a1      	cmp	r9, r4
 80032d2:	d909      	bls.n	80032e8 <__udivmoddi4+0x98>
 80032d4:	19e4      	adds	r4, r4, r7
 80032d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80032da:	f080 810a 	bcs.w	80034f2 <__udivmoddi4+0x2a2>
 80032de:	45a1      	cmp	r9, r4
 80032e0:	f240 8107 	bls.w	80034f2 <__udivmoddi4+0x2a2>
 80032e4:	3802      	subs	r0, #2
 80032e6:	443c      	add	r4, r7
 80032e8:	eba4 0409 	sub.w	r4, r4, r9
 80032ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80032f0:	2100      	movs	r1, #0
 80032f2:	2e00      	cmp	r6, #0
 80032f4:	d061      	beq.n	80033ba <__udivmoddi4+0x16a>
 80032f6:	fa24 f40e 	lsr.w	r4, r4, lr
 80032fa:	2300      	movs	r3, #0
 80032fc:	6034      	str	r4, [r6, #0]
 80032fe:	6073      	str	r3, [r6, #4]
 8003300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003304:	428b      	cmp	r3, r1
 8003306:	d907      	bls.n	8003318 <__udivmoddi4+0xc8>
 8003308:	2e00      	cmp	r6, #0
 800330a:	d054      	beq.n	80033b6 <__udivmoddi4+0x166>
 800330c:	2100      	movs	r1, #0
 800330e:	e886 0021 	stmia.w	r6, {r0, r5}
 8003312:	4608      	mov	r0, r1
 8003314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003318:	fab3 f183 	clz	r1, r3
 800331c:	2900      	cmp	r1, #0
 800331e:	f040 808e 	bne.w	800343e <__udivmoddi4+0x1ee>
 8003322:	42ab      	cmp	r3, r5
 8003324:	d302      	bcc.n	800332c <__udivmoddi4+0xdc>
 8003326:	4282      	cmp	r2, r0
 8003328:	f200 80fa 	bhi.w	8003520 <__udivmoddi4+0x2d0>
 800332c:	1a84      	subs	r4, r0, r2
 800332e:	eb65 0503 	sbc.w	r5, r5, r3
 8003332:	2001      	movs	r0, #1
 8003334:	46ac      	mov	ip, r5
 8003336:	2e00      	cmp	r6, #0
 8003338:	d03f      	beq.n	80033ba <__udivmoddi4+0x16a>
 800333a:	e886 1010 	stmia.w	r6, {r4, ip}
 800333e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003342:	b912      	cbnz	r2, 800334a <__udivmoddi4+0xfa>
 8003344:	2701      	movs	r7, #1
 8003346:	fbb7 f7f2 	udiv	r7, r7, r2
 800334a:	fab7 fe87 	clz	lr, r7
 800334e:	f1be 0f00 	cmp.w	lr, #0
 8003352:	d134      	bne.n	80033be <__udivmoddi4+0x16e>
 8003354:	1beb      	subs	r3, r5, r7
 8003356:	0c3a      	lsrs	r2, r7, #16
 8003358:	fa1f fc87 	uxth.w	ip, r7
 800335c:	2101      	movs	r1, #1
 800335e:	fbb3 f8f2 	udiv	r8, r3, r2
 8003362:	0c25      	lsrs	r5, r4, #16
 8003364:	fb02 3318 	mls	r3, r2, r8, r3
 8003368:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800336c:	fb0c f308 	mul.w	r3, ip, r8
 8003370:	42ab      	cmp	r3, r5
 8003372:	d907      	bls.n	8003384 <__udivmoddi4+0x134>
 8003374:	19ed      	adds	r5, r5, r7
 8003376:	f108 30ff 	add.w	r0, r8, #4294967295
 800337a:	d202      	bcs.n	8003382 <__udivmoddi4+0x132>
 800337c:	42ab      	cmp	r3, r5
 800337e:	f200 80d1 	bhi.w	8003524 <__udivmoddi4+0x2d4>
 8003382:	4680      	mov	r8, r0
 8003384:	1aed      	subs	r5, r5, r3
 8003386:	b2a3      	uxth	r3, r4
 8003388:	fbb5 f0f2 	udiv	r0, r5, r2
 800338c:	fb02 5510 	mls	r5, r2, r0, r5
 8003390:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8003394:	fb0c fc00 	mul.w	ip, ip, r0
 8003398:	45a4      	cmp	ip, r4
 800339a:	d907      	bls.n	80033ac <__udivmoddi4+0x15c>
 800339c:	19e4      	adds	r4, r4, r7
 800339e:	f100 33ff 	add.w	r3, r0, #4294967295
 80033a2:	d202      	bcs.n	80033aa <__udivmoddi4+0x15a>
 80033a4:	45a4      	cmp	ip, r4
 80033a6:	f200 80b8 	bhi.w	800351a <__udivmoddi4+0x2ca>
 80033aa:	4618      	mov	r0, r3
 80033ac:	eba4 040c 	sub.w	r4, r4, ip
 80033b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80033b4:	e79d      	b.n	80032f2 <__udivmoddi4+0xa2>
 80033b6:	4631      	mov	r1, r6
 80033b8:	4630      	mov	r0, r6
 80033ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033be:	f1ce 0420 	rsb	r4, lr, #32
 80033c2:	fa05 f30e 	lsl.w	r3, r5, lr
 80033c6:	fa07 f70e 	lsl.w	r7, r7, lr
 80033ca:	fa20 f804 	lsr.w	r8, r0, r4
 80033ce:	0c3a      	lsrs	r2, r7, #16
 80033d0:	fa25 f404 	lsr.w	r4, r5, r4
 80033d4:	ea48 0803 	orr.w	r8, r8, r3
 80033d8:	fbb4 f1f2 	udiv	r1, r4, r2
 80033dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80033e0:	fb02 4411 	mls	r4, r2, r1, r4
 80033e4:	fa1f fc87 	uxth.w	ip, r7
 80033e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80033ec:	fb01 f30c 	mul.w	r3, r1, ip
 80033f0:	42ab      	cmp	r3, r5
 80033f2:	fa00 f40e 	lsl.w	r4, r0, lr
 80033f6:	d909      	bls.n	800340c <__udivmoddi4+0x1bc>
 80033f8:	19ed      	adds	r5, r5, r7
 80033fa:	f101 30ff 	add.w	r0, r1, #4294967295
 80033fe:	f080 808a 	bcs.w	8003516 <__udivmoddi4+0x2c6>
 8003402:	42ab      	cmp	r3, r5
 8003404:	f240 8087 	bls.w	8003516 <__udivmoddi4+0x2c6>
 8003408:	3902      	subs	r1, #2
 800340a:	443d      	add	r5, r7
 800340c:	1aeb      	subs	r3, r5, r3
 800340e:	fa1f f588 	uxth.w	r5, r8
 8003412:	fbb3 f0f2 	udiv	r0, r3, r2
 8003416:	fb02 3310 	mls	r3, r2, r0, r3
 800341a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800341e:	fb00 f30c 	mul.w	r3, r0, ip
 8003422:	42ab      	cmp	r3, r5
 8003424:	d907      	bls.n	8003436 <__udivmoddi4+0x1e6>
 8003426:	19ed      	adds	r5, r5, r7
 8003428:	f100 38ff 	add.w	r8, r0, #4294967295
 800342c:	d26f      	bcs.n	800350e <__udivmoddi4+0x2be>
 800342e:	42ab      	cmp	r3, r5
 8003430:	d96d      	bls.n	800350e <__udivmoddi4+0x2be>
 8003432:	3802      	subs	r0, #2
 8003434:	443d      	add	r5, r7
 8003436:	1aeb      	subs	r3, r5, r3
 8003438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800343c:	e78f      	b.n	800335e <__udivmoddi4+0x10e>
 800343e:	f1c1 0720 	rsb	r7, r1, #32
 8003442:	fa22 f807 	lsr.w	r8, r2, r7
 8003446:	408b      	lsls	r3, r1
 8003448:	fa05 f401 	lsl.w	r4, r5, r1
 800344c:	ea48 0303 	orr.w	r3, r8, r3
 8003450:	fa20 fe07 	lsr.w	lr, r0, r7
 8003454:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8003458:	40fd      	lsrs	r5, r7
 800345a:	ea4e 0e04 	orr.w	lr, lr, r4
 800345e:	fbb5 f9fc 	udiv	r9, r5, ip
 8003462:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8003466:	fb0c 5519 	mls	r5, ip, r9, r5
 800346a:	fa1f f883 	uxth.w	r8, r3
 800346e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8003472:	fb09 f408 	mul.w	r4, r9, r8
 8003476:	42ac      	cmp	r4, r5
 8003478:	fa02 f201 	lsl.w	r2, r2, r1
 800347c:	fa00 fa01 	lsl.w	sl, r0, r1
 8003480:	d908      	bls.n	8003494 <__udivmoddi4+0x244>
 8003482:	18ed      	adds	r5, r5, r3
 8003484:	f109 30ff 	add.w	r0, r9, #4294967295
 8003488:	d243      	bcs.n	8003512 <__udivmoddi4+0x2c2>
 800348a:	42ac      	cmp	r4, r5
 800348c:	d941      	bls.n	8003512 <__udivmoddi4+0x2c2>
 800348e:	f1a9 0902 	sub.w	r9, r9, #2
 8003492:	441d      	add	r5, r3
 8003494:	1b2d      	subs	r5, r5, r4
 8003496:	fa1f fe8e 	uxth.w	lr, lr
 800349a:	fbb5 f0fc 	udiv	r0, r5, ip
 800349e:	fb0c 5510 	mls	r5, ip, r0, r5
 80034a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80034a6:	fb00 f808 	mul.w	r8, r0, r8
 80034aa:	45a0      	cmp	r8, r4
 80034ac:	d907      	bls.n	80034be <__udivmoddi4+0x26e>
 80034ae:	18e4      	adds	r4, r4, r3
 80034b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80034b4:	d229      	bcs.n	800350a <__udivmoddi4+0x2ba>
 80034b6:	45a0      	cmp	r8, r4
 80034b8:	d927      	bls.n	800350a <__udivmoddi4+0x2ba>
 80034ba:	3802      	subs	r0, #2
 80034bc:	441c      	add	r4, r3
 80034be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80034c2:	eba4 0408 	sub.w	r4, r4, r8
 80034c6:	fba0 8902 	umull	r8, r9, r0, r2
 80034ca:	454c      	cmp	r4, r9
 80034cc:	46c6      	mov	lr, r8
 80034ce:	464d      	mov	r5, r9
 80034d0:	d315      	bcc.n	80034fe <__udivmoddi4+0x2ae>
 80034d2:	d012      	beq.n	80034fa <__udivmoddi4+0x2aa>
 80034d4:	b156      	cbz	r6, 80034ec <__udivmoddi4+0x29c>
 80034d6:	ebba 030e 	subs.w	r3, sl, lr
 80034da:	eb64 0405 	sbc.w	r4, r4, r5
 80034de:	fa04 f707 	lsl.w	r7, r4, r7
 80034e2:	40cb      	lsrs	r3, r1
 80034e4:	431f      	orrs	r7, r3
 80034e6:	40cc      	lsrs	r4, r1
 80034e8:	6037      	str	r7, [r6, #0]
 80034ea:	6074      	str	r4, [r6, #4]
 80034ec:	2100      	movs	r1, #0
 80034ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f2:	4618      	mov	r0, r3
 80034f4:	e6f8      	b.n	80032e8 <__udivmoddi4+0x98>
 80034f6:	4690      	mov	r8, r2
 80034f8:	e6e0      	b.n	80032bc <__udivmoddi4+0x6c>
 80034fa:	45c2      	cmp	sl, r8
 80034fc:	d2ea      	bcs.n	80034d4 <__udivmoddi4+0x284>
 80034fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8003502:	eb69 0503 	sbc.w	r5, r9, r3
 8003506:	3801      	subs	r0, #1
 8003508:	e7e4      	b.n	80034d4 <__udivmoddi4+0x284>
 800350a:	4628      	mov	r0, r5
 800350c:	e7d7      	b.n	80034be <__udivmoddi4+0x26e>
 800350e:	4640      	mov	r0, r8
 8003510:	e791      	b.n	8003436 <__udivmoddi4+0x1e6>
 8003512:	4681      	mov	r9, r0
 8003514:	e7be      	b.n	8003494 <__udivmoddi4+0x244>
 8003516:	4601      	mov	r1, r0
 8003518:	e778      	b.n	800340c <__udivmoddi4+0x1bc>
 800351a:	3802      	subs	r0, #2
 800351c:	443c      	add	r4, r7
 800351e:	e745      	b.n	80033ac <__udivmoddi4+0x15c>
 8003520:	4608      	mov	r0, r1
 8003522:	e708      	b.n	8003336 <__udivmoddi4+0xe6>
 8003524:	f1a8 0802 	sub.w	r8, r8, #2
 8003528:	443d      	add	r5, r7
 800352a:	e72b      	b.n	8003384 <__udivmoddi4+0x134>

0800352c <__aeabi_idiv0>:
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop

08003530 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 8003530:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8003532:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80035a0 <arm_dot_prod_f32+0x70>

#ifndef ARM_MATH_CM0_FAMILY

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8003536:	0896      	lsrs	r6, r2, #2
 8003538:	4605      	mov	r5, r0
 800353a:	460c      	mov	r4, r1
 800353c:	4637      	mov	r7, r6
 800353e:	3510      	adds	r5, #16
 8003540:	3410      	adds	r4, #16

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8003542:	b95f      	cbnz	r7, 800355c <arm_dot_prod_f32+0x2c>
 8003544:	0134      	lsls	r4, r6, #4
 8003546:	4421      	add	r1, r4
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8003548:	f002 0203 	and.w	r2, r2, #3
 800354c:	4420      	add	r0, r4
 800354e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */


  while(blkCnt > 0u)
 8003552:	4291      	cmp	r1, r2
 8003554:	d11c      	bne.n	8003590 <arm_dot_prod_f32+0x60>

    /* Decrement the loop counter */
    blkCnt--;
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 8003556:	edc3 7a00 	vstr	s15, [r3]
 800355a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sum += (*pSrcA++) * (*pSrcB++);
 800355c:	ed55 6a04 	vldr	s13, [r5, #-16]
 8003560:	ed14 7a04 	vldr	s14, [r4, #-16]
 8003564:	eee6 7a87 	vfma.f32	s15, s13, s14
    blkCnt--;
 8003568:	3f01      	subs	r7, #1
    sum += (*pSrcA++) * (*pSrcB++);
 800356a:	ed55 6a03 	vldr	s13, [r5, #-12]
 800356e:	ed14 7a03 	vldr	s14, [r4, #-12]
 8003572:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 8003576:	ed55 6a02 	vldr	s13, [r5, #-8]
 800357a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800357e:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 8003582:	ed55 6a01 	vldr	s13, [r5, #-4]
 8003586:	ed14 7a01 	vldr	s14, [r4, #-4]
 800358a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800358e:	e7d6      	b.n	800353e <arm_dot_prod_f32+0xe>
    sum += (*pSrcA++) * (*pSrcB++);
 8003590:	ecf0 6a01 	vldmia	r0!, {s13}
 8003594:	ecb1 7a01 	vldmia	r1!, {s14}
 8003598:	eee6 7a87 	vfma.f32	s15, s13, s14
 800359c:	e7d9      	b.n	8003552 <arm_dot_prod_f32+0x22>
 800359e:	bf00      	nop
 80035a0:	00000000 	.word	0x00000000

080035a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035a4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <HAL_InitTick+0x2c>)
{
 80035a8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80035b4:	f000 f892 	bl	80036dc <HAL_SYSTICK_Config>
 80035b8:	4604      	mov	r4, r0
 80035ba:	b938      	cbnz	r0, 80035cc <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80035bc:	4602      	mov	r2, r0
 80035be:	4629      	mov	r1, r5
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	f000 f84a 	bl	800365c <HAL_NVIC_SetPriority>
 80035c8:	4620      	mov	r0, r4
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80035cc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
 80035d0:	20000568 	.word	0x20000568

080035d4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035d4:	4a09      	ldr	r2, [pc, #36]	; (80035fc <HAL_Init+0x28>)
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80035dc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035de:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035e0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035e2:	f000 f829 	bl	8003638 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035e6:	2000      	movs	r0, #0
 80035e8:	f7ff ffdc 	bl	80035a4 <HAL_InitTick>
 80035ec:	4604      	mov	r4, r0
 80035ee:	b918      	cbnz	r0, 80035f8 <HAL_Init+0x24>
    HAL_MspInit();
 80035f0:	f003 fe62 	bl	80072b8 <HAL_MspInit>
}
 80035f4:	4620      	mov	r0, r4
 80035f6:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80035f8:	2401      	movs	r4, #1
 80035fa:	e7fb      	b.n	80035f4 <HAL_Init+0x20>
 80035fc:	40022000 	.word	0x40022000

08003600 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003600:	4a02      	ldr	r2, [pc, #8]	; (800360c <HAL_IncTick+0xc>)
 8003602:	6813      	ldr	r3, [r2, #0]
 8003604:	3301      	adds	r3, #1
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	2000cf54 	.word	0x2000cf54

08003610 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003610:	4b01      	ldr	r3, [pc, #4]	; (8003618 <HAL_GetTick+0x8>)
 8003612:	6818      	ldr	r0, [r3, #0]
}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	2000cf54 	.word	0x2000cf54

0800361c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800361c:	b538      	push	{r3, r4, r5, lr}
 800361e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003620:	f7ff fff6 	bl	8003610 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003624:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003626:	4605      	mov	r5, r0
  {
    wait++;
 8003628:	bf18      	it	ne
 800362a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800362c:	f7ff fff0 	bl	8003610 <HAL_GetTick>
 8003630:	1b40      	subs	r0, r0, r5
 8003632:	4284      	cmp	r4, r0
 8003634:	d8fa      	bhi.n	800362c <HAL_Delay+0x10>
  {
  }
}
 8003636:	bd38      	pop	{r3, r4, r5, pc}

08003638 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003638:	4a07      	ldr	r2, [pc, #28]	; (8003658 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800363a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800363c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003640:	041b      	lsls	r3, r3, #16
 8003642:	0c1b      	lsrs	r3, r3, #16
 8003644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003648:	0200      	lsls	r0, r0, #8
 800364a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8003652:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003654:	60d3      	str	r3, [r2, #12]
 8003656:	4770      	bx	lr
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800365e:	b530      	push	{r4, r5, lr}
 8003660:	68dc      	ldr	r4, [r3, #12]
 8003662:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003666:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800366c:	2b04      	cmp	r3, #4
 800366e:	bf28      	it	cs
 8003670:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003672:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	f04f 0501 	mov.w	r5, #1
 8003678:	fa05 f303 	lsl.w	r3, r5, r3
 800367c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003680:	bf8c      	ite	hi
 8003682:	3c03      	subhi	r4, #3
 8003684:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003686:	4019      	ands	r1, r3
 8003688:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800368a:	fa05 f404 	lsl.w	r4, r5, r4
 800368e:	3c01      	subs	r4, #1
 8003690:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8003692:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003694:	ea42 0201 	orr.w	r2, r2, r1
 8003698:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369c:	bfaf      	iteee	ge
 800369e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a2:	f000 000f 	andlt.w	r0, r0, #15
 80036a6:	4b06      	ldrlt	r3, [pc, #24]	; (80036c0 <HAL_NVIC_SetPriority+0x64>)
 80036a8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036aa:	bfa5      	ittet	ge
 80036ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80036b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80036b8:	bd30      	pop	{r4, r5, pc}
 80036ba:	bf00      	nop
 80036bc:	e000ed00 	.word	0xe000ed00
 80036c0:	e000ed14 	.word	0xe000ed14

080036c4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80036c4:	0942      	lsrs	r2, r0, #5
 80036c6:	2301      	movs	r3, #1
 80036c8:	f000 001f 	and.w	r0, r0, #31
 80036cc:	fa03 f000 	lsl.w	r0, r3, r0
 80036d0:	4b01      	ldr	r3, [pc, #4]	; (80036d8 <HAL_NVIC_EnableIRQ+0x14>)
 80036d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80036d6:	4770      	bx	lr
 80036d8:	e000e100 	.word	0xe000e100

080036dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036dc:	3801      	subs	r0, #1
 80036de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80036e2:	d20a      	bcs.n	80036fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e6:	4a07      	ldr	r2, [pc, #28]	; (8003704 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ea:	21f0      	movs	r1, #240	; 0xf0
 80036ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80036fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000e010 	.word	0xe000e010
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003708:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800370a:	4604      	mov	r4, r0
 800370c:	b908      	cbnz	r0, 8003712 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800370e:	2001      	movs	r0, #1
 8003710:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003712:	7f43      	ldrb	r3, [r0, #29]
 8003714:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003718:	b913      	cbnz	r3, 8003720 <HAL_CRC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800371a:	7702      	strb	r2, [r0, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800371c:	f002 fcb4 	bl	8006088 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003720:	2302      	movs	r3, #2
 8003722:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003724:	7923      	ldrb	r3, [r4, #4]
 8003726:	b9e3      	cbnz	r3, 8003762 <HAL_CRC_Init+0x5a>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	4a13      	ldr	r2, [pc, #76]	; (8003778 <HAL_CRC_Init+0x70>)
 800372c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	f022 0218 	bic.w	r2, r2, #24
 8003734:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003736:	7962      	ldrb	r2, [r4, #5]
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	b9d2      	cbnz	r2, 8003772 <HAL_CRC_Init+0x6a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800373c:	f04f 32ff 	mov.w	r2, #4294967295
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003740:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	6961      	ldr	r1, [r4, #20]
 8003746:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	69a1      	ldr	r1, [r4, #24]
 8003752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003756:	430a      	orrs	r2, r1
 8003758:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800375a:	2301      	movs	r3, #1
 800375c:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800375e:	2000      	movs	r0, #0
}
 8003760:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003762:	68e2      	ldr	r2, [r4, #12]
 8003764:	68a1      	ldr	r1, [r4, #8]
 8003766:	4620      	mov	r0, r4
 8003768:	f000 f808 	bl	800377c <HAL_CRCEx_Polynomial_Set>
 800376c:	2800      	cmp	r0, #0
 800376e:	d0e2      	beq.n	8003736 <HAL_CRC_Init+0x2e>
 8003770:	e7cd      	b.n	800370e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003772:	6922      	ldr	r2, [r4, #16]
 8003774:	e7e4      	b.n	8003740 <HAL_CRC_Init+0x38>
 8003776:	bf00      	nop
 8003778:	04c11db7 	.word	0x04c11db7

0800377c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800377c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800377e:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003780:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003784:	d306      	bcc.n	8003794 <HAL_CRCEx_Polynomial_Set+0x18>
 8003786:	fa21 f403 	lsr.w	r4, r1, r3
 800378a:	07e4      	lsls	r4, r4, #31
 800378c:	d5f8      	bpl.n	8003780 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800378e:	2a08      	cmp	r2, #8
 8003790:	d014      	beq.n	80037bc <HAL_CRCEx_Polynomial_Set+0x40>
 8003792:	d809      	bhi.n	80037a8 <HAL_CRCEx_Polynomial_Set+0x2c>
 8003794:	b972      	cbnz	r2, 80037b4 <HAL_CRCEx_Polynomial_Set+0x38>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003796:	6800      	ldr	r0, [r0, #0]
 8003798:	6141      	str	r1, [r0, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800379a:	6883      	ldr	r3, [r0, #8]
 800379c:	f023 0318 	bic.w	r3, r3, #24
 80037a0:	431a      	orrs	r2, r3
 80037a2:	6082      	str	r2, [r0, #8]
 80037a4:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
 80037a6:	bd10      	pop	{r4, pc}
  switch (PolyLength)
 80037a8:	2a10      	cmp	r2, #16
 80037aa:	d005      	beq.n	80037b8 <HAL_CRCEx_Polynomial_Set+0x3c>
 80037ac:	2a18      	cmp	r2, #24
 80037ae:	d101      	bne.n	80037b4 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_7B)
 80037b0:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80037b2:	d9f0      	bls.n	8003796 <HAL_CRCEx_Polynomial_Set+0x1a>
  switch (PolyLength)
 80037b4:	2001      	movs	r0, #1
 80037b6:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80037b8:	2b07      	cmp	r3, #7
 80037ba:	e7fa      	b.n	80037b2 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 80037bc:	2b0f      	cmp	r3, #15
 80037be:	e7f8      	b.n	80037b2 <HAL_CRCEx_Polynomial_Set+0x36>

080037c0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80037c0:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 80037c2:	4604      	mov	r4, r0
 80037c4:	b168      	cbz	r0, 80037e2 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80037c6:	7903      	ldrb	r3, [r0, #4]
 80037c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037cc:	b913      	cbnz	r3, 80037d4 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80037ce:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80037d0:	f002 fc9c 	bl	800610c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80037d4:	2302      	movs	r3, #2
 80037d6:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037d8:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80037da:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037dc:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80037de:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80037e0:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80037e2:	2001      	movs	r0, #1
}
 80037e4:	bd10      	pop	{r4, pc}

080037e6 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037e6:	7943      	ldrb	r3, [r0, #5]
 80037e8:	2b01      	cmp	r3, #1
{
 80037ea:	b530      	push	{r4, r5, lr}
 80037ec:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 80037f0:	d017      	beq.n	8003822 <HAL_DAC_Start+0x3c>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037f2:	7103      	strb	r3, [r0, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80037f4:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 80037f6:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 80037f8:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 80037fa:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 80037fc:	f001 0510 	and.w	r5, r1, #16
 8003800:	40aa      	lsls	r2, r5
 8003802:	4322      	orrs	r2, r4
 8003804:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8003806:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 8003808:	b969      	cbnz	r1, 8003826 <HAL_DAC_Start+0x40>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800380a:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 800380e:	2a04      	cmp	r2, #4
 8003810:	d103      	bne.n	800381a <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003818:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800381a:	2301      	movs	r3, #1
 800381c:	7103      	strb	r3, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800381e:	2300      	movs	r3, #0
 8003820:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8003822:	4618      	mov	r0, r3

  /* Return function status */
  return HAL_OK;
}
 8003824:	bd30      	pop	{r4, r5, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8003826:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 800382a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800382e:	d1f4      	bne.n	800381a <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	f042 0202 	orr.w	r2, r2, #2
 8003836:	e7ef      	b.n	8003818 <HAL_DAC_Start+0x32>

08003838 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8003838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383a:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800383c:	7940      	ldrb	r0, [r0, #5]
 800383e:	2801      	cmp	r0, #1
{
 8003840:	460e      	mov	r6, r1
 8003842:	f04f 0002 	mov.w	r0, #2
 8003846:	4611      	mov	r1, r2
 8003848:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdac);
 800384a:	d054      	beq.n	80038f6 <HAL_DAC_Start_DMA+0xbe>
 800384c:	2401      	movs	r4, #1
 800384e:	716c      	strb	r4, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003850:	7128      	strb	r0, [r5, #4]
 8003852:	682c      	ldr	r4, [r5, #0]

  if(Channel == DAC_CHANNEL_1)
 8003854:	b9e6      	cbnz	r6, 8003890 <HAL_DAC_Start_DMA+0x58>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003856:	68a8      	ldr	r0, [r5, #8]
 8003858:	4f27      	ldr	r7, [pc, #156]	; (80038f8 <HAL_DAC_Start_DMA+0xc0>)
 800385a:	62c7      	str	r7, [r0, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800385c:	4f27      	ldr	r7, [pc, #156]	; (80038fc <HAL_DAC_Start_DMA+0xc4>)
 800385e:	6307      	str	r7, [r0, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003860:	4f27      	ldr	r7, [pc, #156]	; (8003900 <HAL_DAC_Start_DMA+0xc8>)
 8003862:	6347      	str	r7, [r0, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003864:	6827      	ldr	r7, [r4, #0]

    /* Case of use of channel 1 */
    switch(Alignment)
 8003866:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003868:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 800386c:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 800386e:	d009      	beq.n	8003884 <HAL_DAC_Start_DMA+0x4c>
 8003870:	2a08      	cmp	r2, #8
 8003872:	d00a      	beq.n	800388a <HAL_DAC_Start_DMA+0x52>
 8003874:	2a00      	cmp	r2, #0
 8003876:	d13c      	bne.n	80038f2 <HAL_DAC_Start_DMA+0xba>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003878:	f104 0208 	add.w	r2, r4, #8

  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800387c:	6827      	ldr	r7, [r4, #0]
 800387e:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8003882:	e01a      	b.n	80038ba <HAL_DAC_Start_DMA+0x82>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003884:	f104 020c 	add.w	r2, r4, #12
        break;
 8003888:	e7f8      	b.n	800387c <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800388a:	f104 0210 	add.w	r2, r4, #16
        break;
 800388e:	e7f5      	b.n	800387c <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003890:	68e8      	ldr	r0, [r5, #12]
 8003892:	4f1c      	ldr	r7, [pc, #112]	; (8003904 <HAL_DAC_Start_DMA+0xcc>)
 8003894:	62c7      	str	r7, [r0, #44]	; 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003896:	4f1c      	ldr	r7, [pc, #112]	; (8003908 <HAL_DAC_Start_DMA+0xd0>)
 8003898:	6307      	str	r7, [r0, #48]	; 0x30
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800389a:	4f1c      	ldr	r7, [pc, #112]	; (800390c <HAL_DAC_Start_DMA+0xd4>)
 800389c:	6347      	str	r7, [r0, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800389e:	6827      	ldr	r7, [r4, #0]
    switch(Alignment)
 80038a0:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80038a2:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 80038a6:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 80038a8:	d016      	beq.n	80038d8 <HAL_DAC_Start_DMA+0xa0>
 80038aa:	2a08      	cmp	r2, #8
 80038ac:	d017      	beq.n	80038de <HAL_DAC_Start_DMA+0xa6>
 80038ae:	b9f2      	cbnz	r2, 80038ee <HAL_DAC_Start_DMA+0xb6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80038b0:	f104 0214 	add.w	r2, r4, #20
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80038b4:	6827      	ldr	r7, [r4, #0]
 80038b6:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80038ba:	6027      	str	r7, [r4, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80038bc:	f000 faf8 	bl	8003eb0 <HAL_DMA_Start_IT>
    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80038c0:	2300      	movs	r3, #0
 80038c2:	716b      	strb	r3, [r5, #5]

  if (status == HAL_OK)
 80038c4:	b970      	cbnz	r0, 80038e4 <HAL_DAC_Start_DMA+0xac>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80038c6:	682b      	ldr	r3, [r5, #0]
 80038c8:	f006 0110 	and.w	r1, r6, #16
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	2601      	movs	r6, #1
 80038d0:	408e      	lsls	r6, r1
 80038d2:	4316      	orrs	r6, r2
 80038d4:	601e      	str	r6, [r3, #0]
 80038d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80038d8:	f104 0218 	add.w	r2, r4, #24
        break;
 80038dc:	e7ea      	b.n	80038b4 <HAL_DAC_Start_DMA+0x7c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80038de:	f104 021c 	add.w	r2, r4, #28
        break;
 80038e2:	e7e7      	b.n	80038b4 <HAL_DAC_Start_DMA+0x7c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80038e4:	692b      	ldr	r3, [r5, #16]
 80038e6:	f043 0304 	orr.w	r3, r3, #4
 80038ea:	612b      	str	r3, [r5, #16]
 80038ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpreg = 0U;
 80038ee:	2200      	movs	r2, #0
 80038f0:	e7e0      	b.n	80038b4 <HAL_DAC_Start_DMA+0x7c>
 80038f2:	4632      	mov	r2, r6
 80038f4:	e7c2      	b.n	800387c <HAL_DAC_Start_DMA+0x44>
  }

  /* Return function status */
  return status;
}
 80038f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038f8:	08003913 	.word	0x08003913
 80038fc:	08003925 	.word	0x08003925
 8003900:	08003931 	.word	0x08003931
 8003904:	08003a61 	.word	0x08003a61
 8003908:	08003a71 	.word	0x08003a71
 800390c:	08003a7b 	.word	0x08003a7b

08003910 <HAL_DAC_ConvCpltCallbackCh1>:
 8003910:	4770      	bx	lr

08003912 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003912:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003914:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003916:	4620      	mov	r0, r4
 8003918:	f7ff fffa 	bl	8003910 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800391c:	2301      	movs	r3, #1
 800391e:	7123      	strb	r3, [r4, #4]
 8003920:	bd10      	pop	{r4, pc}

08003922 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8003922:	4770      	bx	lr

08003924 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003924:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003926:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003928:	f7ff fffb 	bl	8003922 <HAL_DAC_ConvHalfCpltCallbackCh1>
 800392c:	bd08      	pop	{r3, pc}

0800392e <HAL_DAC_ErrorCallbackCh1>:
 800392e:	4770      	bx	lr

08003930 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003930:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003932:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003934:	6923      	ldr	r3, [r4, #16]
 8003936:	f043 0304 	orr.w	r3, r3, #4
 800393a:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800393c:	4620      	mov	r0, r4
 800393e:	f7ff fff6 	bl	800392e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003942:	2301      	movs	r3, #1
 8003944:	7123      	strb	r3, [r4, #4]
 8003946:	bd10      	pop	{r4, pc}

08003948 <HAL_DAC_ConfigChannel>:
{
 8003948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdac);
 800394a:	7943      	ldrb	r3, [r0, #5]
 800394c:	2b01      	cmp	r3, #1
{
 800394e:	4604      	mov	r4, r0
 8003950:	460d      	mov	r5, r1
 8003952:	4616      	mov	r6, r2
 8003954:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8003958:	d063      	beq.n	8003a22 <HAL_DAC_ConfigChannel+0xda>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800395a:	680b      	ldr	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800395c:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 800395e:	2201      	movs	r2, #1
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003960:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 8003962:	7162      	strb	r2, [r4, #5]
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003964:	d125      	bne.n	80039b2 <HAL_DAC_ConfigChannel+0x6a>
    if (Channel == DAC_CHANNEL_1)
 8003966:	2e00      	cmp	r6, #0
 8003968:	d16c      	bne.n	8003a44 <HAL_DAC_ConfigChannel+0xfc>
      tickstart = HAL_GetTick();
 800396a:	f7ff fe51 	bl	8003610 <HAL_GetTick>
 800396e:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	d455      	bmi.n	8003a24 <HAL_DAC_ConfigChannel+0xdc>
      HAL_Delay(1);
 8003978:	2001      	movs	r0, #1
 800397a:	f7ff fe4f 	bl	800361c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	69aa      	ldr	r2, [r5, #24]
 8003982:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003984:	6821      	ldr	r1, [r4, #0]
 8003986:	f006 0010 	and.w	r0, r6, #16
 800398a:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800398c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003990:	4083      	lsls	r3, r0
 8003992:	ea22 0203 	bic.w	r2, r2, r3
 8003996:	69eb      	ldr	r3, [r5, #28]
 8003998:	4083      	lsls	r3, r0
 800399a:	431a      	orrs	r2, r3
 800399c:	648a      	str	r2, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800399e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80039a0:	22ff      	movs	r2, #255	; 0xff
 80039a2:	4082      	lsls	r2, r0
 80039a4:	ea23 0302 	bic.w	r3, r3, r2
 80039a8:	6a2a      	ldr	r2, [r5, #32]
 80039aa:	fa02 f000 	lsl.w	r0, r2, r0
 80039ae:	4303      	orrs	r3, r0
 80039b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80039b2:	692b      	ldr	r3, [r5, #16]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	f006 0210 	and.w	r2, r6, #16
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	d108      	bne.n	80039d0 <HAL_DAC_ConfigChannel+0x88>
  tmpreg1 = hdac->Instance->CCR;
 80039be:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80039c0:	201f      	movs	r0, #31
 80039c2:	4090      	lsls	r0, r2
 80039c4:	ea21 0000 	bic.w	r0, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039c8:	6969      	ldr	r1, [r5, #20]
 80039ca:	4091      	lsls	r1, r2
 80039cc:	4301      	orrs	r1, r0
  hdac->Instance->CCR = tmpreg1;
 80039ce:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg1 = hdac->Instance->MCR;
 80039d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80039d2:	68ae      	ldr	r6, [r5, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80039d4:	2007      	movs	r0, #7
 80039d6:	4090      	lsls	r0, r2
 80039d8:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80039dc:	6829      	ldr	r1, [r5, #0]
 80039de:	4331      	orrs	r1, r6
 80039e0:	68ee      	ldr	r6, [r5, #12]
 80039e2:	4331      	orrs	r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039e4:	4091      	lsls	r1, r2
 80039e6:	4301      	orrs	r1, r0
  hdac->Instance->MCR = tmpreg1;
 80039e8:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039f0:	4090      	lsls	r0, r2
 80039f2:	ea21 0100 	bic.w	r1, r1, r0
 80039f6:	6019      	str	r1, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 80039f8:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80039fa:	f640 70fc 	movw	r0, #4092	; 0xffc
 80039fe:	4090      	lsls	r0, r2
 8003a00:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a04:	6869      	ldr	r1, [r5, #4]
 8003a06:	4091      	lsls	r1, r2
 8003a08:	4301      	orrs	r1, r0
  hdac->Instance->CR = tmpreg1;
 8003a0a:	6019      	str	r1, [r3, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003a0c:	6819      	ldr	r1, [r3, #0]
 8003a0e:	20c0      	movs	r0, #192	; 0xc0
 8003a10:	fa00 f202 	lsl.w	r2, r0, r2
 8003a14:	ea21 0202 	bic.w	r2, r1, r2
 8003a18:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hdac);
 8003a1a:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8003a20:	7160      	strb	r0, [r4, #5]
}
 8003a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a24:	f7ff fdf4 	bl	8003610 <HAL_GetTick>
 8003a28:	1bc0      	subs	r0, r0, r7
 8003a2a:	2801      	cmp	r0, #1
 8003a2c:	d9a0      	bls.n	8003970 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a2e:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a30:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a32:	f043 0308 	orr.w	r3, r3, #8
 8003a36:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a38:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8003a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a3c:	f7ff fde8 	bl	8003610 <HAL_GetTick>
 8003a40:	2801      	cmp	r0, #1
 8003a42:	d8f4      	bhi.n	8003a2e <HAL_DAC_ConfigChannel+0xe6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	dbf7      	blt.n	8003a3c <HAL_DAC_ConfigChannel+0xf4>
      HAL_Delay(1);
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	f7ff fde5 	bl	800361c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	69aa      	ldr	r2, [r5, #24]
 8003a56:	645a      	str	r2, [r3, #68]	; 0x44
 8003a58:	e794      	b.n	8003984 <HAL_DAC_ConfigChannel+0x3c>

08003a5a <HAL_DACEx_ConvCpltCallbackCh2>:
 8003a5a:	4770      	bx	lr

08003a5c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8003a5c:	4770      	bx	lr

08003a5e <HAL_DACEx_ErrorCallbackCh2>:
 8003a5e:	4770      	bx	lr

08003a60 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a60:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a62:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003a64:	4620      	mov	r0, r4
 8003a66:	f7ff fff8 	bl	8003a5a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	7123      	strb	r3, [r4, #4]
 8003a6e:	bd10      	pop	{r4, pc}

08003a70 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a70:	b508      	push	{r3, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003a72:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003a74:	f7ff fff2 	bl	8003a5c <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8003a78:	bd08      	pop	{r3, pc}

08003a7a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003a7a:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a7c:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a7e:	6923      	ldr	r3, [r4, #16]
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003a86:	4620      	mov	r0, r4
 8003a88:	f7ff ffe9 	bl	8003a5e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	7123      	strb	r3, [r4, #4]
 8003a90:	bd10      	pop	{r4, pc}

08003a92 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003a92:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003a94:	6803      	ldr	r3, [r0, #0]
 8003a96:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 8003a9a:	b93a      	cbnz	r2, 8003aac <DFSDM_RegConvStart+0x1a>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003aa2:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003aa4:	2901      	cmp	r1, #1
 8003aa6:	d11c      	bne.n	8003ae2 <DFSDM_RegConvStart+0x50>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e01b      	b.n	8003ae4 <DFSDM_RegConvStart+0x52>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003aba:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003abc:	681a      	ldr	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003abe:	2903      	cmp	r1, #3
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003ac6:	d1ed      	bne.n	8003aa4 <DFSDM_RegConvStart+0x12>
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003ac8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003aca:	b91a      	cbnz	r2, 8003ad4 <DFSDM_RegConvStart+0x42>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	f042 0202 	orr.w	r2, r2, #2
 8003ad2:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003ad4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	bf0c      	ite	eq
 8003adc:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 8003ade:	2301      	movne	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003ae0:	6483      	str	r3, [r0, #72]	; 0x48
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003ae2:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003ae4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 8003ae8:	4770      	bx	lr
	...

08003aec <DFSDM_GetChannelFromInstance>:
  if (Instance == DFSDM1_Channel0)
 8003aec:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <DFSDM_GetChannelFromInstance+0x54>)
 8003aee:	4298      	cmp	r0, r3
 8003af0:	d017      	beq.n	8003b22 <DFSDM_GetChannelFromInstance+0x36>
  else if (Instance == DFSDM1_Channel1)
 8003af2:	3320      	adds	r3, #32
 8003af4:	4298      	cmp	r0, r3
 8003af6:	d016      	beq.n	8003b26 <DFSDM_GetChannelFromInstance+0x3a>
  else if (Instance == DFSDM1_Channel2)
 8003af8:	3320      	adds	r3, #32
 8003afa:	4298      	cmp	r0, r3
 8003afc:	d015      	beq.n	8003b2a <DFSDM_GetChannelFromInstance+0x3e>
  else if (Instance == DFSDM1_Channel3)
 8003afe:	3320      	adds	r3, #32
 8003b00:	4298      	cmp	r0, r3
 8003b02:	d014      	beq.n	8003b2e <DFSDM_GetChannelFromInstance+0x42>
  else if (Instance == DFSDM1_Channel4)
 8003b04:	3320      	adds	r3, #32
 8003b06:	4298      	cmp	r0, r3
 8003b08:	d013      	beq.n	8003b32 <DFSDM_GetChannelFromInstance+0x46>
  else if (Instance == DFSDM1_Channel5)
 8003b0a:	3320      	adds	r3, #32
 8003b0c:	4298      	cmp	r0, r3
 8003b0e:	d012      	beq.n	8003b36 <DFSDM_GetChannelFromInstance+0x4a>
  else if (Instance == DFSDM1_Channel6)
 8003b10:	3320      	adds	r3, #32
 8003b12:	4298      	cmp	r0, r3
 8003b14:	d011      	beq.n	8003b3a <DFSDM_GetChannelFromInstance+0x4e>
    channel = 7;
 8003b16:	3320      	adds	r3, #32
 8003b18:	4298      	cmp	r0, r3
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2007      	moveq	r0, #7
 8003b1e:	2000      	movne	r0, #0
 8003b20:	4770      	bx	lr
    channel = 0;
 8003b22:	2000      	movs	r0, #0
 8003b24:	4770      	bx	lr
    channel = 1;
 8003b26:	2001      	movs	r0, #1
 8003b28:	4770      	bx	lr
    channel = 2;
 8003b2a:	2002      	movs	r0, #2
 8003b2c:	4770      	bx	lr
    channel = 3;
 8003b2e:	2003      	movs	r0, #3
 8003b30:	4770      	bx	lr
    channel = 4;
 8003b32:	2004      	movs	r0, #4
 8003b34:	4770      	bx	lr
    channel = 5;
 8003b36:	2005      	movs	r0, #5
 8003b38:	4770      	bx	lr
    channel = 6;
 8003b3a:	2006      	movs	r0, #6
}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40016000 	.word	0x40016000

08003b44 <HAL_DFSDM_ChannelInit>:
{
 8003b44:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 8003b46:	4604      	mov	r4, r0
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d067      	beq.n	8003c1c <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003b4c:	6800      	ldr	r0, [r0, #0]
 8003b4e:	4d34      	ldr	r5, [pc, #208]	; (8003c20 <HAL_DFSDM_ChannelInit+0xdc>)
 8003b50:	f7ff ffcc 	bl	8003aec <DFSDM_GetChannelFromInstance>
 8003b54:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d15f      	bne.n	8003c1c <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f002 fc4d 	bl	80063fc <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8003b62:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <HAL_DFSDM_ChannelInit+0xe0>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	3201      	adds	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d119      	bne.n	8003ba4 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003b70:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <HAL_DFSDM_ChannelInit+0xe4>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003b78:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68a1      	ldr	r1, [r4, #8]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003b88:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003b8a:	7922      	ldrb	r2, [r4, #4]
 8003b8c:	2a01      	cmp	r2, #1
 8003b8e:	d105      	bne.n	8003b9c <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003b90:	68e1      	ldr	r1, [r4, #12]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	3901      	subs	r1, #1
 8003b96:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003b9a:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ba2:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003ba4:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ba6:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003ba8:	6803      	ldr	r3, [r0, #0]
 8003baa:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8003bae:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003bb0:	6923      	ldr	r3, [r4, #16]
 8003bb2:	6802      	ldr	r2, [r0, #0]
 8003bb4:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003bb6:	69a1      	ldr	r1, [r4, #24]
 8003bb8:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003bbe:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bc0:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003bc2:	f023 030f 	bic.w	r3, r3, #15
 8003bc6:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bc8:	69e3      	ldr	r3, [r4, #28]
 8003bca:	6802      	ldr	r2, [r0, #0]
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003bd2:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003bd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003bd6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003bd8:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8003bdc:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003bde:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003be0:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003be2:	430b      	orrs	r3, r1
 8003be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003be8:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003bea:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003bec:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003bf4:	6843      	ldr	r3, [r0, #4]
 8003bf6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003bfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003bfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003c00:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003c02:	6803      	ldr	r3, [r0, #0]
 8003c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c08:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003c10:	f7ff ff6c 	bl	8003aec <DFSDM_GetChannelFromInstance>
 8003c14:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8003c18:	2000      	movs	r0, #0
 8003c1a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003c1c:	2001      	movs	r0, #1
}
 8003c1e:	bd38      	pop	{r3, r4, r5, pc}
 8003c20:	2000075c 	.word	0x2000075c
 8003c24:	2000077c 	.word	0x2000077c
 8003c28:	40016000 	.word	0x40016000

08003c2c <HAL_DFSDM_FilterInit>:
{
 8003c2c:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_filter == NULL)
 8003c2e:	4604      	mov	r4, r0
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d069      	beq.n	8003d08 <HAL_DFSDM_FilterInit+0xdc>
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003c34:	6802      	ldr	r2, [r0, #0]
 8003c36:	4b35      	ldr	r3, [pc, #212]	; (8003d0c <HAL_DFSDM_FilterInit+0xe0>)
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d105      	bne.n	8003c48 <HAL_DFSDM_FilterInit+0x1c>
 8003c3c:	6840      	ldr	r0, [r0, #4]
 8003c3e:	2801      	cmp	r0, #1
 8003c40:	d063      	beq.n	8003d0a <HAL_DFSDM_FilterInit+0xde>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003c42:	68e0      	ldr	r0, [r4, #12]
 8003c44:	2801      	cmp	r0, #1
 8003c46:	d060      	beq.n	8003d0a <HAL_DFSDM_FilterInit+0xde>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003c48:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003c4a:	2201      	movs	r2, #1
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003c4c:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003c4e:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003c50:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003c52:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003c54:	4620      	mov	r0, r4
 8003c56:	f002 fb4b 	bl	80062f0 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003c5a:	6823      	ldr	r3, [r4, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003c5c:	7c20      	ldrb	r0, [r4, #16]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003c64:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003c66:	7a22      	ldrb	r2, [r4, #8]
 8003c68:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	bf0c      	ite	eq
 8003c6e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003c72:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 8003c76:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003c78:	7a62      	ldrb	r2, [r4, #9]
 8003c7a:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	bf0c      	ite	eq
 8003c80:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003c84:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 8003c88:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003c8a:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003c8c:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003c8e:	f422 42ce 	bic.w	r2, r2, #26368	; 0x6700
 8003c92:	f022 0208 	bic.w	r2, r2, #8
 8003c96:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003c98:	2d02      	cmp	r5, #2
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003c9a:	bf01      	itttt	eq
 8003c9c:	681a      	ldreq	r2, [r3, #0]
 8003c9e:	6961      	ldreq	r1, [r4, #20]
 8003ca0:	430a      	orreq	r2, r1
 8003ca2:	601a      	streq	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003ca4:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003ca6:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003ca8:	bf0c      	ite	eq
 8003caa:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003cae:	f022 0210 	bicne.w	r2, r2, #16
 8003cb2:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003cb4:	7c62      	ldrb	r2, [r4, #17]
 8003cb6:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	bf0c      	ite	eq
 8003cbc:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003cc0:	f022 0220 	bicne.w	r2, r2, #32
 8003cc4:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 8003ccc:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8003cd0:	615a      	str	r2, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003cd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003cd4:	6959      	ldr	r1, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003cd6:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	69e1      	ldr	r1, [r4, #28]
 8003cdc:	430a      	orrs	r2, r1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003cde:	6a21      	ldr	r1, [r4, #32]
 8003ce0:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003ce2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003ce6:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003ce8:	6862      	ldr	r2, [r4, #4]
 8003cea:	6362      	str	r2, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003cec:	69a2      	ldr	r2, [r4, #24]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003cee:	63a5      	str	r5, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003cf0:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003cf2:	681a      	ldr	r2, [r3, #0]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003cf4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003cf8:	f042 0201 	orr.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 8003d04:	2000      	movs	r0, #0
 8003d06:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003d08:	2001      	movs	r0, #1
}
 8003d0a:	bd38      	pop	{r3, r4, r5, pc}
 8003d0c:	40016100 	.word	0x40016100

08003d10 <HAL_DFSDM_FilterConfigRegChannel>:
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003d10:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2bfd      	cmp	r3, #253	; 0xfd
{
 8003d1a:	b510      	push	{r4, lr}
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003d1c:	d813      	bhi.n	8003d46 <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003d1e:	6803      	ldr	r3, [r0, #0]
 8003d20:	681c      	ldr	r4, [r3, #0]
 8003d22:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 8003d26:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8003d2a:	601c      	str	r4, [r3, #0]
 8003d2c:	0209      	lsls	r1, r1, #8
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003d2e:	681c      	ldr	r4, [r3, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003d30:	2a01      	cmp	r2, #1
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003d32:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8003d36:	bf08      	it	eq
 8003d38:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003d3c:	4321      	orrs	r1, r4
 8003d3e:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003d40:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8003d42:	2000      	movs	r0, #0
 8003d44:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003d46:	2001      	movs	r0, #1
}
 8003d48:	bd10      	pop	{r4, pc}
	...

08003d4c <HAL_DFSDM_FilterRegularStart_DMA>:
{
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	4613      	mov	r3, r2
 8003d50:	4605      	mov	r5, r0
  if ((pData == NULL) || (Length == 0U))
 8003d52:	460a      	mov	r2, r1
 8003d54:	b351      	cbz	r1, 8003dac <HAL_DFSDM_FilterRegularStart_DMA+0x60>
 8003d56:	b34b      	cbz	r3, 8003dac <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8003d58:	6807      	ldr	r7, [r0, #0]
 8003d5a:	6839      	ldr	r1, [r7, #0]
 8003d5c:	0289      	lsls	r1, r1, #10
 8003d5e:	d525      	bpl.n	8003dac <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003d60:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003d62:	b949      	cbnz	r1, 8003d78 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
 8003d64:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003d66:	b939      	cbnz	r1, 8003d78 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003d68:	6a81      	ldr	r1, [r0, #40]	; 0x28
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003d6a:	69c8      	ldr	r0, [r1, #28]
 8003d6c:	b908      	cbnz	r0, 8003d72 <HAL_DFSDM_FilterRegularStart_DMA+0x26>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d11c      	bne.n	8003dac <HAL_DFSDM_FilterRegularStart_DMA+0x60>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003d72:	69c9      	ldr	r1, [r1, #28]
 8003d74:	2920      	cmp	r1, #32
 8003d76:	d019      	beq.n	8003dac <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003d78:	f895 604c 	ldrb.w	r6, [r5, #76]	; 0x4c
 8003d7c:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
 8003d80:	2e01      	cmp	r6, #1
 8003d82:	d113      	bne.n	8003dac <HAL_DFSDM_FilterRegularStart_DMA+0x60>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003d84:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003d86:	490d      	ldr	r1, [pc, #52]	; (8003dbc <HAL_DFSDM_FilterRegularStart_DMA+0x70>)
 8003d88:	62c1      	str	r1, [r0, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003d8a:	490d      	ldr	r1, [pc, #52]	; (8003dc0 <HAL_DFSDM_FilterRegularStart_DMA+0x74>)
 8003d8c:	6341      	str	r1, [r0, #52]	; 0x34
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003d8e:	69c1      	ldr	r1, [r0, #28]
 8003d90:	4c0c      	ldr	r4, [pc, #48]	; (8003dc4 <HAL_DFSDM_FilterRegularStart_DMA+0x78>)
 8003d92:	2920      	cmp	r1, #32
 8003d94:	bf18      	it	ne
 8003d96:	2400      	movne	r4, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003d98:	6304      	str	r4, [r0, #48]	; 0x30
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003d9a:	f107 011c 	add.w	r1, r7, #28
 8003d9e:	f000 f887 	bl	8003eb0 <HAL_DMA_Start_IT>
 8003da2:	4604      	mov	r4, r0
 8003da4:	b120      	cbz	r0, 8003db0 <HAL_DFSDM_FilterRegularStart_DMA+0x64>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003da6:	23ff      	movs	r3, #255	; 0xff
 8003da8:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
    status = HAL_ERROR;
 8003dac:	2401      	movs	r4, #1
 8003dae:	e002      	b.n	8003db6 <HAL_DFSDM_FilterRegularStart_DMA+0x6a>
      DFSDM_RegConvStart(hdfsdm_filter);
 8003db0:	4628      	mov	r0, r5
 8003db2:	f7ff fe6e 	bl	8003a92 <DFSDM_RegConvStart>
}
 8003db6:	4620      	mov	r0, r4
 8003db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	08003dc9 	.word	0x08003dc9
 8003dc0:	08003ddf 	.word	0x08003ddf
 8003dc4:	08003dd3 	.word	0x08003dd3

08003dc8 <DFSDM_DMARegularConvCplt>:
{
 8003dc8:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003dca:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003dcc:	f003 f9fa 	bl	80071c4 <HAL_DFSDM_FilterRegConvCpltCallback>
 8003dd0:	bd08      	pop	{r3, pc}

08003dd2 <DFSDM_DMARegularHalfConvCplt>:
{
 8003dd2:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003dd4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003dd6:	f003 f9e3 	bl	80071a0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
 8003dda:	bd08      	pop	{r3, pc}

08003ddc <HAL_DFSDM_FilterErrorCallback>:
{
 8003ddc:	4770      	bx	lr

08003dde <DFSDM_DMAError>:
{
 8003dde:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003de2:	2303      	movs	r3, #3
 8003de4:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003de6:	f7ff fff9 	bl	8003ddc <HAL_DFSDM_FilterErrorCallback>
 8003dea:	bd08      	pop	{r3, pc}

08003dec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dec:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d04e      	beq.n	8003e90 <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003df2:	6801      	ldr	r1, [r0, #0]
 8003df4:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <HAL_DMA_Init+0xa8>)
 8003df6:	4299      	cmp	r1, r3
 8003df8:	f04f 0414 	mov.w	r4, #20
 8003dfc:	d840      	bhi.n	8003e80 <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003dfe:	4a26      	ldr	r2, [pc, #152]	; (8003e98 <HAL_DMA_Init+0xac>)
 8003e00:	440a      	add	r2, r1
 8003e02:	fbb2 f2f4 	udiv	r2, r2, r4
 8003e06:	0092      	lsls	r2, r2, #2
 8003e08:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e0a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8003e0e:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e10:	2302      	movs	r3, #2
 8003e12:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e16:	6884      	ldr	r4, [r0, #8]
 8003e18:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e1a:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8003e1c:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8003e1e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e20:	432b      	orrs	r3, r5
 8003e22:	6945      	ldr	r5, [r0, #20]
 8003e24:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e26:	6985      	ldr	r5, [r0, #24]
 8003e28:	432b      	orrs	r3, r5
 8003e2a:	69c5      	ldr	r5, [r0, #28]
 8003e2c:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e2e:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e30:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8003e34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e38:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8003e3a:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003e3c:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8003e40:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003e42:	d014      	beq.n	8003e6e <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003e44:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003e46:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <HAL_DMA_Init+0xb0>)
 8003e48:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e4a:	bf0c      	ite	eq
 8003e4c:	4914      	ldreq	r1, [pc, #80]	; (8003ea0 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e4e:	4915      	ldrne	r1, [pc, #84]	; (8003ea4 <HAL_DMA_Init+0xb8>)
 8003e50:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e52:	680a      	ldr	r2, [r1, #0]
 8003e54:	f003 031c 	and.w	r3, r3, #28
 8003e58:	240f      	movs	r4, #15
 8003e5a:	409c      	lsls	r4, r3
 8003e5c:	ea22 0204 	bic.w	r2, r2, r4
 8003e60:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e62:	6842      	ldr	r2, [r0, #4]
 8003e64:	680c      	ldr	r4, [r1, #0]
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	4323      	orrs	r3, r4
 8003e6c:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e6e:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e70:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e72:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e74:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8003e78:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_DMA_Init+0xbc>)
 8003e82:	440b      	add	r3, r1
 8003e84:	fbb3 f3f4 	udiv	r3, r3, r4
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <HAL_DMA_Init+0xc0>)
 8003e8e:	e7be      	b.n	8003e0e <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 8003e90:	2001      	movs	r0, #1
}
 8003e92:	bd30      	pop	{r4, r5, pc}
 8003e94:	40020407 	.word	0x40020407
 8003e98:	bffdfff8 	.word	0xbffdfff8
 8003e9c:	40020000 	.word	0x40020000
 8003ea0:	400200a8 	.word	0x400200a8
 8003ea4:	400204a8 	.word	0x400204a8
 8003ea8:	bffdfbf8 	.word	0xbffdfbf8
 8003eac:	40020400 	.word	0x40020400

08003eb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eb0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003eb2:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8003eb6:	2c01      	cmp	r4, #1
 8003eb8:	d038      	beq.n	8003f2c <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 8003eba:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8003ebe:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ec0:	b2ed      	uxtb	r5, r5
 8003ec2:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8003ec4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8003ec8:	f04f 0600 	mov.w	r6, #0
 8003ecc:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ed0:	d12a      	bne.n	8003f28 <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ed2:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ed6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed8:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003eda:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003edc:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8003ede:	f026 0601 	bic.w	r6, r6, #1
 8003ee2:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ee4:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8003ee6:	f006 061c 	and.w	r6, r6, #28
 8003eea:	40b5      	lsls	r5, r6
 8003eec:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003eee:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ef0:	6883      	ldr	r3, [r0, #8]
 8003ef2:	6805      	ldr	r5, [r0, #0]
 8003ef4:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8003ef6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ef8:	bf0b      	itete	eq
 8003efa:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003efc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003efe:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003f00:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003f02:	b14b      	cbz	r3, 8003f18 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f0a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f14:	2000      	movs	r0, #0
 8003f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	f023 0304 	bic.w	r3, r3, #4
 8003f1e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	f043 030a 	orr.w	r3, r3, #10
 8003f26:	e7f0      	b.n	8003f0a <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 8003f28:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8003f2c:	2002      	movs	r0, #2
}
 8003f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f30 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f30:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003f34:	2a02      	cmp	r2, #2
{
 8003f36:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f38:	d003      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003f3e:	2001      	movs	r0, #1
 8003f40:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f42:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f44:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f46:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8003f48:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f4a:	f021 010e 	bic.w	r1, r1, #14
 8003f4e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003f50:	6811      	ldr	r1, [r2, #0]
 8003f52:	f021 0101 	bic.w	r1, r1, #1
 8003f56:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	f002 021c 	and.w	r2, r2, #28
 8003f60:	fa01 f202 	lsl.w	r2, r1, r2
 8003f64:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8003f66:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003f68:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003f6c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8003f70:	b113      	cbz	r3, 8003f78 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8003f72:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003f74:	4620      	mov	r0, r4
 8003f76:	bd10      	pop	{r4, pc}
 8003f78:	4618      	mov	r0, r3
}
 8003f7a:	bd10      	pop	{r4, pc}

08003f7c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8003f80:	6803      	ldr	r3, [r0, #0]
{
 8003f82:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f84:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f88:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003f8a:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f8c:	2404      	movs	r4, #4
 8003f8e:	4094      	lsls	r4, r2
 8003f90:	4226      	tst	r6, r4
 8003f92:	d00e      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x36>
 8003f94:	f015 0f04 	tst.w	r5, #4
 8003f98:	d00b      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f9e:	bf5e      	ittt	pl
 8003fa0:	681a      	ldrpl	r2, [r3, #0]
 8003fa2:	f022 0204 	bicpl.w	r2, r2, #4
 8003fa6:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8003fa8:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003faa:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8003fac:	b373      	cbz	r3, 800400c <HAL_DMA_IRQHandler+0x90>
}
 8003fae:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003fb0:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003fb2:	2402      	movs	r4, #2
 8003fb4:	4094      	lsls	r4, r2
 8003fb6:	4226      	tst	r6, r4
 8003fb8:	d012      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x64>
 8003fba:	f015 0f02 	tst.w	r5, #2
 8003fbe:	d00f      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	0695      	lsls	r5, r2, #26
 8003fc4:	d406      	bmi.n	8003fd4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	f022 020a 	bic.w	r2, r2, #10
 8003fcc:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003fd4:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003fd6:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003fd8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8003fdc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003fde:	e7e5      	b.n	8003fac <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003fe0:	2408      	movs	r4, #8
 8003fe2:	4094      	lsls	r4, r2
 8003fe4:	4234      	tst	r4, r6
 8003fe6:	d011      	beq.n	800400c <HAL_DMA_IRQHandler+0x90>
 8003fe8:	072c      	lsls	r4, r5, #28
 8003fea:	d50f      	bpl.n	800400c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fec:	681c      	ldr	r4, [r3, #0]
 8003fee:	f024 040e 	bic.w	r4, r4, #14
 8003ff2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	fa03 f202 	lsl.w	r2, r3, r2
 8003ffa:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ffc:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003ffe:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004002:	2300      	movs	r3, #0
 8004004:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004008:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800400a:	e7cf      	b.n	8003fac <HAL_DMA_IRQHandler+0x30>
}
 800400c:	bc70      	pop	{r4, r5, r6}
 800400e:	4770      	bx	lr

08004010 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004014:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004016:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004018:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80041c4 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800401c:	4c67      	ldr	r4, [pc, #412]	; (80041bc <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800401e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8004020:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004022:	9a01      	ldr	r2, [sp, #4]
 8004024:	40da      	lsrs	r2, r3
 8004026:	d102      	bne.n	800402e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8004028:	b005      	add	sp, #20
 800402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800402e:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8004030:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004032:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8004034:	ea12 0e06 	ands.w	lr, r2, r6
 8004038:	f000 80b1 	beq.w	800419e <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800403c:	684a      	ldr	r2, [r1, #4]
 800403e:	f022 0710 	bic.w	r7, r2, #16
 8004042:	2f02      	cmp	r7, #2
 8004044:	d116      	bne.n	8004074 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8004046:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800404a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800404e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8004052:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004056:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800405a:	f04f 0c0f 	mov.w	ip, #15
 800405e:	fa0c fc0a 	lsl.w	ip, ip, sl
 8004062:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004066:	690d      	ldr	r5, [r1, #16]
 8004068:	fa05 f50a 	lsl.w	r5, r5, sl
 800406c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8004070:	f8c9 5020 	str.w	r5, [r9, #32]
 8004074:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004078:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800407a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800407e:	fa05 f50c 	lsl.w	r5, r5, ip
 8004082:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004084:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004088:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800408c:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004090:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004092:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004096:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8004098:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800409c:	d811      	bhi.n	80040c2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800409e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040a0:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040a4:	68cf      	ldr	r7, [r1, #12]
 80040a6:	fa07 f70c 	lsl.w	r7, r7, ip
 80040aa:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80040ae:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80040b0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040b2:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80040b6:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80040ba:	409f      	lsls	r7, r3
 80040bc:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80040c0:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80040c2:	f1ba 0f03 	cmp.w	sl, #3
 80040c6:	d107      	bne.n	80040d8 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80040c8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80040ca:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80040ce:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80040d2:	409f      	lsls	r7, r3
 80040d4:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80040d6:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80040d8:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80040da:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80040dc:	688e      	ldr	r6, [r1, #8]
 80040de:	fa06 f60c 	lsl.w	r6, r6, ip
 80040e2:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80040e4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040e6:	00d5      	lsls	r5, r2, #3
 80040e8:	d559      	bpl.n	800419e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ea:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80040ee:	f045 0501 	orr.w	r5, r5, #1
 80040f2:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80040f6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80040fa:	f023 0603 	bic.w	r6, r3, #3
 80040fe:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8004102:	f005 0501 	and.w	r5, r5, #1
 8004106:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800410a:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800410c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004110:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004112:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004114:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004118:	270f      	movs	r7, #15
 800411a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800411e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004122:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004126:	d03c      	beq.n	80041a2 <HAL_GPIO_Init+0x192>
 8004128:	4d25      	ldr	r5, [pc, #148]	; (80041c0 <HAL_GPIO_Init+0x1b0>)
 800412a:	42a8      	cmp	r0, r5
 800412c:	d03b      	beq.n	80041a6 <HAL_GPIO_Init+0x196>
 800412e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004132:	42a8      	cmp	r0, r5
 8004134:	d039      	beq.n	80041aa <HAL_GPIO_Init+0x19a>
 8004136:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800413a:	42a8      	cmp	r0, r5
 800413c:	d037      	beq.n	80041ae <HAL_GPIO_Init+0x19e>
 800413e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004142:	42a8      	cmp	r0, r5
 8004144:	d035      	beq.n	80041b2 <HAL_GPIO_Init+0x1a2>
 8004146:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800414a:	42a8      	cmp	r0, r5
 800414c:	d033      	beq.n	80041b6 <HAL_GPIO_Init+0x1a6>
 800414e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004152:	42a8      	cmp	r0, r5
 8004154:	bf14      	ite	ne
 8004156:	2507      	movne	r5, #7
 8004158:	2506      	moveq	r5, #6
 800415a:	fa05 f50c 	lsl.w	r5, r5, ip
 800415e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004160:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8004162:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004164:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004168:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 800416a:	bf54      	ite	pl
 800416c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800416e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8004172:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8004174:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004176:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8004178:	bf54      	ite	pl
 800417a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800417c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8004180:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8004182:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004184:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8004186:	bf54      	ite	pl
 8004188:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800418a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800418e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8004190:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004192:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8004194:	bf54      	ite	pl
 8004196:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004198:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 800419c:	60e5      	str	r5, [r4, #12]
    position++;
 800419e:	3301      	adds	r3, #1
 80041a0:	e73f      	b.n	8004022 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041a2:	2500      	movs	r5, #0
 80041a4:	e7d9      	b.n	800415a <HAL_GPIO_Init+0x14a>
 80041a6:	2501      	movs	r5, #1
 80041a8:	e7d7      	b.n	800415a <HAL_GPIO_Init+0x14a>
 80041aa:	2502      	movs	r5, #2
 80041ac:	e7d5      	b.n	800415a <HAL_GPIO_Init+0x14a>
 80041ae:	2503      	movs	r5, #3
 80041b0:	e7d3      	b.n	800415a <HAL_GPIO_Init+0x14a>
 80041b2:	2504      	movs	r5, #4
 80041b4:	e7d1      	b.n	800415a <HAL_GPIO_Init+0x14a>
 80041b6:	2505      	movs	r5, #5
 80041b8:	e7cf      	b.n	800415a <HAL_GPIO_Init+0x14a>
 80041ba:	bf00      	nop
 80041bc:	40010400 	.word	0x40010400
 80041c0:	48000400 	.word	0x48000400
 80041c4:	40021000 	.word	0x40021000

080041c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041c8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041ca:	4b04      	ldr	r3, [pc, #16]	; (80041dc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80041cc:	6959      	ldr	r1, [r3, #20]
 80041ce:	4201      	tst	r1, r0
 80041d0:	d002      	beq.n	80041d8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041d2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041d4:	f003 f814 	bl	8007200 <HAL_GPIO_EXTI_Callback>
 80041d8:	bd08      	pop	{r3, pc}
 80041da:	bf00      	nop
 80041dc:	40010400 	.word	0x40010400

080041e0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041e0:	4b02      	ldr	r3, [pc, #8]	; (80041ec <HAL_PWREx_GetVoltageRange+0xc>)
 80041e2:	6818      	ldr	r0, [r3, #0]
#endif
}
 80041e4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40007000 	.word	0x40007000

080041f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041f0:	4b17      	ldr	r3, [pc, #92]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041f2:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041f8:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041fc:	d11c      	bne.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041fe:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004202:	d015      	beq.n	8004230 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800420a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004210:	4a10      	ldr	r2, [pc, #64]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8004212:	6811      	ldr	r1, [r2, #0]
 8004214:	2232      	movs	r2, #50	; 0x32
 8004216:	434a      	muls	r2, r1
 8004218:	490f      	ldr	r1, [pc, #60]	; (8004258 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800421a:	fbb2 f2f1 	udiv	r2, r2, r1
 800421e:	4619      	mov	r1, r3
 8004220:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004222:	6958      	ldr	r0, [r3, #20]
 8004224:	0540      	lsls	r0, r0, #21
 8004226:	d500      	bpl.n	800422a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8004228:	b922      	cbnz	r2, 8004234 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800422a:	694b      	ldr	r3, [r1, #20]
 800422c:	055b      	lsls	r3, r3, #21
 800422e:	d40d      	bmi.n	800424c <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004230:	2000      	movs	r0, #0
 8004232:	4770      	bx	lr
        wait_loop_index--;
 8004234:	3a01      	subs	r2, #1
 8004236:	e7f4      	b.n	8004222 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004238:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800423c:	bf1f      	itttt	ne
 800423e:	681a      	ldrne	r2, [r3, #0]
 8004240:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8004244:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8004248:	601a      	strne	r2, [r3, #0]
 800424a:	e7f1      	b.n	8004230 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 800424c:	2003      	movs	r0, #3
}
 800424e:	4770      	bx	lr
 8004250:	40007000 	.word	0x40007000
 8004254:	20000568 	.word	0x20000568
 8004258:	000f4240 	.word	0x000f4240

0800425c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800425c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800425e:	4d1e      	ldr	r5, [pc, #120]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8004260:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004262:	00da      	lsls	r2, r3, #3
{
 8004264:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004266:	d518      	bpl.n	800429a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004268:	f7ff ffba 	bl	80041e0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800426c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004270:	d123      	bne.n	80042ba <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004272:	2c80      	cmp	r4, #128	; 0x80
 8004274:	d929      	bls.n	80042ca <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004276:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004278:	bf8c      	ite	hi
 800427a:	2002      	movhi	r0, #2
 800427c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800427e:	4a17      	ldr	r2, [pc, #92]	; (80042dc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8004280:	6813      	ldr	r3, [r2, #0]
 8004282:	f023 0307 	bic.w	r3, r3, #7
 8004286:	4303      	orrs	r3, r0
 8004288:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800428a:	6813      	ldr	r3, [r2, #0]
 800428c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8004290:	1a18      	subs	r0, r3, r0
 8004292:	bf18      	it	ne
 8004294:	2001      	movne	r0, #1
 8004296:	b003      	add	sp, #12
 8004298:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800429a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800429c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a0:	65ab      	str	r3, [r5, #88]	; 0x58
 80042a2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80042a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80042ac:	f7ff ff98 	bl	80041e0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80042b0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80042b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b6:	65ab      	str	r3, [r5, #88]	; 0x58
 80042b8:	e7d8      	b.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80042ba:	2c80      	cmp	r4, #128	; 0x80
 80042bc:	d807      	bhi.n	80042ce <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80042be:	d008      	beq.n	80042d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80042c0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80042c4:	4258      	negs	r0, r3
 80042c6:	4158      	adcs	r0, r3
 80042c8:	e7d9      	b.n	800427e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042ca:	2000      	movs	r0, #0
 80042cc:	e7d7      	b.n	800427e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80042ce:	2003      	movs	r0, #3
 80042d0:	e7d5      	b.n	800427e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80042d2:	2002      	movs	r0, #2
 80042d4:	e7d3      	b.n	800427e <RCC_SetFlashLatencyFromMSIRange+0x22>
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40022000 	.word	0x40022000

080042e0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042e0:	4b25      	ldr	r3, [pc, #148]	; (8004378 <HAL_RCC_GetSysClockFreq+0x98>)
 80042e2:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e4:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042e6:	f012 020c 	ands.w	r2, r2, #12
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x18>
 80042ec:	2a0c      	cmp	r2, #12
 80042ee:	d115      	bne.n	800431c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042f0:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042f4:	2901      	cmp	r1, #1
 80042f6:	d118      	bne.n	800432a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042f8:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80042fa:	4820      	ldr	r0, [pc, #128]	; (800437c <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042fc:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042fe:	bf55      	itete	pl
 8004300:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004304:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004306:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800430a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800430e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004312:	b382      	cbz	r2, 8004376 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004314:	2a0c      	cmp	r2, #12
 8004316:	d009      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x4c>
 8004318:	2000      	movs	r0, #0
  return sysclockfreq;
 800431a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800431c:	2a04      	cmp	r2, #4
 800431e:	d029      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0x94>
 8004320:	2a08      	cmp	r2, #8
 8004322:	4817      	ldr	r0, [pc, #92]	; (8004380 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004324:	bf18      	it	ne
 8004326:	2000      	movne	r0, #0
 8004328:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800432a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800432c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800432e:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004330:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004334:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8004338:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800433a:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 800433e:	d005      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x6c>
 8004340:	2903      	cmp	r1, #3
 8004342:	d012      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004344:	68d9      	ldr	r1, [r3, #12]
 8004346:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800434a:	e003      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800434c:	68d9      	ldr	r1, [r3, #12]
 800434e:	480d      	ldr	r0, [pc, #52]	; (8004384 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004350:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004354:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004356:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800435a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800435e:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004360:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004362:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8004364:	fbb0 f0f3 	udiv	r0, r0, r3
 8004368:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800436a:	68d9      	ldr	r1, [r3, #12]
 800436c:	4804      	ldr	r0, [pc, #16]	; (8004380 <HAL_RCC_GetSysClockFreq+0xa0>)
 800436e:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8004372:	e7ef      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8004374:	4803      	ldr	r0, [pc, #12]	; (8004384 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8004376:	4770      	bx	lr
 8004378:	40021000 	.word	0x40021000
 800437c:	0801052c 	.word	0x0801052c
 8004380:	007a1200 	.word	0x007a1200
 8004384:	00f42400 	.word	0x00f42400

08004388 <HAL_RCC_OscConfig>:
{
 8004388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800438c:	4605      	mov	r5, r0
 800438e:	b918      	cbnz	r0, 8004398 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8004390:	2001      	movs	r0, #1
}
 8004392:	b003      	add	sp, #12
 8004394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004398:	4ca5      	ldr	r4, [pc, #660]	; (8004630 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800439a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800439c:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800439e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043a0:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043a2:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043a6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043aa:	d53c      	bpl.n	8004426 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043ac:	b11e      	cbz	r6, 80043b6 <HAL_RCC_OscConfig+0x2e>
 80043ae:	2e0c      	cmp	r6, #12
 80043b0:	d163      	bne.n	800447a <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043b2:	2f01      	cmp	r7, #1
 80043b4:	d161      	bne.n	800447a <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	0798      	lsls	r0, r3, #30
 80043ba:	d502      	bpl.n	80043c2 <HAL_RCC_OscConfig+0x3a>
 80043bc:	69ab      	ldr	r3, [r5, #24]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0e6      	beq.n	8004390 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	6a28      	ldr	r0, [r5, #32]
 80043c6:	0719      	lsls	r1, r3, #28
 80043c8:	bf56      	itet	pl
 80043ca:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80043ce:	6823      	ldrmi	r3, [r4, #0]
 80043d0:	091b      	lsrpl	r3, r3, #4
 80043d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d6:	4283      	cmp	r3, r0
 80043d8:	d23a      	bcs.n	8004450 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043da:	f7ff ff3f 	bl	800425c <RCC_SetFlashLatencyFromMSIRange>
 80043de:	2800      	cmp	r0, #0
 80043e0:	d1d6      	bne.n	8004390 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	f043 0308 	orr.w	r3, r3, #8
 80043e8:	6023      	str	r3, [r4, #0]
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	6a2a      	ldr	r2, [r5, #32]
 80043ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043f2:	4313      	orrs	r3, r2
 80043f4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043f6:	6863      	ldr	r3, [r4, #4]
 80043f8:	69ea      	ldr	r2, [r5, #28]
 80043fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004402:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004404:	f7ff ff6c 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 8004408:	68a3      	ldr	r3, [r4, #8]
 800440a:	4a8a      	ldr	r2, [pc, #552]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004410:	5cd3      	ldrb	r3, [r2, r3]
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	40d8      	lsrs	r0, r3
 8004418:	4b87      	ldr	r3, [pc, #540]	; (8004638 <HAL_RCC_OscConfig+0x2b0>)
 800441a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800441c:	2000      	movs	r0, #0
 800441e:	f7ff f8c1 	bl	80035a4 <HAL_InitTick>
        if(status != HAL_OK)
 8004422:	2800      	cmp	r0, #0
 8004424:	d1b5      	bne.n	8004392 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004426:	682b      	ldr	r3, [r5, #0]
 8004428:	07d8      	lsls	r0, r3, #31
 800442a:	d45d      	bmi.n	80044e8 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442c:	682b      	ldr	r3, [r5, #0]
 800442e:	0799      	lsls	r1, r3, #30
 8004430:	f100 809c 	bmi.w	800456c <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	0718      	lsls	r0, r3, #28
 8004438:	f100 80d0 	bmi.w	80045dc <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	0759      	lsls	r1, r3, #29
 8004440:	f100 80fc 	bmi.w	800463c <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004444:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004446:	2b00      	cmp	r3, #0
 8004448:	f040 8165 	bne.w	8004716 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 800444c:	2000      	movs	r0, #0
 800444e:	e7a0      	b.n	8004392 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	f043 0308 	orr.w	r3, r3, #8
 8004456:	6023      	str	r3, [r4, #0]
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800445e:	4303      	orrs	r3, r0
 8004460:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004462:	6863      	ldr	r3, [r4, #4]
 8004464:	69ea      	ldr	r2, [r5, #28]
 8004466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800446a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800446e:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004470:	f7ff fef4 	bl	800425c <RCC_SetFlashLatencyFromMSIRange>
 8004474:	2800      	cmp	r0, #0
 8004476:	d0c5      	beq.n	8004404 <HAL_RCC_OscConfig+0x7c>
 8004478:	e78a      	b.n	8004390 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800447a:	69ab      	ldr	r3, [r5, #24]
 800447c:	b31b      	cbz	r3, 80044c6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004486:	f7ff f8c3 	bl	8003610 <HAL_GetTick>
 800448a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	079a      	lsls	r2, r3, #30
 8004490:	d511      	bpl.n	80044b6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	f043 0308 	orr.w	r3, r3, #8
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	6a2a      	ldr	r2, [r5, #32]
 800449e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044a2:	4313      	orrs	r3, r2
 80044a4:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044a6:	6863      	ldr	r3, [r4, #4]
 80044a8:	69ea      	ldr	r2, [r5, #28]
 80044aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80044b2:	6063      	str	r3, [r4, #4]
 80044b4:	e7b7      	b.n	8004426 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044b6:	f7ff f8ab 	bl	8003610 <HAL_GetTick>
 80044ba:	eba0 0008 	sub.w	r0, r0, r8
 80044be:	2802      	cmp	r0, #2
 80044c0:	d9e4      	bls.n	800448c <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 80044c2:	2003      	movs	r0, #3
 80044c4:	e765      	b.n	8004392 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80044ce:	f7ff f89f 	bl	8003610 <HAL_GetTick>
 80044d2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	079b      	lsls	r3, r3, #30
 80044d8:	d5a5      	bpl.n	8004426 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044da:	f7ff f899 	bl	8003610 <HAL_GetTick>
 80044de:	eba0 0008 	sub.w	r0, r0, r8
 80044e2:	2802      	cmp	r0, #2
 80044e4:	d9f6      	bls.n	80044d4 <HAL_RCC_OscConfig+0x14c>
 80044e6:	e7ec      	b.n	80044c2 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044e8:	2e08      	cmp	r6, #8
 80044ea:	d003      	beq.n	80044f4 <HAL_RCC_OscConfig+0x16c>
 80044ec:	2e0c      	cmp	r6, #12
 80044ee:	d108      	bne.n	8004502 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80044f0:	2f03      	cmp	r7, #3
 80044f2:	d106      	bne.n	8004502 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	039a      	lsls	r2, r3, #14
 80044f8:	d598      	bpl.n	800442c <HAL_RCC_OscConfig+0xa4>
 80044fa:	686b      	ldr	r3, [r5, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d195      	bne.n	800442c <HAL_RCC_OscConfig+0xa4>
 8004500:	e746      	b.n	8004390 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004502:	686b      	ldr	r3, [r5, #4]
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004508:	d110      	bne.n	800452c <HAL_RCC_OscConfig+0x1a4>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004510:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004512:	f7ff f87d 	bl	8003610 <HAL_GetTick>
 8004516:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	039b      	lsls	r3, r3, #14
 800451c:	d486      	bmi.n	800442c <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800451e:	f7ff f877 	bl	8003610 <HAL_GetTick>
 8004522:	eba0 0008 	sub.w	r0, r0, r8
 8004526:	2864      	cmp	r0, #100	; 0x64
 8004528:	d9f6      	bls.n	8004518 <HAL_RCC_OscConfig+0x190>
 800452a:	e7ca      	b.n	80044c2 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004530:	d104      	bne.n	800453c <HAL_RCC_OscConfig+0x1b4>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	e7e6      	b.n	800450a <HAL_RCC_OscConfig+0x182>
 800453c:	6822      	ldr	r2, [r4, #0]
 800453e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004542:	6022      	str	r2, [r4, #0]
 8004544:	6822      	ldr	r2, [r4, #0]
 8004546:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800454a:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e0      	bne.n	8004512 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8004550:	f7ff f85e 	bl	8003610 <HAL_GetTick>
 8004554:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	0398      	lsls	r0, r3, #14
 800455a:	f57f af67 	bpl.w	800442c <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800455e:	f7ff f857 	bl	8003610 <HAL_GetTick>
 8004562:	eba0 0008 	sub.w	r0, r0, r8
 8004566:	2864      	cmp	r0, #100	; 0x64
 8004568:	d9f5      	bls.n	8004556 <HAL_RCC_OscConfig+0x1ce>
 800456a:	e7aa      	b.n	80044c2 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800456c:	2e04      	cmp	r6, #4
 800456e:	d003      	beq.n	8004578 <HAL_RCC_OscConfig+0x1f0>
 8004570:	2e0c      	cmp	r6, #12
 8004572:	d110      	bne.n	8004596 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8004574:	2f02      	cmp	r7, #2
 8004576:	d10e      	bne.n	8004596 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	0559      	lsls	r1, r3, #21
 800457c:	d503      	bpl.n	8004586 <HAL_RCC_OscConfig+0x1fe>
 800457e:	68eb      	ldr	r3, [r5, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f43f af05 	beq.w	8004390 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004586:	6863      	ldr	r3, [r4, #4]
 8004588:	692a      	ldr	r2, [r5, #16]
 800458a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800458e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004592:	6063      	str	r3, [r4, #4]
 8004594:	e74e      	b.n	8004434 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004596:	68eb      	ldr	r3, [r5, #12]
 8004598:	b17b      	cbz	r3, 80045ba <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80045a2:	f7ff f835 	bl	8003610 <HAL_GetTick>
 80045a6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	055a      	lsls	r2, r3, #21
 80045ac:	d4eb      	bmi.n	8004586 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ae:	f7ff f82f 	bl	8003610 <HAL_GetTick>
 80045b2:	1bc0      	subs	r0, r0, r7
 80045b4:	2802      	cmp	r0, #2
 80045b6:	d9f7      	bls.n	80045a8 <HAL_RCC_OscConfig+0x220>
 80045b8:	e783      	b.n	80044c2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80045c2:	f7ff f825 	bl	8003610 <HAL_GetTick>
 80045c6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	055b      	lsls	r3, r3, #21
 80045cc:	f57f af32 	bpl.w	8004434 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d0:	f7ff f81e 	bl	8003610 <HAL_GetTick>
 80045d4:	1bc0      	subs	r0, r0, r7
 80045d6:	2802      	cmp	r0, #2
 80045d8:	d9f6      	bls.n	80045c8 <HAL_RCC_OscConfig+0x240>
 80045da:	e772      	b.n	80044c2 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045dc:	696b      	ldr	r3, [r5, #20]
 80045de:	b19b      	cbz	r3, 8004608 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 80045e0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80045ec:	f7ff f810 	bl	8003610 <HAL_GetTick>
 80045f0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045f2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80045f6:	079a      	lsls	r2, r3, #30
 80045f8:	f53f af20 	bmi.w	800443c <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045fc:	f7ff f808 	bl	8003610 <HAL_GetTick>
 8004600:	1bc0      	subs	r0, r0, r7
 8004602:	2802      	cmp	r0, #2
 8004604:	d9f5      	bls.n	80045f2 <HAL_RCC_OscConfig+0x26a>
 8004606:	e75c      	b.n	80044c2 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8004608:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004614:	f7fe fffc 	bl	8003610 <HAL_GetTick>
 8004618:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800461a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800461e:	079b      	lsls	r3, r3, #30
 8004620:	f57f af0c 	bpl.w	800443c <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004624:	f7fe fff4 	bl	8003610 <HAL_GetTick>
 8004628:	1bc0      	subs	r0, r0, r7
 800462a:	2802      	cmp	r0, #2
 800462c:	d9f5      	bls.n	800461a <HAL_RCC_OscConfig+0x292>
 800462e:	e748      	b.n	80044c2 <HAL_RCC_OscConfig+0x13a>
 8004630:	40021000 	.word	0x40021000
 8004634:	08010514 	.word	0x08010514
 8004638:	20000568 	.word	0x20000568
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800463c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800463e:	00d8      	lsls	r0, r3, #3
 8004640:	d429      	bmi.n	8004696 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004642:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004648:	65a3      	str	r3, [r4, #88]	; 0x58
 800464a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800464c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004654:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004658:	4f5d      	ldr	r7, [pc, #372]	; (80047d0 <HAL_RCC_OscConfig+0x448>)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	05d9      	lsls	r1, r3, #23
 800465e:	d51d      	bpl.n	800469c <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004660:	68ab      	ldr	r3, [r5, #8]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d12b      	bne.n	80046be <HAL_RCC_OscConfig+0x336>
 8004666:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004672:	f7fe ffcd 	bl	8003610 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004676:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800467a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800467c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004680:	079b      	lsls	r3, r3, #30
 8004682:	d542      	bpl.n	800470a <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8004684:	f1b8 0f00 	cmp.w	r8, #0
 8004688:	f43f aedc 	beq.w	8004444 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800468c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800468e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004692:	65a3      	str	r3, [r4, #88]	; 0x58
 8004694:	e6d6      	b.n	8004444 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8004696:	f04f 0800 	mov.w	r8, #0
 800469a:	e7dd      	b.n	8004658 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80046a4:	f7fe ffb4 	bl	8003610 <HAL_GetTick>
 80046a8:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	05da      	lsls	r2, r3, #23
 80046ae:	d4d7      	bmi.n	8004660 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b0:	f7fe ffae 	bl	8003610 <HAL_GetTick>
 80046b4:	eba0 0009 	sub.w	r0, r0, r9
 80046b8:	2802      	cmp	r0, #2
 80046ba:	d9f6      	bls.n	80046aa <HAL_RCC_OscConfig+0x322>
 80046bc:	e701      	b.n	80044c2 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d106      	bne.n	80046d0 <HAL_RCC_OscConfig+0x348>
 80046c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80046c6:	f043 0304 	orr.w	r3, r3, #4
 80046ca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80046ce:	e7ca      	b.n	8004666 <HAL_RCC_OscConfig+0x2de>
 80046d0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80046d4:	f022 0201 	bic.w	r2, r2, #1
 80046d8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80046dc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80046e0:	f022 0204 	bic.w	r2, r2, #4
 80046e4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1c2      	bne.n	8004672 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 80046ec:	f7fe ff90 	bl	8003610 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80046f4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80046fa:	0798      	lsls	r0, r3, #30
 80046fc:	d5c2      	bpl.n	8004684 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f7fe ff87 	bl	8003610 <HAL_GetTick>
 8004702:	1bc0      	subs	r0, r0, r7
 8004704:	4548      	cmp	r0, r9
 8004706:	d9f6      	bls.n	80046f6 <HAL_RCC_OscConfig+0x36e>
 8004708:	e6db      	b.n	80044c2 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470a:	f7fe ff81 	bl	8003610 <HAL_GetTick>
 800470e:	1bc0      	subs	r0, r0, r7
 8004710:	4548      	cmp	r0, r9
 8004712:	d9b3      	bls.n	800467c <HAL_RCC_OscConfig+0x2f4>
 8004714:	e6d5      	b.n	80044c2 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004716:	2e0c      	cmp	r6, #12
 8004718:	f43f ae3a 	beq.w	8004390 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800471c:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004724:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004726:	d137      	bne.n	8004798 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8004728:	f7fe ff72 	bl	8003610 <HAL_GetTick>
 800472c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	0199      	lsls	r1, r3, #6
 8004732:	d42b      	bmi.n	800478c <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004734:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004736:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004738:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800473c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800473e:	3a01      	subs	r2, #1
 8004740:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004744:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004746:	0912      	lsrs	r2, r2, #4
 8004748:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800474c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800474e:	0852      	lsrs	r2, r2, #1
 8004750:	3a01      	subs	r2, #1
 8004752:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004756:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004758:	0852      	lsrs	r2, r2, #1
 800475a:	3a01      	subs	r2, #1
 800475c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004760:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004768:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800476a:	68e3      	ldr	r3, [r4, #12]
 800476c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004770:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004772:	f7fe ff4d 	bl	8003610 <HAL_GetTick>
 8004776:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	019a      	lsls	r2, r3, #6
 800477c:	f53f ae66 	bmi.w	800444c <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004780:	f7fe ff46 	bl	8003610 <HAL_GetTick>
 8004784:	1b40      	subs	r0, r0, r5
 8004786:	2802      	cmp	r0, #2
 8004788:	d9f6      	bls.n	8004778 <HAL_RCC_OscConfig+0x3f0>
 800478a:	e69a      	b.n	80044c2 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478c:	f7fe ff40 	bl	8003610 <HAL_GetTick>
 8004790:	1b80      	subs	r0, r0, r6
 8004792:	2802      	cmp	r0, #2
 8004794:	d9cb      	bls.n	800472e <HAL_RCC_OscConfig+0x3a6>
 8004796:	e694      	b.n	80044c2 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800479e:	bf02      	ittt	eq
 80047a0:	68e3      	ldreq	r3, [r4, #12]
 80047a2:	f023 0303 	biceq.w	r3, r3, #3
 80047a6:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80047a8:	68e3      	ldr	r3, [r4, #12]
 80047aa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80047ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80047b4:	f7fe ff2c 	bl	8003610 <HAL_GetTick>
 80047b8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	019b      	lsls	r3, r3, #6
 80047be:	f57f ae45 	bpl.w	800444c <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c2:	f7fe ff25 	bl	8003610 <HAL_GetTick>
 80047c6:	1b40      	subs	r0, r0, r5
 80047c8:	2802      	cmp	r0, #2
 80047ca:	d9f6      	bls.n	80047ba <HAL_RCC_OscConfig+0x432>
 80047cc:	e679      	b.n	80044c2 <HAL_RCC_OscConfig+0x13a>
 80047ce:	bf00      	nop
 80047d0:	40007000 	.word	0x40007000

080047d4 <HAL_RCC_ClockConfig>:
{
 80047d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d8:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80047da:	4604      	mov	r4, r0
 80047dc:	b910      	cbnz	r0, 80047e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80047de:	2001      	movs	r0, #1
 80047e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047e4:	4a40      	ldr	r2, [pc, #256]	; (80048e8 <HAL_RCC_ClockConfig+0x114>)
 80047e6:	6813      	ldr	r3, [r2, #0]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	428b      	cmp	r3, r1
 80047ee:	d329      	bcc.n	8004844 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	07d9      	lsls	r1, r3, #31
 80047f4:	d431      	bmi.n	800485a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f6:	6821      	ldr	r1, [r4, #0]
 80047f8:	078a      	lsls	r2, r1, #30
 80047fa:	d45b      	bmi.n	80048b4 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047fc:	4a3a      	ldr	r2, [pc, #232]	; (80048e8 <HAL_RCC_ClockConfig+0x114>)
 80047fe:	6813      	ldr	r3, [r2, #0]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	429e      	cmp	r6, r3
 8004806:	d35d      	bcc.n	80048c4 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	f011 0f04 	tst.w	r1, #4
 800480c:	4d37      	ldr	r5, [pc, #220]	; (80048ec <HAL_RCC_ClockConfig+0x118>)
 800480e:	d164      	bne.n	80048da <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004810:	070b      	lsls	r3, r1, #28
 8004812:	d506      	bpl.n	8004822 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004814:	68ab      	ldr	r3, [r5, #8]
 8004816:	6922      	ldr	r2, [r4, #16]
 8004818:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800481c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004820:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004822:	f7ff fd5d 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 8004826:	68ab      	ldr	r3, [r5, #8]
 8004828:	4a31      	ldr	r2, [pc, #196]	; (80048f0 <HAL_RCC_ClockConfig+0x11c>)
 800482a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800482e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004832:	5cd3      	ldrb	r3, [r2, r3]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	40d8      	lsrs	r0, r3
 800483a:	4b2e      	ldr	r3, [pc, #184]	; (80048f4 <HAL_RCC_ClockConfig+0x120>)
 800483c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800483e:	2000      	movs	r0, #0
 8004840:	f7fe beb0 	b.w	80035a4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004844:	6813      	ldr	r3, [r2, #0]
 8004846:	f023 0307 	bic.w	r3, r3, #7
 800484a:	430b      	orrs	r3, r1
 800484c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	6813      	ldr	r3, [r2, #0]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4299      	cmp	r1, r3
 8004856:	d1c2      	bne.n	80047de <HAL_RCC_ClockConfig+0xa>
 8004858:	e7ca      	b.n	80047f0 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800485a:	6862      	ldr	r2, [r4, #4]
 800485c:	4d23      	ldr	r5, [pc, #140]	; (80048ec <HAL_RCC_ClockConfig+0x118>)
 800485e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004860:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004862:	d11b      	bne.n	800489c <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004864:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004868:	d0b9      	beq.n	80047de <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800486a:	68ab      	ldr	r3, [r5, #8]
 800486c:	f023 0303 	bic.w	r3, r3, #3
 8004870:	4313      	orrs	r3, r2
 8004872:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8004874:	f7fe fecc 	bl	8003610 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004878:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800487c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	68ab      	ldr	r3, [r5, #8]
 8004880:	6862      	ldr	r2, [r4, #4]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800488a:	d0b4      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488c:	f7fe fec0 	bl	8003610 <HAL_GetTick>
 8004890:	1bc0      	subs	r0, r0, r7
 8004892:	4540      	cmp	r0, r8
 8004894:	d9f3      	bls.n	800487e <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8004896:	2003      	movs	r0, #3
}
 8004898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489c:	2a02      	cmp	r2, #2
 800489e:	d102      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80048a4:	e7e0      	b.n	8004868 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048a6:	b912      	cbnz	r2, 80048ae <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048a8:	f013 0f02 	tst.w	r3, #2
 80048ac:	e7dc      	b.n	8004868 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80048b2:	e7d9      	b.n	8004868 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b4:	4a0d      	ldr	r2, [pc, #52]	; (80048ec <HAL_RCC_ClockConfig+0x118>)
 80048b6:	68a0      	ldr	r0, [r4, #8]
 80048b8:	6893      	ldr	r3, [r2, #8]
 80048ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048be:	4303      	orrs	r3, r0
 80048c0:	6093      	str	r3, [r2, #8]
 80048c2:	e79b      	b.n	80047fc <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c4:	6813      	ldr	r3, [r2, #0]
 80048c6:	f023 0307 	bic.w	r3, r3, #7
 80048ca:	4333      	orrs	r3, r6
 80048cc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	6813      	ldr	r3, [r2, #0]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	429e      	cmp	r6, r3
 80048d6:	d182      	bne.n	80047de <HAL_RCC_ClockConfig+0xa>
 80048d8:	e796      	b.n	8004808 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048da:	68ab      	ldr	r3, [r5, #8]
 80048dc:	68e2      	ldr	r2, [r4, #12]
 80048de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60ab      	str	r3, [r5, #8]
 80048e6:	e793      	b.n	8004810 <HAL_RCC_ClockConfig+0x3c>
 80048e8:	40022000 	.word	0x40022000
 80048ec:	40021000 	.word	0x40021000
 80048f0:	08010514 	.word	0x08010514
 80048f4:	20000568 	.word	0x20000568

080048f8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x18>)
 80048fa:	4a06      	ldr	r2, [pc, #24]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004902:	5cd3      	ldrb	r3, [r2, r3]
 8004904:	4a04      	ldr	r2, [pc, #16]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004906:	6810      	ldr	r0, [r2, #0]
 8004908:	f003 031f 	and.w	r3, r3, #31
}
 800490c:	40d8      	lsrs	r0, r3
 800490e:	4770      	bx	lr
 8004910:	40021000 	.word	0x40021000
 8004914:	08010524 	.word	0x08010524
 8004918:	20000568 	.word	0x20000568

0800491c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCC_GetPCLK2Freq+0x18>)
 800491e:	4a06      	ldr	r2, [pc, #24]	; (8004938 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004926:	5cd3      	ldrb	r3, [r2, r3]
 8004928:	4a04      	ldr	r2, [pc, #16]	; (800493c <HAL_RCC_GetPCLK2Freq+0x20>)
 800492a:	6810      	ldr	r0, [r2, #0]
 800492c:	f003 031f 	and.w	r3, r3, #31
}
 8004930:	40d8      	lsrs	r0, r3
 8004932:	4770      	bx	lr
 8004934:	40021000 	.word	0x40021000
 8004938:	08010524 	.word	0x08010524
 800493c:	20000568 	.word	0x20000568

08004940 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004942:	4b45      	ldr	r3, [pc, #276]	; (8004a58 <RCCEx_PLLSAI1_Config+0x118>)
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	f012 0f03 	tst.w	r2, #3
{
 800494a:	4605      	mov	r5, r0
 800494c:	460e      	mov	r6, r1
 800494e:	461c      	mov	r4, r3
 8004950:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004952:	d02a      	beq.n	80049aa <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	f002 0203 	and.w	r2, r2, #3
 800495a:	4282      	cmp	r2, r0
 800495c:	d13c      	bne.n	80049d8 <RCCEx_PLLSAI1_Config+0x98>
       ||
 800495e:	2a00      	cmp	r2, #0
 8004960:	d03a      	beq.n	80049d8 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004962:	68db      	ldr	r3, [r3, #12]
       ||
 8004964:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004966:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800496a:	3301      	adds	r3, #1
       ||
 800496c:	4293      	cmp	r3, r2
 800496e:	d133      	bne.n	80049d8 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004976:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004978:	f7fe fe4a 	bl	8003610 <HAL_GetTick>
 800497c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	011a      	lsls	r2, r3, #4
 8004982:	d432      	bmi.n	80049ea <RCCEx_PLLSAI1_Config+0xaa>
 8004984:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004986:	2e00      	cmp	r6, #0
 8004988:	d036      	beq.n	80049f8 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800498a:	2e01      	cmp	r6, #1
 800498c:	d150      	bne.n	8004a30 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800498e:	6922      	ldr	r2, [r4, #16]
 8004990:	6928      	ldr	r0, [r5, #16]
 8004992:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004996:	0840      	lsrs	r0, r0, #1
 8004998:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800499c:	3801      	subs	r0, #1
 800499e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80049a2:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80049a6:	6122      	str	r2, [r4, #16]
 80049a8:	e032      	b.n	8004a10 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80049aa:	2802      	cmp	r0, #2
 80049ac:	d010      	beq.n	80049d0 <RCCEx_PLLSAI1_Config+0x90>
 80049ae:	2803      	cmp	r0, #3
 80049b0:	d014      	beq.n	80049dc <RCCEx_PLLSAI1_Config+0x9c>
 80049b2:	2801      	cmp	r0, #1
 80049b4:	d110      	bne.n	80049d8 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	079f      	lsls	r7, r3, #30
 80049ba:	d538      	bpl.n	8004a2e <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049bc:	68e3      	ldr	r3, [r4, #12]
 80049be:	686a      	ldr	r2, [r5, #4]
 80049c0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80049c4:	3a01      	subs	r2, #1
 80049c6:	4318      	orrs	r0, r3
 80049c8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80049cc:	60e0      	str	r0, [r4, #12]
 80049ce:	e7cf      	b.n	8004970 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049d6:	d1f1      	bne.n	80049bc <RCCEx_PLLSAI1_Config+0x7c>
 80049d8:	2001      	movs	r0, #1
 80049da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	0391      	lsls	r1, r2, #14
 80049e0:	d4ec      	bmi.n	80049bc <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80049e8:	e7f5      	b.n	80049d6 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049ea:	f7fe fe11 	bl	8003610 <HAL_GetTick>
 80049ee:	1bc0      	subs	r0, r0, r7
 80049f0:	2802      	cmp	r0, #2
 80049f2:	d9c4      	bls.n	800497e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80049f4:	2003      	movs	r0, #3
 80049f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049f8:	6921      	ldr	r1, [r4, #16]
 80049fa:	68eb      	ldr	r3, [r5, #12]
 80049fc:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8004a00:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004a04:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8004a0e:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a16:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a18:	f7fe fdfa 	bl	8003610 <HAL_GetTick>
 8004a1c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	d513      	bpl.n	8004a4c <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a24:	6923      	ldr	r3, [r4, #16]
 8004a26:	69aa      	ldr	r2, [r5, #24]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	6123      	str	r3, [r4, #16]
 8004a2c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a30:	6923      	ldr	r3, [r4, #16]
 8004a32:	6968      	ldr	r0, [r5, #20]
 8004a34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a38:	0840      	lsrs	r0, r0, #1
 8004a3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a3e:	3801      	subs	r0, #1
 8004a40:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004a44:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8004a48:	6123      	str	r3, [r4, #16]
 8004a4a:	e7e1      	b.n	8004a10 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a4c:	f7fe fde0 	bl	8003610 <HAL_GetTick>
 8004a50:	1b80      	subs	r0, r0, r6
 8004a52:	2802      	cmp	r0, #2
 8004a54:	d9e3      	bls.n	8004a1e <RCCEx_PLLSAI1_Config+0xde>
 8004a56:	e7cd      	b.n	80049f4 <RCCEx_PLLSAI1_Config+0xb4>
 8004a58:	40021000 	.word	0x40021000

08004a5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a5e:	4b3d      	ldr	r3, [pc, #244]	; (8004b54 <RCCEx_PLLSAI2_Config+0xf8>)
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	f012 0f03 	tst.w	r2, #3
{
 8004a66:	4605      	mov	r5, r0
 8004a68:	460e      	mov	r6, r1
 8004a6a:	461c      	mov	r4, r3
 8004a6c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a6e:	d028      	beq.n	8004ac2 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	f002 0203 	and.w	r2, r2, #3
 8004a76:	4282      	cmp	r2, r0
 8004a78:	d13a      	bne.n	8004af0 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8004a7a:	2a00      	cmp	r2, #0
 8004a7c:	d038      	beq.n	8004af0 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a7e:	68db      	ldr	r3, [r3, #12]
       ||
 8004a80:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a82:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004a86:	3301      	adds	r3, #1
       ||
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d131      	bne.n	8004af0 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a92:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a94:	f7fe fdbc 	bl	8003610 <HAL_GetTick>
 8004a98:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	009a      	lsls	r2, r3, #2
 8004a9e:	d430      	bmi.n	8004b02 <RCCEx_PLLSAI2_Config+0xa6>
 8004aa0:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aa2:	2e00      	cmp	r6, #0
 8004aa4:	d034      	beq.n	8004b10 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004aa6:	6963      	ldr	r3, [r4, #20]
 8004aa8:	6929      	ldr	r1, [r5, #16]
 8004aaa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004aae:	0849      	lsrs	r1, r1, #1
 8004ab0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ab4:	3901      	subs	r1, #1
 8004ab6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004aba:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8004abe:	6163      	str	r3, [r4, #20]
 8004ac0:	e032      	b.n	8004b28 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8004ac2:	2802      	cmp	r0, #2
 8004ac4:	d010      	beq.n	8004ae8 <RCCEx_PLLSAI2_Config+0x8c>
 8004ac6:	2803      	cmp	r0, #3
 8004ac8:	d014      	beq.n	8004af4 <RCCEx_PLLSAI2_Config+0x98>
 8004aca:	2801      	cmp	r0, #1
 8004acc:	d110      	bne.n	8004af0 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	079f      	lsls	r7, r3, #30
 8004ad2:	d538      	bpl.n	8004b46 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ad4:	68e3      	ldr	r3, [r4, #12]
 8004ad6:	686a      	ldr	r2, [r5, #4]
 8004ad8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8004adc:	3a01      	subs	r2, #1
 8004ade:	4318      	orrs	r0, r3
 8004ae0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8004ae4:	60e0      	str	r0, [r4, #12]
 8004ae6:	e7d1      	b.n	8004a8c <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aee:	d1f1      	bne.n	8004ad4 <RCCEx_PLLSAI2_Config+0x78>
 8004af0:	2001      	movs	r0, #1
 8004af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	0391      	lsls	r1, r2, #14
 8004af8:	d4ec      	bmi.n	8004ad4 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004b00:	e7f5      	b.n	8004aee <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b02:	f7fe fd85 	bl	8003610 <HAL_GetTick>
 8004b06:	1bc0      	subs	r0, r0, r7
 8004b08:	2802      	cmp	r0, #2
 8004b0a:	d9c6      	bls.n	8004a9a <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8004b0c:	2003      	movs	r0, #3
 8004b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b10:	6962      	ldr	r2, [r4, #20]
 8004b12:	68eb      	ldr	r3, [r5, #12]
 8004b14:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8004b18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b1c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8004b26:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b30:	f7fe fd6e 	bl	8003610 <HAL_GetTick>
 8004b34:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	d505      	bpl.n	8004b48 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b3c:	6963      	ldr	r3, [r4, #20]
 8004b3e:	696a      	ldr	r2, [r5, #20]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	6163      	str	r3, [r4, #20]
 8004b44:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b48:	f7fe fd62 	bl	8003610 <HAL_GetTick>
 8004b4c:	1b80      	subs	r0, r0, r6
 8004b4e:	2802      	cmp	r0, #2
 8004b50:	d9f1      	bls.n	8004b36 <RCCEx_PLLSAI2_Config+0xda>
 8004b52:	e7db      	b.n	8004b0c <RCCEx_PLLSAI2_Config+0xb0>
 8004b54:	40021000 	.word	0x40021000

08004b58 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004b58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b5c:	6806      	ldr	r6, [r0, #0]
 8004b5e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8004b62:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b64:	d024      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b66:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8004b68:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8004b6c:	d02c      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004b6e:	d802      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004b70:	b1c1      	cbz	r1, 8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8004b72:	2601      	movs	r6, #1
 8004b74:	e01c      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b76:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8004b7a:	d00d      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004b7c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8004b80:	d1f7      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b82:	4a4d      	ldr	r2, [pc, #308]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b84:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004b86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b8a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004b94:	2600      	movs	r6, #0
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b98:	4a47      	ldr	r2, [pc, #284]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9a:	68d3      	ldr	r3, [r2, #12]
 8004b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba0:	60d3      	str	r3, [r2, #12]
      break;
 8004ba2:	e7ee      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ba4:	3004      	adds	r0, #4
 8004ba6:	f7ff fecb 	bl	8004940 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004baa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d0e8      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	04d8      	lsls	r0, r3, #19
 8004bb4:	d506      	bpl.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004bb6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004bb8:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8004bbc:	d074      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8004bbe:	d808      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004bc0:	b1a9      	cbz	r1, 8004bee <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8004bc2:	2601      	movs	r6, #1
 8004bc4:	4635      	mov	r5, r6
 8004bc6:	e021      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bc8:	2100      	movs	r1, #0
 8004bca:	3020      	adds	r0, #32
 8004bcc:	f7ff ff46 	bl	8004a5c <RCCEx_PLLSAI2_Config>
 8004bd0:	e7eb      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004bd2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8004bd6:	d004      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004bd8:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8004bdc:	d1f1      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004bde:	4635      	mov	r5, r6
 8004be0:	e009      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004be2:	4a35      	ldr	r2, [pc, #212]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be4:	68d3      	ldr	r3, [r2, #12]
 8004be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bea:	60d3      	str	r3, [r2, #12]
 8004bec:	e7f7      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bee:	1d20      	adds	r0, r4, #4
 8004bf0:	f7ff fea6 	bl	8004940 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bf4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004bf6:	2d00      	cmp	r5, #0
 8004bf8:	d15c      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bfa:	4a2f      	ldr	r2, [pc, #188]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bfc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004bfe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004c02:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004c06:	430b      	orrs	r3, r1
 8004c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	0399      	lsls	r1, r3, #14
 8004c10:	f140 814f 	bpl.w	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c14:	4f28      	ldr	r7, [pc, #160]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c18:	00da      	lsls	r2, r3, #3
 8004c1a:	f140 8176 	bpl.w	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8004c1e:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c22:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004cbc <HAL_RCCEx_PeriphCLKConfig+0x164>
 8004c26:	f8d9 3000 	ldr.w	r3, [r9]
 8004c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8004c32:	f7fe fced 	bl	8003610 <HAL_GetTick>
 8004c36:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c38:	f8d9 3000 	ldr.w	r3, [r9]
 8004c3c:	05db      	lsls	r3, r3, #23
 8004c3e:	d53f      	bpl.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8004c40:	2d00      	cmp	r5, #0
 8004c42:	d144      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c48:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004c4c:	d015      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x122>
 8004c4e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d011      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c5a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004c5e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c66:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c7a:	07d8      	lsls	r0, r3, #31
 8004c7c:	d509      	bpl.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8004c7e:	f7fe fcc7 	bl	8003610 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c82:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004c86:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c8c:	0799      	lsls	r1, r3, #30
 8004c8e:	f140 8109 	bpl.w	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c96:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8004c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ca4:	4635      	mov	r5, r6
 8004ca6:	e012      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ca8:	2100      	movs	r1, #0
 8004caa:	f104 0020 	add.w	r0, r4, #32
 8004cae:	f7ff fed5 	bl	8004a5c <RCCEx_PLLSAI2_Config>
 8004cb2:	e79f      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8004cb4:	462e      	mov	r6, r5
 8004cb6:	e7a9      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc0:	f7fe fca6 	bl	8003610 <HAL_GetTick>
 8004cc4:	eba0 000a 	sub.w	r0, r0, sl
 8004cc8:	2802      	cmp	r0, #2
 8004cca:	d9b5      	bls.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8004ccc:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8004cce:	f1b8 0f00 	cmp.w	r8, #0
 8004cd2:	d003      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cda:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	07da      	lsls	r2, r3, #31
 8004ce0:	d508      	bpl.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ce2:	4990      	ldr	r1, [pc, #576]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004ce4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ce6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004cea:	f022 0203 	bic.w	r2, r2, #3
 8004cee:	4302      	orrs	r2, r0
 8004cf0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cf4:	079f      	lsls	r7, r3, #30
 8004cf6:	d508      	bpl.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cf8:	498a      	ldr	r1, [pc, #552]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004cfa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004cfc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d00:	f022 020c 	bic.w	r2, r2, #12
 8004d04:	4302      	orrs	r2, r0
 8004d06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d0a:	075e      	lsls	r6, r3, #29
 8004d0c:	d508      	bpl.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d0e:	4985      	ldr	r1, [pc, #532]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004d10:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004d12:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d16:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004d1a:	4302      	orrs	r2, r0
 8004d1c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d20:	0718      	lsls	r0, r3, #28
 8004d22:	d508      	bpl.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d24:	497f      	ldr	r1, [pc, #508]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004d26:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004d28:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d2c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004d30:	4302      	orrs	r2, r0
 8004d32:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d36:	06d9      	lsls	r1, r3, #27
 8004d38:	d508      	bpl.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d3a:	497a      	ldr	r1, [pc, #488]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004d3c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004d3e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d46:	4302      	orrs	r2, r0
 8004d48:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d4c:	069a      	lsls	r2, r3, #26
 8004d4e:	d508      	bpl.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d50:	4974      	ldr	r1, [pc, #464]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004d52:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004d54:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d58:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d5c:	4302      	orrs	r2, r0
 8004d5e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d62:	059f      	lsls	r7, r3, #22
 8004d64:	d508      	bpl.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d66:	496f      	ldr	r1, [pc, #444]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004d68:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004d6a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d6e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004d72:	4302      	orrs	r2, r0
 8004d74:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d78:	055e      	lsls	r6, r3, #21
 8004d7a:	d508      	bpl.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d7c:	4969      	ldr	r1, [pc, #420]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004d7e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004d80:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d84:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004d88:	4302      	orrs	r2, r0
 8004d8a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d8e:	0658      	lsls	r0, r3, #25
 8004d90:	d508      	bpl.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d92:	4964      	ldr	r1, [pc, #400]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004d94:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004d96:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d9a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004d9e:	4302      	orrs	r2, r0
 8004da0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004da4:	0619      	lsls	r1, r3, #24
 8004da6:	d508      	bpl.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004da8:	495e      	ldr	r1, [pc, #376]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004daa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004dac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004db0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004db4:	4302      	orrs	r2, r0
 8004db6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dba:	05da      	lsls	r2, r3, #23
 8004dbc:	d508      	bpl.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dbe:	4959      	ldr	r1, [pc, #356]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dc2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004dc6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004dca:	4302      	orrs	r2, r0
 8004dcc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dd0:	049b      	lsls	r3, r3, #18
 8004dd2:	d50f      	bpl.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dd4:	4a53      	ldr	r2, [pc, #332]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004dd6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004dd8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004ddc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004de0:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004de2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004de6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dea:	d164      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dec:	68d3      	ldr	r3, [r2, #12]
 8004dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004df2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	031f      	lsls	r7, r3, #12
 8004df8:	d50f      	bpl.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dfa:	4a4a      	ldr	r2, [pc, #296]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004dfc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004dfe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e02:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004e06:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e08:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e10:	d15c      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e12:	68d3      	ldr	r3, [r2, #12]
 8004e14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e18:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	035e      	lsls	r6, r3, #13
 8004e1e:	d50f      	bpl.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e20:	4a40      	ldr	r2, [pc, #256]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004e22:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004e24:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e28:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004e2c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e2e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e36:	d154      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e38:	68d3      	ldr	r3, [r2, #12]
 8004e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	0458      	lsls	r0, r3, #17
 8004e44:	d512      	bpl.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e46:	4937      	ldr	r1, [pc, #220]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004e48:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004e4a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004e4e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004e52:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e54:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e5c:	d14c      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e5e:	2102      	movs	r1, #2
 8004e60:	1d20      	adds	r0, r4, #4
 8004e62:	f7ff fd6d 	bl	8004940 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004e66:	2800      	cmp	r0, #0
 8004e68:	bf18      	it	ne
 8004e6a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e6c:	6822      	ldr	r2, [r4, #0]
 8004e6e:	0411      	lsls	r1, r2, #16
 8004e70:	d508      	bpl.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e72:	492c      	ldr	r1, [pc, #176]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004e74:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004e76:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004e7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e7e:	4303      	orrs	r3, r0
 8004e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e84:	03d3      	lsls	r3, r2, #15
 8004e86:	d509      	bpl.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e88:	4a26      	ldr	r2, [pc, #152]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004e8a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004e8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e96:	430b      	orrs	r3, r1
 8004e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	b002      	add	sp, #8
 8004ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea4:	f7fe fbb4 	bl	8003610 <HAL_GetTick>
 8004ea8:	1b40      	subs	r0, r0, r5
 8004eaa:	4548      	cmp	r0, r9
 8004eac:	f67f aeec 	bls.w	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8004eb0:	e70c      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004eb2:	4635      	mov	r5, r6
 8004eb4:	e712      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004eb6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004eba:	d19b      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	1d20      	adds	r0, r4, #4
 8004ec0:	f7ff fd3e 	bl	8004940 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	bf18      	it	ne
 8004ec8:	4605      	movne	r5, r0
 8004eca:	e793      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ecc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004ed0:	d1a3      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	1d20      	adds	r0, r4, #4
 8004ed6:	f7ff fd33 	bl	8004940 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004eda:	2800      	cmp	r0, #0
 8004edc:	bf18      	it	ne
 8004ede:	4605      	movne	r5, r0
 8004ee0:	e79b      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ee2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004ee6:	d1ab      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ee8:	2101      	movs	r1, #1
 8004eea:	1d20      	adds	r0, r4, #4
 8004eec:	f7ff fd28 	bl	8004940 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	bf18      	it	ne
 8004ef4:	4605      	movne	r5, r0
 8004ef6:	e7a3      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ef8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004efc:	d1b6      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004efe:	2102      	movs	r1, #2
 8004f00:	f104 0020 	add.w	r0, r4, #32
 8004f04:	f7ff fdaa 	bl	8004a5c <RCCEx_PLLSAI2_Config>
 8004f08:	e7ad      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f10:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004f1c:	f04f 0801 	mov.w	r8, #1
 8004f20:	e67f      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000

08004f28 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f28:	2302      	movs	r3, #2
{
 8004f2a:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8004f30:	6803      	ldr	r3, [r0, #0]
 8004f32:	4c09      	ldr	r4, [pc, #36]	; (8004f58 <HAL_TIM_Base_Start+0x30>)
 8004f34:	6899      	ldr	r1, [r3, #8]
 8004f36:	4021      	ands	r1, r4
 8004f38:	2906      	cmp	r1, #6
 8004f3a:	d008      	beq.n	8004f4e <HAL_TIM_Base_Start+0x26>
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	4022      	ands	r2, r4
 8004f40:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8004f44:	bf1e      	ittt	ne
 8004f46:	681a      	ldrne	r2, [r3, #0]
 8004f48:	f042 0201 	orrne.w	r2, r2, #1
 8004f4c:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8004f54:	2000      	movs	r0, #0
 8004f56:	bd10      	pop	{r4, pc}
 8004f58:	00010007 	.word	0x00010007

08004f5c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f5c:	4a30      	ldr	r2, [pc, #192]	; (8005020 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8004f5e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f60:	4290      	cmp	r0, r2
 8004f62:	d012      	beq.n	8004f8a <TIM_Base_SetConfig+0x2e>
 8004f64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004f68:	d00f      	beq.n	8004f8a <TIM_Base_SetConfig+0x2e>
 8004f6a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004f6e:	4290      	cmp	r0, r2
 8004f70:	d00b      	beq.n	8004f8a <TIM_Base_SetConfig+0x2e>
 8004f72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f76:	4290      	cmp	r0, r2
 8004f78:	d007      	beq.n	8004f8a <TIM_Base_SetConfig+0x2e>
 8004f7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f7e:	4290      	cmp	r0, r2
 8004f80:	d003      	beq.n	8004f8a <TIM_Base_SetConfig+0x2e>
 8004f82:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004f86:	4290      	cmp	r0, r2
 8004f88:	d119      	bne.n	8004fbe <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004f8a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f90:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f92:	4a23      	ldr	r2, [pc, #140]	; (8005020 <TIM_Base_SetConfig+0xc4>)
 8004f94:	4290      	cmp	r0, r2
 8004f96:	d01d      	beq.n	8004fd4 <TIM_Base_SetConfig+0x78>
 8004f98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004f9c:	d01a      	beq.n	8004fd4 <TIM_Base_SetConfig+0x78>
 8004f9e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004fa2:	4290      	cmp	r0, r2
 8004fa4:	d016      	beq.n	8004fd4 <TIM_Base_SetConfig+0x78>
 8004fa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004faa:	4290      	cmp	r0, r2
 8004fac:	d012      	beq.n	8004fd4 <TIM_Base_SetConfig+0x78>
 8004fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fb2:	4290      	cmp	r0, r2
 8004fb4:	d00e      	beq.n	8004fd4 <TIM_Base_SetConfig+0x78>
 8004fb6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004fba:	4290      	cmp	r0, r2
 8004fbc:	d00a      	beq.n	8004fd4 <TIM_Base_SetConfig+0x78>
 8004fbe:	4a19      	ldr	r2, [pc, #100]	; (8005024 <TIM_Base_SetConfig+0xc8>)
 8004fc0:	4290      	cmp	r0, r2
 8004fc2:	d007      	beq.n	8004fd4 <TIM_Base_SetConfig+0x78>
 8004fc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fc8:	4290      	cmp	r0, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_Base_SetConfig+0x78>
 8004fcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fd0:	4290      	cmp	r0, r2
 8004fd2:	d103      	bne.n	8004fdc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fda:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fdc:	694a      	ldr	r2, [r1, #20]
 8004fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004fe4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe6:	688b      	ldr	r3, [r1, #8]
 8004fe8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fea:	680b      	ldr	r3, [r1, #0]
 8004fec:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fee:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <TIM_Base_SetConfig+0xc4>)
 8004ff0:	4298      	cmp	r0, r3
 8004ff2:	d00f      	beq.n	8005014 <TIM_Base_SetConfig+0xb8>
 8004ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff8:	4298      	cmp	r0, r3
 8004ffa:	d00b      	beq.n	8005014 <TIM_Base_SetConfig+0xb8>
 8004ffc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005000:	4298      	cmp	r0, r3
 8005002:	d007      	beq.n	8005014 <TIM_Base_SetConfig+0xb8>
 8005004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005008:	4298      	cmp	r0, r3
 800500a:	d003      	beq.n	8005014 <TIM_Base_SetConfig+0xb8>
 800500c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005010:	4298      	cmp	r0, r3
 8005012:	d101      	bne.n	8005018 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005014:	690b      	ldr	r3, [r1, #16]
 8005016:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005018:	2301      	movs	r3, #1
 800501a:	6143      	str	r3, [r0, #20]
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40012c00 	.word	0x40012c00
 8005024:	40014000 	.word	0x40014000

08005028 <HAL_TIM_Base_Init>:
{
 8005028:	b510      	push	{r4, lr}
  if (htim == NULL)
 800502a:	4604      	mov	r4, r0
 800502c:	b1a0      	cbz	r0, 8005058 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800502e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005032:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005036:	b91b      	cbnz	r3, 8005040 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005038:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800503c:	f002 f9c8 	bl	80073d0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005040:	2302      	movs	r3, #2
 8005042:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	1d21      	adds	r1, r4, #4
 800504a:	f7ff ff87 	bl	8004f5c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800504e:	2301      	movs	r3, #1
 8005050:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005054:	2000      	movs	r0, #0
 8005056:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005058:	2001      	movs	r0, #1
}
 800505a:	bd10      	pop	{r4, pc}

0800505c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800505c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005060:	2b01      	cmp	r3, #1
{
 8005062:	b530      	push	{r4, r5, lr}
 8005064:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8005068:	d01f      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800506a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800506c:	4d10      	ldr	r5, [pc, #64]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 800506e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005072:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8005074:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005076:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005078:	d003      	beq.n	8005082 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800507a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800507e:	42aa      	cmp	r2, r5
 8005080:	d103      	bne.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005082:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005084:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005088:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800508a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800508c:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005092:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005094:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005098:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800509a:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800509c:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 800509e:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a4:	2300      	movs	r3, #0
 80050a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80050aa:	4618      	mov	r0, r3

  return HAL_OK;
}
 80050ac:	bd30      	pop	{r4, r5, pc}
 80050ae:	bf00      	nop
 80050b0:	40012c00 	.word	0x40012c00

080050b4 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b4:	6803      	ldr	r3, [r0, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050bc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050c6:	2320      	movs	r3, #32
 80050c8:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	6603      	str	r3, [r0, #96]	; 0x60
 80050d0:	4770      	bx	lr
	...

080050d4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80050d4:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d149      	bne.n	8005170 <HAL_UART_Receive_IT+0x9c>
    if ((pData == NULL) || (Size == 0U))
 80050dc:	2900      	cmp	r1, #0
 80050de:	d045      	beq.n	800516c <HAL_UART_Receive_IT+0x98>
 80050e0:	2a00      	cmp	r2, #0
 80050e2:	d043      	beq.n	800516c <HAL_UART_Receive_IT+0x98>
    __HAL_LOCK(huart);
 80050e4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d041      	beq.n	8005170 <HAL_UART_Receive_IT+0x9c>
 80050ec:	2301      	movs	r3, #1
 80050ee:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxISR       = NULL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 80050f6:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 80050f8:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 80050fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize  = Size;
 80050fe:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8005102:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8005106:	d121      	bne.n	800514c <HAL_UART_Receive_IT+0x78>
 8005108:	6902      	ldr	r2, [r0, #16]
 800510a:	b9ea      	cbnz	r2, 8005148 <HAL_UART_Receive_IT+0x74>
 800510c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005110:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005114:	2200      	movs	r2, #0
 8005116:	6742      	str	r2, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005118:	2222      	movs	r2, #34	; 0x22
 800511a:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511e:	6802      	ldr	r2, [r0, #0]
 8005120:	6891      	ldr	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005126:	f041 0101 	orr.w	r1, r1, #1
 800512a:	6091      	str	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800512c:	d11c      	bne.n	8005168 <HAL_UART_Receive_IT+0x94>
 800512e:	6903      	ldr	r3, [r0, #16]
 8005130:	b9d3      	cbnz	r3, 8005168 <HAL_UART_Receive_IT+0x94>
        huart->RxISR = UART_RxISR_16BIT;
 8005132:	4b10      	ldr	r3, [pc, #64]	; (8005174 <HAL_UART_Receive_IT+0xa0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005134:	6811      	ldr	r1, [r2, #0]
        huart->RxISR = UART_RxISR_8BIT;
 8005136:	6603      	str	r3, [r0, #96]	; 0x60
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005138:	f441 7190 	orr.w	r1, r1, #288	; 0x120
      __HAL_UNLOCK(huart);
 800513c:	2300      	movs	r3, #0
 800513e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005142:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8005144:	4618      	mov	r0, r3
 8005146:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8005148:	22ff      	movs	r2, #255	; 0xff
 800514a:	e7e1      	b.n	8005110 <HAL_UART_Receive_IT+0x3c>
 800514c:	b923      	cbnz	r3, 8005158 <HAL_UART_Receive_IT+0x84>
 800514e:	6902      	ldr	r2, [r0, #16]
 8005150:	2a00      	cmp	r2, #0
 8005152:	d0f9      	beq.n	8005148 <HAL_UART_Receive_IT+0x74>
 8005154:	227f      	movs	r2, #127	; 0x7f
 8005156:	e7db      	b.n	8005110 <HAL_UART_Receive_IT+0x3c>
 8005158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800515c:	d1da      	bne.n	8005114 <HAL_UART_Receive_IT+0x40>
 800515e:	6902      	ldr	r2, [r0, #16]
 8005160:	2a00      	cmp	r2, #0
 8005162:	d0f7      	beq.n	8005154 <HAL_UART_Receive_IT+0x80>
 8005164:	223f      	movs	r2, #63	; 0x3f
 8005166:	e7d3      	b.n	8005110 <HAL_UART_Receive_IT+0x3c>
        huart->RxISR = UART_RxISR_8BIT;
 8005168:	4b03      	ldr	r3, [pc, #12]	; (8005178 <HAL_UART_Receive_IT+0xa4>)
 800516a:	e7e3      	b.n	8005134 <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 800516c:	2001      	movs	r0, #1
 800516e:	4770      	bx	lr
    return HAL_BUSY;
 8005170:	2002      	movs	r0, #2
}
 8005172:	4770      	bx	lr
 8005174:	08005287 	.word	0x08005287
 8005178:	08005231 	.word	0x08005231

0800517c <HAL_UART_Transmit_DMA>:
{
 800517c:	b538      	push	{r3, r4, r5, lr}
 800517e:	4604      	mov	r4, r0
 8005180:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005182:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
 8005186:	2a20      	cmp	r2, #32
 8005188:	d12b      	bne.n	80051e2 <HAL_UART_Transmit_DMA+0x66>
    if ((pData == NULL) || (Size == 0U))
 800518a:	b341      	cbz	r1, 80051de <HAL_UART_Transmit_DMA+0x62>
 800518c:	b33b      	cbz	r3, 80051de <HAL_UART_Transmit_DMA+0x62>
    __HAL_LOCK(huart);
 800518e:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8005192:	2a01      	cmp	r2, #1
 8005194:	d025      	beq.n	80051e2 <HAL_UART_Transmit_DMA+0x66>
 8005196:	2201      	movs	r2, #1
 8005198:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800519c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferCount = Size;
 800519e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a2:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a4:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a6:	6765      	str	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a8:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80051ac:	4a0e      	ldr	r2, [pc, #56]	; (80051e8 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize  = Size;
 80051ae:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr  = pData;
 80051b2:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80051b4:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80051b6:	4a0d      	ldr	r2, [pc, #52]	; (80051ec <HAL_UART_Transmit_DMA+0x70>)
 80051b8:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80051ba:	4a0d      	ldr	r2, [pc, #52]	; (80051f0 <HAL_UART_Transmit_DMA+0x74>)
 80051bc:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80051be:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 80051c0:	6385      	str	r5, [r0, #56]	; 0x38
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80051c2:	3228      	adds	r2, #40	; 0x28
 80051c4:	f7fe fe74 	bl	8003eb0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	2240      	movs	r2, #64	; 0x40
 80051cc:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051ce:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 80051d0:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051d8:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80051da:	4628      	mov	r0, r5
 80051dc:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80051de:	2001      	movs	r0, #1
 80051e0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80051e2:	2002      	movs	r0, #2
}
 80051e4:	bd38      	pop	{r3, r4, r5, pc}
 80051e6:	bf00      	nop
 80051e8:	080051f7 	.word	0x080051f7
 80051ec:	08005227 	.word	0x08005227
 80051f0:	080052dd 	.word	0x080052dd

080051f4 <HAL_UART_TxCpltCallback>:
 80051f4:	4770      	bx	lr

080051f6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051f6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80051f8:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051fa:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f013 0320 	ands.w	r3, r3, #32
 8005202:	d10b      	bne.n	800521c <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 8005204:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005208:	6813      	ldr	r3, [r2, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005210:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	bd08      	pop	{r3, pc}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800521c:	4610      	mov	r0, r2
 800521e:	f7ff ffe9 	bl	80051f4 <HAL_UART_TxCpltCallback>
 8005222:	bd08      	pop	{r3, pc}

08005224 <HAL_UART_TxHalfCpltCallback>:
 8005224:	4770      	bx	lr

08005226 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005226:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005228:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800522a:	f7ff fffb 	bl	8005224 <HAL_UART_TxHalfCpltCallback>
 800522e:	bd08      	pop	{r3, pc}

08005230 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005230:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8005234:	2a22      	cmp	r2, #34	; 0x22
{
 8005236:	b538      	push	{r3, r4, r5, lr}
 8005238:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800523a:	d11e      	bne.n	800527a <UART_RxISR_8BIT+0x4a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800523c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800523e:	6d44      	ldr	r4, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 8005240:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005244:	1c65      	adds	r5, r4, #1
 8005246:	400a      	ands	r2, r1
 8005248:	6545      	str	r5, [r0, #84]	; 0x54
 800524a:	7022      	strb	r2, [r4, #0]

    if (--huart->RxXferCount == 0)
 800524c:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8005250:	3a01      	subs	r2, #1
 8005252:	b292      	uxth	r2, r2
 8005254:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 8005258:	b9a2      	cbnz	r2, 8005284 <UART_RxISR_8BIT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800525a:	6801      	ldr	r1, [r0, #0]
 800525c:	680c      	ldr	r4, [r1, #0]
 800525e:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8005262:	600c      	str	r4, [r1, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005264:	688c      	ldr	r4, [r1, #8]
 8005266:	f024 0401 	bic.w	r4, r4, #1
 800526a:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800526c:	2120      	movs	r1, #32
 800526e:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005272:	6602      	str	r2, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005274:	f001 ffc6 	bl	8007204 <HAL_UART_RxCpltCallback>
 8005278:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800527a:	8b13      	ldrh	r3, [r2, #24]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f043 0308 	orr.w	r3, r3, #8
 8005282:	8313      	strh	r3, [r2, #24]
 8005284:	bd38      	pop	{r3, r4, r5, pc}

08005286 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005286:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 800528a:	2a22      	cmp	r2, #34	; 0x22
{
 800528c:	b510      	push	{r4, lr}
 800528e:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005290:	d11d      	bne.n	80052ce <UART_RxISR_16BIT+0x48>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005292:	8c94      	ldrh	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8005294:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005298:	400c      	ands	r4, r1
 800529a:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800529c:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2;
 80052a0:	6541      	str	r1, [r0, #84]	; 0x54

    if (--huart->RxXferCount == 0)
 80052a2:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
 80052a6:	3901      	subs	r1, #1
 80052a8:	b289      	uxth	r1, r1
 80052aa:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
 80052ae:	b999      	cbnz	r1, 80052d8 <UART_RxISR_16BIT+0x52>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b0:	6814      	ldr	r4, [r2, #0]
 80052b2:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80052b6:	6014      	str	r4, [r2, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b8:	6894      	ldr	r4, [r2, #8]
 80052ba:	f024 0401 	bic.w	r4, r4, #1
 80052be:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052c0:	2220      	movs	r2, #32
 80052c2:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052c6:	6601      	str	r1, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052c8:	f001 ff9c 	bl	8007204 <HAL_UART_RxCpltCallback>
 80052cc:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ce:	8b13      	ldrh	r3, [r2, #24]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f043 0308 	orr.w	r3, r3, #8
 80052d6:	8313      	strh	r3, [r2, #24]
 80052d8:	bd10      	pop	{r4, pc}

080052da <HAL_UART_ErrorCallback>:
 80052da:	4770      	bx	lr

080052dc <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052dc:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
 80052de:	b508      	push	{r3, lr}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX)
 80052e0:	f891 3071 	ldrb.w	r3, [r1, #113]	; 0x71
 80052e4:	2b21      	cmp	r3, #33	; 0x21
 80052e6:	d10d      	bne.n	8005304 <UART_DMAError+0x28>
      && (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 80052e8:	680b      	ldr	r3, [r1, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	0612      	lsls	r2, r2, #24
 80052ee:	d509      	bpl.n	8005304 <UART_DMAError+0x28>
    huart->TxXferCount = 0U;
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80052fc:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80052fe:	2320      	movs	r3, #32
 8005300:	f881 3071 	strb.w	r3, [r1, #113]	; 0x71
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005304:	f891 3072 	ldrb.w	r3, [r1, #114]	; 0x72
 8005308:	2b22      	cmp	r3, #34	; 0x22
 800530a:	d109      	bne.n	8005320 <UART_DMAError+0x44>
      && (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800530c:	680b      	ldr	r3, [r1, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	065b      	lsls	r3, r3, #25
 8005312:	d505      	bpl.n	8005320 <UART_DMAError+0x44>
    huart->RxXferCount = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800531a:	4608      	mov	r0, r1
 800531c:	f7ff feca 	bl	80050b4 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005320:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8005322:	f043 0310 	orr.w	r3, r3, #16
 8005326:	674b      	str	r3, [r1, #116]	; 0x74
  HAL_UART_ErrorCallback(huart);
 8005328:	4608      	mov	r0, r1
 800532a:	f7ff ffd6 	bl	80052da <HAL_UART_ErrorCallback>
 800532e:	bd08      	pop	{r3, pc}

08005330 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005330:	6803      	ldr	r3, [r0, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005334:	6819      	ldr	r1, [r3, #0]
{
 8005336:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8005338:	0716      	lsls	r6, r2, #28
{
 800533a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800533c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 800533e:	d10a      	bne.n	8005356 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 8005340:	0696      	lsls	r6, r2, #26
 8005342:	d564      	bpl.n	800540e <HAL_UART_IRQHandler+0xde>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005344:	068e      	lsls	r6, r1, #26
 8005346:	d562      	bpl.n	800540e <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8005348:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 8083 	beq.w	8005456 <HAL_UART_IRQHandler+0x126>
}
 8005350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8005354:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != RESET)
 8005356:	f015 0001 	ands.w	r0, r5, #1
 800535a:	d102      	bne.n	8005362 <HAL_UART_IRQHandler+0x32>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800535c:	f411 7f90 	tst.w	r1, #288	; 0x120
 8005360:	d055      	beq.n	800540e <HAL_UART_IRQHandler+0xde>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005362:	07d5      	lsls	r5, r2, #31
 8005364:	d507      	bpl.n	8005376 <HAL_UART_IRQHandler+0x46>
 8005366:	05ce      	lsls	r6, r1, #23
 8005368:	d505      	bpl.n	8005376 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800536a:	2501      	movs	r5, #1
 800536c:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800536e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8005370:	f045 0501 	orr.w	r5, r5, #1
 8005374:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005376:	0795      	lsls	r5, r2, #30
 8005378:	d506      	bpl.n	8005388 <HAL_UART_IRQHandler+0x58>
 800537a:	b128      	cbz	r0, 8005388 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800537c:	2502      	movs	r5, #2
 800537e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005380:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8005382:	f045 0504 	orr.w	r5, r5, #4
 8005386:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005388:	0756      	lsls	r6, r2, #29
 800538a:	d506      	bpl.n	800539a <HAL_UART_IRQHandler+0x6a>
 800538c:	b128      	cbz	r0, 800539a <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800538e:	2504      	movs	r5, #4
 8005390:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005392:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8005394:	f045 0502 	orr.w	r5, r5, #2
 8005398:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 800539a:	0715      	lsls	r5, r2, #28
 800539c:	d507      	bpl.n	80053ae <HAL_UART_IRQHandler+0x7e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 800539e:	068e      	lsls	r6, r1, #26
 80053a0:	d400      	bmi.n	80053a4 <HAL_UART_IRQHandler+0x74>
 80053a2:	b120      	cbz	r0, 80053ae <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053a4:	2008      	movs	r0, #8
 80053a6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053a8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80053aa:	4303      	orrs	r3, r0
 80053ac:	6763      	str	r3, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ae:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d050      	beq.n	8005456 <HAL_UART_IRQHandler+0x126>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 80053b4:	0695      	lsls	r5, r2, #26
 80053b6:	d505      	bpl.n	80053c4 <HAL_UART_IRQHandler+0x94>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053b8:	0688      	lsls	r0, r1, #26
 80053ba:	d503      	bpl.n	80053c4 <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL)
 80053bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80053be:	b10b      	cbz	r3, 80053c4 <HAL_UART_IRQHandler+0x94>
          huart->RxISR(huart);
 80053c0:	4620      	mov	r0, r4
 80053c2:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80053c4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80053c6:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 80053c8:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80053ca:	d404      	bmi.n	80053d6 <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80053d0:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80053d4:	d017      	beq.n	8005406 <HAL_UART_IRQHandler+0xd6>
        UART_EndRxTransfer(huart);
 80053d6:	f7ff fe6d 	bl	80050b4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	0652      	lsls	r2, r2, #25
 80053e0:	d50d      	bpl.n	80053fe <HAL_UART_IRQHandler+0xce>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e2:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80053e4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ea:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80053ec:	b138      	cbz	r0, 80053fe <HAL_UART_IRQHandler+0xce>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053ee:	4b1a      	ldr	r3, [pc, #104]	; (8005458 <HAL_UART_IRQHandler+0x128>)
 80053f0:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053f2:	f7fe fd9d 	bl	8003f30 <HAL_DMA_Abort_IT>
 80053f6:	b370      	cbz	r0, 8005456 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053f8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80053fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80053fc:	e7a8      	b.n	8005350 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 80053fe:	4620      	mov	r0, r4
 8005400:	f7ff ff6b 	bl	80052da <HAL_UART_ErrorCallback>
 8005404:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005406:	f7ff ff68 	bl	80052da <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540a:	6765      	str	r5, [r4, #116]	; 0x74
 800540c:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800540e:	02d6      	lsls	r6, r2, #11
 8005410:	d509      	bpl.n	8005426 <HAL_UART_IRQHandler+0xf6>
 8005412:	0268      	lsls	r0, r5, #9
 8005414:	d507      	bpl.n	8005426 <HAL_UART_IRQHandler+0xf6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005416:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800541a:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8005422:	f000 bafd 	b.w	8005a20 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != RESET)
 8005426:	0616      	lsls	r6, r2, #24
 8005428:	d505      	bpl.n	8005436 <HAL_UART_IRQHandler+0x106>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 800542a:	060d      	lsls	r5, r1, #24
 800542c:	d503      	bpl.n	8005436 <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 800542e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005430:	b18b      	cbz	r3, 8005456 <HAL_UART_IRQHandler+0x126>
      huart->TxISR(huart);
 8005432:	4620      	mov	r0, r4
 8005434:	e78c      	b.n	8005350 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005436:	0650      	lsls	r0, r2, #25
 8005438:	d50d      	bpl.n	8005456 <HAL_UART_IRQHandler+0x126>
 800543a:	064a      	lsls	r2, r1, #25
 800543c:	d50b      	bpl.n	8005456 <HAL_UART_IRQHandler+0x126>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005444:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005446:	2320      	movs	r3, #32
 8005448:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->TxISR = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8005450:	4620      	mov	r0, r4
 8005452:	f7ff fecf 	bl	80051f4 <HAL_UART_TxCpltCallback>
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	0800545d 	.word	0x0800545d

0800545c <UART_DMAAbortOnError>:
{
 800545c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800545e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005466:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800546a:	f7ff ff36 	bl	80052da <HAL_UART_ErrorCallback>
 800546e:	bd08      	pop	{r3, pc}

08005470 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8005470:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005472:	69c1      	ldr	r1, [r0, #28]
{
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005478:	6883      	ldr	r3, [r0, #8]
 800547a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800547c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800547e:	4303      	orrs	r3, r0
 8005480:	6960      	ldr	r0, [r4, #20]
 8005482:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005484:	48ba      	ldr	r0, [pc, #744]	; (8005770 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005486:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005488:	4028      	ands	r0, r5
 800548a:	4303      	orrs	r3, r0
 800548c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800548e:	6853      	ldr	r3, [r2, #4]
 8005490:	68e0      	ldr	r0, [r4, #12]
 8005492:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005496:	4303      	orrs	r3, r0
 8005498:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800549a:	4bb6      	ldr	r3, [pc, #728]	; (8005774 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800549c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800549e:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 80054a0:	bf1c      	itt	ne
 80054a2:	6a23      	ldrne	r3, [r4, #32]
 80054a4:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054a6:	6893      	ldr	r3, [r2, #8]
 80054a8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80054ac:	4303      	orrs	r3, r0
 80054ae:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054b0:	4bb1      	ldr	r3, [pc, #708]	; (8005778 <UART_SetConfig+0x308>)
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d119      	bne.n	80054ea <UART_SetConfig+0x7a>
 80054b6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80054ba:	4ab0      	ldr	r2, [pc, #704]	; (800577c <UART_SetConfig+0x30c>)
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c0:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80054c8:	5cd3      	ldrb	r3, [r2, r3]
 80054ca:	f040 8138 	bne.w	800573e <UART_SetConfig+0x2ce>
    switch (clocksource)
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	f200 808f 	bhi.w	80055f2 <UART_SetConfig+0x182>
 80054d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80054d8:	00ca011a 	.word	0x00ca011a
 80054dc:	008d00f9 	.word	0x008d00f9
 80054e0:	008d0114 	.word	0x008d0114
 80054e4:	008d008d 	.word	0x008d008d
 80054e8:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ea:	4ba5      	ldr	r3, [pc, #660]	; (8005780 <UART_SetConfig+0x310>)
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d107      	bne.n	8005500 <UART_SetConfig+0x90>
 80054f0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80054f4:	4aa3      	ldr	r2, [pc, #652]	; (8005784 <UART_SetConfig+0x314>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	e7e1      	b.n	80054c4 <UART_SetConfig+0x54>
 8005500:	4ba1      	ldr	r3, [pc, #644]	; (8005788 <UART_SetConfig+0x318>)
 8005502:	429a      	cmp	r2, r3
 8005504:	d123      	bne.n	800554e <UART_SetConfig+0xde>
 8005506:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005512:	2b10      	cmp	r3, #16
 8005514:	f000 80f1 	beq.w	80056fa <UART_SetConfig+0x28a>
 8005518:	d80b      	bhi.n	8005532 <UART_SetConfig+0xc2>
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 80f3 	beq.w	8005706 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005520:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        ret = HAL_ERROR;
 8005524:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005528:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800552c:	f000 80f8 	beq.w	8005720 <UART_SetConfig+0x2b0>
 8005530:	e0a8      	b.n	8005684 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005532:	2b20      	cmp	r3, #32
 8005534:	f000 80c6 	beq.w	80056c4 <UART_SetConfig+0x254>
 8005538:	2b30      	cmp	r3, #48	; 0x30
 800553a:	d1f1      	bne.n	8005520 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800553c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005540:	f040 80b8 	bne.w	80056b4 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005544:	6860      	ldr	r0, [r4, #4]
 8005546:	0843      	lsrs	r3, r0, #1
 8005548:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800554c:	e0c3      	b.n	80056d6 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800554e:	4b8f      	ldr	r3, [pc, #572]	; (800578c <UART_SetConfig+0x31c>)
 8005550:	429a      	cmp	r2, r3
 8005552:	d11e      	bne.n	8005592 <UART_SetConfig+0x122>
 8005554:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	f000 80bb 	beq.w	80056dc <UART_SetConfig+0x26c>
 8005566:	d80a      	bhi.n	800557e <UART_SetConfig+0x10e>
 8005568:	b97b      	cbnz	r3, 800558a <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800556a:	4b82      	ldr	r3, [pc, #520]	; (8005774 <UART_SetConfig+0x304>)
 800556c:	429a      	cmp	r2, r3
 800556e:	f040 80ca 	bne.w	8005706 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005572:	f7ff f9c1 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
        break;
 8005576:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8005578:	bbb0      	cbnz	r0, 80055e8 <UART_SetConfig+0x178>
 800557a:	4602      	mov	r2, r0
 800557c:	e03a      	b.n	80055f4 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800557e:	2b80      	cmp	r3, #128	; 0x80
 8005580:	f000 809d 	beq.w	80056be <UART_SetConfig+0x24e>
 8005584:	2bc0      	cmp	r3, #192	; 0xc0
 8005586:	f000 80b0 	beq.w	80056ea <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800558a:	4b7a      	ldr	r3, [pc, #488]	; (8005774 <UART_SetConfig+0x304>)
 800558c:	429a      	cmp	r2, r3
 800558e:	d1c7      	bne.n	8005520 <UART_SetConfig+0xb0>
 8005590:	e02f      	b.n	80055f2 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005592:	4b7f      	ldr	r3, [pc, #508]	; (8005790 <UART_SetConfig+0x320>)
 8005594:	429a      	cmp	r2, r3
 8005596:	d111      	bne.n	80055bc <UART_SetConfig+0x14c>
 8005598:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800559c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a8:	f000 8098 	beq.w	80056dc <UART_SetConfig+0x26c>
 80055ac:	d9dc      	bls.n	8005568 <UART_SetConfig+0xf8>
 80055ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b2:	f000 8084 	beq.w	80056be <UART_SetConfig+0x24e>
 80055b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ba:	e7e4      	b.n	8005586 <UART_SetConfig+0x116>
 80055bc:	4b6d      	ldr	r3, [pc, #436]	; (8005774 <UART_SetConfig+0x304>)
 80055be:	429a      	cmp	r2, r3
 80055c0:	d1ae      	bne.n	8005520 <UART_SetConfig+0xb0>
 80055c2:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d2:	f000 8083 	beq.w	80056dc <UART_SetConfig+0x26c>
 80055d6:	d9c7      	bls.n	8005568 <UART_SetConfig+0xf8>
 80055d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055dc:	d06f      	beq.n	80056be <UART_SetConfig+0x24e>
 80055de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055e2:	e7d0      	b.n	8005586 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80055e4:	486b      	ldr	r0, [pc, #428]	; (8005794 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 80055e6:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80055e8:	6862      	ldr	r2, [r4, #4]
 80055ea:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80055ee:	4281      	cmp	r1, r0
 80055f0:	d905      	bls.n	80055fe <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 80055f2:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80055f8:	6663      	str	r3, [r4, #100]	; 0x64
}
 80055fa:	4610      	mov	r0, r2
 80055fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80055fe:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005602:	d8f6      	bhi.n	80055f2 <UART_SetConfig+0x182>
        switch (clocksource)
 8005604:	2b08      	cmp	r3, #8
 8005606:	d82e      	bhi.n	8005666 <UART_SetConfig+0x1f6>
 8005608:	e8df f003 	tbb	[pc, r3]
 800560c:	2d1c2d05 	.word	0x2d1c2d05
 8005610:	2d2d2d24 	.word	0x2d2d2d24
 8005614:	27          	.byte	0x27
 8005615:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005616:	f7ff f96f 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800561a:	6862      	ldr	r2, [r4, #4]
 800561c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005620:	0856      	lsrs	r6, r2, #1
 8005622:	2700      	movs	r7, #0
 8005624:	fbe1 6700 	umlal	r6, r7, r1, r0
 8005628:	2300      	movs	r3, #0
 800562a:	4630      	mov	r0, r6
 800562c:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800562e:	f7fd fdf7 	bl	8003220 <__aeabi_uldivmod>
            break;
 8005632:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005634:	4b58      	ldr	r3, [pc, #352]	; (8005798 <UART_SetConfig+0x328>)
 8005636:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800563a:	4299      	cmp	r1, r3
 800563c:	d8d9      	bhi.n	80055f2 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	60d8      	str	r0, [r3, #12]
 8005642:	e7d7      	b.n	80055f4 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005644:	4855      	ldr	r0, [pc, #340]	; (800579c <UART_SetConfig+0x32c>)
 8005646:	0855      	lsrs	r5, r2, #1
 8005648:	2300      	movs	r3, #0
 800564a:	2100      	movs	r1, #0
 800564c:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800564e:	f141 0100 	adc.w	r1, r1, #0
 8005652:	e7ec      	b.n	800562e <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005654:	f7fe fe44 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 8005658:	e7df      	b.n	800561a <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800565a:	0850      	lsrs	r0, r2, #1
 800565c:	2100      	movs	r1, #0
 800565e:	2300      	movs	r3, #0
 8005660:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8005664:	e7f3      	b.n	800564e <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8005666:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005668:	2000      	movs	r0, #0
 800566a:	e7e3      	b.n	8005634 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800566c:	f7ff f956 	bl	800491c <HAL_RCC_GetPCLK2Freq>
 8005670:	e04e      	b.n	8005710 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005672:	f7ff f941 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005676:	6862      	ldr	r2, [r4, #4]
 8005678:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800567c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005680:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005682:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005684:	f1a3 0010 	sub.w	r0, r3, #16
 8005688:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800568c:	4288      	cmp	r0, r1
 800568e:	d8b0      	bhi.n	80055f2 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8005690:	6821      	ldr	r1, [r4, #0]
 8005692:	60cb      	str	r3, [r1, #12]
 8005694:	e7ae      	b.n	80055f4 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005696:	f7ff f941 	bl	800491c <HAL_RCC_GetPCLK2Freq>
 800569a:	e7ec      	b.n	8005676 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800569c:	6860      	ldr	r0, [r4, #4]
 800569e:	0843      	lsrs	r3, r0, #1
 80056a0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80056a4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80056a8:	fbb3 f3f0 	udiv	r3, r3, r0
 80056ac:	e7e8      	b.n	8005680 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80056ae:	f7fe fe17 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 80056b2:	e7e0      	b.n	8005676 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80056b4:	6860      	ldr	r0, [r4, #4]
 80056b6:	0843      	lsrs	r3, r0, #1
 80056b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80056bc:	e7f4      	b.n	80056a8 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 80056be:	4b2d      	ldr	r3, [pc, #180]	; (8005774 <UART_SetConfig+0x304>)
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d08f      	beq.n	80055e4 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056c4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80056c8:	d1e8      	bne.n	800569c <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80056ca:	6860      	ldr	r0, [r4, #4]
 80056cc:	0843      	lsrs	r3, r0, #1
 80056ce:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80056d2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80056d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80056da:	e01f      	b.n	800571c <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 80056dc:	4b25      	ldr	r3, [pc, #148]	; (8005774 <UART_SetConfig+0x304>)
 80056de:	429a      	cmp	r2, r3
 80056e0:	d10b      	bne.n	80056fa <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80056e2:	f7fe fdfd 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
        break;
 80056e6:	2304      	movs	r3, #4
 80056e8:	e746      	b.n	8005578 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 80056ea:	4b22      	ldr	r3, [pc, #136]	; (8005774 <UART_SetConfig+0x304>)
 80056ec:	429a      	cmp	r2, r3
 80056ee:	f47f af25 	bne.w	800553c <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80056f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 80056f6:	2308      	movs	r3, #8
 80056f8:	e776      	b.n	80055e8 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056fa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80056fe:	d1d6      	bne.n	80056ae <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005700:	f7fe fdee 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 8005704:	e004      	b.n	8005710 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005706:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800570a:	d1b2      	bne.n	8005672 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800570c:	f7ff f8f4 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005710:	6861      	ldr	r1, [r4, #4]
 8005712:	084a      	lsrs	r2, r1, #1
 8005714:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8005718:	fbb3 f3f1 	udiv	r3, r3, r1
 800571c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800571e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005720:	f1a3 0010 	sub.w	r0, r3, #16
 8005724:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005728:	4288      	cmp	r0, r1
 800572a:	f63f af62 	bhi.w	80055f2 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 800572e:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8005732:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005734:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8005738:	430b      	orrs	r3, r1
 800573a:	60c3      	str	r3, [r0, #12]
 800573c:	e75a      	b.n	80055f4 <UART_SetConfig+0x184>
    switch (clocksource)
 800573e:	2b08      	cmp	r3, #8
 8005740:	f63f af57 	bhi.w	80055f2 <UART_SetConfig+0x182>
 8005744:	a201      	add	r2, pc, #4	; (adr r2, 800574c <UART_SetConfig+0x2dc>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	08005673 	.word	0x08005673
 8005750:	08005697 	.word	0x08005697
 8005754:	0800569d 	.word	0x0800569d
 8005758:	080055f3 	.word	0x080055f3
 800575c:	080056af 	.word	0x080056af
 8005760:	080055f3 	.word	0x080055f3
 8005764:	080055f3 	.word	0x080055f3
 8005768:	080055f3 	.word	0x080055f3
 800576c:	080056b5 	.word	0x080056b5
 8005770:	efff69f3 	.word	0xefff69f3
 8005774:	40008000 	.word	0x40008000
 8005778:	40013800 	.word	0x40013800
 800577c:	0800e148 	.word	0x0800e148
 8005780:	40004400 	.word	0x40004400
 8005784:	0800e14c 	.word	0x0800e14c
 8005788:	40004800 	.word	0x40004800
 800578c:	40004c00 	.word	0x40004c00
 8005790:	40005000 	.word	0x40005000
 8005794:	00f42400 	.word	0x00f42400
 8005798:	000ffcff 	.word	0x000ffcff
 800579c:	f4240000 	.word	0xf4240000

080057a0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80057a2:	07da      	lsls	r2, r3, #31
{
 80057a4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057a6:	d506      	bpl.n	80057b6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057a8:	6801      	ldr	r1, [r0, #0]
 80057aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80057ac:	684a      	ldr	r2, [r1, #4]
 80057ae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80057b2:	4322      	orrs	r2, r4
 80057b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057b6:	079c      	lsls	r4, r3, #30
 80057b8:	d506      	bpl.n	80057c8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057ba:	6801      	ldr	r1, [r0, #0]
 80057bc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80057be:	684a      	ldr	r2, [r1, #4]
 80057c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80057c4:	4322      	orrs	r2, r4
 80057c6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057c8:	0759      	lsls	r1, r3, #29
 80057ca:	d506      	bpl.n	80057da <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057cc:	6801      	ldr	r1, [r0, #0]
 80057ce:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80057d0:	684a      	ldr	r2, [r1, #4]
 80057d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057d6:	4322      	orrs	r2, r4
 80057d8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057da:	071a      	lsls	r2, r3, #28
 80057dc:	d506      	bpl.n	80057ec <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057de:	6801      	ldr	r1, [r0, #0]
 80057e0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80057e2:	684a      	ldr	r2, [r1, #4]
 80057e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057e8:	4322      	orrs	r2, r4
 80057ea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057ec:	06dc      	lsls	r4, r3, #27
 80057ee:	d506      	bpl.n	80057fe <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057f0:	6801      	ldr	r1, [r0, #0]
 80057f2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80057f4:	688a      	ldr	r2, [r1, #8]
 80057f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057fa:	4322      	orrs	r2, r4
 80057fc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057fe:	0699      	lsls	r1, r3, #26
 8005800:	d506      	bpl.n	8005810 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005802:	6801      	ldr	r1, [r0, #0]
 8005804:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005806:	688a      	ldr	r2, [r1, #8]
 8005808:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800580c:	4322      	orrs	r2, r4
 800580e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005810:	065a      	lsls	r2, r3, #25
 8005812:	d50f      	bpl.n	8005834 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005814:	6801      	ldr	r1, [r0, #0]
 8005816:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005818:	684a      	ldr	r2, [r1, #4]
 800581a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800581e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005820:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005824:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005826:	d105      	bne.n	8005834 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005828:	684a      	ldr	r2, [r1, #4]
 800582a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800582c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005830:	4322      	orrs	r2, r4
 8005832:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005834:	061b      	lsls	r3, r3, #24
 8005836:	d506      	bpl.n	8005846 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005838:	6802      	ldr	r2, [r0, #0]
 800583a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800583c:	6853      	ldr	r3, [r2, #4]
 800583e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005842:	430b      	orrs	r3, r1
 8005844:	6053      	str	r3, [r2, #4]
 8005846:	bd10      	pop	{r4, pc}

08005848 <UART_WaitOnFlagUntilTimeout>:
{
 8005848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584c:	9d06      	ldr	r5, [sp, #24]
 800584e:	4604      	mov	r4, r0
 8005850:	460f      	mov	r7, r1
 8005852:	4616      	mov	r6, r2
 8005854:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005856:	6821      	ldr	r1, [r4, #0]
 8005858:	69ca      	ldr	r2, [r1, #28]
 800585a:	ea37 0302 	bics.w	r3, r7, r2
 800585e:	bf0c      	ite	eq
 8005860:	2201      	moveq	r2, #1
 8005862:	2200      	movne	r2, #0
 8005864:	42b2      	cmp	r2, r6
 8005866:	d002      	beq.n	800586e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8005868:	2000      	movs	r0, #0
}
 800586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800586e:	1c6b      	adds	r3, r5, #1
 8005870:	d0f2      	beq.n	8005858 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005872:	b99d      	cbnz	r5, 800589c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800587c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	f022 0201 	bic.w	r2, r2, #1
 8005884:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005886:	2320      	movs	r3, #32
 8005888:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 800588c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8005890:	2300      	movs	r3, #0
 8005892:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8005896:	2003      	movs	r0, #3
 8005898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800589c:	f7fd feb8 	bl	8003610 <HAL_GetTick>
 80058a0:	eba0 0008 	sub.w	r0, r0, r8
 80058a4:	4285      	cmp	r5, r0
 80058a6:	d2d6      	bcs.n	8005856 <UART_WaitOnFlagUntilTimeout+0xe>
 80058a8:	e7e4      	b.n	8005874 <UART_WaitOnFlagUntilTimeout+0x2c>

080058aa <HAL_UART_Transmit>:
{
 80058aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80058ae:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80058b0:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80058b4:	2b20      	cmp	r3, #32
{
 80058b6:	4604      	mov	r4, r0
 80058b8:	460d      	mov	r5, r1
 80058ba:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80058bc:	d14a      	bne.n	8005954 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 80058be:	2900      	cmp	r1, #0
 80058c0:	d046      	beq.n	8005950 <HAL_UART_Transmit+0xa6>
 80058c2:	2a00      	cmp	r2, #0
 80058c4:	d044      	beq.n	8005950 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80058c6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d042      	beq.n	8005954 <HAL_UART_Transmit+0xaa>
 80058ce:	2301      	movs	r3, #1
 80058d0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058d8:	2321      	movs	r3, #33	; 0x21
 80058da:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 80058de:	f7fd fe97 	bl	8003610 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80058e2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80058e6:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80058e8:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80058ec:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058f0:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 80058f2:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058f4:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 80058f6:	b952      	cbnz	r2, 800590e <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058f8:	2140      	movs	r1, #64	; 0x40
 80058fa:	4620      	mov	r0, r4
 80058fc:	f7ff ffa4 	bl	8005848 <UART_WaitOnFlagUntilTimeout>
 8005900:	b958      	cbnz	r0, 800591a <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8005902:	2320      	movs	r3, #32
 8005904:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8005908:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 800590c:	e006      	b.n	800591c <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800590e:	2200      	movs	r2, #0
 8005910:	2180      	movs	r1, #128	; 0x80
 8005912:	4620      	mov	r0, r4
 8005914:	f7ff ff98 	bl	8005848 <UART_WaitOnFlagUntilTimeout>
 8005918:	b118      	cbz	r0, 8005922 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 800591a:	2003      	movs	r0, #3
}
 800591c:	b002      	add	sp, #8
 800591e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005922:	68a3      	ldr	r3, [r4, #8]
 8005924:	6822      	ldr	r2, [r4, #0]
 8005926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800592a:	d10d      	bne.n	8005948 <HAL_UART_Transmit+0x9e>
 800592c:	6923      	ldr	r3, [r4, #16]
 800592e:	b95b      	cbnz	r3, 8005948 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8005930:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005938:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800593a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800593e:	3b01      	subs	r3, #1
 8005940:	b29b      	uxth	r3, r3
 8005942:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8005946:	e7d1      	b.n	80058ec <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8005948:	782b      	ldrb	r3, [r5, #0]
 800594a:	8513      	strh	r3, [r2, #40]	; 0x28
 800594c:	3501      	adds	r5, #1
 800594e:	e7f4      	b.n	800593a <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8005950:	2001      	movs	r0, #1
 8005952:	e7e3      	b.n	800591c <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8005954:	2002      	movs	r0, #2
 8005956:	e7e1      	b.n	800591c <HAL_UART_Transmit+0x72>

08005958 <UART_CheckIdleState>:
{
 8005958:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800595a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595c:	2600      	movs	r6, #0
 800595e:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8005960:	f7fd fe56 	bl	8003610 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800596a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800596c:	d417      	bmi.n	800599e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	075b      	lsls	r3, r3, #29
 8005974:	d50a      	bpl.n	800598c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005976:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	2200      	movs	r2, #0
 800597e:	462b      	mov	r3, r5
 8005980:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005984:	4620      	mov	r0, r4
 8005986:	f7ff ff5f 	bl	8005848 <UART_WaitOnFlagUntilTimeout>
 800598a:	b9a0      	cbnz	r0, 80059b6 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 800598c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800598e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005990:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8005994:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8005998:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800599c:	e00c      	b.n	80059b8 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800599e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	4632      	mov	r2, r6
 80059a6:	4603      	mov	r3, r0
 80059a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059ac:	4620      	mov	r0, r4
 80059ae:	f7ff ff4b 	bl	8005848 <UART_WaitOnFlagUntilTimeout>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d0db      	beq.n	800596e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80059b6:	2003      	movs	r0, #3
}
 80059b8:	b002      	add	sp, #8
 80059ba:	bd70      	pop	{r4, r5, r6, pc}

080059bc <HAL_UART_Init>:
{
 80059bc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80059be:	4604      	mov	r4, r0
 80059c0:	b360      	cbz	r0, 8005a1c <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80059c2:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80059c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80059ca:	b91b      	cbnz	r3, 80059d4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80059cc:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80059d0:	f001 fd30 	bl	8007434 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80059d4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80059d6:	2324      	movs	r3, #36	; 0x24
 80059d8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80059dc:	6813      	ldr	r3, [r2, #0]
 80059de:	f023 0301 	bic.w	r3, r3, #1
 80059e2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059e4:	4620      	mov	r0, r4
 80059e6:	f7ff fd43 	bl	8005470 <UART_SetConfig>
 80059ea:	2801      	cmp	r0, #1
 80059ec:	d016      	beq.n	8005a1c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059f0:	b113      	cbz	r3, 80059f8 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80059f2:	4620      	mov	r0, r4
 80059f4:	f7ff fed4 	bl	80057a0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a08:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005a10:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005a12:	601a      	str	r2, [r3, #0]
}
 8005a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005a18:	f7ff bf9e 	b.w	8005958 <UART_CheckIdleState>
}
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	bd10      	pop	{r4, pc}

08005a20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a20:	4770      	bx	lr
	...

08005a24 <ai_network_data_weights_get>:
    0xc5, 0xbc, 0xc2, 0xff, 0x5f, 0x3d, 0x86, 0x7f, 0x2e,
    0xbd, 0xcd, 0xf4, 0xf2, 0xbd, 0xd7, 0x67, 0x00, 0x3e
  };

  return AI_HANDLE_PTR(s_network_weights);
}
 8005a24:	4800      	ldr	r0, [pc, #0]	; (8005a28 <ai_network_data_weights_get+0x4>)
 8005a26:	4770      	bx	lr
 8005a28:	0800e15c 	.word	0x0800e15c

08005a2c <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8005a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a30:	b0a0      	sub	sp, #128	; 0x80
 8005a32:	460f      	mov	r7, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005a34:	f7fa fcc3 	bl	80003be <ai_platform_context_acquire>
 8005a38:	4604      	mov	r4, r0

  if ( report && net_ctx )
 8005a3a:	2f00      	cmp	r7, #0
 8005a3c:	d06d      	beq.n	8005b1a <ai_network_get_info+0xee>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d06d      	beq.n	8005b1e <ai_network_get_info+0xf2>
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005a42:	f7fa fc56 	bl	80002f2 <ai_platform_runtime_get_revision>
 8005a46:	4680      	mov	r8, r0
    ai_network_report r = {
 8005a48:	f7fa fc6b 	bl	8000322 <ai_platform_runtime_get_version>
 8005a4c:	9006      	str	r0, [sp, #24]
 8005a4e:	f7fa fc82 	bl	8000356 <ai_platform_api_get_version>
 8005a52:	900a      	str	r0, [sp, #40]	; 0x28
 8005a54:	f7fa fc99 	bl	800038a <ai_platform_interface_api_get_version>
 8005a58:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8005a5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a60:	ae16      	add	r6, sp, #88	; 0x58
 8005a62:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8005a66:	f104 0314 	add.w	r3, r4, #20
 8005a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a6c:	ae1a      	add	r6, sp, #104	; 0x68
 8005a6e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
                              6,
                              1, NULL),
      .activations       = net_ctx->activations,
      .weights           = net_ctx->params,
      .n_nodes           = 0,
      .signature         = net_ctx->signature,
 8005a72:	6861      	ldr	r1, [r4, #4]
    };

    AI_FOR_EACH_NODE_DO(node, net_ctx->input_node)
 8005a74:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005a76:	2500      	movs	r5, #0
 8005a78:	2a00      	cmp	r2, #0
 8005a7a:	d147      	bne.n	8005b0c <ai_network_get_info+0xe0>
    {
      r.n_nodes++;
    }

    *report = r;
 8005a7c:	4b28      	ldr	r3, [pc, #160]	; (8005b20 <ai_network_get_info+0xf4>)
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	4b28      	ldr	r3, [pc, #160]	; (8005b24 <ai_network_get_info+0xf8>)
 8005a82:	9302      	str	r3, [sp, #8]
 8005a84:	4b28      	ldr	r3, [pc, #160]	; (8005b28 <ai_network_get_info+0xfc>)
 8005a86:	9303      	str	r3, [sp, #12]
 8005a88:	4b28      	ldr	r3, [pc, #160]	; (8005b2c <ai_network_get_info+0x100>)
 8005a8a:	9304      	str	r3, [sp, #16]
 8005a8c:	4828      	ldr	r0, [pc, #160]	; (8005b30 <ai_network_get_info+0x104>)
 8005a8e:	4b29      	ldr	r3, [pc, #164]	; (8005b34 <ai_network_get_info+0x108>)
 8005a90:	9307      	str	r3, [sp, #28]
 8005a92:	900c      	str	r0, [sp, #48]	; 0x30
 8005a94:	2303      	movs	r3, #3
 8005a96:	2040      	movs	r0, #64	; 0x40
 8005a98:	f88d 3020 	strb.w	r3, [sp, #32]
 8005a9c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8005aa0:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	2028      	movs	r0, #40	; 0x28
 8005aa8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 8005aac:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8005ab0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8005ab4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8005ab8:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 8005abc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 8005ac0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8005ac4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8005ac8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8005acc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8005ad0:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 8005ad4:	9310      	str	r3, [sp, #64]	; 0x40
 8005ad6:	9211      	str	r2, [sp, #68]	; 0x44
 8005ad8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8005adc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8005ae0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8005ae4:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8005ae8:	9215      	str	r2, [sp, #84]	; 0x54
 8005aea:	2306      	movs	r3, #6
 8005aec:	911f      	str	r1, [sp, #124]	; 0x7c
 8005aee:	227c      	movs	r2, #124	; 0x7c
 8005af0:	a901      	add	r1, sp, #4
 8005af2:	4638      	mov	r0, r7
 8005af4:	f8cd 8014 	str.w	r8, [sp, #20]
 8005af8:	9314      	str	r3, [sp, #80]	; 0x50
 8005afa:	951e      	str	r5, [sp, #120]	; 0x78
 8005afc:	f003 f9ff 	bl	8008efe <memcpy>

    return ( r.n_nodes>0 ) ? true : false;
 8005b00:	1c28      	adds	r0, r5, #0
 8005b02:	bf18      	it	ne
 8005b04:	2001      	movne	r0, #1
  }
  
  return false;
}
 8005b06:	b020      	add	sp, #128	; 0x80
 8005b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    AI_FOR_EACH_NODE_DO(node, net_ctx->input_node)
 8005b0c:	6893      	ldr	r3, [r2, #8]
 8005b0e:	3501      	adds	r5, #1
 8005b10:	429a      	cmp	r2, r3
 8005b12:	bf14      	ite	ne
 8005b14:	461a      	movne	r2, r3
 8005b16:	2200      	moveq	r2, #0
 8005b18:	e7ae      	b.n	8005a78 <ai_network_get_info+0x4c>
  return false;
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	e7f3      	b.n	8005b06 <ai_network_get_info+0xda>
 8005b1e:	e7f2      	b.n	8005b06 <ai_network_get_info+0xda>
 8005b20:	080103b4 	.word	0x080103b4
 8005b24:	080103bc 	.word	0x080103bc
 8005b28:	080103dd 	.word	0x080103dd
 8005b2c:	080103f6 	.word	0x080103f6
 8005b30:	0005312e 	.word	0x0005312e
 8005b34:	0801040b 	.word	0x0801040b

08005b38 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8005b38:	b508      	push	{r3, lr}
  return ai_platform_network_get_error(network);
 8005b3a:	f7fa fc65 	bl	8000408 <ai_platform_network_get_error>
}
 8005b3e:	bd08      	pop	{r3, pc}

08005b40 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005b40:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8005b42:	2300      	movs	r3, #0
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	2301      	movs	r3, #1
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	4a03      	ldr	r2, [pc, #12]	; (8005b58 <ai_network_create+0x18>)
 8005b4c:	f7fa fc84 	bl	8000458 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005b50:	b003      	add	sp, #12
 8005b52:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b56:	bf00      	nop
 8005b58:	200004d4 	.word	0x200004d4

08005b5c <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8005b5c:	f7fa bcba 	b.w	80004d4 <ai_platform_network_destroy>

08005b60 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005b60:	b510      	push	{r4, lr}
 8005b62:	460c      	mov	r4, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005b64:	f7fa fcd5 	bl	8000512 <ai_platform_network_init>
  if ( !net_ctx ) return false;
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d06c      	beq.n	8005c46 <ai_network_init+0xe6>
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b6c:	4a36      	ldr	r2, [pc, #216]	; (8005c48 <ai_network_init+0xe8>)
 8005b6e:	68e3      	ldr	r3, [r4, #12]
 8005b70:	6811      	ldr	r1, [r2, #0]
  conv2d_47_weights_array.data = weights + 0;
 8005b72:	6093      	str	r3, [r2, #8]
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b74:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005b78:	6011      	str	r1, [r2, #0]
  conv2d_47_weights_array.data_start = weights + 0;
 8005b7a:	60d3      	str	r3, [r2, #12]
  conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b7c:	4a33      	ldr	r2, [pc, #204]	; (8005c4c <ai_network_init+0xec>)
 8005b7e:	6811      	ldr	r1, [r2, #0]
 8005b80:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005b84:	6011      	str	r1, [r2, #0]
  conv2d_47_bias_array.data = weights + 144;
 8005b86:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8005b8a:	6091      	str	r1, [r2, #8]
  conv2d_47_bias_array.data_start = weights + 144;
 8005b8c:	60d1      	str	r1, [r2, #12]
  conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b8e:	4a30      	ldr	r2, [pc, #192]	; (8005c50 <ai_network_init+0xf0>)
 8005b90:	6811      	ldr	r1, [r2, #0]
 8005b92:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005b96:	6011      	str	r1, [r2, #0]
  conv2d_48_weights_array.data = weights + 160;
 8005b98:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8005b9c:	6091      	str	r1, [r2, #8]
  conv2d_48_weights_array.data_start = weights + 160;
 8005b9e:	60d1      	str	r1, [r2, #12]
  conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ba0:	4a2c      	ldr	r2, [pc, #176]	; (8005c54 <ai_network_init+0xf4>)
 8005ba2:	6811      	ldr	r1, [r2, #0]
 8005ba4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005ba8:	6011      	str	r1, [r2, #0]
  conv2d_48_bias_array.data = weights + 1312;
 8005baa:	f503 61a4 	add.w	r1, r3, #1312	; 0x520
 8005bae:	6091      	str	r1, [r2, #8]
  conv2d_48_bias_array.data_start = weights + 1312;
 8005bb0:	60d1      	str	r1, [r2, #12]
  conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bb2:	4a29      	ldr	r2, [pc, #164]	; (8005c58 <ai_network_init+0xf8>)
 8005bb4:	6811      	ldr	r1, [r2, #0]
 8005bb6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005bba:	6011      	str	r1, [r2, #0]
  conv2d_49_weights_array.data = weights + 1344;
 8005bbc:	f503 61a8 	add.w	r1, r3, #1344	; 0x540
 8005bc0:	6091      	str	r1, [r2, #8]
  conv2d_49_weights_array.data_start = weights + 1344;
 8005bc2:	60d1      	str	r1, [r2, #12]
  conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bc4:	4a25      	ldr	r2, [pc, #148]	; (8005c5c <ai_network_init+0xfc>)
 8005bc6:	6811      	ldr	r1, [r2, #0]
 8005bc8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005bcc:	6011      	str	r1, [r2, #0]
  conv2d_49_bias_array.data = weights + 5952;
 8005bce:	f503 51ba 	add.w	r1, r3, #5952	; 0x1740
 8005bd2:	6091      	str	r1, [r2, #8]
  conv2d_49_bias_array.data_start = weights + 5952;
 8005bd4:	60d1      	str	r1, [r2, #12]
  dense_19_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bd6:	4a22      	ldr	r2, [pc, #136]	; (8005c60 <ai_network_init+0x100>)
 8005bd8:	6811      	ldr	r1, [r2, #0]
 8005bda:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005bde:	6011      	str	r1, [r2, #0]
  dense_19_weights_array.data = weights + 6016;
 8005be0:	f503 51bc 	add.w	r1, r3, #6016	; 0x1780
 8005be4:	6091      	str	r1, [r2, #8]
  dense_19_weights_array.data_start = weights + 7744;
 8005be6:	f503 51f2 	add.w	r1, r3, #7744	; 0x1e40
 8005bea:	60d1      	str	r1, [r2, #12]
  dense_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bec:	4a1d      	ldr	r2, [pc, #116]	; (8005c64 <ai_network_init+0x104>)
 8005bee:	6811      	ldr	r1, [r2, #0]
  dense_19_bias_array.data = weights + 8768;
 8005bf0:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
  dense_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bf4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005bf8:	6011      	str	r1, [r2, #0]
  dense_19_bias_array.data = weights + 8768;
 8005bfa:	6093      	str	r3, [r2, #8]
  dense_19_bias_array.data_start = weights + 8768;
 8005bfc:	60d3      	str	r3, [r2, #12]
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8005bfe:	6882      	ldr	r2, [r0, #8]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005c00:	69e3      	ldr	r3, [r4, #28]
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8005c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c06:	6082      	str	r2, [r0, #8]
    input_0_output_array.data = NULL;
 8005c08:	4a17      	ldr	r2, [pc, #92]	; (8005c68 <ai_network_init+0x108>)
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	6091      	str	r1, [r2, #8]
  input_0_output_array.data_start = NULL;
 8005c0e:	60d1      	str	r1, [r2, #12]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005c10:	3303      	adds	r3, #3
  conv2d_47_output_array.data = activations + 0;
 8005c12:	4a16      	ldr	r2, [pc, #88]	; (8005c6c <ai_network_init+0x10c>)
  conv2d_48_output_array.data = activations + 9440;
 8005c14:	4916      	ldr	r1, [pc, #88]	; (8005c70 <ai_network_init+0x110>)
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005c16:	f023 0303 	bic.w	r3, r3, #3
  conv2d_47_output_array.data = activations + 0;
 8005c1a:	6093      	str	r3, [r2, #8]
  conv2d_47_output_array.data_start = activations + 0;
 8005c1c:	60d3      	str	r3, [r2, #12]
  conv2d_48_output_array.data = activations + 9440;
 8005c1e:	f503 5213 	add.w	r2, r3, #9408	; 0x24c0
 8005c22:	3220      	adds	r2, #32
 8005c24:	608a      	str	r2, [r1, #8]
  conv2d_48_output_array.data_start = activations + 9440;
 8005c26:	60ca      	str	r2, [r1, #12]
  conv2d_49_output_in_array.data = activations + 0;
 8005c28:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <ai_network_init+0x114>)
 8005c2a:	6093      	str	r3, [r2, #8]
  conv2d_49_output_in_array.data_start = activations + 0;
 8005c2c:	60d3      	str	r3, [r2, #12]
  conv2d_49_output_out_array.data = activations + 0;
 8005c2e:	4a12      	ldr	r2, [pc, #72]	; (8005c78 <ai_network_init+0x118>)
 8005c30:	6093      	str	r3, [r2, #8]
  conv2d_49_output_out_array.data_start = activations + 0;
 8005c32:	60d3      	str	r3, [r2, #12]
  dense_19_output_array.data = activations + 2304;
 8005c34:	4a11      	ldr	r2, [pc, #68]	; (8005c7c <ai_network_init+0x11c>)
 8005c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3a:	6093      	str	r3, [r2, #8]
  dense_19_output_array.data_start = activations + 2304;
 8005c3c:	60d3      	str	r3, [r2, #12]
  dense_19_nl_output_array.data = activations + 2304;
 8005c3e:	4a10      	ldr	r2, [pc, #64]	; (8005c80 <ai_network_init+0x120>)

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, &params->params);
  ok &= network_configure_activations(net_ctx, &params->activations);
  
  return ok;
 8005c40:	2001      	movs	r0, #1
  dense_19_nl_output_array.data = activations + 2304;
 8005c42:	6093      	str	r3, [r2, #8]
  dense_19_nl_output_array.data_start = activations + 2304;
 8005c44:	60d3      	str	r3, [r2, #12]
}
 8005c46:	bd10      	pop	{r4, pc}
 8005c48:	200001b0 	.word	0x200001b0
 8005c4c:	200000f4 	.word	0x200000f4
 8005c50:	200002a0 	.word	0x200002a0
 8005c54:	200001e4 	.word	0x200001e4
 8005c58:	200003c4 	.word	0x200003c4
 8005c5c:	200002d4 	.word	0x200002d4
 8005c60:	200004c4 	.word	0x200004c4
 8005c64:	200003f8 	.word	0x200003f8
 8005c68:	20000540 	.word	0x20000540
 8005c6c:	2000017c 	.word	0x2000017c
 8005c70:	2000026c 	.word	0x2000026c
 8005c74:	2000035c 	.word	0x2000035c
 8005c78:	20000390 	.word	0x20000390
 8005c7c:	20000490 	.word	0x20000490
 8005c80:	2000045c 	.word	0x2000045c

08005c84 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8005c84:	f7fa bc90 	b.w	80005a8 <ai_platform_network_process>

08005c88 <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f7fa bc8d 	b.w	80005a8 <ai_platform_network_process>
	...

08005c90 <normalize>:
ai_float* output_;
ai_float normalized_data[AI_MNETWORK_IN_1_SIZE];
ai_float feature[AI_MNETWORK_OUT_1_SIZE];

// Standard normalization
void normalize(ai_float *in_data, ai_float *normalized_data, int len) {
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	ed2d 8b04 	vpush	{d8-d9}

  float mean = 0.0;
 8005c98:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8005d54 <normalize+0xc4>
void normalize(ai_float *in_data, ai_float *normalized_data, int len) {
 8005c9c:	4615      	mov	r5, r2
 8005c9e:	460e      	mov	r6, r1
 8005ca0:	4607      	mov	r7, r0
  float std = 0.0;

  // Sum and mean
  for (int i = 0; i < len; i++) {
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	42ab      	cmp	r3, r5
 8005ca8:	db24      	blt.n	8005cf4 <normalize+0x64>
    mean += in_data[i];
  }
  mean = mean / len;
 8005caa:	ee07 5a10 	vmov	s14, r5
 8005cae:	eeb8 9ac7 	vcvt.f32.s32	s18, s14
  float std = 0.0;
 8005cb2:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8005d54 <normalize+0xc4>
  mean = mean / len;
 8005cb6:	eec7 8a89 	vdiv.f32	s17, s15, s18

  // Standard deviation
  for (int i = 0; i < len; i++) {
 8005cba:	4604      	mov	r4, r0
 8005cbc:	f04f 0a00 	mov.w	sl, #0
 8005cc0:	45aa      	cmp	sl, r5
 8005cc2:	db1d      	blt.n	8005d00 <normalize+0x70>
    std += pow(in_data[i] - mean, 2);
  }
  std = sqrt(std / len);
 8005cc4:	eec8 7a09 	vdiv.f32	s15, s16, s18
 8005cc8:	ee17 0a90 	vmov	r0, s15
 8005ccc:	f7fc ff2c 	bl	8002b28 <__aeabi_f2d>
 8005cd0:	ec41 0b10 	vmov	d0, r0, r1
 8005cd4:	f006 f81e 	bl	800bd14 <sqrt>
 8005cd8:	ec51 0b10 	vmov	r0, r1, d0
 8005cdc:	f7fd fa50 	bl	8003180 <__aeabi_d2f>
 8005ce0:	ee07 0a10 	vmov	s14, r0
 8005ce4:	4631      	mov	r1, r6

  // Normalization
  for (int i = 0; i < len; i++) {
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	42ab      	cmp	r3, r5
 8005cea:	db28      	blt.n	8005d3e <normalize+0xae>
    normalized_data[i] = (in_data[i] - mean) / std;
  }

}
 8005cec:	ecbd 8b04 	vpop	{d8-d9}
 8005cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mean += in_data[i];
 8005cf4:	ecb2 7a01 	vldmia	r2!, {s14}
  for (int i = 0; i < len; i++) {
 8005cf8:	3301      	adds	r3, #1
    mean += in_data[i];
 8005cfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cfe:	e7d2      	b.n	8005ca6 <normalize+0x16>
    std += pow(in_data[i] - mean, 2);
 8005d00:	ecf4 7a01 	vldmia	r4!, {s15}
 8005d04:	ee77 7ae8 	vsub.f32	s15, s15, s17
  for (int i = 0; i < len; i++) {
 8005d08:	f10a 0a01 	add.w	sl, sl, #1
    std += pow(in_data[i] - mean, 2);
 8005d0c:	ee17 0a90 	vmov	r0, s15
 8005d10:	f7fc ff0a 	bl	8002b28 <__aeabi_f2d>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	f7fc ff5a 	bl	8002bd0 <__aeabi_dmul>
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	ee18 0a10 	vmov	r0, s16
 8005d22:	4689      	mov	r9, r1
 8005d24:	f7fc ff00 	bl	8002b28 <__aeabi_f2d>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4640      	mov	r0, r8
 8005d2e:	4649      	mov	r1, r9
 8005d30:	f7fc fd9c 	bl	800286c <__adddf3>
 8005d34:	f7fd fa24 	bl	8003180 <__aeabi_d2f>
 8005d38:	ee08 0a10 	vmov	s16, r0
 8005d3c:	e7c0      	b.n	8005cc0 <normalize+0x30>
    normalized_data[i] = (in_data[i] - mean) / std;
 8005d3e:	ecf7 7a01 	vldmia	r7!, {s15}
 8005d42:	ee77 7ae8 	vsub.f32	s15, s15, s17
  for (int i = 0; i < len; i++) {
 8005d46:	3301      	adds	r3, #1
    normalized_data[i] = (in_data[i] - mean) / std;
 8005d48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d4c:	ece1 6a01 	vstmia	r1!, {s13}
 8005d50:	e7ca      	b.n	8005ce8 <normalize+0x58>
 8005d52:	bf00      	nop
 8005d54:	00000000 	.word	0x00000000

08005d58 <ai_init>:

// Initialize the neural network
int ai_init(void) {
 8005d58:	b530      	push	{r4, r5, lr}

  ai_error err;
  const char *nn_name;
  const ai_network_params params = {
 8005d5a:	4d16      	ldr	r5, [pc, #88]	; (8005db4 <ai_init+0x5c>)
 8005d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
int ai_init(void) {
 8005d5e:	b089      	sub	sp, #36	; 0x24
  const ai_network_params params = {
 8005d60:	466c      	mov	r4, sp
 8005d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AI_BUFFER_NULL(NULL),
  AI_BUFFER_NULL(activations) };

  // Find a network
  nn_name = ai_mnetwork_find(NULL, 0);
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	4608      	mov	r0, r1
 8005d70:	f000 f8f2 	bl	8005f58 <ai_mnetwork_find>
  if (nn_name) {
 8005d74:	4604      	mov	r4, r0
 8005d76:	b168      	cbz	r0, 8005d94 <ai_init+0x3c>
    printf("E: ai_mnetwork_find\n");
    return -1;
  }

  // Create the network
  err = ai_mnetwork_create(nn_name, &handle, NULL);
 8005d78:	4d0f      	ldr	r5, [pc, #60]	; (8005db8 <ai_init+0x60>)
    printf("\nFound network: \"%s\"\n", nn_name);
 8005d7a:	4601      	mov	r1, r0
 8005d7c:	480f      	ldr	r0, [pc, #60]	; (8005dbc <ai_init+0x64>)
 8005d7e:	f003 fda9 	bl	80098d4 <iprintf>
  err = ai_mnetwork_create(nn_name, &handle, NULL);
 8005d82:	4620      	mov	r0, r4
 8005d84:	2200      	movs	r2, #0
 8005d86:	4629      	mov	r1, r5
 8005d88:	f000 f8f8 	bl	8005f7c <ai_mnetwork_create>
  if (err.type) {
 8005d8c:	b2c4      	uxtb	r4, r0
 8005d8e:	b144      	cbz	r4, 8005da2 <ai_init+0x4a>
    printf("E: ai_mnetwork_create\n");
 8005d90:	480b      	ldr	r0, [pc, #44]	; (8005dc0 <ai_init+0x68>)
 8005d92:	e000      	b.n	8005d96 <ai_init+0x3e>
    printf("E: ai_mnetwork_find\n");
 8005d94:	480b      	ldr	r0, [pc, #44]	; (8005dc4 <ai_init+0x6c>)
    return -1;
  }

  // Initialize the network
  if (!ai_mnetwork_init(handle, &params)) {
    printf("E: ai_mnetwork_init\n");
 8005d96:	f003 fe25 	bl	80099e4 <puts>
    return -1;
 8005d9a:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return 0;
}
 8005d9e:	b009      	add	sp, #36	; 0x24
 8005da0:	bd30      	pop	{r4, r5, pc}
  if (!ai_mnetwork_init(handle, &params)) {
 8005da2:	4669      	mov	r1, sp
 8005da4:	6828      	ldr	r0, [r5, #0]
 8005da6:	f000 f917 	bl	8005fd8 <ai_mnetwork_init>
 8005daa:	b908      	cbnz	r0, 8005db0 <ai_init+0x58>
    printf("E: ai_mnetwork_init\n");
 8005dac:	4806      	ldr	r0, [pc, #24]	; (8005dc8 <ai_init+0x70>)
 8005dae:	e7f2      	b.n	8005d96 <ai_init+0x3e>
  return 0;
 8005db0:	4620      	mov	r0, r4
 8005db2:	e7f4      	b.n	8005d9e <ai_init+0x46>
 8005db4:	0800e0b0 	.word	0x0800e0b0
 8005db8:	2000cf94 	.word	0x2000cf94
 8005dbc:	08010428 	.word	0x08010428
 8005dc0:	08010452 	.word	0x08010452
 8005dc4:	0801043e 	.word	0x0801043e
 8005dc8:	08010468 	.word	0x08010468

08005dcc <ai_infer>:

// Run inference
void ai_infer(ai_float *input_data, ai_float *output_data) {
 8005dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  // Normalize the feature data (DC is discarded)
  normalize(input_data, normalized_data, AI_MNETWORK_IN_1_SIZE);
 8005dd0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8005e38 <ai_infer+0x6c>

  // Input parameters for running inference
  ai_input[0] = report.inputs;
 8005dd4:	4c14      	ldr	r4, [pc, #80]	; (8005e28 <ai_infer+0x5c>)
 8005dd6:	4e15      	ldr	r6, [pc, #84]	; (8005e2c <ai_infer+0x60>)
  ai_output[0] = report.outputs;
 8005dd8:	4d15      	ldr	r5, [pc, #84]	; (8005e30 <ai_infer+0x64>)
void ai_infer(ai_float *input_data, ai_float *output_data) {
 8005dda:	460f      	mov	r7, r1
  normalize(input_data, normalized_data, AI_MNETWORK_IN_1_SIZE);
 8005ddc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005de0:	4641      	mov	r1, r8
 8005de2:	f7ff ff55 	bl	8005c90 <normalize>
  ai_input[0] = report.inputs;
 8005de6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  ai_output[0] = report.outputs;
 8005dea:	3410      	adds	r4, #16
  ai_input[0] = report.inputs;
 8005dec:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  ai_output[0] = report.outputs;
 8005df0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005df4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ai_input[0].n_batches = 1;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	8073      	strh	r3, [r6, #2]
  ai_input[0].data = AI_HANDLE_PTR(normalized_data);
  ai_output[0].n_batches = 1;
 8005dfc:	806b      	strh	r3, [r5, #2]
  ai_output[0].data = AI_HANDLE_PTR(output_data);

  // Run inference
  ai_mnetwork_run(handle, &ai_input[0], &ai_output[0]);
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <ai_infer+0x68>)
  ai_input[0].data = AI_HANDLE_PTR(normalized_data);
 8005e00:	f8c6 800c 	str.w	r8, [r6, #12]
  ai_mnetwork_run(handle, &ai_input[0], &ai_output[0]);
 8005e04:	462a      	mov	r2, r5
 8005e06:	6818      	ldr	r0, [r3, #0]
  ai_output[0].data = AI_HANDLE_PTR(output_data);
 8005e08:	60ef      	str	r7, [r5, #12]
  ai_mnetwork_run(handle, &ai_input[0], &ai_output[0]);
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	f000 f915 	bl	800603a <ai_mnetwork_run>

  // Copy inference result
  for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
    output_data[i] = ((ai_float *) (ai_output[0].data))[i];
 8005e10:	68eb      	ldr	r3, [r5, #12]
 8005e12:	f103 0218 	add.w	r2, r3, #24
 8005e16:	f853 1b04 	ldr.w	r1, [r3], #4
 8005e1a:	f847 1b04 	str.w	r1, [r7], #4
  for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d1f9      	bne.n	8005e16 <ai_infer+0x4a>
  }
}
 8005e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e26:	bf00      	nop
 8005e28:	2000cfcc 	.word	0x2000cfcc
 8005e2c:	2000cf58 	.word	0x2000cf58
 8005e30:	2000cf68 	.word	0x2000cf68
 8005e34:	2000cf94 	.word	0x2000cf94
 8005e38:	2000d014 	.word	0x2000d014

08005e3c <ai_mnetwork_handle>:
    return false;
}

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 8005e3c:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <ai_mnetwork_handle+0x18>)
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8005e3e:	b120      	cbz	r0, 8005e4a <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8005e40:	4298      	cmp	r0, r3
 8005e42:	bf0c      	ite	eq
 8005e44:	4618      	moveq	r0, r3
 8005e46:	2000      	movne	r0, #0
 8005e48:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8005e4a:	681a      	ldr	r2, [r3, #0]
            return &gnetworks[i];
 8005e4c:	2a00      	cmp	r2, #0
 8005e4e:	bf08      	it	eq
 8005e50:	4618      	moveq	r0, r3
}
 8005e52:	4770      	bx	lr
 8005e54:	20003a9c 	.word	0x20003a9c

08005e58 <ai_mnetwork_is_valid.isra.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8005e58:	b570      	push	{r4, r5, r6, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	b190      	cbz	r0, 8005e84 <ai_mnetwork_is_valid.isra.0+0x2c>
 8005e5e:	680d      	ldr	r5, [r1, #0]
 8005e60:	4628      	mov	r0, r5
 8005e62:	f7fc fca5 	bl	80027b0 <strlen>
 8005e66:	4606      	mov	r6, r0
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f7fc fca1 	bl	80027b0 <strlen>
 8005e6e:	4286      	cmp	r6, r0
 8005e70:	d108      	bne.n	8005e84 <ai_mnetwork_is_valid.isra.0+0x2c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8005e72:	4632      	mov	r2, r6
 8005e74:	4621      	mov	r1, r4
 8005e76:	4628      	mov	r0, r5
 8005e78:	f003 fdf6 	bl	8009a68 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8005e7c:	fab0 f080 	clz	r0, r0
 8005e80:	0940      	lsrs	r0, r0, #5
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8005e84:	2000      	movs	r0, #0
}
 8005e86:	bd70      	pop	{r4, r5, r6, pc}

08005e88 <MX_X_CUBE_AI_Init>:
{
 8005e88:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8005e8a:	f001 fab5 	bl	80073f8 <MX_USART2_UART_Init>
}
 8005e8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ai_init();
 8005e92:	f7ff bf61 	b.w	8005d58 <ai_init>
	...

08005e98 <MX_X_CUBE_AI_Process>:
{
 8005e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9a:	ed2d 8b02 	vpush	{d8}
 8005e9e:	f5ad 5d22 	sub.w	sp, sp, #10368	; 0x2880
 8005ea2:	b085      	sub	sp, #20
  char class_labels[AI_NETWORK_OUT_1_SIZE][20] = {
 8005ea4:	2278      	movs	r2, #120	; 0x78
 8005ea6:	4926      	ldr	r1, [pc, #152]	; (8005f40 <MX_X_CUBE_AI_Process+0xa8>)
 8005ea8:	a806      	add	r0, sp, #24
 8005eaa:	f003 f828 	bl	8008efe <memcpy>
  ai_float out_data[AI_NETWORK_OUT_1_SIZE] = { 0.0 };
 8005eae:	2218      	movs	r2, #24
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	4668      	mov	r0, sp
 8005eb4:	f003 f82e 	bl	8008f14 <memset>
  if ((pos >= 64) && (pos % 64) == 0) {
 8005eb8:	4b22      	ldr	r3, [pc, #136]	; (8005f44 <MX_X_CUBE_AI_Process+0xac>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b3f      	cmp	r3, #63	; 0x3f
 8005ebe:	dd39      	ble.n	8005f34 <MX_X_CUBE_AI_Process+0x9c>
 8005ec0:	f013 023f 	ands.w	r2, r3, #63	; 0x3f
 8005ec4:	d136      	bne.n	8005f34 <MX_X_CUBE_AI_Process+0x9c>
    window_start_idx = (pos - 64) * NUM_FILTERS;
 8005ec6:	2128      	movs	r1, #40	; 0x28
 8005ec8:	3b40      	subs	r3, #64	; 0x40
 8005eca:	4e1f      	ldr	r6, [pc, #124]	; (8005f48 <MX_X_CUBE_AI_Process+0xb0>)
 8005ecc:	434b      	muls	r3, r1
 8005ece:	27a0      	movs	r7, #160	; 0xa0
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	a924      	add	r1, sp, #144	; 0x90
 8005ed4:	fb00 3402 	mla	r4, r0, r2, r3
 8005ed8:	fb07 1502 	mla	r5, r7, r2, r1
 8005edc:	4434      	add	r4, r6
{
 8005ede:	2100      	movs	r1, #0
        in_data[j*NUM_FILTERS+i] = (ai_float)(mfsc_buffer[window_start_idx+j*NUM_FILTERS+i]);
 8005ee0:	f914 e001 	ldrsb.w	lr, [r4, r1]
 8005ee4:	ee07 ea90 	vmov	s15, lr
      for (int i=0;i<NUM_FILTERS;i++) {
 8005ee8:	3101      	adds	r1, #1
        in_data[j*NUM_FILTERS+i] = (ai_float)(mfsc_buffer[window_start_idx+j*NUM_FILTERS+i]);
 8005eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for (int i=0;i<NUM_FILTERS;i++) {
 8005eee:	2928      	cmp	r1, #40	; 0x28
        in_data[j*NUM_FILTERS+i] = (ai_float)(mfsc_buffer[window_start_idx+j*NUM_FILTERS+i]);
 8005ef0:	ece5 7a01 	vstmia	r5!, {s15}
      for (int i=0;i<NUM_FILTERS;i++) {
 8005ef4:	d1f4      	bne.n	8005ee0 <MX_X_CUBE_AI_Process+0x48>
    for (int j=0;j<64;j++) {
 8005ef6:	3201      	adds	r2, #1
 8005ef8:	2a40      	cmp	r2, #64	; 0x40
 8005efa:	d1ea      	bne.n	8005ed2 <MX_X_CUBE_AI_Process+0x3a>
    ai_infer(in_data, out_data);
 8005efc:	4669      	mov	r1, sp
 8005efe:	a824      	add	r0, sp, #144	; 0x90
 8005f00:	f7ff ff64 	bl	8005dcc <ai_infer>
    printf("\n--- Inference ---\n");
 8005f04:	4811      	ldr	r0, [pc, #68]	; (8005f4c <MX_X_CUBE_AI_Process+0xb4>)
      printf(" %-12s%3d%%\n", class_labels[i], (int) (out_data[i] * 100));
 8005f06:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8005f50 <MX_X_CUBE_AI_Process+0xb8>
 8005f0a:	4e12      	ldr	r6, [pc, #72]	; (8005f54 <MX_X_CUBE_AI_Process+0xbc>)
    printf("\n--- Inference ---\n");
 8005f0c:	f003 fd6a 	bl	80099e4 <puts>
 8005f10:	466c      	mov	r4, sp
 8005f12:	2500      	movs	r5, #0
      printf(" %-12s%3d%%\n", class_labels[i], (int) (out_data[i] * 100));
 8005f14:	ecf4 7a01 	vldmia	r4!, {s15}
 8005f18:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005f1c:	ab06      	add	r3, sp, #24
 8005f1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f22:	1959      	adds	r1, r3, r5
 8005f24:	ee17 2a90 	vmov	r2, s15
 8005f28:	4630      	mov	r0, r6
 8005f2a:	3514      	adds	r5, #20
 8005f2c:	f003 fcd2 	bl	80098d4 <iprintf>
    for (int i=0; i<AI_NETWORK_OUT_1_SIZE; i++) {
 8005f30:	2d78      	cmp	r5, #120	; 0x78
 8005f32:	d1ef      	bne.n	8005f14 <MX_X_CUBE_AI_Process+0x7c>
}
 8005f34:	f50d 5d22 	add.w	sp, sp, #10368	; 0x2880
 8005f38:	b005      	add	sp, #20
 8005f3a:	ecbd 8b02 	vpop	{d8}
 8005f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f40:	0800e0d0 	.word	0x0800e0d0
 8005f44:	200090c0 	.word	0x200090c0
 8005f48:	2000717c 	.word	0x2000717c
 8005f4c:	0801047c 	.word	0x0801047c
 8005f50:	42c80000 	.word	0x42c80000
 8005f54:	0801048f 	.word	0x0801048f

08005f58 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8005f58:	b510      	push	{r4, lr}
 8005f5a:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8005f5c:	4905      	ldr	r1, [pc, #20]	; (8005f74 <ai_mnetwork_find+0x1c>)
 8005f5e:	f7ff ff7b 	bl	8005e58 <ai_mnetwork_is_valid.isra.0>
 8005f62:	b920      	cbnz	r0, 8005f6e <ai_mnetwork_find+0x16>
            return entry->name;
        else {
            if (!idx--)
 8005f64:	2c00      	cmp	r4, #0
                return entry->name;
        }
    }
    return NULL;
 8005f66:	4804      	ldr	r0, [pc, #16]	; (8005f78 <ai_mnetwork_find+0x20>)
 8005f68:	bf18      	it	ne
 8005f6a:	2000      	movne	r0, #0
 8005f6c:	bd10      	pop	{r4, pc}
                return entry->name;
 8005f6e:	4802      	ldr	r0, [pc, #8]	; (8005f78 <ai_mnetwork_find+0x20>)
}
 8005f70:	bd10      	pop	{r4, pc}
 8005f72:	bf00      	nop
 8005f74:	0801049c 	.word	0x0801049c
 8005f78:	080103b4 	.word	0x080103b4

08005f7c <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	4607      	mov	r7, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8005f80:	2000      	movs	r0, #0
{
 8005f82:	460d      	mov	r5, r1
 8005f84:	4616      	mov	r6, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8005f86:	f7ff ff59 	bl	8005e3c <ai_mnetwork_handle>

    if (!inst) {
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	b1c8      	cbz	r0, 8005fc2 <ai_mnetwork_create+0x46>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8005f8e:	4911      	ldr	r1, [pc, #68]	; (8005fd4 <ai_mnetwork_create+0x58>)
 8005f90:	4638      	mov	r0, r7
 8005f92:	f7ff ff61 	bl	8005e58 <ai_mnetwork_is_valid.isra.0>
 8005f96:	b1d0      	cbz	r0, 8005fce <ai_mnetwork_create+0x52>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f7ff fdd0 	bl	8005b40 <ai_network_create>
 8005fa0:	b2c2      	uxtb	r2, r0
 8005fa2:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8005fa6:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8005faa:	d104      	bne.n	8005fb6 <ai_mnetwork_create+0x3a>
        inst->entry = found;
 8005fac:	4909      	ldr	r1, [pc, #36]	; (8005fd4 <ai_mnetwork_create+0x58>)
 8005fae:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8005fb0:	6829      	ldr	r1, [r5, #0]
 8005fb2:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8005fb4:	602c      	str	r4, [r5, #0]
    }

    return err;
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	f362 0007 	bfi	r0, r2, #0, #8
        return err;
 8005fbc:	f363 201f 	bfi	r0, r3, #8, #24
 8005fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err;
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	2331      	movs	r3, #49	; 0x31
        return err;
 8005fc6:	f363 0007 	bfi	r0, r3, #0, #8
 8005fca:	2310      	movs	r3, #16
 8005fcc:	e7f6      	b.n	8005fbc <ai_mnetwork_create+0x40>
 8005fce:	2000      	movs	r0, #0
 8005fd0:	2314      	movs	r3, #20
 8005fd2:	e7f8      	b.n	8005fc6 <ai_mnetwork_create+0x4a>
 8005fd4:	0801049c 	.word	0x0801049c

08005fd8 <ai_mnetwork_init>:
        return err;
}

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 8005fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fda:	b089      	sub	sp, #36	; 0x24
 8005fdc:	460f      	mov	r7, r1
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8005fde:	f7ff ff2d 	bl	8005e3c <ai_mnetwork_handle>
    if (inn) {
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	b340      	cbz	r0, 8006038 <ai_mnetwork_init+0x60>
        par = inn->entry->params;
 8005fe6:	f8d0 e000 	ldr.w	lr, [r0]
 8005fea:	f10e 0504 	add.w	r5, lr, #4
 8005fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ff0:	466c      	mov	r4, sp
 8005ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ff4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005ff8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 8005ffc:	8a7b      	ldrh	r3, [r7, #18]
 8005ffe:	466c      	mov	r4, sp
 8006000:	b193      	cbz	r3, 8006028 <ai_mnetwork_init+0x50>
            par.activations = params->activations;
 8006002:	f107 0310 	add.w	r3, r7, #16
 8006006:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006008:	ad08      	add	r5, sp, #32
 800600a:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
        else
            par.activations.data = params->activations.data;
        if (params->params.n_batches)
 800600e:	887b      	ldrh	r3, [r7, #2]
 8006010:	b16b      	cbz	r3, 800602e <ai_mnetwork_init+0x56>
            par.params = params->params;
 8006012:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8006016:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
        return inn->entry->ai_init(inn->handle, &par);
 800601a:	6833      	ldr	r3, [r6, #0]
 800601c:	6870      	ldr	r0, [r6, #4]
 800601e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006020:	4621      	mov	r1, r4
 8006022:	4798      	blx	r3
    }
    else
        return false;
}
 8006024:	b009      	add	sp, #36	; 0x24
 8006026:	bdf0      	pop	{r4, r5, r6, r7, pc}
            par.activations.data = params->activations.data;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	9307      	str	r3, [sp, #28]
 800602c:	e7ef      	b.n	800600e <ai_mnetwork_init+0x36>
            par.params.data = inn->entry->ai_data_weights_get_default();
 800602e:	f8de 3028 	ldr.w	r3, [lr, #40]	; 0x28
 8006032:	4798      	blx	r3
 8006034:	9003      	str	r0, [sp, #12]
 8006036:	e7f0      	b.n	800601a <ai_mnetwork_init+0x42>
 8006038:	e7f4      	b.n	8006024 <ai_mnetwork_init+0x4c>

0800603a <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 800603a:	b570      	push	{r4, r5, r6, lr}
 800603c:	4615      	mov	r5, r2
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800603e:	f7ff fefd 	bl	8005e3c <ai_mnetwork_handle>
    if (inn)
 8006042:	b138      	cbz	r0, 8006054 <ai_mnetwork_run+0x1a>
        return inn->entry->ai_run(inn->handle, input, output);
 8006044:	6802      	ldr	r2, [r0, #0]
 8006046:	6840      	ldr	r0, [r0, #4]
 8006048:	6c14      	ldr	r4, [r2, #64]	; 0x40
 800604a:	462a      	mov	r2, r5
 800604c:	4623      	mov	r3, r4
    else
        return 0;
}
 800604e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8006052:	4718      	bx	r3
}
 8006054:	bd70      	pop	{r4, r5, r6, pc}
	...

08006058 <MX_CRC_Init>:

/* CRC init function */
void MX_CRC_Init(void)
{

  hcrc.Instance = CRC;
 8006058:	4809      	ldr	r0, [pc, #36]	; (8006080 <MX_CRC_Init+0x28>)
{
 800605a:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800605c:	4b09      	ldr	r3, [pc, #36]	; (8006084 <MX_CRC_Init+0x2c>)
 800605e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8006060:	2300      	movs	r3, #0
 8006062:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8006064:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8006066:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8006068:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800606a:	2301      	movs	r3, #1
 800606c:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800606e:	f7fd fb4b 	bl	8003708 <HAL_CRC_Init>
 8006072:	b118      	cbz	r0, 800607c <MX_CRC_Init+0x24>
  {
    Error_Handler();
  }

}
 8006074:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006078:	f001 b91c 	b.w	80072b4 <Error_Handler>
 800607c:	bd08      	pop	{r3, pc}
 800607e:	bf00      	nop
 8006080:	2000f814 	.word	0x2000f814
 8006084:	40023000 	.word	0x40023000

08006088 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8006088:	6802      	ldr	r2, [r0, #0]
 800608a:	4b08      	ldr	r3, [pc, #32]	; (80060ac <HAL_CRC_MspInit+0x24>)
 800608c:	429a      	cmp	r2, r3
{
 800608e:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8006090:	d10a      	bne.n	80060a8 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006092:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8006096:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006098:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800609c:	649a      	str	r2, [r3, #72]	; 0x48
 800609e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80060a8:	b002      	add	sp, #8
 80060aa:	4770      	bx	lr
 80060ac:	40023000 	.word	0x40023000

080060b0 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80060b0:	b510      	push	{r4, lr}
 80060b2:	b08a      	sub	sp, #40	; 0x28
  DAC_ChannelConfTypeDef sConfig = {0};
 80060b4:	2224      	movs	r2, #36	; 0x24
 80060b6:	2100      	movs	r1, #0
 80060b8:	a801      	add	r0, sp, #4
 80060ba:	f002 ff2b 	bl	8008f14 <memset>

  /**DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80060be:	4811      	ldr	r0, [pc, #68]	; (8006104 <MX_DAC1_Init+0x54>)
 80060c0:	4b11      	ldr	r3, [pc, #68]	; (8006108 <MX_DAC1_Init+0x58>)
 80060c2:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80060c4:	f7fd fb7c 	bl	80037c0 <HAL_DAC_Init>
 80060c8:	b108      	cbz	r0, 80060ce <MX_DAC1_Init+0x1e>
  {
    Error_Handler();
 80060ca:	f001 f8f3 	bl	80072b4 <Error_Handler>
  }
  /**DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80060ce:	2400      	movs	r4, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80060d0:	2304      	movs	r3, #4
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80060d2:	4622      	mov	r2, r4
 80060d4:	eb0d 0103 	add.w	r1, sp, r3
 80060d8:	480a      	ldr	r0, [pc, #40]	; (8006104 <MX_DAC1_Init+0x54>)
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80060da:	9401      	str	r4, [sp, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80060dc:	9302      	str	r3, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80060de:	9403      	str	r4, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80060e0:	9404      	str	r4, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80060e2:	9405      	str	r4, [sp, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80060e4:	f7fd fc30 	bl	8003948 <HAL_DAC_ConfigChannel>
 80060e8:	b108      	cbz	r0, 80060ee <MX_DAC1_Init+0x3e>
  {
    Error_Handler();
 80060ea:	f001 f8e3 	bl	80072b4 <Error_Handler>
  }
  /**DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80060ee:	2210      	movs	r2, #16
 80060f0:	a901      	add	r1, sp, #4
 80060f2:	4804      	ldr	r0, [pc, #16]	; (8006104 <MX_DAC1_Init+0x54>)
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80060f4:	9404      	str	r4, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80060f6:	f7fd fc27 	bl	8003948 <HAL_DAC_ConfigChannel>
 80060fa:	b108      	cbz	r0, 8006100 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 80060fc:	f001 f8da 	bl	80072b4 <Error_Handler>
  }

}
 8006100:	b00a      	add	sp, #40	; 0x28
 8006102:	bd10      	pop	{r4, pc}
 8006104:	2000f838 	.word	0x2000f838
 8006108:	40007400 	.word	0x40007400

0800610c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800610c:	b530      	push	{r4, r5, lr}
 800610e:	4605      	mov	r5, r0
 8006110:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006112:	2214      	movs	r2, #20
 8006114:	2100      	movs	r1, #0
 8006116:	a803      	add	r0, sp, #12
 8006118:	f002 fefc 	bl	8008f14 <memset>
  if(dacHandle->Instance==DAC1)
 800611c:	682a      	ldr	r2, [r5, #0]
 800611e:	4b2e      	ldr	r3, [pc, #184]	; (80061d8 <HAL_DAC_MspInit+0xcc>)
 8006120:	429a      	cmp	r2, r3
 8006122:	d156      	bne.n	80061d2 <HAL_DAC_MspInit+0xc6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006124:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8006128:	4c2c      	ldr	r4, [pc, #176]	; (80061dc <HAL_DAC_MspInit+0xd0>)
    __HAL_RCC_DAC1_CLK_ENABLE();
 800612a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800612c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006130:	659a      	str	r2, [r3, #88]	; 0x58
 8006132:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006134:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8006138:	9201      	str	r2, [sp, #4]
 800613a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800613c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	64da      	str	r2, [r3, #76]	; 0x4c
 8006144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	9302      	str	r3, [sp, #8]
 800614c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800614e:	2330      	movs	r3, #48	; 0x30
 8006150:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006156:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006158:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800615a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800615c:	f7fd ff58 	bl	8004010 <HAL_GPIO_Init>
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006160:	2280      	movs	r2, #128	; 0x80
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006162:	4b1f      	ldr	r3, [pc, #124]	; (80061e0 <HAL_DAC_MspInit+0xd4>)
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006164:	6122      	str	r2, [r4, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006166:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800616a:	f04f 0c06 	mov.w	ip, #6
 800616e:	f04f 0e10 	mov.w	lr, #16
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006172:	6162      	str	r2, [r4, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006174:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006178:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800617c:	61a2      	str	r2, [r4, #24]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800617e:	2300      	movs	r3, #0
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8006180:	2220      	movs	r2, #32
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8006182:	4620      	mov	r0, r4
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006184:	60e3      	str	r3, [r4, #12]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8006186:	61e2      	str	r2, [r4, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006188:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800618a:	f7fd fe2f 	bl	8003dec <HAL_DMA_Init>
 800618e:	b108      	cbz	r0, 8006194 <HAL_DAC_MspInit+0x88>
    {
      Error_Handler();
 8006190:	f001 f890 	bl	80072b4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8006194:	60ac      	str	r4, [r5, #8]
 8006196:	62a5      	str	r5, [r4, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel5;
 8006198:	4c12      	ldr	r4, [pc, #72]	; (80061e4 <HAL_DAC_MspInit+0xd8>)
    hdma_dac_ch2.Init.Request = DMA_REQUEST_3;
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800619a:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <HAL_DAC_MspInit+0xdc>)
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800619c:	2280      	movs	r2, #128	; 0x80
 800619e:	6122      	str	r2, [r4, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80061a0:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061a4:	f04f 0c03 	mov.w	ip, #3
 80061a8:	f04f 0e10 	mov.w	lr, #16
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80061ac:	6162      	str	r2, [r4, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80061ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061b2:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80061b6:	61a2      	str	r2, [r4, #24]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80061b8:	2300      	movs	r3, #0
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 80061ba:	2220      	movs	r2, #32
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80061bc:	4620      	mov	r0, r4
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80061be:	60e3      	str	r3, [r4, #12]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 80061c0:	61e2      	str	r2, [r4, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80061c2:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80061c4:	f7fd fe12 	bl	8003dec <HAL_DMA_Init>
 80061c8:	b108      	cbz	r0, 80061ce <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 80061ca:	f001 f873 	bl	80072b4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 80061ce:	60ec      	str	r4, [r5, #12]
 80061d0:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80061d2:	b009      	add	sp, #36	; 0x24
 80061d4:	bd30      	pop	{r4, r5, pc}
 80061d6:	bf00      	nop
 80061d8:	40007400 	.word	0x40007400
 80061dc:	2000f84c 	.word	0x2000f84c
 80061e0:	40020030 	.word	0x40020030
 80061e4:	2000f894 	.word	0x2000f894
 80061e8:	40020458 	.word	0x40020458

080061ec <MX_DFSDM1_Init>:

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80061ec:	4836      	ldr	r0, [pc, #216]	; (80062c8 <MX_DFSDM1_Init+0xdc>)
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80061ee:	4937      	ldr	r1, [pc, #220]	; (80062cc <MX_DFSDM1_Init+0xe0>)
{
 80061f0:	b508      	push	{r3, lr}
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80061f2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e880 000a 	stmia.w	r0, {r1, r3}
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80061fc:	61c2      	str	r2, [r0, #28]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80061fe:	2301      	movs	r3, #1
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 128;
 8006200:	2280      	movs	r2, #128	; 0x80
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8006202:	7203      	strb	r3, [r0, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8006204:	7243      	strb	r3, [r0, #9]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 128;
 8006206:	6202      	str	r2, [r0, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8006208:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800620a:	f7fd fd0f 	bl	8003c2c <HAL_DFSDM_FilterInit>
 800620e:	b108      	cbz	r0, 8006214 <MX_DFSDM1_Init+0x28>
  {
    Error_Handler();
 8006210:	f001 f850 	bl	80072b4 <Error_Handler>
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8006214:	482e      	ldr	r0, [pc, #184]	; (80062d0 <MX_DFSDM1_Init+0xe4>)
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8006216:	4a2f      	ldr	r2, [pc, #188]	; (80062d4 <MX_DFSDM1_Init+0xe8>)
 8006218:	2300      	movs	r3, #0
 800621a:	e880 000c 	stmia.w	r0, {r2, r3}
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800621e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8006222:	2301      	movs	r3, #1
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8006224:	61c2      	str	r2, [r0, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 128;
 8006226:	2280      	movs	r2, #128	; 0x80
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8006228:	7203      	strb	r3, [r0, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 800622a:	7243      	strb	r3, [r0, #9]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 128;
 800622c:	6202      	str	r2, [r0, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 800622e:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8006230:	f7fd fcfc 	bl	8003c2c <HAL_DFSDM_FilterInit>
 8006234:	b108      	cbz	r0, 800623a <MX_DFSDM1_Init+0x4e>
  {
    Error_Handler();
 8006236:	f001 f83d 	bl	80072b4 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800623a:	4827      	ldr	r0, [pc, #156]	; (80062d8 <MX_DFSDM1_Init+0xec>)
 800623c:	4b27      	ldr	r3, [pc, #156]	; (80062dc <MX_DFSDM1_Init+0xf0>)
 800623e:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel2.Init.OutputClock.Divider = 32;
 8006240:	2120      	movs	r1, #32
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8006242:	2300      	movs	r3, #0
  hdfsdm1_channel2.Init.OutputClock.Divider = 32;
 8006244:	60c1      	str	r1, [r0, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8006246:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800624a:	2201      	movs	r2, #1
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800624c:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800624e:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8006250:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8006252:	6181      	str	r1, [r0, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8006254:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8006256:	2104      	movs	r1, #4
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8006258:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
  hdfsdm1_channel2.Init.Offset = 0;
 800625a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x06;
 800625c:	2306      	movs	r3, #6
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800625e:	7102      	strb	r2, [r0, #4]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8006260:	6201      	str	r1, [r0, #32]
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8006262:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel2.Init.RightBitShift = 0x06;
 8006264:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8006266:	f7fd fc6d 	bl	8003b44 <HAL_DFSDM_ChannelInit>
 800626a:	b108      	cbz	r0, 8006270 <MX_DFSDM1_Init+0x84>
  {
    Error_Handler();
 800626c:	f001 f822 	bl	80072b4 <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8006270:	481b      	ldr	r0, [pc, #108]	; (80062e0 <MX_DFSDM1_Init+0xf4>)
 8006272:	4b1c      	ldr	r3, [pc, #112]	; (80062e4 <MX_DFSDM1_Init+0xf8>)
 8006274:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 32;
 8006276:	2120      	movs	r1, #32
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8006278:	2300      	movs	r3, #0
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 800627a:	2201      	movs	r2, #1
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800627c:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 32;
 800627e:	60c1      	str	r1, [r0, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8006280:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8006282:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8006284:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8006286:	2104      	movs	r1, #4
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8006288:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
  hdfsdm1_channel3.Init.Offset = 0;
 800628a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x06;
 800628c:	2306      	movs	r3, #6
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 800628e:	7102      	strb	r2, [r0, #4]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8006290:	61c2      	str	r2, [r0, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8006292:	6201      	str	r1, [r0, #32]
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8006294:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel3.Init.RightBitShift = 0x06;
 8006296:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 8006298:	f7fd fc54 	bl	8003b44 <HAL_DFSDM_ChannelInit>
 800629c:	b108      	cbz	r0, 80062a2 <MX_DFSDM1_Init+0xb6>
  {
    Error_Handler();
 800629e:	f001 f809 	bl	80072b4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80062a2:	2201      	movs	r2, #1
 80062a4:	4910      	ldr	r1, [pc, #64]	; (80062e8 <MX_DFSDM1_Init+0xfc>)
 80062a6:	4808      	ldr	r0, [pc, #32]	; (80062c8 <MX_DFSDM1_Init+0xdc>)
 80062a8:	f7fd fd32 	bl	8003d10 <HAL_DFSDM_FilterConfigRegChannel>
 80062ac:	b108      	cbz	r0, 80062b2 <MX_DFSDM1_Init+0xc6>
  {
    Error_Handler();
 80062ae:	f001 f801 	bl	80072b4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80062b2:	2201      	movs	r2, #1
 80062b4:	490d      	ldr	r1, [pc, #52]	; (80062ec <MX_DFSDM1_Init+0x100>)
 80062b6:	4806      	ldr	r0, [pc, #24]	; (80062d0 <MX_DFSDM1_Init+0xe4>)
 80062b8:	f7fd fd2a 	bl	8003d10 <HAL_DFSDM_FilterConfigRegChannel>
 80062bc:	b118      	cbz	r0, 80062c6 <MX_DFSDM1_Init+0xda>
  {
    Error_Handler();
  }

}
 80062be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80062c2:	f000 bff7 	b.w	80072b4 <Error_Handler>
 80062c6:	bd08      	pop	{r3, pc}
 80062c8:	2000f8dc 	.word	0x2000f8dc
 80062cc:	40016100 	.word	0x40016100
 80062d0:	2000f9f8 	.word	0x2000f9f8
 80062d4:	40016180 	.word	0x40016180
 80062d8:	2000fa4c 	.word	0x2000fa4c
 80062dc:	40016040 	.word	0x40016040
 80062e0:	2000f930 	.word	0x2000f930
 80062e4:	40016060 	.word	0x40016060
 80062e8:	00020004 	.word	0x00020004
 80062ec:	00030008 	.word	0x00030008

080062f0 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80062f0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 80062f2:	4c3a      	ldr	r4, [pc, #232]	; (80063dc <HAL_DFSDM_FilterMspInit+0xec>)
{
 80062f4:	b089      	sub	sp, #36	; 0x24
 80062f6:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062f8:	2214      	movs	r2, #20
 80062fa:	2100      	movs	r1, #0
 80062fc:	a803      	add	r0, sp, #12
 80062fe:	f002 fe09 	bl	8008f14 <memset>
  if(DFSDM1_Init == 0)
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	bb2b      	cbnz	r3, 8006352 <HAL_DFSDM_FilterMspInit+0x62>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8006306:	4a36      	ldr	r2, [pc, #216]	; (80063e0 <HAL_DFSDM_FilterMspInit+0xf0>)
 8006308:	6813      	ldr	r3, [r2, #0]
 800630a:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800630c:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	4b34      	ldr	r3, [pc, #208]	; (80063e4 <HAL_DFSDM_FilterMspInit+0xf4>)
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8006312:	d108      	bne.n	8006326 <HAL_DFSDM_FilterMspInit+0x36>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8006314:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006316:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800631a:	661a      	str	r2, [r3, #96]	; 0x60
 800631c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800631e:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8006322:	9201      	str	r2, [sp, #4]
 8006324:	9a01      	ldr	r2, [sp, #4]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006328:	482f      	ldr	r0, [pc, #188]	; (80063e8 <HAL_DFSDM_FilterMspInit+0xf8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800632a:	f042 0204 	orr.w	r2, r2, #4
 800632e:	64da      	str	r2, [r3, #76]	; 0x4c
 8006330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	9302      	str	r3, [sp, #8]
 8006338:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 800633a:	2384      	movs	r3, #132	; 0x84
 800633c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800633e:	2302      	movs	r3, #2
 8006340:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006342:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8006344:	2306      	movs	r3, #6
 8006346:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006348:	f7fd fe62 	bl	8004010 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	3301      	adds	r3, #1
 8006350:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8006352:	682a      	ldr	r2, [r5, #0]
 8006354:	4b25      	ldr	r3, [pc, #148]	; (80063ec <HAL_DFSDM_FilterMspInit+0xfc>)
 8006356:	429a      	cmp	r2, r3
 8006358:	d11c      	bne.n	8006394 <HAL_DFSDM_FilterMspInit+0xa4>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 800635a:	4c25      	ldr	r4, [pc, #148]	; (80063f0 <HAL_DFSDM_FilterMspInit+0x100>)
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800635c:	2280      	movs	r2, #128	; 0x80
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 800635e:	f503 431f 	add.w	r3, r3, #40704	; 0x9f00
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8006362:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006364:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8006368:	3344      	adds	r3, #68	; 0x44
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800636a:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800636c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8006370:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006372:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8006374:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8006376:	2220      	movs	r2, #32
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8006378:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 800637a:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800637c:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800637e:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8006380:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8006382:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8006384:	f7fd fd32 	bl	8003dec <HAL_DMA_Init>
 8006388:	b108      	cbz	r0, 800638e <HAL_DFSDM_FilterMspInit+0x9e>
    {
      Error_Handler();
 800638a:	f000 ff93 	bl	80072b4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 800638e:	62a5      	str	r5, [r4, #40]	; 0x28
 8006390:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8006392:	62ac      	str	r4, [r5, #40]	; 0x28
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8006394:	682a      	ldr	r2, [r5, #0]
 8006396:	4b17      	ldr	r3, [pc, #92]	; (80063f4 <HAL_DFSDM_FilterMspInit+0x104>)
 8006398:	429a      	cmp	r2, r3
 800639a:	d11c      	bne.n	80063d6 <HAL_DFSDM_FilterMspInit+0xe6>
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 800639c:	4c16      	ldr	r4, [pc, #88]	; (80063f8 <HAL_DFSDM_FilterMspInit+0x108>)
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 800639e:	2280      	movs	r2, #128	; 0x80
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 80063a0:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80063a4:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80063a6:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 80063aa:	33d8      	adds	r3, #216	; 0xd8
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80063ac:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80063ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 80063b2:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80063b4:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 80063b6:	2300      	movs	r3, #0
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80063b8:	2220      	movs	r2, #32
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80063ba:	4620      	mov	r0, r4
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 80063bc:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063be:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 80063c0:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80063c2:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_LOW;
 80063c4:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80063c6:	f7fd fd11 	bl	8003dec <HAL_DMA_Init>
 80063ca:	b108      	cbz	r0, 80063d0 <HAL_DFSDM_FilterMspInit+0xe0>
    {
      Error_Handler();
 80063cc:	f000 ff72 	bl	80072b4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 80063d0:	62a5      	str	r5, [r4, #40]	; 0x28
 80063d2:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 80063d4:	62ac      	str	r4, [r5, #40]	; 0x28
  }

}
 80063d6:	b009      	add	sp, #36	; 0x24
 80063d8:	bd30      	pop	{r4, r5, pc}
 80063da:	bf00      	nop
 80063dc:	20003ac4 	.word	0x20003ac4
 80063e0:	20003ac8 	.word	0x20003ac8
 80063e4:	40021000 	.word	0x40021000
 80063e8:	48000800 	.word	0x48000800
 80063ec:	40016100 	.word	0x40016100
 80063f0:	2000f9b0 	.word	0x2000f9b0
 80063f4:	40016180 	.word	0x40016180
 80063f8:	2000f968 	.word	0x2000f968

080063fc <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80063fc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 80063fe:	4c18      	ldr	r4, [pc, #96]	; (8006460 <HAL_DFSDM_ChannelMspInit+0x64>)
{
 8006400:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006402:	2214      	movs	r2, #20
 8006404:	2100      	movs	r1, #0
 8006406:	a803      	add	r0, sp, #12
 8006408:	f002 fd84 	bl	8008f14 <memset>
  if(DFSDM1_Init == 0)
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	bb2b      	cbnz	r3, 800645c <HAL_DFSDM_ChannelMspInit+0x60>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8006410:	4a14      	ldr	r2, [pc, #80]	; (8006464 <HAL_DFSDM_ChannelMspInit+0x68>)
 8006412:	6813      	ldr	r3, [r2, #0]
 8006414:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8006416:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	4b13      	ldr	r3, [pc, #76]	; (8006468 <HAL_DFSDM_ChannelMspInit+0x6c>)
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800641c:	d108      	bne.n	8006430 <HAL_DFSDM_ChannelMspInit+0x34>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800641e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006420:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006424:	661a      	str	r2, [r3, #96]	; 0x60
 8006426:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006428:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 800642c:	9201      	str	r2, [sp, #4]
 800642e:	9a01      	ldr	r2, [sp, #4]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006430:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006432:	480e      	ldr	r0, [pc, #56]	; (800646c <HAL_DFSDM_ChannelMspInit+0x70>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006434:	f042 0204 	orr.w	r2, r2, #4
 8006438:	64da      	str	r2, [r3, #76]	; 0x4c
 800643a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	9302      	str	r3, [sp, #8]
 8006442:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 8006444:	2384      	movs	r3, #132	; 0x84
 8006446:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006448:	2302      	movs	r3, #2
 800644a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800644c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800644e:	2306      	movs	r3, #6
 8006450:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006452:	f7fd fddd 	bl	8004010 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	3301      	adds	r3, #1
 800645a:	6023      	str	r3, [r4, #0]
  }
}
 800645c:	b008      	add	sp, #32
 800645e:	bd10      	pop	{r4, pc}
 8006460:	20003ac4 	.word	0x20003ac4
 8006464:	20003ac8 	.word	0x20003ac8
 8006468:	40021000 	.word	0x40021000
 800646c:	48000800 	.word	0x48000800

08006470 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006470:	4b1f      	ldr	r3, [pc, #124]	; (80064f0 <MX_DMA_Init+0x80>)
{
 8006472:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006474:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	649a      	str	r2, [r3, #72]	; 0x48
 800647c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800647e:	f002 0201 	and.w	r2, r2, #1
 8006482:	9200      	str	r2, [sp, #0]
 8006484:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006486:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006488:	f042 0202 	orr.w	r2, r2, #2
 800648c:	649a      	str	r2, [r3, #72]	; 0x48
 800648e:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006490:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006492:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006496:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006498:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800649a:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 800649c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800649e:	f7fd f8dd 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80064a2:	200d      	movs	r0, #13
 80064a4:	f7fd f90e 	bl	80036c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80064a8:	2200      	movs	r2, #0
 80064aa:	4611      	mov	r1, r2
 80064ac:	200e      	movs	r0, #14
 80064ae:	f7fd f8d5 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80064b2:	200e      	movs	r0, #14
 80064b4:	f7fd f906 	bl	80036c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80064b8:	2200      	movs	r2, #0
 80064ba:	4611      	mov	r1, r2
 80064bc:	200f      	movs	r0, #15
 80064be:	f7fd f8cd 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80064c2:	200f      	movs	r0, #15
 80064c4:	f7fd f8fe 	bl	80036c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80064c8:	2200      	movs	r2, #0
 80064ca:	4611      	mov	r1, r2
 80064cc:	2011      	movs	r0, #17
 80064ce:	f7fd f8c5 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80064d2:	2011      	movs	r0, #17
 80064d4:	f7fd f8f6 	bl	80036c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80064d8:	2200      	movs	r2, #0
 80064da:	4611      	mov	r1, r2
 80064dc:	203c      	movs	r0, #60	; 0x3c
 80064de:	f7fd f8bd 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80064e2:	203c      	movs	r0, #60	; 0x3c
 80064e4:	f7fd f8ee 	bl	80036c4 <HAL_NVIC_EnableIRQ>

}
 80064e8:	b003      	add	sp, #12
 80064ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80064ee:	bf00      	nop
 80064f0:	40021000 	.word	0x40021000

080064f4 <log10_approx>:
 *  reference: https://community.arm.com/tools/f/discussions/4292/cmsis-dsp-new-functionality-proposal
 */
const float32_t C[4] = { 1.23149591368684f, -4.11852516267426f,
    6.02197014179219f, -3.13396450166353f };
const float32_t LOG10_2 = log10(2.0f);
float32_t log10_approx(float32_t x) {
 80064f4:	b507      	push	{r0, r1, r2, lr}
  float32_t f, l;
  int e;
  f = frexpf(fabsf(x), &e);
 80064f6:	eeb0 0ac0 	vabs.f32	s0, s0
 80064fa:	a801      	add	r0, sp, #4
 80064fc:	f003 fa8a 	bl	8009a14 <frexpf>
  l = LOG10_2 * (C[0] * f * f * f + C[1] * f * f + C[2] * f + C[3] + e);
 8006500:	eddf 7a11 	vldr	s15, [pc, #68]	; 8006548 <log10_approx+0x54>
 8006504:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800654c <log10_approx+0x58>
 8006508:	ee60 7a27 	vmul.f32	s15, s0, s15
 800650c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006510:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006514:	ee27 7a00 	vmul.f32	s14, s14, s0
 8006518:	eee0 7a07 	vfma.f32	s15, s0, s14
 800651c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006550 <log10_approx+0x5c>
 8006520:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006524:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8006554 <log10_approx+0x60>
 8006528:	ed9d 7a01 	vldr	s14, [sp, #4]
 800652c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006530:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8006534:	ee77 7a80 	vadd.f32	s15, s15, s0
  return l;
  //return (l >= 0.0) ? l : 0.0;  // regard a negative value as featureless
}
 8006538:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8006558 <log10_approx+0x64>
 800653c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006540:	b003      	add	sp, #12
 8006542:	f85d fb04 	ldr.w	pc, [sp], #4
 8006546:	bf00      	nop
 8006548:	c083caf5 	.word	0xc083caf5
 800654c:	3f9da1a8 	.word	0x3f9da1a8
 8006550:	40c0b3fb 	.word	0x40c0b3fb
 8006554:	404892e0 	.word	0x404892e0
 8006558:	3e9a209b 	.word	0x3e9a209b

0800655c <hann>:

// Hann window generation
void hann(int num) {
 800655c:	b570      	push	{r4, r5, r6, lr}
  arm_fill_f32(0.0f, hann_window, NN);
 800655e:	f44f 7100 	mov.w	r1, #512	; 0x200
void hann(int num) {
 8006562:	ed2d 8b02 	vpush	{d8}
 8006566:	4605      	mov	r5, r0
  arm_fill_f32(0.0f, hann_window, NN);
 8006568:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80065b4 <hann+0x58>
 800656c:	4812      	ldr	r0, [pc, #72]	; (80065b8 <hann+0x5c>)
 800656e:	4e12      	ldr	r6, [pc, #72]	; (80065b8 <hann+0x5c>)
 8006570:	f000 ffde 	bl	8007530 <arm_fill_f32>
  float32_t scale = 2.0f * PI / (float32_t) num;
 8006574:	ee07 5a90 	vmov	s15, r5
 8006578:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80065bc <hann+0x60>
 800657c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int n = 0; n < num; n++) {
 8006580:	2400      	movs	r4, #0
  float32_t scale = 2.0f * PI / (float32_t) num;
 8006582:	eec7 8a27 	vdiv.f32	s17, s14, s15
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 8006586:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
  for (int n = 0; n < num; n++) {
 800658a:	42ac      	cmp	r4, r5
 800658c:	db02      	blt.n	8006594 <hann+0x38>
  }
}
 800658e:	ecbd 8b02 	vpop	{d8}
 8006592:	bd70      	pop	{r4, r5, r6, pc}
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 8006594:	ee07 4a90 	vmov	s15, r4
 8006598:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  for (int n = 0; n < num; n++) {
 800659c:	3401      	adds	r4, #1
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 800659e:	ee20 0a28 	vmul.f32	s0, s0, s17
 80065a2:	f002 f893 	bl	80086cc <arm_cos_f32>
 80065a6:	eef0 7a48 	vmov.f32	s15, s16
 80065aa:	eee0 7a48 	vfms.f32	s15, s0, s16
 80065ae:	ece6 7a01 	vstmia	r6!, {s15}
 80065b2:	e7ea      	b.n	800658a <hann+0x2e>
 80065b4:	00000000 	.word	0x00000000
 80065b8:	20004fd0 	.word	0x20004fd0
 80065bc:	40c90fdb 	.word	0x40c90fdb

080065c0 <freq2mel>:

// Frequency in Hz to Mel-scale
float32_t freq2mel(float32_t hz) {
  return 2595.0f * log10(hz / 700.0f + 1.0f);
 80065c0:	eddf 7a11 	vldr	s15, [pc, #68]	; 8006608 <freq2mel+0x48>
 80065c4:	ee80 0a27 	vdiv.f32	s0, s0, s15
float32_t freq2mel(float32_t hz) {
 80065c8:	b508      	push	{r3, lr}
  return 2595.0f * log10(hz / 700.0f + 1.0f);
 80065ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80065ce:	ee70 7a27 	vadd.f32	s15, s0, s15
 80065d2:	ee17 0a90 	vmov	r0, s15
 80065d6:	f7fc faa7 	bl	8002b28 <__aeabi_f2d>
 80065da:	ec41 0b10 	vmov	d0, r0, r1
 80065de:	f005 f9a1 	bl	800b924 <log10>
 80065e2:	a307      	add	r3, pc, #28	; (adr r3, 8006600 <freq2mel+0x40>)
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	ec51 0b10 	vmov	r0, r1, d0
 80065ec:	f7fc faf0 	bl	8002bd0 <__aeabi_dmul>
 80065f0:	f7fc fdc6 	bl	8003180 <__aeabi_d2f>
}
 80065f4:	ee00 0a10 	vmov	s0, r0
 80065f8:	bd08      	pop	{r3, pc}
 80065fa:	bf00      	nop
 80065fc:	f3af 8000 	nop.w
 8006600:	00000000 	.word	0x00000000
 8006604:	40a44600 	.word	0x40a44600
 8006608:	442f0000 	.word	0x442f0000
 800660c:	00000000 	.word	0x00000000

08006610 <mel2freq>:

// Mel-scale to Frequency in Hz
float32_t mel2freq(float32_t mel) {
  return 700.0 * (pow(10.0, (mel / 2595.0f)) - 1.0f);
 8006610:	eddf 7a11 	vldr	s15, [pc, #68]	; 8006658 <mel2freq+0x48>
 8006614:	ee80 7a27 	vdiv.f32	s14, s0, s15
float32_t mel2freq(float32_t mel) {
 8006618:	b508      	push	{r3, lr}
  return 700.0 * (pow(10.0, (mel / 2595.0f)) - 1.0f);
 800661a:	ee17 0a10 	vmov	r0, s14
 800661e:	f7fc fa83 	bl	8002b28 <__aeabi_f2d>
 8006622:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8006650 <mel2freq+0x40>
 8006626:	ec41 0b11 	vmov	d1, r0, r1
 800662a:	f005 f9fb 	bl	800ba24 <pow>
 800662e:	2200      	movs	r2, #0
 8006630:	ec51 0b10 	vmov	r0, r1, d0
 8006634:	4b09      	ldr	r3, [pc, #36]	; (800665c <mel2freq+0x4c>)
 8006636:	f7fc f917 	bl	8002868 <__aeabi_dsub>
 800663a:	2200      	movs	r2, #0
 800663c:	4b08      	ldr	r3, [pc, #32]	; (8006660 <mel2freq+0x50>)
 800663e:	f7fc fac7 	bl	8002bd0 <__aeabi_dmul>
 8006642:	f7fc fd9d 	bl	8003180 <__aeabi_d2f>
}
 8006646:	ee00 0a10 	vmov	s0, r0
 800664a:	bd08      	pop	{r3, pc}
 800664c:	f3af 8000 	nop.w
 8006650:	00000000 	.word	0x00000000
 8006654:	40240000 	.word	0x40240000
 8006658:	45223000 	.word	0x45223000
 800665c:	3ff00000 	.word	0x3ff00000
 8006660:	4085e000 	.word	0x4085e000

08006664 <generate_filters>:

// Generate Mel filter bank
void generate_filters(void) {
 8006664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006668:	ed2d 8b02 	vpush	{d8}
  const float32_t mel_min = 0.0f;
  float32_t mel_points[NUM_FILTERS + 2];
  float32_t hz_points[NUM_FILTERS + 2];
  float32_t f[NUM_FILTERS + 2];
  float32_t f_minus, f_center, f_plus;
  float32_t mel_max = freq2mel(nyq_fs);
 800666c:	4b44      	ldr	r3, [pc, #272]	; (8006780 <generate_filters+0x11c>)
  float32_t delta_mel = (mel_max - mel_min) / (NUM_FILTERS + 2);
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
    mel_points[m] = delta_mel * m;
    hz_points[m] = mel2freq(mel_points[m]);
    f[m] = floor((NN + 1) * hz_points[m] / fs);
 800666e:	ed9f 8a45 	vldr	s16, [pc, #276]	; 8006784 <generate_filters+0x120>
  float32_t mel_max = freq2mel(nyq_fs);
 8006672:	ed93 0a00 	vldr	s0, [r3]
    f[m] = floor((NN + 1) * hz_points[m] / fs);
 8006676:	4f44      	ldr	r7, [pc, #272]	; (8006788 <generate_filters+0x124>)
void generate_filters(void) {
 8006678:	b0ab      	sub	sp, #172	; 0xac
  float32_t mel_max = freq2mel(nyq_fs);
 800667a:	f7ff ffa1 	bl	80065c0 <freq2mel>
  float32_t delta_mel = (mel_max - mel_min) / (NUM_FILTERS + 2);
 800667e:	eddf 7a43 	vldr	s15, [pc, #268]	; 800678c <generate_filters+0x128>
 8006682:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8006686:	466d      	mov	r5, sp
 8006688:	466e      	mov	r6, sp
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 800668a:	2400      	movs	r4, #0
    mel_points[m] = delta_mel * m;
 800668c:	ee07 4a90 	vmov	s15, r4
 8006690:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8006694:	3401      	adds	r4, #1
    hz_points[m] = mel2freq(mel_points[m]);
 8006696:	ee20 0a28 	vmul.f32	s0, s0, s17
 800669a:	f7ff ffb9 	bl	8006610 <mel2freq>
    f[m] = floor((NN + 1) * hz_points[m] / fs);
 800669e:	edd7 7a00 	vldr	s15, [r7]
 80066a2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80066a6:	ee80 7a27 	vdiv.f32	s14, s0, s15
 80066aa:	ee17 0a10 	vmov	r0, s14
 80066ae:	f7fc fa3b 	bl	8002b28 <__aeabi_f2d>
 80066b2:	ec41 0b10 	vmov	d0, r0, r1
 80066b6:	f005 f85f 	bl	800b778 <floor>
 80066ba:	ec51 0b10 	vmov	r0, r1, d0
 80066be:	f7fc fd5f 	bl	8003180 <__aeabi_d2f>
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 80066c2:	2c2a      	cmp	r4, #42	; 0x2a
    f[m] = floor((NN + 1) * hz_points[m] / fs);
 80066c4:	f846 0b04 	str.w	r0, [r6], #4
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 80066c8:	d1e0      	bne.n	800668c <generate_filters+0x28>
 80066ca:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8006794 <generate_filters+0x130>
 80066ce:	4e30      	ldr	r6, [pc, #192]	; (8006790 <generate_filters+0x12c>)
 80066d0:	2380      	movs	r3, #128	; 0x80
 80066d2:	f06f 0c03 	mvn.w	ip, #3
 80066d6:	46f0      	mov	r8, lr
  }
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
    for (int k = 1; k < NN / 2; k++) {
      f_minus = f[m - 1];
 80066d8:	ed95 6a00 	vldr	s12, [r5]
      f_center = f[m];
 80066dc:	3504      	adds	r5, #4
      f_plus = f[m + 1];
      for (int k = f_minus; k < f_center; k++) {
 80066de:	eefd 6ac6 	vcvt.s32.f32	s13, s12
      f_plus = f[m + 1];
 80066e2:	edd5 7a01 	vldr	s15, [r5, #4]
      f_center = f[m];
 80066e6:	ed95 7a00 	vldr	s14, [r5]
      for (int k = f_minus; k < f_center; k++) {
 80066ea:	ee16 4a90 	vmov	r4, s13
      }
      for (int k = f_center; k <= f_plus; k++) {
        filterbank[m][k - (int) f_minus] = (f_plus - k) / (f_plus - f_center);
      }
      k_range[m][0] = (int) f_minus;
      k_range[m][1] = (int) f_plus - (int) f_minus + 1;
 80066ee:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      for (int k = f_center; k <= f_plus; k++) {
 80066f2:	eefd 5ac7 	vcvt.s32.f32	s11, s14
      k_range[m][1] = (int) f_plus - (int) f_minus + 1;
 80066f6:	ee16 2a90 	vmov	r2, s13
 80066fa:	1b12      	subs	r2, r2, r4
 80066fc:	3201      	adds	r2, #1
 80066fe:	fb0c 3904 	mla	r9, ip, r4, r3
 8006702:	20ff      	movs	r0, #255	; 0xff
 8006704:	eb0e 0703 	add.w	r7, lr, r3
      for (int k = f_minus; k < f_center; k++) {
 8006708:	4621      	mov	r1, r4
 800670a:	ee06 1a90 	vmov	s13, r1
 800670e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006712:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671a:	dc19      	bgt.n	8006750 <generate_filters+0xec>
 800671c:	ee15 1a90 	vmov	r1, s11
      for (int k = f_center; k <= f_plus; k++) {
 8006720:	ee06 1a90 	vmov	s13, r1
 8006724:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006728:	eef4 7ae6 	vcmpe.f32	s15, s13
 800672c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006730:	da18      	bge.n	8006764 <generate_filters+0x100>
    for (int k = 1; k < NN / 2; k++) {
 8006732:	3801      	subs	r0, #1
      k_range[m][0] = (int) f_minus;
 8006734:	60b4      	str	r4, [r6, #8]
      k_range[m][1] = (int) f_plus - (int) f_minus + 1;
 8006736:	60f2      	str	r2, [r6, #12]
    for (int k = 1; k < NN / 2; k++) {
 8006738:	d1e4      	bne.n	8006704 <generate_filters+0xa0>
 800673a:	3380      	adds	r3, #128	; 0x80
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 800673c:	f5b3 5fa4 	cmp.w	r3, #5248	; 0x1480
 8006740:	f106 0608 	add.w	r6, r6, #8
 8006744:	d1c8      	bne.n	80066d8 <generate_filters+0x74>
    }
  }
}
 8006746:	b02b      	add	sp, #172	; 0xac
 8006748:	ecbd 8b02 	vpop	{d8}
 800674c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        filterbank[m][k - (int) f_minus] = (k - f_minus) / (f_center - f_minus);
 8006750:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006754:	ee77 4a46 	vsub.f32	s9, s14, s12
      for (int k = f_minus; k < f_center; k++) {
 8006758:	3101      	adds	r1, #1
        filterbank[m][k - (int) f_minus] = (k - f_minus) / (f_center - f_minus);
 800675a:	ee86 5aa4 	vdiv.f32	s10, s13, s9
 800675e:	eca7 5a01 	vstmia	r7!, {s10}
 8006762:	e7d2      	b.n	800670a <generate_filters+0xa6>
        filterbank[m][k - (int) f_minus] = (f_plus - k) / (f_plus - f_center);
 8006764:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8006768:	ee77 4ac7 	vsub.f32	s9, s15, s14
 800676c:	eb09 0781 	add.w	r7, r9, r1, lsl #2
 8006770:	ee86 5aa4 	vdiv.f32	s10, s13, s9
 8006774:	4447      	add	r7, r8
      for (int k = f_center; k <= f_plus; k++) {
 8006776:	3101      	adds	r1, #1
        filterbank[m][k - (int) f_minus] = (f_plus - k) / (f_plus - f_center);
 8006778:	ed87 5a00 	vstr	s10, [r7]
 800677c:	e7d0      	b.n	8006720 <generate_filters+0xbc>
 800677e:	bf00      	nop
 8006780:	20005960 	.word	0x20005960
 8006784:	44004000 	.word	0x44004000
 8006788:	20004fcc 	.word	0x20004fcc
 800678c:	42280000 	.word	0x42280000
 8006790:	200057d0 	.word	0x200057d0
 8006794:	20003acc 	.word	0x20003acc

08006798 <init_dsp>:

/*
 * DSP pipeline initialization
 */
void init_dsp(float32_t f_s) {
 8006798:	b510      	push	{r4, lr}
 800679a:	ed2d 8b02 	vpush	{d8}
  // Generate Hanning window
  hann(NN);
 800679e:	f44f 7000 	mov.w	r0, #512	; 0x200
void init_dsp(float32_t f_s) {
 80067a2:	b082      	sub	sp, #8
 80067a4:	eeb0 8a40 	vmov.f32	s16, s0
  hann(NN);
 80067a8:	f7ff fed8 	bl	800655c <hann>
  fs = f_s;
 80067ac:	4b12      	ldr	r3, [pc, #72]	; (80067f8 <init_dsp+0x60>)
  nyq_fs = f_s / 2.0;
  arm_rfft_fast_init_f32(&S, NN);
 80067ae:	4813      	ldr	r0, [pc, #76]	; (80067fc <init_dsp+0x64>)
  fs = f_s;
 80067b0:	ed83 8a00 	vstr	s16, [r3]
  nyq_fs = f_s / 2.0;
 80067b4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80067b8:	ee28 8a00 	vmul.f32	s16, s16, s0
 80067bc:	4b10      	ldr	r3, [pc, #64]	; (8006800 <init_dsp+0x68>)
  arm_fir_init_f32(&S_PRE, 2, fir_coefficients, state_buf, NN);
 80067be:	f44f 7400 	mov.w	r4, #512	; 0x200
  arm_rfft_fast_init_f32(&S, NN);
 80067c2:	f44f 7100 	mov.w	r1, #512	; 0x200
  nyq_fs = f_s / 2.0;
 80067c6:	ed83 8a00 	vstr	s16, [r3]
  arm_rfft_fast_init_f32(&S, NN);
 80067ca:	f000 ff33 	bl	8007634 <arm_rfft_fast_init_f32>
  arm_fir_init_f32(&S_PRE, 2, fir_coefficients, state_buf, NN);
 80067ce:	9400      	str	r4, [sp, #0]
 80067d0:	4b0c      	ldr	r3, [pc, #48]	; (8006804 <init_dsp+0x6c>)
 80067d2:	4a0d      	ldr	r2, [pc, #52]	; (8006808 <init_dsp+0x70>)
 80067d4:	480d      	ldr	r0, [pc, #52]	; (800680c <init_dsp+0x74>)
 80067d6:	2102      	movs	r1, #2
 80067d8:	f001 fc1a 	bl	8008010 <arm_fir_init_f32>
  arm_fir_init_f32(&S_WPRE, 2, fir_w_coefficients, state_w_buf, NN);
 80067dc:	9400      	str	r4, [sp, #0]
 80067de:	4b0c      	ldr	r3, [pc, #48]	; (8006810 <init_dsp+0x78>)
 80067e0:	4a0c      	ldr	r2, [pc, #48]	; (8006814 <init_dsp+0x7c>)
 80067e2:	480d      	ldr	r0, [pc, #52]	; (8006818 <init_dsp+0x80>)
 80067e4:	2102      	movs	r1, #2
 80067e6:	f001 fc13 	bl	8008010 <arm_fir_init_f32>
  generate_filters();
#ifdef MFCC
  dct2_init_f32(&S_DCT, NUM_FILTERS);
#endif
}
 80067ea:	b002      	add	sp, #8
 80067ec:	ecbd 8b02 	vpop	{d8}
 80067f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  generate_filters();
 80067f4:	f7ff bf36 	b.w	8006664 <generate_filters>
 80067f8:	20004fcc 	.word	0x20004fcc
 80067fc:	2000fab4 	.word	0x2000fab4
 8006800:	20005960 	.word	0x20005960
 8006804:	20006164 	.word	0x20006164
 8006808:	20000550 	.word	0x20000550
 800680c:	2000facc 	.word	0x2000facc
 8006810:	20006968 	.word	0x20006968
 8006814:	20000558 	.word	0x20000558
 8006818:	2000faa8 	.word	0x2000faa8

0800681c <apply_pre_emphasis>:

//--- DSP pipeline functions -----------------------------//

// Apply pre-emphasis
void apply_pre_emphasis(float32_t *signal) {
 800681c:	4602      	mov	r2, r0
  arm_fir_f32(&S_PRE, signal, signal, NN);
 800681e:	4601      	mov	r1, r0
 8006820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006824:	4801      	ldr	r0, [pc, #4]	; (800682c <apply_pre_emphasis+0x10>)
 8006826:	f001 bc05 	b.w	8008034 <arm_fir_f32>
 800682a:	bf00      	nop
 800682c:	2000facc 	.word	0x2000facc

08006830 <apply_weak_pre_emphasis>:
}

void apply_weak_pre_emphasis(float32_t *signal) {
 8006830:	4602      	mov	r2, r0
  arm_fir_f32(&S_WPRE, signal, signal, NN);
 8006832:	4601      	mov	r1, r0
 8006834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006838:	4801      	ldr	r0, [pc, #4]	; (8006840 <apply_weak_pre_emphasis+0x10>)
 800683a:	f001 bbfb 	b.w	8008034 <arm_fir_f32>
 800683e:	bf00      	nop
 8006840:	2000faa8 	.word	0x2000faa8

08006844 <apply_ac_coupling>:
}

// AC coupling (to remove DC)
void apply_ac_coupling(float32_t *signal) {
 8006844:	b537      	push	{r0, r1, r2, r4, r5, lr}
  float32_t mean;
  static float32_t mean_hist[NUM_MEANS] = { 0.0f };
  arm_copy_f32(mean_hist + 1, mean_hist, NUM_MEANS - 1);
 8006846:	4d0f      	ldr	r5, [pc, #60]	; (8006884 <apply_ac_coupling+0x40>)
void apply_ac_coupling(float32_t *signal) {
 8006848:	4604      	mov	r4, r0
  arm_copy_f32(mean_hist + 1, mean_hist, NUM_MEANS - 1);
 800684a:	4629      	mov	r1, r5
 800684c:	1d28      	adds	r0, r5, #4
 800684e:	220f      	movs	r2, #15
 8006850:	f000 fe8c 	bl	800756c <arm_copy_f32>
  arm_mean_f32(signal, NN, mean_hist + NUM_MEANS - 1);
 8006854:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 8006858:	4620      	mov	r0, r4
 800685a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800685e:	f000 feb5 	bl	80075cc <arm_mean_f32>
  arm_mean_f32(signal, NUM_MEANS, &mean);
 8006862:	aa01      	add	r2, sp, #4
 8006864:	4620      	mov	r0, r4
 8006866:	2110      	movs	r1, #16
 8006868:	f000 feb0 	bl	80075cc <arm_mean_f32>
  arm_offset_f32(signal, -mean, signal, NN);
 800686c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006874:	4621      	mov	r1, r4
 8006876:	eeb1 0a40 	vneg.f32	s0, s0
 800687a:	4620      	mov	r0, r4
 800687c:	f001 ff9c 	bl	80087b8 <arm_offset_f32>
}
 8006880:	b003      	add	sp, #12
 8006882:	bd30      	pop	{r4, r5, pc}
 8006884:	20005920 	.word	0x20005920

08006888 <apply_hann>:

// Apply Hann window
void apply_hann(float32_t *signal) {
  arm_mult_f32(signal, hann_window, signal, NN);
 8006888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800688c:	4602      	mov	r2, r0
 800688e:	4901      	ldr	r1, [pc, #4]	; (8006894 <apply_hann+0xc>)
 8006890:	f001 bfc8 	b.w	8008824 <arm_mult_f32>
 8006894:	20004fd0 	.word	0x20004fd0

08006898 <apply_fft>:
}

// FFT
void apply_fft(float32_t *signal) {
 8006898:	b538      	push	{r3, r4, r5, lr}
  // Caution: arm_rfft_fast_f32() rewrites the 2nd arg (signal)
  arm_rfft_fast_f32(&S, signal, signal_buf, 0);
 800689a:	4c08      	ldr	r4, [pc, #32]	; (80068bc <apply_fft+0x24>)
void apply_fft(float32_t *signal) {
 800689c:	4605      	mov	r5, r0
  arm_rfft_fast_f32(&S, signal, signal_buf, 0);
 800689e:	4622      	mov	r2, r4
 80068a0:	4601      	mov	r1, r0
 80068a2:	2300      	movs	r3, #0
 80068a4:	4806      	ldr	r0, [pc, #24]	; (80068c0 <apply_fft+0x28>)
 80068a6:	f000 ff47 	bl	8007738 <arm_rfft_fast_f32>
  arm_copy_f32(signal_buf, signal, NN);
 80068aa:	4629      	mov	r1, r5
 80068ac:	4620      	mov	r0, r4
 80068ae:	f44f 7200 	mov.w	r2, #512	; 0x200
}
 80068b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  arm_copy_f32(signal_buf, signal, NN);
 80068b6:	f000 be59 	b.w	800756c <arm_copy_f32>
 80068ba:	bf00      	nop
 80068bc:	20005964 	.word	0x20005964
 80068c0:	2000fab4 	.word	0x2000fab4

080068c4 <apply_psd>:

// PSD
void apply_psd(float32_t *signal) {
 80068c4:	b538      	push	{r3, r4, r5, lr}
  arm_cmplx_mag_f32(signal, signal_buf, NN / 2);
 80068c6:	4c08      	ldr	r4, [pc, #32]	; (80068e8 <apply_psd+0x24>)
void apply_psd(float32_t *signal) {
 80068c8:	4605      	mov	r5, r0
  arm_cmplx_mag_f32(signal, signal_buf, NN / 2);
 80068ca:	4621      	mov	r1, r4
 80068cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068d0:	f001 fe14 	bl	80084fc <arm_cmplx_mag_f32>
  arm_scale_f32(signal_buf, RECIPROCAL_NN, signal, NN / 2);
 80068d4:	4629      	mov	r1, r5
 80068d6:	4620      	mov	r0, r4
 80068d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068dc:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80068ec <apply_psd+0x28>
}
 80068e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  arm_scale_f32(signal_buf, RECIPROCAL_NN, signal, NN / 2);
 80068e4:	f001 bf32 	b.w	800874c <arm_scale_f32>
 80068e8:	20005964 	.word	0x20005964
 80068ec:	3b000000 	.word	0x3b000000

080068f0 <apply_psd_logscale>:

// PSD in logscale
void apply_psd_logscale(float32_t *signal) {
 80068f0:	b538      	push	{r3, r4, r5, lr}
 80068f2:	4604      	mov	r4, r0
 80068f4:	ed2d 8b02 	vpush	{d8}
 80068f8:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (int n = 0; n < NN / 2; n++) {
    signal[n] = 20.0 * log10_approx(signal[n]);
 80068fc:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
 8006900:	ed94 0a00 	vldr	s0, [r4]
 8006904:	f7ff fdf6 	bl	80064f4 <log10_approx>
 8006908:	ee20 0a08 	vmul.f32	s0, s0, s16
 800690c:	eca4 0a01 	vstmia	r4!, {s0}
  for (int n = 0; n < NN / 2; n++) {
 8006910:	42ac      	cmp	r4, r5
 8006912:	d1f5      	bne.n	8006900 <apply_psd_logscale+0x10>
  }
}
 8006914:	ecbd 8b02 	vpop	{d8}
 8006918:	bd38      	pop	{r3, r4, r5, pc}
	...

0800691c <apply_filterbank>:

// Apply mel filter bank
void apply_filterbank(float32_t *signal) {
 800691c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  float32_t sum = 0.0f;
 8006920:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8006978 <apply_filterbank+0x5c>
 8006924:	4f15      	ldr	r7, [pc, #84]	; (800697c <apply_filterbank+0x60>)
  int left_k, len;
  arm_fill_f32(0.0f, signal_buf, NN / 2);
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
    left_k = k_range[m][0];
    len = k_range[m][1];
 8006926:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8006980 <apply_filterbank+0x64>
    arm_dot_prod_f32(&signal[left_k], filterbank[m], len, &sum);
 800692a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8006984 <apply_filterbank+0x68>
void apply_filterbank(float32_t *signal) {
 800692e:	4606      	mov	r6, r0
  float32_t sum = 0.0f;
 8006930:	ad02      	add	r5, sp, #8
  arm_fill_f32(0.0f, signal_buf, NN / 2);
 8006932:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006936:	4811      	ldr	r0, [pc, #68]	; (800697c <apply_filterbank+0x60>)
  float32_t sum = 0.0f;
 8006938:	ed25 0a01 	vstmdb	r5!, {s0}
  arm_fill_f32(0.0f, signal_buf, NN / 2);
 800693c:	f000 fdf8 	bl	8007530 <arm_fill_f32>
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 8006940:	2401      	movs	r4, #1
    arm_dot_prod_f32(&signal[left_k], filterbank[m], len, &sum);
 8006942:	f858 0034 	ldr.w	r0, [r8, r4, lsl #3]
    len = k_range[m][1];
 8006946:	eb08 02c4 	add.w	r2, r8, r4, lsl #3
    arm_dot_prod_f32(&signal[left_k], filterbank[m], len, &sum);
 800694a:	462b      	mov	r3, r5
 800694c:	eb09 11c4 	add.w	r1, r9, r4, lsl #7
 8006950:	6852      	ldr	r2, [r2, #4]
 8006952:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 8006956:	3401      	adds	r4, #1
    arm_dot_prod_f32(&signal[left_k], filterbank[m], len, &sum);
 8006958:	f7fc fdea 	bl	8003530 <arm_dot_prod_f32>
    signal_buf[m - 1] = sum;
 800695c:	9b01      	ldr	r3, [sp, #4]
 800695e:	f847 3b04 	str.w	r3, [r7], #4
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 8006962:	2c29      	cmp	r4, #41	; 0x29
 8006964:	d1ed      	bne.n	8006942 <apply_filterbank+0x26>
  }
  arm_copy_f32(signal_buf, signal, NUM_FILTERS);
 8006966:	2228      	movs	r2, #40	; 0x28
 8006968:	4631      	mov	r1, r6
 800696a:	4804      	ldr	r0, [pc, #16]	; (800697c <apply_filterbank+0x60>)
 800696c:	f000 fdfe 	bl	800756c <arm_copy_f32>
}
 8006970:	b003      	add	sp, #12
 8006972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006976:	bf00      	nop
 8006978:	00000000 	.word	0x00000000
 800697c:	20005964 	.word	0x20005964
 8006980:	200057d0 	.word	0x200057d0
 8006984:	20003acc 	.word	0x20003acc

08006988 <apply_filterbank_logscale>:

// Filtered PSD in logscale
void apply_filterbank_logscale(float32_t *signal) {
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4604      	mov	r4, r0
 800698c:	ed2d 8b02 	vpush	{d8}
 8006990:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
  for (int n = 0; n < NUM_FILTERS; n++) {
    signal[n] = 20.0 * log10_approx(signal[n]);
 8006994:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
 8006998:	ed94 0a00 	vldr	s0, [r4]
 800699c:	f7ff fdaa 	bl	80064f4 <log10_approx>
 80069a0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80069a4:	eca4 0a01 	vstmia	r4!, {s0}
  for (int n = 0; n < NUM_FILTERS; n++) {
 80069a8:	42ac      	cmp	r4, r5
 80069aa:	d1f5      	bne.n	8006998 <apply_filterbank_logscale+0x10>
  }
}
 80069ac:	ecbd 8b02 	vpop	{d8}
 80069b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080069b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80069b4:	b500      	push	{lr}
 80069b6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069b8:	2214      	movs	r2, #20
 80069ba:	2100      	movs	r1, #0
 80069bc:	a803      	add	r0, sp, #12
 80069be:	f002 faa9 	bl	8008f14 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80069c2:	4b18      	ldr	r3, [pc, #96]	; (8006a24 <MX_GPIO_Init+0x70>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80069c4:	4818      	ldr	r0, [pc, #96]	; (8006a28 <MX_GPIO_Init+0x74>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80069c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069c8:	f042 0204 	orr.w	r2, r2, #4
 80069cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80069ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069d0:	f002 0204 	and.w	r2, r2, #4
 80069d4:	9200      	str	r2, [sp, #0]
 80069d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80069d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	64da      	str	r2, [r3, #76]	; 0x4c
 80069e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069e2:	f002 0201 	and.w	r2, r2, #1
 80069e6:	9201      	str	r2, [sp, #4]
 80069e8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069ec:	f042 0202 	orr.w	r2, r2, #2
 80069f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80069f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	9302      	str	r3, [sp, #8]
 80069fa:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = B1_Pin;
 80069fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a00:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006a02:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006a04:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <MX_GPIO_Init+0x78>)
 8006a06:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006a08:	f7fd fb02 	bl	8004010 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4611      	mov	r1, r2
 8006a10:	2028      	movs	r0, #40	; 0x28
 8006a12:	f7fc fe23 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006a16:	2028      	movs	r0, #40	; 0x28
 8006a18:	f7fc fe54 	bl	80036c4 <HAL_NVIC_EnableIRQ>

}
 8006a1c:	b009      	add	sp, #36	; 0x24
 8006a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a22:	bf00      	nop
 8006a24:	40021000 	.word	0x40021000
 8006a28:	48000800 	.word	0x48000800
 8006a2c:	10210000 	.word	0x10210000

08006a30 <uart_tx>:
  static int length = 0;
  static int idx = 0;

  static char uart_buf[NUM_FILTERS * 200 * 2] = { 0 };

  if (cnt == 0) {
 8006a30:	4b55      	ldr	r3, [pc, #340]	; (8006b88 <uart_tx+0x158>)
bool uart_tx(float32_t *in, mode mode, bool dma_start) {
 8006a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a36:	4614      	mov	r4, r2
  if (cnt == 0) {
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	2a00      	cmp	r2, #0
 8006a3c:	d143      	bne.n	8006ac6 <uart_tx+0x96>
    idx = 0;
 8006a3e:	4d53      	ldr	r5, [pc, #332]	; (8006b8c <uart_tx+0x15c>)
 8006a40:	602a      	str	r2, [r5, #0]

    switch (mode) {
 8006a42:	1e4a      	subs	r2, r1, #1
 8006a44:	2a03      	cmp	r2, #3
 8006a46:	d83b      	bhi.n	8006ac0 <uart_tx+0x90>
 8006a48:	e8df f002 	tbb	[pc, r2]
 8006a4c:	41342202 	.word	0x41342202

    case RAW_WAVE:
      length = NN;
 8006a50:	4a4f      	ldr	r2, [pc, #316]	; (8006b90 <uart_tx+0x160>)
 8006a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a56:	6011      	str	r1, [r2, #0]
      cnt = 1;
 8006a58:	2201      	movs	r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	4e4b      	ldr	r6, [pc, #300]	; (8006b8c <uart_tx+0x15c>)
    }
  }

  // Quantization: convert float into int
  if (mode == RAW_WAVE) {
    for (int n = 0; n < length; n++) {
 8006a5e:	4a4c      	ldr	r2, [pc, #304]	; (8006b90 <uart_tx+0x160>)
 8006a60:	6837      	ldr	r7, [r6, #0]
 8006a62:	4d4c      	ldr	r5, [pc, #304]	; (8006b94 <uart_tx+0x164>)
 8006a64:	f8d2 e000 	ldr.w	lr, [r2]
 8006a68:	2100      	movs	r1, #0
 8006a6a:	460a      	mov	r2, r1
 8006a6c:	443d      	add	r5, r7
 8006a6e:	4572      	cmp	r2, lr
 8006a70:	db4a      	blt.n	8006b08 <uart_tx+0xd8>
 8006a72:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 8006a76:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006a7a:	b101      	cbz	r1, 8006a7e <uart_tx+0x4e>
 8006a7c:	6032      	str	r2, [r6, #0]

  // memory-to-peripheral DMA to UART
  if (mode == FEATURES) {
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, NUM_FILTERS * 200 * 2);
    printing = false;
  } else if (--cnt == 0) {
 8006a7e:	681d      	ldr	r5, [r3, #0]
 8006a80:	3d01      	subs	r5, #1
 8006a82:	601d      	str	r5, [r3, #0]
 8006a84:	2d00      	cmp	r5, #0
 8006a86:	d173      	bne.n	8006b70 <uart_tx+0x140>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, idx);
 8006a88:	4b40      	ldr	r3, [pc, #256]	; (8006b8c <uart_tx+0x15c>)
 8006a8a:	4942      	ldr	r1, [pc, #264]	; (8006b94 <uart_tx+0x164>)
 8006a8c:	881a      	ldrh	r2, [r3, #0]
 8006a8e:	e034      	b.n	8006afa <uart_tx+0xca>
      length = NN / 2;
 8006a90:	4a3f      	ldr	r2, [pc, #252]	; (8006b90 <uart_tx+0x160>)
 8006a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a96:	6011      	str	r1, [r2, #0]
      cnt = 1;
 8006a98:	2201      	movs	r2, #1
      cnt = 200;
 8006a9a:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < length; n++) {
 8006a9c:	4a3c      	ldr	r2, [pc, #240]	; (8006b90 <uart_tx+0x160>)
 8006a9e:	493b      	ldr	r1, [pc, #236]	; (8006b8c <uart_tx+0x15c>)
 8006aa0:	f8d2 e000 	ldr.w	lr, [r2]
      uart_buf[idx++] = (int8_t) in[n];
 8006aa4:	4e3b      	ldr	r6, [pc, #236]	; (8006b94 <uart_tx+0x164>)
 8006aa6:	680a      	ldr	r2, [r1, #0]
      if (in[n] < -128.0f) in[n] = -128.0f;
 8006aa8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006b98 <uart_tx+0x168>
    for (int n = 0; n < length; n++) {
 8006aac:	2700      	movs	r7, #0
 8006aae:	463d      	mov	r5, r7
      uart_buf[idx++] = (int8_t) in[n];
 8006ab0:	4416      	add	r6, r2
 8006ab2:	e053      	b.n	8006b5c <uart_tx+0x12c>
      length = NN / 2;
 8006ab4:	4a36      	ldr	r2, [pc, #216]	; (8006b90 <uart_tx+0x160>)
 8006ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006aba:	6011      	str	r1, [r2, #0]
      cnt = 200;
 8006abc:	22c8      	movs	r2, #200	; 0xc8
 8006abe:	e7ec      	b.n	8006a9a <uart_tx+0x6a>
      length = 0;
 8006ac0:	4a33      	ldr	r2, [pc, #204]	; (8006b90 <uart_tx+0x160>)
 8006ac2:	2500      	movs	r5, #0
 8006ac4:	6015      	str	r5, [r2, #0]
  if (mode == RAW_WAVE) {
 8006ac6:	2901      	cmp	r1, #1
 8006ac8:	d0c8      	beq.n	8006a5c <uart_tx+0x2c>
  } else if (mode == FEATURES) {
 8006aca:	2904      	cmp	r1, #4
 8006acc:	d1e6      	bne.n	8006a9c <uart_tx+0x6c>
    a = pos * NUM_FILTERS;
 8006ace:	4b33      	ldr	r3, [pc, #204]	; (8006b9c <uart_tx+0x16c>)
    memcpy(uart_buf + b, mfsc_buffer, a);
 8006ad0:	4e30      	ldr	r6, [pc, #192]	; (8006b94 <uart_tx+0x164>)
    a = pos * NUM_FILTERS;
 8006ad2:	681b      	ldr	r3, [r3, #0]
    memcpy(uart_buf + b, mfsc_buffer, a);
 8006ad4:	4f32      	ldr	r7, [pc, #200]	; (8006ba0 <uart_tx+0x170>)
    b = (200 - pos) * NUM_FILTERS;
 8006ad6:	f1c3 05c8 	rsb	r5, r3, #200	; 0xc8
 8006ada:	2428      	movs	r4, #40	; 0x28
 8006adc:	4365      	muls	r5, r4
    a = pos * NUM_FILTERS;
 8006ade:	435c      	muls	r4, r3
    memcpy(uart_buf + b, mfsc_buffer, a);
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	1970      	adds	r0, r6, r5
 8006ae6:	f002 fa0a 	bl	8008efe <memcpy>
    memcpy(uart_buf, mfsc_buffer + a, b);
 8006aea:	462a      	mov	r2, r5
 8006aec:	1939      	adds	r1, r7, r4
 8006aee:	4630      	mov	r0, r6
 8006af0:	f002 fa05 	bl	8008efe <memcpy>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, NUM_FILTERS * 200 * 2);
 8006af4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8006af8:	4631      	mov	r1, r6
 8006afa:	482a      	ldr	r0, [pc, #168]	; (8006ba4 <uart_tx+0x174>)
 8006afc:	f7fe fb3e 	bl	800517c <HAL_UART_Transmit_DMA>
    printing = false;
 8006b00:	2400      	movs	r4, #0
  } else {
    printing = true;
  }

  return printing;
}
 8006b02:	4620      	mov	r0, r4
 8006b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b08:	4680      	mov	r8, r0
      uart_buf[idx++] = (uint8_t) (((int16_t) in[n]) >> 8);      // MSB
 8006b0a:	ecf0 7a01 	vldmia	r0!, {s15}
 8006b0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      uart_buf[idx++] = (uint8_t) (((int16_t) in[n] & 0x00ff));  // LSB
 8006b12:	eb05 0c42 	add.w	ip, r5, r2, lsl #1
      uart_buf[idx++] = (uint8_t) (((int16_t) in[n]) >> 8);      // MSB
 8006b16:	ee17 1a90 	vmov	r1, s15
 8006b1a:	f341 2107 	sbfx	r1, r1, #8, #8
 8006b1e:	f805 1012 	strb.w	r1, [r5, r2, lsl #1]
      uart_buf[idx++] = (uint8_t) (((int16_t) in[n] & 0x00ff));  // LSB
 8006b22:	edd8 7a00 	vldr	s15, [r8]
 8006b26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    for (int n = 0; n < length; n++) {
 8006b2a:	3201      	adds	r2, #1
      uart_buf[idx++] = (uint8_t) (((int16_t) in[n] & 0x00ff));  // LSB
 8006b2c:	ee17 1a90 	vmov	r1, s15
 8006b30:	f88c 1001 	strb.w	r1, [ip, #1]
 8006b34:	2101      	movs	r1, #1
 8006b36:	e79a      	b.n	8006a6e <uart_tx+0x3e>
      if (in[n] < -128.0f) in[n] = -128.0f;
 8006b38:	edd0 7a00 	vldr	s15, [r0]
 8006b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b44:	bf48      	it	mi
 8006b46:	ed80 7a00 	vstrmi	s14, [r0]
      uart_buf[idx++] = (int8_t) in[n];
 8006b4a:	ecf0 7a01 	vldmia	r0!, {s15}
 8006b4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b52:	ee17 7a90 	vmov	r7, s15
 8006b56:	5577      	strb	r7, [r6, r5]
    for (int n = 0; n < length; n++) {
 8006b58:	3501      	adds	r5, #1
 8006b5a:	2701      	movs	r7, #1
 8006b5c:	4575      	cmp	r5, lr
 8006b5e:	dbeb      	blt.n	8006b38 <uart_tx+0x108>
 8006b60:	f1be 0f00 	cmp.w	lr, #0
 8006b64:	bfa8      	it	ge
 8006b66:	4472      	addge	r2, lr
 8006b68:	2f00      	cmp	r7, #0
 8006b6a:	d088      	beq.n	8006a7e <uart_tx+0x4e>
 8006b6c:	600a      	str	r2, [r1, #0]
 8006b6e:	e786      	b.n	8006a7e <uart_tx+0x4e>
  } else if (dma_start) {
 8006b70:	b144      	cbz	r4, 8006b84 <uart_tx+0x154>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, idx);
 8006b72:	4d06      	ldr	r5, [pc, #24]	; (8006b8c <uart_tx+0x15c>)
 8006b74:	4907      	ldr	r1, [pc, #28]	; (8006b94 <uart_tx+0x164>)
 8006b76:	882a      	ldrh	r2, [r5, #0]
 8006b78:	480a      	ldr	r0, [pc, #40]	; (8006ba4 <uart_tx+0x174>)
 8006b7a:	f7fe faff 	bl	800517c <HAL_UART_Transmit_DMA>
    idx = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	e7be      	b.n	8006b02 <uart_tx+0xd2>
    printing = true;
 8006b84:	2401      	movs	r4, #1
  return printing;
 8006b86:	e7bc      	b.n	8006b02 <uart_tx+0xd2>
 8006b88:	2000716c 	.word	0x2000716c
 8006b8c:	20007174 	.word	0x20007174
 8006b90:	20007178 	.word	0x20007178
 8006b94:	200090c5 	.word	0x200090c5
 8006b98:	c3000000 	.word	0xc3000000
 8006b9c:	200090c0 	.word	0x200090c0
 8006ba0:	2000717c 	.word	0x2000717c
 8006ba4:	2000fb64 	.word	0x2000fb64

08006ba8 <dsp>:

/*
 * DSP pipeline
 */
void dsp(float32_t *s1, mode mode) {
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	460f      	mov	r7, r1
 8006bac:	4604      	mov	r4, r0

  uint32_t start = 0;
  uint32_t end = 0;

  start = HAL_GetTick();
 8006bae:	f7fc fd2f 	bl	8003610 <HAL_GetTick>
 8006bb2:	4606      	mov	r6, r0

  apply_ac_coupling(s1);  // remove DC
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f7ff fe45 	bl	8006844 <apply_ac_coupling>

  if (mode >= FFT) {
 8006bba:	2f01      	cmp	r7, #1
 8006bbc:	4d18      	ldr	r5, [pc, #96]	; (8006c20 <dsp+0x78>)
 8006bbe:	d90d      	bls.n	8006bdc <dsp+0x34>
    apply_hann(s1);
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f7ff fe61 	bl	8006888 <apply_hann>
    apply_fft(s1);
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f7ff fe66 	bl	8006898 <apply_fft>
    apply_psd(s1);
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f7ff fe79 	bl	80068c4 <apply_psd>
    if (mode < FEATURES) {
 8006bd2:	2f03      	cmp	r7, #3
      apply_psd_logscale(s1);
 8006bd4:	4620      	mov	r0, r4
    if (mode < FEATURES) {
 8006bd6:	d80d      	bhi.n	8006bf4 <dsp+0x4c>
      apply_psd_logscale(s1);
 8006bd8:	f7ff fe8a 	bl	80068f0 <apply_psd_logscale>
        mfcc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
      }
#endif
    }
  }
  if (++pos >= 200)
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	3301      	adds	r3, #1
 8006be0:	2bc7      	cmp	r3, #199	; 0xc7
    pos = 0;
 8006be2:	bfc8      	it	gt
 8006be4:	2300      	movgt	r3, #0
 8006be6:	602b      	str	r3, [r5, #0]

  end = HAL_GetTick();
 8006be8:	f7fc fd12 	bl	8003610 <HAL_GetTick>
  elapsed_time = end - start;
 8006bec:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <dsp+0x7c>)
 8006bee:	1b80      	subs	r0, r0, r6
 8006bf0:	6018      	str	r0, [r3, #0]
 8006bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      apply_filterbank(s1);
 8006bf4:	f7ff fe92 	bl	800691c <apply_filterbank>
      apply_filterbank_logscale(s1);
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f7ff fec5 	bl	8006988 <apply_filterbank_logscale>
        mfsc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
 8006bfe:	682a      	ldr	r2, [r5, #0]
 8006c00:	4909      	ldr	r1, [pc, #36]	; (8006c28 <dsp+0x80>)
 8006c02:	2028      	movs	r0, #40	; 0x28
      for (int i = 0; i < NUM_FILTERS; i++) {
 8006c04:	2300      	movs	r3, #0
        mfsc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
 8006c06:	fb00 1202 	mla	r2, r0, r2, r1
 8006c0a:	ecf4 7a01 	vldmia	r4!, {s15}
 8006c0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c12:	ee17 1a90 	vmov	r1, s15
 8006c16:	54d1      	strb	r1, [r2, r3]
      for (int i = 0; i < NUM_FILTERS; i++) {
 8006c18:	3301      	adds	r3, #1
 8006c1a:	2b28      	cmp	r3, #40	; 0x28
 8006c1c:	d1f5      	bne.n	8006c0a <dsp+0x62>
 8006c1e:	e7dd      	b.n	8006bdc <dsp+0x34>
 8006c20:	200090c0 	.word	0x200090c0
 8006c24:	20007170 	.word	0x20007170
 8006c28:	2000717c 	.word	0x2000717c

08006c2c <overlap_dsp>:
 *       [a1|b0]      b(1/2) ... 13.2msec
 *          [b0|b1]   b(2/2) ... 13.2msec
 * --- overlap dsp -------------
 *             :
 */
void overlap_dsp(float32_t *buf, mode mode) {
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
 8006c32:	4606      	mov	r6, r0
 8006c34:	460d      	mov	r5, r1

  float32_t signal[NN] = { 0.0f };
 8006c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	4668      	mov	r0, sp
 8006c3e:	f002 f969 	bl	8008f14 <memset>

  arm_copy_f32(buf, signal, NN);
  dsp(signal, mode);  // (1/2)
  if (printing) {
 8006c42:	4c14      	ldr	r4, [pc, #80]	; (8006c94 <overlap_dsp+0x68>)
  arm_copy_f32(buf, signal, NN);
 8006c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c48:	4669      	mov	r1, sp
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f000 fc8e 	bl	800756c <arm_copy_f32>
  dsp(signal, mode);  // (1/2)
 8006c50:	4629      	mov	r1, r5
 8006c52:	4668      	mov	r0, sp
 8006c54:	f7ff ffa8 	bl	8006ba8 <dsp>
  if (printing) {
 8006c58:	7823      	ldrb	r3, [r4, #0]
 8006c5a:	b12b      	cbz	r3, 8006c68 <overlap_dsp+0x3c>
    printing = uart_tx(signal, mode, false);  // false: UART output pending
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	4629      	mov	r1, r5
 8006c60:	4668      	mov	r0, sp
 8006c62:	f7ff fee5 	bl	8006a30 <uart_tx>
 8006c66:	7020      	strb	r0, [r4, #0]
  }

  arm_copy_f32(buf + NN_HALF, signal, NN);
 8006c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c6c:	4669      	mov	r1, sp
 8006c6e:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 8006c72:	f000 fc7b 	bl	800756c <arm_copy_f32>
  dsp(signal, mode);  // (2/2)
 8006c76:	4629      	mov	r1, r5
 8006c78:	4668      	mov	r0, sp
 8006c7a:	f7ff ff95 	bl	8006ba8 <dsp>
  if (printing) {
 8006c7e:	7823      	ldrb	r3, [r4, #0]
 8006c80:	b12b      	cbz	r3, 8006c8e <overlap_dsp+0x62>
    printing = uart_tx(signal, mode, true);  // true: UART output
 8006c82:	2201      	movs	r2, #1
 8006c84:	4629      	mov	r1, r5
 8006c86:	4668      	mov	r0, sp
 8006c88:	f7ff fed2 	bl	8006a30 <uart_tx>
 8006c8c:	7020      	strb	r0, [r4, #0]
  }

}
 8006c8e:	f50d 6d00 	add.w	sp, sp, #2048	; 0x800
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	200090c4 	.word	0x200090c4

08006c98 <dump>:

/*
 * Dump debug info
 */
void dump(void) {
 8006c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (debug_output != DISABLED) {
 8006c9c:	4d1e      	ldr	r5, [pc, #120]	; (8006d18 <dump+0x80>)
 8006c9e:	782b      	ldrb	r3, [r5, #0]
 8006ca0:	b13b      	cbz	r3, 8006cb2 <dump+0x1a>
    switch (debug_output) {
 8006ca2:	782b      	ldrb	r3, [r5, #0]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d005      	beq.n	8006cb6 <dump+0x1e>
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d02b      	beq.n	8006d06 <dump+0x6e>
      printf("mode: %d, elapsed_time: %lu(msec)\n", output_mode, elapsed_time);
      break;
    default:
      break;
    }
    debug_output = DISABLED;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	702b      	strb	r3, [r5, #0]
 8006cb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        printf("%d:%d,", k_range[m][0], k_range[m][1]);
 8006cb6:	4f19      	ldr	r7, [pc, #100]	; (8006d1c <dump+0x84>)
 8006cb8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006d30 <dump+0x98>
 8006cbc:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8006d34 <dump+0x9c>
    switch (debug_output) {
 8006cc0:	2400      	movs	r4, #0
        printf("%d:%d,", k_range[m][0], k_range[m][1]);
 8006cc2:	19e3      	adds	r3, r4, r7
 8006cc4:	59e1      	ldr	r1, [r4, r7]
 8006cc6:	685a      	ldr	r2, [r3, #4]
          printf("%.3f,", filterbank[m][n]);
 8006cc8:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8006d38 <dump+0xa0>
        printf("%d:%d,", k_range[m][0], k_range[m][1]);
 8006ccc:	4650      	mov	r0, sl
 8006cce:	f002 fe01 	bl	80098d4 <iprintf>
 8006cd2:	eb09 1804 	add.w	r8, r9, r4, lsl #4
        for (int n = 0; n < FILTER_LENGTH; n++) {
 8006cd6:	2600      	movs	r6, #0
          printf("%.3f,", filterbank[m][n]);
 8006cd8:	f858 0b04 	ldr.w	r0, [r8], #4
 8006cdc:	f7fb ff24 	bl	8002b28 <__aeabi_f2d>
        for (int n = 0; n < FILTER_LENGTH; n++) {
 8006ce0:	3601      	adds	r6, #1
          printf("%.3f,", filterbank[m][n]);
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4658      	mov	r0, fp
 8006ce8:	f002 fdf4 	bl	80098d4 <iprintf>
        for (int n = 0; n < FILTER_LENGTH; n++) {
 8006cec:	2e20      	cmp	r6, #32
 8006cee:	d1f3      	bne.n	8006cd8 <dump+0x40>
        printf("\n");
 8006cf0:	200a      	movs	r0, #10
 8006cf2:	3408      	adds	r4, #8
 8006cf4:	f002 fe06 	bl	8009904 <putchar>
      for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8006cf8:	f5b4 7fa8 	cmp.w	r4, #336	; 0x150
 8006cfc:	d1e1      	bne.n	8006cc2 <dump+0x2a>
      printf("e\n");
 8006cfe:	4808      	ldr	r0, [pc, #32]	; (8006d20 <dump+0x88>)
 8006d00:	f002 fe70 	bl	80099e4 <puts>
 8006d04:	e7d3      	b.n	8006cae <dump+0x16>
      printf("mode: %d, elapsed_time: %lu(msec)\n", output_mode, elapsed_time);
 8006d06:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <dump+0x8c>)
 8006d08:	4807      	ldr	r0, [pc, #28]	; (8006d28 <dump+0x90>)
 8006d0a:	7819      	ldrb	r1, [r3, #0]
 8006d0c:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <dump+0x94>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	f002 fde0 	bl	80098d4 <iprintf>
 8006d14:	e7cb      	b.n	8006cae <dump+0x16>
 8006d16:	bf00      	nop
 8006d18:	20000562 	.word	0x20000562
 8006d1c:	200057d0 	.word	0x200057d0
 8006d20:	08010466 	.word	0x08010466
 8006d24:	20000563 	.word	0x20000563
 8006d28:	080104f1 	.word	0x080104f1
 8006d2c:	20007170 	.word	0x20007170
 8006d30:	080104e4 	.word	0x080104e4
 8006d34:	20003acc 	.word	0x20003acc
 8006d38:	080104eb 	.word	0x080104eb

08006d3c <beam_forming>:

/*
 * Apply beam forming
 */
void beam_forming(float32_t *signal, int32_t *l, int32_t *r,
    beam_forming_setting mode, int direction) {
 8006d3c:	b530      	push	{r4, r5, lr}
 8006d3e:	9c03      	ldr	r4, [sp, #12]

  switch (mode) {
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d86d      	bhi.n	8006e20 <beam_forming+0xe4>
 8006d44:	e8df f003 	tbb	[pc, r3]
 8006d48:	5e4f1c02 	.word	0x5e4f1c02
 8006d4c:	1d15      	adds	r5, r2, #4
 8006d4e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d52:	f602 0204 	addw	r2, r2, #2052	; 0x804
  case BROADSIDE:
    for (uint32_t n = 0; n < NN; n++) {
      signal[n] = (float32_t) (l[n + direction] >> 9)
          + (float32_t) (r[n + 2] >> 9);
 8006d56:	f855 3f04 	ldr.w	r3, [r5, #4]!
      signal[n] = (float32_t) (l[n + direction] >> 9)
 8006d5a:	f851 4b04 	ldr.w	r4, [r1], #4
          + (float32_t) (r[n + 2] >> 9);
 8006d5e:	125b      	asrs	r3, r3, #9
 8006d60:	ee07 3a90 	vmov	s15, r3
      signal[n] = (float32_t) (l[n + direction] >> 9)
 8006d64:	1263      	asrs	r3, r4, #9
          + (float32_t) (r[n + 2] >> 9);
 8006d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      signal[n] = (float32_t) (l[n + direction] >> 9)
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (uint32_t n = 0; n < NN; n++) {
 8006d72:	42aa      	cmp	r2, r5
          + (float32_t) (r[n + 2] >> 9);
 8006d74:	ee77 7a27 	vadd.f32	s15, s14, s15
      signal[n] = (float32_t) (l[n + direction] >> 9)
 8006d78:	ece0 7a01 	vstmia	r0!, {s15}
    for (uint32_t n = 0; n < NN; n++) {
 8006d7c:	d1eb      	bne.n	8006d56 <beam_forming+0x1a>
 8006d7e:	bd30      	pop	{r4, r5, pc}
    }
    break;
  case ENDFIRE:
    if (direction != 2) {
 8006d80:	2c02      	cmp	r4, #2
 8006d82:	f101 0304 	add.w	r3, r1, #4
 8006d86:	f601 0104 	addw	r1, r1, #2052	; 0x804
 8006d8a:	d016      	beq.n	8006dba <beam_forming+0x7e>
 8006d8c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
      for (uint32_t n = 0; n < NN; n++) {
        signal[n] = (float32_t) (l[n + 2] >> 9)
 8006d90:	f853 4f04 	ldr.w	r4, [r3, #4]!
            - (float32_t) (r[n + direction] >> 9);
 8006d94:	f852 5b04 	ldr.w	r5, [r2], #4
        signal[n] = (float32_t) (l[n + 2] >> 9)
 8006d98:	1264      	asrs	r4, r4, #9
 8006d9a:	ee07 4a90 	vmov	s15, r4
            - (float32_t) (r[n + direction] >> 9);
 8006d9e:	126c      	asrs	r4, r5, #9
        signal[n] = (float32_t) (l[n + 2] >> 9)
 8006da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
            - (float32_t) (r[n + direction] >> 9);
 8006da4:	ee07 4a90 	vmov	s15, r4
 8006da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for (uint32_t n = 0; n < NN; n++) {
 8006dac:	4299      	cmp	r1, r3
            - (float32_t) (r[n + direction] >> 9);
 8006dae:	ee77 7a67 	vsub.f32	s15, s14, s15
        signal[n] = (float32_t) (l[n + 2] >> 9)
 8006db2:	ece0 7a01 	vstmia	r0!, {s15}
      for (uint32_t n = 0; n < NN; n++) {
 8006db6:	d1eb      	bne.n	8006d90 <beam_forming+0x54>
 8006db8:	bd30      	pop	{r4, r5, pc}
 8006dba:	3204      	adds	r2, #4
      }
    } else {  // Synchronous addition of data from two microphones
      for (uint32_t n = 0; n < NN; n++) {
        signal[n] = (float32_t) (l[n + 2] >> 9) + (float32_t) (r[n + 2] >> 9);
 8006dbc:	f853 4f04 	ldr.w	r4, [r3, #4]!
 8006dc0:	1264      	asrs	r4, r4, #9
 8006dc2:	ee07 4a90 	vmov	s15, r4
 8006dc6:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8006dca:	1264      	asrs	r4, r4, #9
 8006dcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dd0:	ee07 4a90 	vmov	s15, r4
 8006dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for (uint32_t n = 0; n < NN; n++) {
 8006dd8:	4299      	cmp	r1, r3
        signal[n] = (float32_t) (l[n + 2] >> 9) + (float32_t) (r[n + 2] >> 9);
 8006dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dde:	ece0 7a01 	vstmia	r0!, {s15}
      for (uint32_t n = 0; n < NN; n++) {
 8006de2:	d1eb      	bne.n	8006dbc <beam_forming+0x80>
 8006de4:	bd30      	pop	{r4, r5, pc}
 8006de6:	1d0a      	adds	r2, r1, #4
 8006de8:	f601 0104 	addw	r1, r1, #2052	; 0x804
      }
    }
    break;
  case LEFT_MIC_ONLY:
    for (uint32_t n = 0; n < NN; n++) {
      signal[n] = (float32_t) (l[n + 2] >> 9);
 8006dec:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006df0:	125b      	asrs	r3, r3, #9
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (uint32_t n = 0; n < NN; n++) {
 8006dfa:	428a      	cmp	r2, r1
      signal[n] = (float32_t) (l[n + 2] >> 9);
 8006dfc:	ece0 7a01 	vstmia	r0!, {s15}
    for (uint32_t n = 0; n < NN; n++) {
 8006e00:	d1f4      	bne.n	8006dec <beam_forming+0xb0>
 8006e02:	bd30      	pop	{r4, r5, pc}
 8006e04:	1d11      	adds	r1, r2, #4
 8006e06:	f602 0204 	addw	r2, r2, #2052	; 0x804
    }
    break;
  case RIGHT_MIC_ONLY:
    for (uint32_t n = 0; n < NN; n++) {
      signal[n] = (float32_t) (r[n + 2] >> 9);
 8006e0a:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8006e0e:	125b      	asrs	r3, r3, #9
 8006e10:	ee07 3a90 	vmov	s15, r3
 8006e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (uint32_t n = 0; n < NN; n++) {
 8006e18:	4291      	cmp	r1, r2
      signal[n] = (float32_t) (r[n + 2] >> 9);
 8006e1a:	ece0 7a01 	vstmia	r0!, {s15}
    for (uint32_t n = 0; n < NN; n++) {
 8006e1e:	d1f4      	bne.n	8006e0a <beam_forming+0xce>
 8006e20:	bd30      	pop	{r4, r5, pc}
	...

08006e24 <pre_emphasis>:

/*
 * Apply pre emphasis
 */
void pre_emphasis(float32_t *signal, int direction) {
  if (pre_emphasis_enabled) {
 8006e24:	4a07      	ldr	r2, [pc, #28]	; (8006e44 <pre_emphasis+0x20>)
 8006e26:	7812      	ldrb	r2, [r2, #0]
void pre_emphasis(float32_t *signal, int direction) {
 8006e28:	4603      	mov	r3, r0
  if (pre_emphasis_enabled) {
 8006e2a:	b152      	cbz	r2, 8006e42 <pre_emphasis+0x1e>
    if (beam_forming_mode == ENDFIRE && direction != 2) {
 8006e2c:	4a06      	ldr	r2, [pc, #24]	; (8006e48 <pre_emphasis+0x24>)
 8006e2e:	7812      	ldrb	r2, [r2, #0]
 8006e30:	2a01      	cmp	r2, #1
 8006e32:	d103      	bne.n	8006e3c <pre_emphasis+0x18>
 8006e34:	2902      	cmp	r1, #2
 8006e36:	d001      	beq.n	8006e3c <pre_emphasis+0x18>
      apply_weak_pre_emphasis(signal);
 8006e38:	f7ff bcfa 	b.w	8006830 <apply_weak_pre_emphasis>
    } else {
      apply_pre_emphasis(signal);
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff bced 	b.w	800681c <apply_pre_emphasis>
 8006e42:	4770      	bx	lr
 8006e44:	20000564 	.word	0x20000564
 8006e48:	20000561 	.word	0x20000561

08006e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006e4c:	b500      	push	{lr}
 8006e4e:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006e50:	2244      	movs	r2, #68	; 0x44
 8006e52:	2100      	movs	r1, #0
 8006e54:	a805      	add	r0, sp, #20
 8006e56:	f002 f85d 	bl	8008f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e5a:	2214      	movs	r2, #20
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4668      	mov	r0, sp
 8006e60:	f002 f858 	bl	8008f14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e64:	2288      	movs	r2, #136	; 0x88
 8006e66:	2100      	movs	r1, #0
 8006e68:	a816      	add	r0, sp, #88	; 0x58
 8006e6a:	f002 f853 	bl	8008f14 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e72:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006e74:	2210      	movs	r2, #16
 8006e76:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006e78:	2201      	movs	r2, #1
 8006e7a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8006e7c:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006e7e:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8006e80:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e82:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006e84:	2207      	movs	r2, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006e86:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e88:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006e8a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006e8c:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006e8e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006e90:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e92:	f7fd fa79 	bl	8004388 <HAL_RCC_OscConfig>
 8006e96:	b100      	cbz	r0, 8006e9a <SystemClock_Config+0x4e>
 8006e98:	e7fe      	b.n	8006e98 <SystemClock_Config+0x4c>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e9a:	220f      	movs	r2, #15
 8006e9c:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e9e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006ea0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006ea2:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006ea4:	2104      	movs	r1, #4
 8006ea6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006ea8:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006eac:	f7fd fc92 	bl	80047d4 <HAL_RCC_ClockConfig>
 8006eb0:	b100      	cbz	r0, 8006eb4 <SystemClock_Config+0x68>
 8006eb2:	e7fe      	b.n	8006eb2 <SystemClock_Config+0x66>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_DFSDM1;
 8006eb4:	4b08      	ldr	r3, [pc, #32]	; (8006ed8 <SystemClock_Config+0x8c>)
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006eb6:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8006eb8:	9036      	str	r0, [sp, #216]	; 0xd8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006eba:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_DFSDM1;
 8006ebc:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ebe:	f7fd fe4b 	bl	8004b58 <HAL_RCCEx_PeriphCLKConfig>
 8006ec2:	b100      	cbz	r0, 8006ec6 <SystemClock_Config+0x7a>
 8006ec4:	e7fe      	b.n	8006ec4 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006ec6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006eca:	f7fd f991 	bl	80041f0 <HAL_PWREx_ControlVoltageScaling>
 8006ece:	b100      	cbz	r0, 8006ed2 <SystemClock_Config+0x86>
 8006ed0:	e7fe      	b.n	8006ed0 <SystemClock_Config+0x84>
  {
    Error_Handler();
  }
}
 8006ed2:	b039      	add	sp, #228	; 0xe4
 8006ed4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ed8:	00010002 	.word	0x00010002

08006edc <main>:
{
 8006edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	f5ad 5d70 	sub.w	sp, sp, #15360	; 0x3c00
 8006ee4:	b08d      	sub	sp, #52	; 0x34
  int32_t input_buf_r[NN * 2 + 5] = { 0 };
 8006ee6:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 8006eea:	f241 0214 	movw	r2, #4116	; 0x1014
 8006eee:	2100      	movs	r1, #0
 8006ef0:	3008      	adds	r0, #8
 8006ef2:	f002 f80f 	bl	8008f14 <memset>
  int32_t input_buf_l[NN * 2 + 5] = { 0 };
 8006ef6:	f50d 5030 	add.w	r0, sp, #11264	; 0x2c00
 8006efa:	f241 0214 	movw	r2, #4116	; 0x1014
 8006efe:	2100      	movs	r1, #0
  volatile uint16_t dac_out_buf_a[NN * 2] = { 0 };
 8006f00:	ac02      	add	r4, sp, #8
  int32_t input_buf_l[NN * 2 + 5] = { 0 };
 8006f02:	301c      	adds	r0, #28
 8006f04:	f002 f806 	bl	8008f14 <memset>
  volatile uint16_t dac_out_buf_b[NN * 2] = { 0 };
 8006f08:	f60d 0508 	addw	r5, sp, #2056	; 0x808
  volatile uint16_t dac_out_buf_a[NN * 2] = { 0 };
 8006f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f10:	2100      	movs	r1, #0
 8006f12:	4620      	mov	r0, r4
 8006f14:	f001 fffe 	bl	8008f14 <memset>
  volatile uint16_t dac_out_buf_b[NN * 2] = { 0 };
 8006f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f001 fff8 	bl	8008f14 <memset>
  float32_t signal_buf[NN + NN / 2] = { 0.0f };  // NN/2 overlap
 8006f24:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 8006f28:	2100      	movs	r1, #0
 8006f2a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8006f2e:	3008      	adds	r0, #8
 8006f30:	f001 fff0 	bl	8008f14 <memset>
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 8006f34:	4e8d      	ldr	r6, [pc, #564]	; (800716c <main+0x290>)
  HAL_Init();
 8006f36:	f7fc fb4d 	bl	80035d4 <HAL_Init>
  SystemClock_Config();
 8006f3a:	f7ff ff87 	bl	8006e4c <SystemClock_Config>
  MX_GPIO_Init();
 8006f3e:	f7ff fd39 	bl	80069b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8006f42:	f7ff fa95 	bl	8006470 <MX_DMA_Init>
  MX_DAC1_Init();
 8006f46:	f7ff f8b3 	bl	80060b0 <MX_DAC1_Init>
  MX_TIM6_Init();
 8006f4a:	f000 fa1d 	bl	8007388 <MX_TIM6_Init>
  MX_DFSDM1_Init();
 8006f4e:	f7ff f94d 	bl	80061ec <MX_DFSDM1_Init>
  MX_CRC_Init();
 8006f52:	f7ff f881 	bl	8006058 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8006f56:	f7fe ff97 	bl	8005e88 <MX_X_CUBE_AI_Init>
  f_s = SystemCoreClock / hdfsdm1_channel2.Init.OutputClock.Divider
 8006f5a:	4b85      	ldr	r3, [pc, #532]	; (8007170 <main+0x294>)
 8006f5c:	4a85      	ldr	r2, [pc, #532]	; (8007174 <main+0x298>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68d2      	ldr	r2, [r2, #12]
 8006f62:	fbb3 f3f2 	udiv	r3, r3, r2
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 8006f66:	6a32      	ldr	r2, [r6, #32]
 8006f68:	fbb3 f3f2 	udiv	r3, r3, r2
      / hdfsdm1_filter0.Init.FilterParam.IntOversampling;
 8006f6c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f72:	ee00 3a10 	vmov	s0, r3
  init_dsp(f_s);
 8006f76:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8006f7a:	f7ff fc0d 	bl	8006798 <init_dsp>
  HAL_TIM_Base_Start(&htim6);
 8006f7e:	487e      	ldr	r0, [pc, #504]	; (8007178 <main+0x29c>)
 8006f80:	f7fd ffd2 	bl	8004f28 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) dac_out_buf_a, NN * 2,
 8006f84:	2700      	movs	r7, #0
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8006f86:	2100      	movs	r1, #0
 8006f88:	487c      	ldr	r0, [pc, #496]	; (800717c <main+0x2a0>)
 8006f8a:	f7fc fc2c 	bl	80037e6 <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) dac_out_buf_a, NN * 2,
 8006f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f92:	4622      	mov	r2, r4
 8006f94:	4639      	mov	r1, r7
 8006f96:	9700      	str	r7, [sp, #0]
 8006f98:	4878      	ldr	r0, [pc, #480]	; (800717c <main+0x2a0>)
 8006f9a:	f7fc fc4d 	bl	8003838 <HAL_DAC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8006f9e:	2110      	movs	r1, #16
 8006fa0:	4876      	ldr	r0, [pc, #472]	; (800717c <main+0x2a0>)
 8006fa2:	f7fc fc20 	bl	80037e6 <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*) dac_out_buf_b, NN * 2,
 8006fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006faa:	462a      	mov	r2, r5
 8006fac:	2110      	movs	r1, #16
 8006fae:	9700      	str	r7, [sp, #0]
 8006fb0:	4872      	ldr	r0, [pc, #456]	; (800717c <main+0x2a0>)
 8006fb2:	f7fc fc41 	bl	8003838 <HAL_DAC_Start_DMA>
  HAL_Delay(1);
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	f7fc fb30 	bl	800361c <HAL_Delay>
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, input_buf_r + 5,
 8006fbc:	f50d 53e1 	add.w	r3, sp, #7200	; 0x1c20
 8006fc0:	3310      	adds	r3, #16
 8006fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fc6:	f1a3 0114 	sub.w	r1, r3, #20
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f7fc febe 	bl	8003d4c <HAL_DFSDM_FilterRegularStart_DMA>
 8006fd0:	b100      	cbz	r0, 8006fd4 <main+0xf8>
 8006fd2:	e7fe      	b.n	8006fd2 <main+0xf6>
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, input_buf_l + 5,
 8006fd4:	f50d 5130 	add.w	r1, sp, #11264	; 0x2c00
 8006fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fdc:	3130      	adds	r1, #48	; 0x30
 8006fde:	4868      	ldr	r0, [pc, #416]	; (8007180 <main+0x2a4>)
 8006fe0:	f7fc feb4 	bl	8003d4c <HAL_DFSDM_FilterRegularStart_DMA>
 8006fe4:	b100      	cbz	r0, 8006fe8 <main+0x10c>
 8006fe6:	e7fe      	b.n	8006fe6 <main+0x10a>
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 8006fe8:	2201      	movs	r2, #1
 8006fea:	4966      	ldr	r1, [pc, #408]	; (8007184 <main+0x2a8>)
 8006fec:	4866      	ldr	r0, [pc, #408]	; (8007188 <main+0x2ac>)
    if (new_pcm_data_l_a) {  // 1st half of the buffer
 8006fee:	4e67      	ldr	r6, [pc, #412]	; (800718c <main+0x2b0>)
      beam_forming(signal_buf + NN_HALF, input_buf_l, input_buf_r,
 8006ff0:	4f67      	ldr	r7, [pc, #412]	; (8007190 <main+0x2b4>)
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 8006ff2:	f7fe f86f 	bl	80050d4 <HAL_UART_Receive_IT>
 8006ff6:	46b1      	mov	r9, r6
    if (new_pcm_data_l_a) {  // 1st half of the buffer
 8006ff8:	7833      	ldrb	r3, [r6, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d047      	beq.n	800708e <main+0x1b2>
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 8006ffe:	f50d 5381 	add.w	r3, sp, #4128	; 0x1020
 8007002:	3310      	adds	r3, #16
 8007004:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 8007008:	f503 60fb 	add.w	r0, r3, #2008	; 0x7d8
 800700c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007010:	3108      	adds	r1, #8
      beam_forming(signal_buf + NN_HALF, input_buf_l, input_buf_r,
 8007012:	f8df a184 	ldr.w	sl, [pc, #388]	; 8007198 <main+0x2bc>
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 8007016:	f000 faa9 	bl	800756c <arm_copy_f32>
      beam_forming(signal_buf + NN_HALF, input_buf_l, input_buf_r,
 800701a:	f50d 5081 	add.w	r0, sp, #4128	; 0x1020
 800701e:	783b      	ldrb	r3, [r7, #0]
 8007020:	f89a 2000 	ldrb.w	r2, [sl]
 8007024:	9200      	str	r2, [sp, #0]
 8007026:	3010      	adds	r0, #16
 8007028:	f500 7876 	add.w	r8, r0, #984	; 0x3d8
 800702c:	f50d 52e0 	add.w	r2, sp, #7168	; 0x1c00
 8007030:	f50d 5130 	add.w	r1, sp, #11264	; 0x2c00
 8007034:	3208      	adds	r2, #8
 8007036:	311c      	adds	r1, #28
 8007038:	4640      	mov	r0, r8
 800703a:	f7ff fe7f 	bl	8006d3c <beam_forming>
      pre_emphasis(signal_buf + NN_HALF, angle);
 800703e:	f89a 1000 	ldrb.w	r1, [sl]
 8007042:	4640      	mov	r0, r8
 8007044:	f7ff feee 	bl	8006e24 <pre_emphasis>
      overlap_dsp(signal_buf, output_mode);
 8007048:	4b52      	ldr	r3, [pc, #328]	; (8007194 <main+0x2b8>)
 800704a:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 800704e:	7819      	ldrb	r1, [r3, #0]
 8007050:	3008      	adds	r0, #8
 8007052:	f7ff fdeb 	bl	8006c2c <overlap_dsp>
 8007056:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 800705a:	3108      	adds	r1, #8
      for (uint32_t n = 0; n < NN; n++) {
 800705c:	2200      	movs	r2, #0
        dac_out_buf_a[n] = (uint16_t) (((int32_t) signal_buf[n] >> 4) + 2048); // 12bit quantization
 800705e:	ecf1 7a01 	vldmia	r1!, {s15}
 8007062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007066:	ee17 3a90 	vmov	r3, s15
 800706a:	111b      	asrs	r3, r3, #4
 800706c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007070:	b29b      	uxth	r3, r3
 8007072:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
        dac_out_buf_b[n] = dac_out_buf_a[n];
 8007076:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 800707a:	b29b      	uxth	r3, r3
 800707c:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
      for (uint32_t n = 0; n < NN; n++) {
 8007080:	3201      	adds	r2, #1
 8007082:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007086:	d1ea      	bne.n	800705e <main+0x182>
      new_pcm_data_l_a = false;
 8007088:	2300      	movs	r3, #0
 800708a:	f889 3000 	strb.w	r3, [r9]
    if (new_pcm_data_l_b) {  // 2nd half of the buffer
 800708e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800719c <main+0x2c0>
 8007092:	f898 3000 	ldrb.w	r3, [r8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d062      	beq.n	8007160 <main+0x284>
 800709a:	2300      	movs	r3, #0
 800709c:	009a      	lsls	r2, r3, #2
        input_buf_l[n] = input_buf_l[NN_DOUBLE + n];
 800709e:	f50d 5130 	add.w	r1, sp, #11264	; 0x2c00
 80070a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070a6:	311c      	adds	r1, #28
 80070a8:	f50d 5030 	add.w	r0, sp, #11264	; 0x2c00
 80070ac:	301c      	adds	r0, #28
 80070ae:	5889      	ldr	r1, [r1, r2]
 80070b0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        input_buf_r[n] = input_buf_r[NN_DOUBLE + n];
 80070b4:	f50d 51e0 	add.w	r1, sp, #7168	; 0x1c00
 80070b8:	3108      	adds	r1, #8
 80070ba:	588a      	ldr	r2, [r1, r2]
 80070bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for (int n = 0; n < 5; n++) {
 80070c0:	3301      	adds	r3, #1
 80070c2:	2b05      	cmp	r3, #5
 80070c4:	d1ea      	bne.n	800709c <main+0x1c0>
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 80070c6:	f50d 5381 	add.w	r3, sp, #4128	; 0x1020
 80070ca:	3310      	adds	r3, #16
      beam_forming(signal_buf + NN_HALF, input_buf_l + NN, input_buf_r + NN,
 80070cc:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8007198 <main+0x2bc>
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 80070d0:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 80070d4:	f503 60fb 	add.w	r0, r3, #2008	; 0x7d8
 80070d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070dc:	3108      	adds	r1, #8
 80070de:	f000 fa45 	bl	800756c <arm_copy_f32>
      beam_forming(signal_buf + NN_HALF, input_buf_l + NN, input_buf_r + NN,
 80070e2:	783b      	ldrb	r3, [r7, #0]
 80070e4:	f89b 2000 	ldrb.w	r2, [fp]
 80070e8:	9200      	str	r2, [sp, #0]
 80070ea:	f50d 5081 	add.w	r0, sp, #4128	; 0x1020
 80070ee:	3010      	adds	r0, #16
 80070f0:	f50d 52e1 	add.w	r2, sp, #7200	; 0x1c20
 80070f4:	f50d 5130 	add.w	r1, sp, #11264	; 0x2c00
 80070f8:	f500 7a76 	add.w	sl, r0, #984	; 0x3d8
 80070fc:	3210      	adds	r2, #16
 80070fe:	3130      	adds	r1, #48	; 0x30
 8007100:	f502 62fb 	add.w	r2, r2, #2008	; 0x7d8
 8007104:	f201 71ec 	addw	r1, r1, #2028	; 0x7ec
 8007108:	4650      	mov	r0, sl
 800710a:	f7ff fe17 	bl	8006d3c <beam_forming>
      pre_emphasis(signal_buf + NN_HALF, angle);
 800710e:	f89b 1000 	ldrb.w	r1, [fp]
 8007112:	4650      	mov	r0, sl
 8007114:	f7ff fe86 	bl	8006e24 <pre_emphasis>
      overlap_dsp(signal_buf, output_mode);
 8007118:	4b1e      	ldr	r3, [pc, #120]	; (8007194 <main+0x2b8>)
 800711a:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 800711e:	7819      	ldrb	r1, [r3, #0]
 8007120:	3008      	adds	r0, #8
 8007122:	f7ff fd83 	bl	8006c2c <overlap_dsp>
 8007126:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 800712a:	3108      	adds	r1, #8
 800712c:	f44f 7200 	mov.w	r2, #512	; 0x200
            (uint16_t) (((int32_t) signal_buf[n] >> 4) + 2048); // 12bit quantization
 8007130:	ecf1 7a01 	vldmia	r1!, {s15}
 8007134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007138:	ee17 3a90 	vmov	r3, s15
 800713c:	111b      	asrs	r3, r3, #4
 800713e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007142:	b29b      	uxth	r3, r3
        dac_out_buf_a[n_nn] =
 8007144:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
        dac_out_buf_b[n_nn] = dac_out_buf_a[n_nn];
 8007148:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 800714c:	b29b      	uxth	r3, r3
 800714e:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
 8007152:	3201      	adds	r2, #1
      for (uint32_t n = 0; n < NN; n++) {
 8007154:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007158:	d1ea      	bne.n	8007130 <main+0x254>
      new_pcm_data_l_b = false;
 800715a:	2300      	movs	r3, #0
 800715c:	f888 3000 	strb.w	r3, [r8]
    dump();
 8007160:	f7ff fd9a 	bl	8006c98 <dump>
    MX_X_CUBE_AI_Process();
 8007164:	f7fe fe98 	bl	8005e98 <MX_X_CUBE_AI_Process>
    if (new_pcm_data_l_a) {  // 1st half of the buffer
 8007168:	e746      	b.n	8006ff8 <main+0x11c>
 800716a:	bf00      	nop
 800716c:	2000f8dc 	.word	0x2000f8dc
 8007170:	20000568 	.word	0x20000568
 8007174:	2000fa4c 	.word	0x2000fa4c
 8007178:	2000fadc 	.word	0x2000fadc
 800717c:	2000f838 	.word	0x2000f838
 8007180:	2000f9f8 	.word	0x2000f9f8
 8007184:	2000fad8 	.word	0x2000fad8
 8007188:	2000fb64 	.word	0x2000fb64
 800718c:	200090bc 	.word	0x200090bc
 8007190:	20000561 	.word	0x20000561
 8007194:	20000563 	.word	0x20000563
 8007198:	20000560 	.word	0x20000560
 800719c:	200090bd 	.word	0x200090bd

080071a0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
 * @param  hdfsdm_filter DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
  if (!new_pcm_data_l_a && (hdfsdm_filter == &hdfsdm1_filter0)) {
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>)
 80071a2:	781a      	ldrb	r2, [r3, #0]
 80071a4:	b922      	cbnz	r2, 80071b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x10>
 80071a6:	4a05      	ldr	r2, [pc, #20]	; (80071bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 80071a8:	4290      	cmp	r0, r2
    new_pcm_data_l_a = true;  // ready for 1st half of the buffer
 80071aa:	bf04      	itt	eq
 80071ac:	2201      	moveq	r2, #1
 80071ae:	701a      	strbeq	r2, [r3, #0]
  }
  if (!new_pcm_data_r_a && (hdfsdm_filter == &hdfsdm1_filter1)) {
 80071b0:	4b03      	ldr	r3, [pc, #12]	; (80071c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x20>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	200090bc 	.word	0x200090bc
 80071bc:	2000f8dc 	.word	0x2000f8dc
 80071c0:	200090be 	.word	0x200090be

080071c4 <HAL_DFSDM_FilterRegConvCpltCallback>:
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
  if (!new_pcm_data_l_b && (hdfsdm_filter == &hdfsdm1_filter0)) {
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <HAL_DFSDM_FilterRegConvCpltCallback+0x18>)
 80071c6:	781a      	ldrb	r2, [r3, #0]
 80071c8:	b922      	cbnz	r2, 80071d4 <HAL_DFSDM_FilterRegConvCpltCallback+0x10>
 80071ca:	4a05      	ldr	r2, [pc, #20]	; (80071e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 80071cc:	4290      	cmp	r0, r2
    new_pcm_data_l_b = true;  // ready for 2nd half of the buffer
 80071ce:	bf04      	itt	eq
 80071d0:	2201      	moveq	r2, #1
 80071d2:	701a      	strbeq	r2, [r3, #0]
  }
  if (!new_pcm_data_r_b && (hdfsdm_filter == &hdfsdm1_filter1)) {
 80071d4:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <HAL_DFSDM_FilterRegConvCpltCallback+0x20>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	200090bd 	.word	0x200090bd
 80071e0:	2000f8dc 	.word	0x2000f8dc
 80071e4:	200090bf 	.word	0x200090bf

080071e8 <_write>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
int _write(int file, char *ptr, int len) {
 80071e8:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 80071ea:	f04f 33ff 	mov.w	r3, #4294967295
int _write(int file, char *ptr, int len) {
 80071ee:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 80071f0:	4802      	ldr	r0, [pc, #8]	; (80071fc <_write+0x14>)
 80071f2:	b292      	uxth	r2, r2
 80071f4:	f7fe fb59 	bl	80058aa <HAL_UART_Transmit>
  return len;
}
 80071f8:	4620      	mov	r0, r4
 80071fa:	bd10      	pop	{r4, pc}
 80071fc:	2000fb64 	.word	0x2000fb64

08007200 <HAL_GPIO_EXTI_Callback>:

//  (This func is commented out: for a debug purpose only)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007200:	4770      	bx	lr
	...

08007204 <HAL_UART_RxCpltCallback>:
 * One-byte command reception from an application processor
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
  char cmd;

  cmd = rxbuf[0];
 8007204:	4b23      	ldr	r3, [pc, #140]	; (8007294 <HAL_UART_RxCpltCallback+0x90>)
 8007206:	781b      	ldrb	r3, [r3, #0]

  switch (cmd) {
 8007208:	2b63      	cmp	r3, #99	; 0x63
 800720a:	d036      	beq.n	800727a <HAL_UART_RxCpltCallback+0x76>
 800720c:	d815      	bhi.n	800723a <HAL_UART_RxCpltCallback+0x36>
 800720e:	2b52      	cmp	r3, #82	; 0x52
 8007210:	d037      	beq.n	8007282 <HAL_UART_RxCpltCallback+0x7e>
 8007212:	d80a      	bhi.n	800722a <HAL_UART_RxCpltCallback+0x26>
 8007214:	2b4c      	cmp	r3, #76	; 0x4c
 8007216:	d02b      	beq.n	8007270 <HAL_UART_RxCpltCallback+0x6c>
 8007218:	2b50      	cmp	r3, #80	; 0x50
 800721a:	d021      	beq.n	8007260 <HAL_UART_RxCpltCallback+0x5c>
  case 't':
    debug_output = ELAPSED_TIME;
    break;
    // The others
  default:
    output_mode = (mode) (cmd - 0x30);
 800721c:	4a1e      	ldr	r2, [pc, #120]	; (8007298 <HAL_UART_RxCpltCallback+0x94>)
 800721e:	3b30      	subs	r3, #48	; 0x30
 8007220:	b2db      	uxtb	r3, r3
 8007222:	7013      	strb	r3, [r2, #0]
    printing = true;
 8007224:	2201      	movs	r2, #1
 8007226:	4b1d      	ldr	r3, [pc, #116]	; (800729c <HAL_UART_RxCpltCallback+0x98>)
 8007228:	e01c      	b.n	8007264 <HAL_UART_RxCpltCallback+0x60>
  switch (cmd) {
 800722a:	2b5d      	cmp	r3, #93	; 0x5d
 800722c:	d02e      	beq.n	800728c <HAL_UART_RxCpltCallback+0x88>
 800722e:	2b62      	cmp	r3, #98	; 0x62
 8007230:	d029      	beq.n	8007286 <HAL_UART_RxCpltCallback+0x82>
 8007232:	2b5b      	cmp	r3, #91	; 0x5b
 8007234:	d1f2      	bne.n	800721c <HAL_UART_RxCpltCallback+0x18>
    beam_forming_mode = LEFT_MIC_ONLY;
 8007236:	2202      	movs	r2, #2
 8007238:	e026      	b.n	8007288 <HAL_UART_RxCpltCallback+0x84>
  switch (cmd) {
 800723a:	2b6c      	cmp	r3, #108	; 0x6c
 800723c:	d01b      	beq.n	8007276 <HAL_UART_RxCpltCallback+0x72>
 800723e:	d807      	bhi.n	8007250 <HAL_UART_RxCpltCallback+0x4c>
 8007240:	2b65      	cmp	r3, #101	; 0x65
 8007242:	f04f 0201 	mov.w	r2, #1
 8007246:	d01f      	beq.n	8007288 <HAL_UART_RxCpltCallback+0x84>
 8007248:	2b66      	cmp	r3, #102	; 0x66
 800724a:	d1e7      	bne.n	800721c <HAL_UART_RxCpltCallback+0x18>
    debug_output = ELAPSED_TIME;
 800724c:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <HAL_UART_RxCpltCallback+0x9c>)
 800724e:	e009      	b.n	8007264 <HAL_UART_RxCpltCallback+0x60>
  switch (cmd) {
 8007250:	2b72      	cmp	r3, #114	; 0x72
 8007252:	d014      	beq.n	800727e <HAL_UART_RxCpltCallback+0x7a>
 8007254:	2b74      	cmp	r3, #116	; 0x74
 8007256:	d01b      	beq.n	8007290 <HAL_UART_RxCpltCallback+0x8c>
 8007258:	2b70      	cmp	r3, #112	; 0x70
 800725a:	d1df      	bne.n	800721c <HAL_UART_RxCpltCallback+0x18>
    pre_emphasis_enabled = false;
 800725c:	2200      	movs	r2, #0
 800725e:	e000      	b.n	8007262 <HAL_UART_RxCpltCallback+0x5e>
    pre_emphasis_enabled = true;
 8007260:	2201      	movs	r2, #1
    pre_emphasis_enabled = false;
 8007262:	4b10      	ldr	r3, [pc, #64]	; (80072a4 <HAL_UART_RxCpltCallback+0xa0>)
    printing = true;
 8007264:	701a      	strb	r2, [r3, #0]
    break;
  }

  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 8007266:	490b      	ldr	r1, [pc, #44]	; (8007294 <HAL_UART_RxCpltCallback+0x90>)
 8007268:	480f      	ldr	r0, [pc, #60]	; (80072a8 <HAL_UART_RxCpltCallback+0xa4>)
 800726a:	2201      	movs	r2, #1
 800726c:	f7fd bf32 	b.w	80050d4 <HAL_UART_Receive_IT>
    angle = LEFT2;
 8007270:	2200      	movs	r2, #0
    angle = RIGHT2;
 8007272:	4b0e      	ldr	r3, [pc, #56]	; (80072ac <HAL_UART_RxCpltCallback+0xa8>)
 8007274:	e7f6      	b.n	8007264 <HAL_UART_RxCpltCallback+0x60>
    angle = LEFT;
 8007276:	2201      	movs	r2, #1
 8007278:	e7fb      	b.n	8007272 <HAL_UART_RxCpltCallback+0x6e>
    angle = CENTER;
 800727a:	2202      	movs	r2, #2
 800727c:	e7f9      	b.n	8007272 <HAL_UART_RxCpltCallback+0x6e>
    angle = RIGHT;
 800727e:	2203      	movs	r2, #3
 8007280:	e7f7      	b.n	8007272 <HAL_UART_RxCpltCallback+0x6e>
    angle = RIGHT2;
 8007282:	2204      	movs	r2, #4
 8007284:	e7f5      	b.n	8007272 <HAL_UART_RxCpltCallback+0x6e>
    beam_forming_mode = BROADSIDE;
 8007286:	2200      	movs	r2, #0
    beam_forming_mode = RIGHT_MIC_ONLY;
 8007288:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <HAL_UART_RxCpltCallback+0xac>)
 800728a:	e7eb      	b.n	8007264 <HAL_UART_RxCpltCallback+0x60>
 800728c:	2203      	movs	r2, #3
 800728e:	e7fb      	b.n	8007288 <HAL_UART_RxCpltCallback+0x84>
    debug_output = ELAPSED_TIME;
 8007290:	2202      	movs	r2, #2
 8007292:	e7db      	b.n	800724c <HAL_UART_RxCpltCallback+0x48>
 8007294:	2000fad8 	.word	0x2000fad8
 8007298:	20000563 	.word	0x20000563
 800729c:	200090c4 	.word	0x200090c4
 80072a0:	20000562 	.word	0x20000562
 80072a4:	20000564 	.word	0x20000564
 80072a8:	2000fb64 	.word	0x2000fb64
 80072ac:	20000560 	.word	0x20000560
 80072b0:	20000561 	.word	0x20000561

080072b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80072b4:	e7fe      	b.n	80072b4 <Error_Handler>
	...

080072b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072b8:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <HAL_MspInit+0x2c>)
 80072ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072bc:	f042 0201 	orr.w	r2, r2, #1
 80072c0:	661a      	str	r2, [r3, #96]	; 0x60
 80072c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80072c4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072c6:	f002 0201 	and.w	r2, r2, #1
 80072ca:	9200      	str	r2, [sp, #0]
 80072cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80072ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80072d4:	659a      	str	r2, [r3, #88]	; 0x58
 80072d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072dc:	9301      	str	r3, [sp, #4]
 80072de:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80072e0:	b002      	add	sp, #8
 80072e2:	4770      	bx	lr
 80072e4:	40021000 	.word	0x40021000

080072e8 <SVC_Handler>:
 80072e8:	4770      	bx	lr

080072ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80072ea:	4770      	bx	lr

080072ec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80072ec:	f7fc b988 	b.w	8003600 <HAL_IncTick>

080072f0 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80072f0:	4801      	ldr	r0, [pc, #4]	; (80072f8 <DMA1_Channel3_IRQHandler+0x8>)
 80072f2:	f7fc be43 	b.w	8003f7c <HAL_DMA_IRQHandler>
 80072f6:	bf00      	nop
 80072f8:	2000f84c 	.word	0x2000f84c

080072fc <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80072fc:	4801      	ldr	r0, [pc, #4]	; (8007304 <DMA1_Channel4_IRQHandler+0x8>)
 80072fe:	f7fc be3d 	b.w	8003f7c <HAL_DMA_IRQHandler>
 8007302:	bf00      	nop
 8007304:	2000f9b0 	.word	0x2000f9b0

08007308 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8007308:	4801      	ldr	r0, [pc, #4]	; (8007310 <DMA1_Channel5_IRQHandler+0x8>)
 800730a:	f7fc be37 	b.w	8003f7c <HAL_DMA_IRQHandler>
 800730e:	bf00      	nop
 8007310:	2000f968 	.word	0x2000f968

08007314 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007314:	4801      	ldr	r0, [pc, #4]	; (800731c <DMA1_Channel7_IRQHandler+0x8>)
 8007316:	f7fc be31 	b.w	8003f7c <HAL_DMA_IRQHandler>
 800731a:	bf00      	nop
 800731c:	2000fb1c 	.word	0x2000fb1c

08007320 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007320:	4801      	ldr	r0, [pc, #4]	; (8007328 <USART2_IRQHandler+0x8>)
 8007322:	f7fe b805 	b.w	8005330 <HAL_UART_IRQHandler>
 8007326:	bf00      	nop
 8007328:	2000fb64 	.word	0x2000fb64

0800732c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800732c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007330:	f7fc bf4a 	b.w	80041c8 <HAL_GPIO_EXTI_IRQHandler>

08007334 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8007334:	4801      	ldr	r0, [pc, #4]	; (800733c <DMA2_Channel5_IRQHandler+0x8>)
 8007336:	f7fc be21 	b.w	8003f7c <HAL_DMA_IRQHandler>
 800733a:	bf00      	nop
 800733c:	2000f894 	.word	0x2000f894

08007340 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007340:	490f      	ldr	r1, [pc, #60]	; (8007380 <SystemInit+0x40>)
 8007342:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007346:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800734a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800734e:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <SystemInit+0x44>)
 8007350:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007352:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8007354:	f042 0201 	orr.w	r2, r2, #1
 8007358:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800735a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8007362:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8007366:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8007368:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800736c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007374:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007376:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007378:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800737c:	608b      	str	r3, [r1, #8]
 800737e:	4770      	bx	lr
 8007380:	e000ed00 	.word	0xe000ed00
 8007384:	40021000 	.word	0x40021000

08007388 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8007388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
 800738a:	480f      	ldr	r0, [pc, #60]	; (80073c8 <MX_TIM6_Init+0x40>)
 800738c:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <MX_TIM6_Init+0x44>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800738e:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 0;
 8007390:	e880 0018 	stmia.w	r0, {r3, r4}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 4095;
 8007394:	f640 73ff 	movw	r3, #4095	; 0xfff
 8007398:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800739a:	2380      	movs	r3, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800739c:	9401      	str	r4, [sp, #4]
 800739e:	9402      	str	r4, [sp, #8]
 80073a0:	9403      	str	r4, [sp, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073a2:	6084      	str	r4, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80073a4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80073a6:	f7fd fe3f 	bl	8005028 <HAL_TIM_Base_Init>
 80073aa:	b108      	cbz	r0, 80073b0 <MX_TIM6_Init+0x28>
  {
    Error_Handler();
 80073ac:	f7ff ff82 	bl	80072b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80073b0:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80073b2:	a901      	add	r1, sp, #4
 80073b4:	4804      	ldr	r0, [pc, #16]	; (80073c8 <MX_TIM6_Init+0x40>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80073b6:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073b8:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80073ba:	f7fd fe4f 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 80073be:	b108      	cbz	r0, 80073c4 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80073c0:	f7ff ff78 	bl	80072b4 <Error_Handler>
  }

}
 80073c4:	b004      	add	sp, #16
 80073c6:	bd10      	pop	{r4, pc}
 80073c8:	2000fadc 	.word	0x2000fadc
 80073cc:	40001000 	.word	0x40001000

080073d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 80073d0:	6802      	ldr	r2, [r0, #0]
 80073d2:	4b08      	ldr	r3, [pc, #32]	; (80073f4 <HAL_TIM_Base_MspInit+0x24>)
 80073d4:	429a      	cmp	r2, r3
{
 80073d6:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM6)
 80073d8:	d10a      	bne.n	80073f0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80073da:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80073de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073e0:	f042 0210 	orr.w	r2, r2, #16
 80073e4:	659a      	str	r2, [r3, #88]	; 0x58
 80073e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e8:	f003 0310 	and.w	r3, r3, #16
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80073f0:	b002      	add	sp, #8
 80073f2:	4770      	bx	lr
 80073f4:	40001000 	.word	0x40001000

080073f8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80073f8:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80073fa:	480c      	ldr	r0, [pc, #48]	; (800742c <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 460800;
 80073fc:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <MX_USART2_UART_Init+0x38>)
 80073fe:	f44f 2ee1 	mov.w	lr, #460800	; 0x70800
 8007402:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007406:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007408:	2300      	movs	r3, #0
 800740a:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800740c:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800740e:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007410:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007412:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007414:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007416:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007418:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800741a:	f7fe facf 	bl	80059bc <HAL_UART_Init>
 800741e:	b118      	cbz	r0, 8007428 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8007420:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007424:	f7ff bf46 	b.w	80072b4 <Error_Handler>
 8007428:	bd08      	pop	{r3, pc}
 800742a:	bf00      	nop
 800742c:	2000fb64 	.word	0x2000fb64
 8007430:	40004400 	.word	0x40004400

08007434 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	4605      	mov	r5, r0
 8007438:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800743a:	2214      	movs	r2, #20
 800743c:	2100      	movs	r1, #0
 800743e:	a803      	add	r0, sp, #12
 8007440:	f001 fd68 	bl	8008f14 <memset>
  if(uartHandle->Instance==USART2)
 8007444:	682a      	ldr	r2, [r5, #0]
 8007446:	4b22      	ldr	r3, [pc, #136]	; (80074d0 <HAL_UART_MspInit+0x9c>)
 8007448:	429a      	cmp	r2, r3
 800744a:	d13e      	bne.n	80074ca <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800744c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007450:	2602      	movs	r6, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 8007452:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8007454:	4c1f      	ldr	r4, [pc, #124]	; (80074d4 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8007456:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800745a:	659a      	str	r2, [r3, #88]	; 0x58
 800745c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800745e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8007462:	9201      	str	r2, [sp, #4]
 8007464:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007468:	f042 0201 	orr.w	r2, r2, #1
 800746c:	64da      	str	r2, [r3, #76]	; 0x4c
 800746e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007470:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	9302      	str	r3, [sp, #8]
 8007478:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800747a:	230c      	movs	r3, #12
 800747c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800747e:	2303      	movs	r3, #3
 8007480:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007486:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007488:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800748a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800748c:	f7fc fdc0 	bl	8004010 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8007490:	4b11      	ldr	r3, [pc, #68]	; (80074d8 <HAL_UART_MspInit+0xa4>)
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8007492:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007496:	2310      	movs	r3, #16
 8007498:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800749a:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800749c:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800749e:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80074a0:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80074a2:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80074a4:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80074a6:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80074a8:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80074aa:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80074ac:	f7fc fc9e 	bl	8003dec <HAL_DMA_Init>
 80074b0:	b108      	cbz	r0, 80074b6 <HAL_UART_MspInit+0x82>
    {
      Error_Handler();
 80074b2:	f7ff feff 	bl	80072b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80074b6:	2200      	movs	r2, #0
 80074b8:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80074ba:	66ac      	str	r4, [r5, #104]	; 0x68
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80074bc:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80074be:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80074c0:	f7fc f8cc 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80074c4:	2026      	movs	r0, #38	; 0x26
 80074c6:	f7fc f8fd 	bl	80036c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80074ca:	b008      	add	sp, #32
 80074cc:	bd70      	pop	{r4, r5, r6, pc}
 80074ce:	bf00      	nop
 80074d0:	40004400 	.word	0x40004400
 80074d4:	2000fb1c 	.word	0x2000fb1c
 80074d8:	40020080 	.word	0x40020080

080074dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80074dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007514 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80074e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80074e2:	e003      	b.n	80074ec <LoopCopyDataInit>

080074e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80074e4:	4b0c      	ldr	r3, [pc, #48]	; (8007518 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80074e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80074e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80074ea:	3104      	adds	r1, #4

080074ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80074ec:	480b      	ldr	r0, [pc, #44]	; (800751c <LoopForever+0xa>)
	ldr	r3, =_edata
 80074ee:	4b0c      	ldr	r3, [pc, #48]	; (8007520 <LoopForever+0xe>)
	adds	r2, r0, r1
 80074f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80074f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80074f4:	d3f6      	bcc.n	80074e4 <CopyDataInit>
	ldr	r2, =_sbss
 80074f6:	4a0b      	ldr	r2, [pc, #44]	; (8007524 <LoopForever+0x12>)
	b	LoopFillZerobss
 80074f8:	e002      	b.n	8007500 <LoopFillZerobss>

080074fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80074fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80074fc:	f842 3b04 	str.w	r3, [r2], #4

08007500 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007500:	4b09      	ldr	r3, [pc, #36]	; (8007528 <LoopForever+0x16>)
	cmp	r2, r3
 8007502:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007504:	d3f9      	bcc.n	80074fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007506:	f7ff ff1b 	bl	8007340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800750a:	f001 fcc5 	bl	8008e98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800750e:	f7ff fce5 	bl	8006edc <main>

08007512 <LoopForever>:

LoopForever:
    b LoopForever
 8007512:	e7fe      	b.n	8007512 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007514:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007518:	08024518 	.word	0x08024518
	ldr	r0, =_sdata
 800751c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007520:	20000740 	.word	0x20000740
	ldr	r2, =_sbss
 8007524:	20000740 	.word	0x20000740
	ldr	r3, = _ebss
 8007528:	2000fbe0 	.word	0x2000fbe0

0800752c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800752c:	e7fe      	b.n	800752c <ADC1_2_IRQHandler>
	...

08007530 <arm_fill_f32>:
 8007530:	b410      	push	{r4}
 8007532:	088c      	lsrs	r4, r1, #2
 8007534:	d010      	beq.n	8007558 <arm_fill_f32+0x28>
 8007536:	f100 0310 	add.w	r3, r0, #16
 800753a:	4622      	mov	r2, r4
 800753c:	3a01      	subs	r2, #1
 800753e:	ed03 0a04 	vstr	s0, [r3, #-16]
 8007542:	ed03 0a03 	vstr	s0, [r3, #-12]
 8007546:	ed03 0a02 	vstr	s0, [r3, #-8]
 800754a:	ed03 0a01 	vstr	s0, [r3, #-4]
 800754e:	f103 0310 	add.w	r3, r3, #16
 8007552:	d1f3      	bne.n	800753c <arm_fill_f32+0xc>
 8007554:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8007558:	f011 0103 	ands.w	r1, r1, #3
 800755c:	d003      	beq.n	8007566 <arm_fill_f32+0x36>
 800755e:	3901      	subs	r1, #1
 8007560:	eca0 0a01 	vstmia	r0!, {s0}
 8007564:	d1fb      	bne.n	800755e <arm_fill_f32+0x2e>
 8007566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800756a:	4770      	bx	lr

0800756c <arm_copy_f32>:
 800756c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007570:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8007574:	d01e      	beq.n	80075b4 <arm_copy_f32+0x48>
 8007576:	f100 0410 	add.w	r4, r0, #16
 800757a:	f101 0310 	add.w	r3, r1, #16
 800757e:	4645      	mov	r5, r8
 8007580:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8007584:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 8007588:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800758c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8007590:	f843 6c04 	str.w	r6, [r3, #-4]
 8007594:	3d01      	subs	r5, #1
 8007596:	f843 cc10 	str.w	ip, [r3, #-16]
 800759a:	f843 ec0c 	str.w	lr, [r3, #-12]
 800759e:	f843 7c08 	str.w	r7, [r3, #-8]
 80075a2:	f104 0410 	add.w	r4, r4, #16
 80075a6:	f103 0310 	add.w	r3, r3, #16
 80075aa:	d1e9      	bne.n	8007580 <arm_copy_f32+0x14>
 80075ac:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80075b0:	4440      	add	r0, r8
 80075b2:	4441      	add	r1, r8
 80075b4:	f012 0203 	ands.w	r2, r2, #3
 80075b8:	d005      	beq.n	80075c6 <arm_copy_f32+0x5a>
 80075ba:	f850 3b04 	ldr.w	r3, [r0], #4
 80075be:	f841 3b04 	str.w	r3, [r1], #4
 80075c2:	3a01      	subs	r2, #1
 80075c4:	d1f9      	bne.n	80075ba <arm_copy_f32+0x4e>
 80075c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ca:	bf00      	nop

080075cc <arm_mean_f32>:
 80075cc:	b430      	push	{r4, r5}
 80075ce:	088d      	lsrs	r5, r1, #2
 80075d0:	eddf 7a17 	vldr	s15, [pc, #92]	; 8007630 <arm_mean_f32+0x64>
 80075d4:	d018      	beq.n	8007608 <arm_mean_f32+0x3c>
 80075d6:	f100 0310 	add.w	r3, r0, #16
 80075da:	462c      	mov	r4, r5
 80075dc:	ed13 7a04 	vldr	s14, [r3, #-16]
 80075e0:	ed53 5a03 	vldr	s11, [r3, #-12]
 80075e4:	ed13 6a02 	vldr	s12, [r3, #-8]
 80075e8:	ed53 6a01 	vldr	s13, [r3, #-4]
 80075ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075f0:	3c01      	subs	r4, #1
 80075f2:	ee77 7a25 	vadd.f32	s15, s14, s11
 80075f6:	f103 0310 	add.w	r3, r3, #16
 80075fa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80075fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007602:	d1eb      	bne.n	80075dc <arm_mean_f32+0x10>
 8007604:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007608:	f011 0303 	ands.w	r3, r1, #3
 800760c:	d005      	beq.n	800761a <arm_mean_f32+0x4e>
 800760e:	ecb0 7a01 	vldmia	r0!, {s14}
 8007612:	3b01      	subs	r3, #1
 8007614:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007618:	d1f9      	bne.n	800760e <arm_mean_f32+0x42>
 800761a:	ee07 1a10 	vmov	s14, r1
 800761e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007622:	bc30      	pop	{r4, r5}
 8007624:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007628:	edc2 6a00 	vstr	s13, [r2]
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	00000000 	.word	0x00000000

08007634 <arm_rfft_fast_init_f32>:
 8007634:	084b      	lsrs	r3, r1, #1
 8007636:	2b80      	cmp	r3, #128	; 0x80
 8007638:	b410      	push	{r4}
 800763a:	8201      	strh	r1, [r0, #16]
 800763c:	8003      	strh	r3, [r0, #0]
 800763e:	d046      	beq.n	80076ce <arm_rfft_fast_init_f32+0x9a>
 8007640:	d916      	bls.n	8007670 <arm_rfft_fast_init_f32+0x3c>
 8007642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007646:	d03c      	beq.n	80076c2 <arm_rfft_fast_init_f32+0x8e>
 8007648:	d928      	bls.n	800769c <arm_rfft_fast_init_f32+0x68>
 800764a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800764e:	d01f      	beq.n	8007690 <arm_rfft_fast_init_f32+0x5c>
 8007650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007654:	d112      	bne.n	800767c <arm_rfft_fast_init_f32+0x48>
 8007656:	4920      	ldr	r1, [pc, #128]	; (80076d8 <arm_rfft_fast_init_f32+0xa4>)
 8007658:	4a20      	ldr	r2, [pc, #128]	; (80076dc <arm_rfft_fast_init_f32+0xa8>)
 800765a:	4b21      	ldr	r3, [pc, #132]	; (80076e0 <arm_rfft_fast_init_f32+0xac>)
 800765c:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8007660:	8184      	strh	r4, [r0, #12]
 8007662:	6081      	str	r1, [r0, #8]
 8007664:	6042      	str	r2, [r0, #4]
 8007666:	6143      	str	r3, [r0, #20]
 8007668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800766c:	2000      	movs	r0, #0
 800766e:	4770      	bx	lr
 8007670:	2b20      	cmp	r3, #32
 8007672:	d01c      	beq.n	80076ae <arm_rfft_fast_init_f32+0x7a>
 8007674:	2b40      	cmp	r3, #64	; 0x40
 8007676:	d006      	beq.n	8007686 <arm_rfft_fast_init_f32+0x52>
 8007678:	2b10      	cmp	r3, #16
 800767a:	d01d      	beq.n	80076b8 <arm_rfft_fast_init_f32+0x84>
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	2438      	movs	r4, #56	; 0x38
 8007688:	4916      	ldr	r1, [pc, #88]	; (80076e4 <arm_rfft_fast_init_f32+0xb0>)
 800768a:	4a17      	ldr	r2, [pc, #92]	; (80076e8 <arm_rfft_fast_init_f32+0xb4>)
 800768c:	4b17      	ldr	r3, [pc, #92]	; (80076ec <arm_rfft_fast_init_f32+0xb8>)
 800768e:	e7e7      	b.n	8007660 <arm_rfft_fast_init_f32+0x2c>
 8007690:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8007694:	4916      	ldr	r1, [pc, #88]	; (80076f0 <arm_rfft_fast_init_f32+0xbc>)
 8007696:	4a17      	ldr	r2, [pc, #92]	; (80076f4 <arm_rfft_fast_init_f32+0xc0>)
 8007698:	4b17      	ldr	r3, [pc, #92]	; (80076f8 <arm_rfft_fast_init_f32+0xc4>)
 800769a:	e7e1      	b.n	8007660 <arm_rfft_fast_init_f32+0x2c>
 800769c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a0:	d1ec      	bne.n	800767c <arm_rfft_fast_init_f32+0x48>
 80076a2:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80076a6:	4915      	ldr	r1, [pc, #84]	; (80076fc <arm_rfft_fast_init_f32+0xc8>)
 80076a8:	4a15      	ldr	r2, [pc, #84]	; (8007700 <arm_rfft_fast_init_f32+0xcc>)
 80076aa:	4b16      	ldr	r3, [pc, #88]	; (8007704 <arm_rfft_fast_init_f32+0xd0>)
 80076ac:	e7d8      	b.n	8007660 <arm_rfft_fast_init_f32+0x2c>
 80076ae:	2430      	movs	r4, #48	; 0x30
 80076b0:	4915      	ldr	r1, [pc, #84]	; (8007708 <arm_rfft_fast_init_f32+0xd4>)
 80076b2:	4a16      	ldr	r2, [pc, #88]	; (800770c <arm_rfft_fast_init_f32+0xd8>)
 80076b4:	4b16      	ldr	r3, [pc, #88]	; (8007710 <arm_rfft_fast_init_f32+0xdc>)
 80076b6:	e7d3      	b.n	8007660 <arm_rfft_fast_init_f32+0x2c>
 80076b8:	2414      	movs	r4, #20
 80076ba:	4916      	ldr	r1, [pc, #88]	; (8007714 <arm_rfft_fast_init_f32+0xe0>)
 80076bc:	4a16      	ldr	r2, [pc, #88]	; (8007718 <arm_rfft_fast_init_f32+0xe4>)
 80076be:	4b17      	ldr	r3, [pc, #92]	; (800771c <arm_rfft_fast_init_f32+0xe8>)
 80076c0:	e7ce      	b.n	8007660 <arm_rfft_fast_init_f32+0x2c>
 80076c2:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80076c6:	4916      	ldr	r1, [pc, #88]	; (8007720 <arm_rfft_fast_init_f32+0xec>)
 80076c8:	4a16      	ldr	r2, [pc, #88]	; (8007724 <arm_rfft_fast_init_f32+0xf0>)
 80076ca:	4b17      	ldr	r3, [pc, #92]	; (8007728 <arm_rfft_fast_init_f32+0xf4>)
 80076cc:	e7c8      	b.n	8007660 <arm_rfft_fast_init_f32+0x2c>
 80076ce:	24d0      	movs	r4, #208	; 0xd0
 80076d0:	4916      	ldr	r1, [pc, #88]	; (800772c <arm_rfft_fast_init_f32+0xf8>)
 80076d2:	4a17      	ldr	r2, [pc, #92]	; (8007730 <arm_rfft_fast_init_f32+0xfc>)
 80076d4:	4b17      	ldr	r3, [pc, #92]	; (8007734 <arm_rfft_fast_init_f32+0x100>)
 80076d6:	e7c3      	b.n	8007660 <arm_rfft_fast_init_f32+0x2c>
 80076d8:	0801fb68 	.word	0x0801fb68
 80076dc:	0801055c 	.word	0x0801055c
 80076e0:	080166cc 	.word	0x080166cc
 80076e4:	0801465c 	.word	0x0801465c
 80076e8:	08021928 	.word	0x08021928
 80076ec:	08023e18 	.word	0x08023e18
 80076f0:	0801d04c 	.word	0x0801d04c
 80076f4:	0801af4c 	.word	0x0801af4c
 80076f8:	080146cc 	.word	0x080146cc
 80076fc:	08023aa8 	.word	0x08023aa8
 8007700:	0801a6cc 	.word	0x0801a6cc
 8007704:	08021b28 	.word	0x08021b28
 8007708:	0801df04 	.word	0x0801df04
 800770c:	0801cf4c 	.word	0x0801cf4c
 8007710:	0801455c 	.word	0x0801455c
 8007714:	0801de5c 	.word	0x0801de5c
 8007718:	0801aecc 	.word	0x0801aecc
 800771c:	0801de84 	.word	0x0801de84
 8007720:	08022328 	.word	0x08022328
 8007724:	0801eb68 	.word	0x0801eb68
 8007728:	080226a8 	.word	0x080226a8
 800772c:	08024018 	.word	0x08024018
 8007730:	0801e768 	.word	0x0801e768
 8007734:	080236a8 	.word	0x080236a8

08007738 <arm_rfft_fast_f32>:
 8007738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800773c:	8a06      	ldrh	r6, [r0, #16]
 800773e:	0876      	lsrs	r6, r6, #1
 8007740:	4607      	mov	r7, r0
 8007742:	4615      	mov	r5, r2
 8007744:	8006      	strh	r6, [r0, #0]
 8007746:	460c      	mov	r4, r1
 8007748:	2b00      	cmp	r3, #0
 800774a:	d15c      	bne.n	8007806 <arm_rfft_fast_f32+0xce>
 800774c:	461a      	mov	r2, r3
 800774e:	2301      	movs	r3, #1
 8007750:	f000 fbe4 	bl	8007f1c <arm_cfft_f32>
 8007754:	edd4 7a00 	vldr	s15, [r4]
 8007758:	ed94 7a01 	vldr	s14, [r4, #4]
 800775c:	883e      	ldrh	r6, [r7, #0]
 800775e:	6978      	ldr	r0, [r7, #20]
 8007760:	ee37 7a07 	vadd.f32	s14, s14, s14
 8007764:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007768:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 800776c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007770:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007774:	3e01      	subs	r6, #1
 8007776:	ee26 7a83 	vmul.f32	s14, s13, s6
 800777a:	ee67 7a83 	vmul.f32	s15, s15, s6
 800777e:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8007782:	ed85 7a00 	vstr	s14, [r5]
 8007786:	edc5 7a01 	vstr	s15, [r5, #4]
 800778a:	3010      	adds	r0, #16
 800778c:	f105 0210 	add.w	r2, r5, #16
 8007790:	3b08      	subs	r3, #8
 8007792:	f104 0110 	add.w	r1, r4, #16
 8007796:	ed93 7a02 	vldr	s14, [r3, #8]
 800779a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800779e:	ed10 6a02 	vldr	s12, [r0, #-8]
 80077a2:	edd3 3a03 	vldr	s7, [r3, #12]
 80077a6:	ed11 5a01 	vldr	s10, [r1, #-4]
 80077aa:	ed50 5a01 	vldr	s11, [r0, #-4]
 80077ae:	ee77 7a66 	vsub.f32	s15, s14, s13
 80077b2:	ee77 4a26 	vadd.f32	s9, s14, s13
 80077b6:	ee33 4a85 	vadd.f32	s8, s7, s10
 80077ba:	ee66 6a27 	vmul.f32	s13, s12, s15
 80077be:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80077c2:	ee35 5a63 	vsub.f32	s10, s10, s7
 80077c6:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80077ca:	ee77 7a05 	vadd.f32	s15, s14, s10
 80077ce:	ee26 6a04 	vmul.f32	s12, s12, s8
 80077d2:	ee65 5a84 	vmul.f32	s11, s11, s8
 80077d6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80077da:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80077de:	ee67 7a83 	vmul.f32	s15, s15, s6
 80077e2:	ee27 7a03 	vmul.f32	s14, s14, s6
 80077e6:	3e01      	subs	r6, #1
 80077e8:	ed02 7a02 	vstr	s14, [r2, #-8]
 80077ec:	ed42 7a01 	vstr	s15, [r2, #-4]
 80077f0:	f1a3 0308 	sub.w	r3, r3, #8
 80077f4:	f101 0108 	add.w	r1, r1, #8
 80077f8:	f100 0008 	add.w	r0, r0, #8
 80077fc:	f102 0208 	add.w	r2, r2, #8
 8007800:	d1c9      	bne.n	8007796 <arm_rfft_fast_f32+0x5e>
 8007802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007806:	edd1 7a00 	vldr	s15, [r1]
 800780a:	edd1 6a01 	vldr	s13, [r1, #4]
 800780e:	6941      	ldr	r1, [r0, #20]
 8007810:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007814:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007818:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800781c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007820:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007824:	3e01      	subs	r6, #1
 8007826:	ed82 7a00 	vstr	s14, [r2]
 800782a:	edc2 7a01 	vstr	s15, [r2, #4]
 800782e:	00f0      	lsls	r0, r6, #3
 8007830:	b3ee      	cbz	r6, 80078ae <arm_rfft_fast_f32+0x176>
 8007832:	3808      	subs	r0, #8
 8007834:	f101 0e10 	add.w	lr, r1, #16
 8007838:	4420      	add	r0, r4
 800783a:	f104 0110 	add.w	r1, r4, #16
 800783e:	f102 0c10 	add.w	ip, r2, #16
 8007842:	ed90 7a02 	vldr	s14, [r0, #8]
 8007846:	ed51 6a02 	vldr	s13, [r1, #-8]
 800784a:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800784e:	ed90 4a03 	vldr	s8, [r0, #12]
 8007852:	ed11 5a01 	vldr	s10, [r1, #-4]
 8007856:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800785a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800785e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8007862:	ee26 3a27 	vmul.f32	s6, s12, s15
 8007866:	ee77 6a26 	vadd.f32	s13, s14, s13
 800786a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800786e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8007872:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007876:	ee77 7a05 	vadd.f32	s15, s14, s10
 800787a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800787e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8007882:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007886:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800788a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800788e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007892:	3e01      	subs	r6, #1
 8007894:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8007898:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800789c:	f1a0 0008 	sub.w	r0, r0, #8
 80078a0:	f101 0108 	add.w	r1, r1, #8
 80078a4:	f10e 0e08 	add.w	lr, lr, #8
 80078a8:	f10c 0c08 	add.w	ip, ip, #8
 80078ac:	d1c9      	bne.n	8007842 <arm_rfft_fast_f32+0x10a>
 80078ae:	461a      	mov	r2, r3
 80078b0:	4629      	mov	r1, r5
 80078b2:	4638      	mov	r0, r7
 80078b4:	2301      	movs	r3, #1
 80078b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ba:	f000 bb2f 	b.w	8007f1c <arm_cfft_f32>
 80078be:	bf00      	nop

080078c0 <arm_cfft_radix8by2_f32>:
 80078c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078c4:	ed2d 8b08 	vpush	{d8-d11}
 80078c8:	4607      	mov	r7, r0
 80078ca:	4608      	mov	r0, r1
 80078cc:	f8b7 e000 	ldrh.w	lr, [r7]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80078d6:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80078da:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80078de:	f000 80b0 	beq.w	8007a42 <arm_cfft_radix8by2_f32+0x182>
 80078e2:	008b      	lsls	r3, r1, #2
 80078e4:	3310      	adds	r3, #16
 80078e6:	18c6      	adds	r6, r0, r3
 80078e8:	3210      	adds	r2, #16
 80078ea:	4443      	add	r3, r8
 80078ec:	f100 0510 	add.w	r5, r0, #16
 80078f0:	f108 0410 	add.w	r4, r8, #16
 80078f4:	ed54 1a04 	vldr	s3, [r4, #-16]
 80078f8:	ed54 6a03 	vldr	s13, [r4, #-12]
 80078fc:	ed13 4a04 	vldr	s8, [r3, #-16]
 8007900:	ed53 3a03 	vldr	s7, [r3, #-12]
 8007904:	ed53 5a02 	vldr	s11, [r3, #-8]
 8007908:	ed13 5a01 	vldr	s10, [r3, #-4]
 800790c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8007910:	ed54 7a01 	vldr	s15, [r4, #-4]
 8007914:	ed16 2a04 	vldr	s4, [r6, #-16]
 8007918:	ed56 2a03 	vldr	s5, [r6, #-12]
 800791c:	ed15 6a03 	vldr	s12, [r5, #-12]
 8007920:	ed15 7a01 	vldr	s14, [r5, #-4]
 8007924:	ed15 3a04 	vldr	s6, [r5, #-16]
 8007928:	ed56 0a02 	vldr	s1, [r6, #-8]
 800792c:	ed16 1a01 	vldr	s2, [r6, #-4]
 8007930:	ed55 4a02 	vldr	s9, [r5, #-8]
 8007934:	ee73 ba21 	vadd.f32	s23, s6, s3
 8007938:	ee36 ba26 	vadd.f32	s22, s12, s13
 800793c:	ee37 aa27 	vadd.f32	s20, s14, s15
 8007940:	ee72 9a04 	vadd.f32	s19, s4, s8
 8007944:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8007948:	ee31 8a05 	vadd.f32	s16, s2, s10
 800794c:	ee74 aa80 	vadd.f32	s21, s9, s0
 8007950:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8007954:	ed45 ba04 	vstr	s23, [r5, #-16]
 8007958:	ed05 ba03 	vstr	s22, [r5, #-12]
 800795c:	ed45 aa02 	vstr	s21, [r5, #-8]
 8007960:	ed05 aa01 	vstr	s20, [r5, #-4]
 8007964:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007968:	ed46 9a04 	vstr	s19, [r6, #-16]
 800796c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8007970:	ed46 8a02 	vstr	s17, [r6, #-8]
 8007974:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007978:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800797c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8007980:	ed52 2a04 	vldr	s5, [r2, #-16]
 8007984:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007988:	ee34 4a42 	vsub.f32	s8, s8, s4
 800798c:	ee26 8a86 	vmul.f32	s16, s13, s12
 8007990:	ee24 2a06 	vmul.f32	s4, s8, s12
 8007994:	ee63 1a22 	vmul.f32	s3, s6, s5
 8007998:	ee24 4a22 	vmul.f32	s8, s8, s5
 800799c:	ee23 3a06 	vmul.f32	s6, s6, s12
 80079a0:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80079a4:	ee23 6a86 	vmul.f32	s12, s7, s12
 80079a8:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80079ac:	ee36 6a04 	vadd.f32	s12, s12, s8
 80079b0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80079b4:	ee72 3a63 	vsub.f32	s7, s4, s7
 80079b8:	ee71 2a88 	vadd.f32	s5, s3, s16
 80079bc:	ed44 6a03 	vstr	s13, [r4, #-12]
 80079c0:	ed44 2a04 	vstr	s5, [r4, #-16]
 80079c4:	ed43 3a04 	vstr	s7, [r3, #-16]
 80079c8:	ed03 6a03 	vstr	s12, [r3, #-12]
 80079cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079d0:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80079d4:	ed12 7a01 	vldr	s14, [r2, #-4]
 80079d8:	ed52 5a02 	vldr	s11, [r2, #-8]
 80079dc:	ee35 6a41 	vsub.f32	s12, s10, s2
 80079e0:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80079e4:	ee67 3a87 	vmul.f32	s7, s15, s14
 80079e8:	ee26 5a87 	vmul.f32	s10, s13, s14
 80079ec:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80079f0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80079f4:	ee64 4a87 	vmul.f32	s9, s9, s14
 80079f8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80079fc:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007a00:	ee26 6a25 	vmul.f32	s12, s12, s11
 8007a04:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007a08:	ee74 5a23 	vadd.f32	s11, s8, s7
 8007a0c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007a10:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007a14:	f1be 0e01 	subs.w	lr, lr, #1
 8007a18:	ed44 5a02 	vstr	s11, [r4, #-8]
 8007a1c:	f105 0510 	add.w	r5, r5, #16
 8007a20:	ed44 7a01 	vstr	s15, [r4, #-4]
 8007a24:	f106 0610 	add.w	r6, r6, #16
 8007a28:	ed03 6a02 	vstr	s12, [r3, #-8]
 8007a2c:	ed03 7a01 	vstr	s14, [r3, #-4]
 8007a30:	f102 0210 	add.w	r2, r2, #16
 8007a34:	f104 0410 	add.w	r4, r4, #16
 8007a38:	f103 0310 	add.w	r3, r3, #16
 8007a3c:	f47f af5a 	bne.w	80078f4 <arm_cfft_radix8by2_f32+0x34>
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	b28c      	uxth	r4, r1
 8007a44:	4621      	mov	r1, r4
 8007a46:	2302      	movs	r3, #2
 8007a48:	f000 ff32 	bl	80088b0 <arm_radix8_butterfly_f32>
 8007a4c:	ecbd 8b08 	vpop	{d8-d11}
 8007a50:	4621      	mov	r1, r4
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	4640      	mov	r0, r8
 8007a56:	2302      	movs	r3, #2
 8007a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5c:	f000 bf28 	b.w	80088b0 <arm_radix8_butterfly_f32>

08007a60 <arm_cfft_radix8by4_f32>:
 8007a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	ed2d 8b0a 	vpush	{d8-d12}
 8007a68:	8802      	ldrh	r2, [r0, #0]
 8007a6a:	ed91 6a00 	vldr	s12, [r1]
 8007a6e:	b08f      	sub	sp, #60	; 0x3c
 8007a70:	460f      	mov	r7, r1
 8007a72:	0852      	lsrs	r2, r2, #1
 8007a74:	6841      	ldr	r1, [r0, #4]
 8007a76:	900c      	str	r0, [sp, #48]	; 0x30
 8007a78:	0093      	lsls	r3, r2, #2
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	4418      	add	r0, r3
 8007a7e:	4606      	mov	r6, r0
 8007a80:	9009      	str	r0, [sp, #36]	; 0x24
 8007a82:	4418      	add	r0, r3
 8007a84:	edd0 6a00 	vldr	s13, [r0]
 8007a88:	ed96 4a00 	vldr	s8, [r6]
 8007a8c:	edd6 2a01 	vldr	s5, [r6, #4]
 8007a90:	edd0 7a01 	vldr	s15, [r0, #4]
 8007a94:	900a      	str	r0, [sp, #40]	; 0x28
 8007a96:	ee76 5a26 	vadd.f32	s11, s12, s13
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	4625      	mov	r5, r4
 8007a9e:	441c      	add	r4, r3
 8007aa0:	edd4 4a00 	vldr	s9, [r4]
 8007aa4:	ed97 7a01 	vldr	s14, [r7, #4]
 8007aa8:	ed94 3a01 	vldr	s6, [r4, #4]
 8007aac:	9401      	str	r4, [sp, #4]
 8007aae:	ee35 5a84 	vadd.f32	s10, s11, s8
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007ab8:	463e      	mov	r6, r7
 8007aba:	ee15 ea10 	vmov	lr, s10
 8007abe:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007ac2:	f846 eb08 	str.w	lr, [r6], #8
 8007ac6:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007aca:	ed90 5a01 	vldr	s10, [r0, #4]
 8007ace:	9605      	str	r6, [sp, #20]
 8007ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ad4:	9e01      	ldr	r6, [sp, #4]
 8007ad6:	9707      	str	r7, [sp, #28]
 8007ad8:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8007adc:	ed96 2a01 	vldr	s4, [r6, #4]
 8007ae0:	ee36 7a05 	vadd.f32	s14, s12, s10
 8007ae4:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8007ae8:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8007aec:	ee77 7a84 	vadd.f32	s15, s15, s8
 8007af0:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8007af4:	4604      	mov	r4, r0
 8007af6:	46a3      	mov	fp, r4
 8007af8:	ee37 7a02 	vadd.f32	s14, s14, s4
 8007afc:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007b00:	ee14 8a10 	vmov	r8, s8
 8007b04:	46a4      	mov	ip, r4
 8007b06:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8007b0a:	ed87 7a01 	vstr	s14, [r7, #4]
 8007b0e:	f84b 8b08 	str.w	r8, [fp], #8
 8007b12:	f1ac 0704 	sub.w	r7, ip, #4
 8007b16:	ed8c 5a01 	vstr	s10, [ip, #4]
 8007b1a:	f101 0c08 	add.w	ip, r1, #8
 8007b1e:	462c      	mov	r4, r5
 8007b20:	f8cd c010 	str.w	ip, [sp, #16]
 8007b24:	ee15 ca90 	vmov	ip, s11
 8007b28:	ee36 6a62 	vsub.f32	s12, s12, s5
 8007b2c:	f844 cb08 	str.w	ip, [r4], #8
 8007b30:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8007b34:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007b38:	9406      	str	r4, [sp, #24]
 8007b3a:	ee76 6a83 	vadd.f32	s13, s13, s6
 8007b3e:	f101 0410 	add.w	r4, r1, #16
 8007b42:	0852      	lsrs	r2, r2, #1
 8007b44:	9402      	str	r4, [sp, #8]
 8007b46:	ed85 6a01 	vstr	s12, [r5, #4]
 8007b4a:	462c      	mov	r4, r5
 8007b4c:	f101 0518 	add.w	r5, r1, #24
 8007b50:	920b      	str	r2, [sp, #44]	; 0x2c
 8007b52:	46b2      	mov	sl, r6
 8007b54:	9503      	str	r5, [sp, #12]
 8007b56:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007b5a:	3a02      	subs	r2, #2
 8007b5c:	ee16 5a90 	vmov	r5, s13
 8007b60:	46b6      	mov	lr, r6
 8007b62:	4630      	mov	r0, r6
 8007b64:	0852      	lsrs	r2, r2, #1
 8007b66:	f84a 5b08 	str.w	r5, [sl], #8
 8007b6a:	f1a0 0604 	sub.w	r6, r0, #4
 8007b6e:	edce 7a01 	vstr	s15, [lr, #4]
 8007b72:	9208      	str	r2, [sp, #32]
 8007b74:	f000 8130 	beq.w	8007dd8 <arm_cfft_radix8by4_f32+0x378>
 8007b78:	4691      	mov	r9, r2
 8007b7a:	9a07      	ldr	r2, [sp, #28]
 8007b7c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007b80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007b84:	3b08      	subs	r3, #8
 8007b86:	f102 0510 	add.w	r5, r2, #16
 8007b8a:	f101 0c20 	add.w	ip, r1, #32
 8007b8e:	f1a4 020c 	sub.w	r2, r4, #12
 8007b92:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8007b96:	4433      	add	r3, r6
 8007b98:	3410      	adds	r4, #16
 8007b9a:	4650      	mov	r0, sl
 8007b9c:	4659      	mov	r1, fp
 8007b9e:	ed55 3a02 	vldr	s7, [r5, #-8]
 8007ba2:	ed14 5a02 	vldr	s10, [r4, #-8]
 8007ba6:	ed91 7a00 	vldr	s14, [r1]
 8007baa:	edd0 7a00 	vldr	s15, [r0]
 8007bae:	ed54 5a01 	vldr	s11, [r4, #-4]
 8007bb2:	ed15 4a01 	vldr	s8, [r5, #-4]
 8007bb6:	edd0 6a01 	vldr	s13, [r0, #4]
 8007bba:	ed91 6a01 	vldr	s12, [r1, #4]
 8007bbe:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007bc2:	ee34 0a25 	vadd.f32	s0, s8, s11
 8007bc6:	ee78 4a07 	vadd.f32	s9, s16, s14
 8007bca:	ee74 5a65 	vsub.f32	s11, s8, s11
 8007bce:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8007bd2:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8007bd6:	ed45 4a02 	vstr	s9, [r5, #-8]
 8007bda:	edd1 4a01 	vldr	s9, [r1, #4]
 8007bde:	ed90 4a01 	vldr	s8, [r0, #4]
 8007be2:	ee70 4a24 	vadd.f32	s9, s0, s9
 8007be6:	ee75 aa06 	vadd.f32	s21, s10, s12
 8007bea:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007bee:	ee35 aac7 	vsub.f32	s20, s11, s14
 8007bf2:	ed45 4a01 	vstr	s9, [r5, #-4]
 8007bf6:	edd6 1a00 	vldr	s3, [r6]
 8007bfa:	edd7 0a00 	vldr	s1, [r7]
 8007bfe:	ed92 4a02 	vldr	s8, [r2, #8]
 8007c02:	edd3 3a02 	vldr	s7, [r3, #8]
 8007c06:	ed93 2a01 	vldr	s4, [r3, #4]
 8007c0a:	ed16 1a01 	vldr	s2, [r6, #-4]
 8007c0e:	edd2 2a01 	vldr	s5, [r2, #4]
 8007c12:	ed57 9a01 	vldr	s19, [r7, #-4]
 8007c16:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8007c1a:	ee39 3a81 	vadd.f32	s6, s19, s2
 8007c1e:	ee74 8a84 	vadd.f32	s17, s9, s8
 8007c22:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8007c26:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8007c2a:	ee7a aae6 	vsub.f32	s21, s21, s13
 8007c2e:	ee18 aa90 	vmov	sl, s17
 8007c32:	f847 a908 	str.w	sl, [r7], #-8
 8007c36:	edd2 8a01 	vldr	s17, [r2, #4]
 8007c3a:	ed93 9a01 	vldr	s18, [r3, #4]
 8007c3e:	ee73 8a28 	vadd.f32	s17, s6, s17
 8007c42:	ee3a aa27 	vadd.f32	s20, s20, s15
 8007c46:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007c4a:	ee74 0a63 	vsub.f32	s1, s8, s7
 8007c4e:	edc7 8a01 	vstr	s17, [r7, #4]
 8007c52:	ed18 ba02 	vldr	s22, [r8, #-8]
 8007c56:	ed58 8a01 	vldr	s17, [r8, #-4]
 8007c5a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8007c5e:	ee6a ba28 	vmul.f32	s23, s20, s17
 8007c62:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8007c66:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8007c6a:	ee31 9a20 	vadd.f32	s18, s2, s1
 8007c6e:	ee79 9a82 	vadd.f32	s19, s19, s4
 8007c72:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8007c76:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8007c7a:	ee69 baa8 	vmul.f32	s23, s19, s17
 8007c7e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8007c82:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8007c86:	ee69 8a28 	vmul.f32	s17, s18, s17
 8007c8a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8007c8e:	ee1c aa10 	vmov	sl, s24
 8007c92:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8007c96:	f841 ab08 	str.w	sl, [r1], #8
 8007c9a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8007c9e:	ee3b bacb 	vsub.f32	s22, s23, s22
 8007ca2:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8007ca6:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007caa:	ed01 aa01 	vstr	s20, [r1, #-4]
 8007cae:	edc2 8a01 	vstr	s17, [r2, #4]
 8007cb2:	ed82 ba02 	vstr	s22, [r2, #8]
 8007cb6:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8007cba:	ee74 3a63 	vsub.f32	s7, s8, s7
 8007cbe:	ee38 8a47 	vsub.f32	s16, s16, s14
 8007cc2:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8007cc6:	ee30 0a46 	vsub.f32	s0, s0, s12
 8007cca:	ee33 3a42 	vsub.f32	s6, s6, s4
 8007cce:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007cd2:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007cd6:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8007cda:	ee63 8a04 	vmul.f32	s17, s6, s8
 8007cde:	ee28 aa24 	vmul.f32	s20, s16, s9
 8007ce2:	ee60 9a04 	vmul.f32	s19, s0, s8
 8007ce6:	ee28 8a04 	vmul.f32	s16, s16, s8
 8007cea:	ee20 0a24 	vmul.f32	s0, s0, s9
 8007cee:	ee63 3a84 	vmul.f32	s7, s7, s8
 8007cf2:	ee39 4a68 	vsub.f32	s8, s18, s17
 8007cf6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8007cfa:	ee14 aa10 	vmov	sl, s8
 8007cfe:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007d02:	ee63 4a24 	vmul.f32	s9, s6, s9
 8007d06:	ed44 9a02 	vstr	s19, [r4, #-8]
 8007d0a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8007d0e:	ed04 0a01 	vstr	s0, [r4, #-4]
 8007d12:	f846 a908 	str.w	sl, [r6], #-8
 8007d16:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007d1a:	ee35 7a87 	vadd.f32	s14, s11, s14
 8007d1e:	edc6 3a01 	vstr	s7, [r6, #4]
 8007d22:	ee76 6a26 	vadd.f32	s13, s12, s13
 8007d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d2a:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8007d2e:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8007d32:	ee67 5a86 	vmul.f32	s11, s15, s12
 8007d36:	ee26 5a87 	vmul.f32	s10, s13, s14
 8007d3a:	ee72 2a62 	vsub.f32	s5, s4, s5
 8007d3e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8007d42:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8007d46:	ee75 5a25 	vadd.f32	s11, s10, s11
 8007d4a:	ee62 0a86 	vmul.f32	s1, s5, s12
 8007d4e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d56:	ee21 6a06 	vmul.f32	s12, s2, s12
 8007d5a:	ee62 2a87 	vmul.f32	s5, s5, s14
 8007d5e:	ee21 1a07 	vmul.f32	s2, s2, s14
 8007d62:	ee15 aa90 	vmov	sl, s11
 8007d66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007d6a:	f840 ab08 	str.w	sl, [r0], #8
 8007d6e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8007d72:	ee76 2a22 	vadd.f32	s5, s12, s5
 8007d76:	f1b9 0901 	subs.w	r9, r9, #1
 8007d7a:	ed40 7a01 	vstr	s15, [r0, #-4]
 8007d7e:	f105 0508 	add.w	r5, r5, #8
 8007d82:	ed83 1a02 	vstr	s2, [r3, #8]
 8007d86:	edc3 2a01 	vstr	s5, [r3, #4]
 8007d8a:	f108 0808 	add.w	r8, r8, #8
 8007d8e:	f1a2 0208 	sub.w	r2, r2, #8
 8007d92:	f10c 0c10 	add.w	ip, ip, #16
 8007d96:	f104 0408 	add.w	r4, r4, #8
 8007d9a:	f10e 0e18 	add.w	lr, lr, #24
 8007d9e:	f1a3 0308 	sub.w	r3, r3, #8
 8007da2:	f47f aefc 	bne.w	8007b9e <arm_cfft_radix8by4_f32+0x13e>
 8007da6:	9908      	ldr	r1, [sp, #32]
 8007da8:	9802      	ldr	r0, [sp, #8]
 8007daa:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8007dae:	00cb      	lsls	r3, r1, #3
 8007db0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007db4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007db8:	9102      	str	r1, [sp, #8]
 8007dba:	9905      	ldr	r1, [sp, #20]
 8007dbc:	4419      	add	r1, r3
 8007dbe:	9105      	str	r1, [sp, #20]
 8007dc0:	9904      	ldr	r1, [sp, #16]
 8007dc2:	4419      	add	r1, r3
 8007dc4:	9104      	str	r1, [sp, #16]
 8007dc6:	9906      	ldr	r1, [sp, #24]
 8007dc8:	449b      	add	fp, r3
 8007dca:	4419      	add	r1, r3
 8007dcc:	449a      	add	sl, r3
 8007dce:	9b03      	ldr	r3, [sp, #12]
 8007dd0:	9106      	str	r1, [sp, #24]
 8007dd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dd6:	9303      	str	r3, [sp, #12]
 8007dd8:	9a05      	ldr	r2, [sp, #20]
 8007dda:	9806      	ldr	r0, [sp, #24]
 8007ddc:	ed92 4a00 	vldr	s8, [r2]
 8007de0:	ed90 7a00 	vldr	s14, [r0]
 8007de4:	ed9b 3a00 	vldr	s6, [fp]
 8007de8:	edda 3a00 	vldr	s7, [sl]
 8007dec:	edd2 4a01 	vldr	s9, [r2, #4]
 8007df0:	edd0 6a01 	vldr	s13, [r0, #4]
 8007df4:	ed9a 2a01 	vldr	s4, [sl, #4]
 8007df8:	eddb 7a01 	vldr	s15, [fp, #4]
 8007dfc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8007e00:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007e02:	ee34 6a07 	vadd.f32	s12, s8, s14
 8007e06:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8007e0a:	ee36 5a03 	vadd.f32	s10, s12, s6
 8007e0e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8007e12:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007e16:	ee34 7a47 	vsub.f32	s14, s8, s14
 8007e1a:	ed82 5a00 	vstr	s10, [r2]
 8007e1e:	ed9b 5a01 	vldr	s10, [fp, #4]
 8007e22:	edda 4a01 	vldr	s9, [sl, #4]
 8007e26:	ee35 5a85 	vadd.f32	s10, s11, s10
 8007e2a:	ee37 4a27 	vadd.f32	s8, s14, s15
 8007e2e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007e32:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8007e36:	ed82 5a01 	vstr	s10, [r2, #4]
 8007e3a:	9a04      	ldr	r2, [sp, #16]
 8007e3c:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8007e40:	edd2 1a00 	vldr	s3, [r2]
 8007e44:	edd2 2a01 	vldr	s5, [r2, #4]
 8007e48:	9a02      	ldr	r2, [sp, #8]
 8007e4a:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007e4e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007e52:	ee64 4a21 	vmul.f32	s9, s8, s3
 8007e56:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007e5a:	ee65 2a22 	vmul.f32	s5, s10, s5
 8007e5e:	ee25 5a21 	vmul.f32	s10, s10, s3
 8007e62:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007e66:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007e6a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8007e6e:	edcb 2a00 	vstr	s5, [fp]
 8007e72:	ed8b 5a01 	vstr	s10, [fp, #4]
 8007e76:	ed92 4a01 	vldr	s8, [r2, #4]
 8007e7a:	ed92 5a00 	vldr	s10, [r2]
 8007e7e:	9a03      	ldr	r2, [sp, #12]
 8007e80:	ee36 6a63 	vsub.f32	s12, s12, s7
 8007e84:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8007e88:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007e8c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007e90:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007e94:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007e98:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007e9c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8007ea0:	ee76 6a83 	vadd.f32	s13, s13, s6
 8007ea4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007ea8:	ed80 6a01 	vstr	s12, [r0, #4]
 8007eac:	edc0 5a00 	vstr	s11, [r0]
 8007eb0:	edd2 5a01 	vldr	s11, [r2, #4]
 8007eb4:	9807      	ldr	r0, [sp, #28]
 8007eb6:	ee77 7a02 	vadd.f32	s15, s14, s4
 8007eba:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8007ebe:	edd2 6a00 	vldr	s13, [r2]
 8007ec2:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8007ec6:	ee67 6a26 	vmul.f32	s13, s14, s13
 8007eca:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007ece:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007ed2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007ed6:	ee36 7a07 	vadd.f32	s14, s12, s14
 8007eda:	edca 7a01 	vstr	s15, [sl, #4]
 8007ede:	ed8a 7a00 	vstr	s14, [sl]
 8007ee2:	6872      	ldr	r2, [r6, #4]
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	2304      	movs	r3, #4
 8007ee8:	f000 fce2 	bl	80088b0 <arm_radix8_butterfly_f32>
 8007eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eee:	6872      	ldr	r2, [r6, #4]
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	2304      	movs	r3, #4
 8007ef4:	f000 fcdc 	bl	80088b0 <arm_radix8_butterfly_f32>
 8007ef8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007efa:	6872      	ldr	r2, [r6, #4]
 8007efc:	4621      	mov	r1, r4
 8007efe:	2304      	movs	r3, #4
 8007f00:	f000 fcd6 	bl	80088b0 <arm_radix8_butterfly_f32>
 8007f04:	6872      	ldr	r2, [r6, #4]
 8007f06:	9801      	ldr	r0, [sp, #4]
 8007f08:	4621      	mov	r1, r4
 8007f0a:	2304      	movs	r3, #4
 8007f0c:	b00f      	add	sp, #60	; 0x3c
 8007f0e:	ecbd 8b0a 	vpop	{d8-d12}
 8007f12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f16:	f000 bccb 	b.w	80088b0 <arm_radix8_butterfly_f32>
 8007f1a:	bf00      	nop

08007f1c <arm_cfft_f32>:
 8007f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f20:	2a01      	cmp	r2, #1
 8007f22:	4606      	mov	r6, r0
 8007f24:	4617      	mov	r7, r2
 8007f26:	460c      	mov	r4, r1
 8007f28:	4698      	mov	r8, r3
 8007f2a:	8805      	ldrh	r5, [r0, #0]
 8007f2c:	d054      	beq.n	8007fd8 <arm_cfft_f32+0xbc>
 8007f2e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007f32:	d04c      	beq.n	8007fce <arm_cfft_f32+0xb2>
 8007f34:	d916      	bls.n	8007f64 <arm_cfft_f32+0x48>
 8007f36:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8007f3a:	d01a      	beq.n	8007f72 <arm_cfft_f32+0x56>
 8007f3c:	d95c      	bls.n	8007ff8 <arm_cfft_f32+0xdc>
 8007f3e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8007f42:	d044      	beq.n	8007fce <arm_cfft_f32+0xb2>
 8007f44:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8007f48:	d105      	bne.n	8007f56 <arm_cfft_f32+0x3a>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	6872      	ldr	r2, [r6, #4]
 8007f4e:	4629      	mov	r1, r5
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 fcad 	bl	80088b0 <arm_radix8_butterfly_f32>
 8007f56:	f1b8 0f00 	cmp.w	r8, #0
 8007f5a:	d111      	bne.n	8007f80 <arm_cfft_f32+0x64>
 8007f5c:	2f01      	cmp	r7, #1
 8007f5e:	d016      	beq.n	8007f8e <arm_cfft_f32+0x72>
 8007f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f64:	2d20      	cmp	r5, #32
 8007f66:	d032      	beq.n	8007fce <arm_cfft_f32+0xb2>
 8007f68:	d94a      	bls.n	8008000 <arm_cfft_f32+0xe4>
 8007f6a:	2d40      	cmp	r5, #64	; 0x40
 8007f6c:	d0ed      	beq.n	8007f4a <arm_cfft_f32+0x2e>
 8007f6e:	2d80      	cmp	r5, #128	; 0x80
 8007f70:	d1f1      	bne.n	8007f56 <arm_cfft_f32+0x3a>
 8007f72:	4621      	mov	r1, r4
 8007f74:	4630      	mov	r0, r6
 8007f76:	f7ff fca3 	bl	80078c0 <arm_cfft_radix8by2_f32>
 8007f7a:	f1b8 0f00 	cmp.w	r8, #0
 8007f7e:	d0ed      	beq.n	8007f5c <arm_cfft_f32+0x40>
 8007f80:	68b2      	ldr	r2, [r6, #8]
 8007f82:	89b1      	ldrh	r1, [r6, #12]
 8007f84:	4620      	mov	r0, r4
 8007f86:	f7f8 f923 	bl	80001d0 <arm_bitreversal_32>
 8007f8a:	2f01      	cmp	r7, #1
 8007f8c:	d1e8      	bne.n	8007f60 <arm_cfft_f32+0x44>
 8007f8e:	ee07 5a90 	vmov	s15, r5
 8007f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007f9e:	2d00      	cmp	r5, #0
 8007fa0:	d0de      	beq.n	8007f60 <arm_cfft_f32+0x44>
 8007fa2:	f104 0108 	add.w	r1, r4, #8
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	3301      	adds	r3, #1
 8007faa:	429d      	cmp	r5, r3
 8007fac:	f101 0108 	add.w	r1, r1, #8
 8007fb0:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007fb4:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007fb8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007fbc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007fc0:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007fc4:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007fc8:	d1ee      	bne.n	8007fa8 <arm_cfft_f32+0x8c>
 8007fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fce:	4621      	mov	r1, r4
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f7ff fd45 	bl	8007a60 <arm_cfft_radix8by4_f32>
 8007fd6:	e7be      	b.n	8007f56 <arm_cfft_f32+0x3a>
 8007fd8:	b1ad      	cbz	r5, 8008006 <arm_cfft_f32+0xea>
 8007fda:	f101 030c 	add.w	r3, r1, #12
 8007fde:	2200      	movs	r2, #0
 8007fe0:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007fe4:	3201      	adds	r2, #1
 8007fe6:	eef1 7a67 	vneg.f32	s15, s15
 8007fea:	4295      	cmp	r5, r2
 8007fec:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007ff0:	f103 0308 	add.w	r3, r3, #8
 8007ff4:	d1f4      	bne.n	8007fe0 <arm_cfft_f32+0xc4>
 8007ff6:	e79a      	b.n	8007f2e <arm_cfft_f32+0x12>
 8007ff8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007ffc:	d0a5      	beq.n	8007f4a <arm_cfft_f32+0x2e>
 8007ffe:	e7aa      	b.n	8007f56 <arm_cfft_f32+0x3a>
 8008000:	2d10      	cmp	r5, #16
 8008002:	d0b6      	beq.n	8007f72 <arm_cfft_f32+0x56>
 8008004:	e7a7      	b.n	8007f56 <arm_cfft_f32+0x3a>
 8008006:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800800a:	d894      	bhi.n	8007f36 <arm_cfft_f32+0x1a>
 800800c:	e7aa      	b.n	8007f64 <arm_cfft_f32+0x48>
 800800e:	bf00      	nop

08008010 <arm_fir_init_f32>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	9c04      	ldr	r4, [sp, #16]
 8008014:	6082      	str	r2, [r0, #8]
 8008016:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800801a:	3c01      	subs	r4, #1
 800801c:	4605      	mov	r5, r0
 800801e:	440c      	add	r4, r1
 8008020:	8001      	strh	r1, [r0, #0]
 8008022:	461e      	mov	r6, r3
 8008024:	00a2      	lsls	r2, r4, #2
 8008026:	4618      	mov	r0, r3
 8008028:	2100      	movs	r1, #0
 800802a:	f000 ff73 	bl	8008f14 <memset>
 800802e:	606e      	str	r6, [r5, #4]
 8008030:	bd70      	pop	{r4, r5, r6, pc}
 8008032:	bf00      	nop

08008034 <arm_fir_f32>:
 8008034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008038:	ed2d 8b10 	vpush	{d8-d15}
 800803c:	b089      	sub	sp, #36	; 0x24
 800803e:	4605      	mov	r5, r0
 8008040:	9003      	str	r0, [sp, #12]
 8008042:	8800      	ldrh	r0, [r0, #0]
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	461e      	mov	r6, r3
 8008048:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800804c:	9001      	str	r0, [sp, #4]
 800804e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8008052:	3b01      	subs	r3, #1
 8008054:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8008058:	08f3      	lsrs	r3, r6, #3
 800805a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800805e:	9400      	str	r4, [sp, #0]
 8008060:	9302      	str	r3, [sp, #8]
 8008062:	f000 81ef 	beq.w	8008444 <arm_fir_f32+0x410>
 8008066:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 800806a:	469e      	mov	lr, r3
 800806c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8008070:	1f1e      	subs	r6, r3, #4
 8008072:	4625      	mov	r5, r4
 8008074:	9605      	str	r6, [sp, #20]
 8008076:	4604      	mov	r4, r0
 8008078:	eb08 0003 	add.w	r0, r8, r3
 800807c:	f004 0a07 	and.w	sl, r4, #7
 8008080:	4613      	mov	r3, r2
 8008082:	f10c 0420 	add.w	r4, ip, #32
 8008086:	f8cd c018 	str.w	ip, [sp, #24]
 800808a:	4684      	mov	ip, r0
 800808c:	4648      	mov	r0, r9
 800808e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008092:	9107      	str	r1, [sp, #28]
 8008094:	f105 0720 	add.w	r7, r5, #32
 8008098:	f101 0620 	add.w	r6, r1, #32
 800809c:	f102 0520 	add.w	r5, r2, #32
 80080a0:	4652      	mov	r2, sl
 80080a2:	469a      	mov	sl, r3
 80080a4:	f856 3c20 	ldr.w	r3, [r6, #-32]
 80080a8:	f847 3c20 	str.w	r3, [r7, #-32]
 80080ac:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 80080b0:	f847 3c1c 	str.w	r3, [r7, #-28]
 80080b4:	f856 3c18 	ldr.w	r3, [r6, #-24]
 80080b8:	f847 3c18 	str.w	r3, [r7, #-24]
 80080bc:	f856 3c14 	ldr.w	r3, [r6, #-20]
 80080c0:	f847 3c14 	str.w	r3, [r7, #-20]
 80080c4:	f856 3c10 	ldr.w	r3, [r6, #-16]
 80080c8:	f847 3c10 	str.w	r3, [r7, #-16]
 80080cc:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80080d0:	f847 3c0c 	str.w	r3, [r7, #-12]
 80080d4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80080d8:	f847 3c08 	str.w	r3, [r7, #-8]
 80080dc:	eddf 3af1 	vldr	s7, [pc, #964]	; 80084a4 <arm_fir_f32+0x470>
 80080e0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80080e4:	f847 3c04 	str.w	r3, [r7, #-4]
 80080e8:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 80080ec:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 80080f0:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80080f4:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 80080f8:	ed14 1a04 	vldr	s2, [r4, #-16]
 80080fc:	ed54 0a03 	vldr	s1, [r4, #-12]
 8008100:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008104:	1f21      	subs	r1, r4, #4
 8008106:	eef0 8a63 	vmov.f32	s17, s7
 800810a:	eef0 9a63 	vmov.f32	s19, s7
 800810e:	eef0 aa63 	vmov.f32	s21, s7
 8008112:	eef0 ba63 	vmov.f32	s23, s7
 8008116:	eeb0 ca63 	vmov.f32	s24, s7
 800811a:	eef0 ca63 	vmov.f32	s25, s7
 800811e:	eeb0 da63 	vmov.f32	s26, s7
 8008122:	2800      	cmp	r0, #0
 8008124:	f000 81e8 	beq.w	80084f8 <arm_fir_f32+0x4c4>
 8008128:	f108 0120 	add.w	r1, r8, #32
 800812c:	f104 031c 	add.w	r3, r4, #28
 8008130:	4683      	mov	fp, r0
 8008132:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8008136:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 800813a:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 800813e:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 8008142:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8008146:	ed11 6a04 	vldr	s12, [r1, #-16]
 800814a:	ed51 6a03 	vldr	s13, [r1, #-12]
 800814e:	ed11 7a02 	vldr	s14, [r1, #-8]
 8008152:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008156:	ee24 fa03 	vmul.f32	s30, s8, s6
 800815a:	ee64 ea22 	vmul.f32	s29, s8, s5
 800815e:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 8008162:	ee24 ea02 	vmul.f32	s28, s8, s4
 8008166:	ee64 da21 	vmul.f32	s27, s8, s3
 800816a:	ee24 ba01 	vmul.f32	s22, s8, s2
 800816e:	ee24 aa20 	vmul.f32	s20, s8, s1
 8008172:	ee24 9a00 	vmul.f32	s18, s8, s0
 8008176:	ee24 4a08 	vmul.f32	s8, s8, s16
 800817a:	ee3f da0d 	vadd.f32	s26, s30, s26
 800817e:	ee74 3a23 	vadd.f32	s7, s8, s7
 8008182:	ee24 faa2 	vmul.f32	s30, s9, s5
 8008186:	ee7e caac 	vadd.f32	s25, s29, s25
 800818a:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 800818e:	ee64 ea82 	vmul.f32	s29, s9, s4
 8008192:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8008196:	ee7d baab 	vadd.f32	s23, s27, s23
 800819a:	ee24 eaa1 	vmul.f32	s28, s9, s3
 800819e:	ee64 da81 	vmul.f32	s27, s9, s2
 80081a2:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80081a6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80081aa:	ee24 baa0 	vmul.f32	s22, s9, s1
 80081ae:	ee24 aa80 	vmul.f32	s20, s9, s0
 80081b2:	ee79 8a28 	vadd.f32	s17, s18, s17
 80081b6:	ee28 9a24 	vmul.f32	s18, s16, s9
 80081ba:	ee64 4a83 	vmul.f32	s9, s9, s6
 80081be:	ee25 4a02 	vmul.f32	s8, s10, s4
 80081c2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80081c6:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 80081ca:	ee7e caac 	vadd.f32	s25, s29, s25
 80081ce:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80081d2:	ee65 ea21 	vmul.f32	s29, s10, s3
 80081d6:	ee25 ea01 	vmul.f32	s28, s10, s2
 80081da:	ee7d baab 	vadd.f32	s23, s27, s23
 80081de:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80081e2:	ee65 da20 	vmul.f32	s27, s10, s1
 80081e6:	ee25 ba00 	vmul.f32	s22, s10, s0
 80081ea:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80081ee:	ee79 8a28 	vadd.f32	s17, s18, s17
 80081f2:	ee28 aa05 	vmul.f32	s20, s16, s10
 80081f6:	ee23 9a05 	vmul.f32	s18, s6, s10
 80081fa:	ee3d da0f 	vadd.f32	s26, s26, s30
 80081fe:	ee25 5a22 	vmul.f32	s10, s10, s5
 8008202:	ee65 3aa1 	vmul.f32	s7, s11, s3
 8008206:	ee35 5a24 	vadd.f32	s10, s10, s9
 800820a:	ed53 1a04 	vldr	s3, [r3, #-16]
 800820e:	ee7e caac 	vadd.f32	s25, s29, s25
 8008212:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8008216:	ee65 ea81 	vmul.f32	s29, s11, s2
 800821a:	ee25 eaa0 	vmul.f32	s28, s11, s1
 800821e:	ee7d baab 	vadd.f32	s23, s27, s23
 8008222:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8008226:	ee65 da80 	vmul.f32	s27, s11, s0
 800822a:	ee28 ba25 	vmul.f32	s22, s16, s11
 800822e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8008232:	ee79 8a28 	vadd.f32	s17, s18, s17
 8008236:	ee23 aa25 	vmul.f32	s20, s6, s11
 800823a:	ee22 9aa5 	vmul.f32	s18, s5, s11
 800823e:	ee3d da04 	vadd.f32	s26, s26, s8
 8008242:	ee65 5a82 	vmul.f32	s11, s11, s4
 8008246:	ee66 4a01 	vmul.f32	s9, s12, s2
 800824a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800824e:	ed13 1a03 	vldr	s2, [r3, #-12]
 8008252:	ee75 5a85 	vadd.f32	s11, s11, s10
 8008256:	ee3d da23 	vadd.f32	s26, s26, s7
 800825a:	ee22 5a06 	vmul.f32	s10, s4, s12
 800825e:	ee7e caac 	vadd.f32	s25, s29, s25
 8008262:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8008266:	ee66 ea20 	vmul.f32	s29, s12, s1
 800826a:	ee26 ea00 	vmul.f32	s28, s12, s0
 800826e:	ee7d baab 	vadd.f32	s23, s27, s23
 8008272:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8008276:	ee68 da06 	vmul.f32	s27, s16, s12
 800827a:	ee23 ba06 	vmul.f32	s22, s6, s12
 800827e:	ee22 aa86 	vmul.f32	s20, s5, s12
 8008282:	ee79 8a28 	vadd.f32	s17, s18, s17
 8008286:	ee26 6a21 	vmul.f32	s12, s12, s3
 800828a:	ee26 9aa0 	vmul.f32	s18, s13, s1
 800828e:	ee36 6a25 	vadd.f32	s12, s12, s11
 8008292:	ed53 0a02 	vldr	s1, [r3, #-8]
 8008296:	ee61 5aa6 	vmul.f32	s11, s3, s13
 800829a:	ee3d da24 	vadd.f32	s26, s26, s9
 800829e:	ee7e caac 	vadd.f32	s25, s29, s25
 80082a2:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80082a6:	ee66 ea80 	vmul.f32	s29, s13, s0
 80082aa:	ee28 ea26 	vmul.f32	s28, s16, s13
 80082ae:	ee7d baab 	vadd.f32	s23, s27, s23
 80082b2:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80082b6:	ee63 da26 	vmul.f32	s27, s6, s13
 80082ba:	ee22 baa6 	vmul.f32	s22, s5, s13
 80082be:	ee3a aa29 	vadd.f32	s20, s20, s19
 80082c2:	ee75 8a28 	vadd.f32	s17, s10, s17
 80082c6:	ee62 9a26 	vmul.f32	s19, s4, s13
 80082ca:	ee66 6a81 	vmul.f32	s13, s13, s2
 80082ce:	ee27 5a00 	vmul.f32	s10, s14, s0
 80082d2:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80082d6:	ee75 8aa8 	vadd.f32	s17, s11, s17
 80082da:	ee7e caac 	vadd.f32	s25, s29, s25
 80082de:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80082e2:	ee68 ea07 	vmul.f32	s29, s16, s14
 80082e6:	ee23 ea07 	vmul.f32	s28, s6, s14
 80082ea:	ee7d baab 	vadd.f32	s23, s27, s23
 80082ee:	ee22 ba07 	vmul.f32	s22, s4, s14
 80082f2:	ee62 da87 	vmul.f32	s27, s5, s14
 80082f6:	ee39 aa8a 	vadd.f32	s20, s19, s20
 80082fa:	ee76 6a86 	vadd.f32	s13, s13, s12
 80082fe:	ee61 9a87 	vmul.f32	s19, s3, s14
 8008302:	ee67 3a20 	vmul.f32	s7, s14, s1
 8008306:	ed13 0a01 	vldr	s0, [r3, #-4]
 800830a:	ee3d da09 	vadd.f32	s26, s26, s18
 800830e:	ee21 6a07 	vmul.f32	s12, s2, s14
 8008312:	ee3d da05 	vadd.f32	s26, s26, s10
 8008316:	ee28 8a27 	vmul.f32	s16, s16, s15
 800831a:	ee63 5a27 	vmul.f32	s11, s6, s15
 800831e:	ee22 5aa7 	vmul.f32	s10, s5, s15
 8008322:	ee62 4a27 	vmul.f32	s9, s4, s15
 8008326:	ee3b ba2a 	vadd.f32	s22, s22, s21
 800832a:	ee39 aa8a 	vadd.f32	s20, s19, s20
 800832e:	ee61 aaa7 	vmul.f32	s21, s3, s15
 8008332:	ee61 9a27 	vmul.f32	s19, s2, s15
 8008336:	ee36 7a28 	vadd.f32	s14, s12, s17
 800833a:	ee7e caac 	vadd.f32	s25, s29, s25
 800833e:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8008342:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8008346:	ee7d baab 	vadd.f32	s23, s27, s23
 800834a:	ee73 3aa6 	vadd.f32	s7, s7, s13
 800834e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008352:	f1bb 0b01 	subs.w	fp, fp, #1
 8008356:	f101 0120 	add.w	r1, r1, #32
 800835a:	ee38 da0d 	vadd.f32	s26, s16, s26
 800835e:	ee75 caac 	vadd.f32	s25, s11, s25
 8008362:	ee35 ca0c 	vadd.f32	s24, s10, s24
 8008366:	ee74 baab 	vadd.f32	s23, s9, s23
 800836a:	ee7a aa8b 	vadd.f32	s21, s21, s22
 800836e:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8008372:	ee78 8a87 	vadd.f32	s17, s17, s14
 8008376:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800837a:	f103 0320 	add.w	r3, r3, #32
 800837e:	f47f aed8 	bne.w	8008132 <arm_fir_f32+0xfe>
 8008382:	eb09 0104 	add.w	r1, r9, r4
 8008386:	46e3      	mov	fp, ip
 8008388:	b3a2      	cbz	r2, 80083f4 <arm_fir_f32+0x3c0>
 800838a:	4613      	mov	r3, r2
 800838c:	ecbb 6a01 	vldmia	fp!, {s12}
 8008390:	ecf1 7a01 	vldmia	r1!, {s15}
 8008394:	ee26 3a03 	vmul.f32	s6, s12, s6
 8008398:	ee26 4a22 	vmul.f32	s8, s12, s5
 800839c:	ee66 4a02 	vmul.f32	s9, s12, s4
 80083a0:	ee26 5a21 	vmul.f32	s10, s12, s3
 80083a4:	ee66 5a01 	vmul.f32	s11, s12, s2
 80083a8:	ee66 6a20 	vmul.f32	s13, s12, s1
 80083ac:	ee26 7a00 	vmul.f32	s14, s12, s0
 80083b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80083b4:	3b01      	subs	r3, #1
 80083b6:	ee3d da03 	vadd.f32	s26, s26, s6
 80083ba:	ee7c ca84 	vadd.f32	s25, s25, s8
 80083be:	eeb0 3a62 	vmov.f32	s6, s5
 80083c2:	ee3c ca24 	vadd.f32	s24, s24, s9
 80083c6:	eef0 2a42 	vmov.f32	s5, s4
 80083ca:	ee7b ba85 	vadd.f32	s23, s23, s10
 80083ce:	eeb0 2a61 	vmov.f32	s4, s3
 80083d2:	ee7a aaa5 	vadd.f32	s21, s21, s11
 80083d6:	eef0 1a41 	vmov.f32	s3, s2
 80083da:	ee79 9aa6 	vadd.f32	s19, s19, s13
 80083de:	eeb0 1a60 	vmov.f32	s2, s1
 80083e2:	ee78 8a87 	vadd.f32	s17, s17, s14
 80083e6:	eef0 0a40 	vmov.f32	s1, s0
 80083ea:	ee73 3a86 	vadd.f32	s7, s7, s12
 80083ee:	eeb0 0a67 	vmov.f32	s0, s15
 80083f2:	d1cb      	bne.n	800838c <arm_fir_f32+0x358>
 80083f4:	f1be 0e01 	subs.w	lr, lr, #1
 80083f8:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 80083fc:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 8008400:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8008404:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8008408:	ed45 aa04 	vstr	s21, [r5, #-16]
 800840c:	ed45 9a03 	vstr	s19, [r5, #-12]
 8008410:	ed45 8a02 	vstr	s17, [r5, #-8]
 8008414:	ed45 3a01 	vstr	s7, [r5, #-4]
 8008418:	f107 0720 	add.w	r7, r7, #32
 800841c:	f106 0620 	add.w	r6, r6, #32
 8008420:	f104 0420 	add.w	r4, r4, #32
 8008424:	f105 0520 	add.w	r5, r5, #32
 8008428:	f47f ae3c 	bne.w	80080a4 <arm_fir_f32+0x70>
 800842c:	9b02      	ldr	r3, [sp, #8]
 800842e:	9800      	ldr	r0, [sp, #0]
 8008430:	f8dd c018 	ldr.w	ip, [sp, #24]
 8008434:	9907      	ldr	r1, [sp, #28]
 8008436:	015b      	lsls	r3, r3, #5
 8008438:	4652      	mov	r2, sl
 800843a:	4418      	add	r0, r3
 800843c:	9000      	str	r0, [sp, #0]
 800843e:	4419      	add	r1, r3
 8008440:	449c      	add	ip, r3
 8008442:	441a      	add	r2, r3
 8008444:	9b04      	ldr	r3, [sp, #16]
 8008446:	f013 0e07 	ands.w	lr, r3, #7
 800844a:	d01f      	beq.n	800848c <arm_fir_f32+0x458>
 800844c:	9f00      	ldr	r7, [sp, #0]
 800844e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008452:	4676      	mov	r6, lr
 8008454:	4665      	mov	r5, ip
 8008456:	f851 3b04 	ldr.w	r3, [r1], #4
 800845a:	eddf 6a12 	vldr	s13, [pc, #72]	; 80084a4 <arm_fir_f32+0x470>
 800845e:	f847 3b04 	str.w	r3, [r7], #4
 8008462:	4644      	mov	r4, r8
 8008464:	464b      	mov	r3, r9
 8008466:	4628      	mov	r0, r5
 8008468:	ecb0 7a01 	vldmia	r0!, {s14}
 800846c:	ecf4 7a01 	vldmia	r4!, {s15}
 8008470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008474:	3b01      	subs	r3, #1
 8008476:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800847a:	d1f5      	bne.n	8008468 <arm_fir_f32+0x434>
 800847c:	3e01      	subs	r6, #1
 800847e:	ece2 6a01 	vstmia	r2!, {s13}
 8008482:	f105 0504 	add.w	r5, r5, #4
 8008486:	d1e6      	bne.n	8008456 <arm_fir_f32+0x422>
 8008488:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 800848c:	9b01      	ldr	r3, [sp, #4]
 800848e:	1e59      	subs	r1, r3, #1
 8008490:	9b03      	ldr	r3, [sp, #12]
 8008492:	088e      	lsrs	r6, r1, #2
 8008494:	685c      	ldr	r4, [r3, #4]
 8008496:	d020      	beq.n	80084da <arm_fir_f32+0x4a6>
 8008498:	f104 0210 	add.w	r2, r4, #16
 800849c:	f10c 0310 	add.w	r3, ip, #16
 80084a0:	4630      	mov	r0, r6
 80084a2:	e001      	b.n	80084a8 <arm_fir_f32+0x474>
 80084a4:	00000000 	.word	0x00000000
 80084a8:	f853 5c10 	ldr.w	r5, [r3, #-16]
 80084ac:	f842 5c10 	str.w	r5, [r2, #-16]
 80084b0:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 80084b4:	f842 5c0c 	str.w	r5, [r2, #-12]
 80084b8:	f853 5c08 	ldr.w	r5, [r3, #-8]
 80084bc:	f842 5c08 	str.w	r5, [r2, #-8]
 80084c0:	f853 5c04 	ldr.w	r5, [r3, #-4]
 80084c4:	f842 5c04 	str.w	r5, [r2, #-4]
 80084c8:	3801      	subs	r0, #1
 80084ca:	f103 0310 	add.w	r3, r3, #16
 80084ce:	f102 0210 	add.w	r2, r2, #16
 80084d2:	d1e9      	bne.n	80084a8 <arm_fir_f32+0x474>
 80084d4:	0133      	lsls	r3, r6, #4
 80084d6:	441c      	add	r4, r3
 80084d8:	449c      	add	ip, r3
 80084da:	f011 0303 	ands.w	r3, r1, #3
 80084de:	d006      	beq.n	80084ee <arm_fir_f32+0x4ba>
 80084e0:	4622      	mov	r2, r4
 80084e2:	f85c 1b04 	ldr.w	r1, [ip], #4
 80084e6:	f842 1b04 	str.w	r1, [r2], #4
 80084ea:	3b01      	subs	r3, #1
 80084ec:	d1f9      	bne.n	80084e2 <arm_fir_f32+0x4ae>
 80084ee:	b009      	add	sp, #36	; 0x24
 80084f0:	ecbd 8b10 	vpop	{d8-d15}
 80084f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f8:	46c3      	mov	fp, r8
 80084fa:	e745      	b.n	8008388 <arm_fir_f32+0x354>

080084fc <arm_cmplx_mag_f32>:
 80084fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008500:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8008504:	b084      	sub	sp, #16
 8008506:	d07f      	beq.n	8008608 <arm_cmplx_mag_f32+0x10c>
 8008508:	2700      	movs	r7, #0
 800850a:	f100 0420 	add.w	r4, r0, #32
 800850e:	f101 0510 	add.w	r5, r1, #16
 8008512:	4646      	mov	r6, r8
 8008514:	e05a      	b.n	80085cc <arm_cmplx_mag_f32+0xd0>
 8008516:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800851a:	eeb4 0a40 	vcmp.f32	s0, s0
 800851e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008522:	f040 80a4 	bne.w	800866e <arm_cmplx_mag_f32+0x172>
 8008526:	ed05 0a04 	vstr	s0, [r5, #-16]
 800852a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800852e:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8008532:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008536:	ee20 0a00 	vmul.f32	s0, s0, s0
 800853a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800853e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008546:	f2c0 808f 	blt.w	8008668 <arm_cmplx_mag_f32+0x16c>
 800854a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800854e:	eeb4 0a40 	vcmp.f32	s0, s0
 8008552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008556:	f040 80af 	bne.w	80086b8 <arm_cmplx_mag_f32+0x1bc>
 800855a:	ed05 0a03 	vstr	s0, [r5, #-12]
 800855e:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008562:	ed14 0a03 	vldr	s0, [r4, #-12]
 8008566:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800856a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800856e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800857a:	db72      	blt.n	8008662 <arm_cmplx_mag_f32+0x166>
 800857c:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008580:	eeb4 0a40 	vcmp.f32	s0, s0
 8008584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008588:	f040 808c 	bne.w	80086a4 <arm_cmplx_mag_f32+0x1a8>
 800858c:	ed05 0a02 	vstr	s0, [r5, #-8]
 8008590:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008594:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008598:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800859c:	ee20 0a00 	vmul.f32	s0, s0, s0
 80085a0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80085a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80085a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ac:	db20      	blt.n	80085f0 <arm_cmplx_mag_f32+0xf4>
 80085ae:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80085b2:	eeb4 0a40 	vcmp.f32	s0, s0
 80085b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ba:	d169      	bne.n	8008690 <arm_cmplx_mag_f32+0x194>
 80085bc:	3e01      	subs	r6, #1
 80085be:	ed05 0a01 	vstr	s0, [r5, #-4]
 80085c2:	f104 0420 	add.w	r4, r4, #32
 80085c6:	f105 0510 	add.w	r5, r5, #16
 80085ca:	d019      	beq.n	8008600 <arm_cmplx_mag_f32+0x104>
 80085cc:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80085d0:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 80085d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80085d8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80085dc:	ee77 7a80 	vadd.f32	s15, s15, s0
 80085e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80085e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085e8:	da95      	bge.n	8008516 <arm_cmplx_mag_f32+0x1a>
 80085ea:	f845 7c10 	str.w	r7, [r5, #-16]
 80085ee:	e79c      	b.n	800852a <arm_cmplx_mag_f32+0x2e>
 80085f0:	3e01      	subs	r6, #1
 80085f2:	f845 7c04 	str.w	r7, [r5, #-4]
 80085f6:	f104 0420 	add.w	r4, r4, #32
 80085fa:	f105 0510 	add.w	r5, r5, #16
 80085fe:	d1e5      	bne.n	80085cc <arm_cmplx_mag_f32+0xd0>
 8008600:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8008604:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8008608:	f012 0503 	ands.w	r5, r2, #3
 800860c:	d026      	beq.n	800865c <arm_cmplx_mag_f32+0x160>
 800860e:	2600      	movs	r6, #0
 8008610:	f100 0408 	add.w	r4, r0, #8
 8008614:	e00c      	b.n	8008630 <arm_cmplx_mag_f32+0x134>
 8008616:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800861a:	eeb4 0a40 	vcmp.f32	s0, s0
 800861e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008622:	d12e      	bne.n	8008682 <arm_cmplx_mag_f32+0x186>
 8008624:	3d01      	subs	r5, #1
 8008626:	ed01 0a01 	vstr	s0, [r1, #-4]
 800862a:	f104 0408 	add.w	r4, r4, #8
 800862e:	d015      	beq.n	800865c <arm_cmplx_mag_f32+0x160>
 8008630:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008634:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008638:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800863c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008640:	3104      	adds	r1, #4
 8008642:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008646:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800864a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800864e:	dae2      	bge.n	8008616 <arm_cmplx_mag_f32+0x11a>
 8008650:	3d01      	subs	r5, #1
 8008652:	f841 6c04 	str.w	r6, [r1, #-4]
 8008656:	f104 0408 	add.w	r4, r4, #8
 800865a:	d1e9      	bne.n	8008630 <arm_cmplx_mag_f32+0x134>
 800865c:	b004      	add	sp, #16
 800865e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008662:	f845 7c08 	str.w	r7, [r5, #-8]
 8008666:	e793      	b.n	8008590 <arm_cmplx_mag_f32+0x94>
 8008668:	f845 7c0c 	str.w	r7, [r5, #-12]
 800866c:	e777      	b.n	800855e <arm_cmplx_mag_f32+0x62>
 800866e:	eeb0 0a67 	vmov.f32	s0, s15
 8008672:	9203      	str	r2, [sp, #12]
 8008674:	9102      	str	r1, [sp, #8]
 8008676:	9001      	str	r0, [sp, #4]
 8008678:	f003 fd9c 	bl	800c1b4 <sqrtf>
 800867c:	a801      	add	r0, sp, #4
 800867e:	c807      	ldmia	r0, {r0, r1, r2}
 8008680:	e751      	b.n	8008526 <arm_cmplx_mag_f32+0x2a>
 8008682:	eeb0 0a67 	vmov.f32	s0, s15
 8008686:	9101      	str	r1, [sp, #4]
 8008688:	f003 fd94 	bl	800c1b4 <sqrtf>
 800868c:	9901      	ldr	r1, [sp, #4]
 800868e:	e7c9      	b.n	8008624 <arm_cmplx_mag_f32+0x128>
 8008690:	eeb0 0a67 	vmov.f32	s0, s15
 8008694:	9203      	str	r2, [sp, #12]
 8008696:	9102      	str	r1, [sp, #8]
 8008698:	9001      	str	r0, [sp, #4]
 800869a:	f003 fd8b 	bl	800c1b4 <sqrtf>
 800869e:	a801      	add	r0, sp, #4
 80086a0:	c807      	ldmia	r0, {r0, r1, r2}
 80086a2:	e78b      	b.n	80085bc <arm_cmplx_mag_f32+0xc0>
 80086a4:	eeb0 0a67 	vmov.f32	s0, s15
 80086a8:	9203      	str	r2, [sp, #12]
 80086aa:	9102      	str	r1, [sp, #8]
 80086ac:	9001      	str	r0, [sp, #4]
 80086ae:	f003 fd81 	bl	800c1b4 <sqrtf>
 80086b2:	a801      	add	r0, sp, #4
 80086b4:	c807      	ldmia	r0, {r0, r1, r2}
 80086b6:	e769      	b.n	800858c <arm_cmplx_mag_f32+0x90>
 80086b8:	eeb0 0a67 	vmov.f32	s0, s15
 80086bc:	9203      	str	r2, [sp, #12]
 80086be:	9102      	str	r1, [sp, #8]
 80086c0:	9001      	str	r0, [sp, #4]
 80086c2:	f003 fd77 	bl	800c1b4 <sqrtf>
 80086c6:	a801      	add	r0, sp, #4
 80086c8:	c807      	ldmia	r0, {r0, r1, r2}
 80086ca:	e746      	b.n	800855a <arm_cmplx_mag_f32+0x5e>

080086cc <arm_cos_f32>:
 80086cc:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008740 <arm_cos_f32+0x74>
 80086d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80086d4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80086d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80086dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80086e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80086e8:	d504      	bpl.n	80086f4 <arm_cos_f32+0x28>
 80086ea:	ee17 3a90 	vmov	r3, s15
 80086ee:	3b01      	subs	r3, #1
 80086f0:	ee07 3a90 	vmov	s15, r3
 80086f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086f8:	eddf 6a12 	vldr	s13, [pc, #72]	; 8008744 <arm_cos_f32+0x78>
 80086fc:	4a12      	ldr	r2, [pc, #72]	; (8008748 <arm_cos_f32+0x7c>)
 80086fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008706:	ee20 0a26 	vmul.f32	s0, s0, s13
 800870a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800870e:	ee17 3a90 	vmov	r3, s15
 8008712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008716:	ee07 3a90 	vmov	s15, r3
 800871a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800871e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008722:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008726:	edd1 6a01 	vldr	s13, [r1, #4]
 800872a:	ed91 0a00 	vldr	s0, [r1]
 800872e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008732:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008736:	ee27 0a00 	vmul.f32	s0, s14, s0
 800873a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800873e:	4770      	bx	lr
 8008740:	3e22f983 	.word	0x3e22f983
 8008744:	44000000 	.word	0x44000000
 8008748:	0801df64 	.word	0x0801df64

0800874c <arm_scale_f32>:
 800874c:	b470      	push	{r4, r5, r6}
 800874e:	0896      	lsrs	r6, r2, #2
 8008750:	d025      	beq.n	800879e <arm_scale_f32+0x52>
 8008752:	f100 0410 	add.w	r4, r0, #16
 8008756:	f101 0310 	add.w	r3, r1, #16
 800875a:	4635      	mov	r5, r6
 800875c:	ed14 6a04 	vldr	s12, [r4, #-16]
 8008760:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008764:	ed14 7a02 	vldr	s14, [r4, #-8]
 8008768:	ed54 7a01 	vldr	s15, [r4, #-4]
 800876c:	ee26 6a00 	vmul.f32	s12, s12, s0
 8008770:	ee66 6a80 	vmul.f32	s13, s13, s0
 8008774:	ee20 7a07 	vmul.f32	s14, s0, s14
 8008778:	ee60 7a27 	vmul.f32	s15, s0, s15
 800877c:	3d01      	subs	r5, #1
 800877e:	ed03 6a04 	vstr	s12, [r3, #-16]
 8008782:	ed43 6a03 	vstr	s13, [r3, #-12]
 8008786:	ed03 7a02 	vstr	s14, [r3, #-8]
 800878a:	ed43 7a01 	vstr	s15, [r3, #-4]
 800878e:	f104 0410 	add.w	r4, r4, #16
 8008792:	f103 0310 	add.w	r3, r3, #16
 8008796:	d1e1      	bne.n	800875c <arm_scale_f32+0x10>
 8008798:	0136      	lsls	r6, r6, #4
 800879a:	4430      	add	r0, r6
 800879c:	4431      	add	r1, r6
 800879e:	f012 0203 	ands.w	r2, r2, #3
 80087a2:	d007      	beq.n	80087b4 <arm_scale_f32+0x68>
 80087a4:	ecf0 7a01 	vldmia	r0!, {s15}
 80087a8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80087ac:	3a01      	subs	r2, #1
 80087ae:	ece1 7a01 	vstmia	r1!, {s15}
 80087b2:	d1f7      	bne.n	80087a4 <arm_scale_f32+0x58>
 80087b4:	bc70      	pop	{r4, r5, r6}
 80087b6:	4770      	bx	lr

080087b8 <arm_offset_f32>:
 80087b8:	b470      	push	{r4, r5, r6}
 80087ba:	0896      	lsrs	r6, r2, #2
 80087bc:	d025      	beq.n	800880a <arm_offset_f32+0x52>
 80087be:	f100 0410 	add.w	r4, r0, #16
 80087c2:	f101 0310 	add.w	r3, r1, #16
 80087c6:	4635      	mov	r5, r6
 80087c8:	ed14 6a04 	vldr	s12, [r4, #-16]
 80087cc:	ed54 6a03 	vldr	s13, [r4, #-12]
 80087d0:	ed14 7a02 	vldr	s14, [r4, #-8]
 80087d4:	ed54 7a01 	vldr	s15, [r4, #-4]
 80087d8:	ee36 6a00 	vadd.f32	s12, s12, s0
 80087dc:	ee76 6a80 	vadd.f32	s13, s13, s0
 80087e0:	ee30 7a07 	vadd.f32	s14, s0, s14
 80087e4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80087e8:	3d01      	subs	r5, #1
 80087ea:	ed03 6a04 	vstr	s12, [r3, #-16]
 80087ee:	ed43 6a03 	vstr	s13, [r3, #-12]
 80087f2:	ed03 7a02 	vstr	s14, [r3, #-8]
 80087f6:	ed43 7a01 	vstr	s15, [r3, #-4]
 80087fa:	f104 0410 	add.w	r4, r4, #16
 80087fe:	f103 0310 	add.w	r3, r3, #16
 8008802:	d1e1      	bne.n	80087c8 <arm_offset_f32+0x10>
 8008804:	0136      	lsls	r6, r6, #4
 8008806:	4430      	add	r0, r6
 8008808:	4431      	add	r1, r6
 800880a:	f012 0203 	ands.w	r2, r2, #3
 800880e:	d007      	beq.n	8008820 <arm_offset_f32+0x68>
 8008810:	ecf0 7a01 	vldmia	r0!, {s15}
 8008814:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008818:	3a01      	subs	r2, #1
 800881a:	ece1 7a01 	vstmia	r1!, {s15}
 800881e:	d1f7      	bne.n	8008810 <arm_offset_f32+0x58>
 8008820:	bc70      	pop	{r4, r5, r6}
 8008822:	4770      	bx	lr

08008824 <arm_mult_f32>:
 8008824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008826:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800882a:	d033      	beq.n	8008894 <arm_mult_f32+0x70>
 800882c:	f100 0610 	add.w	r6, r0, #16
 8008830:	f101 0510 	add.w	r5, r1, #16
 8008834:	f102 0410 	add.w	r4, r2, #16
 8008838:	4677      	mov	r7, lr
 800883a:	ed16 6a04 	vldr	s12, [r6, #-16]
 800883e:	ed55 4a04 	vldr	s9, [r5, #-16]
 8008842:	ed56 6a02 	vldr	s13, [r6, #-8]
 8008846:	ed15 5a02 	vldr	s10, [r5, #-8]
 800884a:	ed16 7a03 	vldr	s14, [r6, #-12]
 800884e:	ed55 5a03 	vldr	s11, [r5, #-12]
 8008852:	ed56 7a01 	vldr	s15, [r6, #-4]
 8008856:	ee26 6a24 	vmul.f32	s12, s12, s9
 800885a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800885e:	ed04 6a04 	vstr	s12, [r4, #-16]
 8008862:	ed15 6a01 	vldr	s12, [r5, #-4]
 8008866:	ed44 6a02 	vstr	s13, [r4, #-8]
 800886a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800886e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008872:	3f01      	subs	r7, #1
 8008874:	ed04 7a03 	vstr	s14, [r4, #-12]
 8008878:	ed44 7a01 	vstr	s15, [r4, #-4]
 800887c:	f106 0610 	add.w	r6, r6, #16
 8008880:	f105 0510 	add.w	r5, r5, #16
 8008884:	f104 0410 	add.w	r4, r4, #16
 8008888:	d1d7      	bne.n	800883a <arm_mult_f32+0x16>
 800888a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800888e:	4420      	add	r0, r4
 8008890:	4421      	add	r1, r4
 8008892:	4422      	add	r2, r4
 8008894:	f013 0303 	ands.w	r3, r3, #3
 8008898:	d009      	beq.n	80088ae <arm_mult_f32+0x8a>
 800889a:	ecf0 7a01 	vldmia	r0!, {s15}
 800889e:	ecb1 7a01 	vldmia	r1!, {s14}
 80088a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088a6:	3b01      	subs	r3, #1
 80088a8:	ece2 7a01 	vstmia	r2!, {s15}
 80088ac:	d1f5      	bne.n	800889a <arm_mult_f32+0x76>
 80088ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088b0 <arm_radix8_butterfly_f32>:
 80088b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	ed2d 8b10 	vpush	{d8-d15}
 80088b8:	461c      	mov	r4, r3
 80088ba:	b09d      	sub	sp, #116	; 0x74
 80088bc:	4603      	mov	r3, r0
 80088be:	3304      	adds	r3, #4
 80088c0:	ed9f bac4 	vldr	s22, [pc, #784]	; 8008bd4 <arm_radix8_butterfly_f32+0x324>
 80088c4:	9019      	str	r0, [sp, #100]	; 0x64
 80088c6:	921a      	str	r2, [sp, #104]	; 0x68
 80088c8:	468b      	mov	fp, r1
 80088ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80088cc:	468a      	mov	sl, r1
 80088ce:	46a1      	mov	r9, r4
 80088d0:	4607      	mov	r7, r0
 80088d2:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80088d6:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80088da:	eb03 0508 	add.w	r5, r3, r8
 80088de:	195c      	adds	r4, r3, r5
 80088e0:	00de      	lsls	r6, r3, #3
 80088e2:	191a      	adds	r2, r3, r4
 80088e4:	9600      	str	r6, [sp, #0]
 80088e6:	1898      	adds	r0, r3, r2
 80088e8:	4619      	mov	r1, r3
 80088ea:	9e00      	ldr	r6, [sp, #0]
 80088ec:	9311      	str	r3, [sp, #68]	; 0x44
 80088ee:	4401      	add	r1, r0
 80088f0:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80088f4:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80088f8:	19be      	adds	r6, r7, r6
 80088fa:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80088fe:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8008902:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8008906:	9f00      	ldr	r7, [sp, #0]
 8008908:	011b      	lsls	r3, r3, #4
 800890a:	eb06 0e07 	add.w	lr, r6, r7
 800890e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008910:	9302      	str	r3, [sp, #8]
 8008912:	3204      	adds	r2, #4
 8008914:	3104      	adds	r1, #4
 8008916:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800891a:	f04f 0c00 	mov.w	ip, #0
 800891e:	edde 7a00 	vldr	s15, [lr]
 8008922:	edd6 6a00 	vldr	s13, [r6]
 8008926:	ed95 2a00 	vldr	s4, [r5]
 800892a:	ed17 aa01 	vldr	s20, [r7, #-4]
 800892e:	edd4 4a00 	vldr	s9, [r4]
 8008932:	ed90 5a00 	vldr	s10, [r0]
 8008936:	ed12 7a01 	vldr	s14, [r2, #-4]
 800893a:	ed51 0a01 	vldr	s1, [r1, #-4]
 800893e:	ee77 8a85 	vadd.f32	s17, s15, s10
 8008942:	ee76 3a87 	vadd.f32	s7, s13, s14
 8008946:	ee32 4a20 	vadd.f32	s8, s4, s1
 800894a:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800894e:	ee33 6a84 	vadd.f32	s12, s7, s8
 8008952:	ee73 5a28 	vadd.f32	s11, s6, s17
 8008956:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800895a:	ee75 6a86 	vadd.f32	s13, s11, s12
 800895e:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8008962:	ed47 6a01 	vstr	s13, [r7, #-4]
 8008966:	edc4 5a00 	vstr	s11, [r4]
 800896a:	ed92 9a00 	vldr	s18, [r2]
 800896e:	ed95 1a01 	vldr	s2, [r5, #4]
 8008972:	edd6 5a01 	vldr	s11, [r6, #4]
 8008976:	ed91 6a00 	vldr	s12, [r1]
 800897a:	edd7 2a00 	vldr	s5, [r7]
 800897e:	edd4 1a01 	vldr	s3, [r4, #4]
 8008982:	edde 6a01 	vldr	s13, [lr, #4]
 8008986:	edd0 9a01 	vldr	s19, [r0, #4]
 800898a:	ee72 0a60 	vsub.f32	s1, s4, s1
 800898e:	ee71 aa46 	vsub.f32	s21, s2, s12
 8008992:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8008996:	ee37 0a60 	vsub.f32	s0, s14, s1
 800899a:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800899e:	ee37 7a20 	vadd.f32	s14, s14, s1
 80089a2:	ee32 2a6a 	vsub.f32	s4, s4, s21
 80089a6:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80089aa:	ee75 5a89 	vadd.f32	s11, s11, s18
 80089ae:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80089b2:	ee7a 4a64 	vsub.f32	s9, s20, s9
 80089b6:	ee31 6a06 	vadd.f32	s12, s2, s12
 80089ba:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80089be:	ee32 1aa1 	vadd.f32	s2, s5, s3
 80089c2:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80089c6:	ee72 1ae1 	vsub.f32	s3, s5, s3
 80089ca:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80089ce:	ee62 2a0b 	vmul.f32	s5, s4, s22
 80089d2:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80089d6:	ee33 3a68 	vsub.f32	s6, s6, s17
 80089da:	ee36 0a88 	vadd.f32	s0, s13, s16
 80089de:	ee75 8a86 	vadd.f32	s17, s11, s12
 80089e2:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80089e6:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80089ea:	ee74 6ae0 	vsub.f32	s13, s9, s1
 80089ee:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80089f2:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80089f6:	ee75 4a27 	vadd.f32	s9, s10, s15
 80089fa:	ee71 5a49 	vsub.f32	s11, s2, s18
 80089fe:	ee31 2a09 	vadd.f32	s4, s2, s18
 8008a02:	ee75 7a67 	vsub.f32	s15, s10, s15
 8008a06:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8008a0a:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8008a0e:	ee73 0a06 	vadd.f32	s1, s6, s12
 8008a12:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8008a16:	ee36 5a87 	vadd.f32	s10, s13, s14
 8008a1a:	ee32 8a28 	vadd.f32	s16, s4, s17
 8008a1e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8008a22:	ee34 4a25 	vadd.f32	s8, s8, s11
 8008a26:	ee33 3a80 	vadd.f32	s6, s7, s0
 8008a2a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008a2e:	ee71 5a64 	vsub.f32	s11, s2, s9
 8008a32:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8008a36:	ee32 2a68 	vsub.f32	s4, s4, s17
 8008a3a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8008a3e:	ee74 4a81 	vadd.f32	s9, s9, s2
 8008a42:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8008a46:	44dc      	add	ip, fp
 8008a48:	45e2      	cmp	sl, ip
 8008a4a:	ed87 8a00 	vstr	s16, [r7]
 8008a4e:	ed84 2a01 	vstr	s4, [r4, #4]
 8008a52:	441f      	add	r7, r3
 8008a54:	edce 0a00 	vstr	s1, [lr]
 8008a58:	441c      	add	r4, r3
 8008a5a:	ed80 6a00 	vstr	s12, [r0]
 8008a5e:	edce 1a01 	vstr	s3, [lr, #4]
 8008a62:	ed80 4a01 	vstr	s8, [r0, #4]
 8008a66:	449e      	add	lr, r3
 8008a68:	ed86 3a00 	vstr	s6, [r6]
 8008a6c:	4418      	add	r0, r3
 8008a6e:	ed41 3a01 	vstr	s7, [r1, #-4]
 8008a72:	ed02 5a01 	vstr	s10, [r2, #-4]
 8008a76:	ed85 7a00 	vstr	s14, [r5]
 8008a7a:	edc6 5a01 	vstr	s11, [r6, #4]
 8008a7e:	edc1 4a00 	vstr	s9, [r1]
 8008a82:	441e      	add	r6, r3
 8008a84:	edc2 6a00 	vstr	s13, [r2]
 8008a88:	4419      	add	r1, r3
 8008a8a:	edc5 7a01 	vstr	s15, [r5, #4]
 8008a8e:	441a      	add	r2, r3
 8008a90:	441d      	add	r5, r3
 8008a92:	f63f af44 	bhi.w	800891e <arm_radix8_butterfly_f32+0x6e>
 8008a96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a98:	2a07      	cmp	r2, #7
 8008a9a:	f240 81f5 	bls.w	8008e88 <arm_radix8_butterfly_f32+0x5d8>
 8008a9e:	f108 0101 	add.w	r1, r8, #1
 8008aa2:	188f      	adds	r7, r1, r2
 8008aa4:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8008aa8:	19d6      	adds	r6, r2, r7
 8008aaa:	eb08 0c09 	add.w	ip, r8, r9
 8008aae:	1994      	adds	r4, r2, r6
 8008ab0:	eb0c 0e09 	add.w	lr, ip, r9
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	9701      	str	r7, [sp, #4]
 8008ab8:	4420      	add	r0, r4
 8008aba:	eb0e 0709 	add.w	r7, lr, r9
 8008abe:	1815      	adds	r5, r2, r0
 8008ac0:	eb07 0209 	add.w	r2, r7, r9
 8008ac4:	9203      	str	r2, [sp, #12]
 8008ac6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ac8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008acc:	9117      	str	r1, [sp, #92]	; 0x5c
 8008ace:	440a      	add	r2, r1
 8008ad0:	9900      	ldr	r1, [sp, #0]
 8008ad2:	3108      	adds	r1, #8
 8008ad4:	9100      	str	r1, [sp, #0]
 8008ad6:	9902      	ldr	r1, [sp, #8]
 8008ad8:	3108      	adds	r1, #8
 8008ada:	9102      	str	r1, [sp, #8]
 8008adc:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008ade:	00ff      	lsls	r7, r7, #3
 8008ae0:	9715      	str	r7, [sp, #84]	; 0x54
 8008ae2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8008ae6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008aea:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8008aee:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8008af0:	9903      	ldr	r1, [sp, #12]
 8008af2:	19d7      	adds	r7, r2, r7
 8008af4:	00c9      	lsls	r1, r1, #3
 8008af6:	9114      	str	r1, [sp, #80]	; 0x50
 8008af8:	9710      	str	r7, [sp, #64]	; 0x40
 8008afa:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008afc:	9f00      	ldr	r7, [sp, #0]
 8008afe:	19cf      	adds	r7, r1, r7
 8008b00:	970d      	str	r7, [sp, #52]	; 0x34
 8008b02:	9f02      	ldr	r7, [sp, #8]
 8008b04:	19cf      	adds	r7, r1, r7
 8008b06:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8008b0a:	970c      	str	r7, [sp, #48]	; 0x30
 8008b0c:	9f01      	ldr	r7, [sp, #4]
 8008b0e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8008b12:	3504      	adds	r5, #4
 8008b14:	3004      	adds	r0, #4
 8008b16:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8008b1a:	9508      	str	r5, [sp, #32]
 8008b1c:	9009      	str	r0, [sp, #36]	; 0x24
 8008b1e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008b20:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008b22:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8008b26:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8008b2a:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8008b2e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008b30:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8008b34:	1945      	adds	r5, r0, r5
 8008b36:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008b3a:	460f      	mov	r7, r1
 8008b3c:	3404      	adds	r4, #4
 8008b3e:	4641      	mov	r1, r8
 8008b40:	1841      	adds	r1, r0, r1
 8008b42:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8008b46:	940a      	str	r4, [sp, #40]	; 0x28
 8008b48:	eb00 0c06 	add.w	ip, r0, r6
 8008b4c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008b50:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008b52:	9506      	str	r5, [sp, #24]
 8008b54:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008b56:	9105      	str	r1, [sp, #20]
 8008b58:	4639      	mov	r1, r7
 8008b5a:	1905      	adds	r5, r0, r4
 8008b5c:	3108      	adds	r1, #8
 8008b5e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008b60:	9507      	str	r5, [sp, #28]
 8008b62:	910f      	str	r1, [sp, #60]	; 0x3c
 8008b64:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8008b68:	2101      	movs	r1, #1
 8008b6a:	eb00 0e06 	add.w	lr, r0, r6
 8008b6e:	9518      	str	r5, [sp, #96]	; 0x60
 8008b70:	9404      	str	r4, [sp, #16]
 8008b72:	9103      	str	r1, [sp, #12]
 8008b74:	4620      	mov	r0, r4
 8008b76:	4689      	mov	r9, r1
 8008b78:	9e06      	ldr	r6, [sp, #24]
 8008b7a:	ed90 fa00 	vldr	s30, [r0]
 8008b7e:	edd6 7a01 	vldr	s15, [r6, #4]
 8008b82:	edd0 ba01 	vldr	s23, [r0, #4]
 8008b86:	edcd 7a00 	vstr	s15, [sp]
 8008b8a:	a80d      	add	r0, sp, #52	; 0x34
 8008b8c:	edde 7a01 	vldr	s15, [lr, #4]
 8008b90:	9c05      	ldr	r4, [sp, #20]
 8008b92:	9d07      	ldr	r5, [sp, #28]
 8008b94:	edd2 fa00 	vldr	s31, [r2]
 8008b98:	ed92 ca01 	vldr	s24, [r2, #4]
 8008b9c:	edcd 7a01 	vstr	s15, [sp, #4]
 8008ba0:	c807      	ldmia	r0, {r0, r1, r2}
 8008ba2:	eddc 7a01 	vldr	s15, [ip, #4]
 8008ba6:	edd4 ea00 	vldr	s29, [r4]
 8008baa:	ed95 ea00 	vldr	s28, [r5]
 8008bae:	edd6 da00 	vldr	s27, [r6]
 8008bb2:	edd4 aa01 	vldr	s21, [r4, #4]
 8008bb6:	ed95 aa01 	vldr	s20, [r5, #4]
 8008bba:	ed9e da00 	vldr	s26, [lr]
 8008bbe:	eddc ca00 	vldr	s25, [ip]
 8008bc2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bc6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008bc8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008bca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008bcc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008bce:	edcd 7a02 	vstr	s15, [sp, #8]
 8008bd2:	e001      	b.n	8008bd8 <arm_radix8_butterfly_f32+0x328>
 8008bd4:	3f3504f3 	.word	0x3f3504f3
 8008bd8:	ed16 6a01 	vldr	s12, [r6, #-4]
 8008bdc:	ed91 5a00 	vldr	s10, [r1]
 8008be0:	ed57 9a01 	vldr	s19, [r7, #-4]
 8008be4:	edd5 7a00 	vldr	s15, [r5]
 8008be8:	ed18 7a01 	vldr	s14, [r8, #-4]
 8008bec:	edd2 3a00 	vldr	s7, [r2]
 8008bf0:	ed94 3a00 	vldr	s6, [r4]
 8008bf4:	ed90 2a00 	vldr	s4, [r0]
 8008bf8:	ed92 0a01 	vldr	s0, [r2, #4]
 8008bfc:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008c00:	ee32 1a06 	vadd.f32	s2, s4, s12
 8008c04:	ee33 4a29 	vadd.f32	s8, s6, s19
 8008c08:	ee77 4a87 	vadd.f32	s9, s15, s14
 8008c0c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008c10:	ee71 6a24 	vadd.f32	s13, s2, s9
 8008c14:	ee32 2a46 	vsub.f32	s4, s4, s12
 8008c18:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8008c1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c20:	ed82 6a00 	vstr	s12, [r2]
 8008c24:	edd5 8a01 	vldr	s17, [r5, #4]
 8008c28:	ed90 9a01 	vldr	s18, [r0, #4]
 8008c2c:	edd6 2a00 	vldr	s5, [r6]
 8008c30:	ed98 7a00 	vldr	s14, [r8]
 8008c34:	edd4 0a01 	vldr	s1, [r4, #4]
 8008c38:	ed91 6a01 	vldr	s12, [r1, #4]
 8008c3c:	edd7 5a00 	vldr	s11, [r7]
 8008c40:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008c44:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008c48:	ee39 5a62 	vsub.f32	s10, s18, s5
 8008c4c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8008c50:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008c54:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008c58:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008c5c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008c60:	ee75 8a69 	vsub.f32	s17, s10, s19
 8008c64:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008c68:	ee35 5a29 	vadd.f32	s10, s10, s19
 8008c6c:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008c70:	ee30 2a06 	vadd.f32	s4, s0, s12
 8008c74:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8008c78:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008c7c:	ee32 9a08 	vadd.f32	s18, s4, s16
 8008c80:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8008c84:	ee32 2a48 	vsub.f32	s4, s4, s16
 8008c88:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008c8c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8008c90:	ee32 1a87 	vadd.f32	s2, s5, s14
 8008c94:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008c98:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008c9c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008ca0:	ee73 0a29 	vadd.f32	s1, s6, s19
 8008ca4:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008ca8:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008cac:	ee32 7a64 	vsub.f32	s14, s4, s9
 8008cb0:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8008cb4:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008cb8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008cbc:	ee75 8a85 	vadd.f32	s17, s11, s10
 8008cc0:	ee74 3a22 	vadd.f32	s7, s8, s5
 8008cc4:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8008cc8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8008ccc:	ee79 1a41 	vsub.f32	s3, s18, s2
 8008cd0:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8008cd4:	ee76 5a43 	vsub.f32	s11, s12, s6
 8008cd8:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008cdc:	ee74 4a82 	vadd.f32	s9, s9, s4
 8008ce0:	ee30 4a60 	vsub.f32	s8, s0, s1
 8008ce4:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8008ce8:	ee30 0a80 	vadd.f32	s0, s1, s0
 8008cec:	ee77 9a85 	vadd.f32	s19, s15, s10
 8008cf0:	ee33 6a06 	vadd.f32	s12, s6, s12
 8008cf4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008cf8:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8008cfc:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8008d00:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8008d04:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8008d08:	ee39 1a01 	vadd.f32	s2, s18, s2
 8008d0c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8008d10:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8008d14:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8008d18:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8008d1c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8008d20:	ee35 3a03 	vadd.f32	s6, s10, s6
 8008d24:	ee72 6a66 	vsub.f32	s13, s4, s13
 8008d28:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8008d2c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8008d30:	ed9d 4a02 	vldr	s8, [sp, #8]
 8008d34:	ed82 1a01 	vstr	s2, [r2, #4]
 8008d38:	ee77 3a63 	vsub.f32	s7, s14, s7
 8008d3c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8008d40:	ed9d 7a01 	vldr	s14, [sp, #4]
 8008d44:	ed81 3a00 	vstr	s6, [r1]
 8008d48:	ee30 9a89 	vadd.f32	s18, s1, s18
 8008d4c:	ee32 2a05 	vadd.f32	s4, s4, s10
 8008d50:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8008d54:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8008d58:	ee67 2a22 	vmul.f32	s5, s14, s5
 8008d5c:	ee64 1a00 	vmul.f32	s3, s8, s0
 8008d60:	ee27 7a24 	vmul.f32	s14, s14, s9
 8008d64:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8008d68:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8008d6c:	ee64 8a28 	vmul.f32	s17, s8, s17
 8008d70:	ed9d 4a00 	vldr	s8, [sp]
 8008d74:	edc1 6a01 	vstr	s13, [r1, #4]
 8008d78:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008d7c:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8008d80:	ee64 9a29 	vmul.f32	s19, s8, s19
 8008d84:	ee24 4a25 	vmul.f32	s8, s8, s11
 8008d88:	ee30 7a87 	vadd.f32	s14, s1, s14
 8008d8c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008d90:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8008d94:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8008d98:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8008d9c:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8008da0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8008da4:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8008da8:	ee75 1a21 	vadd.f32	s3, s10, s3
 8008dac:	ee30 0a68 	vsub.f32	s0, s0, s17
 8008db0:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8008db4:	ee70 0a84 	vadd.f32	s1, s1, s8
 8008db8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008dbc:	44d9      	add	r9, fp
 8008dbe:	45ca      	cmp	sl, r9
 8008dc0:	ed84 9a00 	vstr	s18, [r4]
 8008dc4:	edc4 3a01 	vstr	s7, [r4, #4]
 8008dc8:	441a      	add	r2, r3
 8008dca:	ed07 7a01 	vstr	s14, [r7, #-4]
 8008dce:	edc7 2a00 	vstr	s5, [r7]
 8008dd2:	4419      	add	r1, r3
 8008dd4:	ed80 2a00 	vstr	s4, [r0]
 8008dd8:	ed80 8a01 	vstr	s16, [r0, #4]
 8008ddc:	441c      	add	r4, r3
 8008dde:	ed48 1a01 	vstr	s3, [r8, #-4]
 8008de2:	ed88 0a00 	vstr	s0, [r8]
 8008de6:	441f      	add	r7, r3
 8008de8:	ed46 4a01 	vstr	s9, [r6, #-4]
 8008dec:	4418      	add	r0, r3
 8008dee:	edc6 9a00 	vstr	s19, [r6]
 8008df2:	4498      	add	r8, r3
 8008df4:	edc5 0a00 	vstr	s1, [r5]
 8008df8:	ed85 6a01 	vstr	s12, [r5, #4]
 8008dfc:	441e      	add	r6, r3
 8008dfe:	441d      	add	r5, r3
 8008e00:	f63f aeea 	bhi.w	8008bd8 <arm_radix8_butterfly_f32+0x328>
 8008e04:	9a03      	ldr	r2, [sp, #12]
 8008e06:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008e08:	3201      	adds	r2, #1
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	9203      	str	r2, [sp, #12]
 8008e0e:	9a04      	ldr	r2, [sp, #16]
 8008e10:	4402      	add	r2, r0
 8008e12:	9204      	str	r2, [sp, #16]
 8008e14:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008e16:	9a05      	ldr	r2, [sp, #20]
 8008e18:	4402      	add	r2, r0
 8008e1a:	9205      	str	r2, [sp, #20]
 8008e1c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008e1e:	9a07      	ldr	r2, [sp, #28]
 8008e20:	4402      	add	r2, r0
 8008e22:	9207      	str	r2, [sp, #28]
 8008e24:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008e26:	9a06      	ldr	r2, [sp, #24]
 8008e28:	4402      	add	r2, r0
 8008e2a:	9206      	str	r2, [sp, #24]
 8008e2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e2e:	4496      	add	lr, r2
 8008e30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e32:	4494      	add	ip, r2
 8008e34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e36:	3208      	adds	r2, #8
 8008e38:	920f      	str	r2, [sp, #60]	; 0x3c
 8008e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e3c:	3208      	adds	r2, #8
 8008e3e:	920e      	str	r2, [sp, #56]	; 0x38
 8008e40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e42:	3208      	adds	r2, #8
 8008e44:	920d      	str	r2, [sp, #52]	; 0x34
 8008e46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e48:	3208      	adds	r2, #8
 8008e4a:	920c      	str	r2, [sp, #48]	; 0x30
 8008e4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e4e:	3208      	adds	r2, #8
 8008e50:	920b      	str	r2, [sp, #44]	; 0x2c
 8008e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e54:	3208      	adds	r2, #8
 8008e56:	920a      	str	r2, [sp, #40]	; 0x28
 8008e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e5a:	3208      	adds	r2, #8
 8008e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e5e:	9a08      	ldr	r2, [sp, #32]
 8008e60:	3208      	adds	r2, #8
 8008e62:	9208      	str	r2, [sp, #32]
 8008e64:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008e66:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008e68:	4288      	cmp	r0, r1
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	d007      	beq.n	8008e7e <arm_radix8_butterfly_f32+0x5ce>
 8008e6e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008e70:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008e74:	4621      	mov	r1, r4
 8008e76:	4401      	add	r1, r0
 8008e78:	9110      	str	r1, [sp, #64]	; 0x40
 8008e7a:	9804      	ldr	r0, [sp, #16]
 8008e7c:	e67c      	b.n	8008b78 <arm_radix8_butterfly_f32+0x2c8>
 8008e7e:	4683      	mov	fp, r0
 8008e80:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8008e84:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8008e86:	e524      	b.n	80088d2 <arm_radix8_butterfly_f32+0x22>
 8008e88:	b01d      	add	sp, #116	; 0x74
 8008e8a:	ecbd 8b10 	vpop	{d8-d15}
 8008e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e92:	bf00      	nop

08008e94 <__aeabi_memcpy>:
 8008e94:	f000 b833 	b.w	8008efe <memcpy>

08008e98 <__libc_init_array>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	4e0d      	ldr	r6, [pc, #52]	; (8008ed0 <__libc_init_array+0x38>)
 8008e9c:	4c0d      	ldr	r4, [pc, #52]	; (8008ed4 <__libc_init_array+0x3c>)
 8008e9e:	1ba4      	subs	r4, r4, r6
 8008ea0:	10a4      	asrs	r4, r4, #2
 8008ea2:	2500      	movs	r5, #0
 8008ea4:	42a5      	cmp	r5, r4
 8008ea6:	d109      	bne.n	8008ebc <__libc_init_array+0x24>
 8008ea8:	4e0b      	ldr	r6, [pc, #44]	; (8008ed8 <__libc_init_array+0x40>)
 8008eaa:	4c0c      	ldr	r4, [pc, #48]	; (8008edc <__libc_init_array+0x44>)
 8008eac:	f005 f8f2 	bl	800e094 <_init>
 8008eb0:	1ba4      	subs	r4, r4, r6
 8008eb2:	10a4      	asrs	r4, r4, #2
 8008eb4:	2500      	movs	r5, #0
 8008eb6:	42a5      	cmp	r5, r4
 8008eb8:	d105      	bne.n	8008ec6 <__libc_init_array+0x2e>
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
 8008ebc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ec0:	4798      	blx	r3
 8008ec2:	3501      	adds	r5, #1
 8008ec4:	e7ee      	b.n	8008ea4 <__libc_init_array+0xc>
 8008ec6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eca:	4798      	blx	r3
 8008ecc:	3501      	adds	r5, #1
 8008ece:	e7f2      	b.n	8008eb6 <__libc_init_array+0x1e>
 8008ed0:	08024510 	.word	0x08024510
 8008ed4:	08024510 	.word	0x08024510
 8008ed8:	08024510 	.word	0x08024510
 8008edc:	08024514 	.word	0x08024514

08008ee0 <memcmp>:
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	3901      	subs	r1, #1
 8008ee4:	4402      	add	r2, r0
 8008ee6:	4290      	cmp	r0, r2
 8008ee8:	d101      	bne.n	8008eee <memcmp+0xe>
 8008eea:	2000      	movs	r0, #0
 8008eec:	bd10      	pop	{r4, pc}
 8008eee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008ef2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008ef6:	42a3      	cmp	r3, r4
 8008ef8:	d0f5      	beq.n	8008ee6 <memcmp+0x6>
 8008efa:	1b18      	subs	r0, r3, r4
 8008efc:	bd10      	pop	{r4, pc}

08008efe <memcpy>:
 8008efe:	b510      	push	{r4, lr}
 8008f00:	1e43      	subs	r3, r0, #1
 8008f02:	440a      	add	r2, r1
 8008f04:	4291      	cmp	r1, r2
 8008f06:	d100      	bne.n	8008f0a <memcpy+0xc>
 8008f08:	bd10      	pop	{r4, pc}
 8008f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f12:	e7f7      	b.n	8008f04 <memcpy+0x6>

08008f14 <memset>:
 8008f14:	4402      	add	r2, r0
 8008f16:	4603      	mov	r3, r0
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d100      	bne.n	8008f1e <memset+0xa>
 8008f1c:	4770      	bx	lr
 8008f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f22:	e7f9      	b.n	8008f18 <memset+0x4>

08008f24 <_calloc_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	fb02 f401 	mul.w	r4, r2, r1
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	f000 f808 	bl	8008f40 <_malloc_r>
 8008f30:	4605      	mov	r5, r0
 8008f32:	b118      	cbz	r0, 8008f3c <_calloc_r+0x18>
 8008f34:	4622      	mov	r2, r4
 8008f36:	2100      	movs	r1, #0
 8008f38:	f7ff ffec 	bl	8008f14 <memset>
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}

08008f40 <_malloc_r>:
 8008f40:	b570      	push	{r4, r5, r6, lr}
 8008f42:	1ccd      	adds	r5, r1, #3
 8008f44:	f025 0503 	bic.w	r5, r5, #3
 8008f48:	3508      	adds	r5, #8
 8008f4a:	2d0c      	cmp	r5, #12
 8008f4c:	bf38      	it	cc
 8008f4e:	250c      	movcc	r5, #12
 8008f50:	2d00      	cmp	r5, #0
 8008f52:	4606      	mov	r6, r0
 8008f54:	db01      	blt.n	8008f5a <_malloc_r+0x1a>
 8008f56:	42a9      	cmp	r1, r5
 8008f58:	d903      	bls.n	8008f62 <_malloc_r+0x22>
 8008f5a:	230c      	movs	r3, #12
 8008f5c:	6033      	str	r3, [r6, #0]
 8008f5e:	2000      	movs	r0, #0
 8008f60:	bd70      	pop	{r4, r5, r6, pc}
 8008f62:	f001 fea5 	bl	800acb0 <__malloc_lock>
 8008f66:	4a23      	ldr	r2, [pc, #140]	; (8008ff4 <_malloc_r+0xb4>)
 8008f68:	6814      	ldr	r4, [r2, #0]
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	b991      	cbnz	r1, 8008f94 <_malloc_r+0x54>
 8008f6e:	4c22      	ldr	r4, [pc, #136]	; (8008ff8 <_malloc_r+0xb8>)
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	b91b      	cbnz	r3, 8008f7c <_malloc_r+0x3c>
 8008f74:	4630      	mov	r0, r6
 8008f76:	f000 fd3d 	bl	80099f4 <_sbrk_r>
 8008f7a:	6020      	str	r0, [r4, #0]
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4630      	mov	r0, r6
 8008f80:	f000 fd38 	bl	80099f4 <_sbrk_r>
 8008f84:	1c43      	adds	r3, r0, #1
 8008f86:	d126      	bne.n	8008fd6 <_malloc_r+0x96>
 8008f88:	230c      	movs	r3, #12
 8008f8a:	6033      	str	r3, [r6, #0]
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f001 fe90 	bl	800acb2 <__malloc_unlock>
 8008f92:	e7e4      	b.n	8008f5e <_malloc_r+0x1e>
 8008f94:	680b      	ldr	r3, [r1, #0]
 8008f96:	1b5b      	subs	r3, r3, r5
 8008f98:	d41a      	bmi.n	8008fd0 <_malloc_r+0x90>
 8008f9a:	2b0b      	cmp	r3, #11
 8008f9c:	d90f      	bls.n	8008fbe <_malloc_r+0x7e>
 8008f9e:	600b      	str	r3, [r1, #0]
 8008fa0:	50cd      	str	r5, [r1, r3]
 8008fa2:	18cc      	adds	r4, r1, r3
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	f001 fe84 	bl	800acb2 <__malloc_unlock>
 8008faa:	f104 000b 	add.w	r0, r4, #11
 8008fae:	1d23      	adds	r3, r4, #4
 8008fb0:	f020 0007 	bic.w	r0, r0, #7
 8008fb4:	1ac3      	subs	r3, r0, r3
 8008fb6:	d01b      	beq.n	8008ff0 <_malloc_r+0xb0>
 8008fb8:	425a      	negs	r2, r3
 8008fba:	50e2      	str	r2, [r4, r3]
 8008fbc:	bd70      	pop	{r4, r5, r6, pc}
 8008fbe:	428c      	cmp	r4, r1
 8008fc0:	bf0d      	iteet	eq
 8008fc2:	6863      	ldreq	r3, [r4, #4]
 8008fc4:	684b      	ldrne	r3, [r1, #4]
 8008fc6:	6063      	strne	r3, [r4, #4]
 8008fc8:	6013      	streq	r3, [r2, #0]
 8008fca:	bf18      	it	ne
 8008fcc:	460c      	movne	r4, r1
 8008fce:	e7e9      	b.n	8008fa4 <_malloc_r+0x64>
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	6849      	ldr	r1, [r1, #4]
 8008fd4:	e7ca      	b.n	8008f6c <_malloc_r+0x2c>
 8008fd6:	1cc4      	adds	r4, r0, #3
 8008fd8:	f024 0403 	bic.w	r4, r4, #3
 8008fdc:	42a0      	cmp	r0, r4
 8008fde:	d005      	beq.n	8008fec <_malloc_r+0xac>
 8008fe0:	1a21      	subs	r1, r4, r0
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f000 fd06 	bl	80099f4 <_sbrk_r>
 8008fe8:	3001      	adds	r0, #1
 8008fea:	d0cd      	beq.n	8008f88 <_malloc_r+0x48>
 8008fec:	6025      	str	r5, [r4, #0]
 8008fee:	e7d9      	b.n	8008fa4 <_malloc_r+0x64>
 8008ff0:	bd70      	pop	{r4, r5, r6, pc}
 8008ff2:	bf00      	nop
 8008ff4:	2000cf48 	.word	0x2000cf48
 8008ff8:	2000cf4c 	.word	0x2000cf4c

08008ffc <__cvt>:
 8008ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009000:	ec55 4b10 	vmov	r4, r5, d0
 8009004:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009006:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800900a:	2d00      	cmp	r5, #0
 800900c:	460e      	mov	r6, r1
 800900e:	4691      	mov	r9, r2
 8009010:	4619      	mov	r1, r3
 8009012:	bfb8      	it	lt
 8009014:	4622      	movlt	r2, r4
 8009016:	462b      	mov	r3, r5
 8009018:	f027 0720 	bic.w	r7, r7, #32
 800901c:	bfbb      	ittet	lt
 800901e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009022:	461d      	movlt	r5, r3
 8009024:	2300      	movge	r3, #0
 8009026:	232d      	movlt	r3, #45	; 0x2d
 8009028:	bfb8      	it	lt
 800902a:	4614      	movlt	r4, r2
 800902c:	2f46      	cmp	r7, #70	; 0x46
 800902e:	700b      	strb	r3, [r1, #0]
 8009030:	d004      	beq.n	800903c <__cvt+0x40>
 8009032:	2f45      	cmp	r7, #69	; 0x45
 8009034:	d100      	bne.n	8009038 <__cvt+0x3c>
 8009036:	3601      	adds	r6, #1
 8009038:	2102      	movs	r1, #2
 800903a:	e000      	b.n	800903e <__cvt+0x42>
 800903c:	2103      	movs	r1, #3
 800903e:	ab03      	add	r3, sp, #12
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	ab02      	add	r3, sp, #8
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	4632      	mov	r2, r6
 8009048:	4653      	mov	r3, sl
 800904a:	ec45 4b10 	vmov	d0, r4, r5
 800904e:	f000 fe6b 	bl	8009d28 <_dtoa_r>
 8009052:	2f47      	cmp	r7, #71	; 0x47
 8009054:	4680      	mov	r8, r0
 8009056:	d102      	bne.n	800905e <__cvt+0x62>
 8009058:	f019 0f01 	tst.w	r9, #1
 800905c:	d026      	beq.n	80090ac <__cvt+0xb0>
 800905e:	2f46      	cmp	r7, #70	; 0x46
 8009060:	eb08 0906 	add.w	r9, r8, r6
 8009064:	d111      	bne.n	800908a <__cvt+0x8e>
 8009066:	f898 3000 	ldrb.w	r3, [r8]
 800906a:	2b30      	cmp	r3, #48	; 0x30
 800906c:	d10a      	bne.n	8009084 <__cvt+0x88>
 800906e:	2200      	movs	r2, #0
 8009070:	2300      	movs	r3, #0
 8009072:	4620      	mov	r0, r4
 8009074:	4629      	mov	r1, r5
 8009076:	f7fa f813 	bl	80030a0 <__aeabi_dcmpeq>
 800907a:	b918      	cbnz	r0, 8009084 <__cvt+0x88>
 800907c:	f1c6 0601 	rsb	r6, r6, #1
 8009080:	f8ca 6000 	str.w	r6, [sl]
 8009084:	f8da 3000 	ldr.w	r3, [sl]
 8009088:	4499      	add	r9, r3
 800908a:	2200      	movs	r2, #0
 800908c:	2300      	movs	r3, #0
 800908e:	4620      	mov	r0, r4
 8009090:	4629      	mov	r1, r5
 8009092:	f7fa f805 	bl	80030a0 <__aeabi_dcmpeq>
 8009096:	b938      	cbnz	r0, 80090a8 <__cvt+0xac>
 8009098:	2230      	movs	r2, #48	; 0x30
 800909a:	9b03      	ldr	r3, [sp, #12]
 800909c:	4599      	cmp	r9, r3
 800909e:	d905      	bls.n	80090ac <__cvt+0xb0>
 80090a0:	1c59      	adds	r1, r3, #1
 80090a2:	9103      	str	r1, [sp, #12]
 80090a4:	701a      	strb	r2, [r3, #0]
 80090a6:	e7f8      	b.n	800909a <__cvt+0x9e>
 80090a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80090ac:	9b03      	ldr	r3, [sp, #12]
 80090ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090b0:	eba3 0308 	sub.w	r3, r3, r8
 80090b4:	4640      	mov	r0, r8
 80090b6:	6013      	str	r3, [r2, #0]
 80090b8:	b004      	add	sp, #16
 80090ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080090be <__exponent>:
 80090be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090c0:	4603      	mov	r3, r0
 80090c2:	2900      	cmp	r1, #0
 80090c4:	bfb8      	it	lt
 80090c6:	4249      	neglt	r1, r1
 80090c8:	f803 2b02 	strb.w	r2, [r3], #2
 80090cc:	bfb4      	ite	lt
 80090ce:	222d      	movlt	r2, #45	; 0x2d
 80090d0:	222b      	movge	r2, #43	; 0x2b
 80090d2:	2909      	cmp	r1, #9
 80090d4:	7042      	strb	r2, [r0, #1]
 80090d6:	dd20      	ble.n	800911a <__exponent+0x5c>
 80090d8:	f10d 0207 	add.w	r2, sp, #7
 80090dc:	4617      	mov	r7, r2
 80090de:	260a      	movs	r6, #10
 80090e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80090e4:	fb06 1115 	mls	r1, r6, r5, r1
 80090e8:	3130      	adds	r1, #48	; 0x30
 80090ea:	2d09      	cmp	r5, #9
 80090ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80090f0:	f102 34ff 	add.w	r4, r2, #4294967295
 80090f4:	4629      	mov	r1, r5
 80090f6:	dc09      	bgt.n	800910c <__exponent+0x4e>
 80090f8:	3130      	adds	r1, #48	; 0x30
 80090fa:	3a02      	subs	r2, #2
 80090fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009100:	42ba      	cmp	r2, r7
 8009102:	461c      	mov	r4, r3
 8009104:	d304      	bcc.n	8009110 <__exponent+0x52>
 8009106:	1a20      	subs	r0, r4, r0
 8009108:	b003      	add	sp, #12
 800910a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800910c:	4622      	mov	r2, r4
 800910e:	e7e7      	b.n	80090e0 <__exponent+0x22>
 8009110:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009114:	f803 1b01 	strb.w	r1, [r3], #1
 8009118:	e7f2      	b.n	8009100 <__exponent+0x42>
 800911a:	2230      	movs	r2, #48	; 0x30
 800911c:	461c      	mov	r4, r3
 800911e:	4411      	add	r1, r2
 8009120:	f804 2b02 	strb.w	r2, [r4], #2
 8009124:	7059      	strb	r1, [r3, #1]
 8009126:	e7ee      	b.n	8009106 <__exponent+0x48>

08009128 <_printf_float>:
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	b08d      	sub	sp, #52	; 0x34
 800912e:	460c      	mov	r4, r1
 8009130:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009134:	4616      	mov	r6, r2
 8009136:	461f      	mov	r7, r3
 8009138:	4605      	mov	r5, r0
 800913a:	f001 fd3f 	bl	800abbc <_localeconv_r>
 800913e:	6803      	ldr	r3, [r0, #0]
 8009140:	9304      	str	r3, [sp, #16]
 8009142:	4618      	mov	r0, r3
 8009144:	f7f9 fb34 	bl	80027b0 <strlen>
 8009148:	2300      	movs	r3, #0
 800914a:	930a      	str	r3, [sp, #40]	; 0x28
 800914c:	f8d8 3000 	ldr.w	r3, [r8]
 8009150:	9005      	str	r0, [sp, #20]
 8009152:	3307      	adds	r3, #7
 8009154:	f023 0307 	bic.w	r3, r3, #7
 8009158:	f103 0208 	add.w	r2, r3, #8
 800915c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009160:	f8d4 b000 	ldr.w	fp, [r4]
 8009164:	f8c8 2000 	str.w	r2, [r8]
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009170:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009174:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009178:	9307      	str	r3, [sp, #28]
 800917a:	f8cd 8018 	str.w	r8, [sp, #24]
 800917e:	f04f 32ff 	mov.w	r2, #4294967295
 8009182:	4ba5      	ldr	r3, [pc, #660]	; (8009418 <_printf_float+0x2f0>)
 8009184:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009188:	f7f9 ffbc 	bl	8003104 <__aeabi_dcmpun>
 800918c:	2800      	cmp	r0, #0
 800918e:	f040 81fb 	bne.w	8009588 <_printf_float+0x460>
 8009192:	f04f 32ff 	mov.w	r2, #4294967295
 8009196:	4ba0      	ldr	r3, [pc, #640]	; (8009418 <_printf_float+0x2f0>)
 8009198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800919c:	f7f9 ff94 	bl	80030c8 <__aeabi_dcmple>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	f040 81f1 	bne.w	8009588 <_printf_float+0x460>
 80091a6:	2200      	movs	r2, #0
 80091a8:	2300      	movs	r3, #0
 80091aa:	4640      	mov	r0, r8
 80091ac:	4649      	mov	r1, r9
 80091ae:	f7f9 ff81 	bl	80030b4 <__aeabi_dcmplt>
 80091b2:	b110      	cbz	r0, 80091ba <_printf_float+0x92>
 80091b4:	232d      	movs	r3, #45	; 0x2d
 80091b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ba:	4b98      	ldr	r3, [pc, #608]	; (800941c <_printf_float+0x2f4>)
 80091bc:	4a98      	ldr	r2, [pc, #608]	; (8009420 <_printf_float+0x2f8>)
 80091be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80091c2:	bf8c      	ite	hi
 80091c4:	4690      	movhi	r8, r2
 80091c6:	4698      	movls	r8, r3
 80091c8:	2303      	movs	r3, #3
 80091ca:	f02b 0204 	bic.w	r2, fp, #4
 80091ce:	6123      	str	r3, [r4, #16]
 80091d0:	6022      	str	r2, [r4, #0]
 80091d2:	f04f 0900 	mov.w	r9, #0
 80091d6:	9700      	str	r7, [sp, #0]
 80091d8:	4633      	mov	r3, r6
 80091da:	aa0b      	add	r2, sp, #44	; 0x2c
 80091dc:	4621      	mov	r1, r4
 80091de:	4628      	mov	r0, r5
 80091e0:	f000 f9e2 	bl	80095a8 <_printf_common>
 80091e4:	3001      	adds	r0, #1
 80091e6:	f040 8093 	bne.w	8009310 <_printf_float+0x1e8>
 80091ea:	f04f 30ff 	mov.w	r0, #4294967295
 80091ee:	b00d      	add	sp, #52	; 0x34
 80091f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f4:	6861      	ldr	r1, [r4, #4]
 80091f6:	1c4b      	adds	r3, r1, #1
 80091f8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80091fc:	d13f      	bne.n	800927e <_printf_float+0x156>
 80091fe:	2306      	movs	r3, #6
 8009200:	6063      	str	r3, [r4, #4]
 8009202:	2300      	movs	r3, #0
 8009204:	9303      	str	r3, [sp, #12]
 8009206:	ab0a      	add	r3, sp, #40	; 0x28
 8009208:	9302      	str	r3, [sp, #8]
 800920a:	ab09      	add	r3, sp, #36	; 0x24
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	ec49 8b10 	vmov	d0, r8, r9
 8009212:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009216:	6022      	str	r2, [r4, #0]
 8009218:	f8cd a004 	str.w	sl, [sp, #4]
 800921c:	6861      	ldr	r1, [r4, #4]
 800921e:	4628      	mov	r0, r5
 8009220:	f7ff feec 	bl	8008ffc <__cvt>
 8009224:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009228:	2b47      	cmp	r3, #71	; 0x47
 800922a:	4680      	mov	r8, r0
 800922c:	d109      	bne.n	8009242 <_printf_float+0x11a>
 800922e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009230:	1cd8      	adds	r0, r3, #3
 8009232:	db02      	blt.n	800923a <_printf_float+0x112>
 8009234:	6862      	ldr	r2, [r4, #4]
 8009236:	4293      	cmp	r3, r2
 8009238:	dd57      	ble.n	80092ea <_printf_float+0x1c2>
 800923a:	f1aa 0a02 	sub.w	sl, sl, #2
 800923e:	fa5f fa8a 	uxtb.w	sl, sl
 8009242:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009246:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009248:	d834      	bhi.n	80092b4 <_printf_float+0x18c>
 800924a:	3901      	subs	r1, #1
 800924c:	4652      	mov	r2, sl
 800924e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009252:	9109      	str	r1, [sp, #36]	; 0x24
 8009254:	f7ff ff33 	bl	80090be <__exponent>
 8009258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800925a:	1883      	adds	r3, r0, r2
 800925c:	2a01      	cmp	r2, #1
 800925e:	4681      	mov	r9, r0
 8009260:	6123      	str	r3, [r4, #16]
 8009262:	dc02      	bgt.n	800926a <_printf_float+0x142>
 8009264:	6822      	ldr	r2, [r4, #0]
 8009266:	07d1      	lsls	r1, r2, #31
 8009268:	d501      	bpl.n	800926e <_printf_float+0x146>
 800926a:	3301      	adds	r3, #1
 800926c:	6123      	str	r3, [r4, #16]
 800926e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009272:	2b00      	cmp	r3, #0
 8009274:	d0af      	beq.n	80091d6 <_printf_float+0xae>
 8009276:	232d      	movs	r3, #45	; 0x2d
 8009278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800927c:	e7ab      	b.n	80091d6 <_printf_float+0xae>
 800927e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009282:	d002      	beq.n	800928a <_printf_float+0x162>
 8009284:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009288:	d1bb      	bne.n	8009202 <_printf_float+0xda>
 800928a:	b189      	cbz	r1, 80092b0 <_printf_float+0x188>
 800928c:	2300      	movs	r3, #0
 800928e:	9303      	str	r3, [sp, #12]
 8009290:	ab0a      	add	r3, sp, #40	; 0x28
 8009292:	9302      	str	r3, [sp, #8]
 8009294:	ab09      	add	r3, sp, #36	; 0x24
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	ec49 8b10 	vmov	d0, r8, r9
 800929c:	6022      	str	r2, [r4, #0]
 800929e:	f8cd a004 	str.w	sl, [sp, #4]
 80092a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80092a6:	4628      	mov	r0, r5
 80092a8:	f7ff fea8 	bl	8008ffc <__cvt>
 80092ac:	4680      	mov	r8, r0
 80092ae:	e7be      	b.n	800922e <_printf_float+0x106>
 80092b0:	2301      	movs	r3, #1
 80092b2:	e7a5      	b.n	8009200 <_printf_float+0xd8>
 80092b4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80092b8:	d119      	bne.n	80092ee <_printf_float+0x1c6>
 80092ba:	2900      	cmp	r1, #0
 80092bc:	6863      	ldr	r3, [r4, #4]
 80092be:	dd0c      	ble.n	80092da <_printf_float+0x1b2>
 80092c0:	6121      	str	r1, [r4, #16]
 80092c2:	b913      	cbnz	r3, 80092ca <_printf_float+0x1a2>
 80092c4:	6822      	ldr	r2, [r4, #0]
 80092c6:	07d2      	lsls	r2, r2, #31
 80092c8:	d502      	bpl.n	80092d0 <_printf_float+0x1a8>
 80092ca:	3301      	adds	r3, #1
 80092cc:	440b      	add	r3, r1
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80092d4:	f04f 0900 	mov.w	r9, #0
 80092d8:	e7c9      	b.n	800926e <_printf_float+0x146>
 80092da:	b913      	cbnz	r3, 80092e2 <_printf_float+0x1ba>
 80092dc:	6822      	ldr	r2, [r4, #0]
 80092de:	07d0      	lsls	r0, r2, #31
 80092e0:	d501      	bpl.n	80092e6 <_printf_float+0x1be>
 80092e2:	3302      	adds	r3, #2
 80092e4:	e7f3      	b.n	80092ce <_printf_float+0x1a6>
 80092e6:	2301      	movs	r3, #1
 80092e8:	e7f1      	b.n	80092ce <_printf_float+0x1a6>
 80092ea:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80092ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092f2:	4293      	cmp	r3, r2
 80092f4:	db05      	blt.n	8009302 <_printf_float+0x1da>
 80092f6:	6822      	ldr	r2, [r4, #0]
 80092f8:	6123      	str	r3, [r4, #16]
 80092fa:	07d1      	lsls	r1, r2, #31
 80092fc:	d5e8      	bpl.n	80092d0 <_printf_float+0x1a8>
 80092fe:	3301      	adds	r3, #1
 8009300:	e7e5      	b.n	80092ce <_printf_float+0x1a6>
 8009302:	2b00      	cmp	r3, #0
 8009304:	bfd4      	ite	le
 8009306:	f1c3 0302 	rsble	r3, r3, #2
 800930a:	2301      	movgt	r3, #1
 800930c:	4413      	add	r3, r2
 800930e:	e7de      	b.n	80092ce <_printf_float+0x1a6>
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	055a      	lsls	r2, r3, #21
 8009314:	d407      	bmi.n	8009326 <_printf_float+0x1fe>
 8009316:	6923      	ldr	r3, [r4, #16]
 8009318:	4642      	mov	r2, r8
 800931a:	4631      	mov	r1, r6
 800931c:	4628      	mov	r0, r5
 800931e:	47b8      	blx	r7
 8009320:	3001      	adds	r0, #1
 8009322:	d12b      	bne.n	800937c <_printf_float+0x254>
 8009324:	e761      	b.n	80091ea <_printf_float+0xc2>
 8009326:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800932a:	f240 80e2 	bls.w	80094f2 <_printf_float+0x3ca>
 800932e:	2200      	movs	r2, #0
 8009330:	2300      	movs	r3, #0
 8009332:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009336:	f7f9 feb3 	bl	80030a0 <__aeabi_dcmpeq>
 800933a:	2800      	cmp	r0, #0
 800933c:	d03c      	beq.n	80093b8 <_printf_float+0x290>
 800933e:	2301      	movs	r3, #1
 8009340:	4a38      	ldr	r2, [pc, #224]	; (8009424 <_printf_float+0x2fc>)
 8009342:	4631      	mov	r1, r6
 8009344:	4628      	mov	r0, r5
 8009346:	47b8      	blx	r7
 8009348:	3001      	adds	r0, #1
 800934a:	f43f af4e 	beq.w	80091ea <_printf_float+0xc2>
 800934e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009352:	429a      	cmp	r2, r3
 8009354:	db02      	blt.n	800935c <_printf_float+0x234>
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	07d8      	lsls	r0, r3, #31
 800935a:	d50f      	bpl.n	800937c <_printf_float+0x254>
 800935c:	9b05      	ldr	r3, [sp, #20]
 800935e:	9a04      	ldr	r2, [sp, #16]
 8009360:	4631      	mov	r1, r6
 8009362:	4628      	mov	r0, r5
 8009364:	47b8      	blx	r7
 8009366:	3001      	adds	r0, #1
 8009368:	f43f af3f 	beq.w	80091ea <_printf_float+0xc2>
 800936c:	f04f 0800 	mov.w	r8, #0
 8009370:	f104 091a 	add.w	r9, r4, #26
 8009374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009376:	3b01      	subs	r3, #1
 8009378:	4598      	cmp	r8, r3
 800937a:	db12      	blt.n	80093a2 <_printf_float+0x27a>
 800937c:	6823      	ldr	r3, [r4, #0]
 800937e:	079b      	lsls	r3, r3, #30
 8009380:	d509      	bpl.n	8009396 <_printf_float+0x26e>
 8009382:	f04f 0800 	mov.w	r8, #0
 8009386:	f104 0919 	add.w	r9, r4, #25
 800938a:	68e3      	ldr	r3, [r4, #12]
 800938c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800938e:	1a9b      	subs	r3, r3, r2
 8009390:	4598      	cmp	r8, r3
 8009392:	f2c0 80ee 	blt.w	8009572 <_printf_float+0x44a>
 8009396:	68e0      	ldr	r0, [r4, #12]
 8009398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800939a:	4298      	cmp	r0, r3
 800939c:	bfb8      	it	lt
 800939e:	4618      	movlt	r0, r3
 80093a0:	e725      	b.n	80091ee <_printf_float+0xc6>
 80093a2:	2301      	movs	r3, #1
 80093a4:	464a      	mov	r2, r9
 80093a6:	4631      	mov	r1, r6
 80093a8:	4628      	mov	r0, r5
 80093aa:	47b8      	blx	r7
 80093ac:	3001      	adds	r0, #1
 80093ae:	f43f af1c 	beq.w	80091ea <_printf_float+0xc2>
 80093b2:	f108 0801 	add.w	r8, r8, #1
 80093b6:	e7dd      	b.n	8009374 <_printf_float+0x24c>
 80093b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	dc34      	bgt.n	8009428 <_printf_float+0x300>
 80093be:	2301      	movs	r3, #1
 80093c0:	4a18      	ldr	r2, [pc, #96]	; (8009424 <_printf_float+0x2fc>)
 80093c2:	4631      	mov	r1, r6
 80093c4:	4628      	mov	r0, r5
 80093c6:	47b8      	blx	r7
 80093c8:	3001      	adds	r0, #1
 80093ca:	f43f af0e 	beq.w	80091ea <_printf_float+0xc2>
 80093ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d0:	b923      	cbnz	r3, 80093dc <_printf_float+0x2b4>
 80093d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d4:	b913      	cbnz	r3, 80093dc <_printf_float+0x2b4>
 80093d6:	6823      	ldr	r3, [r4, #0]
 80093d8:	07d9      	lsls	r1, r3, #31
 80093da:	d5cf      	bpl.n	800937c <_printf_float+0x254>
 80093dc:	9b05      	ldr	r3, [sp, #20]
 80093de:	9a04      	ldr	r2, [sp, #16]
 80093e0:	4631      	mov	r1, r6
 80093e2:	4628      	mov	r0, r5
 80093e4:	47b8      	blx	r7
 80093e6:	3001      	adds	r0, #1
 80093e8:	f43f aeff 	beq.w	80091ea <_printf_float+0xc2>
 80093ec:	f04f 0900 	mov.w	r9, #0
 80093f0:	f104 0a1a 	add.w	sl, r4, #26
 80093f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f6:	425b      	negs	r3, r3
 80093f8:	4599      	cmp	r9, r3
 80093fa:	db01      	blt.n	8009400 <_printf_float+0x2d8>
 80093fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093fe:	e78b      	b.n	8009318 <_printf_float+0x1f0>
 8009400:	2301      	movs	r3, #1
 8009402:	4652      	mov	r2, sl
 8009404:	4631      	mov	r1, r6
 8009406:	4628      	mov	r0, r5
 8009408:	47b8      	blx	r7
 800940a:	3001      	adds	r0, #1
 800940c:	f43f aeed 	beq.w	80091ea <_printf_float+0xc2>
 8009410:	f109 0901 	add.w	r9, r9, #1
 8009414:	e7ee      	b.n	80093f4 <_printf_float+0x2cc>
 8009416:	bf00      	nop
 8009418:	7fefffff 	.word	0x7fefffff
 800941c:	080241bc 	.word	0x080241bc
 8009420:	080241c0 	.word	0x080241c0
 8009424:	0802447c 	.word	0x0802447c
 8009428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800942a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800942c:	429a      	cmp	r2, r3
 800942e:	bfa8      	it	ge
 8009430:	461a      	movge	r2, r3
 8009432:	2a00      	cmp	r2, #0
 8009434:	4691      	mov	r9, r2
 8009436:	dc38      	bgt.n	80094aa <_printf_float+0x382>
 8009438:	f104 031a 	add.w	r3, r4, #26
 800943c:	f04f 0b00 	mov.w	fp, #0
 8009440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009444:	9306      	str	r3, [sp, #24]
 8009446:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800944a:	ebaa 0309 	sub.w	r3, sl, r9
 800944e:	459b      	cmp	fp, r3
 8009450:	db33      	blt.n	80094ba <_printf_float+0x392>
 8009452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009456:	429a      	cmp	r2, r3
 8009458:	db3a      	blt.n	80094d0 <_printf_float+0x3a8>
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	07da      	lsls	r2, r3, #31
 800945e:	d437      	bmi.n	80094d0 <_printf_float+0x3a8>
 8009460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009462:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009464:	eba3 020a 	sub.w	r2, r3, sl
 8009468:	eba3 0901 	sub.w	r9, r3, r1
 800946c:	4591      	cmp	r9, r2
 800946e:	bfa8      	it	ge
 8009470:	4691      	movge	r9, r2
 8009472:	f1b9 0f00 	cmp.w	r9, #0
 8009476:	dc33      	bgt.n	80094e0 <_printf_float+0x3b8>
 8009478:	f04f 0800 	mov.w	r8, #0
 800947c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009480:	f104 0a1a 	add.w	sl, r4, #26
 8009484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009488:	1a9b      	subs	r3, r3, r2
 800948a:	eba3 0309 	sub.w	r3, r3, r9
 800948e:	4598      	cmp	r8, r3
 8009490:	f6bf af74 	bge.w	800937c <_printf_float+0x254>
 8009494:	2301      	movs	r3, #1
 8009496:	4652      	mov	r2, sl
 8009498:	4631      	mov	r1, r6
 800949a:	4628      	mov	r0, r5
 800949c:	47b8      	blx	r7
 800949e:	3001      	adds	r0, #1
 80094a0:	f43f aea3 	beq.w	80091ea <_printf_float+0xc2>
 80094a4:	f108 0801 	add.w	r8, r8, #1
 80094a8:	e7ec      	b.n	8009484 <_printf_float+0x35c>
 80094aa:	4613      	mov	r3, r2
 80094ac:	4631      	mov	r1, r6
 80094ae:	4642      	mov	r2, r8
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	d1bf      	bne.n	8009438 <_printf_float+0x310>
 80094b8:	e697      	b.n	80091ea <_printf_float+0xc2>
 80094ba:	2301      	movs	r3, #1
 80094bc:	9a06      	ldr	r2, [sp, #24]
 80094be:	4631      	mov	r1, r6
 80094c0:	4628      	mov	r0, r5
 80094c2:	47b8      	blx	r7
 80094c4:	3001      	adds	r0, #1
 80094c6:	f43f ae90 	beq.w	80091ea <_printf_float+0xc2>
 80094ca:	f10b 0b01 	add.w	fp, fp, #1
 80094ce:	e7ba      	b.n	8009446 <_printf_float+0x31e>
 80094d0:	9b05      	ldr	r3, [sp, #20]
 80094d2:	9a04      	ldr	r2, [sp, #16]
 80094d4:	4631      	mov	r1, r6
 80094d6:	4628      	mov	r0, r5
 80094d8:	47b8      	blx	r7
 80094da:	3001      	adds	r0, #1
 80094dc:	d1c0      	bne.n	8009460 <_printf_float+0x338>
 80094de:	e684      	b.n	80091ea <_printf_float+0xc2>
 80094e0:	464b      	mov	r3, r9
 80094e2:	eb08 020a 	add.w	r2, r8, sl
 80094e6:	4631      	mov	r1, r6
 80094e8:	4628      	mov	r0, r5
 80094ea:	47b8      	blx	r7
 80094ec:	3001      	adds	r0, #1
 80094ee:	d1c3      	bne.n	8009478 <_printf_float+0x350>
 80094f0:	e67b      	b.n	80091ea <_printf_float+0xc2>
 80094f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094f4:	2a01      	cmp	r2, #1
 80094f6:	dc01      	bgt.n	80094fc <_printf_float+0x3d4>
 80094f8:	07db      	lsls	r3, r3, #31
 80094fa:	d537      	bpl.n	800956c <_printf_float+0x444>
 80094fc:	2301      	movs	r3, #1
 80094fe:	4642      	mov	r2, r8
 8009500:	4631      	mov	r1, r6
 8009502:	4628      	mov	r0, r5
 8009504:	47b8      	blx	r7
 8009506:	3001      	adds	r0, #1
 8009508:	f43f ae6f 	beq.w	80091ea <_printf_float+0xc2>
 800950c:	9b05      	ldr	r3, [sp, #20]
 800950e:	9a04      	ldr	r2, [sp, #16]
 8009510:	4631      	mov	r1, r6
 8009512:	4628      	mov	r0, r5
 8009514:	47b8      	blx	r7
 8009516:	3001      	adds	r0, #1
 8009518:	f43f ae67 	beq.w	80091ea <_printf_float+0xc2>
 800951c:	2200      	movs	r2, #0
 800951e:	2300      	movs	r3, #0
 8009520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009524:	f7f9 fdbc 	bl	80030a0 <__aeabi_dcmpeq>
 8009528:	b158      	cbz	r0, 8009542 <_printf_float+0x41a>
 800952a:	f04f 0800 	mov.w	r8, #0
 800952e:	f104 0a1a 	add.w	sl, r4, #26
 8009532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009534:	3b01      	subs	r3, #1
 8009536:	4598      	cmp	r8, r3
 8009538:	db0d      	blt.n	8009556 <_printf_float+0x42e>
 800953a:	464b      	mov	r3, r9
 800953c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009540:	e6eb      	b.n	800931a <_printf_float+0x1f2>
 8009542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009544:	f108 0201 	add.w	r2, r8, #1
 8009548:	3b01      	subs	r3, #1
 800954a:	4631      	mov	r1, r6
 800954c:	4628      	mov	r0, r5
 800954e:	47b8      	blx	r7
 8009550:	3001      	adds	r0, #1
 8009552:	d1f2      	bne.n	800953a <_printf_float+0x412>
 8009554:	e649      	b.n	80091ea <_printf_float+0xc2>
 8009556:	2301      	movs	r3, #1
 8009558:	4652      	mov	r2, sl
 800955a:	4631      	mov	r1, r6
 800955c:	4628      	mov	r0, r5
 800955e:	47b8      	blx	r7
 8009560:	3001      	adds	r0, #1
 8009562:	f43f ae42 	beq.w	80091ea <_printf_float+0xc2>
 8009566:	f108 0801 	add.w	r8, r8, #1
 800956a:	e7e2      	b.n	8009532 <_printf_float+0x40a>
 800956c:	2301      	movs	r3, #1
 800956e:	4642      	mov	r2, r8
 8009570:	e7eb      	b.n	800954a <_printf_float+0x422>
 8009572:	2301      	movs	r3, #1
 8009574:	464a      	mov	r2, r9
 8009576:	4631      	mov	r1, r6
 8009578:	4628      	mov	r0, r5
 800957a:	47b8      	blx	r7
 800957c:	3001      	adds	r0, #1
 800957e:	f43f ae34 	beq.w	80091ea <_printf_float+0xc2>
 8009582:	f108 0801 	add.w	r8, r8, #1
 8009586:	e700      	b.n	800938a <_printf_float+0x262>
 8009588:	4642      	mov	r2, r8
 800958a:	464b      	mov	r3, r9
 800958c:	4640      	mov	r0, r8
 800958e:	4649      	mov	r1, r9
 8009590:	f7f9 fdb8 	bl	8003104 <__aeabi_dcmpun>
 8009594:	2800      	cmp	r0, #0
 8009596:	f43f ae2d 	beq.w	80091f4 <_printf_float+0xcc>
 800959a:	4b01      	ldr	r3, [pc, #4]	; (80095a0 <_printf_float+0x478>)
 800959c:	4a01      	ldr	r2, [pc, #4]	; (80095a4 <_printf_float+0x47c>)
 800959e:	e60e      	b.n	80091be <_printf_float+0x96>
 80095a0:	080241c4 	.word	0x080241c4
 80095a4:	080241c8 	.word	0x080241c8

080095a8 <_printf_common>:
 80095a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ac:	4691      	mov	r9, r2
 80095ae:	461f      	mov	r7, r3
 80095b0:	688a      	ldr	r2, [r1, #8]
 80095b2:	690b      	ldr	r3, [r1, #16]
 80095b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095b8:	4293      	cmp	r3, r2
 80095ba:	bfb8      	it	lt
 80095bc:	4613      	movlt	r3, r2
 80095be:	f8c9 3000 	str.w	r3, [r9]
 80095c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095c6:	4606      	mov	r6, r0
 80095c8:	460c      	mov	r4, r1
 80095ca:	b112      	cbz	r2, 80095d2 <_printf_common+0x2a>
 80095cc:	3301      	adds	r3, #1
 80095ce:	f8c9 3000 	str.w	r3, [r9]
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	0699      	lsls	r1, r3, #26
 80095d6:	bf42      	ittt	mi
 80095d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80095dc:	3302      	addmi	r3, #2
 80095de:	f8c9 3000 	strmi.w	r3, [r9]
 80095e2:	6825      	ldr	r5, [r4, #0]
 80095e4:	f015 0506 	ands.w	r5, r5, #6
 80095e8:	d107      	bne.n	80095fa <_printf_common+0x52>
 80095ea:	f104 0a19 	add.w	sl, r4, #25
 80095ee:	68e3      	ldr	r3, [r4, #12]
 80095f0:	f8d9 2000 	ldr.w	r2, [r9]
 80095f4:	1a9b      	subs	r3, r3, r2
 80095f6:	429d      	cmp	r5, r3
 80095f8:	db29      	blt.n	800964e <_printf_common+0xa6>
 80095fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80095fe:	6822      	ldr	r2, [r4, #0]
 8009600:	3300      	adds	r3, #0
 8009602:	bf18      	it	ne
 8009604:	2301      	movne	r3, #1
 8009606:	0692      	lsls	r2, r2, #26
 8009608:	d42e      	bmi.n	8009668 <_printf_common+0xc0>
 800960a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800960e:	4639      	mov	r1, r7
 8009610:	4630      	mov	r0, r6
 8009612:	47c0      	blx	r8
 8009614:	3001      	adds	r0, #1
 8009616:	d021      	beq.n	800965c <_printf_common+0xb4>
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	68e5      	ldr	r5, [r4, #12]
 800961c:	f8d9 2000 	ldr.w	r2, [r9]
 8009620:	f003 0306 	and.w	r3, r3, #6
 8009624:	2b04      	cmp	r3, #4
 8009626:	bf08      	it	eq
 8009628:	1aad      	subeq	r5, r5, r2
 800962a:	68a3      	ldr	r3, [r4, #8]
 800962c:	6922      	ldr	r2, [r4, #16]
 800962e:	bf0c      	ite	eq
 8009630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009634:	2500      	movne	r5, #0
 8009636:	4293      	cmp	r3, r2
 8009638:	bfc4      	itt	gt
 800963a:	1a9b      	subgt	r3, r3, r2
 800963c:	18ed      	addgt	r5, r5, r3
 800963e:	f04f 0900 	mov.w	r9, #0
 8009642:	341a      	adds	r4, #26
 8009644:	454d      	cmp	r5, r9
 8009646:	d11b      	bne.n	8009680 <_printf_common+0xd8>
 8009648:	2000      	movs	r0, #0
 800964a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964e:	2301      	movs	r3, #1
 8009650:	4652      	mov	r2, sl
 8009652:	4639      	mov	r1, r7
 8009654:	4630      	mov	r0, r6
 8009656:	47c0      	blx	r8
 8009658:	3001      	adds	r0, #1
 800965a:	d103      	bne.n	8009664 <_printf_common+0xbc>
 800965c:	f04f 30ff 	mov.w	r0, #4294967295
 8009660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009664:	3501      	adds	r5, #1
 8009666:	e7c2      	b.n	80095ee <_printf_common+0x46>
 8009668:	18e1      	adds	r1, r4, r3
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	2030      	movs	r0, #48	; 0x30
 800966e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009672:	4422      	add	r2, r4
 8009674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800967c:	3302      	adds	r3, #2
 800967e:	e7c4      	b.n	800960a <_printf_common+0x62>
 8009680:	2301      	movs	r3, #1
 8009682:	4622      	mov	r2, r4
 8009684:	4639      	mov	r1, r7
 8009686:	4630      	mov	r0, r6
 8009688:	47c0      	blx	r8
 800968a:	3001      	adds	r0, #1
 800968c:	d0e6      	beq.n	800965c <_printf_common+0xb4>
 800968e:	f109 0901 	add.w	r9, r9, #1
 8009692:	e7d7      	b.n	8009644 <_printf_common+0x9c>

08009694 <_printf_i>:
 8009694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009698:	4617      	mov	r7, r2
 800969a:	7e0a      	ldrb	r2, [r1, #24]
 800969c:	b085      	sub	sp, #20
 800969e:	2a6e      	cmp	r2, #110	; 0x6e
 80096a0:	4698      	mov	r8, r3
 80096a2:	4606      	mov	r6, r0
 80096a4:	460c      	mov	r4, r1
 80096a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096a8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80096ac:	f000 80bc 	beq.w	8009828 <_printf_i+0x194>
 80096b0:	d81a      	bhi.n	80096e8 <_printf_i+0x54>
 80096b2:	2a63      	cmp	r2, #99	; 0x63
 80096b4:	d02e      	beq.n	8009714 <_printf_i+0x80>
 80096b6:	d80a      	bhi.n	80096ce <_printf_i+0x3a>
 80096b8:	2a00      	cmp	r2, #0
 80096ba:	f000 80c8 	beq.w	800984e <_printf_i+0x1ba>
 80096be:	2a58      	cmp	r2, #88	; 0x58
 80096c0:	f000 808a 	beq.w	80097d8 <_printf_i+0x144>
 80096c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096c8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80096cc:	e02a      	b.n	8009724 <_printf_i+0x90>
 80096ce:	2a64      	cmp	r2, #100	; 0x64
 80096d0:	d001      	beq.n	80096d6 <_printf_i+0x42>
 80096d2:	2a69      	cmp	r2, #105	; 0x69
 80096d4:	d1f6      	bne.n	80096c4 <_printf_i+0x30>
 80096d6:	6821      	ldr	r1, [r4, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	f011 0f80 	tst.w	r1, #128	; 0x80
 80096de:	d023      	beq.n	8009728 <_printf_i+0x94>
 80096e0:	1d11      	adds	r1, r2, #4
 80096e2:	6019      	str	r1, [r3, #0]
 80096e4:	6813      	ldr	r3, [r2, #0]
 80096e6:	e027      	b.n	8009738 <_printf_i+0xa4>
 80096e8:	2a73      	cmp	r2, #115	; 0x73
 80096ea:	f000 80b4 	beq.w	8009856 <_printf_i+0x1c2>
 80096ee:	d808      	bhi.n	8009702 <_printf_i+0x6e>
 80096f0:	2a6f      	cmp	r2, #111	; 0x6f
 80096f2:	d02a      	beq.n	800974a <_printf_i+0xb6>
 80096f4:	2a70      	cmp	r2, #112	; 0x70
 80096f6:	d1e5      	bne.n	80096c4 <_printf_i+0x30>
 80096f8:	680a      	ldr	r2, [r1, #0]
 80096fa:	f042 0220 	orr.w	r2, r2, #32
 80096fe:	600a      	str	r2, [r1, #0]
 8009700:	e003      	b.n	800970a <_printf_i+0x76>
 8009702:	2a75      	cmp	r2, #117	; 0x75
 8009704:	d021      	beq.n	800974a <_printf_i+0xb6>
 8009706:	2a78      	cmp	r2, #120	; 0x78
 8009708:	d1dc      	bne.n	80096c4 <_printf_i+0x30>
 800970a:	2278      	movs	r2, #120	; 0x78
 800970c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8009710:	496e      	ldr	r1, [pc, #440]	; (80098cc <_printf_i+0x238>)
 8009712:	e064      	b.n	80097de <_printf_i+0x14a>
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800971a:	1d11      	adds	r1, r2, #4
 800971c:	6019      	str	r1, [r3, #0]
 800971e:	6813      	ldr	r3, [r2, #0]
 8009720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009724:	2301      	movs	r3, #1
 8009726:	e0a3      	b.n	8009870 <_printf_i+0x1dc>
 8009728:	f011 0f40 	tst.w	r1, #64	; 0x40
 800972c:	f102 0104 	add.w	r1, r2, #4
 8009730:	6019      	str	r1, [r3, #0]
 8009732:	d0d7      	beq.n	80096e4 <_printf_i+0x50>
 8009734:	f9b2 3000 	ldrsh.w	r3, [r2]
 8009738:	2b00      	cmp	r3, #0
 800973a:	da03      	bge.n	8009744 <_printf_i+0xb0>
 800973c:	222d      	movs	r2, #45	; 0x2d
 800973e:	425b      	negs	r3, r3
 8009740:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009744:	4962      	ldr	r1, [pc, #392]	; (80098d0 <_printf_i+0x23c>)
 8009746:	220a      	movs	r2, #10
 8009748:	e017      	b.n	800977a <_printf_i+0xe6>
 800974a:	6820      	ldr	r0, [r4, #0]
 800974c:	6819      	ldr	r1, [r3, #0]
 800974e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009752:	d003      	beq.n	800975c <_printf_i+0xc8>
 8009754:	1d08      	adds	r0, r1, #4
 8009756:	6018      	str	r0, [r3, #0]
 8009758:	680b      	ldr	r3, [r1, #0]
 800975a:	e006      	b.n	800976a <_printf_i+0xd6>
 800975c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009760:	f101 0004 	add.w	r0, r1, #4
 8009764:	6018      	str	r0, [r3, #0]
 8009766:	d0f7      	beq.n	8009758 <_printf_i+0xc4>
 8009768:	880b      	ldrh	r3, [r1, #0]
 800976a:	4959      	ldr	r1, [pc, #356]	; (80098d0 <_printf_i+0x23c>)
 800976c:	2a6f      	cmp	r2, #111	; 0x6f
 800976e:	bf14      	ite	ne
 8009770:	220a      	movne	r2, #10
 8009772:	2208      	moveq	r2, #8
 8009774:	2000      	movs	r0, #0
 8009776:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800977a:	6865      	ldr	r5, [r4, #4]
 800977c:	60a5      	str	r5, [r4, #8]
 800977e:	2d00      	cmp	r5, #0
 8009780:	f2c0 809c 	blt.w	80098bc <_printf_i+0x228>
 8009784:	6820      	ldr	r0, [r4, #0]
 8009786:	f020 0004 	bic.w	r0, r0, #4
 800978a:	6020      	str	r0, [r4, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d13f      	bne.n	8009810 <_printf_i+0x17c>
 8009790:	2d00      	cmp	r5, #0
 8009792:	f040 8095 	bne.w	80098c0 <_printf_i+0x22c>
 8009796:	4675      	mov	r5, lr
 8009798:	2a08      	cmp	r2, #8
 800979a:	d10b      	bne.n	80097b4 <_printf_i+0x120>
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	07da      	lsls	r2, r3, #31
 80097a0:	d508      	bpl.n	80097b4 <_printf_i+0x120>
 80097a2:	6923      	ldr	r3, [r4, #16]
 80097a4:	6862      	ldr	r2, [r4, #4]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	bfde      	ittt	le
 80097aa:	2330      	movle	r3, #48	; 0x30
 80097ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097b4:	ebae 0305 	sub.w	r3, lr, r5
 80097b8:	6123      	str	r3, [r4, #16]
 80097ba:	f8cd 8000 	str.w	r8, [sp]
 80097be:	463b      	mov	r3, r7
 80097c0:	aa03      	add	r2, sp, #12
 80097c2:	4621      	mov	r1, r4
 80097c4:	4630      	mov	r0, r6
 80097c6:	f7ff feef 	bl	80095a8 <_printf_common>
 80097ca:	3001      	adds	r0, #1
 80097cc:	d155      	bne.n	800987a <_printf_i+0x1e6>
 80097ce:	f04f 30ff 	mov.w	r0, #4294967295
 80097d2:	b005      	add	sp, #20
 80097d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097d8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80097dc:	493c      	ldr	r1, [pc, #240]	; (80098d0 <_printf_i+0x23c>)
 80097de:	6822      	ldr	r2, [r4, #0]
 80097e0:	6818      	ldr	r0, [r3, #0]
 80097e2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80097e6:	f100 0504 	add.w	r5, r0, #4
 80097ea:	601d      	str	r5, [r3, #0]
 80097ec:	d001      	beq.n	80097f2 <_printf_i+0x15e>
 80097ee:	6803      	ldr	r3, [r0, #0]
 80097f0:	e002      	b.n	80097f8 <_printf_i+0x164>
 80097f2:	0655      	lsls	r5, r2, #25
 80097f4:	d5fb      	bpl.n	80097ee <_printf_i+0x15a>
 80097f6:	8803      	ldrh	r3, [r0, #0]
 80097f8:	07d0      	lsls	r0, r2, #31
 80097fa:	bf44      	itt	mi
 80097fc:	f042 0220 	orrmi.w	r2, r2, #32
 8009800:	6022      	strmi	r2, [r4, #0]
 8009802:	b91b      	cbnz	r3, 800980c <_printf_i+0x178>
 8009804:	6822      	ldr	r2, [r4, #0]
 8009806:	f022 0220 	bic.w	r2, r2, #32
 800980a:	6022      	str	r2, [r4, #0]
 800980c:	2210      	movs	r2, #16
 800980e:	e7b1      	b.n	8009774 <_printf_i+0xe0>
 8009810:	4675      	mov	r5, lr
 8009812:	fbb3 f0f2 	udiv	r0, r3, r2
 8009816:	fb02 3310 	mls	r3, r2, r0, r3
 800981a:	5ccb      	ldrb	r3, [r1, r3]
 800981c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009820:	4603      	mov	r3, r0
 8009822:	2800      	cmp	r0, #0
 8009824:	d1f5      	bne.n	8009812 <_printf_i+0x17e>
 8009826:	e7b7      	b.n	8009798 <_printf_i+0x104>
 8009828:	6808      	ldr	r0, [r1, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	6949      	ldr	r1, [r1, #20]
 800982e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009832:	d004      	beq.n	800983e <_printf_i+0x1aa>
 8009834:	1d10      	adds	r0, r2, #4
 8009836:	6018      	str	r0, [r3, #0]
 8009838:	6813      	ldr	r3, [r2, #0]
 800983a:	6019      	str	r1, [r3, #0]
 800983c:	e007      	b.n	800984e <_printf_i+0x1ba>
 800983e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009842:	f102 0004 	add.w	r0, r2, #4
 8009846:	6018      	str	r0, [r3, #0]
 8009848:	6813      	ldr	r3, [r2, #0]
 800984a:	d0f6      	beq.n	800983a <_printf_i+0x1a6>
 800984c:	8019      	strh	r1, [r3, #0]
 800984e:	2300      	movs	r3, #0
 8009850:	6123      	str	r3, [r4, #16]
 8009852:	4675      	mov	r5, lr
 8009854:	e7b1      	b.n	80097ba <_printf_i+0x126>
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	1d11      	adds	r1, r2, #4
 800985a:	6019      	str	r1, [r3, #0]
 800985c:	6815      	ldr	r5, [r2, #0]
 800985e:	6862      	ldr	r2, [r4, #4]
 8009860:	2100      	movs	r1, #0
 8009862:	4628      	mov	r0, r5
 8009864:	f7f8 ffac 	bl	80027c0 <memchr>
 8009868:	b108      	cbz	r0, 800986e <_printf_i+0x1da>
 800986a:	1b40      	subs	r0, r0, r5
 800986c:	6060      	str	r0, [r4, #4]
 800986e:	6863      	ldr	r3, [r4, #4]
 8009870:	6123      	str	r3, [r4, #16]
 8009872:	2300      	movs	r3, #0
 8009874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009878:	e79f      	b.n	80097ba <_printf_i+0x126>
 800987a:	6923      	ldr	r3, [r4, #16]
 800987c:	462a      	mov	r2, r5
 800987e:	4639      	mov	r1, r7
 8009880:	4630      	mov	r0, r6
 8009882:	47c0      	blx	r8
 8009884:	3001      	adds	r0, #1
 8009886:	d0a2      	beq.n	80097ce <_printf_i+0x13a>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	079b      	lsls	r3, r3, #30
 800988c:	d507      	bpl.n	800989e <_printf_i+0x20a>
 800988e:	2500      	movs	r5, #0
 8009890:	f104 0919 	add.w	r9, r4, #25
 8009894:	68e3      	ldr	r3, [r4, #12]
 8009896:	9a03      	ldr	r2, [sp, #12]
 8009898:	1a9b      	subs	r3, r3, r2
 800989a:	429d      	cmp	r5, r3
 800989c:	db05      	blt.n	80098aa <_printf_i+0x216>
 800989e:	68e0      	ldr	r0, [r4, #12]
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	4298      	cmp	r0, r3
 80098a4:	bfb8      	it	lt
 80098a6:	4618      	movlt	r0, r3
 80098a8:	e793      	b.n	80097d2 <_printf_i+0x13e>
 80098aa:	2301      	movs	r3, #1
 80098ac:	464a      	mov	r2, r9
 80098ae:	4639      	mov	r1, r7
 80098b0:	4630      	mov	r0, r6
 80098b2:	47c0      	blx	r8
 80098b4:	3001      	adds	r0, #1
 80098b6:	d08a      	beq.n	80097ce <_printf_i+0x13a>
 80098b8:	3501      	adds	r5, #1
 80098ba:	e7eb      	b.n	8009894 <_printf_i+0x200>
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1a7      	bne.n	8009810 <_printf_i+0x17c>
 80098c0:	780b      	ldrb	r3, [r1, #0]
 80098c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098ca:	e765      	b.n	8009798 <_printf_i+0x104>
 80098cc:	080241dd 	.word	0x080241dd
 80098d0:	080241cc 	.word	0x080241cc

080098d4 <iprintf>:
 80098d4:	b40f      	push	{r0, r1, r2, r3}
 80098d6:	4b0a      	ldr	r3, [pc, #40]	; (8009900 <iprintf+0x2c>)
 80098d8:	b513      	push	{r0, r1, r4, lr}
 80098da:	681c      	ldr	r4, [r3, #0]
 80098dc:	b124      	cbz	r4, 80098e8 <iprintf+0x14>
 80098de:	69a3      	ldr	r3, [r4, #24]
 80098e0:	b913      	cbnz	r3, 80098e8 <iprintf+0x14>
 80098e2:	4620      	mov	r0, r4
 80098e4:	f001 f8e0 	bl	800aaa8 <__sinit>
 80098e8:	ab05      	add	r3, sp, #20
 80098ea:	9a04      	ldr	r2, [sp, #16]
 80098ec:	68a1      	ldr	r1, [r4, #8]
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	4620      	mov	r0, r4
 80098f2:	f001 fd27 	bl	800b344 <_vfiprintf_r>
 80098f6:	b002      	add	sp, #8
 80098f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098fc:	b004      	add	sp, #16
 80098fe:	4770      	bx	lr
 8009900:	2000056c 	.word	0x2000056c

08009904 <putchar>:
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4b08      	ldr	r3, [pc, #32]	; (8009928 <putchar+0x24>)
 8009908:	681c      	ldr	r4, [r3, #0]
 800990a:	4605      	mov	r5, r0
 800990c:	b124      	cbz	r4, 8009918 <putchar+0x14>
 800990e:	69a3      	ldr	r3, [r4, #24]
 8009910:	b913      	cbnz	r3, 8009918 <putchar+0x14>
 8009912:	4620      	mov	r0, r4
 8009914:	f001 f8c8 	bl	800aaa8 <__sinit>
 8009918:	68a2      	ldr	r2, [r4, #8]
 800991a:	4629      	mov	r1, r5
 800991c:	4620      	mov	r0, r4
 800991e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009922:	f001 be25 	b.w	800b570 <_putc_r>
 8009926:	bf00      	nop
 8009928:	2000056c 	.word	0x2000056c

0800992c <_puts_r>:
 800992c:	b570      	push	{r4, r5, r6, lr}
 800992e:	460e      	mov	r6, r1
 8009930:	4605      	mov	r5, r0
 8009932:	b118      	cbz	r0, 800993c <_puts_r+0x10>
 8009934:	6983      	ldr	r3, [r0, #24]
 8009936:	b90b      	cbnz	r3, 800993c <_puts_r+0x10>
 8009938:	f001 f8b6 	bl	800aaa8 <__sinit>
 800993c:	69ab      	ldr	r3, [r5, #24]
 800993e:	68ac      	ldr	r4, [r5, #8]
 8009940:	b913      	cbnz	r3, 8009948 <_puts_r+0x1c>
 8009942:	4628      	mov	r0, r5
 8009944:	f001 f8b0 	bl	800aaa8 <__sinit>
 8009948:	4b23      	ldr	r3, [pc, #140]	; (80099d8 <_puts_r+0xac>)
 800994a:	429c      	cmp	r4, r3
 800994c:	d117      	bne.n	800997e <_puts_r+0x52>
 800994e:	686c      	ldr	r4, [r5, #4]
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	071b      	lsls	r3, r3, #28
 8009954:	d51d      	bpl.n	8009992 <_puts_r+0x66>
 8009956:	6923      	ldr	r3, [r4, #16]
 8009958:	b1db      	cbz	r3, 8009992 <_puts_r+0x66>
 800995a:	3e01      	subs	r6, #1
 800995c:	68a3      	ldr	r3, [r4, #8]
 800995e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009962:	3b01      	subs	r3, #1
 8009964:	60a3      	str	r3, [r4, #8]
 8009966:	b9e9      	cbnz	r1, 80099a4 <_puts_r+0x78>
 8009968:	2b00      	cmp	r3, #0
 800996a:	da2e      	bge.n	80099ca <_puts_r+0x9e>
 800996c:	4622      	mov	r2, r4
 800996e:	210a      	movs	r1, #10
 8009970:	4628      	mov	r0, r5
 8009972:	f000 f88b 	bl	8009a8c <__swbuf_r>
 8009976:	3001      	adds	r0, #1
 8009978:	d011      	beq.n	800999e <_puts_r+0x72>
 800997a:	200a      	movs	r0, #10
 800997c:	bd70      	pop	{r4, r5, r6, pc}
 800997e:	4b17      	ldr	r3, [pc, #92]	; (80099dc <_puts_r+0xb0>)
 8009980:	429c      	cmp	r4, r3
 8009982:	d101      	bne.n	8009988 <_puts_r+0x5c>
 8009984:	68ac      	ldr	r4, [r5, #8]
 8009986:	e7e3      	b.n	8009950 <_puts_r+0x24>
 8009988:	4b15      	ldr	r3, [pc, #84]	; (80099e0 <_puts_r+0xb4>)
 800998a:	429c      	cmp	r4, r3
 800998c:	bf08      	it	eq
 800998e:	68ec      	ldreq	r4, [r5, #12]
 8009990:	e7de      	b.n	8009950 <_puts_r+0x24>
 8009992:	4621      	mov	r1, r4
 8009994:	4628      	mov	r0, r5
 8009996:	f000 f8cb 	bl	8009b30 <__swsetup_r>
 800999a:	2800      	cmp	r0, #0
 800999c:	d0dd      	beq.n	800995a <_puts_r+0x2e>
 800999e:	f04f 30ff 	mov.w	r0, #4294967295
 80099a2:	bd70      	pop	{r4, r5, r6, pc}
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	da04      	bge.n	80099b2 <_puts_r+0x86>
 80099a8:	69a2      	ldr	r2, [r4, #24]
 80099aa:	4293      	cmp	r3, r2
 80099ac:	db06      	blt.n	80099bc <_puts_r+0x90>
 80099ae:	290a      	cmp	r1, #10
 80099b0:	d004      	beq.n	80099bc <_puts_r+0x90>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	6022      	str	r2, [r4, #0]
 80099b8:	7019      	strb	r1, [r3, #0]
 80099ba:	e7cf      	b.n	800995c <_puts_r+0x30>
 80099bc:	4622      	mov	r2, r4
 80099be:	4628      	mov	r0, r5
 80099c0:	f000 f864 	bl	8009a8c <__swbuf_r>
 80099c4:	3001      	adds	r0, #1
 80099c6:	d1c9      	bne.n	800995c <_puts_r+0x30>
 80099c8:	e7e9      	b.n	800999e <_puts_r+0x72>
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	200a      	movs	r0, #10
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	6022      	str	r2, [r4, #0]
 80099d2:	7018      	strb	r0, [r3, #0]
 80099d4:	bd70      	pop	{r4, r5, r6, pc}
 80099d6:	bf00      	nop
 80099d8:	0802421c 	.word	0x0802421c
 80099dc:	0802423c 	.word	0x0802423c
 80099e0:	080241fc 	.word	0x080241fc

080099e4 <puts>:
 80099e4:	4b02      	ldr	r3, [pc, #8]	; (80099f0 <puts+0xc>)
 80099e6:	4601      	mov	r1, r0
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	f7ff bf9f 	b.w	800992c <_puts_r>
 80099ee:	bf00      	nop
 80099f0:	2000056c 	.word	0x2000056c

080099f4 <_sbrk_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4c06      	ldr	r4, [pc, #24]	; (8009a10 <_sbrk_r+0x1c>)
 80099f8:	2300      	movs	r3, #0
 80099fa:	4605      	mov	r5, r0
 80099fc:	4608      	mov	r0, r1
 80099fe:	6023      	str	r3, [r4, #0]
 8009a00:	f004 fb3a 	bl	800e078 <_sbrk>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d102      	bne.n	8009a0e <_sbrk_r+0x1a>
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	b103      	cbz	r3, 8009a0e <_sbrk_r+0x1a>
 8009a0c:	602b      	str	r3, [r5, #0]
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	2000fbdc 	.word	0x2000fbdc

08009a14 <frexpf>:
 8009a14:	ee10 1a10 	vmov	r1, s0
 8009a18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009a22:	f04f 0400 	mov.w	r4, #0
 8009a26:	ee10 2a10 	vmov	r2, s0
 8009a2a:	6004      	str	r4, [r0, #0]
 8009a2c:	da17      	bge.n	8009a5e <frexpf+0x4a>
 8009a2e:	b1b3      	cbz	r3, 8009a5e <frexpf+0x4a>
 8009a30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a34:	da0a      	bge.n	8009a4c <frexpf+0x38>
 8009a36:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009a64 <frexpf+0x50>
 8009a3a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009a3e:	f06f 0118 	mvn.w	r1, #24
 8009a42:	ee17 2a90 	vmov	r2, s15
 8009a46:	6001      	str	r1, [r0, #0]
 8009a48:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009a4c:	6801      	ldr	r1, [r0, #0]
 8009a4e:	15db      	asrs	r3, r3, #23
 8009a50:	3b7e      	subs	r3, #126	; 0x7e
 8009a52:	440b      	add	r3, r1
 8009a54:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009a58:	6003      	str	r3, [r0, #0]
 8009a5a:	f042 517c 	orr.w	r1, r2, #1056964608	; 0x3f000000
 8009a5e:	ee00 1a10 	vmov	s0, r1
 8009a62:	bd10      	pop	{r4, pc}
 8009a64:	4c000000 	.word	0x4c000000

08009a68 <strncmp>:
 8009a68:	b510      	push	{r4, lr}
 8009a6a:	b16a      	cbz	r2, 8009a88 <strncmp+0x20>
 8009a6c:	3901      	subs	r1, #1
 8009a6e:	1884      	adds	r4, r0, r2
 8009a70:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009a74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d103      	bne.n	8009a84 <strncmp+0x1c>
 8009a7c:	42a0      	cmp	r0, r4
 8009a7e:	d001      	beq.n	8009a84 <strncmp+0x1c>
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1f5      	bne.n	8009a70 <strncmp+0x8>
 8009a84:	1a98      	subs	r0, r3, r2
 8009a86:	bd10      	pop	{r4, pc}
 8009a88:	4610      	mov	r0, r2
 8009a8a:	bd10      	pop	{r4, pc}

08009a8c <__swbuf_r>:
 8009a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8e:	460e      	mov	r6, r1
 8009a90:	4614      	mov	r4, r2
 8009a92:	4605      	mov	r5, r0
 8009a94:	b118      	cbz	r0, 8009a9e <__swbuf_r+0x12>
 8009a96:	6983      	ldr	r3, [r0, #24]
 8009a98:	b90b      	cbnz	r3, 8009a9e <__swbuf_r+0x12>
 8009a9a:	f001 f805 	bl	800aaa8 <__sinit>
 8009a9e:	4b21      	ldr	r3, [pc, #132]	; (8009b24 <__swbuf_r+0x98>)
 8009aa0:	429c      	cmp	r4, r3
 8009aa2:	d12a      	bne.n	8009afa <__swbuf_r+0x6e>
 8009aa4:	686c      	ldr	r4, [r5, #4]
 8009aa6:	69a3      	ldr	r3, [r4, #24]
 8009aa8:	60a3      	str	r3, [r4, #8]
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	071a      	lsls	r2, r3, #28
 8009aae:	d52e      	bpl.n	8009b0e <__swbuf_r+0x82>
 8009ab0:	6923      	ldr	r3, [r4, #16]
 8009ab2:	b363      	cbz	r3, 8009b0e <__swbuf_r+0x82>
 8009ab4:	6923      	ldr	r3, [r4, #16]
 8009ab6:	6820      	ldr	r0, [r4, #0]
 8009ab8:	1ac0      	subs	r0, r0, r3
 8009aba:	6963      	ldr	r3, [r4, #20]
 8009abc:	b2f6      	uxtb	r6, r6
 8009abe:	4298      	cmp	r0, r3
 8009ac0:	4637      	mov	r7, r6
 8009ac2:	db04      	blt.n	8009ace <__swbuf_r+0x42>
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f000 ff84 	bl	800a9d4 <_fflush_r>
 8009acc:	bb28      	cbnz	r0, 8009b1a <__swbuf_r+0x8e>
 8009ace:	68a3      	ldr	r3, [r4, #8]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	60a3      	str	r3, [r4, #8]
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	6022      	str	r2, [r4, #0]
 8009ada:	701e      	strb	r6, [r3, #0]
 8009adc:	6963      	ldr	r3, [r4, #20]
 8009ade:	3001      	adds	r0, #1
 8009ae0:	4298      	cmp	r0, r3
 8009ae2:	d004      	beq.n	8009aee <__swbuf_r+0x62>
 8009ae4:	89a3      	ldrh	r3, [r4, #12]
 8009ae6:	07db      	lsls	r3, r3, #31
 8009ae8:	d519      	bpl.n	8009b1e <__swbuf_r+0x92>
 8009aea:	2e0a      	cmp	r6, #10
 8009aec:	d117      	bne.n	8009b1e <__swbuf_r+0x92>
 8009aee:	4621      	mov	r1, r4
 8009af0:	4628      	mov	r0, r5
 8009af2:	f000 ff6f 	bl	800a9d4 <_fflush_r>
 8009af6:	b190      	cbz	r0, 8009b1e <__swbuf_r+0x92>
 8009af8:	e00f      	b.n	8009b1a <__swbuf_r+0x8e>
 8009afa:	4b0b      	ldr	r3, [pc, #44]	; (8009b28 <__swbuf_r+0x9c>)
 8009afc:	429c      	cmp	r4, r3
 8009afe:	d101      	bne.n	8009b04 <__swbuf_r+0x78>
 8009b00:	68ac      	ldr	r4, [r5, #8]
 8009b02:	e7d0      	b.n	8009aa6 <__swbuf_r+0x1a>
 8009b04:	4b09      	ldr	r3, [pc, #36]	; (8009b2c <__swbuf_r+0xa0>)
 8009b06:	429c      	cmp	r4, r3
 8009b08:	bf08      	it	eq
 8009b0a:	68ec      	ldreq	r4, [r5, #12]
 8009b0c:	e7cb      	b.n	8009aa6 <__swbuf_r+0x1a>
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4628      	mov	r0, r5
 8009b12:	f000 f80d 	bl	8009b30 <__swsetup_r>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d0cc      	beq.n	8009ab4 <__swbuf_r+0x28>
 8009b1a:	f04f 37ff 	mov.w	r7, #4294967295
 8009b1e:	4638      	mov	r0, r7
 8009b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b22:	bf00      	nop
 8009b24:	0802421c 	.word	0x0802421c
 8009b28:	0802423c 	.word	0x0802423c
 8009b2c:	080241fc 	.word	0x080241fc

08009b30 <__swsetup_r>:
 8009b30:	4b32      	ldr	r3, [pc, #200]	; (8009bfc <__swsetup_r+0xcc>)
 8009b32:	b570      	push	{r4, r5, r6, lr}
 8009b34:	681d      	ldr	r5, [r3, #0]
 8009b36:	4606      	mov	r6, r0
 8009b38:	460c      	mov	r4, r1
 8009b3a:	b125      	cbz	r5, 8009b46 <__swsetup_r+0x16>
 8009b3c:	69ab      	ldr	r3, [r5, #24]
 8009b3e:	b913      	cbnz	r3, 8009b46 <__swsetup_r+0x16>
 8009b40:	4628      	mov	r0, r5
 8009b42:	f000 ffb1 	bl	800aaa8 <__sinit>
 8009b46:	4b2e      	ldr	r3, [pc, #184]	; (8009c00 <__swsetup_r+0xd0>)
 8009b48:	429c      	cmp	r4, r3
 8009b4a:	d10f      	bne.n	8009b6c <__swsetup_r+0x3c>
 8009b4c:	686c      	ldr	r4, [r5, #4]
 8009b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	0715      	lsls	r5, r2, #28
 8009b56:	d42c      	bmi.n	8009bb2 <__swsetup_r+0x82>
 8009b58:	06d0      	lsls	r0, r2, #27
 8009b5a:	d411      	bmi.n	8009b80 <__swsetup_r+0x50>
 8009b5c:	2209      	movs	r2, #9
 8009b5e:	6032      	str	r2, [r6, #0]
 8009b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b64:	81a3      	strh	r3, [r4, #12]
 8009b66:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6a:	bd70      	pop	{r4, r5, r6, pc}
 8009b6c:	4b25      	ldr	r3, [pc, #148]	; (8009c04 <__swsetup_r+0xd4>)
 8009b6e:	429c      	cmp	r4, r3
 8009b70:	d101      	bne.n	8009b76 <__swsetup_r+0x46>
 8009b72:	68ac      	ldr	r4, [r5, #8]
 8009b74:	e7eb      	b.n	8009b4e <__swsetup_r+0x1e>
 8009b76:	4b24      	ldr	r3, [pc, #144]	; (8009c08 <__swsetup_r+0xd8>)
 8009b78:	429c      	cmp	r4, r3
 8009b7a:	bf08      	it	eq
 8009b7c:	68ec      	ldreq	r4, [r5, #12]
 8009b7e:	e7e6      	b.n	8009b4e <__swsetup_r+0x1e>
 8009b80:	0751      	lsls	r1, r2, #29
 8009b82:	d512      	bpl.n	8009baa <__swsetup_r+0x7a>
 8009b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b86:	b141      	cbz	r1, 8009b9a <__swsetup_r+0x6a>
 8009b88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b8c:	4299      	cmp	r1, r3
 8009b8e:	d002      	beq.n	8009b96 <__swsetup_r+0x66>
 8009b90:	4630      	mov	r0, r6
 8009b92:	f001 fb5f 	bl	800b254 <_free_r>
 8009b96:	2300      	movs	r3, #0
 8009b98:	6363      	str	r3, [r4, #52]	; 0x34
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ba0:	81a3      	strh	r3, [r4, #12]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	6063      	str	r3, [r4, #4]
 8009ba6:	6923      	ldr	r3, [r4, #16]
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	89a3      	ldrh	r3, [r4, #12]
 8009bac:	f043 0308 	orr.w	r3, r3, #8
 8009bb0:	81a3      	strh	r3, [r4, #12]
 8009bb2:	6923      	ldr	r3, [r4, #16]
 8009bb4:	b94b      	cbnz	r3, 8009bca <__swsetup_r+0x9a>
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bc0:	d003      	beq.n	8009bca <__swsetup_r+0x9a>
 8009bc2:	4621      	mov	r1, r4
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f001 f82b 	bl	800ac20 <__smakebuf_r>
 8009bca:	89a2      	ldrh	r2, [r4, #12]
 8009bcc:	f012 0301 	ands.w	r3, r2, #1
 8009bd0:	d00c      	beq.n	8009bec <__swsetup_r+0xbc>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60a3      	str	r3, [r4, #8]
 8009bd6:	6963      	ldr	r3, [r4, #20]
 8009bd8:	425b      	negs	r3, r3
 8009bda:	61a3      	str	r3, [r4, #24]
 8009bdc:	6923      	ldr	r3, [r4, #16]
 8009bde:	b953      	cbnz	r3, 8009bf6 <__swsetup_r+0xc6>
 8009be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009be8:	d1ba      	bne.n	8009b60 <__swsetup_r+0x30>
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	0792      	lsls	r2, r2, #30
 8009bee:	bf58      	it	pl
 8009bf0:	6963      	ldrpl	r3, [r4, #20]
 8009bf2:	60a3      	str	r3, [r4, #8]
 8009bf4:	e7f2      	b.n	8009bdc <__swsetup_r+0xac>
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	e7f7      	b.n	8009bea <__swsetup_r+0xba>
 8009bfa:	bf00      	nop
 8009bfc:	2000056c 	.word	0x2000056c
 8009c00:	0802421c 	.word	0x0802421c
 8009c04:	0802423c 	.word	0x0802423c
 8009c08:	080241fc 	.word	0x080241fc

08009c0c <quorem>:
 8009c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c10:	6903      	ldr	r3, [r0, #16]
 8009c12:	690c      	ldr	r4, [r1, #16]
 8009c14:	429c      	cmp	r4, r3
 8009c16:	4680      	mov	r8, r0
 8009c18:	f300 8082 	bgt.w	8009d20 <quorem+0x114>
 8009c1c:	3c01      	subs	r4, #1
 8009c1e:	f101 0714 	add.w	r7, r1, #20
 8009c22:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8009c26:	f100 0614 	add.w	r6, r0, #20
 8009c2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009c2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009c32:	eb06 030e 	add.w	r3, r6, lr
 8009c36:	3501      	adds	r5, #1
 8009c38:	eb07 090e 	add.w	r9, r7, lr
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009c42:	b395      	cbz	r5, 8009caa <quorem+0x9e>
 8009c44:	f04f 0a00 	mov.w	sl, #0
 8009c48:	4638      	mov	r0, r7
 8009c4a:	46b4      	mov	ip, r6
 8009c4c:	46d3      	mov	fp, sl
 8009c4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c52:	b293      	uxth	r3, r2
 8009c54:	fb05 a303 	mla	r3, r5, r3, sl
 8009c58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	ebab 0303 	sub.w	r3, fp, r3
 8009c62:	0c12      	lsrs	r2, r2, #16
 8009c64:	f8bc b000 	ldrh.w	fp, [ip]
 8009c68:	fb05 a202 	mla	r2, r5, r2, sl
 8009c6c:	fa13 f38b 	uxtah	r3, r3, fp
 8009c70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009c74:	fa1f fb82 	uxth.w	fp, r2
 8009c78:	f8dc 2000 	ldr.w	r2, [ip]
 8009c7c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009c80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c8a:	4581      	cmp	r9, r0
 8009c8c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009c90:	f84c 3b04 	str.w	r3, [ip], #4
 8009c94:	d2db      	bcs.n	8009c4e <quorem+0x42>
 8009c96:	f856 300e 	ldr.w	r3, [r6, lr]
 8009c9a:	b933      	cbnz	r3, 8009caa <quorem+0x9e>
 8009c9c:	9b01      	ldr	r3, [sp, #4]
 8009c9e:	3b04      	subs	r3, #4
 8009ca0:	429e      	cmp	r6, r3
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	d330      	bcc.n	8009d08 <quorem+0xfc>
 8009ca6:	f8c8 4010 	str.w	r4, [r8, #16]
 8009caa:	4640      	mov	r0, r8
 8009cac:	f001 fa0b 	bl	800b0c6 <__mcmp>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	db25      	blt.n	8009d00 <quorem+0xf4>
 8009cb4:	3501      	adds	r5, #1
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	f04f 0e00 	mov.w	lr, #0
 8009cbc:	f857 2b04 	ldr.w	r2, [r7], #4
 8009cc0:	f8d0 c000 	ldr.w	ip, [r0]
 8009cc4:	b293      	uxth	r3, r2
 8009cc6:	ebae 0303 	sub.w	r3, lr, r3
 8009cca:	0c12      	lsrs	r2, r2, #16
 8009ccc:	fa13 f38c 	uxtah	r3, r3, ip
 8009cd0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009cd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cde:	45b9      	cmp	r9, r7
 8009ce0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009ce4:	f840 3b04 	str.w	r3, [r0], #4
 8009ce8:	d2e8      	bcs.n	8009cbc <quorem+0xb0>
 8009cea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009cee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009cf2:	b92a      	cbnz	r2, 8009d00 <quorem+0xf4>
 8009cf4:	3b04      	subs	r3, #4
 8009cf6:	429e      	cmp	r6, r3
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	d30b      	bcc.n	8009d14 <quorem+0x108>
 8009cfc:	f8c8 4010 	str.w	r4, [r8, #16]
 8009d00:	4628      	mov	r0, r5
 8009d02:	b003      	add	sp, #12
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d08:	6812      	ldr	r2, [r2, #0]
 8009d0a:	3b04      	subs	r3, #4
 8009d0c:	2a00      	cmp	r2, #0
 8009d0e:	d1ca      	bne.n	8009ca6 <quorem+0x9a>
 8009d10:	3c01      	subs	r4, #1
 8009d12:	e7c5      	b.n	8009ca0 <quorem+0x94>
 8009d14:	6812      	ldr	r2, [r2, #0]
 8009d16:	3b04      	subs	r3, #4
 8009d18:	2a00      	cmp	r2, #0
 8009d1a:	d1ef      	bne.n	8009cfc <quorem+0xf0>
 8009d1c:	3c01      	subs	r4, #1
 8009d1e:	e7ea      	b.n	8009cf6 <quorem+0xea>
 8009d20:	2000      	movs	r0, #0
 8009d22:	e7ee      	b.n	8009d02 <quorem+0xf6>
 8009d24:	0000      	movs	r0, r0
	...

08009d28 <_dtoa_r>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	ec57 6b10 	vmov	r6, r7, d0
 8009d30:	b097      	sub	sp, #92	; 0x5c
 8009d32:	e9cd 6700 	strd	r6, r7, [sp]
 8009d36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d38:	9107      	str	r1, [sp, #28]
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	920a      	str	r2, [sp, #40]	; 0x28
 8009d3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d40:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8009d42:	b93e      	cbnz	r6, 8009d54 <_dtoa_r+0x2c>
 8009d44:	2010      	movs	r0, #16
 8009d46:	f000 ffab 	bl	800aca0 <malloc>
 8009d4a:	6260      	str	r0, [r4, #36]	; 0x24
 8009d4c:	6046      	str	r6, [r0, #4]
 8009d4e:	6086      	str	r6, [r0, #8]
 8009d50:	6006      	str	r6, [r0, #0]
 8009d52:	60c6      	str	r6, [r0, #12]
 8009d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d56:	6819      	ldr	r1, [r3, #0]
 8009d58:	b151      	cbz	r1, 8009d70 <_dtoa_r+0x48>
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	604a      	str	r2, [r1, #4]
 8009d5e:	2301      	movs	r3, #1
 8009d60:	4093      	lsls	r3, r2
 8009d62:	608b      	str	r3, [r1, #8]
 8009d64:	4620      	mov	r0, r4
 8009d66:	f000 ffd9 	bl	800ad1c <_Bfree>
 8009d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	9b01      	ldr	r3, [sp, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	bfbf      	itttt	lt
 8009d76:	2301      	movlt	r3, #1
 8009d78:	602b      	strlt	r3, [r5, #0]
 8009d7a:	9b01      	ldrlt	r3, [sp, #4]
 8009d7c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d80:	bfb2      	itee	lt
 8009d82:	9301      	strlt	r3, [sp, #4]
 8009d84:	2300      	movge	r3, #0
 8009d86:	602b      	strge	r3, [r5, #0]
 8009d88:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d8c:	4ba8      	ldr	r3, [pc, #672]	; (800a030 <_dtoa_r+0x308>)
 8009d8e:	ea33 0308 	bics.w	r3, r3, r8
 8009d92:	d11b      	bne.n	8009dcc <_dtoa_r+0xa4>
 8009d94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d96:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d9a:	6013      	str	r3, [r2, #0]
 8009d9c:	9b00      	ldr	r3, [sp, #0]
 8009d9e:	b923      	cbnz	r3, 8009daa <_dtoa_r+0x82>
 8009da0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009da4:	2800      	cmp	r0, #0
 8009da6:	f000 8578 	beq.w	800a89a <_dtoa_r+0xb72>
 8009daa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dac:	b953      	cbnz	r3, 8009dc4 <_dtoa_r+0x9c>
 8009dae:	4ba1      	ldr	r3, [pc, #644]	; (800a034 <_dtoa_r+0x30c>)
 8009db0:	e021      	b.n	8009df6 <_dtoa_r+0xce>
 8009db2:	4ba1      	ldr	r3, [pc, #644]	; (800a038 <_dtoa_r+0x310>)
 8009db4:	9302      	str	r3, [sp, #8]
 8009db6:	3308      	adds	r3, #8
 8009db8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009dba:	6013      	str	r3, [r2, #0]
 8009dbc:	9802      	ldr	r0, [sp, #8]
 8009dbe:	b017      	add	sp, #92	; 0x5c
 8009dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc4:	4b9b      	ldr	r3, [pc, #620]	; (800a034 <_dtoa_r+0x30c>)
 8009dc6:	9302      	str	r3, [sp, #8]
 8009dc8:	3303      	adds	r3, #3
 8009dca:	e7f5      	b.n	8009db8 <_dtoa_r+0x90>
 8009dcc:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	f7f9 f962 	bl	80030a0 <__aeabi_dcmpeq>
 8009ddc:	4681      	mov	r9, r0
 8009dde:	b160      	cbz	r0, 8009dfa <_dtoa_r+0xd2>
 8009de0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009de2:	2301      	movs	r3, #1
 8009de4:	6013      	str	r3, [r2, #0]
 8009de6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 8553 	beq.w	800a894 <_dtoa_r+0xb6c>
 8009dee:	4b93      	ldr	r3, [pc, #588]	; (800a03c <_dtoa_r+0x314>)
 8009df0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	9302      	str	r3, [sp, #8]
 8009df8:	e7e0      	b.n	8009dbc <_dtoa_r+0x94>
 8009dfa:	aa14      	add	r2, sp, #80	; 0x50
 8009dfc:	a915      	add	r1, sp, #84	; 0x54
 8009dfe:	ec47 6b10 	vmov	d0, r6, r7
 8009e02:	4620      	mov	r0, r4
 8009e04:	f001 f9d7 	bl	800b1b6 <__d2b>
 8009e08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009e0c:	4682      	mov	sl, r0
 8009e0e:	2d00      	cmp	r5, #0
 8009e10:	d07e      	beq.n	8009f10 <_dtoa_r+0x1e8>
 8009e12:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e16:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009e20:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e24:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8009e28:	2200      	movs	r2, #0
 8009e2a:	4b85      	ldr	r3, [pc, #532]	; (800a040 <_dtoa_r+0x318>)
 8009e2c:	f7f8 fd1c 	bl	8002868 <__aeabi_dsub>
 8009e30:	a379      	add	r3, pc, #484	; (adr r3, 800a018 <_dtoa_r+0x2f0>)
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	f7f8 fecb 	bl	8002bd0 <__aeabi_dmul>
 8009e3a:	a379      	add	r3, pc, #484	; (adr r3, 800a020 <_dtoa_r+0x2f8>)
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	f7f8 fd14 	bl	800286c <__adddf3>
 8009e44:	4606      	mov	r6, r0
 8009e46:	4628      	mov	r0, r5
 8009e48:	460f      	mov	r7, r1
 8009e4a:	f7f8 fe5b 	bl	8002b04 <__aeabi_i2d>
 8009e4e:	a376      	add	r3, pc, #472	; (adr r3, 800a028 <_dtoa_r+0x300>)
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	f7f8 febc 	bl	8002bd0 <__aeabi_dmul>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	4639      	mov	r1, r7
 8009e60:	f7f8 fd04 	bl	800286c <__adddf3>
 8009e64:	4606      	mov	r6, r0
 8009e66:	460f      	mov	r7, r1
 8009e68:	f7f9 f962 	bl	8003130 <__aeabi_d2iz>
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	4683      	mov	fp, r0
 8009e70:	2300      	movs	r3, #0
 8009e72:	4630      	mov	r0, r6
 8009e74:	4639      	mov	r1, r7
 8009e76:	f7f9 f91d 	bl	80030b4 <__aeabi_dcmplt>
 8009e7a:	b158      	cbz	r0, 8009e94 <_dtoa_r+0x16c>
 8009e7c:	4658      	mov	r0, fp
 8009e7e:	f7f8 fe41 	bl	8002b04 <__aeabi_i2d>
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	4630      	mov	r0, r6
 8009e88:	4639      	mov	r1, r7
 8009e8a:	f7f9 f909 	bl	80030a0 <__aeabi_dcmpeq>
 8009e8e:	b908      	cbnz	r0, 8009e94 <_dtoa_r+0x16c>
 8009e90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e94:	f1bb 0f16 	cmp.w	fp, #22
 8009e98:	d859      	bhi.n	8009f4e <_dtoa_r+0x226>
 8009e9a:	496a      	ldr	r1, [pc, #424]	; (800a044 <_dtoa_r+0x31c>)
 8009e9c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009ea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ea8:	f7f9 f922 	bl	80030f0 <__aeabi_dcmpgt>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d050      	beq.n	8009f52 <_dtoa_r+0x22a>
 8009eb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	930e      	str	r3, [sp, #56]	; 0x38
 8009eb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009eba:	1b5d      	subs	r5, r3, r5
 8009ebc:	1e6b      	subs	r3, r5, #1
 8009ebe:	9306      	str	r3, [sp, #24]
 8009ec0:	bf45      	ittet	mi
 8009ec2:	f1c5 0301 	rsbmi	r3, r5, #1
 8009ec6:	9305      	strmi	r3, [sp, #20]
 8009ec8:	2300      	movpl	r3, #0
 8009eca:	2300      	movmi	r3, #0
 8009ecc:	bf4c      	ite	mi
 8009ece:	9306      	strmi	r3, [sp, #24]
 8009ed0:	9305      	strpl	r3, [sp, #20]
 8009ed2:	f1bb 0f00 	cmp.w	fp, #0
 8009ed6:	db3e      	blt.n	8009f56 <_dtoa_r+0x22e>
 8009ed8:	9b06      	ldr	r3, [sp, #24]
 8009eda:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009ede:	445b      	add	r3, fp
 8009ee0:	9306      	str	r3, [sp, #24]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	9308      	str	r3, [sp, #32]
 8009ee6:	9b07      	ldr	r3, [sp, #28]
 8009ee8:	2b09      	cmp	r3, #9
 8009eea:	f200 80af 	bhi.w	800a04c <_dtoa_r+0x324>
 8009eee:	2b05      	cmp	r3, #5
 8009ef0:	bfc4      	itt	gt
 8009ef2:	3b04      	subgt	r3, #4
 8009ef4:	9307      	strgt	r3, [sp, #28]
 8009ef6:	9b07      	ldr	r3, [sp, #28]
 8009ef8:	f1a3 0302 	sub.w	r3, r3, #2
 8009efc:	bfcc      	ite	gt
 8009efe:	2600      	movgt	r6, #0
 8009f00:	2601      	movle	r6, #1
 8009f02:	2b03      	cmp	r3, #3
 8009f04:	f200 80ae 	bhi.w	800a064 <_dtoa_r+0x33c>
 8009f08:	e8df f003 	tbb	[pc, r3]
 8009f0c:	772f8482 	.word	0x772f8482
 8009f10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f12:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009f14:	441d      	add	r5, r3
 8009f16:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009f1a:	2b20      	cmp	r3, #32
 8009f1c:	dd11      	ble.n	8009f42 <_dtoa_r+0x21a>
 8009f1e:	9a00      	ldr	r2, [sp, #0]
 8009f20:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009f24:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009f28:	fa22 f000 	lsr.w	r0, r2, r0
 8009f2c:	fa08 f303 	lsl.w	r3, r8, r3
 8009f30:	4318      	orrs	r0, r3
 8009f32:	f7f8 fdd7 	bl	8002ae4 <__aeabi_ui2d>
 8009f36:	2301      	movs	r3, #1
 8009f38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009f3c:	3d01      	subs	r5, #1
 8009f3e:	9312      	str	r3, [sp, #72]	; 0x48
 8009f40:	e772      	b.n	8009e28 <_dtoa_r+0x100>
 8009f42:	f1c3 0020 	rsb	r0, r3, #32
 8009f46:	9b00      	ldr	r3, [sp, #0]
 8009f48:	fa03 f000 	lsl.w	r0, r3, r0
 8009f4c:	e7f1      	b.n	8009f32 <_dtoa_r+0x20a>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e7b1      	b.n	8009eb6 <_dtoa_r+0x18e>
 8009f52:	900e      	str	r0, [sp, #56]	; 0x38
 8009f54:	e7b0      	b.n	8009eb8 <_dtoa_r+0x190>
 8009f56:	9b05      	ldr	r3, [sp, #20]
 8009f58:	eba3 030b 	sub.w	r3, r3, fp
 8009f5c:	9305      	str	r3, [sp, #20]
 8009f5e:	f1cb 0300 	rsb	r3, fp, #0
 8009f62:	9308      	str	r3, [sp, #32]
 8009f64:	2300      	movs	r3, #0
 8009f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f68:	e7bd      	b.n	8009ee6 <_dtoa_r+0x1be>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	dd7a      	ble.n	800a06a <_dtoa_r+0x342>
 8009f74:	9304      	str	r3, [sp, #16]
 8009f76:	9303      	str	r3, [sp, #12]
 8009f78:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	606a      	str	r2, [r5, #4]
 8009f7e:	2104      	movs	r1, #4
 8009f80:	f101 0214 	add.w	r2, r1, #20
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d975      	bls.n	800a074 <_dtoa_r+0x34c>
 8009f88:	6869      	ldr	r1, [r5, #4]
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 fe92 	bl	800acb4 <_Balloc>
 8009f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f92:	6028      	str	r0, [r5, #0]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	9302      	str	r3, [sp, #8]
 8009f98:	9b03      	ldr	r3, [sp, #12]
 8009f9a:	2b0e      	cmp	r3, #14
 8009f9c:	f200 80e5 	bhi.w	800a16a <_dtoa_r+0x442>
 8009fa0:	2e00      	cmp	r6, #0
 8009fa2:	f000 80e2 	beq.w	800a16a <_dtoa_r+0x442>
 8009fa6:	ed9d 7b00 	vldr	d7, [sp]
 8009faa:	f1bb 0f00 	cmp.w	fp, #0
 8009fae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009fb2:	dd74      	ble.n	800a09e <_dtoa_r+0x376>
 8009fb4:	4a23      	ldr	r2, [pc, #140]	; (800a044 <_dtoa_r+0x31c>)
 8009fb6:	f00b 030f 	and.w	r3, fp, #15
 8009fba:	ea4f 162b 	mov.w	r6, fp, asr #4
 8009fbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009fc2:	06f0      	lsls	r0, r6, #27
 8009fc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fc8:	d559      	bpl.n	800a07e <_dtoa_r+0x356>
 8009fca:	4b1f      	ldr	r3, [pc, #124]	; (800a048 <_dtoa_r+0x320>)
 8009fcc:	ec51 0b17 	vmov	r0, r1, d7
 8009fd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fd4:	f7f8 ff26 	bl	8002e24 <__aeabi_ddiv>
 8009fd8:	e9cd 0100 	strd	r0, r1, [sp]
 8009fdc:	f006 060f 	and.w	r6, r6, #15
 8009fe0:	2503      	movs	r5, #3
 8009fe2:	4f19      	ldr	r7, [pc, #100]	; (800a048 <_dtoa_r+0x320>)
 8009fe4:	2e00      	cmp	r6, #0
 8009fe6:	d14c      	bne.n	800a082 <_dtoa_r+0x35a>
 8009fe8:	4642      	mov	r2, r8
 8009fea:	464b      	mov	r3, r9
 8009fec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ff0:	f7f8 ff18 	bl	8002e24 <__aeabi_ddiv>
 8009ff4:	e9cd 0100 	strd	r0, r1, [sp]
 8009ff8:	e06a      	b.n	800a0d0 <_dtoa_r+0x3a8>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a000:	445b      	add	r3, fp
 800a002:	9304      	str	r3, [sp, #16]
 800a004:	3301      	adds	r3, #1
 800a006:	2b01      	cmp	r3, #1
 800a008:	9303      	str	r3, [sp, #12]
 800a00a:	bfb8      	it	lt
 800a00c:	2301      	movlt	r3, #1
 800a00e:	e7b3      	b.n	8009f78 <_dtoa_r+0x250>
 800a010:	2300      	movs	r3, #0
 800a012:	e7ab      	b.n	8009f6c <_dtoa_r+0x244>
 800a014:	2300      	movs	r3, #0
 800a016:	e7f1      	b.n	8009ffc <_dtoa_r+0x2d4>
 800a018:	636f4361 	.word	0x636f4361
 800a01c:	3fd287a7 	.word	0x3fd287a7
 800a020:	8b60c8b3 	.word	0x8b60c8b3
 800a024:	3fc68a28 	.word	0x3fc68a28
 800a028:	509f79fb 	.word	0x509f79fb
 800a02c:	3fd34413 	.word	0x3fd34413
 800a030:	7ff00000 	.word	0x7ff00000
 800a034:	080241f7 	.word	0x080241f7
 800a038:	080241ee 	.word	0x080241ee
 800a03c:	0802447d 	.word	0x0802447d
 800a040:	3ff80000 	.word	0x3ff80000
 800a044:	08024288 	.word	0x08024288
 800a048:	08024260 	.word	0x08024260
 800a04c:	2601      	movs	r6, #1
 800a04e:	2300      	movs	r3, #0
 800a050:	9307      	str	r3, [sp, #28]
 800a052:	9609      	str	r6, [sp, #36]	; 0x24
 800a054:	f04f 33ff 	mov.w	r3, #4294967295
 800a058:	9304      	str	r3, [sp, #16]
 800a05a:	9303      	str	r3, [sp, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	2312      	movs	r3, #18
 800a060:	920a      	str	r2, [sp, #40]	; 0x28
 800a062:	e789      	b.n	8009f78 <_dtoa_r+0x250>
 800a064:	2301      	movs	r3, #1
 800a066:	9309      	str	r3, [sp, #36]	; 0x24
 800a068:	e7f4      	b.n	800a054 <_dtoa_r+0x32c>
 800a06a:	2301      	movs	r3, #1
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	9303      	str	r3, [sp, #12]
 800a070:	461a      	mov	r2, r3
 800a072:	e7f5      	b.n	800a060 <_dtoa_r+0x338>
 800a074:	686a      	ldr	r2, [r5, #4]
 800a076:	3201      	adds	r2, #1
 800a078:	606a      	str	r2, [r5, #4]
 800a07a:	0049      	lsls	r1, r1, #1
 800a07c:	e780      	b.n	8009f80 <_dtoa_r+0x258>
 800a07e:	2502      	movs	r5, #2
 800a080:	e7af      	b.n	8009fe2 <_dtoa_r+0x2ba>
 800a082:	07f1      	lsls	r1, r6, #31
 800a084:	d508      	bpl.n	800a098 <_dtoa_r+0x370>
 800a086:	4640      	mov	r0, r8
 800a088:	4649      	mov	r1, r9
 800a08a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a08e:	f7f8 fd9f 	bl	8002bd0 <__aeabi_dmul>
 800a092:	3501      	adds	r5, #1
 800a094:	4680      	mov	r8, r0
 800a096:	4689      	mov	r9, r1
 800a098:	1076      	asrs	r6, r6, #1
 800a09a:	3708      	adds	r7, #8
 800a09c:	e7a2      	b.n	8009fe4 <_dtoa_r+0x2bc>
 800a09e:	f000 809d 	beq.w	800a1dc <_dtoa_r+0x4b4>
 800a0a2:	f1cb 0600 	rsb	r6, fp, #0
 800a0a6:	4b9f      	ldr	r3, [pc, #636]	; (800a324 <_dtoa_r+0x5fc>)
 800a0a8:	4f9f      	ldr	r7, [pc, #636]	; (800a328 <_dtoa_r+0x600>)
 800a0aa:	f006 020f 	and.w	r2, r6, #15
 800a0ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0ba:	f7f8 fd89 	bl	8002bd0 <__aeabi_dmul>
 800a0be:	e9cd 0100 	strd	r0, r1, [sp]
 800a0c2:	1136      	asrs	r6, r6, #4
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	2502      	movs	r5, #2
 800a0c8:	2e00      	cmp	r6, #0
 800a0ca:	d17c      	bne.n	800a1c6 <_dtoa_r+0x49e>
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d191      	bne.n	8009ff4 <_dtoa_r+0x2cc>
 800a0d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f000 8084 	beq.w	800a1e0 <_dtoa_r+0x4b8>
 800a0d8:	e9dd 8900 	ldrd	r8, r9, [sp]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4b93      	ldr	r3, [pc, #588]	; (800a32c <_dtoa_r+0x604>)
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	4649      	mov	r1, r9
 800a0e4:	f7f8 ffe6 	bl	80030b4 <__aeabi_dcmplt>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d079      	beq.n	800a1e0 <_dtoa_r+0x4b8>
 800a0ec:	9b03      	ldr	r3, [sp, #12]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d076      	beq.n	800a1e0 <_dtoa_r+0x4b8>
 800a0f2:	9b04      	ldr	r3, [sp, #16]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	dd34      	ble.n	800a162 <_dtoa_r+0x43a>
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	4b8d      	ldr	r3, [pc, #564]	; (800a330 <_dtoa_r+0x608>)
 800a0fc:	4640      	mov	r0, r8
 800a0fe:	4649      	mov	r1, r9
 800a100:	f7f8 fd66 	bl	8002bd0 <__aeabi_dmul>
 800a104:	e9cd 0100 	strd	r0, r1, [sp]
 800a108:	9e04      	ldr	r6, [sp, #16]
 800a10a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a10e:	3501      	adds	r5, #1
 800a110:	4628      	mov	r0, r5
 800a112:	f7f8 fcf7 	bl	8002b04 <__aeabi_i2d>
 800a116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a11a:	f7f8 fd59 	bl	8002bd0 <__aeabi_dmul>
 800a11e:	2200      	movs	r2, #0
 800a120:	4b84      	ldr	r3, [pc, #528]	; (800a334 <_dtoa_r+0x60c>)
 800a122:	f7f8 fba3 	bl	800286c <__adddf3>
 800a126:	4680      	mov	r8, r0
 800a128:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800a12c:	2e00      	cmp	r6, #0
 800a12e:	d15a      	bne.n	800a1e6 <_dtoa_r+0x4be>
 800a130:	2200      	movs	r2, #0
 800a132:	4b81      	ldr	r3, [pc, #516]	; (800a338 <_dtoa_r+0x610>)
 800a134:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a138:	f7f8 fb96 	bl	8002868 <__aeabi_dsub>
 800a13c:	4642      	mov	r2, r8
 800a13e:	464b      	mov	r3, r9
 800a140:	e9cd 0100 	strd	r0, r1, [sp]
 800a144:	f7f8 ffd4 	bl	80030f0 <__aeabi_dcmpgt>
 800a148:	2800      	cmp	r0, #0
 800a14a:	f040 829b 	bne.w	800a684 <_dtoa_r+0x95c>
 800a14e:	4642      	mov	r2, r8
 800a150:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a154:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a158:	f7f8 ffac 	bl	80030b4 <__aeabi_dcmplt>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	f040 828f 	bne.w	800a680 <_dtoa_r+0x958>
 800a162:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a166:	e9cd 2300 	strd	r2, r3, [sp]
 800a16a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f2c0 8150 	blt.w	800a412 <_dtoa_r+0x6ea>
 800a172:	f1bb 0f0e 	cmp.w	fp, #14
 800a176:	f300 814c 	bgt.w	800a412 <_dtoa_r+0x6ea>
 800a17a:	4b6a      	ldr	r3, [pc, #424]	; (800a324 <_dtoa_r+0x5fc>)
 800a17c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a180:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a186:	2b00      	cmp	r3, #0
 800a188:	f280 80da 	bge.w	800a340 <_dtoa_r+0x618>
 800a18c:	9b03      	ldr	r3, [sp, #12]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f300 80d6 	bgt.w	800a340 <_dtoa_r+0x618>
 800a194:	f040 8273 	bne.w	800a67e <_dtoa_r+0x956>
 800a198:	2200      	movs	r2, #0
 800a19a:	4b67      	ldr	r3, [pc, #412]	; (800a338 <_dtoa_r+0x610>)
 800a19c:	4640      	mov	r0, r8
 800a19e:	4649      	mov	r1, r9
 800a1a0:	f7f8 fd16 	bl	8002bd0 <__aeabi_dmul>
 800a1a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1a8:	f7f8 ff98 	bl	80030dc <__aeabi_dcmpge>
 800a1ac:	9e03      	ldr	r6, [sp, #12]
 800a1ae:	4637      	mov	r7, r6
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	f040 824a 	bne.w	800a64a <_dtoa_r+0x922>
 800a1b6:	9b02      	ldr	r3, [sp, #8]
 800a1b8:	9a02      	ldr	r2, [sp, #8]
 800a1ba:	1c5d      	adds	r5, r3, #1
 800a1bc:	2331      	movs	r3, #49	; 0x31
 800a1be:	7013      	strb	r3, [r2, #0]
 800a1c0:	f10b 0b01 	add.w	fp, fp, #1
 800a1c4:	e245      	b.n	800a652 <_dtoa_r+0x92a>
 800a1c6:	07f2      	lsls	r2, r6, #31
 800a1c8:	d505      	bpl.n	800a1d6 <_dtoa_r+0x4ae>
 800a1ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ce:	f7f8 fcff 	bl	8002bd0 <__aeabi_dmul>
 800a1d2:	3501      	adds	r5, #1
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	1076      	asrs	r6, r6, #1
 800a1d8:	3708      	adds	r7, #8
 800a1da:	e775      	b.n	800a0c8 <_dtoa_r+0x3a0>
 800a1dc:	2502      	movs	r5, #2
 800a1de:	e777      	b.n	800a0d0 <_dtoa_r+0x3a8>
 800a1e0:	465f      	mov	r7, fp
 800a1e2:	9e03      	ldr	r6, [sp, #12]
 800a1e4:	e794      	b.n	800a110 <_dtoa_r+0x3e8>
 800a1e6:	9a02      	ldr	r2, [sp, #8]
 800a1e8:	4b4e      	ldr	r3, [pc, #312]	; (800a324 <_dtoa_r+0x5fc>)
 800a1ea:	4432      	add	r2, r6
 800a1ec:	9213      	str	r2, [sp, #76]	; 0x4c
 800a1ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1f0:	1e71      	subs	r1, r6, #1
 800a1f2:	2a00      	cmp	r2, #0
 800a1f4:	d048      	beq.n	800a288 <_dtoa_r+0x560>
 800a1f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	2000      	movs	r0, #0
 800a200:	494e      	ldr	r1, [pc, #312]	; (800a33c <_dtoa_r+0x614>)
 800a202:	f7f8 fe0f 	bl	8002e24 <__aeabi_ddiv>
 800a206:	4642      	mov	r2, r8
 800a208:	464b      	mov	r3, r9
 800a20a:	f7f8 fb2d 	bl	8002868 <__aeabi_dsub>
 800a20e:	9d02      	ldr	r5, [sp, #8]
 800a210:	4680      	mov	r8, r0
 800a212:	4689      	mov	r9, r1
 800a214:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a218:	f7f8 ff8a 	bl	8003130 <__aeabi_d2iz>
 800a21c:	4606      	mov	r6, r0
 800a21e:	f7f8 fc71 	bl	8002b04 <__aeabi_i2d>
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a22a:	f7f8 fb1d 	bl	8002868 <__aeabi_dsub>
 800a22e:	3630      	adds	r6, #48	; 0x30
 800a230:	f805 6b01 	strb.w	r6, [r5], #1
 800a234:	4642      	mov	r2, r8
 800a236:	464b      	mov	r3, r9
 800a238:	e9cd 0100 	strd	r0, r1, [sp]
 800a23c:	f7f8 ff3a 	bl	80030b4 <__aeabi_dcmplt>
 800a240:	2800      	cmp	r0, #0
 800a242:	d165      	bne.n	800a310 <_dtoa_r+0x5e8>
 800a244:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a248:	2000      	movs	r0, #0
 800a24a:	4938      	ldr	r1, [pc, #224]	; (800a32c <_dtoa_r+0x604>)
 800a24c:	f7f8 fb0c 	bl	8002868 <__aeabi_dsub>
 800a250:	4642      	mov	r2, r8
 800a252:	464b      	mov	r3, r9
 800a254:	f7f8 ff2e 	bl	80030b4 <__aeabi_dcmplt>
 800a258:	2800      	cmp	r0, #0
 800a25a:	f040 80ba 	bne.w	800a3d2 <_dtoa_r+0x6aa>
 800a25e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a260:	429d      	cmp	r5, r3
 800a262:	f43f af7e 	beq.w	800a162 <_dtoa_r+0x43a>
 800a266:	2200      	movs	r2, #0
 800a268:	4b31      	ldr	r3, [pc, #196]	; (800a330 <_dtoa_r+0x608>)
 800a26a:	4640      	mov	r0, r8
 800a26c:	4649      	mov	r1, r9
 800a26e:	f7f8 fcaf 	bl	8002bd0 <__aeabi_dmul>
 800a272:	2200      	movs	r2, #0
 800a274:	4680      	mov	r8, r0
 800a276:	4689      	mov	r9, r1
 800a278:	4b2d      	ldr	r3, [pc, #180]	; (800a330 <_dtoa_r+0x608>)
 800a27a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a27e:	f7f8 fca7 	bl	8002bd0 <__aeabi_dmul>
 800a282:	e9cd 0100 	strd	r0, r1, [sp]
 800a286:	e7c5      	b.n	800a214 <_dtoa_r+0x4ec>
 800a288:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a28c:	4642      	mov	r2, r8
 800a28e:	464b      	mov	r3, r9
 800a290:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a294:	f7f8 fc9c 	bl	8002bd0 <__aeabi_dmul>
 800a298:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a29c:	9d02      	ldr	r5, [sp, #8]
 800a29e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2a2:	f7f8 ff45 	bl	8003130 <__aeabi_d2iz>
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	f7f8 fc2c 	bl	8002b04 <__aeabi_i2d>
 800a2ac:	3630      	adds	r6, #48	; 0x30
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2b6:	f7f8 fad7 	bl	8002868 <__aeabi_dsub>
 800a2ba:	f805 6b01 	strb.w	r6, [r5], #1
 800a2be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2c0:	42ab      	cmp	r3, r5
 800a2c2:	4680      	mov	r8, r0
 800a2c4:	4689      	mov	r9, r1
 800a2c6:	f04f 0200 	mov.w	r2, #0
 800a2ca:	d125      	bne.n	800a318 <_dtoa_r+0x5f0>
 800a2cc:	4b1b      	ldr	r3, [pc, #108]	; (800a33c <_dtoa_r+0x614>)
 800a2ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2d2:	f7f8 facb 	bl	800286c <__adddf3>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4640      	mov	r0, r8
 800a2dc:	4649      	mov	r1, r9
 800a2de:	f7f8 ff07 	bl	80030f0 <__aeabi_dcmpgt>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d175      	bne.n	800a3d2 <_dtoa_r+0x6aa>
 800a2e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	4913      	ldr	r1, [pc, #76]	; (800a33c <_dtoa_r+0x614>)
 800a2ee:	f7f8 fabb 	bl	8002868 <__aeabi_dsub>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4640      	mov	r0, r8
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	f7f8 fedb 	bl	80030b4 <__aeabi_dcmplt>
 800a2fe:	2800      	cmp	r0, #0
 800a300:	f43f af2f 	beq.w	800a162 <_dtoa_r+0x43a>
 800a304:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a308:	2b30      	cmp	r3, #48	; 0x30
 800a30a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a30e:	d001      	beq.n	800a314 <_dtoa_r+0x5ec>
 800a310:	46bb      	mov	fp, r7
 800a312:	e04d      	b.n	800a3b0 <_dtoa_r+0x688>
 800a314:	4615      	mov	r5, r2
 800a316:	e7f5      	b.n	800a304 <_dtoa_r+0x5dc>
 800a318:	4b05      	ldr	r3, [pc, #20]	; (800a330 <_dtoa_r+0x608>)
 800a31a:	f7f8 fc59 	bl	8002bd0 <__aeabi_dmul>
 800a31e:	e9cd 0100 	strd	r0, r1, [sp]
 800a322:	e7bc      	b.n	800a29e <_dtoa_r+0x576>
 800a324:	08024288 	.word	0x08024288
 800a328:	08024260 	.word	0x08024260
 800a32c:	3ff00000 	.word	0x3ff00000
 800a330:	40240000 	.word	0x40240000
 800a334:	401c0000 	.word	0x401c0000
 800a338:	40140000 	.word	0x40140000
 800a33c:	3fe00000 	.word	0x3fe00000
 800a340:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a344:	9d02      	ldr	r5, [sp, #8]
 800a346:	4642      	mov	r2, r8
 800a348:	464b      	mov	r3, r9
 800a34a:	4630      	mov	r0, r6
 800a34c:	4639      	mov	r1, r7
 800a34e:	f7f8 fd69 	bl	8002e24 <__aeabi_ddiv>
 800a352:	f7f8 feed 	bl	8003130 <__aeabi_d2iz>
 800a356:	9000      	str	r0, [sp, #0]
 800a358:	f7f8 fbd4 	bl	8002b04 <__aeabi_i2d>
 800a35c:	4642      	mov	r2, r8
 800a35e:	464b      	mov	r3, r9
 800a360:	f7f8 fc36 	bl	8002bd0 <__aeabi_dmul>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4630      	mov	r0, r6
 800a36a:	4639      	mov	r1, r7
 800a36c:	f7f8 fa7c 	bl	8002868 <__aeabi_dsub>
 800a370:	9e00      	ldr	r6, [sp, #0]
 800a372:	9f03      	ldr	r7, [sp, #12]
 800a374:	3630      	adds	r6, #48	; 0x30
 800a376:	f805 6b01 	strb.w	r6, [r5], #1
 800a37a:	9e02      	ldr	r6, [sp, #8]
 800a37c:	1bae      	subs	r6, r5, r6
 800a37e:	42b7      	cmp	r7, r6
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	d138      	bne.n	800a3f8 <_dtoa_r+0x6d0>
 800a386:	f7f8 fa71 	bl	800286c <__adddf3>
 800a38a:	4606      	mov	r6, r0
 800a38c:	460f      	mov	r7, r1
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	4640      	mov	r0, r8
 800a394:	4649      	mov	r1, r9
 800a396:	f7f8 fe8d 	bl	80030b4 <__aeabi_dcmplt>
 800a39a:	b9c8      	cbnz	r0, 800a3d0 <_dtoa_r+0x6a8>
 800a39c:	4632      	mov	r2, r6
 800a39e:	463b      	mov	r3, r7
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	4649      	mov	r1, r9
 800a3a4:	f7f8 fe7c 	bl	80030a0 <__aeabi_dcmpeq>
 800a3a8:	b110      	cbz	r0, 800a3b0 <_dtoa_r+0x688>
 800a3aa:	9b00      	ldr	r3, [sp, #0]
 800a3ac:	07db      	lsls	r3, r3, #31
 800a3ae:	d40f      	bmi.n	800a3d0 <_dtoa_r+0x6a8>
 800a3b0:	4651      	mov	r1, sl
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 fcb2 	bl	800ad1c <_Bfree>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3bc:	702b      	strb	r3, [r5, #0]
 800a3be:	f10b 0301 	add.w	r3, fp, #1
 800a3c2:	6013      	str	r3, [r2, #0]
 800a3c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f43f acf8 	beq.w	8009dbc <_dtoa_r+0x94>
 800a3cc:	601d      	str	r5, [r3, #0]
 800a3ce:	e4f5      	b.n	8009dbc <_dtoa_r+0x94>
 800a3d0:	465f      	mov	r7, fp
 800a3d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a3d6:	2a39      	cmp	r2, #57	; 0x39
 800a3d8:	f105 33ff 	add.w	r3, r5, #4294967295
 800a3dc:	d106      	bne.n	800a3ec <_dtoa_r+0x6c4>
 800a3de:	9a02      	ldr	r2, [sp, #8]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d107      	bne.n	800a3f4 <_dtoa_r+0x6cc>
 800a3e4:	2330      	movs	r3, #48	; 0x30
 800a3e6:	7013      	strb	r3, [r2, #0]
 800a3e8:	3701      	adds	r7, #1
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	781a      	ldrb	r2, [r3, #0]
 800a3ee:	3201      	adds	r2, #1
 800a3f0:	701a      	strb	r2, [r3, #0]
 800a3f2:	e78d      	b.n	800a310 <_dtoa_r+0x5e8>
 800a3f4:	461d      	mov	r5, r3
 800a3f6:	e7ec      	b.n	800a3d2 <_dtoa_r+0x6aa>
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4ba4      	ldr	r3, [pc, #656]	; (800a68c <_dtoa_r+0x964>)
 800a3fc:	f7f8 fbe8 	bl	8002bd0 <__aeabi_dmul>
 800a400:	2200      	movs	r2, #0
 800a402:	2300      	movs	r3, #0
 800a404:	4606      	mov	r6, r0
 800a406:	460f      	mov	r7, r1
 800a408:	f7f8 fe4a 	bl	80030a0 <__aeabi_dcmpeq>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d09a      	beq.n	800a346 <_dtoa_r+0x61e>
 800a410:	e7ce      	b.n	800a3b0 <_dtoa_r+0x688>
 800a412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a414:	2a00      	cmp	r2, #0
 800a416:	f000 80cd 	beq.w	800a5b4 <_dtoa_r+0x88c>
 800a41a:	9a07      	ldr	r2, [sp, #28]
 800a41c:	2a01      	cmp	r2, #1
 800a41e:	f300 80af 	bgt.w	800a580 <_dtoa_r+0x858>
 800a422:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a424:	2a00      	cmp	r2, #0
 800a426:	f000 80a7 	beq.w	800a578 <_dtoa_r+0x850>
 800a42a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a42e:	9e08      	ldr	r6, [sp, #32]
 800a430:	9d05      	ldr	r5, [sp, #20]
 800a432:	9a05      	ldr	r2, [sp, #20]
 800a434:	441a      	add	r2, r3
 800a436:	9205      	str	r2, [sp, #20]
 800a438:	9a06      	ldr	r2, [sp, #24]
 800a43a:	2101      	movs	r1, #1
 800a43c:	441a      	add	r2, r3
 800a43e:	4620      	mov	r0, r4
 800a440:	9206      	str	r2, [sp, #24]
 800a442:	f000 fd0b 	bl	800ae5c <__i2b>
 800a446:	4607      	mov	r7, r0
 800a448:	2d00      	cmp	r5, #0
 800a44a:	dd0c      	ble.n	800a466 <_dtoa_r+0x73e>
 800a44c:	9b06      	ldr	r3, [sp, #24]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	dd09      	ble.n	800a466 <_dtoa_r+0x73e>
 800a452:	42ab      	cmp	r3, r5
 800a454:	9a05      	ldr	r2, [sp, #20]
 800a456:	bfa8      	it	ge
 800a458:	462b      	movge	r3, r5
 800a45a:	1ad2      	subs	r2, r2, r3
 800a45c:	9205      	str	r2, [sp, #20]
 800a45e:	9a06      	ldr	r2, [sp, #24]
 800a460:	1aed      	subs	r5, r5, r3
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	9306      	str	r3, [sp, #24]
 800a466:	9b08      	ldr	r3, [sp, #32]
 800a468:	b1f3      	cbz	r3, 800a4a8 <_dtoa_r+0x780>
 800a46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 80a5 	beq.w	800a5bc <_dtoa_r+0x894>
 800a472:	2e00      	cmp	r6, #0
 800a474:	dd10      	ble.n	800a498 <_dtoa_r+0x770>
 800a476:	4639      	mov	r1, r7
 800a478:	4632      	mov	r2, r6
 800a47a:	4620      	mov	r0, r4
 800a47c:	f000 fd84 	bl	800af88 <__pow5mult>
 800a480:	4652      	mov	r2, sl
 800a482:	4601      	mov	r1, r0
 800a484:	4607      	mov	r7, r0
 800a486:	4620      	mov	r0, r4
 800a488:	f000 fcf1 	bl	800ae6e <__multiply>
 800a48c:	4651      	mov	r1, sl
 800a48e:	4680      	mov	r8, r0
 800a490:	4620      	mov	r0, r4
 800a492:	f000 fc43 	bl	800ad1c <_Bfree>
 800a496:	46c2      	mov	sl, r8
 800a498:	9b08      	ldr	r3, [sp, #32]
 800a49a:	1b9a      	subs	r2, r3, r6
 800a49c:	d004      	beq.n	800a4a8 <_dtoa_r+0x780>
 800a49e:	4651      	mov	r1, sl
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 fd71 	bl	800af88 <__pow5mult>
 800a4a6:	4682      	mov	sl, r0
 800a4a8:	2101      	movs	r1, #1
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 fcd6 	bl	800ae5c <__i2b>
 800a4b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	4606      	mov	r6, r0
 800a4b6:	f340 8083 	ble.w	800a5c0 <_dtoa_r+0x898>
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	4601      	mov	r1, r0
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f000 fd62 	bl	800af88 <__pow5mult>
 800a4c4:	9b07      	ldr	r3, [sp, #28]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	dd7c      	ble.n	800a5c6 <_dtoa_r+0x89e>
 800a4cc:	f04f 0800 	mov.w	r8, #0
 800a4d0:	6933      	ldr	r3, [r6, #16]
 800a4d2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a4d6:	6918      	ldr	r0, [r3, #16]
 800a4d8:	f000 fc72 	bl	800adc0 <__hi0bits>
 800a4dc:	f1c0 0020 	rsb	r0, r0, #32
 800a4e0:	9b06      	ldr	r3, [sp, #24]
 800a4e2:	4418      	add	r0, r3
 800a4e4:	f010 001f 	ands.w	r0, r0, #31
 800a4e8:	f000 8096 	beq.w	800a618 <_dtoa_r+0x8f0>
 800a4ec:	f1c0 0320 	rsb	r3, r0, #32
 800a4f0:	2b04      	cmp	r3, #4
 800a4f2:	f340 8087 	ble.w	800a604 <_dtoa_r+0x8dc>
 800a4f6:	9b05      	ldr	r3, [sp, #20]
 800a4f8:	f1c0 001c 	rsb	r0, r0, #28
 800a4fc:	4403      	add	r3, r0
 800a4fe:	9305      	str	r3, [sp, #20]
 800a500:	9b06      	ldr	r3, [sp, #24]
 800a502:	4405      	add	r5, r0
 800a504:	4403      	add	r3, r0
 800a506:	9306      	str	r3, [sp, #24]
 800a508:	9b05      	ldr	r3, [sp, #20]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	dd05      	ble.n	800a51a <_dtoa_r+0x7f2>
 800a50e:	4651      	mov	r1, sl
 800a510:	461a      	mov	r2, r3
 800a512:	4620      	mov	r0, r4
 800a514:	f000 fd86 	bl	800b024 <__lshift>
 800a518:	4682      	mov	sl, r0
 800a51a:	9b06      	ldr	r3, [sp, #24]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	dd05      	ble.n	800a52c <_dtoa_r+0x804>
 800a520:	4631      	mov	r1, r6
 800a522:	461a      	mov	r2, r3
 800a524:	4620      	mov	r0, r4
 800a526:	f000 fd7d 	bl	800b024 <__lshift>
 800a52a:	4606      	mov	r6, r0
 800a52c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d074      	beq.n	800a61c <_dtoa_r+0x8f4>
 800a532:	4631      	mov	r1, r6
 800a534:	4650      	mov	r0, sl
 800a536:	f000 fdc6 	bl	800b0c6 <__mcmp>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	da6e      	bge.n	800a61c <_dtoa_r+0x8f4>
 800a53e:	2300      	movs	r3, #0
 800a540:	4651      	mov	r1, sl
 800a542:	220a      	movs	r2, #10
 800a544:	4620      	mov	r0, r4
 800a546:	f000 fc00 	bl	800ad4a <__multadd>
 800a54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a54c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a550:	4682      	mov	sl, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	f000 81a8 	beq.w	800a8a8 <_dtoa_r+0xb80>
 800a558:	2300      	movs	r3, #0
 800a55a:	4639      	mov	r1, r7
 800a55c:	220a      	movs	r2, #10
 800a55e:	4620      	mov	r0, r4
 800a560:	f000 fbf3 	bl	800ad4a <__multadd>
 800a564:	9b04      	ldr	r3, [sp, #16]
 800a566:	2b00      	cmp	r3, #0
 800a568:	4607      	mov	r7, r0
 800a56a:	f300 80c8 	bgt.w	800a6fe <_dtoa_r+0x9d6>
 800a56e:	9b07      	ldr	r3, [sp, #28]
 800a570:	2b02      	cmp	r3, #2
 800a572:	f340 80c4 	ble.w	800a6fe <_dtoa_r+0x9d6>
 800a576:	e059      	b.n	800a62c <_dtoa_r+0x904>
 800a578:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a57a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a57e:	e756      	b.n	800a42e <_dtoa_r+0x706>
 800a580:	9b03      	ldr	r3, [sp, #12]
 800a582:	1e5e      	subs	r6, r3, #1
 800a584:	9b08      	ldr	r3, [sp, #32]
 800a586:	42b3      	cmp	r3, r6
 800a588:	bfbf      	itttt	lt
 800a58a:	9b08      	ldrlt	r3, [sp, #32]
 800a58c:	9608      	strlt	r6, [sp, #32]
 800a58e:	1af2      	sublt	r2, r6, r3
 800a590:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800a592:	bfb6      	itet	lt
 800a594:	189b      	addlt	r3, r3, r2
 800a596:	1b9e      	subge	r6, r3, r6
 800a598:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800a59a:	9b03      	ldr	r3, [sp, #12]
 800a59c:	bfb8      	it	lt
 800a59e:	2600      	movlt	r6, #0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	bfb9      	ittee	lt
 800a5a4:	9b05      	ldrlt	r3, [sp, #20]
 800a5a6:	9a03      	ldrlt	r2, [sp, #12]
 800a5a8:	9d05      	ldrge	r5, [sp, #20]
 800a5aa:	9b03      	ldrge	r3, [sp, #12]
 800a5ac:	bfbc      	itt	lt
 800a5ae:	1a9d      	sublt	r5, r3, r2
 800a5b0:	2300      	movlt	r3, #0
 800a5b2:	e73e      	b.n	800a432 <_dtoa_r+0x70a>
 800a5b4:	9e08      	ldr	r6, [sp, #32]
 800a5b6:	9d05      	ldr	r5, [sp, #20]
 800a5b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a5ba:	e745      	b.n	800a448 <_dtoa_r+0x720>
 800a5bc:	9a08      	ldr	r2, [sp, #32]
 800a5be:	e76e      	b.n	800a49e <_dtoa_r+0x776>
 800a5c0:	9b07      	ldr	r3, [sp, #28]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	dc19      	bgt.n	800a5fa <_dtoa_r+0x8d2>
 800a5c6:	9b00      	ldr	r3, [sp, #0]
 800a5c8:	b9bb      	cbnz	r3, 800a5fa <_dtoa_r+0x8d2>
 800a5ca:	9b01      	ldr	r3, [sp, #4]
 800a5cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5d0:	b99b      	cbnz	r3, 800a5fa <_dtoa_r+0x8d2>
 800a5d2:	9b01      	ldr	r3, [sp, #4]
 800a5d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5d8:	0d1b      	lsrs	r3, r3, #20
 800a5da:	051b      	lsls	r3, r3, #20
 800a5dc:	b183      	cbz	r3, 800a600 <_dtoa_r+0x8d8>
 800a5de:	9b05      	ldr	r3, [sp, #20]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	9305      	str	r3, [sp, #20]
 800a5e4:	9b06      	ldr	r3, [sp, #24]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	9306      	str	r3, [sp, #24]
 800a5ea:	f04f 0801 	mov.w	r8, #1
 800a5ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f47f af6d 	bne.w	800a4d0 <_dtoa_r+0x7a8>
 800a5f6:	2001      	movs	r0, #1
 800a5f8:	e772      	b.n	800a4e0 <_dtoa_r+0x7b8>
 800a5fa:	f04f 0800 	mov.w	r8, #0
 800a5fe:	e7f6      	b.n	800a5ee <_dtoa_r+0x8c6>
 800a600:	4698      	mov	r8, r3
 800a602:	e7f4      	b.n	800a5ee <_dtoa_r+0x8c6>
 800a604:	d080      	beq.n	800a508 <_dtoa_r+0x7e0>
 800a606:	9a05      	ldr	r2, [sp, #20]
 800a608:	331c      	adds	r3, #28
 800a60a:	441a      	add	r2, r3
 800a60c:	9205      	str	r2, [sp, #20]
 800a60e:	9a06      	ldr	r2, [sp, #24]
 800a610:	441a      	add	r2, r3
 800a612:	441d      	add	r5, r3
 800a614:	4613      	mov	r3, r2
 800a616:	e776      	b.n	800a506 <_dtoa_r+0x7de>
 800a618:	4603      	mov	r3, r0
 800a61a:	e7f4      	b.n	800a606 <_dtoa_r+0x8de>
 800a61c:	9b03      	ldr	r3, [sp, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	dc36      	bgt.n	800a690 <_dtoa_r+0x968>
 800a622:	9b07      	ldr	r3, [sp, #28]
 800a624:	2b02      	cmp	r3, #2
 800a626:	dd33      	ble.n	800a690 <_dtoa_r+0x968>
 800a628:	9b03      	ldr	r3, [sp, #12]
 800a62a:	9304      	str	r3, [sp, #16]
 800a62c:	9b04      	ldr	r3, [sp, #16]
 800a62e:	b963      	cbnz	r3, 800a64a <_dtoa_r+0x922>
 800a630:	4631      	mov	r1, r6
 800a632:	2205      	movs	r2, #5
 800a634:	4620      	mov	r0, r4
 800a636:	f000 fb88 	bl	800ad4a <__multadd>
 800a63a:	4601      	mov	r1, r0
 800a63c:	4606      	mov	r6, r0
 800a63e:	4650      	mov	r0, sl
 800a640:	f000 fd41 	bl	800b0c6 <__mcmp>
 800a644:	2800      	cmp	r0, #0
 800a646:	f73f adb6 	bgt.w	800a1b6 <_dtoa_r+0x48e>
 800a64a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a64c:	9d02      	ldr	r5, [sp, #8]
 800a64e:	ea6f 0b03 	mvn.w	fp, r3
 800a652:	2300      	movs	r3, #0
 800a654:	9303      	str	r3, [sp, #12]
 800a656:	4631      	mov	r1, r6
 800a658:	4620      	mov	r0, r4
 800a65a:	f000 fb5f 	bl	800ad1c <_Bfree>
 800a65e:	2f00      	cmp	r7, #0
 800a660:	f43f aea6 	beq.w	800a3b0 <_dtoa_r+0x688>
 800a664:	9b03      	ldr	r3, [sp, #12]
 800a666:	b12b      	cbz	r3, 800a674 <_dtoa_r+0x94c>
 800a668:	42bb      	cmp	r3, r7
 800a66a:	d003      	beq.n	800a674 <_dtoa_r+0x94c>
 800a66c:	4619      	mov	r1, r3
 800a66e:	4620      	mov	r0, r4
 800a670:	f000 fb54 	bl	800ad1c <_Bfree>
 800a674:	4639      	mov	r1, r7
 800a676:	4620      	mov	r0, r4
 800a678:	f000 fb50 	bl	800ad1c <_Bfree>
 800a67c:	e698      	b.n	800a3b0 <_dtoa_r+0x688>
 800a67e:	2600      	movs	r6, #0
 800a680:	4637      	mov	r7, r6
 800a682:	e7e2      	b.n	800a64a <_dtoa_r+0x922>
 800a684:	46bb      	mov	fp, r7
 800a686:	4637      	mov	r7, r6
 800a688:	e595      	b.n	800a1b6 <_dtoa_r+0x48e>
 800a68a:	bf00      	nop
 800a68c:	40240000 	.word	0x40240000
 800a690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a692:	bb93      	cbnz	r3, 800a6fa <_dtoa_r+0x9d2>
 800a694:	9b03      	ldr	r3, [sp, #12]
 800a696:	9304      	str	r3, [sp, #16]
 800a698:	9d02      	ldr	r5, [sp, #8]
 800a69a:	4631      	mov	r1, r6
 800a69c:	4650      	mov	r0, sl
 800a69e:	f7ff fab5 	bl	8009c0c <quorem>
 800a6a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a6a6:	f805 9b01 	strb.w	r9, [r5], #1
 800a6aa:	9b02      	ldr	r3, [sp, #8]
 800a6ac:	9a04      	ldr	r2, [sp, #16]
 800a6ae:	1aeb      	subs	r3, r5, r3
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	f300 80dc 	bgt.w	800a86e <_dtoa_r+0xb46>
 800a6b6:	9b02      	ldr	r3, [sp, #8]
 800a6b8:	2a01      	cmp	r2, #1
 800a6ba:	bfac      	ite	ge
 800a6bc:	189b      	addge	r3, r3, r2
 800a6be:	3301      	addlt	r3, #1
 800a6c0:	4698      	mov	r8, r3
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	9303      	str	r3, [sp, #12]
 800a6c6:	4651      	mov	r1, sl
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f000 fcaa 	bl	800b024 <__lshift>
 800a6d0:	4631      	mov	r1, r6
 800a6d2:	4682      	mov	sl, r0
 800a6d4:	f000 fcf7 	bl	800b0c6 <__mcmp>
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	f300 808d 	bgt.w	800a7f8 <_dtoa_r+0xad0>
 800a6de:	d103      	bne.n	800a6e8 <_dtoa_r+0x9c0>
 800a6e0:	f019 0f01 	tst.w	r9, #1
 800a6e4:	f040 8088 	bne.w	800a7f8 <_dtoa_r+0xad0>
 800a6e8:	4645      	mov	r5, r8
 800a6ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6ee:	2b30      	cmp	r3, #48	; 0x30
 800a6f0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a6f4:	d1af      	bne.n	800a656 <_dtoa_r+0x92e>
 800a6f6:	4615      	mov	r5, r2
 800a6f8:	e7f7      	b.n	800a6ea <_dtoa_r+0x9c2>
 800a6fa:	9b03      	ldr	r3, [sp, #12]
 800a6fc:	9304      	str	r3, [sp, #16]
 800a6fe:	2d00      	cmp	r5, #0
 800a700:	dd05      	ble.n	800a70e <_dtoa_r+0x9e6>
 800a702:	4639      	mov	r1, r7
 800a704:	462a      	mov	r2, r5
 800a706:	4620      	mov	r0, r4
 800a708:	f000 fc8c 	bl	800b024 <__lshift>
 800a70c:	4607      	mov	r7, r0
 800a70e:	f1b8 0f00 	cmp.w	r8, #0
 800a712:	d04c      	beq.n	800a7ae <_dtoa_r+0xa86>
 800a714:	6879      	ldr	r1, [r7, #4]
 800a716:	4620      	mov	r0, r4
 800a718:	f000 facc 	bl	800acb4 <_Balloc>
 800a71c:	693a      	ldr	r2, [r7, #16]
 800a71e:	3202      	adds	r2, #2
 800a720:	4605      	mov	r5, r0
 800a722:	0092      	lsls	r2, r2, #2
 800a724:	f107 010c 	add.w	r1, r7, #12
 800a728:	300c      	adds	r0, #12
 800a72a:	f7fe fbe8 	bl	8008efe <memcpy>
 800a72e:	2201      	movs	r2, #1
 800a730:	4629      	mov	r1, r5
 800a732:	4620      	mov	r0, r4
 800a734:	f000 fc76 	bl	800b024 <__lshift>
 800a738:	9b00      	ldr	r3, [sp, #0]
 800a73a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a73e:	9703      	str	r7, [sp, #12]
 800a740:	f003 0301 	and.w	r3, r3, #1
 800a744:	4607      	mov	r7, r0
 800a746:	9305      	str	r3, [sp, #20]
 800a748:	4631      	mov	r1, r6
 800a74a:	4650      	mov	r0, sl
 800a74c:	f7ff fa5e 	bl	8009c0c <quorem>
 800a750:	9903      	ldr	r1, [sp, #12]
 800a752:	4605      	mov	r5, r0
 800a754:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a758:	4650      	mov	r0, sl
 800a75a:	f000 fcb4 	bl	800b0c6 <__mcmp>
 800a75e:	463a      	mov	r2, r7
 800a760:	9000      	str	r0, [sp, #0]
 800a762:	4631      	mov	r1, r6
 800a764:	4620      	mov	r0, r4
 800a766:	f000 fcc8 	bl	800b0fa <__mdiff>
 800a76a:	68c3      	ldr	r3, [r0, #12]
 800a76c:	4602      	mov	r2, r0
 800a76e:	bb03      	cbnz	r3, 800a7b2 <_dtoa_r+0xa8a>
 800a770:	4601      	mov	r1, r0
 800a772:	9006      	str	r0, [sp, #24]
 800a774:	4650      	mov	r0, sl
 800a776:	f000 fca6 	bl	800b0c6 <__mcmp>
 800a77a:	9a06      	ldr	r2, [sp, #24]
 800a77c:	4603      	mov	r3, r0
 800a77e:	4611      	mov	r1, r2
 800a780:	4620      	mov	r0, r4
 800a782:	9306      	str	r3, [sp, #24]
 800a784:	f000 faca 	bl	800ad1c <_Bfree>
 800a788:	9b06      	ldr	r3, [sp, #24]
 800a78a:	b9a3      	cbnz	r3, 800a7b6 <_dtoa_r+0xa8e>
 800a78c:	9a07      	ldr	r2, [sp, #28]
 800a78e:	b992      	cbnz	r2, 800a7b6 <_dtoa_r+0xa8e>
 800a790:	9a05      	ldr	r2, [sp, #20]
 800a792:	b982      	cbnz	r2, 800a7b6 <_dtoa_r+0xa8e>
 800a794:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a798:	d029      	beq.n	800a7ee <_dtoa_r+0xac6>
 800a79a:	9b00      	ldr	r3, [sp, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	dd01      	ble.n	800a7a4 <_dtoa_r+0xa7c>
 800a7a0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800a7a4:	f108 0501 	add.w	r5, r8, #1
 800a7a8:	f888 9000 	strb.w	r9, [r8]
 800a7ac:	e753      	b.n	800a656 <_dtoa_r+0x92e>
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	e7c2      	b.n	800a738 <_dtoa_r+0xa10>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e7e3      	b.n	800a77e <_dtoa_r+0xa56>
 800a7b6:	9a00      	ldr	r2, [sp, #0]
 800a7b8:	2a00      	cmp	r2, #0
 800a7ba:	db04      	blt.n	800a7c6 <_dtoa_r+0xa9e>
 800a7bc:	d125      	bne.n	800a80a <_dtoa_r+0xae2>
 800a7be:	9a07      	ldr	r2, [sp, #28]
 800a7c0:	bb1a      	cbnz	r2, 800a80a <_dtoa_r+0xae2>
 800a7c2:	9a05      	ldr	r2, [sp, #20]
 800a7c4:	bb0a      	cbnz	r2, 800a80a <_dtoa_r+0xae2>
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	ddec      	ble.n	800a7a4 <_dtoa_r+0xa7c>
 800a7ca:	4651      	mov	r1, sl
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 fc28 	bl	800b024 <__lshift>
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	4682      	mov	sl, r0
 800a7d8:	f000 fc75 	bl	800b0c6 <__mcmp>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	dc03      	bgt.n	800a7e8 <_dtoa_r+0xac0>
 800a7e0:	d1e0      	bne.n	800a7a4 <_dtoa_r+0xa7c>
 800a7e2:	f019 0f01 	tst.w	r9, #1
 800a7e6:	d0dd      	beq.n	800a7a4 <_dtoa_r+0xa7c>
 800a7e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a7ec:	d1d8      	bne.n	800a7a0 <_dtoa_r+0xa78>
 800a7ee:	2339      	movs	r3, #57	; 0x39
 800a7f0:	f888 3000 	strb.w	r3, [r8]
 800a7f4:	f108 0801 	add.w	r8, r8, #1
 800a7f8:	4645      	mov	r5, r8
 800a7fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a7fe:	2b39      	cmp	r3, #57	; 0x39
 800a800:	f105 32ff 	add.w	r2, r5, #4294967295
 800a804:	d03b      	beq.n	800a87e <_dtoa_r+0xb56>
 800a806:	3301      	adds	r3, #1
 800a808:	e040      	b.n	800a88c <_dtoa_r+0xb64>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f108 0501 	add.w	r5, r8, #1
 800a810:	dd05      	ble.n	800a81e <_dtoa_r+0xaf6>
 800a812:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a816:	d0ea      	beq.n	800a7ee <_dtoa_r+0xac6>
 800a818:	f109 0901 	add.w	r9, r9, #1
 800a81c:	e7c4      	b.n	800a7a8 <_dtoa_r+0xa80>
 800a81e:	9b02      	ldr	r3, [sp, #8]
 800a820:	9a04      	ldr	r2, [sp, #16]
 800a822:	f805 9c01 	strb.w	r9, [r5, #-1]
 800a826:	1aeb      	subs	r3, r5, r3
 800a828:	4293      	cmp	r3, r2
 800a82a:	46a8      	mov	r8, r5
 800a82c:	f43f af4b 	beq.w	800a6c6 <_dtoa_r+0x99e>
 800a830:	4651      	mov	r1, sl
 800a832:	2300      	movs	r3, #0
 800a834:	220a      	movs	r2, #10
 800a836:	4620      	mov	r0, r4
 800a838:	f000 fa87 	bl	800ad4a <__multadd>
 800a83c:	9b03      	ldr	r3, [sp, #12]
 800a83e:	9903      	ldr	r1, [sp, #12]
 800a840:	42bb      	cmp	r3, r7
 800a842:	4682      	mov	sl, r0
 800a844:	f04f 0300 	mov.w	r3, #0
 800a848:	f04f 020a 	mov.w	r2, #10
 800a84c:	4620      	mov	r0, r4
 800a84e:	d104      	bne.n	800a85a <_dtoa_r+0xb32>
 800a850:	f000 fa7b 	bl	800ad4a <__multadd>
 800a854:	9003      	str	r0, [sp, #12]
 800a856:	4607      	mov	r7, r0
 800a858:	e776      	b.n	800a748 <_dtoa_r+0xa20>
 800a85a:	f000 fa76 	bl	800ad4a <__multadd>
 800a85e:	2300      	movs	r3, #0
 800a860:	9003      	str	r0, [sp, #12]
 800a862:	220a      	movs	r2, #10
 800a864:	4639      	mov	r1, r7
 800a866:	4620      	mov	r0, r4
 800a868:	f000 fa6f 	bl	800ad4a <__multadd>
 800a86c:	e7f3      	b.n	800a856 <_dtoa_r+0xb2e>
 800a86e:	4651      	mov	r1, sl
 800a870:	2300      	movs	r3, #0
 800a872:	220a      	movs	r2, #10
 800a874:	4620      	mov	r0, r4
 800a876:	f000 fa68 	bl	800ad4a <__multadd>
 800a87a:	4682      	mov	sl, r0
 800a87c:	e70d      	b.n	800a69a <_dtoa_r+0x972>
 800a87e:	9b02      	ldr	r3, [sp, #8]
 800a880:	4293      	cmp	r3, r2
 800a882:	d105      	bne.n	800a890 <_dtoa_r+0xb68>
 800a884:	9a02      	ldr	r2, [sp, #8]
 800a886:	f10b 0b01 	add.w	fp, fp, #1
 800a88a:	2331      	movs	r3, #49	; 0x31
 800a88c:	7013      	strb	r3, [r2, #0]
 800a88e:	e6e2      	b.n	800a656 <_dtoa_r+0x92e>
 800a890:	4615      	mov	r5, r2
 800a892:	e7b2      	b.n	800a7fa <_dtoa_r+0xad2>
 800a894:	4b09      	ldr	r3, [pc, #36]	; (800a8bc <_dtoa_r+0xb94>)
 800a896:	f7ff baae 	b.w	8009df6 <_dtoa_r+0xce>
 800a89a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f47f aa88 	bne.w	8009db2 <_dtoa_r+0x8a>
 800a8a2:	4b07      	ldr	r3, [pc, #28]	; (800a8c0 <_dtoa_r+0xb98>)
 800a8a4:	f7ff baa7 	b.w	8009df6 <_dtoa_r+0xce>
 800a8a8:	9b04      	ldr	r3, [sp, #16]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f73f aef4 	bgt.w	800a698 <_dtoa_r+0x970>
 800a8b0:	9b07      	ldr	r3, [sp, #28]
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	f77f aef0 	ble.w	800a698 <_dtoa_r+0x970>
 800a8b8:	e6b8      	b.n	800a62c <_dtoa_r+0x904>
 800a8ba:	bf00      	nop
 800a8bc:	0802447c 	.word	0x0802447c
 800a8c0:	080241ee 	.word	0x080241ee

0800a8c4 <__sflush_r>:
 800a8c4:	898a      	ldrh	r2, [r1, #12]
 800a8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	0710      	lsls	r0, r2, #28
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	d45a      	bmi.n	800a988 <__sflush_r+0xc4>
 800a8d2:	684b      	ldr	r3, [r1, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	dc05      	bgt.n	800a8e4 <__sflush_r+0x20>
 800a8d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	dc02      	bgt.n	800a8e4 <__sflush_r+0x20>
 800a8de:	2000      	movs	r0, #0
 800a8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8e6:	2e00      	cmp	r6, #0
 800a8e8:	d0f9      	beq.n	800a8de <__sflush_r+0x1a>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8f0:	682f      	ldr	r7, [r5, #0]
 800a8f2:	602b      	str	r3, [r5, #0]
 800a8f4:	d033      	beq.n	800a95e <__sflush_r+0x9a>
 800a8f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	075a      	lsls	r2, r3, #29
 800a8fc:	d505      	bpl.n	800a90a <__sflush_r+0x46>
 800a8fe:	6863      	ldr	r3, [r4, #4]
 800a900:	1ac0      	subs	r0, r0, r3
 800a902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a904:	b10b      	cbz	r3, 800a90a <__sflush_r+0x46>
 800a906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a908:	1ac0      	subs	r0, r0, r3
 800a90a:	2300      	movs	r3, #0
 800a90c:	4602      	mov	r2, r0
 800a90e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a910:	6a21      	ldr	r1, [r4, #32]
 800a912:	4628      	mov	r0, r5
 800a914:	47b0      	blx	r6
 800a916:	1c43      	adds	r3, r0, #1
 800a918:	89a3      	ldrh	r3, [r4, #12]
 800a91a:	d106      	bne.n	800a92a <__sflush_r+0x66>
 800a91c:	6829      	ldr	r1, [r5, #0]
 800a91e:	291d      	cmp	r1, #29
 800a920:	d84b      	bhi.n	800a9ba <__sflush_r+0xf6>
 800a922:	4a2b      	ldr	r2, [pc, #172]	; (800a9d0 <__sflush_r+0x10c>)
 800a924:	40ca      	lsrs	r2, r1
 800a926:	07d6      	lsls	r6, r2, #31
 800a928:	d547      	bpl.n	800a9ba <__sflush_r+0xf6>
 800a92a:	2200      	movs	r2, #0
 800a92c:	6062      	str	r2, [r4, #4]
 800a92e:	04d9      	lsls	r1, r3, #19
 800a930:	6922      	ldr	r2, [r4, #16]
 800a932:	6022      	str	r2, [r4, #0]
 800a934:	d504      	bpl.n	800a940 <__sflush_r+0x7c>
 800a936:	1c42      	adds	r2, r0, #1
 800a938:	d101      	bne.n	800a93e <__sflush_r+0x7a>
 800a93a:	682b      	ldr	r3, [r5, #0]
 800a93c:	b903      	cbnz	r3, 800a940 <__sflush_r+0x7c>
 800a93e:	6560      	str	r0, [r4, #84]	; 0x54
 800a940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a942:	602f      	str	r7, [r5, #0]
 800a944:	2900      	cmp	r1, #0
 800a946:	d0ca      	beq.n	800a8de <__sflush_r+0x1a>
 800a948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a94c:	4299      	cmp	r1, r3
 800a94e:	d002      	beq.n	800a956 <__sflush_r+0x92>
 800a950:	4628      	mov	r0, r5
 800a952:	f000 fc7f 	bl	800b254 <_free_r>
 800a956:	2000      	movs	r0, #0
 800a958:	6360      	str	r0, [r4, #52]	; 0x34
 800a95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a95e:	6a21      	ldr	r1, [r4, #32]
 800a960:	2301      	movs	r3, #1
 800a962:	4628      	mov	r0, r5
 800a964:	47b0      	blx	r6
 800a966:	1c41      	adds	r1, r0, #1
 800a968:	d1c6      	bne.n	800a8f8 <__sflush_r+0x34>
 800a96a:	682b      	ldr	r3, [r5, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d0c3      	beq.n	800a8f8 <__sflush_r+0x34>
 800a970:	2b1d      	cmp	r3, #29
 800a972:	d001      	beq.n	800a978 <__sflush_r+0xb4>
 800a974:	2b16      	cmp	r3, #22
 800a976:	d101      	bne.n	800a97c <__sflush_r+0xb8>
 800a978:	602f      	str	r7, [r5, #0]
 800a97a:	e7b0      	b.n	800a8de <__sflush_r+0x1a>
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a982:	81a3      	strh	r3, [r4, #12]
 800a984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a988:	690f      	ldr	r7, [r1, #16]
 800a98a:	2f00      	cmp	r7, #0
 800a98c:	d0a7      	beq.n	800a8de <__sflush_r+0x1a>
 800a98e:	0793      	lsls	r3, r2, #30
 800a990:	680e      	ldr	r6, [r1, #0]
 800a992:	bf08      	it	eq
 800a994:	694b      	ldreq	r3, [r1, #20]
 800a996:	600f      	str	r7, [r1, #0]
 800a998:	bf18      	it	ne
 800a99a:	2300      	movne	r3, #0
 800a99c:	eba6 0807 	sub.w	r8, r6, r7
 800a9a0:	608b      	str	r3, [r1, #8]
 800a9a2:	f1b8 0f00 	cmp.w	r8, #0
 800a9a6:	dd9a      	ble.n	800a8de <__sflush_r+0x1a>
 800a9a8:	4643      	mov	r3, r8
 800a9aa:	463a      	mov	r2, r7
 800a9ac:	6a21      	ldr	r1, [r4, #32]
 800a9ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	47b0      	blx	r6
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	dc07      	bgt.n	800a9c8 <__sflush_r+0x104>
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c8:	4407      	add	r7, r0
 800a9ca:	eba8 0800 	sub.w	r8, r8, r0
 800a9ce:	e7e8      	b.n	800a9a2 <__sflush_r+0xde>
 800a9d0:	20400001 	.word	0x20400001

0800a9d4 <_fflush_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	690b      	ldr	r3, [r1, #16]
 800a9d8:	4605      	mov	r5, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	b1db      	cbz	r3, 800aa16 <_fflush_r+0x42>
 800a9de:	b118      	cbz	r0, 800a9e8 <_fflush_r+0x14>
 800a9e0:	6983      	ldr	r3, [r0, #24]
 800a9e2:	b90b      	cbnz	r3, 800a9e8 <_fflush_r+0x14>
 800a9e4:	f000 f860 	bl	800aaa8 <__sinit>
 800a9e8:	4b0c      	ldr	r3, [pc, #48]	; (800aa1c <_fflush_r+0x48>)
 800a9ea:	429c      	cmp	r4, r3
 800a9ec:	d109      	bne.n	800aa02 <_fflush_r+0x2e>
 800a9ee:	686c      	ldr	r4, [r5, #4]
 800a9f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9f4:	b17b      	cbz	r3, 800aa16 <_fflush_r+0x42>
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9fe:	f7ff bf61 	b.w	800a8c4 <__sflush_r>
 800aa02:	4b07      	ldr	r3, [pc, #28]	; (800aa20 <_fflush_r+0x4c>)
 800aa04:	429c      	cmp	r4, r3
 800aa06:	d101      	bne.n	800aa0c <_fflush_r+0x38>
 800aa08:	68ac      	ldr	r4, [r5, #8]
 800aa0a:	e7f1      	b.n	800a9f0 <_fflush_r+0x1c>
 800aa0c:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <_fflush_r+0x50>)
 800aa0e:	429c      	cmp	r4, r3
 800aa10:	bf08      	it	eq
 800aa12:	68ec      	ldreq	r4, [r5, #12]
 800aa14:	e7ec      	b.n	800a9f0 <_fflush_r+0x1c>
 800aa16:	2000      	movs	r0, #0
 800aa18:	bd38      	pop	{r3, r4, r5, pc}
 800aa1a:	bf00      	nop
 800aa1c:	0802421c 	.word	0x0802421c
 800aa20:	0802423c 	.word	0x0802423c
 800aa24:	080241fc 	.word	0x080241fc

0800aa28 <_cleanup_r>:
 800aa28:	4901      	ldr	r1, [pc, #4]	; (800aa30 <_cleanup_r+0x8>)
 800aa2a:	f000 b8a9 	b.w	800ab80 <_fwalk_reent>
 800aa2e:	bf00      	nop
 800aa30:	0800a9d5 	.word	0x0800a9d5

0800aa34 <std.isra.0>:
 800aa34:	2300      	movs	r3, #0
 800aa36:	b510      	push	{r4, lr}
 800aa38:	4604      	mov	r4, r0
 800aa3a:	6003      	str	r3, [r0, #0]
 800aa3c:	6043      	str	r3, [r0, #4]
 800aa3e:	6083      	str	r3, [r0, #8]
 800aa40:	8181      	strh	r1, [r0, #12]
 800aa42:	6643      	str	r3, [r0, #100]	; 0x64
 800aa44:	81c2      	strh	r2, [r0, #14]
 800aa46:	6103      	str	r3, [r0, #16]
 800aa48:	6143      	str	r3, [r0, #20]
 800aa4a:	6183      	str	r3, [r0, #24]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	2208      	movs	r2, #8
 800aa50:	305c      	adds	r0, #92	; 0x5c
 800aa52:	f7fe fa5f 	bl	8008f14 <memset>
 800aa56:	4b05      	ldr	r3, [pc, #20]	; (800aa6c <std.isra.0+0x38>)
 800aa58:	6263      	str	r3, [r4, #36]	; 0x24
 800aa5a:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <std.isra.0+0x3c>)
 800aa5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa5e:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <std.isra.0+0x40>)
 800aa60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa62:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <std.isra.0+0x44>)
 800aa64:	6224      	str	r4, [r4, #32]
 800aa66:	6323      	str	r3, [r4, #48]	; 0x30
 800aa68:	bd10      	pop	{r4, pc}
 800aa6a:	bf00      	nop
 800aa6c:	0800b5dd 	.word	0x0800b5dd
 800aa70:	0800b5ff 	.word	0x0800b5ff
 800aa74:	0800b637 	.word	0x0800b637
 800aa78:	0800b65b 	.word	0x0800b65b

0800aa7c <__sfmoreglue>:
 800aa7c:	b570      	push	{r4, r5, r6, lr}
 800aa7e:	1e4a      	subs	r2, r1, #1
 800aa80:	2568      	movs	r5, #104	; 0x68
 800aa82:	4355      	muls	r5, r2
 800aa84:	460e      	mov	r6, r1
 800aa86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa8a:	f7fe fa59 	bl	8008f40 <_malloc_r>
 800aa8e:	4604      	mov	r4, r0
 800aa90:	b140      	cbz	r0, 800aaa4 <__sfmoreglue+0x28>
 800aa92:	2100      	movs	r1, #0
 800aa94:	e880 0042 	stmia.w	r0, {r1, r6}
 800aa98:	300c      	adds	r0, #12
 800aa9a:	60a0      	str	r0, [r4, #8]
 800aa9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aaa0:	f7fe fa38 	bl	8008f14 <memset>
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	bd70      	pop	{r4, r5, r6, pc}

0800aaa8 <__sinit>:
 800aaa8:	6983      	ldr	r3, [r0, #24]
 800aaaa:	b510      	push	{r4, lr}
 800aaac:	4604      	mov	r4, r0
 800aaae:	bb33      	cbnz	r3, 800aafe <__sinit+0x56>
 800aab0:	6483      	str	r3, [r0, #72]	; 0x48
 800aab2:	64c3      	str	r3, [r0, #76]	; 0x4c
 800aab4:	6503      	str	r3, [r0, #80]	; 0x50
 800aab6:	4b12      	ldr	r3, [pc, #72]	; (800ab00 <__sinit+0x58>)
 800aab8:	4a12      	ldr	r2, [pc, #72]	; (800ab04 <__sinit+0x5c>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6282      	str	r2, [r0, #40]	; 0x28
 800aabe:	4298      	cmp	r0, r3
 800aac0:	bf04      	itt	eq
 800aac2:	2301      	moveq	r3, #1
 800aac4:	6183      	streq	r3, [r0, #24]
 800aac6:	f000 f81f 	bl	800ab08 <__sfp>
 800aaca:	6060      	str	r0, [r4, #4]
 800aacc:	4620      	mov	r0, r4
 800aace:	f000 f81b 	bl	800ab08 <__sfp>
 800aad2:	60a0      	str	r0, [r4, #8]
 800aad4:	4620      	mov	r0, r4
 800aad6:	f000 f817 	bl	800ab08 <__sfp>
 800aada:	2200      	movs	r2, #0
 800aadc:	60e0      	str	r0, [r4, #12]
 800aade:	2104      	movs	r1, #4
 800aae0:	6860      	ldr	r0, [r4, #4]
 800aae2:	f7ff ffa7 	bl	800aa34 <std.isra.0>
 800aae6:	2201      	movs	r2, #1
 800aae8:	2109      	movs	r1, #9
 800aaea:	68a0      	ldr	r0, [r4, #8]
 800aaec:	f7ff ffa2 	bl	800aa34 <std.isra.0>
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	2112      	movs	r1, #18
 800aaf4:	68e0      	ldr	r0, [r4, #12]
 800aaf6:	f7ff ff9d 	bl	800aa34 <std.isra.0>
 800aafa:	2301      	movs	r3, #1
 800aafc:	61a3      	str	r3, [r4, #24]
 800aafe:	bd10      	pop	{r4, pc}
 800ab00:	080241b8 	.word	0x080241b8
 800ab04:	0800aa29 	.word	0x0800aa29

0800ab08 <__sfp>:
 800ab08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0a:	4b1c      	ldr	r3, [pc, #112]	; (800ab7c <__sfp+0x74>)
 800ab0c:	681e      	ldr	r6, [r3, #0]
 800ab0e:	69b3      	ldr	r3, [r6, #24]
 800ab10:	4607      	mov	r7, r0
 800ab12:	b913      	cbnz	r3, 800ab1a <__sfp+0x12>
 800ab14:	4630      	mov	r0, r6
 800ab16:	f7ff ffc7 	bl	800aaa8 <__sinit>
 800ab1a:	3648      	adds	r6, #72	; 0x48
 800ab1c:	68b4      	ldr	r4, [r6, #8]
 800ab1e:	6873      	ldr	r3, [r6, #4]
 800ab20:	3b01      	subs	r3, #1
 800ab22:	d503      	bpl.n	800ab2c <__sfp+0x24>
 800ab24:	6833      	ldr	r3, [r6, #0]
 800ab26:	b133      	cbz	r3, 800ab36 <__sfp+0x2e>
 800ab28:	6836      	ldr	r6, [r6, #0]
 800ab2a:	e7f7      	b.n	800ab1c <__sfp+0x14>
 800ab2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab30:	b16d      	cbz	r5, 800ab4e <__sfp+0x46>
 800ab32:	3468      	adds	r4, #104	; 0x68
 800ab34:	e7f4      	b.n	800ab20 <__sfp+0x18>
 800ab36:	2104      	movs	r1, #4
 800ab38:	4638      	mov	r0, r7
 800ab3a:	f7ff ff9f 	bl	800aa7c <__sfmoreglue>
 800ab3e:	6030      	str	r0, [r6, #0]
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d1f1      	bne.n	800ab28 <__sfp+0x20>
 800ab44:	230c      	movs	r3, #12
 800ab46:	603b      	str	r3, [r7, #0]
 800ab48:	4604      	mov	r4, r0
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab52:	81e3      	strh	r3, [r4, #14]
 800ab54:	2301      	movs	r3, #1
 800ab56:	81a3      	strh	r3, [r4, #12]
 800ab58:	6665      	str	r5, [r4, #100]	; 0x64
 800ab5a:	6025      	str	r5, [r4, #0]
 800ab5c:	60a5      	str	r5, [r4, #8]
 800ab5e:	6065      	str	r5, [r4, #4]
 800ab60:	6125      	str	r5, [r4, #16]
 800ab62:	6165      	str	r5, [r4, #20]
 800ab64:	61a5      	str	r5, [r4, #24]
 800ab66:	2208      	movs	r2, #8
 800ab68:	4629      	mov	r1, r5
 800ab6a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab6e:	f7fe f9d1 	bl	8008f14 <memset>
 800ab72:	6365      	str	r5, [r4, #52]	; 0x34
 800ab74:	63a5      	str	r5, [r4, #56]	; 0x38
 800ab76:	64a5      	str	r5, [r4, #72]	; 0x48
 800ab78:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ab7a:	e7e6      	b.n	800ab4a <__sfp+0x42>
 800ab7c:	080241b8 	.word	0x080241b8

0800ab80 <_fwalk_reent>:
 800ab80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab84:	4680      	mov	r8, r0
 800ab86:	4689      	mov	r9, r1
 800ab88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab8c:	2600      	movs	r6, #0
 800ab8e:	b914      	cbnz	r4, 800ab96 <_fwalk_reent+0x16>
 800ab90:	4630      	mov	r0, r6
 800ab92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab96:	68a5      	ldr	r5, [r4, #8]
 800ab98:	6867      	ldr	r7, [r4, #4]
 800ab9a:	3f01      	subs	r7, #1
 800ab9c:	d501      	bpl.n	800aba2 <_fwalk_reent+0x22>
 800ab9e:	6824      	ldr	r4, [r4, #0]
 800aba0:	e7f5      	b.n	800ab8e <_fwalk_reent+0xe>
 800aba2:	89ab      	ldrh	r3, [r5, #12]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d907      	bls.n	800abb8 <_fwalk_reent+0x38>
 800aba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abac:	3301      	adds	r3, #1
 800abae:	d003      	beq.n	800abb8 <_fwalk_reent+0x38>
 800abb0:	4629      	mov	r1, r5
 800abb2:	4640      	mov	r0, r8
 800abb4:	47c8      	blx	r9
 800abb6:	4306      	orrs	r6, r0
 800abb8:	3568      	adds	r5, #104	; 0x68
 800abba:	e7ee      	b.n	800ab9a <_fwalk_reent+0x1a>

0800abbc <_localeconv_r>:
 800abbc:	4b04      	ldr	r3, [pc, #16]	; (800abd0 <_localeconv_r+0x14>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6a18      	ldr	r0, [r3, #32]
 800abc2:	4b04      	ldr	r3, [pc, #16]	; (800abd4 <_localeconv_r+0x18>)
 800abc4:	2800      	cmp	r0, #0
 800abc6:	bf08      	it	eq
 800abc8:	4618      	moveq	r0, r3
 800abca:	30f0      	adds	r0, #240	; 0xf0
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	2000056c 	.word	0x2000056c
 800abd4:	200005d0 	.word	0x200005d0

0800abd8 <__swhatbuf_r>:
 800abd8:	b570      	push	{r4, r5, r6, lr}
 800abda:	460e      	mov	r6, r1
 800abdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe0:	2900      	cmp	r1, #0
 800abe2:	b090      	sub	sp, #64	; 0x40
 800abe4:	4614      	mov	r4, r2
 800abe6:	461d      	mov	r5, r3
 800abe8:	da07      	bge.n	800abfa <__swhatbuf_r+0x22>
 800abea:	2300      	movs	r3, #0
 800abec:	602b      	str	r3, [r5, #0]
 800abee:	89b3      	ldrh	r3, [r6, #12]
 800abf0:	061a      	lsls	r2, r3, #24
 800abf2:	d410      	bmi.n	800ac16 <__swhatbuf_r+0x3e>
 800abf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abf8:	e00e      	b.n	800ac18 <__swhatbuf_r+0x40>
 800abfa:	aa01      	add	r2, sp, #4
 800abfc:	f000 fd54 	bl	800b6a8 <_fstat_r>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	dbf2      	blt.n	800abea <__swhatbuf_r+0x12>
 800ac04:	9a02      	ldr	r2, [sp, #8]
 800ac06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac0e:	425a      	negs	r2, r3
 800ac10:	415a      	adcs	r2, r3
 800ac12:	602a      	str	r2, [r5, #0]
 800ac14:	e7ee      	b.n	800abf4 <__swhatbuf_r+0x1c>
 800ac16:	2340      	movs	r3, #64	; 0x40
 800ac18:	2000      	movs	r0, #0
 800ac1a:	6023      	str	r3, [r4, #0]
 800ac1c:	b010      	add	sp, #64	; 0x40
 800ac1e:	bd70      	pop	{r4, r5, r6, pc}

0800ac20 <__smakebuf_r>:
 800ac20:	898b      	ldrh	r3, [r1, #12]
 800ac22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac24:	079d      	lsls	r5, r3, #30
 800ac26:	4606      	mov	r6, r0
 800ac28:	460c      	mov	r4, r1
 800ac2a:	d507      	bpl.n	800ac3c <__smakebuf_r+0x1c>
 800ac2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	6123      	str	r3, [r4, #16]
 800ac34:	2301      	movs	r3, #1
 800ac36:	6163      	str	r3, [r4, #20]
 800ac38:	b002      	add	sp, #8
 800ac3a:	bd70      	pop	{r4, r5, r6, pc}
 800ac3c:	ab01      	add	r3, sp, #4
 800ac3e:	466a      	mov	r2, sp
 800ac40:	f7ff ffca 	bl	800abd8 <__swhatbuf_r>
 800ac44:	9900      	ldr	r1, [sp, #0]
 800ac46:	4605      	mov	r5, r0
 800ac48:	4630      	mov	r0, r6
 800ac4a:	f7fe f979 	bl	8008f40 <_malloc_r>
 800ac4e:	b948      	cbnz	r0, 800ac64 <__smakebuf_r+0x44>
 800ac50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac54:	059a      	lsls	r2, r3, #22
 800ac56:	d4ef      	bmi.n	800ac38 <__smakebuf_r+0x18>
 800ac58:	f023 0303 	bic.w	r3, r3, #3
 800ac5c:	f043 0302 	orr.w	r3, r3, #2
 800ac60:	81a3      	strh	r3, [r4, #12]
 800ac62:	e7e3      	b.n	800ac2c <__smakebuf_r+0xc>
 800ac64:	4b0d      	ldr	r3, [pc, #52]	; (800ac9c <__smakebuf_r+0x7c>)
 800ac66:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac68:	89a3      	ldrh	r3, [r4, #12]
 800ac6a:	6020      	str	r0, [r4, #0]
 800ac6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac70:	81a3      	strh	r3, [r4, #12]
 800ac72:	9b00      	ldr	r3, [sp, #0]
 800ac74:	6163      	str	r3, [r4, #20]
 800ac76:	9b01      	ldr	r3, [sp, #4]
 800ac78:	6120      	str	r0, [r4, #16]
 800ac7a:	b15b      	cbz	r3, 800ac94 <__smakebuf_r+0x74>
 800ac7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac80:	4630      	mov	r0, r6
 800ac82:	f000 fd23 	bl	800b6cc <_isatty_r>
 800ac86:	b128      	cbz	r0, 800ac94 <__smakebuf_r+0x74>
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	f023 0303 	bic.w	r3, r3, #3
 800ac8e:	f043 0301 	orr.w	r3, r3, #1
 800ac92:	81a3      	strh	r3, [r4, #12]
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	431d      	orrs	r5, r3
 800ac98:	81a5      	strh	r5, [r4, #12]
 800ac9a:	e7cd      	b.n	800ac38 <__smakebuf_r+0x18>
 800ac9c:	0800aa29 	.word	0x0800aa29

0800aca0 <malloc>:
 800aca0:	4b02      	ldr	r3, [pc, #8]	; (800acac <malloc+0xc>)
 800aca2:	4601      	mov	r1, r0
 800aca4:	6818      	ldr	r0, [r3, #0]
 800aca6:	f7fe b94b 	b.w	8008f40 <_malloc_r>
 800acaa:	bf00      	nop
 800acac:	2000056c 	.word	0x2000056c

0800acb0 <__malloc_lock>:
 800acb0:	4770      	bx	lr

0800acb2 <__malloc_unlock>:
 800acb2:	4770      	bx	lr

0800acb4 <_Balloc>:
 800acb4:	b570      	push	{r4, r5, r6, lr}
 800acb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800acb8:	4604      	mov	r4, r0
 800acba:	460e      	mov	r6, r1
 800acbc:	b93d      	cbnz	r5, 800acce <_Balloc+0x1a>
 800acbe:	2010      	movs	r0, #16
 800acc0:	f7ff ffee 	bl	800aca0 <malloc>
 800acc4:	6260      	str	r0, [r4, #36]	; 0x24
 800acc6:	6045      	str	r5, [r0, #4]
 800acc8:	6085      	str	r5, [r0, #8]
 800acca:	6005      	str	r5, [r0, #0]
 800accc:	60c5      	str	r5, [r0, #12]
 800acce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800acd0:	68eb      	ldr	r3, [r5, #12]
 800acd2:	b183      	cbz	r3, 800acf6 <_Balloc+0x42>
 800acd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800acdc:	b9b8      	cbnz	r0, 800ad0e <_Balloc+0x5a>
 800acde:	2101      	movs	r1, #1
 800ace0:	fa01 f506 	lsl.w	r5, r1, r6
 800ace4:	1d6a      	adds	r2, r5, #5
 800ace6:	0092      	lsls	r2, r2, #2
 800ace8:	4620      	mov	r0, r4
 800acea:	f7fe f91b 	bl	8008f24 <_calloc_r>
 800acee:	b160      	cbz	r0, 800ad0a <_Balloc+0x56>
 800acf0:	6046      	str	r6, [r0, #4]
 800acf2:	6085      	str	r5, [r0, #8]
 800acf4:	e00e      	b.n	800ad14 <_Balloc+0x60>
 800acf6:	2221      	movs	r2, #33	; 0x21
 800acf8:	2104      	movs	r1, #4
 800acfa:	4620      	mov	r0, r4
 800acfc:	f7fe f912 	bl	8008f24 <_calloc_r>
 800ad00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad02:	60e8      	str	r0, [r5, #12]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1e4      	bne.n	800acd4 <_Balloc+0x20>
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	bd70      	pop	{r4, r5, r6, pc}
 800ad0e:	6802      	ldr	r2, [r0, #0]
 800ad10:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ad14:	2300      	movs	r3, #0
 800ad16:	6103      	str	r3, [r0, #16]
 800ad18:	60c3      	str	r3, [r0, #12]
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}

0800ad1c <_Bfree>:
 800ad1c:	b570      	push	{r4, r5, r6, lr}
 800ad1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ad20:	4606      	mov	r6, r0
 800ad22:	460d      	mov	r5, r1
 800ad24:	b93c      	cbnz	r4, 800ad36 <_Bfree+0x1a>
 800ad26:	2010      	movs	r0, #16
 800ad28:	f7ff ffba 	bl	800aca0 <malloc>
 800ad2c:	6270      	str	r0, [r6, #36]	; 0x24
 800ad2e:	6044      	str	r4, [r0, #4]
 800ad30:	6084      	str	r4, [r0, #8]
 800ad32:	6004      	str	r4, [r0, #0]
 800ad34:	60c4      	str	r4, [r0, #12]
 800ad36:	b13d      	cbz	r5, 800ad48 <_Bfree+0x2c>
 800ad38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ad3a:	686a      	ldr	r2, [r5, #4]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad42:	6029      	str	r1, [r5, #0]
 800ad44:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ad48:	bd70      	pop	{r4, r5, r6, pc}

0800ad4a <__multadd>:
 800ad4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4e:	690d      	ldr	r5, [r1, #16]
 800ad50:	461f      	mov	r7, r3
 800ad52:	4606      	mov	r6, r0
 800ad54:	460c      	mov	r4, r1
 800ad56:	f101 0e14 	add.w	lr, r1, #20
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	f8de 0000 	ldr.w	r0, [lr]
 800ad60:	b281      	uxth	r1, r0
 800ad62:	fb02 7101 	mla	r1, r2, r1, r7
 800ad66:	0c0f      	lsrs	r7, r1, #16
 800ad68:	0c00      	lsrs	r0, r0, #16
 800ad6a:	fb02 7000 	mla	r0, r2, r0, r7
 800ad6e:	b289      	uxth	r1, r1
 800ad70:	3301      	adds	r3, #1
 800ad72:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ad76:	429d      	cmp	r5, r3
 800ad78:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ad7c:	f84e 1b04 	str.w	r1, [lr], #4
 800ad80:	dcec      	bgt.n	800ad5c <__multadd+0x12>
 800ad82:	b1d7      	cbz	r7, 800adba <__multadd+0x70>
 800ad84:	68a3      	ldr	r3, [r4, #8]
 800ad86:	429d      	cmp	r5, r3
 800ad88:	db12      	blt.n	800adb0 <__multadd+0x66>
 800ad8a:	6861      	ldr	r1, [r4, #4]
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	3101      	adds	r1, #1
 800ad90:	f7ff ff90 	bl	800acb4 <_Balloc>
 800ad94:	6922      	ldr	r2, [r4, #16]
 800ad96:	3202      	adds	r2, #2
 800ad98:	f104 010c 	add.w	r1, r4, #12
 800ad9c:	4680      	mov	r8, r0
 800ad9e:	0092      	lsls	r2, r2, #2
 800ada0:	300c      	adds	r0, #12
 800ada2:	f7fe f8ac 	bl	8008efe <memcpy>
 800ada6:	4621      	mov	r1, r4
 800ada8:	4630      	mov	r0, r6
 800adaa:	f7ff ffb7 	bl	800ad1c <_Bfree>
 800adae:	4644      	mov	r4, r8
 800adb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adb4:	3501      	adds	r5, #1
 800adb6:	615f      	str	r7, [r3, #20]
 800adb8:	6125      	str	r5, [r4, #16]
 800adba:	4620      	mov	r0, r4
 800adbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800adc0 <__hi0bits>:
 800adc0:	0c02      	lsrs	r2, r0, #16
 800adc2:	0412      	lsls	r2, r2, #16
 800adc4:	4603      	mov	r3, r0
 800adc6:	b9b2      	cbnz	r2, 800adf6 <__hi0bits+0x36>
 800adc8:	0403      	lsls	r3, r0, #16
 800adca:	2010      	movs	r0, #16
 800adcc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800add0:	bf04      	itt	eq
 800add2:	021b      	lsleq	r3, r3, #8
 800add4:	3008      	addeq	r0, #8
 800add6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800adda:	bf04      	itt	eq
 800addc:	011b      	lsleq	r3, r3, #4
 800adde:	3004      	addeq	r0, #4
 800ade0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ade4:	bf04      	itt	eq
 800ade6:	009b      	lsleq	r3, r3, #2
 800ade8:	3002      	addeq	r0, #2
 800adea:	2b00      	cmp	r3, #0
 800adec:	db06      	blt.n	800adfc <__hi0bits+0x3c>
 800adee:	005b      	lsls	r3, r3, #1
 800adf0:	d503      	bpl.n	800adfa <__hi0bits+0x3a>
 800adf2:	3001      	adds	r0, #1
 800adf4:	4770      	bx	lr
 800adf6:	2000      	movs	r0, #0
 800adf8:	e7e8      	b.n	800adcc <__hi0bits+0xc>
 800adfa:	2020      	movs	r0, #32
 800adfc:	4770      	bx	lr

0800adfe <__lo0bits>:
 800adfe:	6803      	ldr	r3, [r0, #0]
 800ae00:	f013 0207 	ands.w	r2, r3, #7
 800ae04:	4601      	mov	r1, r0
 800ae06:	d00b      	beq.n	800ae20 <__lo0bits+0x22>
 800ae08:	07da      	lsls	r2, r3, #31
 800ae0a:	d423      	bmi.n	800ae54 <__lo0bits+0x56>
 800ae0c:	0798      	lsls	r0, r3, #30
 800ae0e:	bf49      	itett	mi
 800ae10:	085b      	lsrmi	r3, r3, #1
 800ae12:	089b      	lsrpl	r3, r3, #2
 800ae14:	2001      	movmi	r0, #1
 800ae16:	600b      	strmi	r3, [r1, #0]
 800ae18:	bf5c      	itt	pl
 800ae1a:	600b      	strpl	r3, [r1, #0]
 800ae1c:	2002      	movpl	r0, #2
 800ae1e:	4770      	bx	lr
 800ae20:	b298      	uxth	r0, r3
 800ae22:	b9a8      	cbnz	r0, 800ae50 <__lo0bits+0x52>
 800ae24:	0c1b      	lsrs	r3, r3, #16
 800ae26:	2010      	movs	r0, #16
 800ae28:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ae2c:	bf04      	itt	eq
 800ae2e:	0a1b      	lsreq	r3, r3, #8
 800ae30:	3008      	addeq	r0, #8
 800ae32:	071a      	lsls	r2, r3, #28
 800ae34:	bf04      	itt	eq
 800ae36:	091b      	lsreq	r3, r3, #4
 800ae38:	3004      	addeq	r0, #4
 800ae3a:	079a      	lsls	r2, r3, #30
 800ae3c:	bf04      	itt	eq
 800ae3e:	089b      	lsreq	r3, r3, #2
 800ae40:	3002      	addeq	r0, #2
 800ae42:	07da      	lsls	r2, r3, #31
 800ae44:	d402      	bmi.n	800ae4c <__lo0bits+0x4e>
 800ae46:	085b      	lsrs	r3, r3, #1
 800ae48:	d006      	beq.n	800ae58 <__lo0bits+0x5a>
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	600b      	str	r3, [r1, #0]
 800ae4e:	4770      	bx	lr
 800ae50:	4610      	mov	r0, r2
 800ae52:	e7e9      	b.n	800ae28 <__lo0bits+0x2a>
 800ae54:	2000      	movs	r0, #0
 800ae56:	4770      	bx	lr
 800ae58:	2020      	movs	r0, #32
 800ae5a:	4770      	bx	lr

0800ae5c <__i2b>:
 800ae5c:	b510      	push	{r4, lr}
 800ae5e:	460c      	mov	r4, r1
 800ae60:	2101      	movs	r1, #1
 800ae62:	f7ff ff27 	bl	800acb4 <_Balloc>
 800ae66:	2201      	movs	r2, #1
 800ae68:	6144      	str	r4, [r0, #20]
 800ae6a:	6102      	str	r2, [r0, #16]
 800ae6c:	bd10      	pop	{r4, pc}

0800ae6e <__multiply>:
 800ae6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae72:	4614      	mov	r4, r2
 800ae74:	690a      	ldr	r2, [r1, #16]
 800ae76:	6923      	ldr	r3, [r4, #16]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	bfb8      	it	lt
 800ae7c:	460b      	movlt	r3, r1
 800ae7e:	4689      	mov	r9, r1
 800ae80:	bfbc      	itt	lt
 800ae82:	46a1      	movlt	r9, r4
 800ae84:	461c      	movlt	r4, r3
 800ae86:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ae8a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ae8e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ae92:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae96:	eb07 060a 	add.w	r6, r7, sl
 800ae9a:	429e      	cmp	r6, r3
 800ae9c:	bfc8      	it	gt
 800ae9e:	3101      	addgt	r1, #1
 800aea0:	f7ff ff08 	bl	800acb4 <_Balloc>
 800aea4:	f100 0514 	add.w	r5, r0, #20
 800aea8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aeac:	462b      	mov	r3, r5
 800aeae:	2200      	movs	r2, #0
 800aeb0:	4543      	cmp	r3, r8
 800aeb2:	d316      	bcc.n	800aee2 <__multiply+0x74>
 800aeb4:	f104 0214 	add.w	r2, r4, #20
 800aeb8:	f109 0114 	add.w	r1, r9, #20
 800aebc:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800aec0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800aec4:	9301      	str	r3, [sp, #4]
 800aec6:	9c01      	ldr	r4, [sp, #4]
 800aec8:	4294      	cmp	r4, r2
 800aeca:	4613      	mov	r3, r2
 800aecc:	d80c      	bhi.n	800aee8 <__multiply+0x7a>
 800aece:	2e00      	cmp	r6, #0
 800aed0:	dd03      	ble.n	800aeda <__multiply+0x6c>
 800aed2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d054      	beq.n	800af84 <__multiply+0x116>
 800aeda:	6106      	str	r6, [r0, #16]
 800aedc:	b003      	add	sp, #12
 800aede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee2:	f843 2b04 	str.w	r2, [r3], #4
 800aee6:	e7e3      	b.n	800aeb0 <__multiply+0x42>
 800aee8:	f8b3 a000 	ldrh.w	sl, [r3]
 800aeec:	3204      	adds	r2, #4
 800aeee:	f1ba 0f00 	cmp.w	sl, #0
 800aef2:	d020      	beq.n	800af36 <__multiply+0xc8>
 800aef4:	46ae      	mov	lr, r5
 800aef6:	4689      	mov	r9, r1
 800aef8:	f04f 0c00 	mov.w	ip, #0
 800aefc:	f859 4b04 	ldr.w	r4, [r9], #4
 800af00:	f8be b000 	ldrh.w	fp, [lr]
 800af04:	b2a3      	uxth	r3, r4
 800af06:	fb0a b303 	mla	r3, sl, r3, fp
 800af0a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800af0e:	f8de 4000 	ldr.w	r4, [lr]
 800af12:	4463      	add	r3, ip
 800af14:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800af18:	fb0a c40b 	mla	r4, sl, fp, ip
 800af1c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800af20:	b29b      	uxth	r3, r3
 800af22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800af26:	454f      	cmp	r7, r9
 800af28:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800af2c:	f84e 3b04 	str.w	r3, [lr], #4
 800af30:	d8e4      	bhi.n	800aefc <__multiply+0x8e>
 800af32:	f8ce c000 	str.w	ip, [lr]
 800af36:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800af3a:	f1b9 0f00 	cmp.w	r9, #0
 800af3e:	d01f      	beq.n	800af80 <__multiply+0x112>
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	46ae      	mov	lr, r5
 800af44:	468c      	mov	ip, r1
 800af46:	f04f 0a00 	mov.w	sl, #0
 800af4a:	f8bc 4000 	ldrh.w	r4, [ip]
 800af4e:	f8be b002 	ldrh.w	fp, [lr, #2]
 800af52:	fb09 b404 	mla	r4, r9, r4, fp
 800af56:	44a2      	add	sl, r4
 800af58:	b29b      	uxth	r3, r3
 800af5a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800af5e:	f84e 3b04 	str.w	r3, [lr], #4
 800af62:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af66:	f8be 4000 	ldrh.w	r4, [lr]
 800af6a:	0c1b      	lsrs	r3, r3, #16
 800af6c:	fb09 4303 	mla	r3, r9, r3, r4
 800af70:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800af74:	4567      	cmp	r7, ip
 800af76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af7a:	d8e6      	bhi.n	800af4a <__multiply+0xdc>
 800af7c:	f8ce 3000 	str.w	r3, [lr]
 800af80:	3504      	adds	r5, #4
 800af82:	e7a0      	b.n	800aec6 <__multiply+0x58>
 800af84:	3e01      	subs	r6, #1
 800af86:	e7a2      	b.n	800aece <__multiply+0x60>

0800af88 <__pow5mult>:
 800af88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af8c:	4615      	mov	r5, r2
 800af8e:	f012 0203 	ands.w	r2, r2, #3
 800af92:	4606      	mov	r6, r0
 800af94:	460f      	mov	r7, r1
 800af96:	d007      	beq.n	800afa8 <__pow5mult+0x20>
 800af98:	3a01      	subs	r2, #1
 800af9a:	4c21      	ldr	r4, [pc, #132]	; (800b020 <__pow5mult+0x98>)
 800af9c:	2300      	movs	r3, #0
 800af9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800afa2:	f7ff fed2 	bl	800ad4a <__multadd>
 800afa6:	4607      	mov	r7, r0
 800afa8:	10ad      	asrs	r5, r5, #2
 800afaa:	d035      	beq.n	800b018 <__pow5mult+0x90>
 800afac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800afae:	b93c      	cbnz	r4, 800afc0 <__pow5mult+0x38>
 800afb0:	2010      	movs	r0, #16
 800afb2:	f7ff fe75 	bl	800aca0 <malloc>
 800afb6:	6270      	str	r0, [r6, #36]	; 0x24
 800afb8:	6044      	str	r4, [r0, #4]
 800afba:	6084      	str	r4, [r0, #8]
 800afbc:	6004      	str	r4, [r0, #0]
 800afbe:	60c4      	str	r4, [r0, #12]
 800afc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800afc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afc8:	b94c      	cbnz	r4, 800afde <__pow5mult+0x56>
 800afca:	f240 2171 	movw	r1, #625	; 0x271
 800afce:	4630      	mov	r0, r6
 800afd0:	f7ff ff44 	bl	800ae5c <__i2b>
 800afd4:	2300      	movs	r3, #0
 800afd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800afda:	4604      	mov	r4, r0
 800afdc:	6003      	str	r3, [r0, #0]
 800afde:	f04f 0800 	mov.w	r8, #0
 800afe2:	07eb      	lsls	r3, r5, #31
 800afe4:	d50a      	bpl.n	800affc <__pow5mult+0x74>
 800afe6:	4639      	mov	r1, r7
 800afe8:	4622      	mov	r2, r4
 800afea:	4630      	mov	r0, r6
 800afec:	f7ff ff3f 	bl	800ae6e <__multiply>
 800aff0:	4639      	mov	r1, r7
 800aff2:	4681      	mov	r9, r0
 800aff4:	4630      	mov	r0, r6
 800aff6:	f7ff fe91 	bl	800ad1c <_Bfree>
 800affa:	464f      	mov	r7, r9
 800affc:	106d      	asrs	r5, r5, #1
 800affe:	d00b      	beq.n	800b018 <__pow5mult+0x90>
 800b000:	6820      	ldr	r0, [r4, #0]
 800b002:	b938      	cbnz	r0, 800b014 <__pow5mult+0x8c>
 800b004:	4622      	mov	r2, r4
 800b006:	4621      	mov	r1, r4
 800b008:	4630      	mov	r0, r6
 800b00a:	f7ff ff30 	bl	800ae6e <__multiply>
 800b00e:	6020      	str	r0, [r4, #0]
 800b010:	f8c0 8000 	str.w	r8, [r0]
 800b014:	4604      	mov	r4, r0
 800b016:	e7e4      	b.n	800afe2 <__pow5mult+0x5a>
 800b018:	4638      	mov	r0, r7
 800b01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b01e:	bf00      	nop
 800b020:	08024350 	.word	0x08024350

0800b024 <__lshift>:
 800b024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b028:	460c      	mov	r4, r1
 800b02a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b02e:	6923      	ldr	r3, [r4, #16]
 800b030:	6849      	ldr	r1, [r1, #4]
 800b032:	eb0a 0903 	add.w	r9, sl, r3
 800b036:	68a3      	ldr	r3, [r4, #8]
 800b038:	4607      	mov	r7, r0
 800b03a:	4616      	mov	r6, r2
 800b03c:	f109 0501 	add.w	r5, r9, #1
 800b040:	42ab      	cmp	r3, r5
 800b042:	db31      	blt.n	800b0a8 <__lshift+0x84>
 800b044:	4638      	mov	r0, r7
 800b046:	f7ff fe35 	bl	800acb4 <_Balloc>
 800b04a:	2200      	movs	r2, #0
 800b04c:	4680      	mov	r8, r0
 800b04e:	f100 0314 	add.w	r3, r0, #20
 800b052:	4611      	mov	r1, r2
 800b054:	4552      	cmp	r2, sl
 800b056:	db2a      	blt.n	800b0ae <__lshift+0x8a>
 800b058:	6920      	ldr	r0, [r4, #16]
 800b05a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b05e:	f104 0114 	add.w	r1, r4, #20
 800b062:	f016 021f 	ands.w	r2, r6, #31
 800b066:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b06a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800b06e:	d022      	beq.n	800b0b6 <__lshift+0x92>
 800b070:	f1c2 0c20 	rsb	ip, r2, #32
 800b074:	2000      	movs	r0, #0
 800b076:	680e      	ldr	r6, [r1, #0]
 800b078:	4096      	lsls	r6, r2
 800b07a:	4330      	orrs	r0, r6
 800b07c:	f843 0b04 	str.w	r0, [r3], #4
 800b080:	f851 0b04 	ldr.w	r0, [r1], #4
 800b084:	458e      	cmp	lr, r1
 800b086:	fa20 f00c 	lsr.w	r0, r0, ip
 800b08a:	d8f4      	bhi.n	800b076 <__lshift+0x52>
 800b08c:	6018      	str	r0, [r3, #0]
 800b08e:	b108      	cbz	r0, 800b094 <__lshift+0x70>
 800b090:	f109 0502 	add.w	r5, r9, #2
 800b094:	3d01      	subs	r5, #1
 800b096:	4638      	mov	r0, r7
 800b098:	f8c8 5010 	str.w	r5, [r8, #16]
 800b09c:	4621      	mov	r1, r4
 800b09e:	f7ff fe3d 	bl	800ad1c <_Bfree>
 800b0a2:	4640      	mov	r0, r8
 800b0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0a8:	3101      	adds	r1, #1
 800b0aa:	005b      	lsls	r3, r3, #1
 800b0ac:	e7c8      	b.n	800b040 <__lshift+0x1c>
 800b0ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b0b2:	3201      	adds	r2, #1
 800b0b4:	e7ce      	b.n	800b054 <__lshift+0x30>
 800b0b6:	3b04      	subs	r3, #4
 800b0b8:	f851 2b04 	ldr.w	r2, [r1], #4
 800b0bc:	f843 2f04 	str.w	r2, [r3, #4]!
 800b0c0:	458e      	cmp	lr, r1
 800b0c2:	d8f9      	bhi.n	800b0b8 <__lshift+0x94>
 800b0c4:	e7e6      	b.n	800b094 <__lshift+0x70>

0800b0c6 <__mcmp>:
 800b0c6:	6903      	ldr	r3, [r0, #16]
 800b0c8:	690a      	ldr	r2, [r1, #16]
 800b0ca:	1a9b      	subs	r3, r3, r2
 800b0cc:	b530      	push	{r4, r5, lr}
 800b0ce:	d10c      	bne.n	800b0ea <__mcmp+0x24>
 800b0d0:	0092      	lsls	r2, r2, #2
 800b0d2:	3014      	adds	r0, #20
 800b0d4:	3114      	adds	r1, #20
 800b0d6:	1884      	adds	r4, r0, r2
 800b0d8:	4411      	add	r1, r2
 800b0da:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0de:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b0e2:	4295      	cmp	r5, r2
 800b0e4:	d003      	beq.n	800b0ee <__mcmp+0x28>
 800b0e6:	d305      	bcc.n	800b0f4 <__mcmp+0x2e>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	bd30      	pop	{r4, r5, pc}
 800b0ee:	42a0      	cmp	r0, r4
 800b0f0:	d3f3      	bcc.n	800b0da <__mcmp+0x14>
 800b0f2:	e7fa      	b.n	800b0ea <__mcmp+0x24>
 800b0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f8:	e7f7      	b.n	800b0ea <__mcmp+0x24>

0800b0fa <__mdiff>:
 800b0fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0fe:	460d      	mov	r5, r1
 800b100:	4607      	mov	r7, r0
 800b102:	4611      	mov	r1, r2
 800b104:	4628      	mov	r0, r5
 800b106:	4614      	mov	r4, r2
 800b108:	f7ff ffdd 	bl	800b0c6 <__mcmp>
 800b10c:	1e06      	subs	r6, r0, #0
 800b10e:	d108      	bne.n	800b122 <__mdiff+0x28>
 800b110:	4631      	mov	r1, r6
 800b112:	4638      	mov	r0, r7
 800b114:	f7ff fdce 	bl	800acb4 <_Balloc>
 800b118:	2301      	movs	r3, #1
 800b11a:	6103      	str	r3, [r0, #16]
 800b11c:	6146      	str	r6, [r0, #20]
 800b11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b122:	bfa4      	itt	ge
 800b124:	4623      	movge	r3, r4
 800b126:	462c      	movge	r4, r5
 800b128:	4638      	mov	r0, r7
 800b12a:	6861      	ldr	r1, [r4, #4]
 800b12c:	bfa6      	itte	ge
 800b12e:	461d      	movge	r5, r3
 800b130:	2600      	movge	r6, #0
 800b132:	2601      	movlt	r6, #1
 800b134:	f7ff fdbe 	bl	800acb4 <_Balloc>
 800b138:	692b      	ldr	r3, [r5, #16]
 800b13a:	60c6      	str	r6, [r0, #12]
 800b13c:	6926      	ldr	r6, [r4, #16]
 800b13e:	f105 0914 	add.w	r9, r5, #20
 800b142:	f104 0214 	add.w	r2, r4, #20
 800b146:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b14a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b14e:	f100 0514 	add.w	r5, r0, #20
 800b152:	f04f 0c00 	mov.w	ip, #0
 800b156:	f852 ab04 	ldr.w	sl, [r2], #4
 800b15a:	f859 4b04 	ldr.w	r4, [r9], #4
 800b15e:	fa1c f18a 	uxtah	r1, ip, sl
 800b162:	b2a3      	uxth	r3, r4
 800b164:	1ac9      	subs	r1, r1, r3
 800b166:	0c23      	lsrs	r3, r4, #16
 800b168:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b16c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b170:	b289      	uxth	r1, r1
 800b172:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b176:	45c8      	cmp	r8, r9
 800b178:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b17c:	4696      	mov	lr, r2
 800b17e:	f845 3b04 	str.w	r3, [r5], #4
 800b182:	d8e8      	bhi.n	800b156 <__mdiff+0x5c>
 800b184:	45be      	cmp	lr, r7
 800b186:	d305      	bcc.n	800b194 <__mdiff+0x9a>
 800b188:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b18c:	b18b      	cbz	r3, 800b1b2 <__mdiff+0xb8>
 800b18e:	6106      	str	r6, [r0, #16]
 800b190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b194:	f85e 1b04 	ldr.w	r1, [lr], #4
 800b198:	fa1c f381 	uxtah	r3, ip, r1
 800b19c:	141a      	asrs	r2, r3, #16
 800b19e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b1ac:	f845 3b04 	str.w	r3, [r5], #4
 800b1b0:	e7e8      	b.n	800b184 <__mdiff+0x8a>
 800b1b2:	3e01      	subs	r6, #1
 800b1b4:	e7e8      	b.n	800b188 <__mdiff+0x8e>

0800b1b6 <__d2b>:
 800b1b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1ba:	460e      	mov	r6, r1
 800b1bc:	2101      	movs	r1, #1
 800b1be:	ec59 8b10 	vmov	r8, r9, d0
 800b1c2:	4615      	mov	r5, r2
 800b1c4:	f7ff fd76 	bl	800acb4 <_Balloc>
 800b1c8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b1cc:	4607      	mov	r7, r0
 800b1ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1d2:	bb34      	cbnz	r4, 800b222 <__d2b+0x6c>
 800b1d4:	9301      	str	r3, [sp, #4]
 800b1d6:	f1b8 0f00 	cmp.w	r8, #0
 800b1da:	d027      	beq.n	800b22c <__d2b+0x76>
 800b1dc:	a802      	add	r0, sp, #8
 800b1de:	f840 8d08 	str.w	r8, [r0, #-8]!
 800b1e2:	f7ff fe0c 	bl	800adfe <__lo0bits>
 800b1e6:	9900      	ldr	r1, [sp, #0]
 800b1e8:	b1f0      	cbz	r0, 800b228 <__d2b+0x72>
 800b1ea:	9a01      	ldr	r2, [sp, #4]
 800b1ec:	f1c0 0320 	rsb	r3, r0, #32
 800b1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f4:	430b      	orrs	r3, r1
 800b1f6:	40c2      	lsrs	r2, r0
 800b1f8:	617b      	str	r3, [r7, #20]
 800b1fa:	9201      	str	r2, [sp, #4]
 800b1fc:	9b01      	ldr	r3, [sp, #4]
 800b1fe:	61bb      	str	r3, [r7, #24]
 800b200:	2b00      	cmp	r3, #0
 800b202:	bf14      	ite	ne
 800b204:	2102      	movne	r1, #2
 800b206:	2101      	moveq	r1, #1
 800b208:	6139      	str	r1, [r7, #16]
 800b20a:	b1c4      	cbz	r4, 800b23e <__d2b+0x88>
 800b20c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b210:	4404      	add	r4, r0
 800b212:	6034      	str	r4, [r6, #0]
 800b214:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b218:	6028      	str	r0, [r5, #0]
 800b21a:	4638      	mov	r0, r7
 800b21c:	b003      	add	sp, #12
 800b21e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b226:	e7d5      	b.n	800b1d4 <__d2b+0x1e>
 800b228:	6179      	str	r1, [r7, #20]
 800b22a:	e7e7      	b.n	800b1fc <__d2b+0x46>
 800b22c:	a801      	add	r0, sp, #4
 800b22e:	f7ff fde6 	bl	800adfe <__lo0bits>
 800b232:	9b01      	ldr	r3, [sp, #4]
 800b234:	617b      	str	r3, [r7, #20]
 800b236:	2101      	movs	r1, #1
 800b238:	6139      	str	r1, [r7, #16]
 800b23a:	3020      	adds	r0, #32
 800b23c:	e7e5      	b.n	800b20a <__d2b+0x54>
 800b23e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b242:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b246:	6030      	str	r0, [r6, #0]
 800b248:	6918      	ldr	r0, [r3, #16]
 800b24a:	f7ff fdb9 	bl	800adc0 <__hi0bits>
 800b24e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b252:	e7e1      	b.n	800b218 <__d2b+0x62>

0800b254 <_free_r>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	4605      	mov	r5, r0
 800b258:	2900      	cmp	r1, #0
 800b25a:	d045      	beq.n	800b2e8 <_free_r+0x94>
 800b25c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b260:	1f0c      	subs	r4, r1, #4
 800b262:	2b00      	cmp	r3, #0
 800b264:	bfb8      	it	lt
 800b266:	18e4      	addlt	r4, r4, r3
 800b268:	f7ff fd22 	bl	800acb0 <__malloc_lock>
 800b26c:	4a1f      	ldr	r2, [pc, #124]	; (800b2ec <_free_r+0x98>)
 800b26e:	6813      	ldr	r3, [r2, #0]
 800b270:	4610      	mov	r0, r2
 800b272:	b933      	cbnz	r3, 800b282 <_free_r+0x2e>
 800b274:	6063      	str	r3, [r4, #4]
 800b276:	6014      	str	r4, [r2, #0]
 800b278:	4628      	mov	r0, r5
 800b27a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b27e:	f7ff bd18 	b.w	800acb2 <__malloc_unlock>
 800b282:	42a3      	cmp	r3, r4
 800b284:	d90c      	bls.n	800b2a0 <_free_r+0x4c>
 800b286:	6821      	ldr	r1, [r4, #0]
 800b288:	1862      	adds	r2, r4, r1
 800b28a:	4293      	cmp	r3, r2
 800b28c:	bf04      	itt	eq
 800b28e:	681a      	ldreq	r2, [r3, #0]
 800b290:	685b      	ldreq	r3, [r3, #4]
 800b292:	6063      	str	r3, [r4, #4]
 800b294:	bf04      	itt	eq
 800b296:	1852      	addeq	r2, r2, r1
 800b298:	6022      	streq	r2, [r4, #0]
 800b29a:	6004      	str	r4, [r0, #0]
 800b29c:	e7ec      	b.n	800b278 <_free_r+0x24>
 800b29e:	4613      	mov	r3, r2
 800b2a0:	685a      	ldr	r2, [r3, #4]
 800b2a2:	b10a      	cbz	r2, 800b2a8 <_free_r+0x54>
 800b2a4:	42a2      	cmp	r2, r4
 800b2a6:	d9fa      	bls.n	800b29e <_free_r+0x4a>
 800b2a8:	6819      	ldr	r1, [r3, #0]
 800b2aa:	1858      	adds	r0, r3, r1
 800b2ac:	42a0      	cmp	r0, r4
 800b2ae:	d10b      	bne.n	800b2c8 <_free_r+0x74>
 800b2b0:	6820      	ldr	r0, [r4, #0]
 800b2b2:	4401      	add	r1, r0
 800b2b4:	1858      	adds	r0, r3, r1
 800b2b6:	4282      	cmp	r2, r0
 800b2b8:	6019      	str	r1, [r3, #0]
 800b2ba:	d1dd      	bne.n	800b278 <_free_r+0x24>
 800b2bc:	6810      	ldr	r0, [r2, #0]
 800b2be:	6852      	ldr	r2, [r2, #4]
 800b2c0:	605a      	str	r2, [r3, #4]
 800b2c2:	4401      	add	r1, r0
 800b2c4:	6019      	str	r1, [r3, #0]
 800b2c6:	e7d7      	b.n	800b278 <_free_r+0x24>
 800b2c8:	d902      	bls.n	800b2d0 <_free_r+0x7c>
 800b2ca:	230c      	movs	r3, #12
 800b2cc:	602b      	str	r3, [r5, #0]
 800b2ce:	e7d3      	b.n	800b278 <_free_r+0x24>
 800b2d0:	6820      	ldr	r0, [r4, #0]
 800b2d2:	1821      	adds	r1, r4, r0
 800b2d4:	428a      	cmp	r2, r1
 800b2d6:	bf04      	itt	eq
 800b2d8:	6811      	ldreq	r1, [r2, #0]
 800b2da:	6852      	ldreq	r2, [r2, #4]
 800b2dc:	6062      	str	r2, [r4, #4]
 800b2de:	bf04      	itt	eq
 800b2e0:	1809      	addeq	r1, r1, r0
 800b2e2:	6021      	streq	r1, [r4, #0]
 800b2e4:	605c      	str	r4, [r3, #4]
 800b2e6:	e7c7      	b.n	800b278 <_free_r+0x24>
 800b2e8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ea:	bf00      	nop
 800b2ec:	2000cf48 	.word	0x2000cf48

0800b2f0 <__sfputc_r>:
 800b2f0:	6893      	ldr	r3, [r2, #8]
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	b410      	push	{r4}
 800b2f8:	6093      	str	r3, [r2, #8]
 800b2fa:	da09      	bge.n	800b310 <__sfputc_r+0x20>
 800b2fc:	6994      	ldr	r4, [r2, #24]
 800b2fe:	42a3      	cmp	r3, r4
 800b300:	db02      	blt.n	800b308 <__sfputc_r+0x18>
 800b302:	b2cb      	uxtb	r3, r1
 800b304:	2b0a      	cmp	r3, #10
 800b306:	d103      	bne.n	800b310 <__sfputc_r+0x20>
 800b308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b30c:	f7fe bbbe 	b.w	8009a8c <__swbuf_r>
 800b310:	6813      	ldr	r3, [r2, #0]
 800b312:	1c58      	adds	r0, r3, #1
 800b314:	6010      	str	r0, [r2, #0]
 800b316:	7019      	strb	r1, [r3, #0]
 800b318:	b2c8      	uxtb	r0, r1
 800b31a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <__sfputs_r>:
 800b320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b322:	4606      	mov	r6, r0
 800b324:	460f      	mov	r7, r1
 800b326:	4614      	mov	r4, r2
 800b328:	18d5      	adds	r5, r2, r3
 800b32a:	42ac      	cmp	r4, r5
 800b32c:	d101      	bne.n	800b332 <__sfputs_r+0x12>
 800b32e:	2000      	movs	r0, #0
 800b330:	e007      	b.n	800b342 <__sfputs_r+0x22>
 800b332:	463a      	mov	r2, r7
 800b334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b338:	4630      	mov	r0, r6
 800b33a:	f7ff ffd9 	bl	800b2f0 <__sfputc_r>
 800b33e:	1c43      	adds	r3, r0, #1
 800b340:	d1f3      	bne.n	800b32a <__sfputs_r+0xa>
 800b342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b344 <_vfiprintf_r>:
 800b344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b348:	b09d      	sub	sp, #116	; 0x74
 800b34a:	460c      	mov	r4, r1
 800b34c:	4617      	mov	r7, r2
 800b34e:	9303      	str	r3, [sp, #12]
 800b350:	4606      	mov	r6, r0
 800b352:	b118      	cbz	r0, 800b35c <_vfiprintf_r+0x18>
 800b354:	6983      	ldr	r3, [r0, #24]
 800b356:	b90b      	cbnz	r3, 800b35c <_vfiprintf_r+0x18>
 800b358:	f7ff fba6 	bl	800aaa8 <__sinit>
 800b35c:	4b7c      	ldr	r3, [pc, #496]	; (800b550 <_vfiprintf_r+0x20c>)
 800b35e:	429c      	cmp	r4, r3
 800b360:	d157      	bne.n	800b412 <_vfiprintf_r+0xce>
 800b362:	6874      	ldr	r4, [r6, #4]
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	0718      	lsls	r0, r3, #28
 800b368:	d55d      	bpl.n	800b426 <_vfiprintf_r+0xe2>
 800b36a:	6923      	ldr	r3, [r4, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d05a      	beq.n	800b426 <_vfiprintf_r+0xe2>
 800b370:	2300      	movs	r3, #0
 800b372:	9309      	str	r3, [sp, #36]	; 0x24
 800b374:	2320      	movs	r3, #32
 800b376:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b37a:	2330      	movs	r3, #48	; 0x30
 800b37c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b380:	f04f 0b01 	mov.w	fp, #1
 800b384:	46b8      	mov	r8, r7
 800b386:	4645      	mov	r5, r8
 800b388:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d155      	bne.n	800b43c <_vfiprintf_r+0xf8>
 800b390:	ebb8 0a07 	subs.w	sl, r8, r7
 800b394:	d00b      	beq.n	800b3ae <_vfiprintf_r+0x6a>
 800b396:	4653      	mov	r3, sl
 800b398:	463a      	mov	r2, r7
 800b39a:	4621      	mov	r1, r4
 800b39c:	4630      	mov	r0, r6
 800b39e:	f7ff ffbf 	bl	800b320 <__sfputs_r>
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	f000 80c4 	beq.w	800b530 <_vfiprintf_r+0x1ec>
 800b3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3aa:	4453      	add	r3, sl
 800b3ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ae:	f898 3000 	ldrb.w	r3, [r8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f000 80bc 	beq.w	800b530 <_vfiprintf_r+0x1ec>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b3be:	9304      	str	r3, [sp, #16]
 800b3c0:	9307      	str	r3, [sp, #28]
 800b3c2:	9205      	str	r2, [sp, #20]
 800b3c4:	9306      	str	r3, [sp, #24]
 800b3c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3ca:	931a      	str	r3, [sp, #104]	; 0x68
 800b3cc:	2205      	movs	r2, #5
 800b3ce:	7829      	ldrb	r1, [r5, #0]
 800b3d0:	4860      	ldr	r0, [pc, #384]	; (800b554 <_vfiprintf_r+0x210>)
 800b3d2:	f7f7 f9f5 	bl	80027c0 <memchr>
 800b3d6:	f105 0801 	add.w	r8, r5, #1
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d131      	bne.n	800b444 <_vfiprintf_r+0x100>
 800b3e0:	06d9      	lsls	r1, r3, #27
 800b3e2:	bf44      	itt	mi
 800b3e4:	2220      	movmi	r2, #32
 800b3e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b3ea:	071a      	lsls	r2, r3, #28
 800b3ec:	bf44      	itt	mi
 800b3ee:	222b      	movmi	r2, #43	; 0x2b
 800b3f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b3f4:	782a      	ldrb	r2, [r5, #0]
 800b3f6:	2a2a      	cmp	r2, #42	; 0x2a
 800b3f8:	d02c      	beq.n	800b454 <_vfiprintf_r+0x110>
 800b3fa:	9a07      	ldr	r2, [sp, #28]
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	200a      	movs	r0, #10
 800b400:	46a8      	mov	r8, r5
 800b402:	3501      	adds	r5, #1
 800b404:	f898 3000 	ldrb.w	r3, [r8]
 800b408:	3b30      	subs	r3, #48	; 0x30
 800b40a:	2b09      	cmp	r3, #9
 800b40c:	d96d      	bls.n	800b4ea <_vfiprintf_r+0x1a6>
 800b40e:	b371      	cbz	r1, 800b46e <_vfiprintf_r+0x12a>
 800b410:	e026      	b.n	800b460 <_vfiprintf_r+0x11c>
 800b412:	4b51      	ldr	r3, [pc, #324]	; (800b558 <_vfiprintf_r+0x214>)
 800b414:	429c      	cmp	r4, r3
 800b416:	d101      	bne.n	800b41c <_vfiprintf_r+0xd8>
 800b418:	68b4      	ldr	r4, [r6, #8]
 800b41a:	e7a3      	b.n	800b364 <_vfiprintf_r+0x20>
 800b41c:	4b4f      	ldr	r3, [pc, #316]	; (800b55c <_vfiprintf_r+0x218>)
 800b41e:	429c      	cmp	r4, r3
 800b420:	bf08      	it	eq
 800b422:	68f4      	ldreq	r4, [r6, #12]
 800b424:	e79e      	b.n	800b364 <_vfiprintf_r+0x20>
 800b426:	4621      	mov	r1, r4
 800b428:	4630      	mov	r0, r6
 800b42a:	f7fe fb81 	bl	8009b30 <__swsetup_r>
 800b42e:	2800      	cmp	r0, #0
 800b430:	d09e      	beq.n	800b370 <_vfiprintf_r+0x2c>
 800b432:	f04f 30ff 	mov.w	r0, #4294967295
 800b436:	b01d      	add	sp, #116	; 0x74
 800b438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43c:	2b25      	cmp	r3, #37	; 0x25
 800b43e:	d0a7      	beq.n	800b390 <_vfiprintf_r+0x4c>
 800b440:	46a8      	mov	r8, r5
 800b442:	e7a0      	b.n	800b386 <_vfiprintf_r+0x42>
 800b444:	4a43      	ldr	r2, [pc, #268]	; (800b554 <_vfiprintf_r+0x210>)
 800b446:	1a80      	subs	r0, r0, r2
 800b448:	fa0b f000 	lsl.w	r0, fp, r0
 800b44c:	4318      	orrs	r0, r3
 800b44e:	9004      	str	r0, [sp, #16]
 800b450:	4645      	mov	r5, r8
 800b452:	e7bb      	b.n	800b3cc <_vfiprintf_r+0x88>
 800b454:	9a03      	ldr	r2, [sp, #12]
 800b456:	1d11      	adds	r1, r2, #4
 800b458:	6812      	ldr	r2, [r2, #0]
 800b45a:	9103      	str	r1, [sp, #12]
 800b45c:	2a00      	cmp	r2, #0
 800b45e:	db01      	blt.n	800b464 <_vfiprintf_r+0x120>
 800b460:	9207      	str	r2, [sp, #28]
 800b462:	e004      	b.n	800b46e <_vfiprintf_r+0x12a>
 800b464:	4252      	negs	r2, r2
 800b466:	f043 0302 	orr.w	r3, r3, #2
 800b46a:	9207      	str	r2, [sp, #28]
 800b46c:	9304      	str	r3, [sp, #16]
 800b46e:	f898 3000 	ldrb.w	r3, [r8]
 800b472:	2b2e      	cmp	r3, #46	; 0x2e
 800b474:	d110      	bne.n	800b498 <_vfiprintf_r+0x154>
 800b476:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b47a:	2b2a      	cmp	r3, #42	; 0x2a
 800b47c:	f108 0101 	add.w	r1, r8, #1
 800b480:	d137      	bne.n	800b4f2 <_vfiprintf_r+0x1ae>
 800b482:	9b03      	ldr	r3, [sp, #12]
 800b484:	1d1a      	adds	r2, r3, #4
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	9203      	str	r2, [sp, #12]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	bfb8      	it	lt
 800b48e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b492:	f108 0802 	add.w	r8, r8, #2
 800b496:	9305      	str	r3, [sp, #20]
 800b498:	4d31      	ldr	r5, [pc, #196]	; (800b560 <_vfiprintf_r+0x21c>)
 800b49a:	f898 1000 	ldrb.w	r1, [r8]
 800b49e:	2203      	movs	r2, #3
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	f7f7 f98d 	bl	80027c0 <memchr>
 800b4a6:	b140      	cbz	r0, 800b4ba <_vfiprintf_r+0x176>
 800b4a8:	2340      	movs	r3, #64	; 0x40
 800b4aa:	1b40      	subs	r0, r0, r5
 800b4ac:	fa03 f000 	lsl.w	r0, r3, r0
 800b4b0:	9b04      	ldr	r3, [sp, #16]
 800b4b2:	4303      	orrs	r3, r0
 800b4b4:	9304      	str	r3, [sp, #16]
 800b4b6:	f108 0801 	add.w	r8, r8, #1
 800b4ba:	f898 1000 	ldrb.w	r1, [r8]
 800b4be:	4829      	ldr	r0, [pc, #164]	; (800b564 <_vfiprintf_r+0x220>)
 800b4c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4c4:	2206      	movs	r2, #6
 800b4c6:	f108 0701 	add.w	r7, r8, #1
 800b4ca:	f7f7 f979 	bl	80027c0 <memchr>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d034      	beq.n	800b53c <_vfiprintf_r+0x1f8>
 800b4d2:	4b25      	ldr	r3, [pc, #148]	; (800b568 <_vfiprintf_r+0x224>)
 800b4d4:	bb03      	cbnz	r3, 800b518 <_vfiprintf_r+0x1d4>
 800b4d6:	9b03      	ldr	r3, [sp, #12]
 800b4d8:	3307      	adds	r3, #7
 800b4da:	f023 0307 	bic.w	r3, r3, #7
 800b4de:	3308      	adds	r3, #8
 800b4e0:	9303      	str	r3, [sp, #12]
 800b4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e4:	444b      	add	r3, r9
 800b4e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4e8:	e74c      	b.n	800b384 <_vfiprintf_r+0x40>
 800b4ea:	fb00 3202 	mla	r2, r0, r2, r3
 800b4ee:	2101      	movs	r1, #1
 800b4f0:	e786      	b.n	800b400 <_vfiprintf_r+0xbc>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9305      	str	r3, [sp, #20]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	250a      	movs	r5, #10
 800b4fa:	4688      	mov	r8, r1
 800b4fc:	3101      	adds	r1, #1
 800b4fe:	f898 2000 	ldrb.w	r2, [r8]
 800b502:	3a30      	subs	r2, #48	; 0x30
 800b504:	2a09      	cmp	r2, #9
 800b506:	d903      	bls.n	800b510 <_vfiprintf_r+0x1cc>
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d0c5      	beq.n	800b498 <_vfiprintf_r+0x154>
 800b50c:	9005      	str	r0, [sp, #20]
 800b50e:	e7c3      	b.n	800b498 <_vfiprintf_r+0x154>
 800b510:	fb05 2000 	mla	r0, r5, r0, r2
 800b514:	2301      	movs	r3, #1
 800b516:	e7f0      	b.n	800b4fa <_vfiprintf_r+0x1b6>
 800b518:	ab03      	add	r3, sp, #12
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	4622      	mov	r2, r4
 800b51e:	4b13      	ldr	r3, [pc, #76]	; (800b56c <_vfiprintf_r+0x228>)
 800b520:	a904      	add	r1, sp, #16
 800b522:	4630      	mov	r0, r6
 800b524:	f7fd fe00 	bl	8009128 <_printf_float>
 800b528:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b52c:	4681      	mov	r9, r0
 800b52e:	d1d8      	bne.n	800b4e2 <_vfiprintf_r+0x19e>
 800b530:	89a3      	ldrh	r3, [r4, #12]
 800b532:	065b      	lsls	r3, r3, #25
 800b534:	f53f af7d 	bmi.w	800b432 <_vfiprintf_r+0xee>
 800b538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b53a:	e77c      	b.n	800b436 <_vfiprintf_r+0xf2>
 800b53c:	ab03      	add	r3, sp, #12
 800b53e:	9300      	str	r3, [sp, #0]
 800b540:	4622      	mov	r2, r4
 800b542:	4b0a      	ldr	r3, [pc, #40]	; (800b56c <_vfiprintf_r+0x228>)
 800b544:	a904      	add	r1, sp, #16
 800b546:	4630      	mov	r0, r6
 800b548:	f7fe f8a4 	bl	8009694 <_printf_i>
 800b54c:	e7ec      	b.n	800b528 <_vfiprintf_r+0x1e4>
 800b54e:	bf00      	nop
 800b550:	0802421c 	.word	0x0802421c
 800b554:	0802435c 	.word	0x0802435c
 800b558:	0802423c 	.word	0x0802423c
 800b55c:	080241fc 	.word	0x080241fc
 800b560:	08024362 	.word	0x08024362
 800b564:	08024366 	.word	0x08024366
 800b568:	08009129 	.word	0x08009129
 800b56c:	0800b321 	.word	0x0800b321

0800b570 <_putc_r>:
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	460d      	mov	r5, r1
 800b574:	4614      	mov	r4, r2
 800b576:	4606      	mov	r6, r0
 800b578:	b118      	cbz	r0, 800b582 <_putc_r+0x12>
 800b57a:	6983      	ldr	r3, [r0, #24]
 800b57c:	b90b      	cbnz	r3, 800b582 <_putc_r+0x12>
 800b57e:	f7ff fa93 	bl	800aaa8 <__sinit>
 800b582:	4b13      	ldr	r3, [pc, #76]	; (800b5d0 <_putc_r+0x60>)
 800b584:	429c      	cmp	r4, r3
 800b586:	d112      	bne.n	800b5ae <_putc_r+0x3e>
 800b588:	6874      	ldr	r4, [r6, #4]
 800b58a:	68a3      	ldr	r3, [r4, #8]
 800b58c:	3b01      	subs	r3, #1
 800b58e:	2b00      	cmp	r3, #0
 800b590:	60a3      	str	r3, [r4, #8]
 800b592:	da16      	bge.n	800b5c2 <_putc_r+0x52>
 800b594:	69a2      	ldr	r2, [r4, #24]
 800b596:	4293      	cmp	r3, r2
 800b598:	db02      	blt.n	800b5a0 <_putc_r+0x30>
 800b59a:	b2eb      	uxtb	r3, r5
 800b59c:	2b0a      	cmp	r3, #10
 800b59e:	d110      	bne.n	800b5c2 <_putc_r+0x52>
 800b5a0:	4622      	mov	r2, r4
 800b5a2:	4629      	mov	r1, r5
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5aa:	f7fe ba6f 	b.w	8009a8c <__swbuf_r>
 800b5ae:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <_putc_r+0x64>)
 800b5b0:	429c      	cmp	r4, r3
 800b5b2:	d101      	bne.n	800b5b8 <_putc_r+0x48>
 800b5b4:	68b4      	ldr	r4, [r6, #8]
 800b5b6:	e7e8      	b.n	800b58a <_putc_r+0x1a>
 800b5b8:	4b07      	ldr	r3, [pc, #28]	; (800b5d8 <_putc_r+0x68>)
 800b5ba:	429c      	cmp	r4, r3
 800b5bc:	bf08      	it	eq
 800b5be:	68f4      	ldreq	r4, [r6, #12]
 800b5c0:	e7e3      	b.n	800b58a <_putc_r+0x1a>
 800b5c2:	6823      	ldr	r3, [r4, #0]
 800b5c4:	1c5a      	adds	r2, r3, #1
 800b5c6:	6022      	str	r2, [r4, #0]
 800b5c8:	701d      	strb	r5, [r3, #0]
 800b5ca:	b2e8      	uxtb	r0, r5
 800b5cc:	bd70      	pop	{r4, r5, r6, pc}
 800b5ce:	bf00      	nop
 800b5d0:	0802421c 	.word	0x0802421c
 800b5d4:	0802423c 	.word	0x0802423c
 800b5d8:	080241fc 	.word	0x080241fc

0800b5dc <__sread>:
 800b5dc:	b510      	push	{r4, lr}
 800b5de:	460c      	mov	r4, r1
 800b5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e4:	f000 f8a6 	bl	800b734 <_read_r>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	bfab      	itete	ge
 800b5ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5ee:	89a3      	ldrhlt	r3, [r4, #12]
 800b5f0:	181b      	addge	r3, r3, r0
 800b5f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5f6:	bfac      	ite	ge
 800b5f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5fa:	81a3      	strhlt	r3, [r4, #12]
 800b5fc:	bd10      	pop	{r4, pc}

0800b5fe <__swrite>:
 800b5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b602:	461f      	mov	r7, r3
 800b604:	898b      	ldrh	r3, [r1, #12]
 800b606:	05db      	lsls	r3, r3, #23
 800b608:	4605      	mov	r5, r0
 800b60a:	460c      	mov	r4, r1
 800b60c:	4616      	mov	r6, r2
 800b60e:	d505      	bpl.n	800b61c <__swrite+0x1e>
 800b610:	2302      	movs	r3, #2
 800b612:	2200      	movs	r2, #0
 800b614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b618:	f000 f868 	bl	800b6ec <_lseek_r>
 800b61c:	89a3      	ldrh	r3, [r4, #12]
 800b61e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b626:	81a3      	strh	r3, [r4, #12]
 800b628:	4632      	mov	r2, r6
 800b62a:	463b      	mov	r3, r7
 800b62c:	4628      	mov	r0, r5
 800b62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b632:	f000 b817 	b.w	800b664 <_write_r>

0800b636 <__sseek>:
 800b636:	b510      	push	{r4, lr}
 800b638:	460c      	mov	r4, r1
 800b63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b63e:	f000 f855 	bl	800b6ec <_lseek_r>
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	bf15      	itete	ne
 800b648:	6560      	strne	r0, [r4, #84]	; 0x54
 800b64a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b64e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b652:	81a3      	strheq	r3, [r4, #12]
 800b654:	bf18      	it	ne
 800b656:	81a3      	strhne	r3, [r4, #12]
 800b658:	bd10      	pop	{r4, pc}

0800b65a <__sclose>:
 800b65a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b65e:	f000 b813 	b.w	800b688 <_close_r>
	...

0800b664 <_write_r>:
 800b664:	b538      	push	{r3, r4, r5, lr}
 800b666:	4c07      	ldr	r4, [pc, #28]	; (800b684 <_write_r+0x20>)
 800b668:	4605      	mov	r5, r0
 800b66a:	4608      	mov	r0, r1
 800b66c:	4611      	mov	r1, r2
 800b66e:	2200      	movs	r2, #0
 800b670:	6022      	str	r2, [r4, #0]
 800b672:	461a      	mov	r2, r3
 800b674:	f7fb fdb8 	bl	80071e8 <_write>
 800b678:	1c43      	adds	r3, r0, #1
 800b67a:	d102      	bne.n	800b682 <_write_r+0x1e>
 800b67c:	6823      	ldr	r3, [r4, #0]
 800b67e:	b103      	cbz	r3, 800b682 <_write_r+0x1e>
 800b680:	602b      	str	r3, [r5, #0]
 800b682:	bd38      	pop	{r3, r4, r5, pc}
 800b684:	2000fbdc 	.word	0x2000fbdc

0800b688 <_close_r>:
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	4c06      	ldr	r4, [pc, #24]	; (800b6a4 <_close_r+0x1c>)
 800b68c:	2300      	movs	r3, #0
 800b68e:	4605      	mov	r5, r0
 800b690:	4608      	mov	r0, r1
 800b692:	6023      	str	r3, [r4, #0]
 800b694:	f002 fcc8 	bl	800e028 <_close>
 800b698:	1c43      	adds	r3, r0, #1
 800b69a:	d102      	bne.n	800b6a2 <_close_r+0x1a>
 800b69c:	6823      	ldr	r3, [r4, #0]
 800b69e:	b103      	cbz	r3, 800b6a2 <_close_r+0x1a>
 800b6a0:	602b      	str	r3, [r5, #0]
 800b6a2:	bd38      	pop	{r3, r4, r5, pc}
 800b6a4:	2000fbdc 	.word	0x2000fbdc

0800b6a8 <_fstat_r>:
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	4c07      	ldr	r4, [pc, #28]	; (800b6c8 <_fstat_r+0x20>)
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	4608      	mov	r0, r1
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	f002 fcbf 	bl	800e038 <_fstat>
 800b6ba:	1c43      	adds	r3, r0, #1
 800b6bc:	d102      	bne.n	800b6c4 <_fstat_r+0x1c>
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	b103      	cbz	r3, 800b6c4 <_fstat_r+0x1c>
 800b6c2:	602b      	str	r3, [r5, #0]
 800b6c4:	bd38      	pop	{r3, r4, r5, pc}
 800b6c6:	bf00      	nop
 800b6c8:	2000fbdc 	.word	0x2000fbdc

0800b6cc <_isatty_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4c06      	ldr	r4, [pc, #24]	; (800b6e8 <_isatty_r+0x1c>)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	4605      	mov	r5, r0
 800b6d4:	4608      	mov	r0, r1
 800b6d6:	6023      	str	r3, [r4, #0]
 800b6d8:	f002 fcb6 	bl	800e048 <_isatty>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d102      	bne.n	800b6e6 <_isatty_r+0x1a>
 800b6e0:	6823      	ldr	r3, [r4, #0]
 800b6e2:	b103      	cbz	r3, 800b6e6 <_isatty_r+0x1a>
 800b6e4:	602b      	str	r3, [r5, #0]
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	2000fbdc 	.word	0x2000fbdc

0800b6ec <_lseek_r>:
 800b6ec:	b538      	push	{r3, r4, r5, lr}
 800b6ee:	4c07      	ldr	r4, [pc, #28]	; (800b70c <_lseek_r+0x20>)
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	4608      	mov	r0, r1
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	6022      	str	r2, [r4, #0]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	f002 fcac 	bl	800e058 <_lseek>
 800b700:	1c43      	adds	r3, r0, #1
 800b702:	d102      	bne.n	800b70a <_lseek_r+0x1e>
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	b103      	cbz	r3, 800b70a <_lseek_r+0x1e>
 800b708:	602b      	str	r3, [r5, #0]
 800b70a:	bd38      	pop	{r3, r4, r5, pc}
 800b70c:	2000fbdc 	.word	0x2000fbdc

0800b710 <__ascii_mbtowc>:
 800b710:	b082      	sub	sp, #8
 800b712:	b901      	cbnz	r1, 800b716 <__ascii_mbtowc+0x6>
 800b714:	a901      	add	r1, sp, #4
 800b716:	b142      	cbz	r2, 800b72a <__ascii_mbtowc+0x1a>
 800b718:	b14b      	cbz	r3, 800b72e <__ascii_mbtowc+0x1e>
 800b71a:	7813      	ldrb	r3, [r2, #0]
 800b71c:	600b      	str	r3, [r1, #0]
 800b71e:	7812      	ldrb	r2, [r2, #0]
 800b720:	1c10      	adds	r0, r2, #0
 800b722:	bf18      	it	ne
 800b724:	2001      	movne	r0, #1
 800b726:	b002      	add	sp, #8
 800b728:	4770      	bx	lr
 800b72a:	4610      	mov	r0, r2
 800b72c:	e7fb      	b.n	800b726 <__ascii_mbtowc+0x16>
 800b72e:	f06f 0001 	mvn.w	r0, #1
 800b732:	e7f8      	b.n	800b726 <__ascii_mbtowc+0x16>

0800b734 <_read_r>:
 800b734:	b538      	push	{r3, r4, r5, lr}
 800b736:	4c07      	ldr	r4, [pc, #28]	; (800b754 <_read_r+0x20>)
 800b738:	4605      	mov	r5, r0
 800b73a:	4608      	mov	r0, r1
 800b73c:	4611      	mov	r1, r2
 800b73e:	2200      	movs	r2, #0
 800b740:	6022      	str	r2, [r4, #0]
 800b742:	461a      	mov	r2, r3
 800b744:	f002 fc90 	bl	800e068 <_read>
 800b748:	1c43      	adds	r3, r0, #1
 800b74a:	d102      	bne.n	800b752 <_read_r+0x1e>
 800b74c:	6823      	ldr	r3, [r4, #0]
 800b74e:	b103      	cbz	r3, 800b752 <_read_r+0x1e>
 800b750:	602b      	str	r3, [r5, #0]
 800b752:	bd38      	pop	{r3, r4, r5, pc}
 800b754:	2000fbdc 	.word	0x2000fbdc

0800b758 <__ascii_wctomb>:
 800b758:	b149      	cbz	r1, 800b76e <__ascii_wctomb+0x16>
 800b75a:	2aff      	cmp	r2, #255	; 0xff
 800b75c:	bf85      	ittet	hi
 800b75e:	238a      	movhi	r3, #138	; 0x8a
 800b760:	6003      	strhi	r3, [r0, #0]
 800b762:	700a      	strbls	r2, [r1, #0]
 800b764:	f04f 30ff 	movhi.w	r0, #4294967295
 800b768:	bf98      	it	ls
 800b76a:	2001      	movls	r0, #1
 800b76c:	4770      	bx	lr
 800b76e:	4608      	mov	r0, r1
 800b770:	4770      	bx	lr
 800b772:	0000      	movs	r0, r0
 800b774:	0000      	movs	r0, r0
	...

0800b778 <floor>:
 800b778:	ec51 0b10 	vmov	r0, r1, d0
 800b77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b780:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b784:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b788:	2e13      	cmp	r6, #19
 800b78a:	ee10 8a10 	vmov	r8, s0
 800b78e:	460c      	mov	r4, r1
 800b790:	ee10 5a10 	vmov	r5, s0
 800b794:	dc35      	bgt.n	800b802 <floor+0x8a>
 800b796:	2e00      	cmp	r6, #0
 800b798:	da17      	bge.n	800b7ca <floor+0x52>
 800b79a:	a335      	add	r3, pc, #212	; (adr r3, 800b870 <floor+0xf8>)
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	f7f7 f864 	bl	800286c <__adddf3>
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	f7f7 fca2 	bl	80030f0 <__aeabi_dcmpgt>
 800b7ac:	b150      	cbz	r0, 800b7c4 <floor+0x4c>
 800b7ae:	2c00      	cmp	r4, #0
 800b7b0:	da5a      	bge.n	800b868 <floor+0xf0>
 800b7b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b7b6:	ea53 0308 	orrs.w	r3, r3, r8
 800b7ba:	4b2f      	ldr	r3, [pc, #188]	; (800b878 <floor+0x100>)
 800b7bc:	f04f 0500 	mov.w	r5, #0
 800b7c0:	bf18      	it	ne
 800b7c2:	461c      	movne	r4, r3
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	e025      	b.n	800b816 <floor+0x9e>
 800b7ca:	4f2c      	ldr	r7, [pc, #176]	; (800b87c <floor+0x104>)
 800b7cc:	4137      	asrs	r7, r6
 800b7ce:	ea01 0307 	and.w	r3, r1, r7
 800b7d2:	4303      	orrs	r3, r0
 800b7d4:	d01f      	beq.n	800b816 <floor+0x9e>
 800b7d6:	a326      	add	r3, pc, #152	; (adr r3, 800b870 <floor+0xf8>)
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f7f7 f846 	bl	800286c <__adddf3>
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	f7f7 fc84 	bl	80030f0 <__aeabi_dcmpgt>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d0eb      	beq.n	800b7c4 <floor+0x4c>
 800b7ec:	2c00      	cmp	r4, #0
 800b7ee:	bfbe      	ittt	lt
 800b7f0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b7f4:	fa43 f606 	asrlt.w	r6, r3, r6
 800b7f8:	19a4      	addlt	r4, r4, r6
 800b7fa:	ea24 0407 	bic.w	r4, r4, r7
 800b7fe:	2500      	movs	r5, #0
 800b800:	e7e0      	b.n	800b7c4 <floor+0x4c>
 800b802:	2e33      	cmp	r6, #51	; 0x33
 800b804:	dd0b      	ble.n	800b81e <floor+0xa6>
 800b806:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b80a:	d104      	bne.n	800b816 <floor+0x9e>
 800b80c:	ee10 2a10 	vmov	r2, s0
 800b810:	460b      	mov	r3, r1
 800b812:	f7f7 f82b 	bl	800286c <__adddf3>
 800b816:	ec41 0b10 	vmov	d0, r0, r1
 800b81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b81e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b822:	f04f 33ff 	mov.w	r3, #4294967295
 800b826:	fa23 f707 	lsr.w	r7, r3, r7
 800b82a:	4238      	tst	r0, r7
 800b82c:	d0f3      	beq.n	800b816 <floor+0x9e>
 800b82e:	a310      	add	r3, pc, #64	; (adr r3, 800b870 <floor+0xf8>)
 800b830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b834:	f7f7 f81a 	bl	800286c <__adddf3>
 800b838:	2200      	movs	r2, #0
 800b83a:	2300      	movs	r3, #0
 800b83c:	f7f7 fc58 	bl	80030f0 <__aeabi_dcmpgt>
 800b840:	2800      	cmp	r0, #0
 800b842:	d0bf      	beq.n	800b7c4 <floor+0x4c>
 800b844:	2c00      	cmp	r4, #0
 800b846:	da02      	bge.n	800b84e <floor+0xd6>
 800b848:	2e14      	cmp	r6, #20
 800b84a:	d103      	bne.n	800b854 <floor+0xdc>
 800b84c:	3401      	adds	r4, #1
 800b84e:	ea25 0507 	bic.w	r5, r5, r7
 800b852:	e7b7      	b.n	800b7c4 <floor+0x4c>
 800b854:	2301      	movs	r3, #1
 800b856:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b85a:	fa03 f606 	lsl.w	r6, r3, r6
 800b85e:	4435      	add	r5, r6
 800b860:	45a8      	cmp	r8, r5
 800b862:	bf88      	it	hi
 800b864:	18e4      	addhi	r4, r4, r3
 800b866:	e7f2      	b.n	800b84e <floor+0xd6>
 800b868:	2500      	movs	r5, #0
 800b86a:	462c      	mov	r4, r5
 800b86c:	e7aa      	b.n	800b7c4 <floor+0x4c>
 800b86e:	bf00      	nop
 800b870:	8800759c 	.word	0x8800759c
 800b874:	7e37e43c 	.word	0x7e37e43c
 800b878:	bff00000 	.word	0xbff00000
 800b87c:	000fffff 	.word	0x000fffff

0800b880 <tanhf>:
 800b880:	b510      	push	{r4, lr}
 800b882:	ee10 4a10 	vmov	r4, s0
 800b886:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b88a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b88e:	ed2d 8b02 	vpush	{d8}
 800b892:	eef0 7a40 	vmov.f32	s15, s0
 800b896:	db0c      	blt.n	800b8b2 <tanhf+0x32>
 800b898:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b89c:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800b8a0:	2c00      	cmp	r4, #0
 800b8a2:	bfac      	ite	ge
 800b8a4:	ee37 0a00 	vaddge.f32	s0, s14, s0
 800b8a8:	ee37 0a40 	vsublt.f32	s0, s14, s0
 800b8ac:	ecbd 8b02 	vpop	{d8}
 800b8b0:	bd10      	pop	{r4, pc}
 800b8b2:	4a1b      	ldr	r2, [pc, #108]	; (800b920 <tanhf+0xa0>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	dc30      	bgt.n	800b91a <tanhf+0x9a>
 800b8b8:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800b8bc:	da06      	bge.n	800b8cc <tanhf+0x4c>
 800b8be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b8c2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b8c6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b8ca:	e7ef      	b.n	800b8ac <tanhf+0x2c>
 800b8cc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b8d0:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800b8d4:	db12      	blt.n	800b8fc <tanhf+0x7c>
 800b8d6:	f002 f935 	bl	800db44 <fabsf>
 800b8da:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b8de:	f002 f805 	bl	800d8ec <expm1f>
 800b8e2:	ee30 0a08 	vadd.f32	s0, s0, s16
 800b8e6:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800b8ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b8ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b8f2:	2c00      	cmp	r4, #0
 800b8f4:	bfb8      	it	lt
 800b8f6:	eeb1 0a40 	vneglt.f32	s0, s0
 800b8fa:	e7d7      	b.n	800b8ac <tanhf+0x2c>
 800b8fc:	f002 f922 	bl	800db44 <fabsf>
 800b900:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800b904:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b908:	f001 fff0 	bl	800d8ec <expm1f>
 800b90c:	ee70 7a08 	vadd.f32	s15, s0, s16
 800b910:	eeb1 7a40 	vneg.f32	s14, s0
 800b914:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b918:	e7eb      	b.n	800b8f2 <tanhf+0x72>
 800b91a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b91e:	e7e8      	b.n	800b8f2 <tanhf+0x72>
 800b920:	41afffff 	.word	0x41afffff

0800b924 <log10>:
 800b924:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b926:	ed2d 8b02 	vpush	{d8}
 800b92a:	b08b      	sub	sp, #44	; 0x2c
 800b92c:	ec55 4b10 	vmov	r4, r5, d0
 800b930:	f000 fc92 	bl	800c258 <__ieee754_log10>
 800b934:	4b36      	ldr	r3, [pc, #216]	; (800ba10 <log10+0xec>)
 800b936:	eeb0 8a40 	vmov.f32	s16, s0
 800b93a:	eef0 8a60 	vmov.f32	s17, s1
 800b93e:	f993 6000 	ldrsb.w	r6, [r3]
 800b942:	1c73      	adds	r3, r6, #1
 800b944:	d05c      	beq.n	800ba00 <log10+0xdc>
 800b946:	4622      	mov	r2, r4
 800b948:	462b      	mov	r3, r5
 800b94a:	4620      	mov	r0, r4
 800b94c:	4629      	mov	r1, r5
 800b94e:	f7f7 fbd9 	bl	8003104 <__aeabi_dcmpun>
 800b952:	4607      	mov	r7, r0
 800b954:	2800      	cmp	r0, #0
 800b956:	d153      	bne.n	800ba00 <log10+0xdc>
 800b958:	2200      	movs	r2, #0
 800b95a:	2300      	movs	r3, #0
 800b95c:	4620      	mov	r0, r4
 800b95e:	4629      	mov	r1, r5
 800b960:	f7f7 fbb2 	bl	80030c8 <__aeabi_dcmple>
 800b964:	2800      	cmp	r0, #0
 800b966:	d04b      	beq.n	800ba00 <log10+0xdc>
 800b968:	4b2a      	ldr	r3, [pc, #168]	; (800ba14 <log10+0xf0>)
 800b96a:	9301      	str	r3, [sp, #4]
 800b96c:	9708      	str	r7, [sp, #32]
 800b96e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b972:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b976:	b9a6      	cbnz	r6, 800b9a2 <log10+0x7e>
 800b978:	4b27      	ldr	r3, [pc, #156]	; (800ba18 <log10+0xf4>)
 800b97a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b97e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b982:	4620      	mov	r0, r4
 800b984:	2200      	movs	r2, #0
 800b986:	2300      	movs	r3, #0
 800b988:	4629      	mov	r1, r5
 800b98a:	f7f7 fb89 	bl	80030a0 <__aeabi_dcmpeq>
 800b98e:	bb40      	cbnz	r0, 800b9e2 <log10+0xbe>
 800b990:	2301      	movs	r3, #1
 800b992:	2e02      	cmp	r6, #2
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	d119      	bne.n	800b9cc <log10+0xa8>
 800b998:	f002 fb40 	bl	800e01c <__errno>
 800b99c:	2321      	movs	r3, #33	; 0x21
 800b99e:	6003      	str	r3, [r0, #0]
 800b9a0:	e019      	b.n	800b9d6 <log10+0xb2>
 800b9a2:	4b1e      	ldr	r3, [pc, #120]	; (800ba1c <log10+0xf8>)
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	f7f7 fb75 	bl	80030a0 <__aeabi_dcmpeq>
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d0ea      	beq.n	800b990 <log10+0x6c>
 800b9ba:	2302      	movs	r3, #2
 800b9bc:	429e      	cmp	r6, r3
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	d111      	bne.n	800b9e6 <log10+0xc2>
 800b9c2:	f002 fb2b 	bl	800e01c <__errno>
 800b9c6:	2322      	movs	r3, #34	; 0x22
 800b9c8:	6003      	str	r3, [r0, #0]
 800b9ca:	e011      	b.n	800b9f0 <log10+0xcc>
 800b9cc:	4668      	mov	r0, sp
 800b9ce:	f001 fe81 	bl	800d6d4 <matherr>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d0e0      	beq.n	800b998 <log10+0x74>
 800b9d6:	4812      	ldr	r0, [pc, #72]	; (800ba20 <log10+0xfc>)
 800b9d8:	f001 fe7e 	bl	800d6d8 <nan>
 800b9dc:	ed8d 0b06 	vstr	d0, [sp, #24]
 800b9e0:	e006      	b.n	800b9f0 <log10+0xcc>
 800b9e2:	2302      	movs	r3, #2
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	4668      	mov	r0, sp
 800b9e8:	f001 fe74 	bl	800d6d4 <matherr>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d0e8      	beq.n	800b9c2 <log10+0x9e>
 800b9f0:	9b08      	ldr	r3, [sp, #32]
 800b9f2:	b11b      	cbz	r3, 800b9fc <log10+0xd8>
 800b9f4:	f002 fb12 	bl	800e01c <__errno>
 800b9f8:	9b08      	ldr	r3, [sp, #32]
 800b9fa:	6003      	str	r3, [r0, #0]
 800b9fc:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ba00:	eeb0 0a48 	vmov.f32	s0, s16
 800ba04:	eef0 0a68 	vmov.f32	s1, s17
 800ba08:	b00b      	add	sp, #44	; 0x2c
 800ba0a:	ecbd 8b02 	vpop	{d8}
 800ba0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba10:	2000073c 	.word	0x2000073c
 800ba14:	08024478 	.word	0x08024478
 800ba18:	c7efffff 	.word	0xc7efffff
 800ba1c:	fff00000 	.word	0xfff00000
 800ba20:	0801043d 	.word	0x0801043d

0800ba24 <pow>:
 800ba24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba28:	ed2d 8b04 	vpush	{d8-d9}
 800ba2c:	b08d      	sub	sp, #52	; 0x34
 800ba2e:	ec57 6b10 	vmov	r6, r7, d0
 800ba32:	ec55 4b11 	vmov	r4, r5, d1
 800ba36:	f000 fc9f 	bl	800c378 <__ieee754_pow>
 800ba3a:	4bae      	ldr	r3, [pc, #696]	; (800bcf4 <pow+0x2d0>)
 800ba3c:	eeb0 8a40 	vmov.f32	s16, s0
 800ba40:	eef0 8a60 	vmov.f32	s17, s1
 800ba44:	f993 9000 	ldrsb.w	r9, [r3]
 800ba48:	f1b9 3fff 	cmp.w	r9, #4294967295
 800ba4c:	4698      	mov	r8, r3
 800ba4e:	d05f      	beq.n	800bb10 <pow+0xec>
 800ba50:	4622      	mov	r2, r4
 800ba52:	462b      	mov	r3, r5
 800ba54:	4620      	mov	r0, r4
 800ba56:	4629      	mov	r1, r5
 800ba58:	f7f7 fb54 	bl	8003104 <__aeabi_dcmpun>
 800ba5c:	4683      	mov	fp, r0
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	d156      	bne.n	800bb10 <pow+0xec>
 800ba62:	4632      	mov	r2, r6
 800ba64:	463b      	mov	r3, r7
 800ba66:	4630      	mov	r0, r6
 800ba68:	4639      	mov	r1, r7
 800ba6a:	f7f7 fb4b 	bl	8003104 <__aeabi_dcmpun>
 800ba6e:	9001      	str	r0, [sp, #4]
 800ba70:	b1e8      	cbz	r0, 800baae <pow+0x8a>
 800ba72:	2200      	movs	r2, #0
 800ba74:	2300      	movs	r3, #0
 800ba76:	4620      	mov	r0, r4
 800ba78:	4629      	mov	r1, r5
 800ba7a:	f7f7 fb11 	bl	80030a0 <__aeabi_dcmpeq>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d046      	beq.n	800bb10 <pow+0xec>
 800ba82:	2301      	movs	r3, #1
 800ba84:	9302      	str	r3, [sp, #8]
 800ba86:	4b9c      	ldr	r3, [pc, #624]	; (800bcf8 <pow+0x2d4>)
 800ba88:	9303      	str	r3, [sp, #12]
 800ba8a:	4b9c      	ldr	r3, [pc, #624]	; (800bcfc <pow+0x2d8>)
 800ba8c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ba90:	2200      	movs	r2, #0
 800ba92:	f1b9 0f02 	cmp.w	r9, #2
 800ba96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ba9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ba9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800baa2:	d033      	beq.n	800bb0c <pow+0xe8>
 800baa4:	a802      	add	r0, sp, #8
 800baa6:	f001 fe15 	bl	800d6d4 <matherr>
 800baaa:	bb48      	cbnz	r0, 800bb00 <pow+0xdc>
 800baac:	e05e      	b.n	800bb6c <pow+0x148>
 800baae:	f04f 0a00 	mov.w	sl, #0
 800bab2:	f04f 0b00 	mov.w	fp, #0
 800bab6:	4652      	mov	r2, sl
 800bab8:	465b      	mov	r3, fp
 800baba:	4630      	mov	r0, r6
 800babc:	4639      	mov	r1, r7
 800babe:	f7f7 faef 	bl	80030a0 <__aeabi_dcmpeq>
 800bac2:	ec4b ab19 	vmov	d9, sl, fp
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d055      	beq.n	800bb76 <pow+0x152>
 800baca:	4652      	mov	r2, sl
 800bacc:	465b      	mov	r3, fp
 800bace:	4620      	mov	r0, r4
 800bad0:	4629      	mov	r1, r5
 800bad2:	f7f7 fae5 	bl	80030a0 <__aeabi_dcmpeq>
 800bad6:	4680      	mov	r8, r0
 800bad8:	b318      	cbz	r0, 800bb22 <pow+0xfe>
 800bada:	2301      	movs	r3, #1
 800badc:	9302      	str	r3, [sp, #8]
 800bade:	4b86      	ldr	r3, [pc, #536]	; (800bcf8 <pow+0x2d4>)
 800bae0:	9303      	str	r3, [sp, #12]
 800bae2:	9b01      	ldr	r3, [sp, #4]
 800bae4:	930a      	str	r3, [sp, #40]	; 0x28
 800bae6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800baea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800baee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800baf2:	f1b9 0f00 	cmp.w	r9, #0
 800baf6:	d0d5      	beq.n	800baa4 <pow+0x80>
 800baf8:	4b80      	ldr	r3, [pc, #512]	; (800bcfc <pow+0x2d8>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bb00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb02:	b11b      	cbz	r3, 800bb0c <pow+0xe8>
 800bb04:	f002 fa8a 	bl	800e01c <__errno>
 800bb08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb0a:	6003      	str	r3, [r0, #0]
 800bb0c:	ed9d 8b08 	vldr	d8, [sp, #32]
 800bb10:	eeb0 0a48 	vmov.f32	s0, s16
 800bb14:	eef0 0a68 	vmov.f32	s1, s17
 800bb18:	b00d      	add	sp, #52	; 0x34
 800bb1a:	ecbd 8b04 	vpop	{d8-d9}
 800bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb22:	ec45 4b10 	vmov	d0, r4, r5
 800bb26:	f001 fdcd 	bl	800d6c4 <finite>
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	d0f0      	beq.n	800bb10 <pow+0xec>
 800bb2e:	4652      	mov	r2, sl
 800bb30:	465b      	mov	r3, fp
 800bb32:	4620      	mov	r0, r4
 800bb34:	4629      	mov	r1, r5
 800bb36:	f7f7 fabd 	bl	80030b4 <__aeabi_dcmplt>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d0e8      	beq.n	800bb10 <pow+0xec>
 800bb3e:	2301      	movs	r3, #1
 800bb40:	9302      	str	r3, [sp, #8]
 800bb42:	4b6d      	ldr	r3, [pc, #436]	; (800bcf8 <pow+0x2d4>)
 800bb44:	9303      	str	r3, [sp, #12]
 800bb46:	4b6b      	ldr	r3, [pc, #428]	; (800bcf4 <pow+0x2d0>)
 800bb48:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800bb4c:	f993 3000 	ldrsb.w	r3, [r3]
 800bb50:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bb54:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800bb58:	b913      	cbnz	r3, 800bb60 <pow+0x13c>
 800bb5a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800bb5e:	e7a1      	b.n	800baa4 <pow+0x80>
 800bb60:	4967      	ldr	r1, [pc, #412]	; (800bd00 <pow+0x2dc>)
 800bb62:	2000      	movs	r0, #0
 800bb64:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb68:	2b02      	cmp	r3, #2
 800bb6a:	d19b      	bne.n	800baa4 <pow+0x80>
 800bb6c:	f002 fa56 	bl	800e01c <__errno>
 800bb70:	2321      	movs	r3, #33	; 0x21
 800bb72:	6003      	str	r3, [r0, #0]
 800bb74:	e7c4      	b.n	800bb00 <pow+0xdc>
 800bb76:	eeb0 0a48 	vmov.f32	s0, s16
 800bb7a:	eef0 0a68 	vmov.f32	s1, s17
 800bb7e:	f001 fda1 	bl	800d6c4 <finite>
 800bb82:	9001      	str	r0, [sp, #4]
 800bb84:	2800      	cmp	r0, #0
 800bb86:	f040 808a 	bne.w	800bc9e <pow+0x27a>
 800bb8a:	ec47 6b10 	vmov	d0, r6, r7
 800bb8e:	f001 fd99 	bl	800d6c4 <finite>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	f000 8083 	beq.w	800bc9e <pow+0x27a>
 800bb98:	ec45 4b10 	vmov	d0, r4, r5
 800bb9c:	f001 fd92 	bl	800d6c4 <finite>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d07c      	beq.n	800bc9e <pow+0x27a>
 800bba4:	ec53 2b18 	vmov	r2, r3, d8
 800bba8:	ee18 0a10 	vmov	r0, s16
 800bbac:	4619      	mov	r1, r3
 800bbae:	f7f7 faa9 	bl	8003104 <__aeabi_dcmpun>
 800bbb2:	f998 9000 	ldrsb.w	r9, [r8]
 800bbb6:	4b50      	ldr	r3, [pc, #320]	; (800bcf8 <pow+0x2d4>)
 800bbb8:	b1b0      	cbz	r0, 800bbe8 <pow+0x1c4>
 800bbba:	2201      	movs	r2, #1
 800bbbc:	9303      	str	r3, [sp, #12]
 800bbbe:	9b01      	ldr	r3, [sp, #4]
 800bbc0:	9202      	str	r2, [sp, #8]
 800bbc2:	930a      	str	r3, [sp, #40]	; 0x28
 800bbc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bbc8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800bbcc:	f1b9 0f00 	cmp.w	r9, #0
 800bbd0:	d0c3      	beq.n	800bb5a <pow+0x136>
 800bbd2:	4652      	mov	r2, sl
 800bbd4:	465b      	mov	r3, fp
 800bbd6:	4650      	mov	r0, sl
 800bbd8:	4659      	mov	r1, fp
 800bbda:	f7f7 f923 	bl	8002e24 <__aeabi_ddiv>
 800bbde:	f1b9 0f02 	cmp.w	r9, #2
 800bbe2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bbe6:	e7c0      	b.n	800bb6a <pow+0x146>
 800bbe8:	2203      	movs	r2, #3
 800bbea:	9202      	str	r2, [sp, #8]
 800bbec:	9303      	str	r3, [sp, #12]
 800bbee:	900a      	str	r0, [sp, #40]	; 0x28
 800bbf0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bbf4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800bbf8:	f1b9 0f00 	cmp.w	r9, #0
 800bbfc:	d12c      	bne.n	800bc58 <pow+0x234>
 800bbfe:	4b41      	ldr	r3, [pc, #260]	; (800bd04 <pow+0x2e0>)
 800bc00:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bc04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bc08:	4630      	mov	r0, r6
 800bc0a:	4652      	mov	r2, sl
 800bc0c:	465b      	mov	r3, fp
 800bc0e:	4639      	mov	r1, r7
 800bc10:	f7f7 fa50 	bl	80030b4 <__aeabi_dcmplt>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d066      	beq.n	800bce6 <pow+0x2c2>
 800bc18:	2200      	movs	r2, #0
 800bc1a:	4b3b      	ldr	r3, [pc, #236]	; (800bd08 <pow+0x2e4>)
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	4629      	mov	r1, r5
 800bc20:	f7f6 ffd6 	bl	8002bd0 <__aeabi_dmul>
 800bc24:	4604      	mov	r4, r0
 800bc26:	460d      	mov	r5, r1
 800bc28:	ec45 4b10 	vmov	d0, r4, r5
 800bc2c:	f001 fd5c 	bl	800d6e8 <rint>
 800bc30:	4620      	mov	r0, r4
 800bc32:	ec53 2b10 	vmov	r2, r3, d0
 800bc36:	4629      	mov	r1, r5
 800bc38:	f7f7 fa32 	bl	80030a0 <__aeabi_dcmpeq>
 800bc3c:	b920      	cbnz	r0, 800bc48 <pow+0x224>
 800bc3e:	4b33      	ldr	r3, [pc, #204]	; (800bd0c <pow+0x2e8>)
 800bc40:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bc44:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bc48:	f998 3000 	ldrsb.w	r3, [r8]
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d14a      	bne.n	800bce6 <pow+0x2c2>
 800bc50:	f002 f9e4 	bl	800e01c <__errno>
 800bc54:	2322      	movs	r3, #34	; 0x22
 800bc56:	e78c      	b.n	800bb72 <pow+0x14e>
 800bc58:	4b2d      	ldr	r3, [pc, #180]	; (800bd10 <pow+0x2ec>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bc60:	4630      	mov	r0, r6
 800bc62:	4652      	mov	r2, sl
 800bc64:	465b      	mov	r3, fp
 800bc66:	4639      	mov	r1, r7
 800bc68:	f7f7 fa24 	bl	80030b4 <__aeabi_dcmplt>
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d0eb      	beq.n	800bc48 <pow+0x224>
 800bc70:	2200      	movs	r2, #0
 800bc72:	4b25      	ldr	r3, [pc, #148]	; (800bd08 <pow+0x2e4>)
 800bc74:	4620      	mov	r0, r4
 800bc76:	4629      	mov	r1, r5
 800bc78:	f7f6 ffaa 	bl	8002bd0 <__aeabi_dmul>
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	460d      	mov	r5, r1
 800bc80:	ec45 4b10 	vmov	d0, r4, r5
 800bc84:	f001 fd30 	bl	800d6e8 <rint>
 800bc88:	4620      	mov	r0, r4
 800bc8a:	ec53 2b10 	vmov	r2, r3, d0
 800bc8e:	4629      	mov	r1, r5
 800bc90:	f7f7 fa06 	bl	80030a0 <__aeabi_dcmpeq>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d1d7      	bne.n	800bc48 <pow+0x224>
 800bc98:	2200      	movs	r2, #0
 800bc9a:	4b19      	ldr	r3, [pc, #100]	; (800bd00 <pow+0x2dc>)
 800bc9c:	e7d2      	b.n	800bc44 <pow+0x220>
 800bc9e:	2200      	movs	r2, #0
 800bca0:	2300      	movs	r3, #0
 800bca2:	ec51 0b18 	vmov	r0, r1, d8
 800bca6:	f7f7 f9fb 	bl	80030a0 <__aeabi_dcmpeq>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	f43f af30 	beq.w	800bb10 <pow+0xec>
 800bcb0:	ec47 6b10 	vmov	d0, r6, r7
 800bcb4:	f001 fd06 	bl	800d6c4 <finite>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	f43f af29 	beq.w	800bb10 <pow+0xec>
 800bcbe:	ec45 4b10 	vmov	d0, r4, r5
 800bcc2:	f001 fcff 	bl	800d6c4 <finite>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	f43f af22 	beq.w	800bb10 <pow+0xec>
 800bccc:	2304      	movs	r3, #4
 800bcce:	9302      	str	r3, [sp, #8]
 800bcd0:	4b09      	ldr	r3, [pc, #36]	; (800bcf8 <pow+0x2d4>)
 800bcd2:	9303      	str	r3, [sp, #12]
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	930a      	str	r3, [sp, #40]	; 0x28
 800bcd8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bcdc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800bce0:	ed8d 9b08 	vstr	d9, [sp, #32]
 800bce4:	e7b0      	b.n	800bc48 <pow+0x224>
 800bce6:	a802      	add	r0, sp, #8
 800bce8:	f001 fcf4 	bl	800d6d4 <matherr>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	f47f af07 	bne.w	800bb00 <pow+0xdc>
 800bcf2:	e7ad      	b.n	800bc50 <pow+0x22c>
 800bcf4:	2000073c 	.word	0x2000073c
 800bcf8:	0802447e 	.word	0x0802447e
 800bcfc:	3ff00000 	.word	0x3ff00000
 800bd00:	fff00000 	.word	0xfff00000
 800bd04:	47efffff 	.word	0x47efffff
 800bd08:	3fe00000 	.word	0x3fe00000
 800bd0c:	c7efffff 	.word	0xc7efffff
 800bd10:	7ff00000 	.word	0x7ff00000

0800bd14 <sqrt>:
 800bd14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd18:	ed2d 8b02 	vpush	{d8}
 800bd1c:	b08b      	sub	sp, #44	; 0x2c
 800bd1e:	ec55 4b10 	vmov	r4, r5, d0
 800bd22:	f001 f83b 	bl	800cd9c <__ieee754_sqrt>
 800bd26:	4b26      	ldr	r3, [pc, #152]	; (800bdc0 <sqrt+0xac>)
 800bd28:	eeb0 8a40 	vmov.f32	s16, s0
 800bd2c:	eef0 8a60 	vmov.f32	s17, s1
 800bd30:	f993 6000 	ldrsb.w	r6, [r3]
 800bd34:	1c73      	adds	r3, r6, #1
 800bd36:	d02a      	beq.n	800bd8e <sqrt+0x7a>
 800bd38:	4622      	mov	r2, r4
 800bd3a:	462b      	mov	r3, r5
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	4629      	mov	r1, r5
 800bd40:	f7f7 f9e0 	bl	8003104 <__aeabi_dcmpun>
 800bd44:	4607      	mov	r7, r0
 800bd46:	bb10      	cbnz	r0, 800bd8e <sqrt+0x7a>
 800bd48:	f04f 0800 	mov.w	r8, #0
 800bd4c:	f04f 0900 	mov.w	r9, #0
 800bd50:	4642      	mov	r2, r8
 800bd52:	464b      	mov	r3, r9
 800bd54:	4620      	mov	r0, r4
 800bd56:	4629      	mov	r1, r5
 800bd58:	f7f7 f9ac 	bl	80030b4 <__aeabi_dcmplt>
 800bd5c:	b1b8      	cbz	r0, 800bd8e <sqrt+0x7a>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	9300      	str	r3, [sp, #0]
 800bd62:	4b18      	ldr	r3, [pc, #96]	; (800bdc4 <sqrt+0xb0>)
 800bd64:	9301      	str	r3, [sp, #4]
 800bd66:	9708      	str	r7, [sp, #32]
 800bd68:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800bd6c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bd70:	b9b6      	cbnz	r6, 800bda0 <sqrt+0x8c>
 800bd72:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800bd76:	4668      	mov	r0, sp
 800bd78:	f001 fcac 	bl	800d6d4 <matherr>
 800bd7c:	b1d0      	cbz	r0, 800bdb4 <sqrt+0xa0>
 800bd7e:	9b08      	ldr	r3, [sp, #32]
 800bd80:	b11b      	cbz	r3, 800bd8a <sqrt+0x76>
 800bd82:	f002 f94b 	bl	800e01c <__errno>
 800bd86:	9b08      	ldr	r3, [sp, #32]
 800bd88:	6003      	str	r3, [r0, #0]
 800bd8a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800bd8e:	eeb0 0a48 	vmov.f32	s0, s16
 800bd92:	eef0 0a68 	vmov.f32	s1, s17
 800bd96:	b00b      	add	sp, #44	; 0x2c
 800bd98:	ecbd 8b02 	vpop	{d8}
 800bd9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bda0:	4642      	mov	r2, r8
 800bda2:	464b      	mov	r3, r9
 800bda4:	4640      	mov	r0, r8
 800bda6:	4649      	mov	r1, r9
 800bda8:	f7f7 f83c 	bl	8002e24 <__aeabi_ddiv>
 800bdac:	2e02      	cmp	r6, #2
 800bdae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bdb2:	d1e0      	bne.n	800bd76 <sqrt+0x62>
 800bdb4:	f002 f932 	bl	800e01c <__errno>
 800bdb8:	2321      	movs	r3, #33	; 0x21
 800bdba:	6003      	str	r3, [r0, #0]
 800bdbc:	e7df      	b.n	800bd7e <sqrt+0x6a>
 800bdbe:	bf00      	nop
 800bdc0:	2000073c 	.word	0x2000073c
 800bdc4:	08024482 	.word	0x08024482

0800bdc8 <expf>:
 800bdc8:	b530      	push	{r4, r5, lr}
 800bdca:	ed2d 8b02 	vpush	{d8}
 800bdce:	4d35      	ldr	r5, [pc, #212]	; (800bea4 <expf+0xdc>)
 800bdd0:	b08b      	sub	sp, #44	; 0x2c
 800bdd2:	eeb0 8a40 	vmov.f32	s16, s0
 800bdd6:	f001 f891 	bl	800cefc <__ieee754_expf>
 800bdda:	f995 3000 	ldrsb.w	r3, [r5]
 800bdde:	3301      	adds	r3, #1
 800bde0:	ee10 4a10 	vmov	r4, s0
 800bde4:	d030      	beq.n	800be48 <expf+0x80>
 800bde6:	eeb0 0a48 	vmov.f32	s0, s16
 800bdea:	f001 feb2 	bl	800db52 <finitef>
 800bdee:	b358      	cbz	r0, 800be48 <expf+0x80>
 800bdf0:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800bea8 <expf+0xe0>
 800bdf4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bdf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdfc:	dd35      	ble.n	800be6a <expf+0xa2>
 800bdfe:	2303      	movs	r3, #3
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	4b2a      	ldr	r3, [pc, #168]	; (800beac <expf+0xe4>)
 800be04:	9301      	str	r3, [sp, #4]
 800be06:	ee18 0a10 	vmov	r0, s16
 800be0a:	2300      	movs	r3, #0
 800be0c:	9308      	str	r3, [sp, #32]
 800be0e:	f7f6 fe8b 	bl	8002b28 <__aeabi_f2d>
 800be12:	f995 3000 	ldrsb.w	r3, [r5]
 800be16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be1e:	b9cb      	cbnz	r3, 800be54 <expf+0x8c>
 800be20:	4b23      	ldr	r3, [pc, #140]	; (800beb0 <expf+0xe8>)
 800be22:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800be26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be2a:	4668      	mov	r0, sp
 800be2c:	f001 fc52 	bl	800d6d4 <matherr>
 800be30:	b1b0      	cbz	r0, 800be60 <expf+0x98>
 800be32:	9b08      	ldr	r3, [sp, #32]
 800be34:	b11b      	cbz	r3, 800be3e <expf+0x76>
 800be36:	f002 f8f1 	bl	800e01c <__errno>
 800be3a:	9b08      	ldr	r3, [sp, #32]
 800be3c:	6003      	str	r3, [r0, #0]
 800be3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be42:	f7f7 f99d 	bl	8003180 <__aeabi_d2f>
 800be46:	4604      	mov	r4, r0
 800be48:	ee00 4a10 	vmov	s0, r4
 800be4c:	b00b      	add	sp, #44	; 0x2c
 800be4e:	ecbd 8b02 	vpop	{d8}
 800be52:	bd30      	pop	{r4, r5, pc}
 800be54:	4917      	ldr	r1, [pc, #92]	; (800beb4 <expf+0xec>)
 800be56:	2000      	movs	r0, #0
 800be58:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d1e4      	bne.n	800be2a <expf+0x62>
 800be60:	f002 f8dc 	bl	800e01c <__errno>
 800be64:	2322      	movs	r3, #34	; 0x22
 800be66:	6003      	str	r3, [r0, #0]
 800be68:	e7e3      	b.n	800be32 <expf+0x6a>
 800be6a:	eddf 7a13 	vldr	s15, [pc, #76]	; 800beb8 <expf+0xf0>
 800be6e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800be72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be76:	d5e7      	bpl.n	800be48 <expf+0x80>
 800be78:	2304      	movs	r3, #4
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	4b0b      	ldr	r3, [pc, #44]	; (800beac <expf+0xe4>)
 800be7e:	9301      	str	r3, [sp, #4]
 800be80:	ee18 0a10 	vmov	r0, s16
 800be84:	2300      	movs	r3, #0
 800be86:	9308      	str	r3, [sp, #32]
 800be88:	f7f6 fe4e 	bl	8002b28 <__aeabi_f2d>
 800be8c:	2300      	movs	r3, #0
 800be8e:	2200      	movs	r2, #0
 800be90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be9c:	f995 3000 	ldrsb.w	r3, [r5]
 800bea0:	e7dc      	b.n	800be5c <expf+0x94>
 800bea2:	bf00      	nop
 800bea4:	2000073c 	.word	0x2000073c
 800bea8:	42b17180 	.word	0x42b17180
 800beac:	08024487 	.word	0x08024487
 800beb0:	47efffff 	.word	0x47efffff
 800beb4:	7ff00000 	.word	0x7ff00000
 800beb8:	c2cff1b5 	.word	0xc2cff1b5

0800bebc <powf>:
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	ed2d 8b04 	vpush	{d8-d9}
 800bec2:	4cb5      	ldr	r4, [pc, #724]	; (800c198 <powf+0x2dc>)
 800bec4:	b08a      	sub	sp, #40	; 0x28
 800bec6:	eef0 8a40 	vmov.f32	s17, s0
 800beca:	eeb0 8a60 	vmov.f32	s16, s1
 800bece:	f001 f8e9 	bl	800d0a4 <__ieee754_powf>
 800bed2:	f994 5000 	ldrsb.w	r5, [r4]
 800bed6:	1c6b      	adds	r3, r5, #1
 800bed8:	eeb0 9a40 	vmov.f32	s18, s0
 800bedc:	4626      	mov	r6, r4
 800bede:	d05d      	beq.n	800bf9c <powf+0xe0>
 800bee0:	eeb4 8a48 	vcmp.f32	s16, s16
 800bee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee8:	d658      	bvs.n	800bf9c <powf+0xe0>
 800beea:	eef4 8a68 	vcmp.f32	s17, s17
 800beee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bef2:	d721      	bvc.n	800bf38 <powf+0x7c>
 800bef4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800befc:	d14e      	bne.n	800bf9c <powf+0xe0>
 800befe:	2301      	movs	r3, #1
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	4ba6      	ldr	r3, [pc, #664]	; (800c19c <powf+0x2e0>)
 800bf04:	9301      	str	r3, [sp, #4]
 800bf06:	ee18 0a90 	vmov	r0, s17
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	9308      	str	r3, [sp, #32]
 800bf0e:	f7f6 fe0b 	bl	8002b28 <__aeabi_f2d>
 800bf12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf16:	ee18 0a10 	vmov	r0, s16
 800bf1a:	f7f6 fe05 	bl	8002b28 <__aeabi_f2d>
 800bf1e:	4ba0      	ldr	r3, [pc, #640]	; (800c1a0 <powf+0x2e4>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	2d02      	cmp	r5, #2
 800bf24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf2c:	d030      	beq.n	800bf90 <powf+0xd4>
 800bf2e:	4668      	mov	r0, sp
 800bf30:	f001 fbd0 	bl	800d6d4 <matherr>
 800bf34:	bb30      	cbnz	r0, 800bf84 <powf+0xc8>
 800bf36:	e062      	b.n	800bffe <powf+0x142>
 800bf38:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bf3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf40:	d162      	bne.n	800c008 <powf+0x14c>
 800bf42:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bf46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf4a:	d12d      	bne.n	800bfa8 <powf+0xec>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	4b92      	ldr	r3, [pc, #584]	; (800c19c <powf+0x2e0>)
 800bf52:	9301      	str	r3, [sp, #4]
 800bf54:	ee18 0a90 	vmov	r0, s17
 800bf58:	2300      	movs	r3, #0
 800bf5a:	9308      	str	r3, [sp, #32]
 800bf5c:	f7f6 fde4 	bl	8002b28 <__aeabi_f2d>
 800bf60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf64:	ee18 0a10 	vmov	r0, s16
 800bf68:	f7f6 fdde 	bl	8002b28 <__aeabi_f2d>
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2300      	movs	r3, #0
 800bf70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf78:	2d00      	cmp	r5, #0
 800bf7a:	d0d8      	beq.n	800bf2e <powf+0x72>
 800bf7c:	4b88      	ldr	r3, [pc, #544]	; (800c1a0 <powf+0x2e4>)
 800bf7e:	2200      	movs	r2, #0
 800bf80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf84:	9b08      	ldr	r3, [sp, #32]
 800bf86:	b11b      	cbz	r3, 800bf90 <powf+0xd4>
 800bf88:	f002 f848 	bl	800e01c <__errno>
 800bf8c:	9b08      	ldr	r3, [sp, #32]
 800bf8e:	6003      	str	r3, [r0, #0]
 800bf90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf94:	f7f7 f8f4 	bl	8003180 <__aeabi_d2f>
 800bf98:	ee09 0a10 	vmov	s18, r0
 800bf9c:	eeb0 0a49 	vmov.f32	s0, s18
 800bfa0:	b00a      	add	sp, #40	; 0x28
 800bfa2:	ecbd 8b04 	vpop	{d8-d9}
 800bfa6:	bd70      	pop	{r4, r5, r6, pc}
 800bfa8:	eeb0 0a48 	vmov.f32	s0, s16
 800bfac:	f001 fdd1 	bl	800db52 <finitef>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d0f3      	beq.n	800bf9c <powf+0xe0>
 800bfb4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bfb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfbc:	d5ee      	bpl.n	800bf9c <powf+0xe0>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	9300      	str	r3, [sp, #0]
 800bfc2:	4b76      	ldr	r3, [pc, #472]	; (800c19c <powf+0x2e0>)
 800bfc4:	9301      	str	r3, [sp, #4]
 800bfc6:	ee18 0a90 	vmov	r0, s17
 800bfca:	2300      	movs	r3, #0
 800bfcc:	9308      	str	r3, [sp, #32]
 800bfce:	f7f6 fdab 	bl	8002b28 <__aeabi_f2d>
 800bfd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfd6:	ee18 0a10 	vmov	r0, s16
 800bfda:	f7f6 fda5 	bl	8002b28 <__aeabi_f2d>
 800bfde:	f994 3000 	ldrsb.w	r3, [r4]
 800bfe2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfe6:	b923      	cbnz	r3, 800bff2 <powf+0x136>
 800bfe8:	2200      	movs	r2, #0
 800bfea:	2300      	movs	r3, #0
 800bfec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bff0:	e79d      	b.n	800bf2e <powf+0x72>
 800bff2:	496c      	ldr	r1, [pc, #432]	; (800c1a4 <powf+0x2e8>)
 800bff4:	2000      	movs	r0, #0
 800bff6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bffa:	2b02      	cmp	r3, #2
 800bffc:	d197      	bne.n	800bf2e <powf+0x72>
 800bffe:	f002 f80d 	bl	800e01c <__errno>
 800c002:	2321      	movs	r3, #33	; 0x21
 800c004:	6003      	str	r3, [r0, #0]
 800c006:	e7bd      	b.n	800bf84 <powf+0xc8>
 800c008:	f001 fda3 	bl	800db52 <finitef>
 800c00c:	4605      	mov	r5, r0
 800c00e:	2800      	cmp	r0, #0
 800c010:	f040 8091 	bne.w	800c136 <powf+0x27a>
 800c014:	eeb0 0a68 	vmov.f32	s0, s17
 800c018:	f001 fd9b 	bl	800db52 <finitef>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	f000 808a 	beq.w	800c136 <powf+0x27a>
 800c022:	eeb0 0a48 	vmov.f32	s0, s16
 800c026:	f001 fd94 	bl	800db52 <finitef>
 800c02a:	2800      	cmp	r0, #0
 800c02c:	f000 8083 	beq.w	800c136 <powf+0x27a>
 800c030:	eeb4 9a49 	vcmp.f32	s18, s18
 800c034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c038:	f994 4000 	ldrsb.w	r4, [r4]
 800c03c:	4b57      	ldr	r3, [pc, #348]	; (800c19c <powf+0x2e0>)
 800c03e:	d71b      	bvc.n	800c078 <powf+0x1bc>
 800c040:	2201      	movs	r2, #1
 800c042:	ee18 0a90 	vmov	r0, s17
 800c046:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c04a:	9508      	str	r5, [sp, #32]
 800c04c:	f7f6 fd6c 	bl	8002b28 <__aeabi_f2d>
 800c050:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c054:	ee18 0a10 	vmov	r0, s16
 800c058:	f7f6 fd66 	bl	8002b28 <__aeabi_f2d>
 800c05c:	2200      	movs	r2, #0
 800c05e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c062:	2300      	movs	r3, #0
 800c064:	2c00      	cmp	r4, #0
 800c066:	d0c1      	beq.n	800bfec <powf+0x130>
 800c068:	4610      	mov	r0, r2
 800c06a:	4619      	mov	r1, r3
 800c06c:	f7f6 feda 	bl	8002e24 <__aeabi_ddiv>
 800c070:	2c02      	cmp	r4, #2
 800c072:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c076:	e7c1      	b.n	800bffc <powf+0x140>
 800c078:	2203      	movs	r2, #3
 800c07a:	ee18 0a90 	vmov	r0, s17
 800c07e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c082:	9508      	str	r5, [sp, #32]
 800c084:	f7f6 fd50 	bl	8002b28 <__aeabi_f2d>
 800c088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c08c:	ee18 0a10 	vmov	r0, s16
 800c090:	f7f6 fd4a 	bl	8002b28 <__aeabi_f2d>
 800c094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c098:	bb5c      	cbnz	r4, 800c0f2 <powf+0x236>
 800c09a:	4b43      	ldr	r3, [pc, #268]	; (800c1a8 <powf+0x2ec>)
 800c09c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c0a0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c0ac:	d56c      	bpl.n	800c188 <powf+0x2cc>
 800c0ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c0b2:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c0b6:	ee17 0a90 	vmov	r0, s15
 800c0ba:	f7f6 fd35 	bl	8002b28 <__aeabi_f2d>
 800c0be:	4604      	mov	r4, r0
 800c0c0:	460d      	mov	r5, r1
 800c0c2:	ec45 4b10 	vmov	d0, r4, r5
 800c0c6:	f001 fb0f 	bl	800d6e8 <rint>
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	ec53 2b10 	vmov	r2, r3, d0
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	f7f6 ffe5 	bl	80030a0 <__aeabi_dcmpeq>
 800c0d6:	b920      	cbnz	r0, 800c0e2 <powf+0x226>
 800c0d8:	4b34      	ldr	r3, [pc, #208]	; (800c1ac <powf+0x2f0>)
 800c0da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c0de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c0e2:	f996 3000 	ldrsb.w	r3, [r6]
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	d14e      	bne.n	800c188 <powf+0x2cc>
 800c0ea:	f001 ff97 	bl	800e01c <__errno>
 800c0ee:	2322      	movs	r3, #34	; 0x22
 800c0f0:	e788      	b.n	800c004 <powf+0x148>
 800c0f2:	4b2f      	ldr	r3, [pc, #188]	; (800c1b0 <powf+0x2f4>)
 800c0f4:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c102:	d5ee      	bpl.n	800c0e2 <powf+0x226>
 800c104:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c108:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c10c:	ee17 0a90 	vmov	r0, s15
 800c110:	f7f6 fd0a 	bl	8002b28 <__aeabi_f2d>
 800c114:	4604      	mov	r4, r0
 800c116:	460d      	mov	r5, r1
 800c118:	ec45 4b10 	vmov	d0, r4, r5
 800c11c:	f001 fae4 	bl	800d6e8 <rint>
 800c120:	4620      	mov	r0, r4
 800c122:	ec53 2b10 	vmov	r2, r3, d0
 800c126:	4629      	mov	r1, r5
 800c128:	f7f6 ffba 	bl	80030a0 <__aeabi_dcmpeq>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	d1d8      	bne.n	800c0e2 <powf+0x226>
 800c130:	2200      	movs	r2, #0
 800c132:	4b1c      	ldr	r3, [pc, #112]	; (800c1a4 <powf+0x2e8>)
 800c134:	e7d3      	b.n	800c0de <powf+0x222>
 800c136:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13e:	f47f af2d 	bne.w	800bf9c <powf+0xe0>
 800c142:	eeb0 0a68 	vmov.f32	s0, s17
 800c146:	f001 fd04 	bl	800db52 <finitef>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	f43f af26 	beq.w	800bf9c <powf+0xe0>
 800c150:	eeb0 0a48 	vmov.f32	s0, s16
 800c154:	f001 fcfd 	bl	800db52 <finitef>
 800c158:	2800      	cmp	r0, #0
 800c15a:	f43f af1f 	beq.w	800bf9c <powf+0xe0>
 800c15e:	2304      	movs	r3, #4
 800c160:	9300      	str	r3, [sp, #0]
 800c162:	4b0e      	ldr	r3, [pc, #56]	; (800c19c <powf+0x2e0>)
 800c164:	9301      	str	r3, [sp, #4]
 800c166:	ee18 0a90 	vmov	r0, s17
 800c16a:	2300      	movs	r3, #0
 800c16c:	9308      	str	r3, [sp, #32]
 800c16e:	f7f6 fcdb 	bl	8002b28 <__aeabi_f2d>
 800c172:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c176:	ee18 0a10 	vmov	r0, s16
 800c17a:	f7f6 fcd5 	bl	8002b28 <__aeabi_f2d>
 800c17e:	2200      	movs	r2, #0
 800c180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c184:	2300      	movs	r3, #0
 800c186:	e7aa      	b.n	800c0de <powf+0x222>
 800c188:	4668      	mov	r0, sp
 800c18a:	f001 faa3 	bl	800d6d4 <matherr>
 800c18e:	2800      	cmp	r0, #0
 800c190:	f47f aef8 	bne.w	800bf84 <powf+0xc8>
 800c194:	e7a9      	b.n	800c0ea <powf+0x22e>
 800c196:	bf00      	nop
 800c198:	2000073c 	.word	0x2000073c
 800c19c:	0802448c 	.word	0x0802448c
 800c1a0:	3ff00000 	.word	0x3ff00000
 800c1a4:	fff00000 	.word	0xfff00000
 800c1a8:	47efffff 	.word	0x47efffff
 800c1ac:	c7efffff 	.word	0xc7efffff
 800c1b0:	7ff00000 	.word	0x7ff00000

0800c1b4 <sqrtf>:
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	ed2d 8b02 	vpush	{d8}
 800c1ba:	b08a      	sub	sp, #40	; 0x28
 800c1bc:	eeb0 8a40 	vmov.f32	s16, s0
 800c1c0:	f001 fa32 	bl	800d628 <__ieee754_sqrtf>
 800c1c4:	4b21      	ldr	r3, [pc, #132]	; (800c24c <sqrtf+0x98>)
 800c1c6:	f993 4000 	ldrsb.w	r4, [r3]
 800c1ca:	1c63      	adds	r3, r4, #1
 800c1cc:	d02c      	beq.n	800c228 <sqrtf+0x74>
 800c1ce:	eeb4 8a48 	vcmp.f32	s16, s16
 800c1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d6:	d627      	bvs.n	800c228 <sqrtf+0x74>
 800c1d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e0:	d522      	bpl.n	800c228 <sqrtf+0x74>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	4b1a      	ldr	r3, [pc, #104]	; (800c250 <sqrtf+0x9c>)
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	ee18 0a10 	vmov	r0, s16
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	9308      	str	r3, [sp, #32]
 800c1f2:	f7f6 fc99 	bl	8002b28 <__aeabi_f2d>
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c200:	2300      	movs	r3, #0
 800c202:	b9ac      	cbnz	r4, 800c230 <sqrtf+0x7c>
 800c204:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c208:	4668      	mov	r0, sp
 800c20a:	f001 fa63 	bl	800d6d4 <matherr>
 800c20e:	b1b8      	cbz	r0, 800c240 <sqrtf+0x8c>
 800c210:	9b08      	ldr	r3, [sp, #32]
 800c212:	b11b      	cbz	r3, 800c21c <sqrtf+0x68>
 800c214:	f001 ff02 	bl	800e01c <__errno>
 800c218:	9b08      	ldr	r3, [sp, #32]
 800c21a:	6003      	str	r3, [r0, #0]
 800c21c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c220:	f7f6 ffae 	bl	8003180 <__aeabi_d2f>
 800c224:	ee00 0a10 	vmov	s0, r0
 800c228:	b00a      	add	sp, #40	; 0x28
 800c22a:	ecbd 8b02 	vpop	{d8}
 800c22e:	bd10      	pop	{r4, pc}
 800c230:	4610      	mov	r0, r2
 800c232:	4619      	mov	r1, r3
 800c234:	f7f6 fdf6 	bl	8002e24 <__aeabi_ddiv>
 800c238:	2c02      	cmp	r4, #2
 800c23a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c23e:	d1e3      	bne.n	800c208 <sqrtf+0x54>
 800c240:	f001 feec 	bl	800e01c <__errno>
 800c244:	2321      	movs	r3, #33	; 0x21
 800c246:	6003      	str	r3, [r0, #0]
 800c248:	e7e2      	b.n	800c210 <sqrtf+0x5c>
 800c24a:	bf00      	nop
 800c24c:	2000073c 	.word	0x2000073c
 800c250:	08024491 	.word	0x08024491
 800c254:	00000000 	.word	0x00000000

0800c258 <__ieee754_log10>:
 800c258:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c25c:	ec55 4b10 	vmov	r4, r5, d0
 800c260:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800c264:	ee10 2a10 	vmov	r2, s0
 800c268:	462b      	mov	r3, r5
 800c26a:	da30      	bge.n	800c2ce <__ieee754_log10+0x76>
 800c26c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 800c270:	430a      	orrs	r2, r1
 800c272:	d10a      	bne.n	800c28a <__ieee754_log10+0x32>
 800c274:	493c      	ldr	r1, [pc, #240]	; (800c368 <__ieee754_log10+0x110>)
 800c276:	2200      	movs	r2, #0
 800c278:	2300      	movs	r3, #0
 800c27a:	2000      	movs	r0, #0
 800c27c:	f7f6 fdd2 	bl	8002e24 <__aeabi_ddiv>
 800c280:	ec41 0b10 	vmov	d0, r0, r1
 800c284:	b003      	add	sp, #12
 800c286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c28a:	2d00      	cmp	r5, #0
 800c28c:	da09      	bge.n	800c2a2 <__ieee754_log10+0x4a>
 800c28e:	ee10 2a10 	vmov	r2, s0
 800c292:	462b      	mov	r3, r5
 800c294:	4620      	mov	r0, r4
 800c296:	4629      	mov	r1, r5
 800c298:	f7f6 fae6 	bl	8002868 <__aeabi_dsub>
 800c29c:	2200      	movs	r2, #0
 800c29e:	2300      	movs	r3, #0
 800c2a0:	e7ec      	b.n	800c27c <__ieee754_log10+0x24>
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	4b31      	ldr	r3, [pc, #196]	; (800c36c <__ieee754_log10+0x114>)
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	ee10 0a10 	vmov	r0, s0
 800c2ac:	f7f6 fc90 	bl	8002bd0 <__aeabi_dmul>
 800c2b0:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	460d      	mov	r5, r1
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	492d      	ldr	r1, [pc, #180]	; (800c370 <__ieee754_log10+0x118>)
 800c2bc:	428b      	cmp	r3, r1
 800c2be:	dd08      	ble.n	800c2d2 <__ieee754_log10+0x7a>
 800c2c0:	4622      	mov	r2, r4
 800c2c2:	462b      	mov	r3, r5
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	f7f6 fad0 	bl	800286c <__adddf3>
 800c2cc:	e7d8      	b.n	800c280 <__ieee754_log10+0x28>
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	e7f3      	b.n	800c2ba <__ieee754_log10+0x62>
 800c2d2:	1518      	asrs	r0, r3, #20
 800c2d4:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800c2d8:	4410      	add	r0, r2
 800c2da:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800c2de:	4448      	add	r0, r9
 800c2e0:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800c2e4:	f7f6 fc0e 	bl	8002b04 <__aeabi_i2d>
 800c2e8:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800c2ec:	3303      	adds	r3, #3
 800c2ee:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800c2f2:	ec45 4b10 	vmov	d0, r4, r5
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	460f      	mov	r7, r1
 800c2fa:	f001 fc9d 	bl	800dc38 <__ieee754_log>
 800c2fe:	a314      	add	r3, pc, #80	; (adr r3, 800c350 <__ieee754_log10+0xf8>)
 800c300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c304:	4630      	mov	r0, r6
 800c306:	4639      	mov	r1, r7
 800c308:	ed8d 0b00 	vstr	d0, [sp]
 800c30c:	f7f6 fc60 	bl	8002bd0 <__aeabi_dmul>
 800c310:	ed9d 0b00 	vldr	d0, [sp]
 800c314:	4604      	mov	r4, r0
 800c316:	460d      	mov	r5, r1
 800c318:	a30f      	add	r3, pc, #60	; (adr r3, 800c358 <__ieee754_log10+0x100>)
 800c31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31e:	ec51 0b10 	vmov	r0, r1, d0
 800c322:	f7f6 fc55 	bl	8002bd0 <__aeabi_dmul>
 800c326:	4602      	mov	r2, r0
 800c328:	460b      	mov	r3, r1
 800c32a:	4620      	mov	r0, r4
 800c32c:	4629      	mov	r1, r5
 800c32e:	f7f6 fa9d 	bl	800286c <__adddf3>
 800c332:	a30b      	add	r3, pc, #44	; (adr r3, 800c360 <__ieee754_log10+0x108>)
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	4604      	mov	r4, r0
 800c33a:	460d      	mov	r5, r1
 800c33c:	4630      	mov	r0, r6
 800c33e:	4639      	mov	r1, r7
 800c340:	f7f6 fc46 	bl	8002bd0 <__aeabi_dmul>
 800c344:	4602      	mov	r2, r0
 800c346:	460b      	mov	r3, r1
 800c348:	4620      	mov	r0, r4
 800c34a:	4629      	mov	r1, r5
 800c34c:	e7bc      	b.n	800c2c8 <__ieee754_log10+0x70>
 800c34e:	bf00      	nop
 800c350:	11f12b36 	.word	0x11f12b36
 800c354:	3d59fef3 	.word	0x3d59fef3
 800c358:	1526e50e 	.word	0x1526e50e
 800c35c:	3fdbcb7b 	.word	0x3fdbcb7b
 800c360:	509f6000 	.word	0x509f6000
 800c364:	3fd34413 	.word	0x3fd34413
 800c368:	c3500000 	.word	0xc3500000
 800c36c:	43500000 	.word	0x43500000
 800c370:	7fefffff 	.word	0x7fefffff
 800c374:	00000000 	.word	0x00000000

0800c378 <__ieee754_pow>:
 800c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37c:	b091      	sub	sp, #68	; 0x44
 800c37e:	ed8d 1b00 	vstr	d1, [sp]
 800c382:	e89d 0204 	ldmia.w	sp, {r2, r9}
 800c386:	ec57 6b10 	vmov	r6, r7, d0
 800c38a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c38e:	ea58 0302 	orrs.w	r3, r8, r2
 800c392:	ee10 aa10 	vmov	sl, s0
 800c396:	463d      	mov	r5, r7
 800c398:	f000 84bd 	beq.w	800cd16 <__ieee754_pow+0x99e>
 800c39c:	4b78      	ldr	r3, [pc, #480]	; (800c580 <__ieee754_pow+0x208>)
 800c39e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c3a2:	429c      	cmp	r4, r3
 800c3a4:	dc09      	bgt.n	800c3ba <__ieee754_pow+0x42>
 800c3a6:	d103      	bne.n	800c3b0 <__ieee754_pow+0x38>
 800c3a8:	b93e      	cbnz	r6, 800c3ba <__ieee754_pow+0x42>
 800c3aa:	45a0      	cmp	r8, r4
 800c3ac:	dc0d      	bgt.n	800c3ca <__ieee754_pow+0x52>
 800c3ae:	e001      	b.n	800c3b4 <__ieee754_pow+0x3c>
 800c3b0:	4598      	cmp	r8, r3
 800c3b2:	dc02      	bgt.n	800c3ba <__ieee754_pow+0x42>
 800c3b4:	4598      	cmp	r8, r3
 800c3b6:	d10e      	bne.n	800c3d6 <__ieee754_pow+0x5e>
 800c3b8:	b16a      	cbz	r2, 800c3d6 <__ieee754_pow+0x5e>
 800c3ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c3be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c3c2:	ea54 030a 	orrs.w	r3, r4, sl
 800c3c6:	f000 84a6 	beq.w	800cd16 <__ieee754_pow+0x99e>
 800c3ca:	486e      	ldr	r0, [pc, #440]	; (800c584 <__ieee754_pow+0x20c>)
 800c3cc:	b011      	add	sp, #68	; 0x44
 800c3ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d2:	f001 b981 	b.w	800d6d8 <nan>
 800c3d6:	2d00      	cmp	r5, #0
 800c3d8:	da53      	bge.n	800c482 <__ieee754_pow+0x10a>
 800c3da:	4b6b      	ldr	r3, [pc, #428]	; (800c588 <__ieee754_pow+0x210>)
 800c3dc:	4598      	cmp	r8, r3
 800c3de:	dc4d      	bgt.n	800c47c <__ieee754_pow+0x104>
 800c3e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c3e4:	4598      	cmp	r8, r3
 800c3e6:	dd4c      	ble.n	800c482 <__ieee754_pow+0x10a>
 800c3e8:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c3ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c3f0:	2b14      	cmp	r3, #20
 800c3f2:	dd26      	ble.n	800c442 <__ieee754_pow+0xca>
 800c3f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c3f8:	fa22 f103 	lsr.w	r1, r2, r3
 800c3fc:	fa01 f303 	lsl.w	r3, r1, r3
 800c400:	429a      	cmp	r2, r3
 800c402:	d13e      	bne.n	800c482 <__ieee754_pow+0x10a>
 800c404:	f001 0101 	and.w	r1, r1, #1
 800c408:	f1c1 0b02 	rsb	fp, r1, #2
 800c40c:	2a00      	cmp	r2, #0
 800c40e:	d15b      	bne.n	800c4c8 <__ieee754_pow+0x150>
 800c410:	4b5b      	ldr	r3, [pc, #364]	; (800c580 <__ieee754_pow+0x208>)
 800c412:	4598      	cmp	r8, r3
 800c414:	d124      	bne.n	800c460 <__ieee754_pow+0xe8>
 800c416:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c41a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c41e:	ea53 030a 	orrs.w	r3, r3, sl
 800c422:	f000 8478 	beq.w	800cd16 <__ieee754_pow+0x99e>
 800c426:	4b59      	ldr	r3, [pc, #356]	; (800c58c <__ieee754_pow+0x214>)
 800c428:	429c      	cmp	r4, r3
 800c42a:	dd2d      	ble.n	800c488 <__ieee754_pow+0x110>
 800c42c:	f1b9 0f00 	cmp.w	r9, #0
 800c430:	f280 8475 	bge.w	800cd1e <__ieee754_pow+0x9a6>
 800c434:	2000      	movs	r0, #0
 800c436:	2100      	movs	r1, #0
 800c438:	ec41 0b10 	vmov	d0, r0, r1
 800c43c:	b011      	add	sp, #68	; 0x44
 800c43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c442:	2a00      	cmp	r2, #0
 800c444:	d13e      	bne.n	800c4c4 <__ieee754_pow+0x14c>
 800c446:	f1c3 0314 	rsb	r3, r3, #20
 800c44a:	fa48 f103 	asr.w	r1, r8, r3
 800c44e:	fa01 f303 	lsl.w	r3, r1, r3
 800c452:	4598      	cmp	r8, r3
 800c454:	f040 846b 	bne.w	800cd2e <__ieee754_pow+0x9b6>
 800c458:	f001 0101 	and.w	r1, r1, #1
 800c45c:	f1c1 0b02 	rsb	fp, r1, #2
 800c460:	4b4b      	ldr	r3, [pc, #300]	; (800c590 <__ieee754_pow+0x218>)
 800c462:	4598      	cmp	r8, r3
 800c464:	d118      	bne.n	800c498 <__ieee754_pow+0x120>
 800c466:	f1b9 0f00 	cmp.w	r9, #0
 800c46a:	f280 845c 	bge.w	800cd26 <__ieee754_pow+0x9ae>
 800c46e:	4948      	ldr	r1, [pc, #288]	; (800c590 <__ieee754_pow+0x218>)
 800c470:	4632      	mov	r2, r6
 800c472:	463b      	mov	r3, r7
 800c474:	2000      	movs	r0, #0
 800c476:	f7f6 fcd5 	bl	8002e24 <__aeabi_ddiv>
 800c47a:	e7dd      	b.n	800c438 <__ieee754_pow+0xc0>
 800c47c:	f04f 0b02 	mov.w	fp, #2
 800c480:	e7c4      	b.n	800c40c <__ieee754_pow+0x94>
 800c482:	f04f 0b00 	mov.w	fp, #0
 800c486:	e7c1      	b.n	800c40c <__ieee754_pow+0x94>
 800c488:	f1b9 0f00 	cmp.w	r9, #0
 800c48c:	dad2      	bge.n	800c434 <__ieee754_pow+0xbc>
 800c48e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 800c492:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c496:	e7cf      	b.n	800c438 <__ieee754_pow+0xc0>
 800c498:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c49c:	d106      	bne.n	800c4ac <__ieee754_pow+0x134>
 800c49e:	4632      	mov	r2, r6
 800c4a0:	463b      	mov	r3, r7
 800c4a2:	4610      	mov	r0, r2
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	f7f6 fb93 	bl	8002bd0 <__aeabi_dmul>
 800c4aa:	e7c5      	b.n	800c438 <__ieee754_pow+0xc0>
 800c4ac:	4b39      	ldr	r3, [pc, #228]	; (800c594 <__ieee754_pow+0x21c>)
 800c4ae:	4599      	cmp	r9, r3
 800c4b0:	d10a      	bne.n	800c4c8 <__ieee754_pow+0x150>
 800c4b2:	2d00      	cmp	r5, #0
 800c4b4:	db08      	blt.n	800c4c8 <__ieee754_pow+0x150>
 800c4b6:	ec47 6b10 	vmov	d0, r6, r7
 800c4ba:	b011      	add	sp, #68	; 0x44
 800c4bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c0:	f000 bc6c 	b.w	800cd9c <__ieee754_sqrt>
 800c4c4:	f04f 0b00 	mov.w	fp, #0
 800c4c8:	ec47 6b10 	vmov	d0, r6, r7
 800c4cc:	f001 f8f3 	bl	800d6b6 <fabs>
 800c4d0:	ec51 0b10 	vmov	r0, r1, d0
 800c4d4:	f1ba 0f00 	cmp.w	sl, #0
 800c4d8:	d127      	bne.n	800c52a <__ieee754_pow+0x1b2>
 800c4da:	b124      	cbz	r4, 800c4e6 <__ieee754_pow+0x16e>
 800c4dc:	4b2c      	ldr	r3, [pc, #176]	; (800c590 <__ieee754_pow+0x218>)
 800c4de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d121      	bne.n	800c52a <__ieee754_pow+0x1b2>
 800c4e6:	f1b9 0f00 	cmp.w	r9, #0
 800c4ea:	da05      	bge.n	800c4f8 <__ieee754_pow+0x180>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	4927      	ldr	r1, [pc, #156]	; (800c590 <__ieee754_pow+0x218>)
 800c4f4:	f7f6 fc96 	bl	8002e24 <__aeabi_ddiv>
 800c4f8:	2d00      	cmp	r5, #0
 800c4fa:	da9d      	bge.n	800c438 <__ieee754_pow+0xc0>
 800c4fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c500:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c504:	ea54 030b 	orrs.w	r3, r4, fp
 800c508:	d108      	bne.n	800c51c <__ieee754_pow+0x1a4>
 800c50a:	4602      	mov	r2, r0
 800c50c:	460b      	mov	r3, r1
 800c50e:	4610      	mov	r0, r2
 800c510:	4619      	mov	r1, r3
 800c512:	f7f6 f9a9 	bl	8002868 <__aeabi_dsub>
 800c516:	4602      	mov	r2, r0
 800c518:	460b      	mov	r3, r1
 800c51a:	e7ac      	b.n	800c476 <__ieee754_pow+0xfe>
 800c51c:	f1bb 0f01 	cmp.w	fp, #1
 800c520:	d18a      	bne.n	800c438 <__ieee754_pow+0xc0>
 800c522:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c526:	4619      	mov	r1, r3
 800c528:	e786      	b.n	800c438 <__ieee754_pow+0xc0>
 800c52a:	0fed      	lsrs	r5, r5, #31
 800c52c:	1e6b      	subs	r3, r5, #1
 800c52e:	930d      	str	r3, [sp, #52]	; 0x34
 800c530:	ea5b 0303 	orrs.w	r3, fp, r3
 800c534:	d102      	bne.n	800c53c <__ieee754_pow+0x1c4>
 800c536:	4632      	mov	r2, r6
 800c538:	463b      	mov	r3, r7
 800c53a:	e7e8      	b.n	800c50e <__ieee754_pow+0x196>
 800c53c:	4b16      	ldr	r3, [pc, #88]	; (800c598 <__ieee754_pow+0x220>)
 800c53e:	4598      	cmp	r8, r3
 800c540:	f340 80fe 	ble.w	800c740 <__ieee754_pow+0x3c8>
 800c544:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c548:	4598      	cmp	r8, r3
 800c54a:	dd0a      	ble.n	800c562 <__ieee754_pow+0x1ea>
 800c54c:	4b0f      	ldr	r3, [pc, #60]	; (800c58c <__ieee754_pow+0x214>)
 800c54e:	429c      	cmp	r4, r3
 800c550:	dc0d      	bgt.n	800c56e <__ieee754_pow+0x1f6>
 800c552:	f1b9 0f00 	cmp.w	r9, #0
 800c556:	f6bf af6d 	bge.w	800c434 <__ieee754_pow+0xbc>
 800c55a:	a307      	add	r3, pc, #28	; (adr r3, 800c578 <__ieee754_pow+0x200>)
 800c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c560:	e79f      	b.n	800c4a2 <__ieee754_pow+0x12a>
 800c562:	4b0e      	ldr	r3, [pc, #56]	; (800c59c <__ieee754_pow+0x224>)
 800c564:	429c      	cmp	r4, r3
 800c566:	ddf4      	ble.n	800c552 <__ieee754_pow+0x1da>
 800c568:	4b09      	ldr	r3, [pc, #36]	; (800c590 <__ieee754_pow+0x218>)
 800c56a:	429c      	cmp	r4, r3
 800c56c:	dd18      	ble.n	800c5a0 <__ieee754_pow+0x228>
 800c56e:	f1b9 0f00 	cmp.w	r9, #0
 800c572:	dcf2      	bgt.n	800c55a <__ieee754_pow+0x1e2>
 800c574:	e75e      	b.n	800c434 <__ieee754_pow+0xbc>
 800c576:	bf00      	nop
 800c578:	8800759c 	.word	0x8800759c
 800c57c:	7e37e43c 	.word	0x7e37e43c
 800c580:	7ff00000 	.word	0x7ff00000
 800c584:	0801043d 	.word	0x0801043d
 800c588:	433fffff 	.word	0x433fffff
 800c58c:	3fefffff 	.word	0x3fefffff
 800c590:	3ff00000 	.word	0x3ff00000
 800c594:	3fe00000 	.word	0x3fe00000
 800c598:	41e00000 	.word	0x41e00000
 800c59c:	3feffffe 	.word	0x3feffffe
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	4b63      	ldr	r3, [pc, #396]	; (800c730 <__ieee754_pow+0x3b8>)
 800c5a4:	f7f6 f960 	bl	8002868 <__aeabi_dsub>
 800c5a8:	a355      	add	r3, pc, #340	; (adr r3, 800c700 <__ieee754_pow+0x388>)
 800c5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	460d      	mov	r5, r1
 800c5b2:	f7f6 fb0d 	bl	8002bd0 <__aeabi_dmul>
 800c5b6:	a354      	add	r3, pc, #336	; (adr r3, 800c708 <__ieee754_pow+0x390>)
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	4606      	mov	r6, r0
 800c5be:	460f      	mov	r7, r1
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	f7f6 fb04 	bl	8002bd0 <__aeabi_dmul>
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5ce:	4b59      	ldr	r3, [pc, #356]	; (800c734 <__ieee754_pow+0x3bc>)
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	f7f6 fafc 	bl	8002bd0 <__aeabi_dmul>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	a14c      	add	r1, pc, #304	; (adr r1, 800c710 <__ieee754_pow+0x398>)
 800c5de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5e2:	f7f6 f941 	bl	8002868 <__aeabi_dsub>
 800c5e6:	4622      	mov	r2, r4
 800c5e8:	462b      	mov	r3, r5
 800c5ea:	f7f6 faf1 	bl	8002bd0 <__aeabi_dmul>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	2000      	movs	r0, #0
 800c5f4:	4950      	ldr	r1, [pc, #320]	; (800c738 <__ieee754_pow+0x3c0>)
 800c5f6:	f7f6 f937 	bl	8002868 <__aeabi_dsub>
 800c5fa:	4622      	mov	r2, r4
 800c5fc:	462b      	mov	r3, r5
 800c5fe:	4680      	mov	r8, r0
 800c600:	4689      	mov	r9, r1
 800c602:	4620      	mov	r0, r4
 800c604:	4629      	mov	r1, r5
 800c606:	f7f6 fae3 	bl	8002bd0 <__aeabi_dmul>
 800c60a:	4602      	mov	r2, r0
 800c60c:	460b      	mov	r3, r1
 800c60e:	4640      	mov	r0, r8
 800c610:	4649      	mov	r1, r9
 800c612:	f7f6 fadd 	bl	8002bd0 <__aeabi_dmul>
 800c616:	a340      	add	r3, pc, #256	; (adr r3, 800c718 <__ieee754_pow+0x3a0>)
 800c618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61c:	f7f6 fad8 	bl	8002bd0 <__aeabi_dmul>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c628:	f7f6 f91e 	bl	8002868 <__aeabi_dsub>
 800c62c:	4602      	mov	r2, r0
 800c62e:	460b      	mov	r3, r1
 800c630:	4604      	mov	r4, r0
 800c632:	460d      	mov	r5, r1
 800c634:	4630      	mov	r0, r6
 800c636:	4639      	mov	r1, r7
 800c638:	f7f6 f918 	bl	800286c <__adddf3>
 800c63c:	2000      	movs	r0, #0
 800c63e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c642:	4632      	mov	r2, r6
 800c644:	463b      	mov	r3, r7
 800c646:	f7f6 f90f 	bl	8002868 <__aeabi_dsub>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4620      	mov	r0, r4
 800c650:	4629      	mov	r1, r5
 800c652:	f7f6 f909 	bl	8002868 <__aeabi_dsub>
 800c656:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c658:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c65c:	4313      	orrs	r3, r2
 800c65e:	4606      	mov	r6, r0
 800c660:	460f      	mov	r7, r1
 800c662:	f040 81eb 	bne.w	800ca3c <__ieee754_pow+0x6c4>
 800c666:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800c720 <__ieee754_pow+0x3a8>
 800c66a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800c66e:	2400      	movs	r4, #0
 800c670:	4622      	mov	r2, r4
 800c672:	462b      	mov	r3, r5
 800c674:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c678:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c67c:	f7f6 f8f4 	bl	8002868 <__aeabi_dsub>
 800c680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c684:	f7f6 faa4 	bl	8002bd0 <__aeabi_dmul>
 800c688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c68c:	4680      	mov	r8, r0
 800c68e:	4689      	mov	r9, r1
 800c690:	4630      	mov	r0, r6
 800c692:	4639      	mov	r1, r7
 800c694:	f7f6 fa9c 	bl	8002bd0 <__aeabi_dmul>
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	4640      	mov	r0, r8
 800c69e:	4649      	mov	r1, r9
 800c6a0:	f7f6 f8e4 	bl	800286c <__adddf3>
 800c6a4:	4622      	mov	r2, r4
 800c6a6:	462b      	mov	r3, r5
 800c6a8:	4680      	mov	r8, r0
 800c6aa:	4689      	mov	r9, r1
 800c6ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6b0:	f7f6 fa8e 	bl	8002bd0 <__aeabi_dmul>
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	4604      	mov	r4, r0
 800c6b8:	460d      	mov	r5, r1
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	4649      	mov	r1, r9
 800c6be:	4640      	mov	r0, r8
 800c6c0:	e9cd 4500 	strd	r4, r5, [sp]
 800c6c4:	f7f6 f8d2 	bl	800286c <__adddf3>
 800c6c8:	4b1c      	ldr	r3, [pc, #112]	; (800c73c <__ieee754_pow+0x3c4>)
 800c6ca:	4299      	cmp	r1, r3
 800c6cc:	4606      	mov	r6, r0
 800c6ce:	460f      	mov	r7, r1
 800c6d0:	468b      	mov	fp, r1
 800c6d2:	f340 82f7 	ble.w	800ccc4 <__ieee754_pow+0x94c>
 800c6d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c6da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c6de:	4303      	orrs	r3, r0
 800c6e0:	f000 81ea 	beq.w	800cab8 <__ieee754_pow+0x740>
 800c6e4:	a310      	add	r3, pc, #64	; (adr r3, 800c728 <__ieee754_pow+0x3b0>)
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ee:	f7f6 fa6f 	bl	8002bd0 <__aeabi_dmul>
 800c6f2:	a30d      	add	r3, pc, #52	; (adr r3, 800c728 <__ieee754_pow+0x3b0>)
 800c6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f8:	e6d5      	b.n	800c4a6 <__ieee754_pow+0x12e>
 800c6fa:	bf00      	nop
 800c6fc:	f3af 8000 	nop.w
 800c700:	60000000 	.word	0x60000000
 800c704:	3ff71547 	.word	0x3ff71547
 800c708:	f85ddf44 	.word	0xf85ddf44
 800c70c:	3e54ae0b 	.word	0x3e54ae0b
 800c710:	55555555 	.word	0x55555555
 800c714:	3fd55555 	.word	0x3fd55555
 800c718:	652b82fe 	.word	0x652b82fe
 800c71c:	3ff71547 	.word	0x3ff71547
 800c720:	00000000 	.word	0x00000000
 800c724:	bff00000 	.word	0xbff00000
 800c728:	8800759c 	.word	0x8800759c
 800c72c:	7e37e43c 	.word	0x7e37e43c
 800c730:	3ff00000 	.word	0x3ff00000
 800c734:	3fd00000 	.word	0x3fd00000
 800c738:	3fe00000 	.word	0x3fe00000
 800c73c:	408fffff 	.word	0x408fffff
 800c740:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c744:	f04f 0200 	mov.w	r2, #0
 800c748:	da05      	bge.n	800c756 <__ieee754_pow+0x3de>
 800c74a:	4bd3      	ldr	r3, [pc, #844]	; (800ca98 <__ieee754_pow+0x720>)
 800c74c:	f7f6 fa40 	bl	8002bd0 <__aeabi_dmul>
 800c750:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c754:	460c      	mov	r4, r1
 800c756:	1523      	asrs	r3, r4, #20
 800c758:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c75c:	4413      	add	r3, r2
 800c75e:	9307      	str	r3, [sp, #28]
 800c760:	4bce      	ldr	r3, [pc, #824]	; (800ca9c <__ieee754_pow+0x724>)
 800c762:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c766:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c76a:	429c      	cmp	r4, r3
 800c76c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c770:	dd08      	ble.n	800c784 <__ieee754_pow+0x40c>
 800c772:	4bcb      	ldr	r3, [pc, #812]	; (800caa0 <__ieee754_pow+0x728>)
 800c774:	429c      	cmp	r4, r3
 800c776:	f340 815e 	ble.w	800ca36 <__ieee754_pow+0x6be>
 800c77a:	9b07      	ldr	r3, [sp, #28]
 800c77c:	3301      	adds	r3, #1
 800c77e:	9307      	str	r3, [sp, #28]
 800c780:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c784:	f04f 0a00 	mov.w	sl, #0
 800c788:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c78c:	930c      	str	r3, [sp, #48]	; 0x30
 800c78e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c790:	4bc4      	ldr	r3, [pc, #784]	; (800caa4 <__ieee754_pow+0x72c>)
 800c792:	4413      	add	r3, r2
 800c794:	ed93 7b00 	vldr	d7, [r3]
 800c798:	4629      	mov	r1, r5
 800c79a:	ec53 2b17 	vmov	r2, r3, d7
 800c79e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c7a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c7a6:	f7f6 f85f 	bl	8002868 <__aeabi_dsub>
 800c7aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	460f      	mov	r7, r1
 800c7b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c7b6:	f7f6 f859 	bl	800286c <__adddf3>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	460b      	mov	r3, r1
 800c7be:	2000      	movs	r0, #0
 800c7c0:	49b9      	ldr	r1, [pc, #740]	; (800caa8 <__ieee754_pow+0x730>)
 800c7c2:	f7f6 fb2f 	bl	8002e24 <__aeabi_ddiv>
 800c7c6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	4639      	mov	r1, r7
 800c7d2:	f7f6 f9fd 	bl	8002bd0 <__aeabi_dmul>
 800c7d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c7da:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c7de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9302      	str	r3, [sp, #8]
 800c7e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7ea:	106d      	asrs	r5, r5, #1
 800c7ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c7f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c7fa:	4640      	mov	r0, r8
 800c7fc:	4649      	mov	r1, r9
 800c7fe:	4614      	mov	r4, r2
 800c800:	461d      	mov	r5, r3
 800c802:	f7f6 f9e5 	bl	8002bd0 <__aeabi_dmul>
 800c806:	4602      	mov	r2, r0
 800c808:	460b      	mov	r3, r1
 800c80a:	4630      	mov	r0, r6
 800c80c:	4639      	mov	r1, r7
 800c80e:	f7f6 f82b 	bl	8002868 <__aeabi_dsub>
 800c812:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c816:	4606      	mov	r6, r0
 800c818:	460f      	mov	r7, r1
 800c81a:	4620      	mov	r0, r4
 800c81c:	4629      	mov	r1, r5
 800c81e:	f7f6 f823 	bl	8002868 <__aeabi_dsub>
 800c822:	4602      	mov	r2, r0
 800c824:	460b      	mov	r3, r1
 800c826:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c82a:	f7f6 f81d 	bl	8002868 <__aeabi_dsub>
 800c82e:	4642      	mov	r2, r8
 800c830:	464b      	mov	r3, r9
 800c832:	f7f6 f9cd 	bl	8002bd0 <__aeabi_dmul>
 800c836:	4602      	mov	r2, r0
 800c838:	460b      	mov	r3, r1
 800c83a:	4630      	mov	r0, r6
 800c83c:	4639      	mov	r1, r7
 800c83e:	f7f6 f813 	bl	8002868 <__aeabi_dsub>
 800c842:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c846:	f7f6 f9c3 	bl	8002bd0 <__aeabi_dmul>
 800c84a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c84e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c852:	4610      	mov	r0, r2
 800c854:	4619      	mov	r1, r3
 800c856:	f7f6 f9bb 	bl	8002bd0 <__aeabi_dmul>
 800c85a:	a37b      	add	r3, pc, #492	; (adr r3, 800ca48 <__ieee754_pow+0x6d0>)
 800c85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c860:	4604      	mov	r4, r0
 800c862:	460d      	mov	r5, r1
 800c864:	f7f6 f9b4 	bl	8002bd0 <__aeabi_dmul>
 800c868:	a379      	add	r3, pc, #484	; (adr r3, 800ca50 <__ieee754_pow+0x6d8>)
 800c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86e:	f7f5 fffd 	bl	800286c <__adddf3>
 800c872:	4622      	mov	r2, r4
 800c874:	462b      	mov	r3, r5
 800c876:	f7f6 f9ab 	bl	8002bd0 <__aeabi_dmul>
 800c87a:	a377      	add	r3, pc, #476	; (adr r3, 800ca58 <__ieee754_pow+0x6e0>)
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	f7f5 fff4 	bl	800286c <__adddf3>
 800c884:	4622      	mov	r2, r4
 800c886:	462b      	mov	r3, r5
 800c888:	f7f6 f9a2 	bl	8002bd0 <__aeabi_dmul>
 800c88c:	a374      	add	r3, pc, #464	; (adr r3, 800ca60 <__ieee754_pow+0x6e8>)
 800c88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c892:	f7f5 ffeb 	bl	800286c <__adddf3>
 800c896:	4622      	mov	r2, r4
 800c898:	462b      	mov	r3, r5
 800c89a:	f7f6 f999 	bl	8002bd0 <__aeabi_dmul>
 800c89e:	a372      	add	r3, pc, #456	; (adr r3, 800ca68 <__ieee754_pow+0x6f0>)
 800c8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a4:	f7f5 ffe2 	bl	800286c <__adddf3>
 800c8a8:	4622      	mov	r2, r4
 800c8aa:	462b      	mov	r3, r5
 800c8ac:	f7f6 f990 	bl	8002bd0 <__aeabi_dmul>
 800c8b0:	a36f      	add	r3, pc, #444	; (adr r3, 800ca70 <__ieee754_pow+0x6f8>)
 800c8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b6:	f7f5 ffd9 	bl	800286c <__adddf3>
 800c8ba:	4622      	mov	r2, r4
 800c8bc:	4606      	mov	r6, r0
 800c8be:	460f      	mov	r7, r1
 800c8c0:	462b      	mov	r3, r5
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	f7f6 f983 	bl	8002bd0 <__aeabi_dmul>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	f7f6 f97d 	bl	8002bd0 <__aeabi_dmul>
 800c8d6:	4642      	mov	r2, r8
 800c8d8:	4604      	mov	r4, r0
 800c8da:	460d      	mov	r5, r1
 800c8dc:	464b      	mov	r3, r9
 800c8de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8e2:	f7f5 ffc3 	bl	800286c <__adddf3>
 800c8e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c8ea:	f7f6 f971 	bl	8002bd0 <__aeabi_dmul>
 800c8ee:	4622      	mov	r2, r4
 800c8f0:	462b      	mov	r3, r5
 800c8f2:	f7f5 ffbb 	bl	800286c <__adddf3>
 800c8f6:	4642      	mov	r2, r8
 800c8f8:	4606      	mov	r6, r0
 800c8fa:	460f      	mov	r7, r1
 800c8fc:	464b      	mov	r3, r9
 800c8fe:	4640      	mov	r0, r8
 800c900:	4649      	mov	r1, r9
 800c902:	f7f6 f965 	bl	8002bd0 <__aeabi_dmul>
 800c906:	2200      	movs	r2, #0
 800c908:	4b68      	ldr	r3, [pc, #416]	; (800caac <__ieee754_pow+0x734>)
 800c90a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c90e:	f7f5 ffad 	bl	800286c <__adddf3>
 800c912:	4632      	mov	r2, r6
 800c914:	463b      	mov	r3, r7
 800c916:	f7f5 ffa9 	bl	800286c <__adddf3>
 800c91a:	9802      	ldr	r0, [sp, #8]
 800c91c:	460d      	mov	r5, r1
 800c91e:	4604      	mov	r4, r0
 800c920:	4602      	mov	r2, r0
 800c922:	460b      	mov	r3, r1
 800c924:	4640      	mov	r0, r8
 800c926:	4649      	mov	r1, r9
 800c928:	f7f6 f952 	bl	8002bd0 <__aeabi_dmul>
 800c92c:	2200      	movs	r2, #0
 800c92e:	4680      	mov	r8, r0
 800c930:	4689      	mov	r9, r1
 800c932:	4b5e      	ldr	r3, [pc, #376]	; (800caac <__ieee754_pow+0x734>)
 800c934:	4620      	mov	r0, r4
 800c936:	4629      	mov	r1, r5
 800c938:	f7f5 ff96 	bl	8002868 <__aeabi_dsub>
 800c93c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c940:	f7f5 ff92 	bl	8002868 <__aeabi_dsub>
 800c944:	4602      	mov	r2, r0
 800c946:	460b      	mov	r3, r1
 800c948:	4630      	mov	r0, r6
 800c94a:	4639      	mov	r1, r7
 800c94c:	f7f5 ff8c 	bl	8002868 <__aeabi_dsub>
 800c950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c954:	f7f6 f93c 	bl	8002bd0 <__aeabi_dmul>
 800c958:	4622      	mov	r2, r4
 800c95a:	4606      	mov	r6, r0
 800c95c:	460f      	mov	r7, r1
 800c95e:	462b      	mov	r3, r5
 800c960:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c964:	f7f6 f934 	bl	8002bd0 <__aeabi_dmul>
 800c968:	4602      	mov	r2, r0
 800c96a:	460b      	mov	r3, r1
 800c96c:	4630      	mov	r0, r6
 800c96e:	4639      	mov	r1, r7
 800c970:	f7f5 ff7c 	bl	800286c <__adddf3>
 800c974:	4606      	mov	r6, r0
 800c976:	460f      	mov	r7, r1
 800c978:	4602      	mov	r2, r0
 800c97a:	460b      	mov	r3, r1
 800c97c:	4640      	mov	r0, r8
 800c97e:	4649      	mov	r1, r9
 800c980:	f7f5 ff74 	bl	800286c <__adddf3>
 800c984:	9802      	ldr	r0, [sp, #8]
 800c986:	a33c      	add	r3, pc, #240	; (adr r3, 800ca78 <__ieee754_pow+0x700>)
 800c988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98c:	4604      	mov	r4, r0
 800c98e:	460d      	mov	r5, r1
 800c990:	f7f6 f91e 	bl	8002bd0 <__aeabi_dmul>
 800c994:	4642      	mov	r2, r8
 800c996:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c99a:	464b      	mov	r3, r9
 800c99c:	4620      	mov	r0, r4
 800c99e:	4629      	mov	r1, r5
 800c9a0:	f7f5 ff62 	bl	8002868 <__aeabi_dsub>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	4639      	mov	r1, r7
 800c9ac:	f7f5 ff5c 	bl	8002868 <__aeabi_dsub>
 800c9b0:	a333      	add	r3, pc, #204	; (adr r3, 800ca80 <__ieee754_pow+0x708>)
 800c9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b6:	f7f6 f90b 	bl	8002bd0 <__aeabi_dmul>
 800c9ba:	a333      	add	r3, pc, #204	; (adr r3, 800ca88 <__ieee754_pow+0x710>)
 800c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c0:	4606      	mov	r6, r0
 800c9c2:	460f      	mov	r7, r1
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	4629      	mov	r1, r5
 800c9c8:	f7f6 f902 	bl	8002bd0 <__aeabi_dmul>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	4639      	mov	r1, r7
 800c9d4:	f7f5 ff4a 	bl	800286c <__adddf3>
 800c9d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9da:	4b35      	ldr	r3, [pc, #212]	; (800cab0 <__ieee754_pow+0x738>)
 800c9dc:	4413      	add	r3, r2
 800c9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e2:	f7f5 ff43 	bl	800286c <__adddf3>
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	9807      	ldr	r0, [sp, #28]
 800c9ea:	460d      	mov	r5, r1
 800c9ec:	f7f6 f88a 	bl	8002b04 <__aeabi_i2d>
 800c9f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9f2:	4b30      	ldr	r3, [pc, #192]	; (800cab4 <__ieee754_pow+0x73c>)
 800c9f4:	4413      	add	r3, r2
 800c9f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	460f      	mov	r7, r1
 800c9fe:	4622      	mov	r2, r4
 800ca00:	462b      	mov	r3, r5
 800ca02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca06:	f7f5 ff31 	bl	800286c <__adddf3>
 800ca0a:	4642      	mov	r2, r8
 800ca0c:	464b      	mov	r3, r9
 800ca0e:	f7f5 ff2d 	bl	800286c <__adddf3>
 800ca12:	4632      	mov	r2, r6
 800ca14:	463b      	mov	r3, r7
 800ca16:	f7f5 ff29 	bl	800286c <__adddf3>
 800ca1a:	9802      	ldr	r0, [sp, #8]
 800ca1c:	4632      	mov	r2, r6
 800ca1e:	463b      	mov	r3, r7
 800ca20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca24:	f7f5 ff20 	bl	8002868 <__aeabi_dsub>
 800ca28:	4642      	mov	r2, r8
 800ca2a:	464b      	mov	r3, r9
 800ca2c:	f7f5 ff1c 	bl	8002868 <__aeabi_dsub>
 800ca30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ca34:	e607      	b.n	800c646 <__ieee754_pow+0x2ce>
 800ca36:	f04f 0a01 	mov.w	sl, #1
 800ca3a:	e6a5      	b.n	800c788 <__ieee754_pow+0x410>
 800ca3c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800ca90 <__ieee754_pow+0x718>
 800ca40:	e613      	b.n	800c66a <__ieee754_pow+0x2f2>
 800ca42:	bf00      	nop
 800ca44:	f3af 8000 	nop.w
 800ca48:	4a454eef 	.word	0x4a454eef
 800ca4c:	3fca7e28 	.word	0x3fca7e28
 800ca50:	93c9db65 	.word	0x93c9db65
 800ca54:	3fcd864a 	.word	0x3fcd864a
 800ca58:	a91d4101 	.word	0xa91d4101
 800ca5c:	3fd17460 	.word	0x3fd17460
 800ca60:	518f264d 	.word	0x518f264d
 800ca64:	3fd55555 	.word	0x3fd55555
 800ca68:	db6fabff 	.word	0xdb6fabff
 800ca6c:	3fdb6db6 	.word	0x3fdb6db6
 800ca70:	33333303 	.word	0x33333303
 800ca74:	3fe33333 	.word	0x3fe33333
 800ca78:	e0000000 	.word	0xe0000000
 800ca7c:	3feec709 	.word	0x3feec709
 800ca80:	dc3a03fd 	.word	0xdc3a03fd
 800ca84:	3feec709 	.word	0x3feec709
 800ca88:	145b01f5 	.word	0x145b01f5
 800ca8c:	be3e2fe0 	.word	0xbe3e2fe0
 800ca90:	00000000 	.word	0x00000000
 800ca94:	3ff00000 	.word	0x3ff00000
 800ca98:	43400000 	.word	0x43400000
 800ca9c:	0003988e 	.word	0x0003988e
 800caa0:	000bb679 	.word	0x000bb679
 800caa4:	08024498 	.word	0x08024498
 800caa8:	3ff00000 	.word	0x3ff00000
 800caac:	40080000 	.word	0x40080000
 800cab0:	080244b8 	.word	0x080244b8
 800cab4:	080244a8 	.word	0x080244a8
 800cab8:	a3b6      	add	r3, pc, #728	; (adr r3, 800cd94 <__ieee754_pow+0xa1c>)
 800caba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabe:	4640      	mov	r0, r8
 800cac0:	4649      	mov	r1, r9
 800cac2:	f7f5 fed3 	bl	800286c <__adddf3>
 800cac6:	4622      	mov	r2, r4
 800cac8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cacc:	462b      	mov	r3, r5
 800cace:	4630      	mov	r0, r6
 800cad0:	4639      	mov	r1, r7
 800cad2:	f7f5 fec9 	bl	8002868 <__aeabi_dsub>
 800cad6:	4602      	mov	r2, r0
 800cad8:	460b      	mov	r3, r1
 800cada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cade:	f7f6 fb07 	bl	80030f0 <__aeabi_dcmpgt>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	f47f adfe 	bne.w	800c6e4 <__ieee754_pow+0x36c>
 800cae8:	4aa5      	ldr	r2, [pc, #660]	; (800cd80 <__ieee754_pow+0xa08>)
 800caea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800caee:	4293      	cmp	r3, r2
 800caf0:	f340 810c 	ble.w	800cd0c <__ieee754_pow+0x994>
 800caf4:	151b      	asrs	r3, r3, #20
 800caf6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cafa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cafe:	fa4a f303 	asr.w	r3, sl, r3
 800cb02:	445b      	add	r3, fp
 800cb04:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cb08:	4e9e      	ldr	r6, [pc, #632]	; (800cd84 <__ieee754_pow+0xa0c>)
 800cb0a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cb0e:	4116      	asrs	r6, r2
 800cb10:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cb14:	2000      	movs	r0, #0
 800cb16:	ea23 0106 	bic.w	r1, r3, r6
 800cb1a:	f1c2 0214 	rsb	r2, r2, #20
 800cb1e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cb22:	fa4a fa02 	asr.w	sl, sl, r2
 800cb26:	f1bb 0f00 	cmp.w	fp, #0
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	4620      	mov	r0, r4
 800cb30:	4629      	mov	r1, r5
 800cb32:	bfb8      	it	lt
 800cb34:	f1ca 0a00 	rsblt	sl, sl, #0
 800cb38:	f7f5 fe96 	bl	8002868 <__aeabi_dsub>
 800cb3c:	e9cd 0100 	strd	r0, r1, [sp]
 800cb40:	4642      	mov	r2, r8
 800cb42:	464b      	mov	r3, r9
 800cb44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb48:	f7f5 fe90 	bl	800286c <__adddf3>
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	a37a      	add	r3, pc, #488	; (adr r3, 800cd38 <__ieee754_pow+0x9c0>)
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	4604      	mov	r4, r0
 800cb56:	460d      	mov	r5, r1
 800cb58:	f7f6 f83a 	bl	8002bd0 <__aeabi_dmul>
 800cb5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb60:	4606      	mov	r6, r0
 800cb62:	460f      	mov	r7, r1
 800cb64:	4620      	mov	r0, r4
 800cb66:	4629      	mov	r1, r5
 800cb68:	f7f5 fe7e 	bl	8002868 <__aeabi_dsub>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	460b      	mov	r3, r1
 800cb70:	4640      	mov	r0, r8
 800cb72:	4649      	mov	r1, r9
 800cb74:	f7f5 fe78 	bl	8002868 <__aeabi_dsub>
 800cb78:	a371      	add	r3, pc, #452	; (adr r3, 800cd40 <__ieee754_pow+0x9c8>)
 800cb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7e:	f7f6 f827 	bl	8002bd0 <__aeabi_dmul>
 800cb82:	a371      	add	r3, pc, #452	; (adr r3, 800cd48 <__ieee754_pow+0x9d0>)
 800cb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb88:	4680      	mov	r8, r0
 800cb8a:	4689      	mov	r9, r1
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	4629      	mov	r1, r5
 800cb90:	f7f6 f81e 	bl	8002bd0 <__aeabi_dmul>
 800cb94:	4602      	mov	r2, r0
 800cb96:	460b      	mov	r3, r1
 800cb98:	4640      	mov	r0, r8
 800cb9a:	4649      	mov	r1, r9
 800cb9c:	f7f5 fe66 	bl	800286c <__adddf3>
 800cba0:	4604      	mov	r4, r0
 800cba2:	460d      	mov	r5, r1
 800cba4:	4602      	mov	r2, r0
 800cba6:	460b      	mov	r3, r1
 800cba8:	4630      	mov	r0, r6
 800cbaa:	4639      	mov	r1, r7
 800cbac:	f7f5 fe5e 	bl	800286c <__adddf3>
 800cbb0:	4632      	mov	r2, r6
 800cbb2:	463b      	mov	r3, r7
 800cbb4:	4680      	mov	r8, r0
 800cbb6:	4689      	mov	r9, r1
 800cbb8:	f7f5 fe56 	bl	8002868 <__aeabi_dsub>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	4629      	mov	r1, r5
 800cbc4:	f7f5 fe50 	bl	8002868 <__aeabi_dsub>
 800cbc8:	4642      	mov	r2, r8
 800cbca:	4606      	mov	r6, r0
 800cbcc:	460f      	mov	r7, r1
 800cbce:	464b      	mov	r3, r9
 800cbd0:	4640      	mov	r0, r8
 800cbd2:	4649      	mov	r1, r9
 800cbd4:	f7f5 fffc 	bl	8002bd0 <__aeabi_dmul>
 800cbd8:	a35d      	add	r3, pc, #372	; (adr r3, 800cd50 <__ieee754_pow+0x9d8>)
 800cbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbde:	4604      	mov	r4, r0
 800cbe0:	460d      	mov	r5, r1
 800cbe2:	f7f5 fff5 	bl	8002bd0 <__aeabi_dmul>
 800cbe6:	a35c      	add	r3, pc, #368	; (adr r3, 800cd58 <__ieee754_pow+0x9e0>)
 800cbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbec:	f7f5 fe3c 	bl	8002868 <__aeabi_dsub>
 800cbf0:	4622      	mov	r2, r4
 800cbf2:	462b      	mov	r3, r5
 800cbf4:	f7f5 ffec 	bl	8002bd0 <__aeabi_dmul>
 800cbf8:	a359      	add	r3, pc, #356	; (adr r3, 800cd60 <__ieee754_pow+0x9e8>)
 800cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfe:	f7f5 fe35 	bl	800286c <__adddf3>
 800cc02:	4622      	mov	r2, r4
 800cc04:	462b      	mov	r3, r5
 800cc06:	f7f5 ffe3 	bl	8002bd0 <__aeabi_dmul>
 800cc0a:	a357      	add	r3, pc, #348	; (adr r3, 800cd68 <__ieee754_pow+0x9f0>)
 800cc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc10:	f7f5 fe2a 	bl	8002868 <__aeabi_dsub>
 800cc14:	4622      	mov	r2, r4
 800cc16:	462b      	mov	r3, r5
 800cc18:	f7f5 ffda 	bl	8002bd0 <__aeabi_dmul>
 800cc1c:	a354      	add	r3, pc, #336	; (adr r3, 800cd70 <__ieee754_pow+0x9f8>)
 800cc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc22:	f7f5 fe23 	bl	800286c <__adddf3>
 800cc26:	4622      	mov	r2, r4
 800cc28:	462b      	mov	r3, r5
 800cc2a:	f7f5 ffd1 	bl	8002bd0 <__aeabi_dmul>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	460b      	mov	r3, r1
 800cc32:	4640      	mov	r0, r8
 800cc34:	4649      	mov	r1, r9
 800cc36:	f7f5 fe17 	bl	8002868 <__aeabi_dsub>
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	460d      	mov	r5, r1
 800cc3e:	4602      	mov	r2, r0
 800cc40:	460b      	mov	r3, r1
 800cc42:	4640      	mov	r0, r8
 800cc44:	4649      	mov	r1, r9
 800cc46:	f7f5 ffc3 	bl	8002bd0 <__aeabi_dmul>
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	e9cd 0100 	strd	r0, r1, [sp]
 800cc50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc54:	4620      	mov	r0, r4
 800cc56:	4629      	mov	r1, r5
 800cc58:	f7f5 fe06 	bl	8002868 <__aeabi_dsub>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	460b      	mov	r3, r1
 800cc60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc64:	f7f6 f8de 	bl	8002e24 <__aeabi_ddiv>
 800cc68:	4632      	mov	r2, r6
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	460d      	mov	r5, r1
 800cc6e:	463b      	mov	r3, r7
 800cc70:	4640      	mov	r0, r8
 800cc72:	4649      	mov	r1, r9
 800cc74:	f7f5 ffac 	bl	8002bd0 <__aeabi_dmul>
 800cc78:	4632      	mov	r2, r6
 800cc7a:	463b      	mov	r3, r7
 800cc7c:	f7f5 fdf6 	bl	800286c <__adddf3>
 800cc80:	4602      	mov	r2, r0
 800cc82:	460b      	mov	r3, r1
 800cc84:	4620      	mov	r0, r4
 800cc86:	4629      	mov	r1, r5
 800cc88:	f7f5 fdee 	bl	8002868 <__aeabi_dsub>
 800cc8c:	4642      	mov	r2, r8
 800cc8e:	464b      	mov	r3, r9
 800cc90:	f7f5 fdea 	bl	8002868 <__aeabi_dsub>
 800cc94:	4602      	mov	r2, r0
 800cc96:	460b      	mov	r3, r1
 800cc98:	2000      	movs	r0, #0
 800cc9a:	493b      	ldr	r1, [pc, #236]	; (800cd88 <__ieee754_pow+0xa10>)
 800cc9c:	f7f5 fde4 	bl	8002868 <__aeabi_dsub>
 800cca0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800cca4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800cca8:	4602      	mov	r2, r0
 800ccaa:	460b      	mov	r3, r1
 800ccac:	da31      	bge.n	800cd12 <__ieee754_pow+0x99a>
 800ccae:	4650      	mov	r0, sl
 800ccb0:	ec43 2b10 	vmov	d0, r2, r3
 800ccb4:	f000 fda0 	bl	800d7f8 <scalbn>
 800ccb8:	ec51 0b10 	vmov	r0, r1, d0
 800ccbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccc0:	f7ff bbf1 	b.w	800c4a6 <__ieee754_pow+0x12e>
 800ccc4:	4b31      	ldr	r3, [pc, #196]	; (800cd8c <__ieee754_pow+0xa14>)
 800ccc6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ccca:	429e      	cmp	r6, r3
 800cccc:	f77f af0c 	ble.w	800cae8 <__ieee754_pow+0x770>
 800ccd0:	4b2f      	ldr	r3, [pc, #188]	; (800cd90 <__ieee754_pow+0xa18>)
 800ccd2:	440b      	add	r3, r1
 800ccd4:	4303      	orrs	r3, r0
 800ccd6:	d00b      	beq.n	800ccf0 <__ieee754_pow+0x978>
 800ccd8:	a327      	add	r3, pc, #156	; (adr r3, 800cd78 <__ieee754_pow+0xa00>)
 800ccda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cce2:	f7f5 ff75 	bl	8002bd0 <__aeabi_dmul>
 800cce6:	a324      	add	r3, pc, #144	; (adr r3, 800cd78 <__ieee754_pow+0xa00>)
 800cce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccec:	f7ff bbdb 	b.w	800c4a6 <__ieee754_pow+0x12e>
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	462b      	mov	r3, r5
 800ccf4:	f7f5 fdb8 	bl	8002868 <__aeabi_dsub>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	4649      	mov	r1, r9
 800cd00:	f7f6 f9e2 	bl	80030c8 <__aeabi_dcmple>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	f43f aeef 	beq.w	800cae8 <__ieee754_pow+0x770>
 800cd0a:	e7e5      	b.n	800ccd8 <__ieee754_pow+0x960>
 800cd0c:	f04f 0a00 	mov.w	sl, #0
 800cd10:	e716      	b.n	800cb40 <__ieee754_pow+0x7c8>
 800cd12:	4621      	mov	r1, r4
 800cd14:	e7d2      	b.n	800ccbc <__ieee754_pow+0x944>
 800cd16:	2000      	movs	r0, #0
 800cd18:	491b      	ldr	r1, [pc, #108]	; (800cd88 <__ieee754_pow+0xa10>)
 800cd1a:	f7ff bb8d 	b.w	800c438 <__ieee754_pow+0xc0>
 800cd1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd22:	f7ff bb89 	b.w	800c438 <__ieee754_pow+0xc0>
 800cd26:	4630      	mov	r0, r6
 800cd28:	4639      	mov	r1, r7
 800cd2a:	f7ff bb85 	b.w	800c438 <__ieee754_pow+0xc0>
 800cd2e:	4693      	mov	fp, r2
 800cd30:	f7ff bb96 	b.w	800c460 <__ieee754_pow+0xe8>
 800cd34:	f3af 8000 	nop.w
 800cd38:	00000000 	.word	0x00000000
 800cd3c:	3fe62e43 	.word	0x3fe62e43
 800cd40:	fefa39ef 	.word	0xfefa39ef
 800cd44:	3fe62e42 	.word	0x3fe62e42
 800cd48:	0ca86c39 	.word	0x0ca86c39
 800cd4c:	be205c61 	.word	0xbe205c61
 800cd50:	72bea4d0 	.word	0x72bea4d0
 800cd54:	3e663769 	.word	0x3e663769
 800cd58:	c5d26bf1 	.word	0xc5d26bf1
 800cd5c:	3ebbbd41 	.word	0x3ebbbd41
 800cd60:	af25de2c 	.word	0xaf25de2c
 800cd64:	3f11566a 	.word	0x3f11566a
 800cd68:	16bebd93 	.word	0x16bebd93
 800cd6c:	3f66c16c 	.word	0x3f66c16c
 800cd70:	5555553e 	.word	0x5555553e
 800cd74:	3fc55555 	.word	0x3fc55555
 800cd78:	c2f8f359 	.word	0xc2f8f359
 800cd7c:	01a56e1f 	.word	0x01a56e1f
 800cd80:	3fe00000 	.word	0x3fe00000
 800cd84:	000fffff 	.word	0x000fffff
 800cd88:	3ff00000 	.word	0x3ff00000
 800cd8c:	4090cbff 	.word	0x4090cbff
 800cd90:	3f6f3400 	.word	0x3f6f3400
 800cd94:	652b82fe 	.word	0x652b82fe
 800cd98:	3c971547 	.word	0x3c971547

0800cd9c <__ieee754_sqrt>:
 800cd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda0:	ec55 4b10 	vmov	r4, r5, d0
 800cda4:	4e54      	ldr	r6, [pc, #336]	; (800cef8 <__ieee754_sqrt+0x15c>)
 800cda6:	43ae      	bics	r6, r5
 800cda8:	ee10 0a10 	vmov	r0, s0
 800cdac:	462b      	mov	r3, r5
 800cdae:	462a      	mov	r2, r5
 800cdb0:	4621      	mov	r1, r4
 800cdb2:	d113      	bne.n	800cddc <__ieee754_sqrt+0x40>
 800cdb4:	ee10 2a10 	vmov	r2, s0
 800cdb8:	462b      	mov	r3, r5
 800cdba:	ee10 0a10 	vmov	r0, s0
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	f7f5 ff06 	bl	8002bd0 <__aeabi_dmul>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	4620      	mov	r0, r4
 800cdca:	4629      	mov	r1, r5
 800cdcc:	f7f5 fd4e 	bl	800286c <__adddf3>
 800cdd0:	4604      	mov	r4, r0
 800cdd2:	460d      	mov	r5, r1
 800cdd4:	ec45 4b10 	vmov	d0, r4, r5
 800cdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cddc:	2d00      	cmp	r5, #0
 800cdde:	dc10      	bgt.n	800ce02 <__ieee754_sqrt+0x66>
 800cde0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cde4:	4330      	orrs	r0, r6
 800cde6:	d0f5      	beq.n	800cdd4 <__ieee754_sqrt+0x38>
 800cde8:	b15d      	cbz	r5, 800ce02 <__ieee754_sqrt+0x66>
 800cdea:	ee10 2a10 	vmov	r2, s0
 800cdee:	462b      	mov	r3, r5
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	f7f5 fd38 	bl	8002868 <__aeabi_dsub>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	f7f6 f812 	bl	8002e24 <__aeabi_ddiv>
 800ce00:	e7e6      	b.n	800cdd0 <__ieee754_sqrt+0x34>
 800ce02:	151b      	asrs	r3, r3, #20
 800ce04:	d10c      	bne.n	800ce20 <__ieee754_sqrt+0x84>
 800ce06:	2a00      	cmp	r2, #0
 800ce08:	d06d      	beq.n	800cee6 <__ieee754_sqrt+0x14a>
 800ce0a:	2000      	movs	r0, #0
 800ce0c:	02d6      	lsls	r6, r2, #11
 800ce0e:	d56e      	bpl.n	800ceee <__ieee754_sqrt+0x152>
 800ce10:	1e44      	subs	r4, r0, #1
 800ce12:	1b1b      	subs	r3, r3, r4
 800ce14:	f1c0 0420 	rsb	r4, r0, #32
 800ce18:	fa21 f404 	lsr.w	r4, r1, r4
 800ce1c:	4322      	orrs	r2, r4
 800ce1e:	4081      	lsls	r1, r0
 800ce20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ce24:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ce28:	07dd      	lsls	r5, r3, #31
 800ce2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ce2e:	bf42      	ittt	mi
 800ce30:	0052      	lslmi	r2, r2, #1
 800ce32:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800ce36:	0049      	lslmi	r1, r1, #1
 800ce38:	1058      	asrs	r0, r3, #1
 800ce3a:	2500      	movs	r5, #0
 800ce3c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 800ce40:	441a      	add	r2, r3
 800ce42:	0049      	lsls	r1, r1, #1
 800ce44:	2316      	movs	r3, #22
 800ce46:	462c      	mov	r4, r5
 800ce48:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ce4c:	19a7      	adds	r7, r4, r6
 800ce4e:	4297      	cmp	r7, r2
 800ce50:	bfde      	ittt	le
 800ce52:	1bd2      	suble	r2, r2, r7
 800ce54:	19bc      	addle	r4, r7, r6
 800ce56:	19ad      	addle	r5, r5, r6
 800ce58:	0052      	lsls	r2, r2, #1
 800ce5a:	3b01      	subs	r3, #1
 800ce5c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800ce60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ce64:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ce68:	d1f0      	bne.n	800ce4c <__ieee754_sqrt+0xb0>
 800ce6a:	f04f 0e20 	mov.w	lr, #32
 800ce6e:	469c      	mov	ip, r3
 800ce70:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ce74:	42a2      	cmp	r2, r4
 800ce76:	eb06 070c 	add.w	r7, r6, ip
 800ce7a:	dc02      	bgt.n	800ce82 <__ieee754_sqrt+0xe6>
 800ce7c:	d112      	bne.n	800cea4 <__ieee754_sqrt+0x108>
 800ce7e:	428f      	cmp	r7, r1
 800ce80:	d810      	bhi.n	800cea4 <__ieee754_sqrt+0x108>
 800ce82:	2f00      	cmp	r7, #0
 800ce84:	eb07 0c06 	add.w	ip, r7, r6
 800ce88:	da34      	bge.n	800cef4 <__ieee754_sqrt+0x158>
 800ce8a:	f1bc 0f00 	cmp.w	ip, #0
 800ce8e:	db31      	blt.n	800cef4 <__ieee754_sqrt+0x158>
 800ce90:	f104 0801 	add.w	r8, r4, #1
 800ce94:	1b12      	subs	r2, r2, r4
 800ce96:	428f      	cmp	r7, r1
 800ce98:	bf88      	it	hi
 800ce9a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ce9e:	1bc9      	subs	r1, r1, r7
 800cea0:	4433      	add	r3, r6
 800cea2:	4644      	mov	r4, r8
 800cea4:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800cea8:	f1be 0e01 	subs.w	lr, lr, #1
 800ceac:	443a      	add	r2, r7
 800ceae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ceb2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ceb6:	d1dd      	bne.n	800ce74 <__ieee754_sqrt+0xd8>
 800ceb8:	430a      	orrs	r2, r1
 800ceba:	d006      	beq.n	800ceca <__ieee754_sqrt+0x12e>
 800cebc:	1c5c      	adds	r4, r3, #1
 800cebe:	bf13      	iteet	ne
 800cec0:	3301      	addne	r3, #1
 800cec2:	3501      	addeq	r5, #1
 800cec4:	4673      	moveq	r3, lr
 800cec6:	f023 0301 	bicne.w	r3, r3, #1
 800ceca:	106a      	asrs	r2, r5, #1
 800cecc:	085b      	lsrs	r3, r3, #1
 800cece:	07e9      	lsls	r1, r5, #31
 800ced0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ced4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ced8:	bf48      	it	mi
 800ceda:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800cede:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800cee2:	461c      	mov	r4, r3
 800cee4:	e776      	b.n	800cdd4 <__ieee754_sqrt+0x38>
 800cee6:	0aca      	lsrs	r2, r1, #11
 800cee8:	3b15      	subs	r3, #21
 800ceea:	0549      	lsls	r1, r1, #21
 800ceec:	e78b      	b.n	800ce06 <__ieee754_sqrt+0x6a>
 800ceee:	0052      	lsls	r2, r2, #1
 800cef0:	3001      	adds	r0, #1
 800cef2:	e78b      	b.n	800ce0c <__ieee754_sqrt+0x70>
 800cef4:	46a0      	mov	r8, r4
 800cef6:	e7cd      	b.n	800ce94 <__ieee754_sqrt+0xf8>
 800cef8:	7ff00000 	.word	0x7ff00000

0800cefc <__ieee754_expf>:
 800cefc:	ee10 2a10 	vmov	r2, s0
 800cf00:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800cf04:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cf08:	d902      	bls.n	800cf10 <__ieee754_expf+0x14>
 800cf0a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cf0e:	4770      	bx	lr
 800cf10:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800cf14:	d106      	bne.n	800cf24 <__ieee754_expf+0x28>
 800cf16:	eddf 7a51 	vldr	s15, [pc, #324]	; 800d05c <__ieee754_expf+0x160>
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	bf18      	it	ne
 800cf1e:	eeb0 0a67 	vmovne.f32	s0, s15
 800cf22:	4770      	bx	lr
 800cf24:	484e      	ldr	r0, [pc, #312]	; (800d060 <__ieee754_expf+0x164>)
 800cf26:	4282      	cmp	r2, r0
 800cf28:	dd04      	ble.n	800cf34 <__ieee754_expf+0x38>
 800cf2a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800d064 <__ieee754_expf+0x168>
 800cf2e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cf32:	4770      	bx	lr
 800cf34:	2a00      	cmp	r2, #0
 800cf36:	da03      	bge.n	800cf40 <__ieee754_expf+0x44>
 800cf38:	4a4b      	ldr	r2, [pc, #300]	; (800d068 <__ieee754_expf+0x16c>)
 800cf3a:	4291      	cmp	r1, r2
 800cf3c:	f200 808a 	bhi.w	800d054 <__ieee754_expf+0x158>
 800cf40:	4a4a      	ldr	r2, [pc, #296]	; (800d06c <__ieee754_expf+0x170>)
 800cf42:	4291      	cmp	r1, r2
 800cf44:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800cf48:	d954      	bls.n	800cff4 <__ieee754_expf+0xf8>
 800cf4a:	4a49      	ldr	r2, [pc, #292]	; (800d070 <__ieee754_expf+0x174>)
 800cf4c:	4291      	cmp	r1, r2
 800cf4e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800cf52:	d836      	bhi.n	800cfc2 <__ieee754_expf+0xc6>
 800cf54:	4947      	ldr	r1, [pc, #284]	; (800d074 <__ieee754_expf+0x178>)
 800cf56:	4411      	add	r1, r2
 800cf58:	ed91 7a00 	vldr	s14, [r1]
 800cf5c:	4946      	ldr	r1, [pc, #280]	; (800d078 <__ieee754_expf+0x17c>)
 800cf5e:	440a      	add	r2, r1
 800cf60:	edd2 7a00 	vldr	s15, [r2]
 800cf64:	ee30 7a47 	vsub.f32	s14, s0, s14
 800cf68:	f1c3 0201 	rsb	r2, r3, #1
 800cf6c:	1ad2      	subs	r2, r2, r3
 800cf6e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800cf72:	ee60 6a00 	vmul.f32	s13, s0, s0
 800cf76:	eddf 5a41 	vldr	s11, [pc, #260]	; 800d07c <__ieee754_expf+0x180>
 800cf7a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800d080 <__ieee754_expf+0x184>
 800cf7e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800cf82:	eddf 5a40 	vldr	s11, [pc, #256]	; 800d084 <__ieee754_expf+0x188>
 800cf86:	eee6 5a85 	vfma.f32	s11, s13, s10
 800cf8a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800d088 <__ieee754_expf+0x18c>
 800cf8e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800cf92:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800d08c <__ieee754_expf+0x190>
 800cf96:	eee6 5a85 	vfma.f32	s11, s13, s10
 800cf9a:	eeb0 5a40 	vmov.f32	s10, s0
 800cf9e:	eea6 5ae5 	vfms.f32	s10, s13, s11
 800cfa2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cfa6:	eef0 6a45 	vmov.f32	s13, s10
 800cfaa:	ee20 5a05 	vmul.f32	s10, s0, s10
 800cfae:	bb92      	cbnz	r2, 800d016 <__ieee754_expf+0x11a>
 800cfb0:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800cfb4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800cfb8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cfbc:	ee36 0a40 	vsub.f32	s0, s12, s0
 800cfc0:	4770      	bx	lr
 800cfc2:	4b33      	ldr	r3, [pc, #204]	; (800d090 <__ieee754_expf+0x194>)
 800cfc4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800d094 <__ieee754_expf+0x198>
 800cfc8:	4413      	add	r3, r2
 800cfca:	edd3 7a00 	vldr	s15, [r3]
 800cfce:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cfd2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d098 <__ieee754_expf+0x19c>
 800cfd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cfda:	ee17 2a90 	vmov	r2, s15
 800cfde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfe2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cfe6:	eeb0 7a40 	vmov.f32	s14, s0
 800cfea:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800d09c <__ieee754_expf+0x1a0>
 800cfee:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cff2:	e7bc      	b.n	800cf6e <__ieee754_expf+0x72>
 800cff4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800cff8:	d20b      	bcs.n	800d012 <__ieee754_expf+0x116>
 800cffa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800d064 <__ieee754_expf+0x168>
 800cffe:	ee70 6a26 	vadd.f32	s13, s0, s13
 800d002:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00a:	dd02      	ble.n	800d012 <__ieee754_expf+0x116>
 800d00c:	ee30 0a06 	vadd.f32	s0, s0, s12
 800d010:	4770      	bx	lr
 800d012:	2200      	movs	r2, #0
 800d014:	e7ad      	b.n	800cf72 <__ieee754_expf+0x76>
 800d016:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800d01a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800d01e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800d022:	bfb8      	it	lt
 800d024:	3264      	addlt	r2, #100	; 0x64
 800d026:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d02a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d02e:	ee76 7a40 	vsub.f32	s15, s12, s0
 800d032:	ee17 3a90 	vmov	r3, s15
 800d036:	bfab      	itete	ge
 800d038:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800d03c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800d040:	ee00 3a10 	vmovge	s0, r3
 800d044:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800d0a0 <__ieee754_expf+0x1a4>
 800d048:	bfbc      	itt	lt
 800d04a:	ee00 3a10 	vmovlt	s0, r3
 800d04e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800d052:	4770      	bx	lr
 800d054:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d05c <__ieee754_expf+0x160>
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	00000000 	.word	0x00000000
 800d060:	42b17217 	.word	0x42b17217
 800d064:	7149f2ca 	.word	0x7149f2ca
 800d068:	42cff1b5 	.word	0x42cff1b5
 800d06c:	3eb17218 	.word	0x3eb17218
 800d070:	3f851591 	.word	0x3f851591
 800d074:	080244d0 	.word	0x080244d0
 800d078:	080244d8 	.word	0x080244d8
 800d07c:	3331bb4c 	.word	0x3331bb4c
 800d080:	b5ddea0e 	.word	0xb5ddea0e
 800d084:	388ab355 	.word	0x388ab355
 800d088:	bb360b61 	.word	0xbb360b61
 800d08c:	3e2aaaab 	.word	0x3e2aaaab
 800d090:	080244c8 	.word	0x080244c8
 800d094:	3fb8aa3b 	.word	0x3fb8aa3b
 800d098:	3f317180 	.word	0x3f317180
 800d09c:	3717f7d1 	.word	0x3717f7d1
 800d0a0:	0d800000 	.word	0x0d800000

0800d0a4 <__ieee754_powf>:
 800d0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a8:	ee10 5a90 	vmov	r5, s1
 800d0ac:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800d0b0:	ed2d 8b02 	vpush	{d8}
 800d0b4:	eeb0 8a40 	vmov.f32	s16, s0
 800d0b8:	eef0 8a60 	vmov.f32	s17, s1
 800d0bc:	f000 8295 	beq.w	800d5ea <__ieee754_powf+0x546>
 800d0c0:	ee10 8a10 	vmov	r8, s0
 800d0c4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800d0c8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d0cc:	dc06      	bgt.n	800d0dc <__ieee754_powf+0x38>
 800d0ce:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800d0d2:	dd0a      	ble.n	800d0ea <__ieee754_powf+0x46>
 800d0d4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d0d8:	f000 8287 	beq.w	800d5ea <__ieee754_powf+0x546>
 800d0dc:	ecbd 8b02 	vpop	{d8}
 800d0e0:	48d9      	ldr	r0, [pc, #868]	; (800d448 <__ieee754_powf+0x3a4>)
 800d0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e6:	f000 bd3f 	b.w	800db68 <nanf>
 800d0ea:	f1b8 0f00 	cmp.w	r8, #0
 800d0ee:	da1d      	bge.n	800d12c <__ieee754_powf+0x88>
 800d0f0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800d0f4:	da2c      	bge.n	800d150 <__ieee754_powf+0xac>
 800d0f6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800d0fa:	db30      	blt.n	800d15e <__ieee754_powf+0xba>
 800d0fc:	15fb      	asrs	r3, r7, #23
 800d0fe:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800d102:	fa47 f603 	asr.w	r6, r7, r3
 800d106:	fa06 f303 	lsl.w	r3, r6, r3
 800d10a:	429f      	cmp	r7, r3
 800d10c:	d127      	bne.n	800d15e <__ieee754_powf+0xba>
 800d10e:	f006 0601 	and.w	r6, r6, #1
 800d112:	f1c6 0602 	rsb	r6, r6, #2
 800d116:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800d11a:	d122      	bne.n	800d162 <__ieee754_powf+0xbe>
 800d11c:	2d00      	cmp	r5, #0
 800d11e:	f280 826a 	bge.w	800d5f6 <__ieee754_powf+0x552>
 800d122:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d126:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800d12a:	e00d      	b.n	800d148 <__ieee754_powf+0xa4>
 800d12c:	2600      	movs	r6, #0
 800d12e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800d132:	d1f0      	bne.n	800d116 <__ieee754_powf+0x72>
 800d134:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d138:	f000 8257 	beq.w	800d5ea <__ieee754_powf+0x546>
 800d13c:	dd0a      	ble.n	800d154 <__ieee754_powf+0xb0>
 800d13e:	2d00      	cmp	r5, #0
 800d140:	f280 8256 	bge.w	800d5f0 <__ieee754_powf+0x54c>
 800d144:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800d44c <__ieee754_powf+0x3a8>
 800d148:	ecbd 8b02 	vpop	{d8}
 800d14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d150:	2602      	movs	r6, #2
 800d152:	e7ec      	b.n	800d12e <__ieee754_powf+0x8a>
 800d154:	2d00      	cmp	r5, #0
 800d156:	daf5      	bge.n	800d144 <__ieee754_powf+0xa0>
 800d158:	eeb1 0a68 	vneg.f32	s0, s17
 800d15c:	e7f4      	b.n	800d148 <__ieee754_powf+0xa4>
 800d15e:	2600      	movs	r6, #0
 800d160:	e7d9      	b.n	800d116 <__ieee754_powf+0x72>
 800d162:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800d166:	d102      	bne.n	800d16e <__ieee754_powf+0xca>
 800d168:	ee28 0a08 	vmul.f32	s0, s16, s16
 800d16c:	e7ec      	b.n	800d148 <__ieee754_powf+0xa4>
 800d16e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800d172:	eeb0 0a48 	vmov.f32	s0, s16
 800d176:	d108      	bne.n	800d18a <__ieee754_powf+0xe6>
 800d178:	f1b8 0f00 	cmp.w	r8, #0
 800d17c:	db05      	blt.n	800d18a <__ieee754_powf+0xe6>
 800d17e:	ecbd 8b02 	vpop	{d8}
 800d182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d186:	f000 ba4f 	b.w	800d628 <__ieee754_sqrtf>
 800d18a:	f000 fcdb 	bl	800db44 <fabsf>
 800d18e:	b124      	cbz	r4, 800d19a <__ieee754_powf+0xf6>
 800d190:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800d194:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d198:	d117      	bne.n	800d1ca <__ieee754_powf+0x126>
 800d19a:	2d00      	cmp	r5, #0
 800d19c:	bfbc      	itt	lt
 800d19e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800d1a2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d1a6:	f1b8 0f00 	cmp.w	r8, #0
 800d1aa:	dacd      	bge.n	800d148 <__ieee754_powf+0xa4>
 800d1ac:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800d1b0:	ea54 0306 	orrs.w	r3, r4, r6
 800d1b4:	d104      	bne.n	800d1c0 <__ieee754_powf+0x11c>
 800d1b6:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d1ba:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d1be:	e7c3      	b.n	800d148 <__ieee754_powf+0xa4>
 800d1c0:	2e01      	cmp	r6, #1
 800d1c2:	d1c1      	bne.n	800d148 <__ieee754_powf+0xa4>
 800d1c4:	eeb1 0a40 	vneg.f32	s0, s0
 800d1c8:	e7be      	b.n	800d148 <__ieee754_powf+0xa4>
 800d1ca:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800d1ce:	3801      	subs	r0, #1
 800d1d0:	ea56 0300 	orrs.w	r3, r6, r0
 800d1d4:	d104      	bne.n	800d1e0 <__ieee754_powf+0x13c>
 800d1d6:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d1da:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d1de:	e7b3      	b.n	800d148 <__ieee754_powf+0xa4>
 800d1e0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800d1e4:	dd6d      	ble.n	800d2c2 <__ieee754_powf+0x21e>
 800d1e6:	4b9a      	ldr	r3, [pc, #616]	; (800d450 <__ieee754_powf+0x3ac>)
 800d1e8:	429c      	cmp	r4, r3
 800d1ea:	dc06      	bgt.n	800d1fa <__ieee754_powf+0x156>
 800d1ec:	2d00      	cmp	r5, #0
 800d1ee:	daa9      	bge.n	800d144 <__ieee754_powf+0xa0>
 800d1f0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800d454 <__ieee754_powf+0x3b0>
 800d1f4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d1f8:	e7a6      	b.n	800d148 <__ieee754_powf+0xa4>
 800d1fa:	4b97      	ldr	r3, [pc, #604]	; (800d458 <__ieee754_powf+0x3b4>)
 800d1fc:	429c      	cmp	r4, r3
 800d1fe:	dd02      	ble.n	800d206 <__ieee754_powf+0x162>
 800d200:	2d00      	cmp	r5, #0
 800d202:	dcf5      	bgt.n	800d1f0 <__ieee754_powf+0x14c>
 800d204:	e79e      	b.n	800d144 <__ieee754_powf+0xa0>
 800d206:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d20a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d20e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800d45c <__ieee754_powf+0x3b8>
 800d212:	ed9f 6a93 	vldr	s12, [pc, #588]	; 800d460 <__ieee754_powf+0x3bc>
 800d216:	eef1 6a40 	vneg.f32	s13, s0
 800d21a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800d21e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d222:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d226:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d22a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d22e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d232:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800d464 <__ieee754_powf+0x3c0>
 800d236:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800d23a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800d468 <__ieee754_powf+0x3c4>
 800d23e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d242:	eeb0 7a67 	vmov.f32	s14, s15
 800d246:	eea0 7a06 	vfma.f32	s14, s0, s12
 800d24a:	ee17 3a10 	vmov	r3, s14
 800d24e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d252:	f023 030f 	bic.w	r3, r3, #15
 800d256:	ee07 3a10 	vmov	s14, r3
 800d25a:	eea6 7a86 	vfma.f32	s14, s13, s12
 800d25e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d262:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800d266:	f025 050f 	bic.w	r5, r5, #15
 800d26a:	ee07 5a10 	vmov	s14, r5
 800d26e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800d272:	ee78 8ac7 	vsub.f32	s17, s17, s14
 800d276:	ee07 3a10 	vmov	s14, r3
 800d27a:	ee06 5a90 	vmov	s13, r5
 800d27e:	eee7 7a28 	vfma.f32	s15, s14, s17
 800d282:	3e01      	subs	r6, #1
 800d284:	ea56 0200 	orrs.w	r2, r6, r0
 800d288:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d28c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d290:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d294:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d298:	ee16 4a90 	vmov	r4, s13
 800d29c:	bf08      	it	eq
 800d29e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d2a2:	2c00      	cmp	r4, #0
 800d2a4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d2a8:	f340 8186 	ble.w	800d5b8 <__ieee754_powf+0x514>
 800d2ac:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d2b0:	f340 80fc 	ble.w	800d4ac <__ieee754_powf+0x408>
 800d2b4:	eddf 7a67 	vldr	s15, [pc, #412]	; 800d454 <__ieee754_powf+0x3b0>
 800d2b8:	ee28 0a27 	vmul.f32	s0, s16, s15
 800d2bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d2c0:	e742      	b.n	800d148 <__ieee754_powf+0xa4>
 800d2c2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800d2c6:	bfbf      	itttt	lt
 800d2c8:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800d46c <__ieee754_powf+0x3c8>
 800d2cc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d2d0:	f06f 0217 	mvnlt.w	r2, #23
 800d2d4:	ee17 4a90 	vmovlt	r4, s15
 800d2d8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800d2dc:	bfa8      	it	ge
 800d2de:	2200      	movge	r2, #0
 800d2e0:	3b7f      	subs	r3, #127	; 0x7f
 800d2e2:	4413      	add	r3, r2
 800d2e4:	4a62      	ldr	r2, [pc, #392]	; (800d470 <__ieee754_powf+0x3cc>)
 800d2e6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800d2ea:	4294      	cmp	r4, r2
 800d2ec:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800d2f0:	dd06      	ble.n	800d300 <__ieee754_powf+0x25c>
 800d2f2:	4a60      	ldr	r2, [pc, #384]	; (800d474 <__ieee754_powf+0x3d0>)
 800d2f4:	4294      	cmp	r4, r2
 800d2f6:	f340 80a5 	ble.w	800d444 <__ieee754_powf+0x3a0>
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d300:	2400      	movs	r4, #0
 800d302:	4a5d      	ldr	r2, [pc, #372]	; (800d478 <__ieee754_powf+0x3d4>)
 800d304:	00a7      	lsls	r7, r4, #2
 800d306:	443a      	add	r2, r7
 800d308:	ee07 1a90 	vmov	s15, r1
 800d30c:	ed92 7a00 	vldr	s14, [r2]
 800d310:	4a5a      	ldr	r2, [pc, #360]	; (800d47c <__ieee754_powf+0x3d8>)
 800d312:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d316:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d31a:	ee85 5aa6 	vdiv.f32	s10, s11, s13
 800d31e:	1049      	asrs	r1, r1, #1
 800d320:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d324:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d328:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800d32c:	ee37 6ac7 	vsub.f32	s12, s15, s14
 800d330:	ee06 1a90 	vmov	s13, r1
 800d334:	ee66 4a05 	vmul.f32	s9, s12, s10
 800d338:	ee14 ea90 	vmov	lr, s9
 800d33c:	ea02 0e0e 	and.w	lr, r2, lr
 800d340:	ee05 ea90 	vmov	s11, lr
 800d344:	eeb1 4a65 	vneg.f32	s8, s11
 800d348:	eea4 6a26 	vfma.f32	s12, s8, s13
 800d34c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d350:	ee35 7aa4 	vadd.f32	s14, s11, s9
 800d354:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800d358:	eddf 7a49 	vldr	s15, [pc, #292]	; 800d480 <__ieee754_powf+0x3dc>
 800d35c:	eea4 6a26 	vfma.f32	s12, s8, s13
 800d360:	ee66 6a05 	vmul.f32	s13, s12, s10
 800d364:	ee24 6aa4 	vmul.f32	s12, s9, s9
 800d368:	ed9f 5a46 	vldr	s10, [pc, #280]	; 800d484 <__ieee754_powf+0x3e0>
 800d36c:	eee6 7a05 	vfma.f32	s15, s12, s10
 800d370:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800d488 <__ieee754_powf+0x3e4>
 800d374:	eea6 5a27 	vfma.f32	s10, s12, s15
 800d378:	eddf 7a38 	vldr	s15, [pc, #224]	; 800d45c <__ieee754_powf+0x3b8>
 800d37c:	eee6 7a05 	vfma.f32	s15, s12, s10
 800d380:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800d48c <__ieee754_powf+0x3e8>
 800d384:	eea6 5a27 	vfma.f32	s10, s12, s15
 800d388:	eddf 7a41 	vldr	s15, [pc, #260]	; 800d490 <__ieee754_powf+0x3ec>
 800d38c:	eee6 7a05 	vfma.f32	s15, s12, s10
 800d390:	ee66 3a06 	vmul.f32	s7, s12, s12
 800d394:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800d398:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d39c:	eeb0 6a45 	vmov.f32	s12, s10
 800d3a0:	eea3 7aa7 	vfma.f32	s14, s7, s15
 800d3a4:	eea5 6aa5 	vfma.f32	s12, s11, s11
 800d3a8:	ee36 6a07 	vadd.f32	s12, s12, s14
 800d3ac:	ee16 1a10 	vmov	r1, s12
 800d3b0:	4011      	ands	r1, r2
 800d3b2:	ee06 1a10 	vmov	s12, r1
 800d3b6:	ee76 7a45 	vsub.f32	s15, s12, s10
 800d3ba:	ed9f 5a36 	vldr	s10, [pc, #216]	; 800d494 <__ieee754_powf+0x3f0>
 800d3be:	eee4 7a25 	vfma.f32	s15, s8, s11
 800d3c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3c6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800d3ca:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d3ce:	eeb0 7a67 	vmov.f32	s14, s15
 800d3d2:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d3d6:	ee17 1a10 	vmov	r1, s14
 800d3da:	4011      	ands	r1, r2
 800d3dc:	ee07 1a10 	vmov	s14, r1
 800d3e0:	eea4 7a06 	vfma.f32	s14, s8, s12
 800d3e4:	ee05 1a90 	vmov	s11, r1
 800d3e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3ec:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d498 <__ieee754_powf+0x3f4>
 800d3f0:	492a      	ldr	r1, [pc, #168]	; (800d49c <__ieee754_powf+0x3f8>)
 800d3f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d3f6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d4a0 <__ieee754_powf+0x3fc>
 800d3fa:	eee5 7a87 	vfma.f32	s15, s11, s14
 800d3fe:	4439      	add	r1, r7
 800d400:	ed91 7a00 	vldr	s14, [r1]
 800d404:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d408:	ee07 3a90 	vmov	s15, r3
 800d40c:	eeb0 6a47 	vmov.f32	s12, s14
 800d410:	4b24      	ldr	r3, [pc, #144]	; (800d4a4 <__ieee754_powf+0x400>)
 800d412:	eea5 6a85 	vfma.f32	s12, s11, s10
 800d416:	443b      	add	r3, r7
 800d418:	edd3 4a00 	vldr	s9, [r3]
 800d41c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d420:	ee36 6a24 	vadd.f32	s12, s12, s9
 800d424:	ee76 7a26 	vadd.f32	s15, s12, s13
 800d428:	ee17 3a90 	vmov	r3, s15
 800d42c:	4013      	ands	r3, r2
 800d42e:	ee07 3a90 	vmov	s15, r3
 800d432:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d436:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800d43a:	eee5 7ac5 	vfms.f32	s15, s11, s10
 800d43e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d442:	e70e      	b.n	800d262 <__ieee754_powf+0x1be>
 800d444:	2401      	movs	r4, #1
 800d446:	e75c      	b.n	800d302 <__ieee754_powf+0x25e>
 800d448:	0801043d 	.word	0x0801043d
 800d44c:	00000000 	.word	0x00000000
 800d450:	3f7ffff7 	.word	0x3f7ffff7
 800d454:	7149f2ca 	.word	0x7149f2ca
 800d458:	3f800007 	.word	0x3f800007
 800d45c:	3eaaaaab 	.word	0x3eaaaaab
 800d460:	3fb8aa00 	.word	0x3fb8aa00
 800d464:	3fb8aa3b 	.word	0x3fb8aa3b
 800d468:	36eca570 	.word	0x36eca570
 800d46c:	4b800000 	.word	0x4b800000
 800d470:	001cc471 	.word	0x001cc471
 800d474:	005db3d6 	.word	0x005db3d6
 800d478:	080244e0 	.word	0x080244e0
 800d47c:	fffff000 	.word	0xfffff000
 800d480:	3e6c3255 	.word	0x3e6c3255
 800d484:	3e53f142 	.word	0x3e53f142
 800d488:	3e8ba305 	.word	0x3e8ba305
 800d48c:	3edb6db7 	.word	0x3edb6db7
 800d490:	3f19999a 	.word	0x3f19999a
 800d494:	3f763800 	.word	0x3f763800
 800d498:	3f76384f 	.word	0x3f76384f
 800d49c:	080244f0 	.word	0x080244f0
 800d4a0:	369dc3a0 	.word	0x369dc3a0
 800d4a4:	080244e8 	.word	0x080244e8
 800d4a8:	3338aa3c 	.word	0x3338aa3c
 800d4ac:	f040 8094 	bne.w	800d5d8 <__ieee754_powf+0x534>
 800d4b0:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 800d4a8 <__ieee754_powf+0x404>
 800d4b4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d4b8:	ee37 6a86 	vadd.f32	s12, s15, s12
 800d4bc:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800d4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c4:	f73f aef6 	bgt.w	800d2b4 <__ieee754_powf+0x210>
 800d4c8:	15db      	asrs	r3, r3, #23
 800d4ca:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d4ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d4d2:	4103      	asrs	r3, r0
 800d4d4:	4423      	add	r3, r4
 800d4d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d4da:	4948      	ldr	r1, [pc, #288]	; (800d5fc <__ieee754_powf+0x558>)
 800d4dc:	3a7f      	subs	r2, #127	; 0x7f
 800d4de:	4111      	asrs	r1, r2
 800d4e0:	ea23 0101 	bic.w	r1, r3, r1
 800d4e4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d4e8:	ee06 1a90 	vmov	s13, r1
 800d4ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d4f0:	f1c2 0217 	rsb	r2, r2, #23
 800d4f4:	4110      	asrs	r0, r2
 800d4f6:	2c00      	cmp	r4, #0
 800d4f8:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d4fc:	bfb8      	it	lt
 800d4fe:	4240      	neglt	r0, r0
 800d500:	ee77 6a27 	vadd.f32	s13, s14, s15
 800d504:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800d600 <__ieee754_powf+0x55c>
 800d508:	ee16 3a90 	vmov	r3, s13
 800d50c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d510:	f023 030f 	bic.w	r3, r3, #15
 800d514:	ee06 3a90 	vmov	s13, r3
 800d518:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d51c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d520:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d604 <__ieee754_powf+0x560>
 800d524:	ee26 7a87 	vmul.f32	s14, s13, s14
 800d528:	eea7 7a86 	vfma.f32	s14, s15, s12
 800d52c:	eef0 7a47 	vmov.f32	s15, s14
 800d530:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800d608 <__ieee754_powf+0x564>
 800d534:	eeb0 0a67 	vmov.f32	s0, s15
 800d538:	eea6 0a87 	vfma.f32	s0, s13, s14
 800d53c:	eeb0 6a40 	vmov.f32	s12, s0
 800d540:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d544:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d548:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d54c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800d60c <__ieee754_powf+0x568>
 800d550:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800d610 <__ieee754_powf+0x56c>
 800d554:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d558:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800d614 <__ieee754_powf+0x570>
 800d55c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d560:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800d618 <__ieee754_powf+0x574>
 800d564:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d568:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800d61c <__ieee754_powf+0x578>
 800d56c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d570:	eeb0 6a40 	vmov.f32	s12, s0
 800d574:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d578:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d57c:	eeb0 7a46 	vmov.f32	s14, s12
 800d580:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d584:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d588:	eee0 7a27 	vfma.f32	s15, s0, s15
 800d58c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d590:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d594:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d598:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d59c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d5a0:	ee10 3a10 	vmov	r3, s0
 800d5a4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d5a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d5ac:	da1a      	bge.n	800d5e4 <__ieee754_powf+0x540>
 800d5ae:	f000 fae1 	bl	800db74 <scalbnf>
 800d5b2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d5b6:	e5c7      	b.n	800d148 <__ieee754_powf+0xa4>
 800d5b8:	4a19      	ldr	r2, [pc, #100]	; (800d620 <__ieee754_powf+0x57c>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	dd02      	ble.n	800d5c4 <__ieee754_powf+0x520>
 800d5be:	eddf 7a19 	vldr	s15, [pc, #100]	; 800d624 <__ieee754_powf+0x580>
 800d5c2:	e679      	b.n	800d2b8 <__ieee754_powf+0x214>
 800d5c4:	d108      	bne.n	800d5d8 <__ieee754_powf+0x534>
 800d5c6:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d5ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 800d5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d2:	f63f af79 	bhi.w	800d4c8 <__ieee754_powf+0x424>
 800d5d6:	e7f2      	b.n	800d5be <__ieee754_powf+0x51a>
 800d5d8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d5dc:	f73f af74 	bgt.w	800d4c8 <__ieee754_powf+0x424>
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	e78d      	b.n	800d500 <__ieee754_powf+0x45c>
 800d5e4:	ee00 3a10 	vmov	s0, r3
 800d5e8:	e7e3      	b.n	800d5b2 <__ieee754_powf+0x50e>
 800d5ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d5ee:	e5ab      	b.n	800d148 <__ieee754_powf+0xa4>
 800d5f0:	eeb0 0a68 	vmov.f32	s0, s17
 800d5f4:	e5a8      	b.n	800d148 <__ieee754_powf+0xa4>
 800d5f6:	eeb0 0a48 	vmov.f32	s0, s16
 800d5fa:	e5a5      	b.n	800d148 <__ieee754_powf+0xa4>
 800d5fc:	007fffff 	.word	0x007fffff
 800d600:	3f317218 	.word	0x3f317218
 800d604:	35bfbe8c 	.word	0x35bfbe8c
 800d608:	3f317200 	.word	0x3f317200
 800d60c:	3331bb4c 	.word	0x3331bb4c
 800d610:	b5ddea0e 	.word	0xb5ddea0e
 800d614:	388ab355 	.word	0x388ab355
 800d618:	bb360b61 	.word	0xbb360b61
 800d61c:	3e2aaaab 	.word	0x3e2aaaab
 800d620:	43160000 	.word	0x43160000
 800d624:	0da24260 	.word	0x0da24260

0800d628 <__ieee754_sqrtf>:
 800d628:	ee10 2a10 	vmov	r2, s0
 800d62c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800d630:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d634:	b570      	push	{r4, r5, r6, lr}
 800d636:	d302      	bcc.n	800d63e <__ieee754_sqrtf+0x16>
 800d638:	eea0 0a00 	vfma.f32	s0, s0, s0
 800d63c:	bd70      	pop	{r4, r5, r6, pc}
 800d63e:	b3b1      	cbz	r1, 800d6ae <__ieee754_sqrtf+0x86>
 800d640:	2a00      	cmp	r2, #0
 800d642:	da04      	bge.n	800d64e <__ieee754_sqrtf+0x26>
 800d644:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d648:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d64c:	bd70      	pop	{r4, r5, r6, pc}
 800d64e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800d652:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800d656:	d204      	bcs.n	800d662 <__ieee754_sqrtf+0x3a>
 800d658:	2100      	movs	r1, #0
 800d65a:	0210      	lsls	r0, r2, #8
 800d65c:	d528      	bpl.n	800d6b0 <__ieee754_sqrtf+0x88>
 800d65e:	3901      	subs	r1, #1
 800d660:	1a5b      	subs	r3, r3, r1
 800d662:	3b7f      	subs	r3, #127	; 0x7f
 800d664:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800d668:	07d9      	lsls	r1, r3, #31
 800d66a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d66e:	bf48      	it	mi
 800d670:	0052      	lslmi	r2, r2, #1
 800d672:	1059      	asrs	r1, r3, #1
 800d674:	2300      	movs	r3, #0
 800d676:	0052      	lsls	r2, r2, #1
 800d678:	2419      	movs	r4, #25
 800d67a:	461e      	mov	r6, r3
 800d67c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800d680:	1835      	adds	r5, r6, r0
 800d682:	4295      	cmp	r5, r2
 800d684:	bfde      	ittt	le
 800d686:	182e      	addle	r6, r5, r0
 800d688:	1b52      	suble	r2, r2, r5
 800d68a:	181b      	addle	r3, r3, r0
 800d68c:	3c01      	subs	r4, #1
 800d68e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d692:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800d696:	d1f3      	bne.n	800d680 <__ieee754_sqrtf+0x58>
 800d698:	b112      	cbz	r2, 800d6a0 <__ieee754_sqrtf+0x78>
 800d69a:	3301      	adds	r3, #1
 800d69c:	f023 0301 	bic.w	r3, r3, #1
 800d6a0:	105b      	asrs	r3, r3, #1
 800d6a2:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 800d6a6:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 800d6aa:	ee00 3a10 	vmov	s0, r3
 800d6ae:	bd70      	pop	{r4, r5, r6, pc}
 800d6b0:	0052      	lsls	r2, r2, #1
 800d6b2:	3101      	adds	r1, #1
 800d6b4:	e7d1      	b.n	800d65a <__ieee754_sqrtf+0x32>

0800d6b6 <fabs>:
 800d6b6:	ec53 2b10 	vmov	r2, r3, d0
 800d6ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6be:	ec43 2b10 	vmov	d0, r2, r3
 800d6c2:	4770      	bx	lr

0800d6c4 <finite>:
 800d6c4:	ee10 3a90 	vmov	r3, s1
 800d6c8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800d6cc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d6d0:	0fc0      	lsrs	r0, r0, #31
 800d6d2:	4770      	bx	lr

0800d6d4 <matherr>:
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	4770      	bx	lr

0800d6d8 <nan>:
 800d6d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d6e0 <nan+0x8>
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	00000000 	.word	0x00000000
 800d6e4:	7ff80000 	.word	0x7ff80000

0800d6e8 <rint>:
 800d6e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6ea:	ec51 0b10 	vmov	r0, r1, d0
 800d6ee:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800d6f2:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800d6f6:	2e13      	cmp	r6, #19
 800d6f8:	ee10 7a10 	vmov	r7, s0
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	4602      	mov	r2, r0
 800d700:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800d704:	dc58      	bgt.n	800d7b8 <rint+0xd0>
 800d706:	2e00      	cmp	r6, #0
 800d708:	da2b      	bge.n	800d762 <rint+0x7a>
 800d70a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d70e:	4302      	orrs	r2, r0
 800d710:	d023      	beq.n	800d75a <rint+0x72>
 800d712:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800d716:	4302      	orrs	r2, r0
 800d718:	4251      	negs	r1, r2
 800d71a:	4311      	orrs	r1, r2
 800d71c:	0b09      	lsrs	r1, r1, #12
 800d71e:	0c5b      	lsrs	r3, r3, #17
 800d720:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800d724:	045b      	lsls	r3, r3, #17
 800d726:	ea41 0703 	orr.w	r7, r1, r3
 800d72a:	4b31      	ldr	r3, [pc, #196]	; (800d7f0 <rint+0x108>)
 800d72c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d730:	4639      	mov	r1, r7
 800d732:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d736:	ee10 0a10 	vmov	r0, s0
 800d73a:	4632      	mov	r2, r6
 800d73c:	463b      	mov	r3, r7
 800d73e:	f7f5 f895 	bl	800286c <__adddf3>
 800d742:	e9cd 0100 	strd	r0, r1, [sp]
 800d746:	463b      	mov	r3, r7
 800d748:	4632      	mov	r2, r6
 800d74a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d74e:	f7f5 f88b 	bl	8002868 <__aeabi_dsub>
 800d752:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d756:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800d75a:	ec41 0b10 	vmov	d0, r0, r1
 800d75e:	b003      	add	sp, #12
 800d760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d762:	4c24      	ldr	r4, [pc, #144]	; (800d7f4 <rint+0x10c>)
 800d764:	4134      	asrs	r4, r6
 800d766:	ea01 0704 	and.w	r7, r1, r4
 800d76a:	4307      	orrs	r7, r0
 800d76c:	d0f5      	beq.n	800d75a <rint+0x72>
 800d76e:	0861      	lsrs	r1, r4, #1
 800d770:	ea03 0001 	and.w	r0, r3, r1
 800d774:	4302      	orrs	r2, r0
 800d776:	d00b      	beq.n	800d790 <rint+0xa8>
 800d778:	ea23 0101 	bic.w	r1, r3, r1
 800d77c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d780:	2e13      	cmp	r6, #19
 800d782:	fa43 f306 	asr.w	r3, r3, r6
 800d786:	bf0c      	ite	eq
 800d788:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800d78c:	2200      	movne	r2, #0
 800d78e:	430b      	orrs	r3, r1
 800d790:	4619      	mov	r1, r3
 800d792:	4b17      	ldr	r3, [pc, #92]	; (800d7f0 <rint+0x108>)
 800d794:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d798:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d79c:	4610      	mov	r0, r2
 800d79e:	462b      	mov	r3, r5
 800d7a0:	4622      	mov	r2, r4
 800d7a2:	f7f5 f863 	bl	800286c <__adddf3>
 800d7a6:	e9cd 0100 	strd	r0, r1, [sp]
 800d7aa:	4622      	mov	r2, r4
 800d7ac:	462b      	mov	r3, r5
 800d7ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7b2:	f7f5 f859 	bl	8002868 <__aeabi_dsub>
 800d7b6:	e7d0      	b.n	800d75a <rint+0x72>
 800d7b8:	2e33      	cmp	r6, #51	; 0x33
 800d7ba:	dd08      	ble.n	800d7ce <rint+0xe6>
 800d7bc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d7c0:	d1cb      	bne.n	800d75a <rint+0x72>
 800d7c2:	ee10 2a10 	vmov	r2, s0
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	f7f5 f850 	bl	800286c <__adddf3>
 800d7cc:	e7c5      	b.n	800d75a <rint+0x72>
 800d7ce:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800d7d2:	f04f 34ff 	mov.w	r4, #4294967295
 800d7d6:	40f4      	lsrs	r4, r6
 800d7d8:	4220      	tst	r0, r4
 800d7da:	d0be      	beq.n	800d75a <rint+0x72>
 800d7dc:	0861      	lsrs	r1, r4, #1
 800d7de:	420f      	tst	r7, r1
 800d7e0:	bf1f      	itttt	ne
 800d7e2:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800d7e6:	ea27 0101 	bicne.w	r1, r7, r1
 800d7ea:	4132      	asrne	r2, r6
 800d7ec:	430a      	orrne	r2, r1
 800d7ee:	e7cf      	b.n	800d790 <rint+0xa8>
 800d7f0:	080244f8 	.word	0x080244f8
 800d7f4:	000fffff 	.word	0x000fffff

0800d7f8 <scalbn>:
 800d7f8:	b570      	push	{r4, r5, r6, lr}
 800d7fa:	ec55 4b10 	vmov	r4, r5, d0
 800d7fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d802:	4606      	mov	r6, r0
 800d804:	462b      	mov	r3, r5
 800d806:	b9b2      	cbnz	r2, 800d836 <scalbn+0x3e>
 800d808:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d80c:	4323      	orrs	r3, r4
 800d80e:	d03c      	beq.n	800d88a <scalbn+0x92>
 800d810:	2200      	movs	r2, #0
 800d812:	4b33      	ldr	r3, [pc, #204]	; (800d8e0 <scalbn+0xe8>)
 800d814:	4629      	mov	r1, r5
 800d816:	ee10 0a10 	vmov	r0, s0
 800d81a:	f7f5 f9d9 	bl	8002bd0 <__aeabi_dmul>
 800d81e:	4a31      	ldr	r2, [pc, #196]	; (800d8e4 <scalbn+0xec>)
 800d820:	4296      	cmp	r6, r2
 800d822:	4604      	mov	r4, r0
 800d824:	460d      	mov	r5, r1
 800d826:	460b      	mov	r3, r1
 800d828:	da13      	bge.n	800d852 <scalbn+0x5a>
 800d82a:	a329      	add	r3, pc, #164	; (adr r3, 800d8d0 <scalbn+0xd8>)
 800d82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d830:	f7f5 f9ce 	bl	8002bd0 <__aeabi_dmul>
 800d834:	e00a      	b.n	800d84c <scalbn+0x54>
 800d836:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d83a:	428a      	cmp	r2, r1
 800d83c:	d10c      	bne.n	800d858 <scalbn+0x60>
 800d83e:	ee10 2a10 	vmov	r2, s0
 800d842:	462b      	mov	r3, r5
 800d844:	4620      	mov	r0, r4
 800d846:	4629      	mov	r1, r5
 800d848:	f7f5 f810 	bl	800286c <__adddf3>
 800d84c:	4604      	mov	r4, r0
 800d84e:	460d      	mov	r5, r1
 800d850:	e01b      	b.n	800d88a <scalbn+0x92>
 800d852:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d856:	3a36      	subs	r2, #54	; 0x36
 800d858:	4432      	add	r2, r6
 800d85a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d85e:	428a      	cmp	r2, r1
 800d860:	dd0b      	ble.n	800d87a <scalbn+0x82>
 800d862:	ec45 4b11 	vmov	d1, r4, r5
 800d866:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800d8d8 <scalbn+0xe0>
 800d86a:	f000 fbbd 	bl	800dfe8 <copysign>
 800d86e:	a31a      	add	r3, pc, #104	; (adr r3, 800d8d8 <scalbn+0xe0>)
 800d870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d874:	ec51 0b10 	vmov	r0, r1, d0
 800d878:	e7da      	b.n	800d830 <scalbn+0x38>
 800d87a:	2a00      	cmp	r2, #0
 800d87c:	dd08      	ble.n	800d890 <scalbn+0x98>
 800d87e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d882:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d886:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d88a:	ec45 4b10 	vmov	d0, r4, r5
 800d88e:	bd70      	pop	{r4, r5, r6, pc}
 800d890:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d894:	da0d      	bge.n	800d8b2 <scalbn+0xba>
 800d896:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d89a:	429e      	cmp	r6, r3
 800d89c:	ec45 4b11 	vmov	d1, r4, r5
 800d8a0:	dce1      	bgt.n	800d866 <scalbn+0x6e>
 800d8a2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800d8d0 <scalbn+0xd8>
 800d8a6:	f000 fb9f 	bl	800dfe8 <copysign>
 800d8aa:	a309      	add	r3, pc, #36	; (adr r3, 800d8d0 <scalbn+0xd8>)
 800d8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b0:	e7e0      	b.n	800d874 <scalbn+0x7c>
 800d8b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d8b6:	3236      	adds	r2, #54	; 0x36
 800d8b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d8bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	4629      	mov	r1, r5
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	4b08      	ldr	r3, [pc, #32]	; (800d8e8 <scalbn+0xf0>)
 800d8c8:	e7b2      	b.n	800d830 <scalbn+0x38>
 800d8ca:	bf00      	nop
 800d8cc:	f3af 8000 	nop.w
 800d8d0:	c2f8f359 	.word	0xc2f8f359
 800d8d4:	01a56e1f 	.word	0x01a56e1f
 800d8d8:	8800759c 	.word	0x8800759c
 800d8dc:	7e37e43c 	.word	0x7e37e43c
 800d8e0:	43500000 	.word	0x43500000
 800d8e4:	ffff3cb0 	.word	0xffff3cb0
 800d8e8:	3c900000 	.word	0x3c900000

0800d8ec <expm1f>:
 800d8ec:	ee10 2a10 	vmov	r2, s0
 800d8f0:	4985      	ldr	r1, [pc, #532]	; (800db08 <expm1f+0x21c>)
 800d8f2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d8f6:	428b      	cmp	r3, r1
 800d8f8:	d924      	bls.n	800d944 <expm1f+0x58>
 800d8fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d8fe:	d902      	bls.n	800d906 <expm1f+0x1a>
 800d900:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d904:	4770      	bx	lr
 800d906:	d106      	bne.n	800d916 <expm1f+0x2a>
 800d908:	2a00      	cmp	r2, #0
 800d90a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d90e:	bfb8      	it	lt
 800d910:	eeb0 0a67 	vmovlt.f32	s0, s15
 800d914:	4770      	bx	lr
 800d916:	2a00      	cmp	r2, #0
 800d918:	db07      	blt.n	800d92a <expm1f+0x3e>
 800d91a:	497c      	ldr	r1, [pc, #496]	; (800db0c <expm1f+0x220>)
 800d91c:	428b      	cmp	r3, r1
 800d91e:	d963      	bls.n	800d9e8 <expm1f+0xfc>
 800d920:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800db10 <expm1f+0x224>
 800d924:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d928:	4770      	bx	lr
 800d92a:	eddf 7a7a 	vldr	s15, [pc, #488]	; 800db14 <expm1f+0x228>
 800d92e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d932:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d93a:	f140 80dd 	bpl.w	800daf8 <expm1f+0x20c>
 800d93e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d942:	4770      	bx	lr
 800d944:	4974      	ldr	r1, [pc, #464]	; (800db18 <expm1f+0x22c>)
 800d946:	428b      	cmp	r3, r1
 800d948:	d96d      	bls.n	800da26 <expm1f+0x13a>
 800d94a:	4974      	ldr	r1, [pc, #464]	; (800db1c <expm1f+0x230>)
 800d94c:	428b      	cmp	r3, r1
 800d94e:	d84b      	bhi.n	800d9e8 <expm1f+0xfc>
 800d950:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800db20 <expm1f+0x234>
 800d954:	2a00      	cmp	r2, #0
 800d956:	bfa7      	ittee	ge
 800d958:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800d95c:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800db24 <expm1f+0x238>
 800d960:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800db28 <expm1f+0x23c>
 800d964:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800d968:	bfac      	ite	ge
 800d96a:	2301      	movge	r3, #1
 800d96c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d970:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d974:	ee37 7a40 	vsub.f32	s14, s14, s0
 800d978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d97c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d980:	ee20 5a25 	vmul.f32	s10, s0, s11
 800d984:	eddf 6a69 	vldr	s13, [pc, #420]	; 800db2c <expm1f+0x240>
 800d988:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800db30 <expm1f+0x244>
 800d98c:	ee20 7a05 	vmul.f32	s14, s0, s10
 800d990:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d994:	eddf 6a67 	vldr	s13, [pc, #412]	; 800db34 <expm1f+0x248>
 800d998:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d99c:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800db38 <expm1f+0x24c>
 800d9a0:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d9a4:	eddf 6a65 	vldr	s13, [pc, #404]	; 800db3c <expm1f+0x250>
 800d9a8:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d9ac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d9b0:	eef0 4a46 	vmov.f32	s9, s12
 800d9b4:	eee7 4a26 	vfma.f32	s9, s14, s13
 800d9b8:	eef0 6a64 	vmov.f32	s13, s9
 800d9bc:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800d9c0:	eee5 4a66 	vfms.f32	s9, s10, s13
 800d9c4:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800d9c8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800d9cc:	eee0 6a64 	vfms.f32	s13, s0, s9
 800d9d0:	eef0 4a66 	vmov.f32	s9, s13
 800d9d4:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800d9d8:	ee66 6a87 	vmul.f32	s13, s13, s14
 800d9dc:	bb8b      	cbnz	r3, 800da42 <expm1f+0x156>
 800d9de:	eef0 7a47 	vmov.f32	s15, s14
 800d9e2:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800d9e6:	e027      	b.n	800da38 <expm1f+0x14c>
 800d9e8:	eddf 7a55 	vldr	s15, [pc, #340]	; 800db40 <expm1f+0x254>
 800d9ec:	2a00      	cmp	r2, #0
 800d9ee:	ee20 7a27 	vmul.f32	s14, s0, s15
 800d9f2:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800d9f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d9fa:	bfb8      	it	lt
 800d9fc:	eef0 7a66 	vmovlt.f32	s15, s13
 800da00:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da04:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800db20 <expm1f+0x234>
 800da08:	eddf 6a46 	vldr	s13, [pc, #280]	; 800db24 <expm1f+0x238>
 800da0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da10:	ee17 3a90 	vmov	r3, s15
 800da14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da18:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800da1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800da20:	eeb0 7a40 	vmov.f32	s14, s0
 800da24:	e7a4      	b.n	800d970 <expm1f+0x84>
 800da26:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800da2a:	d208      	bcs.n	800da3e <expm1f+0x152>
 800da2c:	eddf 7a38 	vldr	s15, [pc, #224]	; 800db10 <expm1f+0x224>
 800da30:	ee70 7a27 	vadd.f32	s15, s0, s15
 800da34:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800da38:	ee30 0a67 	vsub.f32	s0, s0, s15
 800da3c:	4770      	bx	lr
 800da3e:	2300      	movs	r3, #0
 800da40:	e79c      	b.n	800d97c <expm1f+0x90>
 800da42:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800da46:	1c5a      	adds	r2, r3, #1
 800da48:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800da4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da50:	d106      	bne.n	800da60 <expm1f+0x174>
 800da52:	ee70 7a67 	vsub.f32	s15, s0, s15
 800da56:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800da5a:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800da5e:	4770      	bx	lr
 800da60:	2b01      	cmp	r3, #1
 800da62:	d118      	bne.n	800da96 <expm1f+0x1aa>
 800da64:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800da68:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800da6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da70:	bf41      	itttt	mi
 800da72:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800da76:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800da7a:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800da7e:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800da82:	bf5f      	itttt	pl
 800da84:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800da88:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800da8c:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800da90:	eeb0 0a46 	vmovpl.f32	s0, s12
 800da94:	4770      	bx	lr
 800da96:	1c5a      	adds	r2, r3, #1
 800da98:	2a39      	cmp	r2, #57	; 0x39
 800da9a:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800da9e:	d90b      	bls.n	800dab8 <expm1f+0x1cc>
 800daa0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800daa4:	ee36 0a40 	vsub.f32	s0, s12, s0
 800daa8:	ee10 3a10 	vmov	r3, s0
 800daac:	440b      	add	r3, r1
 800daae:	ee00 3a10 	vmov	s0, r3
 800dab2:	ee30 0a46 	vsub.f32	s0, s0, s12
 800dab6:	4770      	bx	lr
 800dab8:	2b16      	cmp	r3, #22
 800daba:	dc11      	bgt.n	800dae0 <expm1f+0x1f4>
 800dabc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dac0:	fa42 f303 	asr.w	r3, r2, r3
 800dac4:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800dac8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800dacc:	ee07 3a90 	vmov	s15, r3
 800dad0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800dad4:	ee10 3a10 	vmov	r3, s0
 800dad8:	440b      	add	r3, r1
 800dada:	ee00 3a10 	vmov	s0, r3
 800dade:	4770      	bx	lr
 800dae0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800dae4:	05db      	lsls	r3, r3, #23
 800dae6:	ee07 3a10 	vmov	s14, r3
 800daea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800daee:	ee30 0a67 	vsub.f32	s0, s0, s15
 800daf2:	ee30 0a06 	vadd.f32	s0, s0, s12
 800daf6:	e7ed      	b.n	800dad4 <expm1f+0x1e8>
 800daf8:	eddf 7a11 	vldr	s15, [pc, #68]	; 800db40 <expm1f+0x254>
 800dafc:	ee20 7a27 	vmul.f32	s14, s0, s15
 800db00:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800db04:	e77c      	b.n	800da00 <expm1f+0x114>
 800db06:	bf00      	nop
 800db08:	4195b843 	.word	0x4195b843
 800db0c:	42b17217 	.word	0x42b17217
 800db10:	7149f2ca 	.word	0x7149f2ca
 800db14:	0da24260 	.word	0x0da24260
 800db18:	3eb17218 	.word	0x3eb17218
 800db1c:	3f851591 	.word	0x3f851591
 800db20:	3f317180 	.word	0x3f317180
 800db24:	3717f7d1 	.word	0x3717f7d1
 800db28:	b717f7d1 	.word	0xb717f7d1
 800db2c:	b457edbb 	.word	0xb457edbb
 800db30:	36867e54 	.word	0x36867e54
 800db34:	b8a670cd 	.word	0xb8a670cd
 800db38:	3ad00d01 	.word	0x3ad00d01
 800db3c:	bd088889 	.word	0xbd088889
 800db40:	3fb8aa3b 	.word	0x3fb8aa3b

0800db44 <fabsf>:
 800db44:	ee10 3a10 	vmov	r3, s0
 800db48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db4c:	ee00 3a10 	vmov	s0, r3
 800db50:	4770      	bx	lr

0800db52 <finitef>:
 800db52:	ee10 3a10 	vmov	r3, s0
 800db56:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800db5a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800db5e:	bfac      	ite	ge
 800db60:	2000      	movge	r0, #0
 800db62:	2001      	movlt	r0, #1
 800db64:	4770      	bx	lr
	...

0800db68 <nanf>:
 800db68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800db70 <nanf+0x8>
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	7fc00000 	.word	0x7fc00000

0800db74 <scalbnf>:
 800db74:	b508      	push	{r3, lr}
 800db76:	ee10 2a10 	vmov	r2, s0
 800db7a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800db7e:	ed2d 8b02 	vpush	{d8}
 800db82:	eef0 0a40 	vmov.f32	s1, s0
 800db86:	d004      	beq.n	800db92 <scalbnf+0x1e>
 800db88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800db8c:	d306      	bcc.n	800db9c <scalbnf+0x28>
 800db8e:	ee70 0a00 	vadd.f32	s1, s0, s0
 800db92:	ecbd 8b02 	vpop	{d8}
 800db96:	eeb0 0a60 	vmov.f32	s0, s1
 800db9a:	bd08      	pop	{r3, pc}
 800db9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dba0:	d21c      	bcs.n	800dbdc <scalbnf+0x68>
 800dba2:	4b1f      	ldr	r3, [pc, #124]	; (800dc20 <scalbnf+0xac>)
 800dba4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800dc24 <scalbnf+0xb0>
 800dba8:	4298      	cmp	r0, r3
 800dbaa:	ee60 0a27 	vmul.f32	s1, s0, s15
 800dbae:	db10      	blt.n	800dbd2 <scalbnf+0x5e>
 800dbb0:	ee10 2a90 	vmov	r2, s1
 800dbb4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800dbb8:	3b19      	subs	r3, #25
 800dbba:	4403      	add	r3, r0
 800dbbc:	2bfe      	cmp	r3, #254	; 0xfe
 800dbbe:	dd0f      	ble.n	800dbe0 <scalbnf+0x6c>
 800dbc0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800dc28 <scalbnf+0xb4>
 800dbc4:	eeb0 0a48 	vmov.f32	s0, s16
 800dbc8:	f000 fa1b 	bl	800e002 <copysignf>
 800dbcc:	ee60 0a08 	vmul.f32	s1, s0, s16
 800dbd0:	e7df      	b.n	800db92 <scalbnf+0x1e>
 800dbd2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800dc2c <scalbnf+0xb8>
 800dbd6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800dbda:	e7da      	b.n	800db92 <scalbnf+0x1e>
 800dbdc:	0ddb      	lsrs	r3, r3, #23
 800dbde:	e7ec      	b.n	800dbba <scalbnf+0x46>
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	dd06      	ble.n	800dbf2 <scalbnf+0x7e>
 800dbe4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800dbe8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800dbec:	ee00 3a90 	vmov	s1, r3
 800dbf0:	e7cf      	b.n	800db92 <scalbnf+0x1e>
 800dbf2:	f113 0f16 	cmn.w	r3, #22
 800dbf6:	da06      	bge.n	800dc06 <scalbnf+0x92>
 800dbf8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dbfc:	4298      	cmp	r0, r3
 800dbfe:	dcdf      	bgt.n	800dbc0 <scalbnf+0x4c>
 800dc00:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800dc2c <scalbnf+0xb8>
 800dc04:	e7de      	b.n	800dbc4 <scalbnf+0x50>
 800dc06:	3319      	adds	r3, #25
 800dc08:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800dc0c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800dc10:	eddf 7a07 	vldr	s15, [pc, #28]	; 800dc30 <scalbnf+0xbc>
 800dc14:	ee07 3a10 	vmov	s14, r3
 800dc18:	ee67 0a27 	vmul.f32	s1, s14, s15
 800dc1c:	e7b9      	b.n	800db92 <scalbnf+0x1e>
 800dc1e:	bf00      	nop
 800dc20:	ffff3cb0 	.word	0xffff3cb0
 800dc24:	4c000000 	.word	0x4c000000
 800dc28:	7149f2ca 	.word	0x7149f2ca
 800dc2c:	0da24260 	.word	0x0da24260
 800dc30:	33000000 	.word	0x33000000
 800dc34:	00000000 	.word	0x00000000

0800dc38 <__ieee754_log>:
 800dc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc3c:	ec51 0b10 	vmov	r0, r1, d0
 800dc40:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800dc44:	b087      	sub	sp, #28
 800dc46:	ee10 3a10 	vmov	r3, s0
 800dc4a:	460d      	mov	r5, r1
 800dc4c:	da27      	bge.n	800dc9e <__ieee754_log+0x66>
 800dc4e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800dc52:	4313      	orrs	r3, r2
 800dc54:	d10a      	bne.n	800dc6c <__ieee754_log+0x34>
 800dc56:	49cc      	ldr	r1, [pc, #816]	; (800df88 <__ieee754_log+0x350>)
 800dc58:	2200      	movs	r2, #0
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	f7f5 f8e1 	bl	8002e24 <__aeabi_ddiv>
 800dc62:	ec41 0b10 	vmov	d0, r0, r1
 800dc66:	b007      	add	sp, #28
 800dc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc6c:	2900      	cmp	r1, #0
 800dc6e:	da07      	bge.n	800dc80 <__ieee754_log+0x48>
 800dc70:	ee10 2a10 	vmov	r2, s0
 800dc74:	460b      	mov	r3, r1
 800dc76:	f7f4 fdf7 	bl	8002868 <__aeabi_dsub>
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	e7ee      	b.n	800dc5e <__ieee754_log+0x26>
 800dc80:	4bc2      	ldr	r3, [pc, #776]	; (800df8c <__ieee754_log+0x354>)
 800dc82:	2200      	movs	r2, #0
 800dc84:	f7f4 ffa4 	bl	8002bd0 <__aeabi_dmul>
 800dc88:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800dc8c:	460d      	mov	r5, r1
 800dc8e:	4ac0      	ldr	r2, [pc, #768]	; (800df90 <__ieee754_log+0x358>)
 800dc90:	4295      	cmp	r5, r2
 800dc92:	dd06      	ble.n	800dca2 <__ieee754_log+0x6a>
 800dc94:	4602      	mov	r2, r0
 800dc96:	460b      	mov	r3, r1
 800dc98:	f7f4 fde8 	bl	800286c <__adddf3>
 800dc9c:	e7e1      	b.n	800dc62 <__ieee754_log+0x2a>
 800dc9e:	2300      	movs	r3, #0
 800dca0:	e7f5      	b.n	800dc8e <__ieee754_log+0x56>
 800dca2:	152c      	asrs	r4, r5, #20
 800dca4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800dca8:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dcac:	441c      	add	r4, r3
 800dcae:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800dcb2:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800dcb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dcba:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800dcbe:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800dcc2:	ea42 0105 	orr.w	r1, r2, r5
 800dcc6:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800dcca:	2200      	movs	r2, #0
 800dccc:	4bb1      	ldr	r3, [pc, #708]	; (800df94 <__ieee754_log+0x35c>)
 800dcce:	f7f4 fdcb 	bl	8002868 <__aeabi_dsub>
 800dcd2:	1cab      	adds	r3, r5, #2
 800dcd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcd8:	2b02      	cmp	r3, #2
 800dcda:	4682      	mov	sl, r0
 800dcdc:	468b      	mov	fp, r1
 800dcde:	f04f 0200 	mov.w	r2, #0
 800dce2:	dc5b      	bgt.n	800dd9c <__ieee754_log+0x164>
 800dce4:	2300      	movs	r3, #0
 800dce6:	f7f5 f9db 	bl	80030a0 <__aeabi_dcmpeq>
 800dcea:	b1d0      	cbz	r0, 800dd22 <__ieee754_log+0xea>
 800dcec:	2c00      	cmp	r4, #0
 800dcee:	f000 8170 	beq.w	800dfd2 <__ieee754_log+0x39a>
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f7f4 ff06 	bl	8002b04 <__aeabi_i2d>
 800dcf8:	a38f      	add	r3, pc, #572	; (adr r3, 800df38 <__ieee754_log+0x300>)
 800dcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfe:	4606      	mov	r6, r0
 800dd00:	460f      	mov	r7, r1
 800dd02:	f7f4 ff65 	bl	8002bd0 <__aeabi_dmul>
 800dd06:	a38e      	add	r3, pc, #568	; (adr r3, 800df40 <__ieee754_log+0x308>)
 800dd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	460d      	mov	r5, r1
 800dd10:	4630      	mov	r0, r6
 800dd12:	4639      	mov	r1, r7
 800dd14:	f7f4 ff5c 	bl	8002bd0 <__aeabi_dmul>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	4629      	mov	r1, r5
 800dd20:	e7ba      	b.n	800dc98 <__ieee754_log+0x60>
 800dd22:	a389      	add	r3, pc, #548	; (adr r3, 800df48 <__ieee754_log+0x310>)
 800dd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd28:	4650      	mov	r0, sl
 800dd2a:	4659      	mov	r1, fp
 800dd2c:	f7f4 ff50 	bl	8002bd0 <__aeabi_dmul>
 800dd30:	4602      	mov	r2, r0
 800dd32:	460b      	mov	r3, r1
 800dd34:	2000      	movs	r0, #0
 800dd36:	4998      	ldr	r1, [pc, #608]	; (800df98 <__ieee754_log+0x360>)
 800dd38:	f7f4 fd96 	bl	8002868 <__aeabi_dsub>
 800dd3c:	4652      	mov	r2, sl
 800dd3e:	4606      	mov	r6, r0
 800dd40:	460f      	mov	r7, r1
 800dd42:	465b      	mov	r3, fp
 800dd44:	4650      	mov	r0, sl
 800dd46:	4659      	mov	r1, fp
 800dd48:	f7f4 ff42 	bl	8002bd0 <__aeabi_dmul>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	460b      	mov	r3, r1
 800dd50:	4630      	mov	r0, r6
 800dd52:	4639      	mov	r1, r7
 800dd54:	f7f4 ff3c 	bl	8002bd0 <__aeabi_dmul>
 800dd58:	4606      	mov	r6, r0
 800dd5a:	460f      	mov	r7, r1
 800dd5c:	b934      	cbnz	r4, 800dd6c <__ieee754_log+0x134>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	460b      	mov	r3, r1
 800dd62:	4650      	mov	r0, sl
 800dd64:	4659      	mov	r1, fp
 800dd66:	f7f4 fd7f 	bl	8002868 <__aeabi_dsub>
 800dd6a:	e77a      	b.n	800dc62 <__ieee754_log+0x2a>
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	f7f4 fec9 	bl	8002b04 <__aeabi_i2d>
 800dd72:	a371      	add	r3, pc, #452	; (adr r3, 800df38 <__ieee754_log+0x300>)
 800dd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd78:	4680      	mov	r8, r0
 800dd7a:	4689      	mov	r9, r1
 800dd7c:	f7f4 ff28 	bl	8002bd0 <__aeabi_dmul>
 800dd80:	a36f      	add	r3, pc, #444	; (adr r3, 800df40 <__ieee754_log+0x308>)
 800dd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd86:	4604      	mov	r4, r0
 800dd88:	460d      	mov	r5, r1
 800dd8a:	4640      	mov	r0, r8
 800dd8c:	4649      	mov	r1, r9
 800dd8e:	f7f4 ff1f 	bl	8002bd0 <__aeabi_dmul>
 800dd92:	4602      	mov	r2, r0
 800dd94:	460b      	mov	r3, r1
 800dd96:	4630      	mov	r0, r6
 800dd98:	4639      	mov	r1, r7
 800dd9a:	e0b2      	b.n	800df02 <__ieee754_log+0x2ca>
 800dd9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dda0:	f7f4 fd64 	bl	800286c <__adddf3>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	4650      	mov	r0, sl
 800ddaa:	4659      	mov	r1, fp
 800ddac:	f7f5 f83a 	bl	8002e24 <__aeabi_ddiv>
 800ddb0:	e9cd 0100 	strd	r0, r1, [sp]
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f7f4 fea5 	bl	8002b04 <__aeabi_i2d>
 800ddba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddc2:	4610      	mov	r0, r2
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	f7f4 ff03 	bl	8002bd0 <__aeabi_dmul>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	460b      	mov	r3, r1
 800ddce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ddd2:	f7f4 fefd 	bl	8002bd0 <__aeabi_dmul>
 800ddd6:	a35e      	add	r3, pc, #376	; (adr r3, 800df50 <__ieee754_log+0x318>)
 800ddd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dddc:	4606      	mov	r6, r0
 800ddde:	460f      	mov	r7, r1
 800dde0:	f7f4 fef6 	bl	8002bd0 <__aeabi_dmul>
 800dde4:	a35c      	add	r3, pc, #368	; (adr r3, 800df58 <__ieee754_log+0x320>)
 800dde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddea:	f7f4 fd3f 	bl	800286c <__adddf3>
 800ddee:	4632      	mov	r2, r6
 800ddf0:	463b      	mov	r3, r7
 800ddf2:	f7f4 feed 	bl	8002bd0 <__aeabi_dmul>
 800ddf6:	a35a      	add	r3, pc, #360	; (adr r3, 800df60 <__ieee754_log+0x328>)
 800ddf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfc:	f7f4 fd36 	bl	800286c <__adddf3>
 800de00:	4632      	mov	r2, r6
 800de02:	463b      	mov	r3, r7
 800de04:	f7f4 fee4 	bl	8002bd0 <__aeabi_dmul>
 800de08:	a357      	add	r3, pc, #348	; (adr r3, 800df68 <__ieee754_log+0x330>)
 800de0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0e:	f7f4 fd2d 	bl	800286c <__adddf3>
 800de12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de16:	f7f4 fedb 	bl	8002bd0 <__aeabi_dmul>
 800de1a:	a355      	add	r3, pc, #340	; (adr r3, 800df70 <__ieee754_log+0x338>)
 800de1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de24:	4630      	mov	r0, r6
 800de26:	4639      	mov	r1, r7
 800de28:	f7f4 fed2 	bl	8002bd0 <__aeabi_dmul>
 800de2c:	a352      	add	r3, pc, #328	; (adr r3, 800df78 <__ieee754_log+0x340>)
 800de2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de32:	f7f4 fd1b 	bl	800286c <__adddf3>
 800de36:	4632      	mov	r2, r6
 800de38:	463b      	mov	r3, r7
 800de3a:	f7f4 fec9 	bl	8002bd0 <__aeabi_dmul>
 800de3e:	a350      	add	r3, pc, #320	; (adr r3, 800df80 <__ieee754_log+0x348>)
 800de40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de44:	f7f4 fd12 	bl	800286c <__adddf3>
 800de48:	4632      	mov	r2, r6
 800de4a:	463b      	mov	r3, r7
 800de4c:	f7f4 fec0 	bl	8002bd0 <__aeabi_dmul>
 800de50:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 800de54:	4602      	mov	r2, r0
 800de56:	460b      	mov	r3, r1
 800de58:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800de5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de60:	f7f4 fd04 	bl	800286c <__adddf3>
 800de64:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 800de68:	3551      	adds	r5, #81	; 0x51
 800de6a:	ea45 0508 	orr.w	r5, r5, r8
 800de6e:	2d00      	cmp	r5, #0
 800de70:	4606      	mov	r6, r0
 800de72:	460f      	mov	r7, r1
 800de74:	dd50      	ble.n	800df18 <__ieee754_log+0x2e0>
 800de76:	2200      	movs	r2, #0
 800de78:	4b47      	ldr	r3, [pc, #284]	; (800df98 <__ieee754_log+0x360>)
 800de7a:	4650      	mov	r0, sl
 800de7c:	4659      	mov	r1, fp
 800de7e:	f7f4 fea7 	bl	8002bd0 <__aeabi_dmul>
 800de82:	4652      	mov	r2, sl
 800de84:	465b      	mov	r3, fp
 800de86:	f7f4 fea3 	bl	8002bd0 <__aeabi_dmul>
 800de8a:	4680      	mov	r8, r0
 800de8c:	4689      	mov	r9, r1
 800de8e:	b994      	cbnz	r4, 800deb6 <__ieee754_log+0x27e>
 800de90:	4602      	mov	r2, r0
 800de92:	460b      	mov	r3, r1
 800de94:	4630      	mov	r0, r6
 800de96:	4639      	mov	r1, r7
 800de98:	f7f4 fce8 	bl	800286c <__adddf3>
 800de9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dea0:	f7f4 fe96 	bl	8002bd0 <__aeabi_dmul>
 800dea4:	4602      	mov	r2, r0
 800dea6:	460b      	mov	r3, r1
 800dea8:	4640      	mov	r0, r8
 800deaa:	4649      	mov	r1, r9
 800deac:	f7f4 fcdc 	bl	8002868 <__aeabi_dsub>
 800deb0:	4602      	mov	r2, r0
 800deb2:	460b      	mov	r3, r1
 800deb4:	e755      	b.n	800dd62 <__ieee754_log+0x12a>
 800deb6:	a320      	add	r3, pc, #128	; (adr r3, 800df38 <__ieee754_log+0x300>)
 800deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dec0:	f7f4 fe86 	bl	8002bd0 <__aeabi_dmul>
 800dec4:	4642      	mov	r2, r8
 800dec6:	464b      	mov	r3, r9
 800dec8:	4604      	mov	r4, r0
 800deca:	460d      	mov	r5, r1
 800decc:	4630      	mov	r0, r6
 800dece:	4639      	mov	r1, r7
 800ded0:	f7f4 fccc 	bl	800286c <__adddf3>
 800ded4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ded8:	f7f4 fe7a 	bl	8002bd0 <__aeabi_dmul>
 800dedc:	a318      	add	r3, pc, #96	; (adr r3, 800df40 <__ieee754_log+0x308>)
 800dede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee2:	4606      	mov	r6, r0
 800dee4:	460f      	mov	r7, r1
 800dee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800deea:	f7f4 fe71 	bl	8002bd0 <__aeabi_dmul>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	4630      	mov	r0, r6
 800def4:	4639      	mov	r1, r7
 800def6:	f7f4 fcb9 	bl	800286c <__adddf3>
 800defa:	4602      	mov	r2, r0
 800defc:	460b      	mov	r3, r1
 800defe:	4640      	mov	r0, r8
 800df00:	4649      	mov	r1, r9
 800df02:	f7f4 fcb1 	bl	8002868 <__aeabi_dsub>
 800df06:	4652      	mov	r2, sl
 800df08:	465b      	mov	r3, fp
 800df0a:	f7f4 fcad 	bl	8002868 <__aeabi_dsub>
 800df0e:	4602      	mov	r2, r0
 800df10:	460b      	mov	r3, r1
 800df12:	4620      	mov	r0, r4
 800df14:	4629      	mov	r1, r5
 800df16:	e726      	b.n	800dd66 <__ieee754_log+0x12e>
 800df18:	2c00      	cmp	r4, #0
 800df1a:	d13f      	bne.n	800df9c <__ieee754_log+0x364>
 800df1c:	4602      	mov	r2, r0
 800df1e:	460b      	mov	r3, r1
 800df20:	4650      	mov	r0, sl
 800df22:	4659      	mov	r1, fp
 800df24:	f7f4 fca0 	bl	8002868 <__aeabi_dsub>
 800df28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df2c:	f7f4 fe50 	bl	8002bd0 <__aeabi_dmul>
 800df30:	e7be      	b.n	800deb0 <__ieee754_log+0x278>
 800df32:	bf00      	nop
 800df34:	f3af 8000 	nop.w
 800df38:	fee00000 	.word	0xfee00000
 800df3c:	3fe62e42 	.word	0x3fe62e42
 800df40:	35793c76 	.word	0x35793c76
 800df44:	3dea39ef 	.word	0x3dea39ef
 800df48:	55555555 	.word	0x55555555
 800df4c:	3fd55555 	.word	0x3fd55555
 800df50:	df3e5244 	.word	0xdf3e5244
 800df54:	3fc2f112 	.word	0x3fc2f112
 800df58:	96cb03de 	.word	0x96cb03de
 800df5c:	3fc74664 	.word	0x3fc74664
 800df60:	94229359 	.word	0x94229359
 800df64:	3fd24924 	.word	0x3fd24924
 800df68:	55555593 	.word	0x55555593
 800df6c:	3fe55555 	.word	0x3fe55555
 800df70:	d078c69f 	.word	0xd078c69f
 800df74:	3fc39a09 	.word	0x3fc39a09
 800df78:	1d8e78af 	.word	0x1d8e78af
 800df7c:	3fcc71c5 	.word	0x3fcc71c5
 800df80:	9997fa04 	.word	0x9997fa04
 800df84:	3fd99999 	.word	0x3fd99999
 800df88:	c3500000 	.word	0xc3500000
 800df8c:	43500000 	.word	0x43500000
 800df90:	7fefffff 	.word	0x7fefffff
 800df94:	3ff00000 	.word	0x3ff00000
 800df98:	3fe00000 	.word	0x3fe00000
 800df9c:	a30e      	add	r3, pc, #56	; (adr r3, 800dfd8 <__ieee754_log+0x3a0>)
 800df9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfa6:	f7f4 fe13 	bl	8002bd0 <__aeabi_dmul>
 800dfaa:	4632      	mov	r2, r6
 800dfac:	463b      	mov	r3, r7
 800dfae:	4604      	mov	r4, r0
 800dfb0:	460d      	mov	r5, r1
 800dfb2:	4650      	mov	r0, sl
 800dfb4:	4659      	mov	r1, fp
 800dfb6:	f7f4 fc57 	bl	8002868 <__aeabi_dsub>
 800dfba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfbe:	f7f4 fe07 	bl	8002bd0 <__aeabi_dmul>
 800dfc2:	a307      	add	r3, pc, #28	; (adr r3, 800dfe0 <__ieee754_log+0x3a8>)
 800dfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc8:	4606      	mov	r6, r0
 800dfca:	460f      	mov	r7, r1
 800dfcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfd0:	e6dd      	b.n	800dd8e <__ieee754_log+0x156>
 800dfd2:	2000      	movs	r0, #0
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	e644      	b.n	800dc62 <__ieee754_log+0x2a>
 800dfd8:	fee00000 	.word	0xfee00000
 800dfdc:	3fe62e42 	.word	0x3fe62e42
 800dfe0:	35793c76 	.word	0x35793c76
 800dfe4:	3dea39ef 	.word	0x3dea39ef

0800dfe8 <copysign>:
 800dfe8:	ec53 2b10 	vmov	r2, r3, d0
 800dfec:	ee11 0a90 	vmov	r0, s3
 800dff0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dff4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800dff8:	ea41 0300 	orr.w	r3, r1, r0
 800dffc:	ec43 2b10 	vmov	d0, r2, r3
 800e000:	4770      	bx	lr

0800e002 <copysignf>:
 800e002:	ee10 3a10 	vmov	r3, s0
 800e006:	ee10 2a90 	vmov	r2, s1
 800e00a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e00e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e012:	4313      	orrs	r3, r2
 800e014:	ee00 3a10 	vmov	s0, r3
 800e018:	4770      	bx	lr
	...

0800e01c <__errno>:
 800e01c:	4b01      	ldr	r3, [pc, #4]	; (800e024 <__errno+0x8>)
 800e01e:	6818      	ldr	r0, [r3, #0]
 800e020:	4770      	bx	lr
 800e022:	bf00      	nop
 800e024:	2000056c 	.word	0x2000056c

0800e028 <_close>:
 800e028:	4b02      	ldr	r3, [pc, #8]	; (800e034 <_close+0xc>)
 800e02a:	2258      	movs	r2, #88	; 0x58
 800e02c:	601a      	str	r2, [r3, #0]
 800e02e:	f04f 30ff 	mov.w	r0, #4294967295
 800e032:	4770      	bx	lr
 800e034:	2000fbdc 	.word	0x2000fbdc

0800e038 <_fstat>:
 800e038:	4b02      	ldr	r3, [pc, #8]	; (800e044 <_fstat+0xc>)
 800e03a:	2258      	movs	r2, #88	; 0x58
 800e03c:	601a      	str	r2, [r3, #0]
 800e03e:	f04f 30ff 	mov.w	r0, #4294967295
 800e042:	4770      	bx	lr
 800e044:	2000fbdc 	.word	0x2000fbdc

0800e048 <_isatty>:
 800e048:	4b02      	ldr	r3, [pc, #8]	; (800e054 <_isatty+0xc>)
 800e04a:	2258      	movs	r2, #88	; 0x58
 800e04c:	601a      	str	r2, [r3, #0]
 800e04e:	2000      	movs	r0, #0
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop
 800e054:	2000fbdc 	.word	0x2000fbdc

0800e058 <_lseek>:
 800e058:	4b02      	ldr	r3, [pc, #8]	; (800e064 <_lseek+0xc>)
 800e05a:	2258      	movs	r2, #88	; 0x58
 800e05c:	601a      	str	r2, [r3, #0]
 800e05e:	f04f 30ff 	mov.w	r0, #4294967295
 800e062:	4770      	bx	lr
 800e064:	2000fbdc 	.word	0x2000fbdc

0800e068 <_read>:
 800e068:	4b02      	ldr	r3, [pc, #8]	; (800e074 <_read+0xc>)
 800e06a:	2258      	movs	r2, #88	; 0x58
 800e06c:	601a      	str	r2, [r3, #0]
 800e06e:	f04f 30ff 	mov.w	r0, #4294967295
 800e072:	4770      	bx	lr
 800e074:	2000fbdc 	.word	0x2000fbdc

0800e078 <_sbrk>:
 800e078:	4b04      	ldr	r3, [pc, #16]	; (800e08c <_sbrk+0x14>)
 800e07a:	6819      	ldr	r1, [r3, #0]
 800e07c:	4602      	mov	r2, r0
 800e07e:	b909      	cbnz	r1, 800e084 <_sbrk+0xc>
 800e080:	4903      	ldr	r1, [pc, #12]	; (800e090 <_sbrk+0x18>)
 800e082:	6019      	str	r1, [r3, #0]
 800e084:	6818      	ldr	r0, [r3, #0]
 800e086:	4402      	add	r2, r0
 800e088:	601a      	str	r2, [r3, #0]
 800e08a:	4770      	bx	lr
 800e08c:	2000cf50 	.word	0x2000cf50
 800e090:	2000fbe0 	.word	0x2000fbe0

0800e094 <_init>:
 800e094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e096:	bf00      	nop
 800e098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e09a:	bc08      	pop	{r3}
 800e09c:	469e      	mov	lr, r3
 800e09e:	4770      	bx	lr

0800e0a0 <_fini>:
 800e0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a2:	bf00      	nop
 800e0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0a6:	bc08      	pop	{r3}
 800e0a8:	469e      	mov	lr, r3
 800e0aa:	4770      	bx	lr
