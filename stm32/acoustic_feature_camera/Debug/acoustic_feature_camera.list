
acoustic_feature_camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002e0c8  0800e380  0800e380  0001e380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803c448  0803c448  0004c448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0803c450  0803c450  0004c450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0803c454  0803c454  0004c454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000888  20000000  0803c458  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000eab8  20000888  0803cce0  00050888  2**2
                  ALLOC
  8 ._user_heap_stack 00002400  2000f340  0803cce0  0005f340  2**0
                  ALLOC
  9 .ARM.attributes 00000034  00000000  00000000  00050888  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fd7f  00000000  00000000  000508bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006b20  00000000  00000000  0008063b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00015735  00000000  00000000  0008715b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001828  00000000  00000000  0009c890  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001c28  00000000  00000000  0009e0b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f9ea  00000000  00000000  0009fce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009990  00000000  00000000  000af6ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      00002f02  00000000  00000000  000b905a  2**0
                  CONTENTS, READONLY
 18 .iar.rtmodel  00000218  00000000  00000000  000bbf5c  2**0
                  CONTENTS, READONLY
 19 .iar_vfe_header 0000001c  00000000  00000000  000bc174  2**2
                  CONTENTS, READONLY
 20 .debug_frame  00007940  00000000  00000000  000bc190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000888 	.word	0x20000888
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e364 	.word	0x0800e364

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000088c 	.word	0x2000088c
 80001cc:	0800e364 	.word	0x0800e364

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <ai_array_get_byte_size>:
 8000290:	b909      	cbnz	r1, 8000296 <ai_array_get_byte_size+0x6>
 8000292:	2000      	movs	r0, #0
 8000294:	4770      	bx	lr
 8000296:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800029a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800029e:	18d3      	adds	r3, r2, r3
 80002a0:	4359      	muls	r1, r3
 80002a2:	1dc9      	adds	r1, r1, #7
 80002a4:	08c9      	lsrs	r1, r1, #3
 80002a6:	0d42      	lsrs	r2, r0, #21
 80002a8:	00c9      	lsls	r1, r1, #3
 80002aa:	f002 0203 	and.w	r2, r2, #3
 80002ae:	0c43      	lsrs	r3, r0, #17
 80002b0:	40d1      	lsrs	r1, r2
 80002b2:	f003 030f 	and.w	r3, r3, #15
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	d00b      	beq.n	80002d2 <ai_array_get_byte_size+0x42>
 80002ba:	2b08      	cmp	r3, #8
 80002bc:	bf01      	itttt	eq
 80002be:	f3c0 12c6 	ubfxeq	r2, r0, #7, #7
 80002c2:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 80002c6:	1882      	addeq	r2, r0, r2
 80002c8:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 80002cc:	1dc9      	adds	r1, r1, #7
 80002ce:	08c8      	lsrs	r0, r1, #3
 80002d0:	4770      	bx	lr
 80002d2:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80002d6:	f3c0 3082 	ubfx	r0, r0, #14, #3
 80002da:	1882      	adds	r2, r0, r2
 80002dc:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80002e0:	1dc9      	adds	r1, r1, #7
 80002e2:	08c8      	lsrs	r0, r1, #3
 80002e4:	4770      	bx	lr

080002e6 <ai_mem_copy_buffer>:
 80002e6:	b510      	push	{r4, lr}
 80002e8:	4604      	mov	r4, r0
 80002ea:	f008 ff69 	bl	80091c0 <__aeabi_memcpy>
 80002ee:	4620      	mov	r0, r4
 80002f0:	bd10      	pop	{r4, pc}

080002f2 <ai_platform_runtime_get_revision>:
 80002f2:	f8df 0414 	ldr.w	r0, [pc, #1044]	; 8000708 <.text_19>
 80002f6:	6801      	ldr	r1, [r0, #0]
 80002f8:	0849      	lsrs	r1, r1, #1
 80002fa:	0049      	lsls	r1, r1, #1
 80002fc:	6001      	str	r1, [r0, #0]
 80002fe:	2001      	movs	r0, #1
 8000300:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 800070c <.text_20>
 8000304:	6088      	str	r0, [r1, #8]
 8000306:	6888      	ldr	r0, [r1, #8]
 8000308:	2800      	cmp	r0, #0
 800030a:	d1fc      	bne.n	8000306 <ai_platform_runtime_get_revision+0x14>
 800030c:	f8df 2400 	ldr.w	r2, [pc, #1024]	; 8000710 <.text_21>
 8000310:	600a      	str	r2, [r1, #0]
 8000312:	6808      	ldr	r0, [r1, #0]
 8000314:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000714 <.text_22>
 8000318:	4288      	cmp	r0, r1
 800031a:	d000      	beq.n	800031e <ai_platform_runtime_get_revision+0x2c>
 800031c:	e7fe      	b.n	800031c <ai_platform_runtime_get_revision+0x2a>
 800031e:	a0a1      	add	r0, pc, #644	; (adr r0, 80005a4 <.text_17>)
 8000320:	4770      	bx	lr

08000322 <ai_platform_runtime_get_version>:
 8000322:	f8df 03e4 	ldr.w	r0, [pc, #996]	; 8000708 <.text_19>
 8000326:	6801      	ldr	r1, [r0, #0]
 8000328:	0849      	lsrs	r1, r1, #1
 800032a:	0049      	lsls	r1, r1, #1
 800032c:	6001      	str	r1, [r0, #0]
 800032e:	2001      	movs	r0, #1
 8000330:	f8df 13d8 	ldr.w	r1, [pc, #984]	; 800070c <.text_20>
 8000334:	6088      	str	r0, [r1, #8]
 8000336:	6888      	ldr	r0, [r1, #8]
 8000338:	2800      	cmp	r0, #0
 800033a:	d1fc      	bne.n	8000336 <ai_platform_runtime_get_version+0x14>
 800033c:	f8df 23d0 	ldr.w	r2, [pc, #976]	; 8000710 <.text_21>
 8000340:	600a      	str	r2, [r1, #0]
 8000342:	6808      	ldr	r0, [r1, #0]
 8000344:	f8df 13cc 	ldr.w	r1, [pc, #972]	; 8000714 <.text_22>
 8000348:	4288      	cmp	r0, r1
 800034a:	d000      	beq.n	800034e <ai_platform_runtime_get_version+0x2c>
 800034c:	e7fe      	b.n	800034c <ai_platform_runtime_get_version+0x2a>
 800034e:	f20f 32dc 	addw	r2, pc, #988	; 0x3dc
 8000352:	6810      	ldr	r0, [r2, #0]
 8000354:	4770      	bx	lr

08000356 <ai_platform_api_get_version>:
 8000356:	f8df 03b0 	ldr.w	r0, [pc, #944]	; 8000708 <.text_19>
 800035a:	6801      	ldr	r1, [r0, #0]
 800035c:	0849      	lsrs	r1, r1, #1
 800035e:	0049      	lsls	r1, r1, #1
 8000360:	6001      	str	r1, [r0, #0]
 8000362:	2001      	movs	r0, #1
 8000364:	f8df 13a4 	ldr.w	r1, [pc, #932]	; 800070c <.text_20>
 8000368:	6088      	str	r0, [r1, #8]
 800036a:	6888      	ldr	r0, [r1, #8]
 800036c:	2800      	cmp	r0, #0
 800036e:	d1fc      	bne.n	800036a <ai_platform_api_get_version+0x14>
 8000370:	f8df 239c 	ldr.w	r2, [pc, #924]	; 8000710 <.text_21>
 8000374:	600a      	str	r2, [r1, #0]
 8000376:	6808      	ldr	r0, [r1, #0]
 8000378:	f8df 1398 	ldr.w	r1, [pc, #920]	; 8000714 <.text_22>
 800037c:	4288      	cmp	r0, r1
 800037e:	d000      	beq.n	8000382 <ai_platform_api_get_version+0x2c>
 8000380:	e7fe      	b.n	8000380 <ai_platform_api_get_version+0x2a>
 8000382:	f20f 32ac 	addw	r2, pc, #940	; 0x3ac
 8000386:	6810      	ldr	r0, [r2, #0]
 8000388:	4770      	bx	lr

0800038a <ai_platform_interface_api_get_version>:
 800038a:	f8df 037c 	ldr.w	r0, [pc, #892]	; 8000708 <.text_19>
 800038e:	6801      	ldr	r1, [r0, #0]
 8000390:	0849      	lsrs	r1, r1, #1
 8000392:	0049      	lsls	r1, r1, #1
 8000394:	6001      	str	r1, [r0, #0]
 8000396:	2001      	movs	r0, #1
 8000398:	f8df 1370 	ldr.w	r1, [pc, #880]	; 800070c <.text_20>
 800039c:	6088      	str	r0, [r1, #8]
 800039e:	6888      	ldr	r0, [r1, #8]
 80003a0:	2800      	cmp	r0, #0
 80003a2:	d1fc      	bne.n	800039e <ai_platform_interface_api_get_version+0x14>
 80003a4:	f8df 2368 	ldr.w	r2, [pc, #872]	; 8000710 <.text_21>
 80003a8:	600a      	str	r2, [r1, #0]
 80003aa:	6808      	ldr	r0, [r1, #0]
 80003ac:	f8df 1364 	ldr.w	r1, [pc, #868]	; 8000714 <.text_22>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	d000      	beq.n	80003b6 <ai_platform_interface_api_get_version+0x2c>
 80003b4:	e7fe      	b.n	80003b4 <ai_platform_interface_api_get_version+0x2a>
 80003b6:	f20f 327c 	addw	r2, pc, #892	; 0x37c
 80003ba:	6810      	ldr	r0, [r2, #0]
 80003bc:	4770      	bx	lr

080003be <ai_platform_context_acquire>:
 80003be:	b120      	cbz	r0, 80003ca <ai_platform_context_acquire+0xc>
 80003c0:	6801      	ldr	r1, [r0, #0]
 80003c2:	f8df 2354 	ldr.w	r2, [pc, #852]	; 8000718 <.text_23>
 80003c6:	4291      	cmp	r1, r2
 80003c8:	d000      	beq.n	80003cc <ai_platform_context_acquire+0xe>
 80003ca:	2000      	movs	r0, #0
 80003cc:	f8df 1338 	ldr.w	r1, [pc, #824]	; 8000708 <.text_19>
 80003d0:	680a      	ldr	r2, [r1, #0]
 80003d2:	0852      	lsrs	r2, r2, #1
 80003d4:	0052      	lsls	r2, r2, #1
 80003d6:	600a      	str	r2, [r1, #0]
 80003d8:	2101      	movs	r1, #1
 80003da:	f8df 2330 	ldr.w	r2, [pc, #816]	; 800070c <.text_20>
 80003de:	6091      	str	r1, [r2, #8]
 80003e0:	6891      	ldr	r1, [r2, #8]
 80003e2:	2900      	cmp	r1, #0
 80003e4:	d1fc      	bne.n	80003e0 <ai_platform_context_acquire+0x22>
 80003e6:	f8df 3328 	ldr.w	r3, [pc, #808]	; 8000710 <.text_21>
 80003ea:	6013      	str	r3, [r2, #0]
 80003ec:	6811      	ldr	r1, [r2, #0]
 80003ee:	f8df 2324 	ldr.w	r2, [pc, #804]	; 8000714 <.text_22>
 80003f2:	4291      	cmp	r1, r2
 80003f4:	d000      	beq.n	80003f8 <ai_platform_context_acquire+0x3a>
 80003f6:	e7fe      	b.n	80003f6 <ai_platform_context_acquire+0x38>
 80003f8:	4770      	bx	lr

080003fa <ai_platform_context_release>:
 80003fa:	f8df 131c 	ldr.w	r1, [pc, #796]	; 8000718 <.text_23>
 80003fe:	6001      	str	r1, [r0, #0]
 8000400:	4770      	bx	lr

08000402 <ai_copy_buffer_fake_src>:
 8000402:	4608      	mov	r0, r1
 8000404:	4770      	bx	lr

08000406 <ai_copy_buffer_fake_dst>:
 8000406:	4770      	bx	lr

08000408 <ai_platform_network_get_error>:
 8000408:	b120      	cbz	r0, 8000414 <ai_platform_network_get_error+0xc>
 800040a:	6801      	ldr	r1, [r0, #0]
 800040c:	f8df 2308 	ldr.w	r2, [pc, #776]	; 8000718 <.text_23>
 8000410:	4291      	cmp	r1, r2
 8000412:	d000      	beq.n	8000416 <ai_platform_network_get_error+0xe>
 8000414:	2000      	movs	r0, #0
 8000416:	49bc      	ldr	r1, [pc, #752]	; (8000708 <.text_19>)
 8000418:	680a      	ldr	r2, [r1, #0]
 800041a:	0852      	lsrs	r2, r2, #1
 800041c:	0052      	lsls	r2, r2, #1
 800041e:	600a      	str	r2, [r1, #0]
 8000420:	2101      	movs	r1, #1
 8000422:	4aba      	ldr	r2, [pc, #744]	; (800070c <.text_20>)
 8000424:	6091      	str	r1, [r2, #8]
 8000426:	6891      	ldr	r1, [r2, #8]
 8000428:	2900      	cmp	r1, #0
 800042a:	d1fc      	bne.n	8000426 <ai_platform_network_get_error+0x1e>
 800042c:	4bb8      	ldr	r3, [pc, #736]	; (8000710 <.text_21>)
 800042e:	6013      	str	r3, [r2, #0]
 8000430:	6811      	ldr	r1, [r2, #0]
 8000432:	4ab8      	ldr	r2, [pc, #736]	; (8000714 <.text_22>)
 8000434:	4291      	cmp	r1, r2
 8000436:	d000      	beq.n	800043a <ai_platform_network_get_error+0x32>
 8000438:	e7fe      	b.n	8000438 <ai_platform_network_get_error+0x30>
 800043a:	2800      	cmp	r0, #0
 800043c:	bf1c      	itt	ne
 800043e:	300c      	addne	r0, #12
 8000440:	f000 b98a 	bne.w	8000758 <core_get_error>
 8000444:	f20f 3000 	addw	r0, pc, #768	; 0x300
 8000448:	6800      	ldr	r0, [r0, #0]
 800044a:	4770      	bx	lr

0800044c <ai_platform_network_set_error>:
 800044c:	2800      	cmp	r0, #0
 800044e:	bf1c      	itt	ne
 8000450:	300c      	addne	r0, #12
 8000452:	f000 b986 	bne.w	8000762 <core_set_error>
 8000456:	4770      	bx	lr

08000458 <ai_platform_network_create>:
 8000458:	b570      	push	{r4, r5, r6, lr}
 800045a:	9d04      	ldr	r5, [sp, #16]
 800045c:	4604      	mov	r4, r0
 800045e:	9805      	ldr	r0, [sp, #20]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	042d      	lsls	r5, r5, #16
 8000464:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8000468:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 800046c:	f20f 20dc 	addw	r0, pc, #732	; 0x2dc
 8000470:	6806      	ldr	r6, [r0, #0]
 8000472:	48a5      	ldr	r0, [pc, #660]	; (8000708 <.text_19>)
 8000474:	6801      	ldr	r1, [r0, #0]
 8000476:	0849      	lsrs	r1, r1, #1
 8000478:	0049      	lsls	r1, r1, #1
 800047a:	6001      	str	r1, [r0, #0]
 800047c:	2001      	movs	r0, #1
 800047e:	49a3      	ldr	r1, [pc, #652]	; (800070c <.text_20>)
 8000480:	6088      	str	r0, [r1, #8]
 8000482:	6888      	ldr	r0, [r1, #8]
 8000484:	2800      	cmp	r0, #0
 8000486:	d1fc      	bne.n	8000482 <ai_platform_network_create+0x2a>
 8000488:	4ba1      	ldr	r3, [pc, #644]	; (8000710 <.text_21>)
 800048a:	600b      	str	r3, [r1, #0]
 800048c:	6808      	ldr	r0, [r1, #0]
 800048e:	49a1      	ldr	r1, [pc, #644]	; (8000714 <.text_22>)
 8000490:	4288      	cmp	r0, r1
 8000492:	d000      	beq.n	8000496 <ai_platform_network_create+0x3e>
 8000494:	e7fe      	b.n	8000494 <ai_platform_network_create+0x3c>
 8000496:	b91c      	cbnz	r4, 80004a0 <ai_platform_network_create+0x48>
 8000498:	f20f 20b4 	addw	r0, pc, #692	; 0x2b4
 800049c:	6800      	ldr	r0, [r0, #0]
 800049e:	bd70      	pop	{r4, r5, r6, pc}
 80004a0:	499d      	ldr	r1, [pc, #628]	; (8000718 <.text_23>)
 80004a2:	6011      	str	r1, [r2, #0]
 80004a4:	6022      	str	r2, [r4, #0]
 80004a6:	f000 f955 	bl	8000754 <core_init>
 80004aa:	b910      	cbnz	r0, 80004b2 <ai_platform_network_create+0x5a>
 80004ac:	f20f 2088 	addw	r0, pc, #648	; 0x288
 80004b0:	e00b      	b.n	80004ca <ai_platform_network_create+0x72>
 80004b2:	499a      	ldr	r1, [pc, #616]	; (800071c <.text_24>)
 80004b4:	428d      	cmp	r5, r1
 80004b6:	bf28      	it	cs
 80004b8:	f20f 2080 	addwcs	r0, pc, #640	; 0x280
 80004bc:	d205      	bcs.n	80004ca <ai_platform_network_create+0x72>
 80004be:	f20f 2080 	addw	r0, pc, #640	; 0x280
 80004c2:	f000 f963 	bl	800078c <ai_check_custom_types>
 80004c6:	b918      	cbnz	r0, 80004d0 <ai_platform_network_create+0x78>
 80004c8:	a09e      	add	r0, pc, #632	; (adr r0, 8000744 <.text_34>)
 80004ca:	6806      	ldr	r6, [r0, #0]
 80004cc:	2100      	movs	r1, #0
 80004ce:	6021      	str	r1, [r4, #0]
 80004d0:	4630      	mov	r0, r6
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <ai_platform_network_destroy>:
 80004d4:	b128      	cbz	r0, 80004e2 <ai_platform_network_destroy+0xe>
 80004d6:	6801      	ldr	r1, [r0, #0]
 80004d8:	4a8f      	ldr	r2, [pc, #572]	; (8000718 <.text_23>)
 80004da:	4291      	cmp	r1, r2
 80004dc:	bf08      	it	eq
 80004de:	4602      	moveq	r2, r0
 80004e0:	d000      	beq.n	80004e4 <ai_platform_network_destroy+0x10>
 80004e2:	2200      	movs	r2, #0
 80004e4:	4988      	ldr	r1, [pc, #544]	; (8000708 <.text_19>)
 80004e6:	680b      	ldr	r3, [r1, #0]
 80004e8:	085b      	lsrs	r3, r3, #1
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	600b      	str	r3, [r1, #0]
 80004ee:	2101      	movs	r1, #1
 80004f0:	4b86      	ldr	r3, [pc, #536]	; (800070c <.text_20>)
 80004f2:	6099      	str	r1, [r3, #8]
 80004f4:	6899      	ldr	r1, [r3, #8]
 80004f6:	2900      	cmp	r1, #0
 80004f8:	d1fc      	bne.n	80004f4 <ai_platform_network_destroy+0x20>
 80004fa:	f8df c214 	ldr.w	ip, [pc, #532]	; 8000710 <.text_21>
 80004fe:	f8c3 c000 	str.w	ip, [r3]
 8000502:	6819      	ldr	r1, [r3, #0]
 8000504:	4b83      	ldr	r3, [pc, #524]	; (8000714 <.text_22>)
 8000506:	4299      	cmp	r1, r3
 8000508:	d000      	beq.n	800050c <ai_platform_network_destroy+0x38>
 800050a:	e7fe      	b.n	800050a <ai_platform_network_destroy+0x36>
 800050c:	b102      	cbz	r2, 8000510 <ai_platform_network_destroy+0x3c>
 800050e:	2000      	movs	r0, #0
 8000510:	4770      	bx	lr

08000512 <ai_platform_network_init>:
 8000512:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000516:	b081      	sub	sp, #4
 8000518:	460a      	mov	r2, r1
 800051a:	b118      	cbz	r0, 8000524 <ai_platform_network_init+0x12>
 800051c:	6801      	ldr	r1, [r0, #0]
 800051e:	4b7e      	ldr	r3, [pc, #504]	; (8000718 <.text_23>)
 8000520:	4299      	cmp	r1, r3
 8000522:	d000      	beq.n	8000526 <ai_platform_network_init+0x14>
 8000524:	2000      	movs	r0, #0
 8000526:	4978      	ldr	r1, [pc, #480]	; (8000708 <.text_19>)
 8000528:	680b      	ldr	r3, [r1, #0]
 800052a:	085b      	lsrs	r3, r3, #1
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	600b      	str	r3, [r1, #0]
 8000530:	2101      	movs	r1, #1
 8000532:	4b76      	ldr	r3, [pc, #472]	; (800070c <.text_20>)
 8000534:	6099      	str	r1, [r3, #8]
 8000536:	6899      	ldr	r1, [r3, #8]
 8000538:	2900      	cmp	r1, #0
 800053a:	d1fc      	bne.n	8000536 <ai_platform_network_init+0x24>
 800053c:	4c74      	ldr	r4, [pc, #464]	; (8000710 <.text_21>)
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	6819      	ldr	r1, [r3, #0]
 8000542:	4b74      	ldr	r3, [pc, #464]	; (8000714 <.text_22>)
 8000544:	4299      	cmp	r1, r3
 8000546:	d000      	beq.n	800054a <ai_platform_network_init+0x38>
 8000548:	e7fe      	b.n	8000548 <ai_platform_network_init+0x36>
 800054a:	b340      	cbz	r0, 800059e <ai_platform_network_init+0x8c>
 800054c:	b90a      	cbnz	r2, 8000552 <ai_platform_network_init+0x40>
 800054e:	2211      	movs	r2, #17
 8000550:	e006      	b.n	8000560 <ai_platform_network_init+0x4e>
 8000552:	69d1      	ldr	r1, [r2, #28]
 8000554:	b909      	cbnz	r1, 800055a <ai_platform_network_init+0x48>
 8000556:	2213      	movs	r2, #19
 8000558:	e002      	b.n	8000560 <ai_platform_network_init+0x4e>
 800055a:	68d1      	ldr	r1, [r2, #12]
 800055c:	b941      	cbnz	r1, 8000570 <ai_platform_network_init+0x5e>
 800055e:	2212      	movs	r2, #18
 8000560:	2110      	movs	r1, #16
 8000562:	300c      	adds	r0, #12
 8000564:	f000 f8fd 	bl	8000762 <core_set_error>
 8000568:	2000      	movs	r0, #0
 800056a:	b001      	add	sp, #4
 800056c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000570:	ca78      	ldmia	r2!, {r3, r4, r5, r6}
 8000572:	f100 0114 	add.w	r1, r0, #20
 8000576:	f100 0724 	add.w	r7, r0, #36	; 0x24
 800057a:	e881 0078 	stmia.w	r1, {r3, r4, r5, r6}
 800057e:	e892 5300 	ldmia.w	r2, {r8, r9, ip, lr}
 8000582:	e887 5300 	stmia.w	r7, {r8, r9, ip, lr}
 8000586:	2103      	movs	r1, #3
 8000588:	6081      	str	r1, [r0, #8]
 800058a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800058c:	b13a      	cbz	r2, 800059e <ai_platform_network_init+0x8c>
 800058e:	6891      	ldr	r1, [r2, #8]
 8000590:	6050      	str	r0, [r2, #4]
 8000592:	428a      	cmp	r2, r1
 8000594:	bf18      	it	ne
 8000596:	2900      	cmpne	r1, #0
 8000598:	bf18      	it	ne
 800059a:	460a      	movne	r2, r1
 800059c:	d1f7      	bne.n	800058e <ai_platform_network_init+0x7c>
 800059e:	b001      	add	sp, #4
 80005a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080005a4 <.text_17>:
 80005a4:	00000000 	.word	0x00000000

080005a8 <ai_platform_network_process>:
 80005a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005ac:	b083      	sub	sp, #12
 80005ae:	b128      	cbz	r0, 80005bc <ai_platform_network_process+0x14>
 80005b0:	6803      	ldr	r3, [r0, #0]
 80005b2:	4c59      	ldr	r4, [pc, #356]	; (8000718 <.text_23>)
 80005b4:	42a3      	cmp	r3, r4
 80005b6:	bf08      	it	eq
 80005b8:	4605      	moveq	r5, r0
 80005ba:	d000      	beq.n	80005be <ai_platform_network_process+0x16>
 80005bc:	2500      	movs	r5, #0
 80005be:	4852      	ldr	r0, [pc, #328]	; (8000708 <.text_19>)
 80005c0:	6803      	ldr	r3, [r0, #0]
 80005c2:	085b      	lsrs	r3, r3, #1
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	6003      	str	r3, [r0, #0]
 80005c8:	2001      	movs	r0, #1
 80005ca:	4b50      	ldr	r3, [pc, #320]	; (800070c <.text_20>)
 80005cc:	6098      	str	r0, [r3, #8]
 80005ce:	6898      	ldr	r0, [r3, #8]
 80005d0:	2800      	cmp	r0, #0
 80005d2:	d1fc      	bne.n	80005ce <ai_platform_network_process+0x26>
 80005d4:	4c4e      	ldr	r4, [pc, #312]	; (8000710 <.text_21>)
 80005d6:	601c      	str	r4, [r3, #0]
 80005d8:	6818      	ldr	r0, [r3, #0]
 80005da:	4b4e      	ldr	r3, [pc, #312]	; (8000714 <.text_22>)
 80005dc:	4298      	cmp	r0, r3
 80005de:	d000      	beq.n	80005e2 <ai_platform_network_process+0x3a>
 80005e0:	e7fe      	b.n	80005e0 <ai_platform_network_process+0x38>
 80005e2:	2d00      	cmp	r5, #0
 80005e4:	d048      	beq.n	8000678 <ai_platform_network_process+0xd0>
 80005e6:	68ab      	ldr	r3, [r5, #8]
 80005e8:	f003 0003 	and.w	r0, r3, #3
 80005ec:	2803      	cmp	r0, #3
 80005ee:	d002      	beq.n	80005f6 <ai_platform_network_process+0x4e>
 80005f0:	2230      	movs	r2, #48	; 0x30
 80005f2:	2111      	movs	r1, #17
 80005f4:	e03c      	b.n	8000670 <ai_platform_network_process+0xc8>
 80005f6:	000f      	movs	r7, r1
 80005f8:	bf1c      	itt	ne
 80005fa:	68f8      	ldrne	r0, [r7, #12]
 80005fc:	2800      	cmpne	r0, #0
 80005fe:	d035      	beq.n	800066c <ai_platform_network_process+0xc4>
 8000600:	8878      	ldrh	r0, [r7, #2]
 8000602:	b908      	cbnz	r0, 8000608 <ai_platform_network_process+0x60>
 8000604:	2221      	movs	r2, #33	; 0x21
 8000606:	e032      	b.n	800066e <ai_platform_network_process+0xc6>
 8000608:	0014      	movs	r4, r2
 800060a:	d00b      	beq.n	8000624 <ai_platform_network_process+0x7c>
 800060c:	68e1      	ldr	r1, [r4, #12]
 800060e:	b351      	cbz	r1, 8000666 <ai_platform_network_process+0xbe>
 8000610:	8861      	ldrh	r1, [r4, #2]
 8000612:	b911      	cbnz	r1, 800061a <ai_platform_network_process+0x72>
 8000614:	2221      	movs	r2, #33	; 0x21
 8000616:	2113      	movs	r1, #19
 8000618:	e02a      	b.n	8000670 <ai_platform_network_process+0xc8>
 800061a:	4288      	cmp	r0, r1
 800061c:	d002      	beq.n	8000624 <ai_platform_network_process+0x7c>
 800061e:	2221      	movs	r2, #33	; 0x21
 8000620:	2102      	movs	r1, #2
 8000622:	e025      	b.n	8000670 <ai_platform_network_process+0xc8>
 8000624:	05d8      	lsls	r0, r3, #23
 8000626:	bf4c      	ite	mi
 8000628:	2002      	movmi	r0, #2
 800062a:	2000      	movpl	r0, #0
 800062c:	0a59      	lsrs	r1, r3, #9
 800062e:	f001 0101 	and.w	r1, r1, #1
 8000632:	ea41 0800 	orr.w	r8, r1, r0
 8000636:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000638:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800063a:	6806      	ldr	r6, [r0, #0]
 800063c:	6808      	ldr	r0, [r1, #0]
 800063e:	9000      	str	r0, [sp, #0]
 8000640:	6871      	ldr	r1, [r6, #4]
 8000642:	6830      	ldr	r0, [r6, #0]
 8000644:	f7ff fe24 	bl	8000290 <ai_array_get_byte_size>
 8000648:	9001      	str	r0, [sp, #4]
 800064a:	9800      	ldr	r0, [sp, #0]
 800064c:	6841      	ldr	r1, [r0, #4]
 800064e:	6800      	ldr	r0, [r0, #0]
 8000650:	f7ff fe1e 	bl	8000290 <ai_array_get_byte_size>
 8000654:	68f9      	ldr	r1, [r7, #12]
 8000656:	2c00      	cmp	r4, #0
 8000658:	4602      	mov	r2, r0
 800065a:	bf14      	ite	ne
 800065c:	f8d4 b00c 	ldrne.w	fp, [r4, #12]
 8000660:	f04f 0b00 	moveq.w	fp, #0
 8000664:	e00c      	b.n	8000680 <ai_platform_network_process+0xd8>
 8000666:	2217      	movs	r2, #23
 8000668:	2113      	movs	r1, #19
 800066a:	e001      	b.n	8000670 <ai_platform_network_process+0xc8>
 800066c:	2217      	movs	r2, #23
 800066e:	2112      	movs	r1, #18
 8000670:	f105 000c 	add.w	r0, r5, #12
 8000674:	f000 f875 	bl	8000762 <core_set_error>
 8000678:	2000      	movs	r0, #0
 800067a:	b003      	add	sp, #12
 800067c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000680:	f018 0002 	ands.w	r0, r8, #2
 8000684:	bf14      	ite	ne
 8000686:	f8df 9098 	ldrne.w	r9, [pc, #152]	; 8000720 <.text_25>
 800068a:	f8df 9098 	ldreq.w	r9, [pc, #152]	; 8000724 <.text_26>
 800068e:	ea5f 73c8 	movs.w	r3, r8, lsl #31
 8000692:	bf4c      	ite	mi
 8000694:	f8df a088 	ldrmi.w	sl, [pc, #136]	; 8000720 <.text_25>
 8000698:	f8df a08c 	ldrpl.w	sl, [pc, #140]	; 8000728 <.text_27>
 800069c:	887b      	ldrh	r3, [r7, #2]
 800069e:	822b      	strh	r3, [r5, #16]
 80006a0:	2700      	movs	r7, #0
 80006a2:	826f      	strh	r7, [r5, #18]
 80006a4:	b908      	cbnz	r0, 80006aa <ai_platform_network_process+0x102>
 80006a6:	60b1      	str	r1, [r6, #8]
 80006a8:	60f1      	str	r1, [r6, #12]
 80006aa:	b144      	cbz	r4, 80006be <ai_platform_network_process+0x116>
 80006ac:	ea5f 70c8 	movs.w	r0, r8, lsl #31
 80006b0:	d405      	bmi.n	80006be <ai_platform_network_process+0x116>
 80006b2:	9b00      	ldr	r3, [sp, #0]
 80006b4:	f8c3 b008 	str.w	fp, [r3, #8]
 80006b8:	9800      	ldr	r0, [sp, #0]
 80006ba:	f8c0 b00c 	str.w	fp, [r0, #12]
 80006be:	8a68      	ldrh	r0, [r5, #18]
 80006c0:	8a2b      	ldrh	r3, [r5, #16]
 80006c2:	4298      	cmp	r0, r3
 80006c4:	d21c      	bcs.n	8000700 <ai_platform_network_process+0x158>
 80006c6:	462c      	mov	r4, r5
 80006c8:	4635      	mov	r5, r6
 80006ca:	9e01      	ldr	r6, [sp, #4]
 80006cc:	4617      	mov	r7, r2
 80006ce:	4688      	mov	r8, r1
 80006d0:	68a8      	ldr	r0, [r5, #8]
 80006d2:	4632      	mov	r2, r6
 80006d4:	4641      	mov	r1, r8
 80006d6:	47c8      	blx	r9
 80006d8:	60a8      	str	r0, [r5, #8]
 80006da:	44b0      	add	r8, r6
 80006dc:	4620      	mov	r0, r4
 80006de:	f000 f8d7 	bl	8000890 <ai_layers_forward_all>
 80006e2:	9800      	ldr	r0, [sp, #0]
 80006e4:	6881      	ldr	r1, [r0, #8]
 80006e6:	463a      	mov	r2, r7
 80006e8:	4658      	mov	r0, fp
 80006ea:	47d0      	blx	sl
 80006ec:	eb00 0b07 	add.w	fp, r0, r7
 80006f0:	8a60      	ldrh	r0, [r4, #18]
 80006f2:	8a21      	ldrh	r1, [r4, #16]
 80006f4:	1c40      	adds	r0, r0, #1
 80006f6:	8260      	strh	r0, [r4, #18]
 80006f8:	b280      	uxth	r0, r0
 80006fa:	4288      	cmp	r0, r1
 80006fc:	d3e8      	bcc.n	80006d0 <ai_platform_network_process+0x128>
 80006fe:	4625      	mov	r5, r4
 8000700:	8a68      	ldrh	r0, [r5, #18]
 8000702:	b003      	add	sp, #12
 8000704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000708 <.text_19>:
 8000708:	e0002000 	.word	0xe0002000

0800070c <.text_20>:
 800070c:	40023000 	.word	0x40023000

08000710 <.text_21>:
 8000710:	f407a5c2 	.word	0xf407a5c2

08000714 <.text_22>:
 8000714:	b5e8b5cd 	.word	0xb5e8b5cd

08000718 <.text_23>:
 8000718:	a1c00100 	.word	0xa1c00100

0800071c <.text_24>:
 800071c:	01010001 	.word	0x01010001

08000720 <.text_25>:
 8000720:	080002e7 	.word	0x080002e7

08000724 <.text_26>:
 8000724:	08000403 	.word	0x08000403

08000728 <.text_27>:
 8000728:	08000407 	.word	0x08000407

0800072c <.text_28>:
 800072c:	00000303 	.word	0x00000303

08000730 <.text_29>:
 8000730:	00000001 	.word	0x00000001

08000734 <.text_30>:
 8000734:	00000101 	.word	0x00000101

08000738 <.text_31>:
 8000738:	00001030 	.word	0x00001030

0800073c <.text_32>:
 800073c:	00001001 	.word	0x00001001

08000740 <_platform_network_sanity_check{8}::signatures>:
 8000740:	84048403                                ....

08000744 <.text_34>:
 8000744:	00001002 	.word	0x00001002

08000748 <.text_35>:
 8000748:	00001010 	.word	0x00001010

0800074c <.text_36>:
 800074c:	00000000 	.word	0x00000000

08000750 <.text_37>:
 8000750:	00001010 	.word	0x00001010

08000754 <core_init>:
 8000754:	2001      	movs	r0, #1
 8000756:	4770      	bx	lr

08000758 <core_get_error>:
 8000758:	4601      	mov	r1, r0
 800075a:	2200      	movs	r2, #0
 800075c:	6808      	ldr	r0, [r1, #0]
 800075e:	600a      	str	r2, [r1, #0]
 8000760:	4770      	bx	lr

08000762 <core_set_error>:
 8000762:	7803      	ldrb	r3, [r0, #0]
 8000764:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000768:	d104      	bne.n	8000774 <core_set_error+0x12>
 800076a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800076e:	6001      	str	r1, [r0, #0]
 8000770:	2001      	movs	r0, #1
 8000772:	4770      	bx	lr
 8000774:	2000      	movs	r0, #0
 8000776:	4770      	bx	lr

08000778 <ai_layers_forward_layer>:
 8000778:	b510      	push	{r4, lr}
 800077a:	4604      	mov	r4, r0
 800077c:	68e1      	ldr	r1, [r4, #12]
 800077e:	4788      	blx	r1
 8000780:	68a0      	ldr	r0, [r4, #8]
 8000782:	42a0      	cmp	r0, r4
 8000784:	bf08      	it	eq
 8000786:	2000      	moveq	r0, #0
 8000788:	bd10      	pop	{r4, pc}
	...

0800078c <ai_check_custom_types>:
 800078c:	b500      	push	{lr}
 800078e:	b081      	sub	sp, #4
 8000790:	b160      	cbz	r0, 80007ac <ai_check_custom_types+0x20>
 8000792:	7801      	ldrb	r1, [r0, #0]
 8000794:	2903      	cmp	r1, #3
 8000796:	d109      	bne.n	80007ac <ai_check_custom_types+0x20>
 8000798:	f05f 0204 	movs.w	r2, #4
 800079c:	a163      	add	r1, pc, #396	; (adr r1, 800092c <ai_check_custom_types::ref_signatures>)
 800079e:	f008 fd43 	bl	8009228 <memcmp>
 80007a2:	1e40      	subs	r0, r0, #1
 80007a4:	4180      	sbcs	r0, r0
 80007a6:	0fc0      	lsrs	r0, r0, #31
 80007a8:	b001      	add	sp, #4
 80007aa:	bd00      	pop	{pc}
 80007ac:	2000      	movs	r0, #0
 80007ae:	b001      	add	sp, #4
 80007b0:	bd00      	pop	{pc}
	...

080007b4 <ai_layer_type_name>:
 80007b4:	f242 7211 	movw	r2, #10001	; 0x2711
 80007b8:	1a81      	subs	r1, r0, r2
 80007ba:	2901      	cmp	r1, #1
 80007bc:	bf84      	itt	hi
 80007be:	1ec9      	subhi	r1, r1, #3
 80007c0:	290d      	cmphi	r1, #13
 80007c2:	d901      	bls.n	80007c8 <ai_layer_type_name+0x14>
 80007c4:	390f      	subs	r1, #15
 80007c6:	d145      	bne.n	8000854 <ai_layer_type_name+0xa0>
 80007c8:	1a80      	subs	r0, r0, r2
 80007ca:	d021      	beq.n	8000810 <ai_layer_type_name+0x5c>
 80007cc:	1e40      	subs	r0, r0, #1
 80007ce:	d021      	beq.n	8000814 <ai_layer_type_name+0x60>
 80007d0:	1e80      	subs	r0, r0, #2
 80007d2:	d021      	beq.n	8000818 <ai_layer_type_name+0x64>
 80007d4:	1e40      	subs	r0, r0, #1
 80007d6:	d021      	beq.n	800081c <ai_layer_type_name+0x68>
 80007d8:	1e40      	subs	r0, r0, #1
 80007da:	d021      	beq.n	8000820 <ai_layer_type_name+0x6c>
 80007dc:	1e40      	subs	r0, r0, #1
 80007de:	d021      	beq.n	8000824 <ai_layer_type_name+0x70>
 80007e0:	1e40      	subs	r0, r0, #1
 80007e2:	d021      	beq.n	8000828 <ai_layer_type_name+0x74>
 80007e4:	1e40      	subs	r0, r0, #1
 80007e6:	d021      	beq.n	800082c <ai_layer_type_name+0x78>
 80007e8:	1e40      	subs	r0, r0, #1
 80007ea:	d021      	beq.n	8000830 <ai_layer_type_name+0x7c>
 80007ec:	1e40      	subs	r0, r0, #1
 80007ee:	d021      	beq.n	8000834 <ai_layer_type_name+0x80>
 80007f0:	1e40      	subs	r0, r0, #1
 80007f2:	d021      	beq.n	8000838 <ai_layer_type_name+0x84>
 80007f4:	1e40      	subs	r0, r0, #1
 80007f6:	d021      	beq.n	800083c <ai_layer_type_name+0x88>
 80007f8:	1e40      	subs	r0, r0, #1
 80007fa:	d021      	beq.n	8000840 <ai_layer_type_name+0x8c>
 80007fc:	1e40      	subs	r0, r0, #1
 80007fe:	d021      	beq.n	8000844 <ai_layer_type_name+0x90>
 8000800:	1e40      	subs	r0, r0, #1
 8000802:	d021      	beq.n	8000848 <ai_layer_type_name+0x94>
 8000804:	1e40      	subs	r0, r0, #1
 8000806:	d021      	beq.n	800084c <ai_layer_type_name+0x98>
 8000808:	1e80      	subs	r0, r0, #2
 800080a:	d021      	beq.n	8000850 <ai_layer_type_name+0x9c>
 800080c:	a012      	add	r0, pc, #72	; (adr r0, 8000858 <.text_5>)
 800080e:	4770      	bx	lr
 8000810:	a012      	add	r0, pc, #72	; (adr r0, 800085c <.text_6>)
 8000812:	4770      	bx	lr
 8000814:	a012      	add	r0, pc, #72	; (adr r0, 8000860 <.text_7>)
 8000816:	4770      	bx	lr
 8000818:	a027      	add	r0, pc, #156	; (adr r0, 80008b8 <.text_14>)
 800081a:	4770      	bx	lr
 800081c:	a028      	add	r0, pc, #160	; (adr r0, 80008c0 <.text_15>)
 800081e:	4770      	bx	lr
 8000820:	a010      	add	r0, pc, #64	; (adr r0, 8000864 <.text_8>)
 8000822:	4770      	bx	lr
 8000824:	a010      	add	r0, pc, #64	; (adr r0, 8000868 <.text_9>)
 8000826:	4770      	bx	lr
 8000828:	a027      	add	r0, pc, #156	; (adr r0, 80008c8 <.text_16>)
 800082a:	4770      	bx	lr
 800082c:	a00f      	add	r0, pc, #60	; (adr r0, 800086c <.text_10>)
 800082e:	4770      	bx	lr
 8000830:	a027      	add	r0, pc, #156	; (adr r0, 80008d0 <.text_17>)
 8000832:	4770      	bx	lr
 8000834:	a028      	add	r0, pc, #160	; (adr r0, 80008d8 <.text_18>)
 8000836:	4770      	bx	lr
 8000838:	a02c      	add	r0, pc, #176	; (adr r0, 80008ec <.text_19>)
 800083a:	4770      	bx	lr
 800083c:	a02d      	add	r0, pc, #180	; (adr r0, 80008f4 <.text_20>)
 800083e:	4770      	bx	lr
 8000840:	a00b      	add	r0, pc, #44	; (adr r0, 8000870 <.text_11>)
 8000842:	4770      	bx	lr
 8000844:	a02d      	add	r0, pc, #180	; (adr r0, 80008fc <.text_21>)
 8000846:	4770      	bx	lr
 8000848:	a02e      	add	r0, pc, #184	; (adr r0, 8000904 <.text_22>)
 800084a:	4770      	bx	lr
 800084c:	a030      	add	r0, pc, #192	; (adr r0, 8000910 <.text_23>)
 800084e:	4770      	bx	lr
 8000850:	a034      	add	r0, pc, #208	; (adr r0, 8000924 <.text_24>)
 8000852:	4770      	bx	lr
 8000854:	a000      	add	r0, pc, #0	; (adr r0, 8000858 <.text_5>)
 8000856:	4770      	bx	lr

08000858 <.text_5>:
 8000858:	00000000 	.word	0x00000000

0800085c <.text_6>:
 800085c:	00444441 	.word	0x00444441

08000860 <.text_7>:
 8000860:	00004e42 	.word	0x00004e42

08000864 <.text_8>:
 8000864:	00555247 	.word	0x00555247

08000868 <.text_9>:
 8000868:	004e524c 	.word	0x004e524c

0800086c <.text_10>:
 800086c:	00004c4e 	.word	0x00004c4e

08000870 <.text_11>:
 8000870:	00004d53 	.word	0x00004d53

08000874 <ai_layer_type_is_valid>:
 8000874:	f242 7111 	movw	r1, #10001	; 0x2711
 8000878:	1a40      	subs	r0, r0, r1
 800087a:	2801      	cmp	r0, #1
 800087c:	bf84      	itt	hi
 800087e:	1ec0      	subhi	r0, r0, #3
 8000880:	280d      	cmphi	r0, #13
 8000882:	d901      	bls.n	8000888 <ai_layer_type_is_valid+0x14>
 8000884:	380f      	subs	r0, #15
 8000886:	d101      	bne.n	800088c <ai_layer_type_is_valid+0x18>
 8000888:	2001      	movs	r0, #1
 800088a:	4770      	bx	lr
 800088c:	2000      	movs	r0, #0
 800088e:	4770      	bx	lr

08000890 <ai_layers_forward_all>:
 8000890:	b530      	push	{r4, r5, lr}
 8000892:	4604      	mov	r4, r0
 8000894:	b081      	sub	sp, #4
 8000896:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000898:	b158      	cbz	r0, 80008b2 <ai_layers_forward_all+0x22>
 800089a:	6420      	str	r0, [r4, #64]	; 0x40
 800089c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800089e:	68e9      	ldr	r1, [r5, #12]
 80008a0:	4628      	mov	r0, r5
 80008a2:	4788      	blx	r1
 80008a4:	68a8      	ldr	r0, [r5, #8]
 80008a6:	42a8      	cmp	r0, r5
 80008a8:	bf08      	it	eq
 80008aa:	2000      	moveq	r0, #0
 80008ac:	2800      	cmp	r0, #0
 80008ae:	6420      	str	r0, [r4, #64]	; 0x40
 80008b0:	d1f4      	bne.n	800089c <ai_layers_forward_all+0xc>
 80008b2:	b001      	add	sp, #4
 80008b4:	bd30      	pop	{r4, r5, pc}
	...

080008b8 <.text_14>:
 80008b8:	564e4f43 	.word	0x564e4f43
 80008bc:	00004432 	.word	0x00004432

080008c0 <.text_15>:
 80008c0:	534e4544 	.word	0x534e4544
 80008c4:	00000045 	.word	0x00000045

080008c8 <.text_16>:
 80008c8:	4d54534c 	.word	0x4d54534c
 80008cc:	00000000 	.word	0x00000000

080008d0 <.text_17>:
 80008d0:	4d524f4e 	.word	0x4d524f4e
 80008d4:	00000000 	.word	0x00000000

080008d8 <.text_18>:
 80008d8:	4954504f 	.word	0x4954504f
 80008dc:	455a494d 	.word	0x455a494d
 80008e0:	4f435f44 	.word	0x4f435f44
 80008e4:	4432564e 	.word	0x4432564e
 80008e8:	00000000 	.word	0x00000000

080008ec <.text_19>:
 80008ec:	4d524550 	.word	0x4d524550
 80008f0:	00455455 	.word	0x00455455

080008f4 <.text_20>:
 80008f4:	4c4f4f50 	.word	0x4c4f4f50
 80008f8:	00000000 	.word	0x00000000

080008fc <.text_21>:
 80008fc:	494c5053 	.word	0x494c5053
 8000900:	00000054 	.word	0x00000054

08000904 <.text_22>:
 8000904:	454d4954 	.word	0x454d4954
 8000908:	4c45445f 	.word	0x4c45445f
 800090c:	00005941 	.word	0x00005941

08000910 <.text_23>:
 8000910:	454d4954 	.word	0x454d4954
 8000914:	5349445f 	.word	0x5349445f
 8000918:	42495254 	.word	0x42495254
 800091c:	44455455 	.word	0x44455455
 8000920:	00000000 	.word	0x00000000

08000924 <.text_24>:
 8000924:	434e4f43 	.word	0x434e4f43
 8000928:	00005441 	.word	0x00005441

0800092c <ai_check_custom_types::ref_signatures>:
 800092c:	84048403                                ....

08000930 <ai_conv2d_kernel_simple_f32>:
 8000930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000934:	b081      	sub	sp, #4
 8000936:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8000938:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800093a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800093e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8000940:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000942:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8000946:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 800094a:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 800094e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8000952:	1b2f      	subs	r7, r5, r4
 8000954:	fb09 fa07 	mul.w	sl, r9, r7
 8000958:	1b37      	subs	r7, r6, r4
 800095a:	fb07 f709 	mul.w	r7, r7, r9
 800095e:	9700      	str	r7, [sp, #0]
 8000960:	4288      	cmp	r0, r1
 8000962:	bf0c      	ite	eq
 8000964:	ed9f 0a86 	vldreq	s0, [pc, #536]	; 8000b80 <.text_4>
 8000968:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 800096c:	fb05 f50c 	mul.w	r5, r5, ip
 8000970:	fb06 f709 	mul.w	r7, r6, r9
 8000974:	fb06 860c 	mla	r6, r6, ip, r8
 8000978:	fb06 f609 	mul.w	r6, r6, r9
 800097c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8000980:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8000982:	ebab 0b0e 	sub.w	fp, fp, lr
 8000986:	fb04 f409 	mul.w	r4, r4, r9
 800098a:	fb09 f505 	mul.w	r5, r9, r5
 800098e:	2e00      	cmp	r6, #0
 8000990:	fb0b fb07 	mul.w	fp, fp, r7
 8000994:	eb02 0985 	add.w	r9, r2, r5, lsl #2
 8000998:	d04e      	beq.n	8000a38 <ai_conv2d_kernel_simple_f32+0x108>
 800099a:	460d      	mov	r5, r1
 800099c:	4619      	mov	r1, r3
 800099e:	4632      	mov	r2, r6
 80009a0:	ea4f 0300 	mov.w	r3, r0
 80009a4:	edd3 0a00 	vldr	s1, [r3]
 80009a8:	f1be 0f01 	cmp.w	lr, #1
 80009ac:	ee60 0a80 	vmul.f32	s1, s1, s0
 80009b0:	464e      	mov	r6, r9
 80009b2:	db39      	blt.n	8000a28 <ai_conv2d_kernel_simple_f32+0xf8>
 80009b4:	f8dd c000 	ldr.w	ip, [sp]
 80009b8:	4670      	mov	r0, lr
 80009ba:	2c01      	cmp	r4, #1
 80009bc:	db2c      	blt.n	8000a18 <ai_conv2d_kernel_simple_f32+0xe8>
 80009be:	f014 0803 	ands.w	r8, r4, #3
 80009c2:	d00a      	beq.n	80009da <ai_conv2d_kernel_simple_f32+0xaa>
 80009c4:	ed91 1a00 	vldr	s2, [r1]
 80009c8:	edd6 1a00 	vldr	s3, [r6]
 80009cc:	1d36      	adds	r6, r6, #4
 80009ce:	1d09      	adds	r1, r1, #4
 80009d0:	f1b8 0801 	subs.w	r8, r8, #1
 80009d4:	ee41 0a21 	vmla.f32	s1, s2, s3
 80009d8:	d1f4      	bne.n	80009c4 <ai_conv2d_kernel_simple_f32+0x94>
 80009da:	08a7      	lsrs	r7, r4, #2
 80009dc:	f000 801c 	beq.w	8000a18 <ai_conv2d_kernel_simple_f32+0xe8>
 80009e0:	ed91 2a00 	vldr	s4, [r1]
 80009e4:	ed96 1a00 	vldr	s2, [r6]
 80009e8:	edd1 1a01 	vldr	s3, [r1, #4]
 80009ec:	edd6 2a01 	vldr	s5, [r6, #4]
 80009f0:	ee42 0a01 	vmla.f32	s1, s4, s2
 80009f4:	ee41 0aa2 	vmla.f32	s1, s3, s5
 80009f8:	ed91 2a02 	vldr	s4, [r1, #8]
 80009fc:	ed96 1a02 	vldr	s2, [r6, #8]
 8000a00:	edd1 1a03 	vldr	s3, [r1, #12]
 8000a04:	edd6 2a03 	vldr	s5, [r6, #12]
 8000a08:	3610      	adds	r6, #16
 8000a0a:	3110      	adds	r1, #16
 8000a0c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8000a10:	1e7f      	subs	r7, r7, #1
 8000a12:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8000a16:	d1e3      	bne.n	80009e0 <ai_conv2d_kernel_simple_f32+0xb0>
 8000a18:	1e40      	subs	r0, r0, #1
 8000a1a:	eb06 068a 	add.w	r6, r6, sl, lsl #2
 8000a1e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8000a22:	d1ca      	bne.n	80009ba <ai_conv2d_kernel_simple_f32+0x8a>
 8000a24:	f8cd c000 	str.w	ip, [sp]
 8000a28:	edc5 0a00 	vstr	s1, [r5]
 8000a2c:	1d2d      	adds	r5, r5, #4
 8000a2e:	1d1b      	adds	r3, r3, #4
 8000a30:	1e52      	subs	r2, r2, #1
 8000a32:	eb01 018b 	add.w	r1, r1, fp, lsl #2
 8000a36:	d1b5      	bne.n	80009a4 <ai_conv2d_kernel_simple_f32+0x74>
 8000a38:	b001      	add	sp, #4
 8000a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000a40 <ai_conv2d_kernel_depthwise_f32>:
 8000a40:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a44:	b084      	sub	sp, #16
 8000a46:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8000a48:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8000a4c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8000a4e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8000a50:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000a52:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 8000a56:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8000a5a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8000a5c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8000a60:	fb09 bb07 	mla	fp, r9, r7, fp
 8000a64:	4611      	mov	r1, r2
 8000a66:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 8000a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000a6c:	9b04      	ldr	r3, [sp, #16]
 8000a6e:	eba5 0e0c 	sub.w	lr, r5, ip
 8000a72:	1b00      	subs	r0, r0, r4
 8000a74:	429a      	cmp	r2, r3
 8000a76:	bf0c      	ite	eq
 8000a78:	ed9f 0a41 	vldreq	s0, [pc, #260]	; 8000b80 <.text_4>
 8000a7c:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000a80:	437d      	muls	r5, r7
 8000a82:	fb0a f505 	mul.w	r5, sl, r5
 8000a86:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8000a8a:	2500      	movs	r5, #0
 8000a8c:	eb01 078a 	add.w	r7, r1, sl, lsl #2
 8000a90:	42b9      	cmp	r1, r7
 8000a92:	fbb6 f6fa 	udiv	r6, r6, sl
 8000a96:	fb0a fe0e 	mul.w	lr, sl, lr
 8000a9a:	eba9 080c 	sub.w	r8, r9, ip
 8000a9e:	fb00 f009 	mul.w	r0, r0, r9
 8000aa2:	9700      	str	r7, [sp, #0]
 8000aa4:	d268      	bcs.n	8000b78 <ai_conv2d_kernel_depthwise_f32+0x138>
 8000aa6:	920e      	str	r2, [sp, #56]	; 0x38
 8000aa8:	9603      	str	r6, [sp, #12]
 8000aaa:	9a03      	ldr	r2, [sp, #12]
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	d05f      	beq.n	8000b70 <ai_conv2d_kernel_depthwise_f32+0x130>
 8000ab0:	9b04      	ldr	r3, [sp, #16]
 8000ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000ab4:	9002      	str	r0, [sp, #8]
 8000ab6:	eb03 0785 	add.w	r7, r3, r5, lsl #2
 8000aba:	9b03      	ldr	r3, [sp, #12]
 8000abc:	f8cd 1004 	str.w	r1, [sp, #4]
 8000ac0:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000ac4:	edd6 0a00 	vldr	s1, [r6]
 8000ac8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8000acc:	2c01      	cmp	r4, #1
 8000ace:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000ad2:	db41      	blt.n	8000b58 <ai_conv2d_kernel_depthwise_f32+0x118>
 8000ad4:	ea4f 0204 	mov.w	r2, r4
 8000ad8:	f1bc 0f01 	cmp.w	ip, #1
 8000adc:	db36      	blt.n	8000b4c <ai_conv2d_kernel_depthwise_f32+0x10c>
 8000ade:	f01c 0103 	ands.w	r1, ip, #3
 8000ae2:	d00b      	beq.n	8000afc <ai_conv2d_kernel_depthwise_f32+0xbc>
 8000ae4:	ed9b 1a00 	vldr	s2, [fp]
 8000ae8:	edd9 1a00 	vldr	s3, [r9]
 8000aec:	1e49      	subs	r1, r1, #1
 8000aee:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000af2:	f10b 0b04 	add.w	fp, fp, #4
 8000af6:	eb09 098a 	add.w	r9, r9, sl, lsl #2
 8000afa:	d1f3      	bne.n	8000ae4 <ai_conv2d_kernel_depthwise_f32+0xa4>
 8000afc:	ea5f 009c 	movs.w	r0, ip, lsr #2
 8000b00:	f000 8024 	beq.w	8000b4c <ai_conv2d_kernel_depthwise_f32+0x10c>
 8000b04:	ed9b 1a00 	vldr	s2, [fp]
 8000b08:	edd9 1a00 	vldr	s3, [r9]
 8000b0c:	eb09 018a 	add.w	r1, r9, sl, lsl #2
 8000b10:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000b14:	eddb 1a01 	vldr	s3, [fp, #4]
 8000b18:	ed91 1a00 	vldr	s2, [r1]
 8000b1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8000b20:	ee41 0a81 	vmla.f32	s1, s3, s2
 8000b24:	ed9b 1a02 	vldr	s2, [fp, #8]
 8000b28:	edd1 1a00 	vldr	s3, [r1]
 8000b2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8000b30:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000b34:	eddb 1a03 	vldr	s3, [fp, #12]
 8000b38:	ed91 1a00 	vldr	s2, [r1]
 8000b3c:	1e40      	subs	r0, r0, #1
 8000b3e:	ee41 0a81 	vmla.f32	s1, s3, s2
 8000b42:	f10b 0b10 	add.w	fp, fp, #16
 8000b46:	eb01 098a 	add.w	r9, r1, sl, lsl #2
 8000b4a:	d1db      	bne.n	8000b04 <ai_conv2d_kernel_depthwise_f32+0xc4>
 8000b4c:	1e52      	subs	r2, r2, #1
 8000b4e:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8000b52:	eb0b 0b88 	add.w	fp, fp, r8, lsl #2
 8000b56:	d1bf      	bne.n	8000ad8 <ai_conv2d_kernel_depthwise_f32+0x98>
 8000b58:	9802      	ldr	r0, [sp, #8]
 8000b5a:	edc7 0a00 	vstr	s1, [r7]
 8000b5e:	1c6d      	adds	r5, r5, #1
 8000b60:	1d3f      	adds	r7, r7, #4
 8000b62:	1d36      	adds	r6, r6, #4
 8000b64:	1e5b      	subs	r3, r3, #1
 8000b66:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
 8000b6a:	d1ab      	bne.n	8000ac4 <ai_conv2d_kernel_depthwise_f32+0x84>
 8000b6c:	9802      	ldr	r0, [sp, #8]
 8000b6e:	9901      	ldr	r1, [sp, #4]
 8000b70:	9a00      	ldr	r2, [sp, #0]
 8000b72:	1d09      	adds	r1, r1, #4
 8000b74:	4291      	cmp	r1, r2
 8000b76:	d398      	bcc.n	8000aaa <ai_conv2d_kernel_depthwise_f32+0x6a>
 8000b78:	b005      	add	sp, #20
 8000b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000b80 <.text_4>:
 8000b80:	00000000 	.word	0x00000000

08000b84 <ai_conv2d_kernel_group_f32>:
 8000b84:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8000b8e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8000b92:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000b94:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000b96:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8000b98:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8000b9a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8000b9c:	ebae 0e0c 	sub.w	lr, lr, ip
 8000ba0:	4692      	mov	sl, r2
 8000ba2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000ba4:	fbb1 f9f2 	udiv	r9, r1, r2
 8000ba8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000baa:	f8cd 900c 	str.w	r9, [sp, #12]
 8000bae:	1a09      	subs	r1, r1, r0
 8000bb0:	4379      	muls	r1, r7
 8000bb2:	461e      	mov	r6, r3
 8000bb4:	fbb7 f3f2 	udiv	r3, r7, r2
 8000bb8:	fb04 fb03 	mul.w	fp, r4, r3
 8000bbc:	fb0e fe0b 	mul.w	lr, lr, fp
 8000bc0:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 8000bc4:	eba7 0903 	sub.w	r9, r7, r3
 8000bc8:	eba4 0800 	sub.w	r8, r4, r0
 8000bcc:	fb04 b405 	mla	r4, r4, r5, fp
 8000bd0:	435c      	muls	r4, r3
 8000bd2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8000bd6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8000bd8:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000bdc:	455e      	cmp	r6, fp
 8000bde:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8000be0:	bf0c      	ite	eq
 8000be2:	ed9f 0a3f 	vldreq	s0, [pc, #252]	; 8000ce0 <.text_6>
 8000be6:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000bea:	4375      	muls	r5, r6
 8000bec:	436f      	muls	r7, r5
 8000bee:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	fb08 f803 	mul.w	r8, r8, r3
 8000bf8:	f04f 0a00 	mov.w	sl, #0
 8000bfc:	d06c      	beq.n	8000cd8 <ai_conv2d_kernel_group_f32+0x154>
 8000bfe:	9200      	str	r2, [sp, #0]
 8000c00:	9a03      	ldr	r2, [sp, #12]
 8000c02:	2a00      	cmp	r2, #0
 8000c04:	d062      	beq.n	8000ccc <ai_conv2d_kernel_group_f32+0x148>
 8000c06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000c08:	9f04      	ldr	r7, [sp, #16]
 8000c0a:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8000c0e:	eb02 068a 	add.w	r6, r2, sl, lsl #2
 8000c12:	9a03      	ldr	r2, [sp, #12]
 8000c14:	f8cd e008 	str.w	lr, [sp, #8]
 8000c18:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 8000c1c:	f8cd 5004 	str.w	r5, [sp, #4]
 8000c20:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8000c24:	edd6 0a00 	vldr	s1, [r6]
 8000c28:	9d01      	ldr	r5, [sp, #4]
 8000c2a:	f1be 0f01 	cmp.w	lr, #1
 8000c2e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000c32:	db3b      	blt.n	8000cac <ai_conv2d_kernel_group_f32+0x128>
 8000c34:	2801      	cmp	r0, #1
 8000c36:	db32      	blt.n	8000c9e <ai_conv2d_kernel_group_f32+0x11a>
 8000c38:	ea4f 0c00 	mov.w	ip, r0
 8000c3c:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8000c40:	455d      	cmp	r5, fp
 8000c42:	d227      	bcs.n	8000c94 <ai_conv2d_kernel_group_f32+0x110>
 8000c44:	ed94 1a00 	vldr	s2, [r4]
 8000c48:	edd5 1a00 	vldr	s3, [r5]
 8000c4c:	1d2d      	adds	r5, r5, #4
 8000c4e:	1d24      	adds	r4, r4, #4
 8000c50:	455d      	cmp	r5, fp
 8000c52:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000c56:	d21d      	bcs.n	8000c94 <ai_conv2d_kernel_group_f32+0x110>
 8000c58:	ed94 1a00 	vldr	s2, [r4]
 8000c5c:	edd5 1a00 	vldr	s3, [r5]
 8000c60:	1d2d      	adds	r5, r5, #4
 8000c62:	1d24      	adds	r4, r4, #4
 8000c64:	455d      	cmp	r5, fp
 8000c66:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000c6a:	d213      	bcs.n	8000c94 <ai_conv2d_kernel_group_f32+0x110>
 8000c6c:	ed94 1a00 	vldr	s2, [r4]
 8000c70:	edd5 1a00 	vldr	s3, [r5]
 8000c74:	1d2d      	adds	r5, r5, #4
 8000c76:	1d24      	adds	r4, r4, #4
 8000c78:	455d      	cmp	r5, fp
 8000c7a:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000c7e:	d209      	bcs.n	8000c94 <ai_conv2d_kernel_group_f32+0x110>
 8000c80:	ed94 1a00 	vldr	s2, [r4]
 8000c84:	edd5 1a00 	vldr	s3, [r5]
 8000c88:	1d2d      	adds	r5, r5, #4
 8000c8a:	1d24      	adds	r4, r4, #4
 8000c8c:	455d      	cmp	r5, fp
 8000c8e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000c92:	d3d7      	bcc.n	8000c44 <ai_conv2d_kernel_group_f32+0xc0>
 8000c94:	f1bc 0c01 	subs.w	ip, ip, #1
 8000c98:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8000c9c:	d1ce      	bne.n	8000c3c <ai_conv2d_kernel_group_f32+0xb8>
 8000c9e:	f1be 0e01 	subs.w	lr, lr, #1
 8000ca2:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8000ca6:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8000caa:	d1c3      	bne.n	8000c34 <ai_conv2d_kernel_group_f32+0xb0>
 8000cac:	9d02      	ldr	r5, [sp, #8]
 8000cae:	edc7 0a00 	vstr	s1, [r7]
 8000cb2:	1d3f      	adds	r7, r7, #4
 8000cb4:	1d36      	adds	r6, r6, #4
 8000cb6:	1e52      	subs	r2, r2, #1
 8000cb8:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8000cbc:	f10a 0a01 	add.w	sl, sl, #1
 8000cc0:	d1ae      	bne.n	8000c20 <ai_conv2d_kernel_group_f32+0x9c>
 8000cc2:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8000cc6:	f8dd e008 	ldr.w	lr, [sp, #8]
 8000cca:	9d01      	ldr	r5, [sp, #4]
 8000ccc:	9a00      	ldr	r2, [sp, #0]
 8000cce:	1e52      	subs	r2, r2, #1
 8000cd0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8000cd4:	9200      	str	r2, [sp, #0]
 8000cd6:	d193      	bne.n	8000c00 <ai_conv2d_kernel_group_f32+0x7c>
 8000cd8:	b005      	add	sp, #20
 8000cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000ce0 <.text_6>:
 8000ce0:	00000000 	.word	0x00000000

08000ce4 <ai_conv2d_kernel_f32>:
 8000ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ce8:	b08d      	sub	sp, #52	; 0x34
 8000cea:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8000cec:	b904      	cbnz	r4, 8000cf0 <ai_conv2d_kernel_f32+0xc>
 8000cee:	460c      	mov	r4, r1
 8000cf0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8000cf2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8000cf4:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8000cf8:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 8000cfc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8000cfe:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8000d02:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8000d06:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8000d0a:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8000d0e:	900b      	str	r0, [sp, #44]	; 0x2c
 8000d10:	1bbf      	subs	r7, r7, r6
 8000d12:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000d14:	f1b8 0f01 	cmp.w	r8, #1
 8000d18:	ebae 0e05 	sub.w	lr, lr, r5
 8000d1c:	d114      	bne.n	8000d48 <ai_conv2d_kernel_f32+0x64>
 8000d1e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8000d22:	9508      	str	r5, [sp, #32]
 8000d24:	9707      	str	r7, [sp, #28]
 8000d26:	9001      	str	r0, [sp, #4]
 8000d28:	f8cd c008 	str.w	ip, [sp, #8]
 8000d2c:	9606      	str	r6, [sp, #24]
 8000d2e:	f8cd b014 	str.w	fp, [sp, #20]
 8000d32:	f8cd a010 	str.w	sl, [sp, #16]
 8000d36:	f8cd 900c 	str.w	r9, [sp, #12]
 8000d3a:	9400      	str	r4, [sp, #0]
 8000d3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000d3e:	f7ff fdf7 	bl	8000930 <ai_conv2d_kernel_simple_f32>
 8000d42:	b00d      	add	sp, #52	; 0x34
 8000d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d48:	4580      	cmp	r8, r0
 8000d4a:	d114      	bne.n	8000d76 <ai_conv2d_kernel_f32+0x92>
 8000d4c:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8000d50:	9508      	str	r5, [sp, #32]
 8000d52:	9707      	str	r7, [sp, #28]
 8000d54:	9001      	str	r0, [sp, #4]
 8000d56:	f8cd c008 	str.w	ip, [sp, #8]
 8000d5a:	9606      	str	r6, [sp, #24]
 8000d5c:	f8cd b014 	str.w	fp, [sp, #20]
 8000d60:	f8cd a010 	str.w	sl, [sp, #16]
 8000d64:	f8cd 900c 	str.w	r9, [sp, #12]
 8000d68:	9400      	str	r4, [sp, #0]
 8000d6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000d6c:	f7ff fe68 	bl	8000a40 <ai_conv2d_kernel_depthwise_f32>
 8000d70:	b00d      	add	sp, #52	; 0x34
 8000d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d76:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8000d7a:	9509      	str	r5, [sp, #36]	; 0x24
 8000d7c:	9708      	str	r7, [sp, #32]
 8000d7e:	9001      	str	r0, [sp, #4]
 8000d80:	f8cd c008 	str.w	ip, [sp, #8]
 8000d84:	9607      	str	r6, [sp, #28]
 8000d86:	f8cd 8018 	str.w	r8, [sp, #24]
 8000d8a:	f8cd b014 	str.w	fp, [sp, #20]
 8000d8e:	f8cd a010 	str.w	sl, [sp, #16]
 8000d92:	f8cd 900c 	str.w	r9, [sp, #12]
 8000d96:	9400      	str	r4, [sp, #0]
 8000d98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000d9a:	f7ff fef3 	bl	8000b84 <ai_conv2d_kernel_group_f32>
 8000d9e:	b00d      	add	sp, #52	; 0x34
 8000da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000da4 <func_dummy>:
 8000da4:	4770      	bx	lr
	...

08000da8 <ai_dict8_dot_array_f32>:
 8000da8:	b4f0      	push	{r4, r5, r6, r7}
 8000daa:	4604      	mov	r4, r0
 8000dac:	9804      	ldr	r0, [sp, #16]
 8000dae:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8000db2:	3d20      	subs	r5, #32
 8000db4:	2808      	cmp	r0, #8
 8000db6:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800111c <.text_11>
 8000dba:	d22f      	bcs.n	8000e1c <ai_dict8_dot_array_f32+0x74>
 8000dbc:	3520      	adds	r5, #32
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d224      	bcs.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000dc2:	7808      	ldrb	r0, [r1, #0]
 8000dc4:	ed93 1a00 	vldr	s2, [r3]
 8000dc8:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000dcc:	1d18      	adds	r0, r3, #4
 8000dce:	edd6 0a00 	vldr	s1, [r6]
 8000dd2:	42a8      	cmp	r0, r5
 8000dd4:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000dd8:	d218      	bcs.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000dda:	784b      	ldrb	r3, [r1, #1]
 8000ddc:	ed90 1a00 	vldr	s2, [r0]
 8000de0:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000de4:	1d00      	adds	r0, r0, #4
 8000de6:	edd6 0a00 	vldr	s1, [r6]
 8000dea:	42a8      	cmp	r0, r5
 8000dec:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000df0:	d20c      	bcs.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000df2:	788b      	ldrb	r3, [r1, #2]
 8000df4:	ed90 1a00 	vldr	s2, [r0]
 8000df8:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000dfc:	1d03      	adds	r3, r0, #4
 8000dfe:	1cc9      	adds	r1, r1, #3
 8000e00:	edd6 0a00 	vldr	s1, [r6]
 8000e04:	42ab      	cmp	r3, r5
 8000e06:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e0a:	d3da      	bcc.n	8000dc2 <ai_dict8_dot_array_f32+0x1a>
 8000e0c:	edd4 0a00 	vldr	s1, [r4]
 8000e10:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000e14:	ed84 0a00 	vstr	s0, [r4]
 8000e18:	bcf0      	pop	{r4, r5, r6, r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	f001 0003 	and.w	r0, r1, #3
 8000e20:	2803      	cmp	r0, #3
 8000e22:	d8f3      	bhi.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000e24:	e8df f000 	tbb	[pc, r0]
 8000e28:	4c413603 	.word	0x4c413603
 8000e2c:	e7ee      	b.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000e2e:	429d      	cmp	r5, r3
 8000e30:	f080 80d5 	bcs.w	8000fde <ai_dict8_dot_array_f32+0x236>
 8000e34:	3520      	adds	r5, #32
 8000e36:	42ab      	cmp	r3, r5
 8000e38:	d2e8      	bcs.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000e3a:	7808      	ldrb	r0, [r1, #0]
 8000e3c:	ed93 1a00 	vldr	s2, [r3]
 8000e40:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000e44:	1d18      	adds	r0, r3, #4
 8000e46:	edd6 0a00 	vldr	s1, [r6]
 8000e4a:	42a8      	cmp	r0, r5
 8000e4c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e50:	d2dc      	bcs.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000e52:	784b      	ldrb	r3, [r1, #1]
 8000e54:	ed90 1a00 	vldr	s2, [r0]
 8000e58:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000e5c:	1d00      	adds	r0, r0, #4
 8000e5e:	edd6 0a00 	vldr	s1, [r6]
 8000e62:	42a8      	cmp	r0, r5
 8000e64:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e68:	d2d0      	bcs.n	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000e6a:	788b      	ldrb	r3, [r1, #2]
 8000e6c:	ed90 1a00 	vldr	s2, [r0]
 8000e70:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000e74:	1d03      	adds	r3, r0, #4
 8000e76:	1cc9      	adds	r1, r1, #3
 8000e78:	edd6 0a00 	vldr	s1, [r6]
 8000e7c:	42ab      	cmp	r3, r5
 8000e7e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e82:	d3da      	bcc.n	8000e3a <ai_dict8_dot_array_f32+0x92>
 8000e84:	edd4 0a00 	vldr	s1, [r4]
 8000e88:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000e8c:	ed84 0a00 	vstr	s0, [r4]
 8000e90:	bcf0      	pop	{r4, r5, r6, r7}
 8000e92:	4770      	bx	lr
 8000e94:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000e98:	ed93 1a00 	vldr	s2, [r3]
 8000e9c:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000ea0:	1d1b      	adds	r3, r3, #4
 8000ea2:	edd6 0a00 	vldr	s1, [r6]
 8000ea6:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000eaa:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000eae:	ed93 1a00 	vldr	s2, [r3]
 8000eb2:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000eb6:	1d1b      	adds	r3, r3, #4
 8000eb8:	edd6 0a00 	vldr	s1, [r6]
 8000ebc:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000ec0:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000ec4:	ed93 1a00 	vldr	s2, [r3]
 8000ec8:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000ecc:	1d1b      	adds	r3, r3, #4
 8000ece:	edd6 0a00 	vldr	s1, [r6]
 8000ed2:	429d      	cmp	r5, r3
 8000ed4:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000ed8:	d34e      	bcc.n	8000f78 <ai_dict8_dot_array_f32+0x1d0>
 8000eda:	78cf      	ldrb	r7, [r1, #3]
 8000edc:	ed93 4a00 	vldr	s8, [r3]
 8000ee0:	ed93 3a01 	vldr	s6, [r3, #4]
 8000ee4:	ed93 2a02 	vldr	s4, [r3, #8]
 8000ee8:	ed93 1a03 	vldr	s2, [r3, #12]
 8000eec:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000ef0:	788f      	ldrb	r7, [r1, #2]
 8000ef2:	edd6 0a00 	vldr	s1, [r6]
 8000ef6:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000efa:	784f      	ldrb	r7, [r1, #1]
 8000efc:	edd6 1a00 	vldr	s3, [r6]
 8000f00:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f04:	780f      	ldrb	r7, [r1, #0]
 8000f06:	edd6 2a00 	vldr	s5, [r6]
 8000f0a:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f0e:	f103 0010 	add.w	r0, r3, #16
 8000f12:	edd6 3a00 	vldr	s7, [r6]
 8000f16:	790b      	ldrb	r3, [r1, #4]
 8000f18:	ee03 0a84 	vmla.f32	s0, s7, s8
 8000f1c:	ee02 0a83 	vmla.f32	s0, s5, s6
 8000f20:	ee01 0a82 	vmla.f32	s0, s3, s4
 8000f24:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000f28:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000f2c:	794b      	ldrb	r3, [r1, #5]
 8000f2e:	edd7 0a00 	vldr	s1, [r7]
 8000f32:	ed90 4a00 	vldr	s8, [r0]
 8000f36:	edd0 3a01 	vldr	s7, [r0, #4]
 8000f3a:	ed90 3a02 	vldr	s6, [r0, #8]
 8000f3e:	edd0 2a03 	vldr	s5, [r0, #12]
 8000f42:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000f46:	798b      	ldrb	r3, [r1, #6]
 8000f48:	ed97 1a00 	vldr	s2, [r7]
 8000f4c:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000f50:	79cb      	ldrb	r3, [r1, #7]
 8000f52:	edd7 1a00 	vldr	s3, [r7]
 8000f56:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000f5a:	ee00 0a84 	vmla.f32	s0, s1, s8
 8000f5e:	3108      	adds	r1, #8
 8000f60:	f100 0310 	add.w	r3, r0, #16
 8000f64:	ee01 0a23 	vmla.f32	s0, s2, s7
 8000f68:	ed97 2a00 	vldr	s4, [r7]
 8000f6c:	ee01 0a83 	vmla.f32	s0, s3, s6
 8000f70:	429d      	cmp	r5, r3
 8000f72:	ee02 0a22 	vmla.f32	s0, s4, s5
 8000f76:	d2b0      	bcs.n	8000eda <ai_dict8_dot_array_f32+0x132>
 8000f78:	3520      	adds	r5, #32
 8000f7a:	42ab      	cmp	r3, r5
 8000f7c:	f4bf af46 	bcs.w	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000f80:	7808      	ldrb	r0, [r1, #0]
 8000f82:	ed93 1a00 	vldr	s2, [r3]
 8000f86:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000f8a:	1d18      	adds	r0, r3, #4
 8000f8c:	edd6 0a00 	vldr	s1, [r6]
 8000f90:	42a8      	cmp	r0, r5
 8000f92:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000f96:	f4bf af39 	bcs.w	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000f9a:	784b      	ldrb	r3, [r1, #1]
 8000f9c:	ed90 1a00 	vldr	s2, [r0]
 8000fa0:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000fa4:	1d00      	adds	r0, r0, #4
 8000fa6:	edd6 0a00 	vldr	s1, [r6]
 8000faa:	42a8      	cmp	r0, r5
 8000fac:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000fb0:	f4bf af2c 	bcs.w	8000e0c <ai_dict8_dot_array_f32+0x64>
 8000fb4:	788b      	ldrb	r3, [r1, #2]
 8000fb6:	ed90 1a00 	vldr	s2, [r0]
 8000fba:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000fbe:	1d03      	adds	r3, r0, #4
 8000fc0:	1cc9      	adds	r1, r1, #3
 8000fc2:	edd6 0a00 	vldr	s1, [r6]
 8000fc6:	42ab      	cmp	r3, r5
 8000fc8:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000fcc:	d3d8      	bcc.n	8000f80 <ai_dict8_dot_array_f32+0x1d8>
 8000fce:	edd4 0a00 	vldr	s1, [r4]
 8000fd2:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000fd6:	ed84 0a00 	vstr	s0, [r4]
 8000fda:	bcf0      	pop	{r4, r5, r6, r7}
 8000fdc:	4770      	bx	lr
 8000fde:	78cf      	ldrb	r7, [r1, #3]
 8000fe0:	ed93 4a00 	vldr	s8, [r3]
 8000fe4:	ed93 3a01 	vldr	s6, [r3, #4]
 8000fe8:	ed93 2a02 	vldr	s4, [r3, #8]
 8000fec:	ed93 1a03 	vldr	s2, [r3, #12]
 8000ff0:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000ff4:	788f      	ldrb	r7, [r1, #2]
 8000ff6:	edd6 0a00 	vldr	s1, [r6]
 8000ffa:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000ffe:	784f      	ldrb	r7, [r1, #1]
 8001000:	edd6 1a00 	vldr	s3, [r6]
 8001004:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8001008:	780f      	ldrb	r7, [r1, #0]
 800100a:	edd6 2a00 	vldr	s5, [r6]
 800100e:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8001012:	f103 0010 	add.w	r0, r3, #16
 8001016:	edd6 3a00 	vldr	s7, [r6]
 800101a:	790b      	ldrb	r3, [r1, #4]
 800101c:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001020:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001024:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001028:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800102c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001030:	794b      	ldrb	r3, [r1, #5]
 8001032:	edd7 0a00 	vldr	s1, [r7]
 8001036:	ed90 4a00 	vldr	s8, [r0]
 800103a:	edd0 3a01 	vldr	s7, [r0, #4]
 800103e:	ed90 3a02 	vldr	s6, [r0, #8]
 8001042:	edd0 2a03 	vldr	s5, [r0, #12]
 8001046:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800104a:	798b      	ldrb	r3, [r1, #6]
 800104c:	ed97 1a00 	vldr	s2, [r7]
 8001050:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001054:	79cb      	ldrb	r3, [r1, #7]
 8001056:	edd7 1a00 	vldr	s3, [r7]
 800105a:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800105e:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001062:	3108      	adds	r1, #8
 8001064:	f100 0310 	add.w	r3, r0, #16
 8001068:	ee01 0a23 	vmla.f32	s0, s2, s7
 800106c:	ed97 2a00 	vldr	s4, [r7]
 8001070:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001074:	429d      	cmp	r5, r3
 8001076:	ee02 0a22 	vmla.f32	s0, s4, s5
 800107a:	d2b0      	bcs.n	8000fde <ai_dict8_dot_array_f32+0x236>
 800107c:	e6da      	b.n	8000e34 <ai_dict8_dot_array_f32+0x8c>
	...

08001080 <ai_dict4_dot_array_f32>:
 8001080:	b4f0      	push	{r4, r5, r6, r7}
 8001082:	9c04      	ldr	r4, [sp, #16]
 8001084:	0865      	lsrs	r5, r4, #1
 8001086:	006d      	lsls	r5, r5, #1
 8001088:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800108c:	42ab      	cmp	r3, r5
 800108e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800111c <.text_11>
 8001092:	d22f      	bcs.n	80010f4 <ai_dict4_dot_array_f32+0x74>
 8001094:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001098:	ed93 2a00 	vldr	s4, [r3]
 800109c:	ed93 1a01 	vldr	s2, [r3, #4]
 80010a0:	f006 070f 	and.w	r7, r6, #15
 80010a4:	0936      	lsrs	r6, r6, #4
 80010a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80010aa:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80010ae:	edd6 1a00 	vldr	s3, [r6]
 80010b2:	edd7 0a00 	vldr	s1, [r7]
 80010b6:	3308      	adds	r3, #8
 80010b8:	ee01 0a82 	vmla.f32	s0, s3, s4
 80010bc:	42ab      	cmp	r3, r5
 80010be:	ee00 0a81 	vmla.f32	s0, s1, s2
 80010c2:	d217      	bcs.n	80010f4 <ai_dict4_dot_array_f32+0x74>
 80010c4:	f811 6b01 	ldrb.w	r6, [r1], #1
 80010c8:	ed93 2a00 	vldr	s4, [r3]
 80010cc:	ed93 1a01 	vldr	s2, [r3, #4]
 80010d0:	f006 070f 	and.w	r7, r6, #15
 80010d4:	0936      	lsrs	r6, r6, #4
 80010d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80010da:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80010de:	edd6 1a00 	vldr	s3, [r6]
 80010e2:	edd7 0a00 	vldr	s1, [r7]
 80010e6:	3308      	adds	r3, #8
 80010e8:	ee01 0a82 	vmla.f32	s0, s3, s4
 80010ec:	42ab      	cmp	r3, r5
 80010ee:	ee00 0a81 	vmla.f32	s0, s1, s2
 80010f2:	d3cf      	bcc.n	8001094 <ai_dict4_dot_array_f32+0x14>
 80010f4:	07e4      	lsls	r4, r4, #31
 80010f6:	d509      	bpl.n	800110c <ai_dict4_dot_array_f32+0x8c>
 80010f8:	7809      	ldrb	r1, [r1, #0]
 80010fa:	ed93 1a00 	vldr	s2, [r3]
 80010fe:	0909      	lsrs	r1, r1, #4
 8001100:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001104:	edd2 0a00 	vldr	s1, [r2]
 8001108:	ee00 0a81 	vmla.f32	s0, s1, s2
 800110c:	edd0 1a00 	vldr	s3, [r0]
 8001110:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001114:	ed80 0a00 	vstr	s0, [r0]
 8001118:	bcf0      	pop	{r4, r5, r6, r7}
 800111a:	4770      	bx	lr

0800111c <.text_11>:
 800111c:	00000000 	.word	0x00000000

08001120 <forward_conv2d>:
 8001120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001124:	4605      	mov	r5, r0
 8001126:	b09b      	sub	sp, #108	; 0x6c
 8001128:	6968      	ldr	r0, [r5, #20]
 800112a:	6800      	ldr	r0, [r0, #0]
 800112c:	6801      	ldr	r1, [r0, #0]
 800112e:	6842      	ldr	r2, [r0, #4]
 8001130:	6880      	ldr	r0, [r0, #8]
 8001132:	680f      	ldr	r7, [r1, #0]
 8001134:	f8d2 a000 	ldr.w	sl, [r2]
 8001138:	f8d0 e000 	ldr.w	lr, [r0]
 800113c:	6840      	ldr	r0, [r0, #4]
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	920d      	str	r2, [sp, #52]	; 0x34
 8001142:	2800      	cmp	r0, #0
 8001144:	f8da 3008 	ldr.w	r3, [sl, #8]
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	f8da 1010 	ldr.w	r1, [sl, #16]
 800114e:	f8da 900c 	ldr.w	r9, [sl, #12]
 8001152:	693c      	ldr	r4, [r7, #16]
 8001154:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8001158:	8c2b      	ldrh	r3, [r5, #32]
 800115a:	930c      	str	r3, [sp, #48]	; 0x30
 800115c:	8cae      	ldrh	r6, [r5, #36]	; 0x24
 800115e:	960f      	str	r6, [sp, #60]	; 0x3c
 8001160:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001162:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 8001164:	f8de 300c 	ldr.w	r3, [lr, #12]
 8001168:	930e      	str	r3, [sp, #56]	; 0x38
 800116a:	b292      	uxth	r2, r2
 800116c:	f8de 3008 	ldr.w	r3, [lr, #8]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	683f      	ldr	r7, [r7, #0]
 8001174:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001178:	f8de 7000 	ldr.w	r7, [lr]
 800117c:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8001180:	69ab      	ldr	r3, [r5, #24]
 8001182:	bf1a      	itte	ne
 8001184:	6800      	ldrne	r0, [r0, #0]
 8001186:	6887      	ldrne	r7, [r0, #8]
 8001188:	2700      	moveq	r7, #0
 800118a:	f8da 0000 	ldr.w	r0, [sl]
 800118e:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001192:	69e8      	ldr	r0, [r5, #28]
 8001194:	2800      	cmp	r0, #0
 8001196:	bf14      	ite	ne
 8001198:	4605      	movne	r5, r0
 800119a:	f8df 5710 	ldreq.w	r5, [pc, #1808]	; 80018ac <.text_17>
 800119e:	4252      	negs	r2, r2
 80011a0:	2900      	cmp	r1, #0
 80011a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80011a4:	d06b      	beq.n	800127e <forward_conv2d+0x15e>
 80011a6:	4276      	negs	r6, r6
 80011a8:	9619      	str	r6, [sp, #100]	; 0x64
 80011aa:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 80011ae:	9415      	str	r4, [sp, #84]	; 0x54
 80011b0:	9110      	str	r1, [sp, #64]	; 0x40
 80011b2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80011b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80011b8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80011ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80011bc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80011be:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80011c0:	4240      	negs	r0, r0
 80011c2:	bfd8      	it	le
 80011c4:	2000      	movle	r0, #0
 80011c6:	1a89      	subs	r1, r1, r2
 80011c8:	4559      	cmp	r1, fp
 80011ca:	bf28      	it	cs
 80011cc:	4659      	movcs	r1, fp
 80011ce:	2c00      	cmp	r4, #0
 80011d0:	fb08 6202 	mla	r2, r8, r2, r6
 80011d4:	d04b      	beq.n	800126e <forward_conv2d+0x14e>
 80011d6:	9402      	str	r4, [sp, #8]
 80011d8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80011dc:	9c01      	ldr	r4, [sp, #4]
 80011de:	f8dd 9000 	ldr.w	r9, [sp]
 80011e2:	9314      	str	r3, [sp, #80]	; 0x50
 80011e4:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 80011e8:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 80011ec:	9711      	str	r7, [sp, #68]	; 0x44
 80011ee:	9018      	str	r0, [sp, #96]	; 0x60
 80011f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80011f2:	4693      	mov	fp, r2
 80011f4:	9f02      	ldr	r7, [sp, #8]
 80011f6:	4270      	negs	r0, r6
 80011f8:	bfd8      	it	le
 80011fa:	2000      	movle	r0, #0
 80011fc:	eba8 0106 	sub.w	r1, r8, r6
 8001200:	4549      	cmp	r1, r9
 8001202:	bf28      	it	cs
 8001204:	4649      	movcs	r1, r9
 8001206:	910a      	str	r1, [sp, #40]	; 0x28
 8001208:	9009      	str	r0, [sp, #36]	; 0x24
 800120a:	f8cd 9010 	str.w	r9, [sp, #16]
 800120e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001212:	9402      	str	r4, [sp, #8]
 8001214:	4458      	add	r0, fp
 8001216:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001218:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800121a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800121c:	9108      	str	r1, [sp, #32]
 800121e:	9207      	str	r2, [sp, #28]
 8001220:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001222:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001224:	9106      	str	r1, [sp, #24]
 8001226:	9205      	str	r2, [sp, #20]
 8001228:	990d      	ldr	r1, [sp, #52]	; 0x34
 800122a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800122c:	9101      	str	r1, [sp, #4]
 800122e:	9200      	str	r2, [sp, #0]
 8001230:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001232:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001234:	4350      	muls	r0, r2
 8001236:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800123a:	4651      	mov	r1, sl
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff fd51 	bl	8000ce4 <ai_conv2d_kernel_f32>
 8001242:	4622      	mov	r2, r4
 8001244:	4651      	mov	r1, sl
 8001246:	4650      	mov	r0, sl
 8001248:	47a8      	blx	r5
 800124a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800124c:	1986      	adds	r6, r0, r6
 800124e:	1e7f      	subs	r7, r7, #1
 8001250:	eb0a 0a84 	add.w	sl, sl, r4, lsl #2
 8001254:	4483      	add	fp, r0
 8001256:	d1ce      	bne.n	80011f6 <forward_conv2d+0xd6>
 8001258:	9401      	str	r4, [sp, #4]
 800125a:	f8cd 9000 	str.w	r9, [sp]
 800125e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8001262:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001264:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8001268:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 800126c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800126e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001270:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001272:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001274:	1851      	adds	r1, r2, r1
 8001276:	1e64      	subs	r4, r4, #1
 8001278:	910b      	str	r1, [sp, #44]	; 0x2c
 800127a:	9410      	str	r4, [sp, #64]	; 0x40
 800127c:	d19b      	bne.n	80011b6 <forward_conv2d+0x96>
 800127e:	b01b      	add	sp, #108	; 0x6c
 8001280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001284 <forward_conv2d_nl_pool>:
 8001284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001288:	4603      	mov	r3, r0
 800128a:	b0b5      	sub	sp, #212	; 0xd4
 800128c:	6958      	ldr	r0, [r3, #20]
 800128e:	6800      	ldr	r0, [r0, #0]
 8001290:	6801      	ldr	r1, [r0, #0]
 8001292:	6842      	ldr	r2, [r0, #4]
 8001294:	f8d1 b000 	ldr.w	fp, [r1]
 8001298:	6817      	ldr	r7, [r2, #0]
 800129a:	6880      	ldr	r0, [r0, #8]
 800129c:	f8d0 a000 	ldr.w	sl, [r0]
 80012a0:	6844      	ldr	r4, [r0, #4]
 80012a2:	f10b 0114 	add.w	r1, fp, #20
 80012a6:	e891 1064 	ldmia.w	r1, {r2, r5, r6, ip}
 80012aa:	a82d      	add	r0, sp, #180	; 0xb4
 80012ac:	e880 1064 	stmia.w	r0, {r2, r5, r6, ip}
 80012b0:	f8db 0008 	ldr.w	r0, [fp, #8]
 80012b4:	9004      	str	r0, [sp, #16]
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	9103      	str	r1, [sp, #12]
 80012ba:	6938      	ldr	r0, [r7, #16]
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	921b      	str	r2, [sp, #108]	; 0x6c
 80012c0:	f8db 5010 	ldr.w	r5, [fp, #16]
 80012c4:	950d      	str	r5, [sp, #52]	; 0x34
 80012c6:	f8db 200c 	ldr.w	r2, [fp, #12]
 80012ca:	9202      	str	r2, [sp, #8]
 80012cc:	8c1d      	ldrh	r5, [r3, #32]
 80012ce:	9511      	str	r5, [sp, #68]	; 0x44
 80012d0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80012d2:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80012d4:	9110      	str	r1, [sp, #64]	; 0x40
 80012d6:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
 80012da:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 80012de:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80012e0:	f8ad 5004 	strh.w	r5, [sp, #4]
 80012e4:	699e      	ldr	r6, [r3, #24]
 80012e6:	960c      	str	r6, [sp, #48]	; 0x30
 80012e8:	f8da 1008 	ldr.w	r1, [sl, #8]
 80012ec:	9100      	str	r1, [sp, #0]
 80012ee:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80012f0:	f8da 100c 	ldr.w	r1, [sl, #12]
 80012f4:	950f      	str	r5, [sp, #60]	; 0x3c
 80012f6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80012f8:	951a      	str	r5, [sp, #104]	; 0x68
 80012fa:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 80012fc:	9519      	str	r5, [sp, #100]	; 0x64
 80012fe:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8001300:	951d      	str	r5, [sp, #116]	; 0x74
 8001302:	6a3e      	ldr	r6, [r7, #32]
 8001304:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
 8001308:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800130a:	4346      	muls	r6, r0
 800130c:	9605      	str	r6, [sp, #20]
 800130e:	2c00      	cmp	r4, #0
 8001310:	69fe      	ldr	r6, [r7, #28]
 8001312:	9618      	str	r6, [sp, #96]	; 0x60
 8001314:	f8db 6000 	ldr.w	r6, [fp]
 8001318:	68b6      	ldr	r6, [r6, #8]
 800131a:	9617      	str	r6, [sp, #92]	; 0x5c
 800131c:	f8da 6000 	ldr.w	r6, [sl]
 8001320:	68b6      	ldr	r6, [r6, #8]
 8001322:	960b      	str	r6, [sp, #44]	; 0x2c
 8001324:	bf1a      	itte	ne
 8001326:	6824      	ldrne	r4, [r4, #0]
 8001328:	f8d4 b008 	ldrne.w	fp, [r4, #8]
 800132c:	f04f 0b00 	moveq.w	fp, #0
 8001330:	69dc      	ldr	r4, [r3, #28]
 8001332:	2c00      	cmp	r4, #0
 8001334:	bf12      	itee	ne
 8001336:	940e      	strne	r4, [sp, #56]	; 0x38
 8001338:	f8df 4570 	ldreq.w	r4, [pc, #1392]	; 80018ac <.text_17>
 800133c:	940e      	streq	r4, [sp, #56]	; 0x38
 800133e:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8001340:	9c00      	ldr	r4, [sp, #0]
 8001342:	9616      	str	r6, [sp, #88]	; 0x58
 8001344:	426d      	negs	r5, r5
 8001346:	9b02      	ldr	r3, [sp, #8]
 8001348:	683f      	ldr	r7, [r7, #0]
 800134a:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 800134e:	eba3 0904 	sub.w	r9, r3, r4
 8001352:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001354:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8001356:	4499      	add	r9, r3
 8001358:	fa19 f38e 	uxtah	r3, r9, lr
 800135c:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8001360:	9f05      	ldr	r7, [sp, #20]
 8001362:	fbb3 f4f4 	udiv	r4, r3, r4
 8001366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001368:	1a5b      	subs	r3, r3, r1
 800136a:	4463      	add	r3, ip
 800136c:	199e      	adds	r6, r3, r6
 800136e:	fbb6 f3f2 	udiv	r3, r6, r2
 8001372:	1c64      	adds	r4, r4, #1
 8001374:	1c5b      	adds	r3, r3, #1
 8001376:	4477      	add	r7, lr
 8001378:	2800      	cmp	r0, #0
 800137a:	9715      	str	r7, [sp, #84]	; 0x54
 800137c:	f000 8118 	beq.w	80015b0 <forward_conv2d_nl_pool+0x32c>
 8001380:	f1c8 0800 	rsb	r8, r8, #0
 8001384:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
 8001388:	932a      	str	r3, [sp, #168]	; 0xa8
 800138a:	9514      	str	r5, [sp, #80]	; 0x50
 800138c:	9024      	str	r0, [sp, #144]	; 0x90
 800138e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001390:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8001392:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8001394:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001396:	2b00      	cmp	r3, #0
 8001398:	bfd8      	it	le
 800139a:	2300      	movle	r3, #0
 800139c:	1975      	adds	r5, r6, r5
 800139e:	42a8      	cmp	r0, r5
 80013a0:	bf32      	itee	cc
 80013a2:	4607      	movcc	r7, r0
 80013a4:	9f14      	ldrcs	r7, [sp, #80]	; 0x50
 80013a6:	19f7      	addcs	r7, r6, r7
 80013a8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80013aa:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 80013ac:	2800      	cmp	r0, #0
 80013ae:	f000 80f6 	beq.w	800159e <forward_conv2d_nl_pool+0x31a>
 80013b2:	1bde      	subs	r6, r3, r7
 80013b4:	9633      	str	r6, [sp, #204]	; 0xcc
 80013b6:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
 80013ba:	9425      	str	r4, [sp, #148]	; 0x94
 80013bc:	9323      	str	r3, [sp, #140]	; 0x8c
 80013be:	9728      	str	r7, [sp, #160]	; 0xa0
 80013c0:	9513      	str	r5, [sp, #76]	; 0x4c
 80013c2:	9022      	str	r0, [sp, #136]	; 0x88
 80013c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80013c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80013c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80013ca:	2800      	cmp	r0, #0
 80013cc:	bfcc      	ite	gt
 80013ce:	4606      	movgt	r6, r0
 80013d0:	2600      	movle	r6, #0
 80013d2:	9825      	ldr	r0, [sp, #148]	; 0x94
 80013d4:	18e3      	adds	r3, r4, r3
 80013d6:	4298      	cmp	r0, r3
 80013d8:	bf32      	itee	cc
 80013da:	4603      	movcc	r3, r0
 80013dc:	9b13      	ldrcs	r3, [sp, #76]	; 0x4c
 80013de:	18e3      	addcs	r3, r4, r3
 80013e0:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80013e2:	1af4      	subs	r4, r6, r3
 80013e4:	fb04 fa00 	mul.w	sl, r4, r0
 80013e8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80013ea:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80013ec:	42a0      	cmp	r0, r4
 80013ee:	46f0      	mov	r8, lr
 80013f0:	f04f 0900 	mov.w	r9, #0
 80013f4:	f280 80c5 	bge.w	8001582 <forward_conv2d_nl_pool+0x2fe>
 80013f8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80013fa:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80013fc:	922c      	str	r2, [sp, #176]	; 0xb0
 80013fe:	4350      	muls	r0, r2
 8001400:	1b04      	subs	r4, r0, r4
 8001402:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8001404:	9621      	str	r6, [sp, #132]	; 0x84
 8001406:	1b45      	subs	r5, r0, r5
 8001408:	9811      	ldr	r0, [sp, #68]	; 0x44
 800140a:	9327      	str	r3, [sp, #156]	; 0x9c
 800140c:	9412      	str	r4, [sp, #72]	; 0x48
 800140e:	951f      	str	r5, [sp, #124]	; 0x7c
 8001410:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001414:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8001416:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8001418:	4252      	negs	r2, r2
 800141a:	bfd8      	it	le
 800141c:	2200      	movle	r2, #0
 800141e:	1b1b      	subs	r3, r3, r4
 8001420:	428b      	cmp	r3, r1
 8001422:	bf3a      	itte	cc
 8001424:	9b0d      	ldrcc	r3, [sp, #52]	; 0x34
 8001426:	1b1d      	subcc	r5, r3, r4
 8001428:	460d      	movcs	r5, r1
 800142a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800142c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800142e:	4344      	muls	r4, r0
 8001430:	1ae3      	subs	r3, r4, r3
 8001432:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8001434:	42b4      	cmp	r4, r6
 8001436:	f280 8099 	bge.w	800156c <forward_conv2d_nl_pool+0x2e8>
 800143a:	1aad      	subs	r5, r5, r2
 800143c:	9532      	str	r5, [sp, #200]	; 0xc8
 800143e:	eba6 0c04 	sub.w	ip, r6, r4
 8001442:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8001444:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 8001446:	9c04      	ldr	r4, [sp, #16]
 8001448:	9f00      	ldr	r7, [sp, #0]
 800144a:	f8cd b098 	str.w	fp, [sp, #152]	; 0x98
 800144e:	4375      	muls	r5, r6
 8001450:	9531      	str	r5, [sp, #196]	; 0xc4
 8001452:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
 8001456:	9d03      	ldr	r5, [sp, #12]
 8001458:	9e02      	ldr	r6, [sp, #8]
 800145a:	9011      	str	r0, [sp, #68]	; 0x44
 800145c:	911c      	str	r1, [sp, #112]	; 0x70
 800145e:	f8cd e0a4 	str.w	lr, [sp, #164]	; 0xa4
 8001462:	921e      	str	r2, [sp, #120]	; 0x78
 8001464:	469a      	mov	sl, r3
 8001466:	46e3      	mov	fp, ip
 8001468:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800146a:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
 800146e:	f1da 0100 	rsbs	r1, sl, #0
 8001472:	bfd8      	it	le
 8001474:	2100      	movle	r1, #0
 8001476:	eb01 0c0a 	add.w	ip, r1, sl
 800147a:	fb0e 220c 	mla	r2, lr, ip, r2
 800147e:	eba6 000a 	sub.w	r0, r6, sl
 8001482:	42b8      	cmp	r0, r7
 8001484:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001486:	4402      	add	r2, r0
 8001488:	9826      	ldr	r0, [sp, #152]	; 0x98
 800148a:	bf34      	ite	cc
 800148c:	eba6 030a 	subcc.w	r3, r6, sl
 8001490:	463b      	movcs	r3, r7
 8001492:	b908      	cbnz	r0, 8001498 <forward_conv2d_nl_pool+0x214>
 8001494:	ea4f 0008 	mov.w	r0, r8
 8001498:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800149c:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
 80014a0:	1a5b      	subs	r3, r3, r1
 80014a2:	f1be 0f01 	cmp.w	lr, #1
 80014a6:	d112      	bne.n	80014ce <forward_conv2d_nl_pool+0x24a>
 80014a8:	9108      	str	r1, [sp, #32]
 80014aa:	9309      	str	r3, [sp, #36]	; 0x24
 80014ac:	f8cd c01c 	str.w	ip, [sp, #28]
 80014b0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80014b2:	9106      	str	r1, [sp, #24]
 80014b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80014b6:	9105      	str	r1, [sp, #20]
 80014b8:	9000      	str	r0, [sp, #0]
 80014ba:	9704      	str	r7, [sp, #16]
 80014bc:	9603      	str	r6, [sp, #12]
 80014be:	9502      	str	r5, [sp, #8]
 80014c0:	9401      	str	r4, [sp, #4]
 80014c2:	4641      	mov	r1, r8
 80014c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff fa32 	bl	8000930 <ai_conv2d_kernel_simple_f32>
 80014cc:	e028      	b.n	8001520 <forward_conv2d_nl_pool+0x29c>
 80014ce:	45a6      	cmp	lr, r4
 80014d0:	d112      	bne.n	80014f8 <forward_conv2d_nl_pool+0x274>
 80014d2:	9309      	str	r3, [sp, #36]	; 0x24
 80014d4:	9108      	str	r1, [sp, #32]
 80014d6:	9000      	str	r0, [sp, #0]
 80014d8:	f8cd c01c 	str.w	ip, [sp, #28]
 80014dc:	9704      	str	r7, [sp, #16]
 80014de:	9603      	str	r6, [sp, #12]
 80014e0:	9502      	str	r5, [sp, #8]
 80014e2:	9401      	str	r4, [sp, #4]
 80014e4:	2000      	movs	r0, #0
 80014e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80014e8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80014ea:	9305      	str	r3, [sp, #20]
 80014ec:	9106      	str	r1, [sp, #24]
 80014ee:	4641      	mov	r1, r8
 80014f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014f2:	f7ff faa5 	bl	8000a40 <ai_conv2d_kernel_depthwise_f32>
 80014f6:	e013      	b.n	8001520 <forward_conv2d_nl_pool+0x29c>
 80014f8:	9109      	str	r1, [sp, #36]	; 0x24
 80014fa:	930a      	str	r3, [sp, #40]	; 0x28
 80014fc:	9000      	str	r0, [sp, #0]
 80014fe:	f8cd c020 	str.w	ip, [sp, #32]
 8001502:	9704      	str	r7, [sp, #16]
 8001504:	9603      	str	r6, [sp, #12]
 8001506:	9502      	str	r5, [sp, #8]
 8001508:	9401      	str	r4, [sp, #4]
 800150a:	2000      	movs	r0, #0
 800150c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800150e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001510:	9107      	str	r1, [sp, #28]
 8001512:	9306      	str	r3, [sp, #24]
 8001514:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001518:	9105      	str	r1, [sp, #20]
 800151a:	4641      	mov	r1, r8
 800151c:	f7ff fb32 	bl	8000b84 <ai_conv2d_kernel_group_f32>
 8001520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001522:	462a      	mov	r2, r5
 8001524:	4641      	mov	r1, r8
 8001526:	4640      	mov	r0, r8
 8001528:	4798      	blx	r3
 800152a:	9820      	ldr	r0, [sp, #128]	; 0x80
 800152c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8001530:	f109 0901 	add.w	r9, r9, #1
 8001534:	4548      	cmp	r0, r9
 8001536:	bf18      	it	ne
 8001538:	2000      	movne	r0, #0
 800153a:	9000      	str	r0, [sp, #0]
 800153c:	462b      	mov	r3, r5
 800153e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001540:	462a      	mov	r2, r5
 8001542:	4641      	mov	r1, r8
 8001544:	47e0      	blx	ip
 8001546:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001548:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800154c:	f1bb 0b01 	subs.w	fp, fp, #1
 8001550:	4482      	add	sl, r0
 8001552:	d189      	bne.n	8001468 <forward_conv2d_nl_pool+0x1e4>
 8001554:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001556:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001558:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 800155c:	f8dd e0a4 	ldr.w	lr, [sp, #164]	; 0xa4
 8001560:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8001564:	9404      	str	r4, [sp, #16]
 8001566:	9503      	str	r5, [sp, #12]
 8001568:	9602      	str	r6, [sp, #8]
 800156a:	9700      	str	r7, [sp, #0]
 800156c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800156e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001570:	189a      	adds	r2, r3, r2
 8001572:	9212      	str	r2, [sp, #72]	; 0x48
 8001574:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8001576:	1e52      	subs	r2, r2, #1
 8001578:	921f      	str	r2, [sp, #124]	; 0x7c
 800157a:	f47f af49 	bne.w	8001410 <forward_conv2d_nl_pool+0x18c>
 800157e:	9011      	str	r0, [sp, #68]	; 0x44
 8001580:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8001582:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001584:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001586:	1818      	adds	r0, r3, r0
 8001588:	9013      	str	r0, [sp, #76]	; 0x4c
 800158a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800158c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800158e:	1e5b      	subs	r3, r3, #1
 8001590:	4486      	add	lr, r0
 8001592:	9322      	str	r3, [sp, #136]	; 0x88
 8001594:	f47f af16 	bne.w	80013c4 <forward_conv2d_nl_pool+0x140>
 8001598:	f8dd c0ac 	ldr.w	ip, [sp, #172]	; 0xac
 800159c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800159e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80015a0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80015a2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80015a4:	18eb      	adds	r3, r5, r3
 80015a6:	1e76      	subs	r6, r6, #1
 80015a8:	9314      	str	r3, [sp, #80]	; 0x50
 80015aa:	9624      	str	r6, [sp, #144]	; 0x90
 80015ac:	f47f aeef 	bne.w	800138e <forward_conv2d_nl_pool+0x10a>
 80015b0:	b035      	add	sp, #212	; 0xd4
 80015b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080015b8 <forward_dense>:
 80015b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015bc:	b089      	sub	sp, #36	; 0x24
 80015be:	6940      	ldr	r0, [r0, #20]
 80015c0:	6800      	ldr	r0, [r0, #0]
 80015c2:	6801      	ldr	r1, [r0, #0]
 80015c4:	6842      	ldr	r2, [r0, #4]
 80015c6:	6880      	ldr	r0, [r0, #8]
 80015c8:	f8d0 8000 	ldr.w	r8, [r0]
 80015cc:	6844      	ldr	r4, [r0, #4]
 80015ce:	680e      	ldr	r6, [r1, #0]
 80015d0:	f8d2 e000 	ldr.w	lr, [r2]
 80015d4:	f8de 000c 	ldr.w	r0, [lr, #12]
 80015d8:	f8de 2010 	ldr.w	r2, [lr, #16]
 80015dc:	68b5      	ldr	r5, [r6, #8]
 80015de:	f8de 1008 	ldr.w	r1, [lr, #8]
 80015e2:	4350      	muls	r0, r2
 80015e4:	f8d8 2000 	ldr.w	r2, [r8]
 80015e8:	6813      	ldr	r3, [r2, #0]
 80015ea:	ea4f 5a53 	mov.w	sl, r3, lsr #21
 80015ee:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 80015f2:	f00a 0a03 	and.w	sl, sl, #3
 80015f6:	0c5b      	lsrs	r3, r3, #17
 80015f8:	2700      	movs	r7, #0
 80015fa:	fa29 f90a 	lsr.w	r9, r9, sl
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	f8cd 9004 	str.w	r9, [sp, #4]
 8001606:	2b04      	cmp	r3, #4
 8001608:	6836      	ldr	r6, [r6, #0]
 800160a:	bf14      	ite	ne
 800160c:	2b08      	cmpne	r3, #8
 800160e:	68d7      	ldreq	r7, [r2, #12]
 8001610:	f8de 2000 	ldr.w	r2, [lr]
 8001614:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8001618:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800161c:	68b2      	ldr	r2, [r6, #8]
 800161e:	2800      	cmp	r0, #0
 8001620:	eb09 0681 	add.w	r6, r9, r1, lsl #2
 8001624:	d066      	beq.n	80016f4 <forward_dense+0x13c>
 8001626:	f8cd 801c 	str.w	r8, [sp, #28]
 800162a:	9405      	str	r4, [sp, #20]
 800162c:	9106      	str	r1, [sp, #24]
 800162e:	9704      	str	r7, [sp, #16]
 8001630:	9600      	str	r6, [sp, #0]
 8001632:	9003      	str	r0, [sp, #12]
 8001634:	9807      	ldr	r0, [sp, #28]
 8001636:	6801      	ldr	r1, [r0, #0]
 8001638:	6888      	ldr	r0, [r1, #8]
 800163a:	9905      	ldr	r1, [sp, #20]
 800163c:	b109      	cbz	r1, 8001642 <forward_dense+0x8a>
 800163e:	680c      	ldr	r4, [r1, #0]
 8001640:	68a1      	ldr	r1, [r4, #8]
 8001642:	9c04      	ldr	r4, [sp, #16]
 8001644:	2c00      	cmp	r4, #0
 8001646:	9c00      	ldr	r4, [sp, #0]
 8001648:	d110      	bne.n	800166c <forward_dense+0xb4>
 800164a:	45a1      	cmp	r9, r4
 800164c:	d247      	bcs.n	80016de <forward_dense+0x126>
 800164e:	46a2      	mov	sl, r4
 8001650:	462e      	mov	r6, r5
 8001652:	464f      	mov	r7, r9
 8001654:	461c      	mov	r4, r3
 8001656:	4690      	mov	r8, r2
 8001658:	4681      	mov	r9, r0
 800165a:	460d      	mov	r5, r1
 800165c:	2d00      	cmp	r5, #0
 800165e:	bf19      	ittee	ne
 8001660:	f855 0b04 	ldrne.w	r0, [r5], #4
 8001664:	9002      	strne	r0, [sp, #8]
 8001666:	2100      	moveq	r1, #0
 8001668:	9102      	streq	r1, [sp, #8]
 800166a:	e028      	b.n	80016be <forward_dense+0x106>
 800166c:	45a1      	cmp	r9, r4
 800166e:	d236      	bcs.n	80016de <forward_dense+0x126>
 8001670:	9c04      	ldr	r4, [sp, #16]
 8001672:	9f00      	ldr	r7, [sp, #0]
 8001674:	4698      	mov	r8, r3
 8001676:	4616      	mov	r6, r2
 8001678:	4682      	mov	sl, r0
 800167a:	468b      	mov	fp, r1
 800167c:	f1bb 0f00 	cmp.w	fp, #0
 8001680:	bf19      	ittee	ne
 8001682:	f85b 0b04 	ldrne.w	r0, [fp], #4
 8001686:	9002      	strne	r0, [sp, #8]
 8001688:	2000      	moveq	r0, #0
 800168a:	9002      	streq	r0, [sp, #8]
 800168c:	9901      	ldr	r1, [sp, #4]
 800168e:	9500      	str	r5, [sp, #0]
 8001690:	2904      	cmp	r1, #4
 8001692:	4633      	mov	r3, r6
 8001694:	4622      	mov	r2, r4
 8001696:	4651      	mov	r1, sl
 8001698:	a802      	add	r0, sp, #8
 800169a:	d103      	bne.n	80016a4 <forward_dense+0xec>
 800169c:	f7ff fcf0 	bl	8001080 <ai_dict4_dot_array_f32>
 80016a0:	e002      	b.n	80016a8 <forward_dense+0xf0>
 80016a2:	bf00      	nop
 80016a4:	f7ff fb80 	bl	8000da8 <ai_dict8_dot_array_f32>
 80016a8:	9802      	ldr	r0, [sp, #8]
 80016aa:	f849 0b04 	str.w	r0, [r9], #4
 80016ae:	45b9      	cmp	r9, r7
 80016b0:	44c2      	add	sl, r8
 80016b2:	d3e3      	bcc.n	800167c <forward_dense+0xc4>
 80016b4:	9404      	str	r4, [sp, #16]
 80016b6:	4643      	mov	r3, r8
 80016b8:	4632      	mov	r2, r6
 80016ba:	9700      	str	r7, [sp, #0]
 80016bc:	e00f      	b.n	80016de <forward_dense+0x126>
 80016be:	4633      	mov	r3, r6
 80016c0:	4642      	mov	r2, r8
 80016c2:	4649      	mov	r1, r9
 80016c4:	a802      	add	r0, sp, #8
 80016c6:	f000 fff5 	bl	80026b4 <ai_math_dot_array>
 80016ca:	9802      	ldr	r0, [sp, #8]
 80016cc:	f847 0b04 	str.w	r0, [r7], #4
 80016d0:	4557      	cmp	r7, sl
 80016d2:	44a1      	add	r9, r4
 80016d4:	d3c2      	bcc.n	800165c <forward_dense+0xa4>
 80016d6:	4635      	mov	r5, r6
 80016d8:	4623      	mov	r3, r4
 80016da:	46b9      	mov	r9, r7
 80016dc:	4642      	mov	r2, r8
 80016de:	9800      	ldr	r0, [sp, #0]
 80016e0:	9906      	ldr	r1, [sp, #24]
 80016e2:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 80016e6:	9803      	ldr	r0, [sp, #12]
 80016e8:	9400      	str	r4, [sp, #0]
 80016ea:	1e40      	subs	r0, r0, #1
 80016ec:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80016f0:	9003      	str	r0, [sp, #12]
 80016f2:	d19f      	bne.n	8001634 <forward_dense+0x7c>
 80016f4:	b009      	add	sp, #36	; 0x24
 80016f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080016fc <arm_mat_gemm_f32>:
 80016fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001700:	b08a      	sub	sp, #40	; 0x28
 8001702:	4615      	mov	r5, r2
 8001704:	468b      	mov	fp, r1
 8001706:	469a      	mov	sl, r3
 8001708:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800170a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800170e:	6869      	ldr	r1, [r5, #4]
 8001710:	9100      	str	r1, [sp, #0]
 8001712:	685c      	ldr	r4, [r3, #4]
 8001714:	9402      	str	r4, [sp, #8]
 8001716:	f8b3 9000 	ldrh.w	r9, [r3]
 800171a:	8804      	ldrh	r4, [r0, #0]
 800171c:	885e      	ldrh	r6, [r3, #2]
 800171e:	8840      	ldrh	r0, [r0, #2]
 8001720:	f8bb 1000 	ldrh.w	r1, [fp]
 8001724:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8001728:	f8b5 e000 	ldrh.w	lr, [r5]
 800172c:	886f      	ldrh	r7, [r5, #2]
 800172e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001732:	9305      	str	r3, [sp, #20]
 8001734:	9304      	str	r3, [sp, #16]
 8001736:	2500      	movs	r5, #0
 8001738:	fa4f f38a 	sxtb.w	r3, sl
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf0c      	ite	eq
 8001740:	46a0      	moveq	r8, r4
 8001742:	4680      	movne	r8, r0
 8001744:	2f01      	cmp	r7, #1
 8001746:	bf0c      	ite	eq
 8001748:	2300      	moveq	r3, #0
 800174a:	2304      	movne	r3, #4
 800174c:	f1be 0f01 	cmp.w	lr, #1
 8001750:	d104      	bne.n	800175c <arm_mat_gemm_f32+0x60>
 8001752:	2f01      	cmp	r7, #1
 8001754:	d007      	beq.n	8001766 <arm_mat_gemm_f32+0x6a>
 8001756:	f1c6 0e00 	rsb	lr, r6, #0
 800175a:	e005      	b.n	8001768 <arm_mat_gemm_f32+0x6c>
 800175c:	2f01      	cmp	r7, #1
 800175e:	bf08      	it	eq
 8001760:	f04f 0e01 	moveq.w	lr, #1
 8001764:	d000      	beq.n	8001768 <arm_mat_gemm_f32+0x6c>
 8001766:	46ae      	mov	lr, r5
 8001768:	fa0f f78e 	sxth.w	r7, lr
 800176c:	9701      	str	r7, [sp, #4]
 800176e:	fa4f f78a 	sxtb.w	r7, sl
 8001772:	2f00      	cmp	r7, #0
 8001774:	bf0c      	ite	eq
 8001776:	46a3      	moveq	fp, r4
 8001778:	4683      	movne	fp, r0
 800177a:	45cb      	cmp	fp, r9
 800177c:	d115      	bne.n	80017aa <arm_mat_gemm_f32+0xae>
 800177e:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 8001782:	f1be 0f00 	cmp.w	lr, #0
 8001786:	bf0c      	ite	eq
 8001788:	4691      	moveq	r9, r2
 800178a:	4689      	movne	r9, r1
 800178c:	45b1      	cmp	r9, r6
 800178e:	d10c      	bne.n	80017aa <arm_mat_gemm_f32+0xae>
 8001790:	fa4f f68a 	sxtb.w	r6, sl
 8001794:	2e00      	cmp	r6, #0
 8001796:	bf0c      	ite	eq
 8001798:	4683      	moveq	fp, r0
 800179a:	46a3      	movne	fp, r4
 800179c:	f1be 0f00 	cmp.w	lr, #0
 80017a0:	bf0c      	ite	eq
 80017a2:	460e      	moveq	r6, r1
 80017a4:	4616      	movne	r6, r2
 80017a6:	45b3      	cmp	fp, r6
 80017a8:	d06c      	beq.n	8001884 <arm_mat_gemm_f32+0x188>
 80017aa:	f06f 0002 	mvn.w	r0, #2
 80017ae:	b00a      	add	sp, #40	; 0x28
 80017b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017b4:	9d05      	ldr	r5, [sp, #20]
 80017b6:	0097      	lsls	r7, r2, #2
 80017b8:	9708      	str	r7, [sp, #32]
 80017ba:	0086      	lsls	r6, r0, #2
 80017bc:	9607      	str	r6, [sp, #28]
 80017be:	f8cd c018 	str.w	ip, [sp, #24]
 80017c2:	f8ad 4002 	strh.w	r4, [sp, #2]
 80017c6:	4644      	mov	r4, r8
 80017c8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80017cc:	fa4f f68a 	sxtb.w	r6, sl
 80017d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80017d4:	2e00      	cmp	r6, #0
 80017d6:	ed9f 1a34 	vldr	s2, [pc, #208]	; 80018a8 <.text_16>
 80017da:	bf0c      	ite	eq
 80017dc:	4606      	moveq	r6, r0
 80017de:	f8bd 6002 	ldrhne.w	r6, [sp, #2]
 80017e2:	b1b6      	cbz	r6, 8001812 <arm_mat_gemm_f32+0x116>
 80017e4:	fa4f f78a 	sxtb.w	r7, sl
 80017e8:	2f00      	cmp	r7, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2704      	moveq	r7, #4
 80017ee:	9f07      	ldrne	r7, [sp, #28]
 80017f0:	f1be 0f00 	cmp.w	lr, #0
 80017f4:	edd8 1a00 	vldr	s3, [r8]
 80017f8:	ed95 2a00 	vldr	s4, [r5]
 80017fc:	44b8      	add	r8, r7
 80017fe:	bf0c      	ite	eq
 8001800:	9f08      	ldreq	r7, [sp, #32]
 8001802:	2704      	movne	r7, #4
 8001804:	19ed      	adds	r5, r5, r7
 8001806:	1e76      	subs	r6, r6, #1
 8001808:	b2b7      	uxth	r7, r6
 800180a:	2f00      	cmp	r7, #0
 800180c:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001810:	d1e8      	bne.n	80017e4 <arm_mat_gemm_f32+0xe8>
 8001812:	ee20 1a01 	vmul.f32	s2, s0, s2
 8001816:	eddb 1a00 	vldr	s3, [fp]
 800181a:	1e64      	subs	r4, r4, #1
 800181c:	ee00 1aa1 	vmla.f32	s2, s1, s3
 8001820:	b2a4      	uxth	r4, r4
 8001822:	f1be 0f00 	cmp.w	lr, #0
 8001826:	ed89 1a00 	vstr	s2, [r9]
 800182a:	bf0e      	itee	eq
 800182c:	1b15      	subeq	r5, r2, r4
 800182e:	1b0d      	subne	r5, r1, r4
 8001830:	4355      	mulne	r5, r2
 8001832:	2c00      	cmp	r4, #0
 8001834:	f109 0904 	add.w	r9, r9, #4
 8001838:	449b      	add	fp, r3
 800183a:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 800183e:	d1c5      	bne.n	80017cc <arm_mat_gemm_f32+0xd0>
 8001840:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001844:	9d06      	ldr	r5, [sp, #24]
 8001846:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 800184a:	f8cd c010 	str.w	ip, [sp, #16]
 800184e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001850:	444e      	add	r6, r9
 8001852:	9603      	str	r6, [sp, #12]
 8001854:	fa4f f68a 	sxtb.w	r6, sl
 8001858:	2e00      	cmp	r6, #0
 800185a:	bf0c      	ite	eq
 800185c:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 8001860:	f04f 0c04 	movne.w	ip, #4
 8001864:	44ac      	add	ip, r5
 8001866:	9d01      	ldr	r5, [sp, #4]
 8001868:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 800186c:	f8bd 5000 	ldrh.w	r5, [sp]
 8001870:	1e6e      	subs	r6, r5, #1
 8001872:	f8ad 6000 	strh.w	r6, [sp]
 8001876:	f8bd 5000 	ldrh.w	r5, [sp]
 800187a:	b955      	cbnz	r5, 8001892 <arm_mat_gemm_f32+0x196>
 800187c:	2000      	movs	r0, #0
 800187e:	b00a      	add	sp, #40	; 0x28
 8001880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001884:	f8dd b000 	ldr.w	fp, [sp]
 8001888:	9503      	str	r5, [sp, #12]
 800188a:	f8ad 8000 	strh.w	r8, [sp]
 800188e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8001892:	ae03      	add	r6, sp, #12
 8001894:	9d02      	ldr	r5, [sp, #8]
 8001896:	8836      	ldrh	r6, [r6, #0]
 8001898:	f1be 0f00 	cmp.w	lr, #0
 800189c:	eb05 0986 	add.w	r9, r5, r6, lsl #2
 80018a0:	bf0c      	ite	eq
 80018a2:	4690      	moveq	r8, r2
 80018a4:	4688      	movne	r8, r1
 80018a6:	e785      	b.n	80017b4 <arm_mat_gemm_f32+0xb8>

080018a8 <.text_16>:
 80018a8:	00000000 	.word	0x00000000

080018ac <.text_17>:
 80018ac:	08000da5 	.word	0x08000da5

080018b0 <forward_gemm>:
 80018b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b2:	b08b      	sub	sp, #44	; 0x2c
 80018b4:	6941      	ldr	r1, [r0, #20]
 80018b6:	6809      	ldr	r1, [r1, #0]
 80018b8:	680a      	ldr	r2, [r1, #0]
 80018ba:	6849      	ldr	r1, [r1, #4]
 80018bc:	6809      	ldr	r1, [r1, #0]
 80018be:	680d      	ldr	r5, [r1, #0]
 80018c0:	6814      	ldr	r4, [r2, #0]
 80018c2:	6853      	ldr	r3, [r2, #4]
 80018c4:	6892      	ldr	r2, [r2, #8]
 80018c6:	68ad      	ldr	r5, [r5, #8]
 80018c8:	68ce      	ldr	r6, [r1, #12]
 80018ca:	690f      	ldr	r7, [r1, #16]
 80018cc:	9509      	str	r5, [sp, #36]	; 0x24
 80018ce:	f8ad 7020 	strh.w	r7, [sp, #32]
 80018d2:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 80018d6:	6825      	ldr	r5, [r4, #0]
 80018d8:	68e6      	ldr	r6, [r4, #12]
 80018da:	68ad      	ldr	r5, [r5, #8]
 80018dc:	6924      	ldr	r4, [r4, #16]
 80018de:	f8ad 4018 	strh.w	r4, [sp, #24]
 80018e2:	f8ad 601a 	strh.w	r6, [sp, #26]
 80018e6:	9507      	str	r5, [sp, #28]
 80018e8:	681c      	ldr	r4, [r3, #0]
 80018ea:	68dd      	ldr	r5, [r3, #12]
 80018ec:	68a4      	ldr	r4, [r4, #8]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f8ad 3010 	strh.w	r3, [sp, #16]
 80018f4:	f8ad 5012 	strh.w	r5, [sp, #18]
 80018f8:	9405      	str	r4, [sp, #20]
 80018fa:	6813      	ldr	r3, [r2, #0]
 80018fc:	68d4      	ldr	r4, [r2, #12]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	6912      	ldr	r2, [r2, #16]
 8001902:	f8ad 2008 	strh.w	r2, [sp, #8]
 8001906:	f8ad 400a 	strh.w	r4, [sp, #10]
 800190a:	aa08      	add	r2, sp, #32
 800190c:	9303      	str	r3, [sp, #12]
 800190e:	9201      	str	r2, [sp, #4]
 8001910:	aa02      	add	r2, sp, #8
 8001912:	f990 1021 	ldrsb.w	r1, [r0, #33]	; 0x21
 8001916:	9100      	str	r1, [sp, #0]
 8001918:	a904      	add	r1, sp, #16
 800191a:	f990 3020 	ldrsb.w	r3, [r0, #32]
 800191e:	edd0 0a07 	vldr	s1, [r0, #28]
 8001922:	ed90 0a06 	vldr	s0, [r0, #24]
 8001926:	a806      	add	r0, sp, #24
 8001928:	f7ff fee8 	bl	80016fc <arm_mat_gemm_f32>
 800192c:	b00b      	add	sp, #44	; 0x2c
 800192e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001930 <nl_func_sm_channel_f32>:
 8001930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001934:	460f      	mov	r7, r1
 8001936:	4614      	mov	r4, r2
 8001938:	ed2d 8b02 	vpush	{d8}
 800193c:	2c02      	cmp	r4, #2
 800193e:	4606      	mov	r6, r0
 8001940:	ed97 8a00 	vldr	s16, [r7]
 8001944:	eddf 8ac3 	vldr	s17, [pc, #780]	; 8001c54 <.text_11>
 8001948:	d33d      	bcc.n	80019c6 <nl_func_sm_channel_f32+0x96>
 800194a:	1e61      	subs	r1, r4, #1
 800194c:	1d3a      	adds	r2, r7, #4
 800194e:	f011 0003 	ands.w	r0, r1, #3
 8001952:	d00c      	beq.n	800196e <nl_func_sm_channel_f32+0x3e>
 8001954:	ed92 0a00 	vldr	s0, [r2]
 8001958:	eeb4 0a48 	vcmp.f32	s0, s16
 800195c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001960:	bf58      	it	pl
 8001962:	eeb0 8a40 	vmovpl.f32	s16, s0
 8001966:	1e40      	subs	r0, r0, #1
 8001968:	f102 0204 	add.w	r2, r2, #4
 800196c:	d1f2      	bne.n	8001954 <nl_func_sm_channel_f32+0x24>
 800196e:	0889      	lsrs	r1, r1, #2
 8001970:	f000 802b 	beq.w	80019ca <nl_func_sm_channel_f32+0x9a>
 8001974:	ed92 0a00 	vldr	s0, [r2]
 8001978:	eeb4 0a48 	vcmp.f32	s0, s16
 800197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001980:	bf58      	it	pl
 8001982:	eeb0 8a40 	vmovpl.f32	s16, s0
 8001986:	ed92 0a01 	vldr	s0, [r2, #4]
 800198a:	eeb4 0a48 	vcmp.f32	s0, s16
 800198e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001992:	bf58      	it	pl
 8001994:	eeb0 8a40 	vmovpl.f32	s16, s0
 8001998:	ed92 0a02 	vldr	s0, [r2, #8]
 800199c:	eeb4 0a48 	vcmp.f32	s0, s16
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	bf58      	it	pl
 80019a6:	eeb0 8a40 	vmovpl.f32	s16, s0
 80019aa:	ed92 0a03 	vldr	s0, [r2, #12]
 80019ae:	eeb4 0a48 	vcmp.f32	s0, s16
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	bf58      	it	pl
 80019b8:	eeb0 8a40 	vmovpl.f32	s16, s0
 80019bc:	1e49      	subs	r1, r1, #1
 80019be:	f102 0210 	add.w	r2, r2, #16
 80019c2:	d1d7      	bne.n	8001974 <nl_func_sm_channel_f32+0x44>
 80019c4:	e001      	b.n	80019ca <nl_func_sm_channel_f32+0x9a>
 80019c6:	2c00      	cmp	r4, #0
 80019c8:	d040      	beq.n	8001a4c <nl_func_sm_channel_f32+0x11c>
 80019ca:	46b0      	mov	r8, r6
 80019cc:	ea4f 0504 	mov.w	r5, r4
 80019d0:	ed97 0a00 	vldr	s0, [r7]
 80019d4:	ee30 0a48 	vsub.f32	s0, s0, s16
 80019d8:	f00a fb9a 	bl	800c110 <expf>
 80019dc:	1d3f      	adds	r7, r7, #4
 80019de:	ed88 0a00 	vstr	s0, [r8]
 80019e2:	1e6d      	subs	r5, r5, #1
 80019e4:	ee78 8a80 	vadd.f32	s17, s17, s0
 80019e8:	f108 0804 	add.w	r8, r8, #4
 80019ec:	d1f0      	bne.n	80019d0 <nl_func_sm_channel_f32+0xa0>
 80019ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80019f2:	f014 0003 	ands.w	r0, r4, #3
 80019f6:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80019fa:	d009      	beq.n	8001a10 <nl_func_sm_channel_f32+0xe0>
 80019fc:	edd6 0a00 	vldr	s1, [r6]
 8001a00:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001a04:	edc6 0a00 	vstr	s1, [r6]
 8001a08:	1e40      	subs	r0, r0, #1
 8001a0a:	f106 0604 	add.w	r6, r6, #4
 8001a0e:	d1f5      	bne.n	80019fc <nl_func_sm_channel_f32+0xcc>
 8001a10:	08a4      	lsrs	r4, r4, #2
 8001a12:	d01b      	beq.n	8001a4c <nl_func_sm_channel_f32+0x11c>
 8001a14:	edd6 0a00 	vldr	s1, [r6]
 8001a18:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001a1c:	edc6 0a00 	vstr	s1, [r6]
 8001a20:	1e64      	subs	r4, r4, #1
 8001a22:	ed96 1a01 	vldr	s2, [r6, #4]
 8001a26:	edd6 0a02 	vldr	s1, [r6, #8]
 8001a2a:	ee21 1a00 	vmul.f32	s2, s2, s0
 8001a2e:	ed86 1a01 	vstr	s2, [r6, #4]
 8001a32:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001a36:	ed96 1a03 	vldr	s2, [r6, #12]
 8001a3a:	edc6 0a02 	vstr	s1, [r6, #8]
 8001a3e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8001a42:	ed86 1a03 	vstr	s2, [r6, #12]
 8001a46:	f106 0610 	add.w	r6, r6, #16
 8001a4a:	d1e3      	bne.n	8001a14 <nl_func_sm_channel_f32+0xe4>
 8001a4c:	ecbd 8b02 	vpop	{d8}
 8001a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a54 <nl_func_sm_array_f32>:
 8001a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a58:	b081      	sub	sp, #4
 8001a5a:	460c      	mov	r4, r1
 8001a5c:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8001a60:	9e08      	ldr	r6, [sp, #32]
 8001a62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8001a64:	454c      	cmp	r4, r9
 8001a66:	4680      	mov	r8, r0
 8001a68:	461d      	mov	r5, r3
 8001a6a:	d20a      	bcs.n	8001a82 <nl_func_sm_array_f32+0x2e>
 8001a6c:	462a      	mov	r2, r5
 8001a6e:	4621      	mov	r1, r4
 8001a70:	4640      	mov	r0, r8
 8001a72:	f7ff ff5d 	bl	8001930 <nl_func_sm_channel_f32>
 8001a76:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8001a7a:	454c      	cmp	r4, r9
 8001a7c:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 8001a80:	d3f4      	bcc.n	8001a6c <nl_func_sm_array_f32+0x18>
 8001a82:	b001      	add	sp, #4
 8001a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001a88 <nl_func_tanh_array_f32>:
 8001a88:	b570      	push	{r4, r5, r6, lr}
 8001a8a:	460d      	mov	r5, r1
 8001a8c:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8001a90:	42b5      	cmp	r5, r6
 8001a92:	4604      	mov	r4, r0
 8001a94:	f080 800a 	bcs.w	8001aac <nl_func_tanh_array_f32+0x24>
 8001a98:	ed95 0a00 	vldr	s0, [r5]
 8001a9c:	f00a f894 	bl	800bbc8 <tanhf>
 8001aa0:	ed84 0a00 	vstr	s0, [r4]
 8001aa4:	1d24      	adds	r4, r4, #4
 8001aa6:	1d2d      	adds	r5, r5, #4
 8001aa8:	42b5      	cmp	r5, r6
 8001aaa:	d3f5      	bcc.n	8001a98 <nl_func_tanh_array_f32+0x10>
 8001aac:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ab0 <nl_func_sigmoid_array_f32>:
 8001ab0:	b570      	push	{r4, r5, r6, lr}
 8001ab2:	460d      	mov	r5, r1
 8001ab4:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8001ab8:	42b5      	cmp	r5, r6
 8001aba:	4604      	mov	r4, r0
 8001abc:	f080 8014 	bcs.w	8001ae8 <nl_func_sigmoid_array_f32+0x38>
 8001ac0:	ed95 0a00 	vldr	s0, [r5]
 8001ac4:	eeb1 0a40 	vneg.f32	s0, s0
 8001ac8:	f00a fb22 	bl	800c110 <expf>
 8001acc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001ad0:	ee70 0a20 	vadd.f32	s1, s0, s1
 8001ad4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001ad8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001adc:	ed84 0a00 	vstr	s0, [r4]
 8001ae0:	1d24      	adds	r4, r4, #4
 8001ae2:	1d2d      	adds	r5, r5, #4
 8001ae4:	42b5      	cmp	r5, r6
 8001ae6:	d3eb      	bcc.n	8001ac0 <nl_func_sigmoid_array_f32+0x10>
 8001ae8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001aec <nl_func_sign_array_f32>:
 8001aec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001af0:	4291      	cmp	r1, r2
 8001af2:	d216      	bcs.n	8001b22 <nl_func_sign_array_f32+0x36>
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
 8001af8:	ed91 0a00 	vldr	s0, [r1]
 8001afc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	bfcc      	ite	gt
 8001b06:	ed9f 0ac6 	vldrgt	s0, [pc, #792]	; 8001e20 <.text_16>
 8001b0a:	ee00 3a10 	vmovle	s0, r3
 8001b0e:	1d09      	adds	r1, r1, #4
 8001b10:	4684      	mov	ip, r0
 8001b12:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001b16:	4291      	cmp	r1, r2
 8001b18:	f10c 0004 	add.w	r0, ip, #4
 8001b1c:	ed8c 0a00 	vstr	s0, [ip]
 8001b20:	d3ea      	bcc.n	8001af8 <nl_func_sign_array_f32+0xc>
 8001b22:	4770      	bx	lr

08001b24 <nl_func_clip_array_f32>:
 8001b24:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001b28:	4291      	cmp	r1, r2
 8001b2a:	d216      	bcs.n	8001b5a <nl_func_clip_array_f32+0x36>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	ed91 1a00 	vldr	s2, [r1]
 8001b32:	1d18      	adds	r0, r3, #4
 8001b34:	eeb4 0a41 	vcmp.f32	s0, s2
 8001b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3c:	bf58      	it	pl
 8001b3e:	eeb0 1a40 	vmovpl.f32	s2, s0
 8001b42:	eeb4 1a60 	vcmp.f32	s2, s1
 8001b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4a:	bf58      	it	pl
 8001b4c:	eeb0 1a60 	vmovpl.f32	s2, s1
 8001b50:	1d09      	adds	r1, r1, #4
 8001b52:	4291      	cmp	r1, r2
 8001b54:	ed83 1a00 	vstr	s2, [r3]
 8001b58:	d3e8      	bcc.n	8001b2c <nl_func_clip_array_f32+0x8>
 8001b5a:	4770      	bx	lr

08001b5c <nl_func_relu_array_f32>:
 8001b5c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001b60:	4291      	cmp	r1, r2
 8001b62:	d20f      	bcs.n	8001b84 <nl_func_relu_array_f32+0x28>
 8001b64:	4603      	mov	r3, r0
 8001b66:	ed91 0a00 	vldr	s0, [r1]
 8001b6a:	1d18      	adds	r0, r3, #4
 8001b6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	bfd8      	it	le
 8001b76:	ed9f 0a37 	vldrle	s0, [pc, #220]	; 8001c54 <.text_11>
 8001b7a:	1d09      	adds	r1, r1, #4
 8001b7c:	4291      	cmp	r1, r2
 8001b7e:	ed83 0a00 	vstr	s0, [r3]
 8001b82:	d3ef      	bcc.n	8001b64 <nl_func_relu_array_f32+0x8>
 8001b84:	4770      	bx	lr
	...

08001b88 <nl_func_relu6_array_f32>:
 8001b88:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001b8c:	4291      	cmp	r1, r2
 8001b8e:	d21a      	bcs.n	8001bc6 <nl_func_relu6_array_f32+0x3e>
 8001b90:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001b94:	4603      	mov	r3, r0
 8001b96:	edd1 0a00 	vldr	s1, [r1]
 8001b9a:	1d18      	adds	r0, r3, #4
 8001b9c:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba4:	dd08      	ble.n	8001bb8 <nl_func_relu6_array_f32+0x30>
 8001ba6:	eef4 0a40 	vcmp.f32	s1, s0
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	bf58      	it	pl
 8001bb0:	eef0 0a40 	vmovpl.f32	s1, s0
 8001bb4:	e002      	b.n	8001bbc <nl_func_relu6_array_f32+0x34>
 8001bb6:	bf00      	nop
 8001bb8:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001c54 <.text_11>
 8001bbc:	1d09      	adds	r1, r1, #4
 8001bbe:	4291      	cmp	r1, r2
 8001bc0:	edc3 0a00 	vstr	s1, [r3]
 8001bc4:	d3e6      	bcc.n	8001b94 <nl_func_relu6_array_f32+0xc>
 8001bc6:	4770      	bx	lr

08001bc8 <nl_func_selu_array_f32>:
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	b081      	sub	sp, #4
 8001bcc:	460d      	mov	r5, r1
 8001bce:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8001bd2:	ed2d 8b04 	vpush	{d8-d9}
 8001bd6:	42b5      	cmp	r5, r6
 8001bd8:	4604      	mov	r4, r0
 8001bda:	eef0 8a40 	vmov.f32	s17, s0
 8001bde:	eeb0 8a60 	vmov.f32	s16, s1
 8001be2:	d232      	bcs.n	8001c4a <nl_func_selu_array_f32+0x82>
 8001be4:	4627      	mov	r7, r4
 8001be6:	ed95 9a00 	vldr	s18, [r5]
 8001bea:	1d3c      	adds	r4, r7, #4
 8001bec:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	bf4c      	ite	mi
 8001bf6:	eddf 9a17 	vldrmi	s19, [pc, #92]	; 8001c54 <.text_11>
 8001bfa:	eef0 9a49 	vmovpl.f32	s19, s18
 8001bfe:	eeb0 0a49 	vmov.f32	s0, s18
 8001c02:	f00a fa85 	bl	800c110 <expf>
 8001c06:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001c0a:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001c0e:	ee20 0a28 	vmul.f32	s0, s0, s17
 8001c12:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	dd05      	ble.n	8001c28 <nl_func_selu_array_f32+0x60>
 8001c1c:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8001c54 <.text_11>
 8001c20:	ee79 9a81 	vadd.f32	s19, s19, s2
 8001c24:	e00a      	b.n	8001c3c <nl_func_selu_array_f32+0x74>
 8001c26:	bf00      	nop
 8001c28:	eeb0 0a49 	vmov.f32	s0, s18
 8001c2c:	f00a fa70 	bl	800c110 <expf>
 8001c30:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001c34:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001c38:	ee40 9a28 	vmla.f32	s19, s0, s17
 8001c3c:	1d2d      	adds	r5, r5, #4
 8001c3e:	ee28 0a29 	vmul.f32	s0, s16, s19
 8001c42:	42b5      	cmp	r5, r6
 8001c44:	ed87 0a00 	vstr	s0, [r7]
 8001c48:	d3cc      	bcc.n	8001be4 <nl_func_selu_array_f32+0x1c>
 8001c4a:	ecbd 8b04 	vpop	{d8-d9}
 8001c4e:	b001      	add	sp, #4
 8001c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001c54 <.text_11>:
 8001c54:	00000000 	.word	0x00000000

08001c58 <nl_func_prelu_array_f32>:
 8001c58:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001c5c:	4299      	cmp	r1, r3
 8001c5e:	d220      	bcs.n	8001ca2 <nl_func_prelu_array_f32+0x4a>
 8001c60:	ed91 0a00 	vldr	s0, [r1]
 8001c64:	ed92 1a00 	vldr	s2, [r2]
 8001c68:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	bf4c      	ite	mi
 8001c72:	eddf 0aa5 	vldrmi	s1, [pc, #660]	; 8001f08 <.text_19>
 8001c76:	eef0 0a40 	vmovpl.f32	s1, s0
 8001c7a:	eeb1 0a40 	vneg.f32	s0, s0
 8001c7e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c86:	bf48      	it	mi
 8001c88:	ed9f 0a9f 	vldrmi	s0, [pc, #636]	; 8001f08 <.text_19>
 8001c8c:	1d09      	adds	r1, r1, #4
 8001c8e:	1d12      	adds	r2, r2, #4
 8001c90:	4684      	mov	ip, r0
 8001c92:	ee41 0a40 	vmls.f32	s1, s2, s0
 8001c96:	4299      	cmp	r1, r3
 8001c98:	f10c 0004 	add.w	r0, ip, #4
 8001c9c:	edcc 0a00 	vstr	s1, [ip]
 8001ca0:	d3de      	bcc.n	8001c60 <nl_func_prelu_array_f32+0x8>
 8001ca2:	4770      	bx	lr

08001ca4 <forward_relu>:
 8001ca4:	6940      	ldr	r0, [r0, #20]
 8001ca6:	6803      	ldr	r3, [r0, #0]
 8001ca8:	6819      	ldr	r1, [r3, #0]
 8001caa:	f8d1 c000 	ldr.w	ip, [r1]
 8001cae:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001cb2:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001cb6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001cba:	4342      	muls	r2, r0
 8001cbc:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001cc0:	f8dc c000 	ldr.w	ip, [ip]
 8001cc4:	434a      	muls	r2, r1
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	680b      	ldr	r3, [r1, #0]
 8001cca:	4342      	muls	r2, r0
 8001ccc:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001cd0:	f8d3 c000 	ldr.w	ip, [r3]
 8001cd4:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001cd8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001cdc:	4290      	cmp	r0, r2
 8001cde:	d20f      	bcs.n	8001d00 <forward_relu+0x5c>
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	ed90 0a00 	vldr	s0, [r0]
 8001ce6:	1d19      	adds	r1, r3, #4
 8001ce8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf0:	bfd8      	it	le
 8001cf2:	ed9f 0a85 	vldrle	s0, [pc, #532]	; 8001f08 <.text_19>
 8001cf6:	1d00      	adds	r0, r0, #4
 8001cf8:	4290      	cmp	r0, r2
 8001cfa:	ed83 0a00 	vstr	s0, [r3]
 8001cfe:	d3ef      	bcc.n	8001ce0 <forward_relu+0x3c>
 8001d00:	4770      	bx	lr
	...

08001d04 <forward_relu6>:
 8001d04:	6940      	ldr	r0, [r0, #20]
 8001d06:	6803      	ldr	r3, [r0, #0]
 8001d08:	6819      	ldr	r1, [r3, #0]
 8001d0a:	f8d1 c000 	ldr.w	ip, [r1]
 8001d0e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001d12:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001d16:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001d1a:	4342      	muls	r2, r0
 8001d1c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001d20:	f8dc c000 	ldr.w	ip, [ip]
 8001d24:	434a      	muls	r2, r1
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	680b      	ldr	r3, [r1, #0]
 8001d2a:	4342      	muls	r2, r0
 8001d2c:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001d30:	f8d3 c000 	ldr.w	ip, [r3]
 8001d34:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001d38:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001d3c:	4290      	cmp	r0, r2
 8001d3e:	d21a      	bcs.n	8001d76 <forward_relu6+0x72>
 8001d40:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001d44:	460b      	mov	r3, r1
 8001d46:	edd0 0a00 	vldr	s1, [r0]
 8001d4a:	1d19      	adds	r1, r3, #4
 8001d4c:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d54:	dd08      	ble.n	8001d68 <forward_relu6+0x64>
 8001d56:	eef4 0a40 	vcmp.f32	s1, s0
 8001d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5e:	bf58      	it	pl
 8001d60:	eef0 0a40 	vmovpl.f32	s1, s0
 8001d64:	e002      	b.n	8001d6c <forward_relu6+0x68>
 8001d66:	bf00      	nop
 8001d68:	eddf 0a67 	vldr	s1, [pc, #412]	; 8001f08 <.text_19>
 8001d6c:	1d00      	adds	r0, r0, #4
 8001d6e:	4290      	cmp	r0, r2
 8001d70:	edc3 0a00 	vstr	s1, [r3]
 8001d74:	d3e6      	bcc.n	8001d44 <forward_relu6+0x40>
 8001d76:	4770      	bx	lr

08001d78 <forward_selu>:
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	b081      	sub	sp, #4
 8001d7c:	ed2d 8b04 	vpush	{d8-d9}
 8001d80:	6941      	ldr	r1, [r0, #20]
 8001d82:	ed90 8a07 	vldr	s16, [r0, #28]
 8001d86:	680d      	ldr	r5, [r1, #0]
 8001d88:	edd0 8a06 	vldr	s17, [r0, #24]
 8001d8c:	682a      	ldr	r2, [r5, #0]
 8001d8e:	6814      	ldr	r4, [r2, #0]
 8001d90:	6820      	ldr	r0, [r4, #0]
 8001d92:	6863      	ldr	r3, [r4, #4]
 8001d94:	68a1      	ldr	r1, [r4, #8]
 8001d96:	68e2      	ldr	r2, [r4, #12]
 8001d98:	434b      	muls	r3, r1
 8001d9a:	6921      	ldr	r1, [r4, #16]
 8001d9c:	6884      	ldr	r4, [r0, #8]
 8001d9e:	6868      	ldr	r0, [r5, #4]
 8001da0:	4353      	muls	r3, r2
 8001da2:	434b      	muls	r3, r1
 8001da4:	6801      	ldr	r1, [r0, #0]
 8001da6:	680a      	ldr	r2, [r1, #0]
 8001da8:	6895      	ldr	r5, [r2, #8]
 8001daa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8001dae:	42b4      	cmp	r4, r6
 8001db0:	d231      	bcs.n	8001e16 <forward_selu+0x9e>
 8001db2:	462f      	mov	r7, r5
 8001db4:	ed94 9a00 	vldr	s18, [r4]
 8001db8:	1d3d      	adds	r5, r7, #4
 8001dba:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	bf4c      	ite	mi
 8001dc4:	eddf 9a50 	vldrmi	s19, [pc, #320]	; 8001f08 <.text_19>
 8001dc8:	eef0 9a49 	vmovpl.f32	s19, s18
 8001dcc:	eeb0 0a49 	vmov.f32	s0, s18
 8001dd0:	f00a f99e 	bl	800c110 <expf>
 8001dd4:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001dd8:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001ddc:	ee20 0a28 	vmul.f32	s0, s0, s17
 8001de0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	dd04      	ble.n	8001df4 <forward_selu+0x7c>
 8001dea:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8001f08 <.text_19>
 8001dee:	ee79 9a81 	vadd.f32	s19, s19, s2
 8001df2:	e009      	b.n	8001e08 <forward_selu+0x90>
 8001df4:	eeb0 0a49 	vmov.f32	s0, s18
 8001df8:	f00a f98a 	bl	800c110 <expf>
 8001dfc:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001e00:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001e04:	ee40 9a28 	vmla.f32	s19, s0, s17
 8001e08:	1d24      	adds	r4, r4, #4
 8001e0a:	ee28 0a29 	vmul.f32	s0, s16, s19
 8001e0e:	42b4      	cmp	r4, r6
 8001e10:	ed87 0a00 	vstr	s0, [r7]
 8001e14:	d3cd      	bcc.n	8001db2 <forward_selu+0x3a>
 8001e16:	ecbd 8b04 	vpop	{d8-d9}
 8001e1a:	b001      	add	sp, #4
 8001e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e20 <.text_16>:
 8001e20:	00000001 	.word	0x00000001

08001e24 <forward_prelu>:
 8001e24:	b430      	push	{r4, r5}
 8001e26:	6941      	ldr	r1, [r0, #20]
 8001e28:	680c      	ldr	r4, [r1, #0]
 8001e2a:	6822      	ldr	r2, [r4, #0]
 8001e2c:	6815      	ldr	r5, [r2, #0]
 8001e2e:	686b      	ldr	r3, [r5, #4]
 8001e30:	68a9      	ldr	r1, [r5, #8]
 8001e32:	68ea      	ldr	r2, [r5, #12]
 8001e34:	6980      	ldr	r0, [r0, #24]
 8001e36:	434b      	muls	r3, r1
 8001e38:	6929      	ldr	r1, [r5, #16]
 8001e3a:	682d      	ldr	r5, [r5, #0]
 8001e3c:	4353      	muls	r3, r2
 8001e3e:	6862      	ldr	r2, [r4, #4]
 8001e40:	6814      	ldr	r4, [r2, #0]
 8001e42:	434b      	muls	r3, r1
 8001e44:	68a9      	ldr	r1, [r5, #8]
 8001e46:	6825      	ldr	r5, [r4, #0]
 8001e48:	6804      	ldr	r4, [r0, #0]
 8001e4a:	68aa      	ldr	r2, [r5, #8]
 8001e4c:	68a0      	ldr	r0, [r4, #8]
 8001e4e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001e52:	4299      	cmp	r1, r3
 8001e54:	d21f      	bcs.n	8001e96 <forward_prelu+0x72>
 8001e56:	4614      	mov	r4, r2
 8001e58:	ed91 0a00 	vldr	s0, [r1]
 8001e5c:	1d22      	adds	r2, r4, #4
 8001e5e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e66:	bf4c      	ite	mi
 8001e68:	eddf 0a27 	vldrmi	s1, [pc, #156]	; 8001f08 <.text_19>
 8001e6c:	eef0 0a40 	vmovpl.f32	s1, s0
 8001e70:	eeb1 0a40 	vneg.f32	s0, s0
 8001e74:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7c:	bf48      	it	mi
 8001e7e:	ed9f 0a22 	vldrmi	s0, [pc, #136]	; 8001f08 <.text_19>
 8001e82:	ed90 1a00 	vldr	s2, [r0]
 8001e86:	1d09      	adds	r1, r1, #4
 8001e88:	1d00      	adds	r0, r0, #4
 8001e8a:	ee41 0a40 	vmls.f32	s1, s2, s0
 8001e8e:	4299      	cmp	r1, r3
 8001e90:	edc4 0a00 	vstr	s1, [r4]
 8001e94:	d3df      	bcc.n	8001e56 <forward_prelu+0x32>
 8001e96:	bc30      	pop	{r4, r5}
 8001e98:	4770      	bx	lr
	...

08001e9c <forward_sign>:
 8001e9c:	6940      	ldr	r0, [r0, #20]
 8001e9e:	6803      	ldr	r3, [r0, #0]
 8001ea0:	6819      	ldr	r1, [r3, #0]
 8001ea2:	f8d1 c000 	ldr.w	ip, [r1]
 8001ea6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001eaa:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001eae:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001eb2:	4342      	muls	r2, r0
 8001eb4:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001eb8:	f8dc c000 	ldr.w	ip, [ip]
 8001ebc:	434a      	muls	r2, r1
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	680b      	ldr	r3, [r1, #0]
 8001ec2:	4342      	muls	r2, r0
 8001ec4:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001ec8:	f8d3 c000 	ldr.w	ip, [r3]
 8001ecc:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001ed0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001ed4:	4290      	cmp	r0, r2
 8001ed6:	d216      	bcs.n	8001f06 <forward_sign+0x6a>
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8001edc:	ed90 0a00 	vldr	s0, [r0]
 8001ee0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee8:	bfcc      	ite	gt
 8001eea:	ed9f 0a08 	vldrgt	s0, [pc, #32]	; 8001f0c <.text_20>
 8001eee:	ee00 3a10 	vmovle	s0, r3
 8001ef2:	1d00      	adds	r0, r0, #4
 8001ef4:	468c      	mov	ip, r1
 8001ef6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001efa:	4290      	cmp	r0, r2
 8001efc:	f10c 0104 	add.w	r1, ip, #4
 8001f00:	ed8c 0a00 	vstr	s0, [ip]
 8001f04:	d3ea      	bcc.n	8001edc <forward_sign+0x40>
 8001f06:	4770      	bx	lr

08001f08 <.text_19>:
 8001f08:	00000000 	.word	0x00000000

08001f0c <.text_20>:
 8001f0c:	00000001 	.word	0x00000001

08001f10 <forward_clip>:
 8001f10:	b430      	push	{r4, r5}
 8001f12:	6941      	ldr	r1, [r0, #20]
 8001f14:	ed90 0a07 	vldr	s0, [r0, #28]
 8001f18:	680c      	ldr	r4, [r1, #0]
 8001f1a:	edd0 0a06 	vldr	s1, [r0, #24]
 8001f1e:	6822      	ldr	r2, [r4, #0]
 8001f20:	6815      	ldr	r5, [r2, #0]
 8001f22:	686b      	ldr	r3, [r5, #4]
 8001f24:	68a9      	ldr	r1, [r5, #8]
 8001f26:	68ea      	ldr	r2, [r5, #12]
 8001f28:	6828      	ldr	r0, [r5, #0]
 8001f2a:	6880      	ldr	r0, [r0, #8]
 8001f2c:	434b      	muls	r3, r1
 8001f2e:	6929      	ldr	r1, [r5, #16]
 8001f30:	4353      	muls	r3, r2
 8001f32:	434b      	muls	r3, r1
 8001f34:	6861      	ldr	r1, [r4, #4]
 8001f36:	680a      	ldr	r2, [r1, #0]
 8001f38:	6814      	ldr	r4, [r2, #0]
 8001f3a:	68a1      	ldr	r1, [r4, #8]
 8001f3c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8001f40:	4290      	cmp	r0, r2
 8001f42:	d216      	bcs.n	8001f72 <forward_clip+0x62>
 8001f44:	460b      	mov	r3, r1
 8001f46:	ed90 1a00 	vldr	s2, [r0]
 8001f4a:	1d19      	adds	r1, r3, #4
 8001f4c:	eef4 0a41 	vcmp.f32	s1, s2
 8001f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f54:	bf58      	it	pl
 8001f56:	eeb0 1a60 	vmovpl.f32	s2, s1
 8001f5a:	eeb4 1a40 	vcmp.f32	s2, s0
 8001f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f62:	bf58      	it	pl
 8001f64:	eeb0 1a40 	vmovpl.f32	s2, s0
 8001f68:	1d00      	adds	r0, r0, #4
 8001f6a:	4290      	cmp	r0, r2
 8001f6c:	ed83 1a00 	vstr	s2, [r3]
 8001f70:	d3e8      	bcc.n	8001f44 <forward_clip+0x34>
 8001f72:	bc30      	pop	{r4, r5}
 8001f74:	4770      	bx	lr
	...

08001f78 <forward_sigmoid>:
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	6940      	ldr	r0, [r0, #20]
 8001f7c:	6803      	ldr	r3, [r0, #0]
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	680c      	ldr	r4, [r1, #0]
 8001f82:	6862      	ldr	r2, [r4, #4]
 8001f84:	68a0      	ldr	r0, [r4, #8]
 8001f86:	68e1      	ldr	r1, [r4, #12]
 8001f88:	4342      	muls	r2, r0
 8001f8a:	6920      	ldr	r0, [r4, #16]
 8001f8c:	6824      	ldr	r4, [r4, #0]
 8001f8e:	68a4      	ldr	r4, [r4, #8]
 8001f90:	434a      	muls	r2, r1
 8001f92:	4342      	muls	r2, r0
 8001f94:	6858      	ldr	r0, [r3, #4]
 8001f96:	6801      	ldr	r1, [r0, #0]
 8001f98:	680b      	ldr	r3, [r1, #0]
 8001f9a:	689d      	ldr	r5, [r3, #8]
 8001f9c:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8001fa0:	42b4      	cmp	r4, r6
 8001fa2:	d213      	bcs.n	8001fcc <forward_sigmoid+0x54>
 8001fa4:	ed94 0a00 	vldr	s0, [r4]
 8001fa8:	eeb1 0a40 	vneg.f32	s0, s0
 8001fac:	f00a f8b0 	bl	800c110 <expf>
 8001fb0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001fb4:	ee70 0a20 	vadd.f32	s1, s0, s1
 8001fb8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001fbc:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001fc0:	ed85 0a00 	vstr	s0, [r5]
 8001fc4:	1d2d      	adds	r5, r5, #4
 8001fc6:	1d24      	adds	r4, r4, #4
 8001fc8:	42b4      	cmp	r4, r6
 8001fca:	d3eb      	bcc.n	8001fa4 <forward_sigmoid+0x2c>
 8001fcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001fd0 <forward_tanh>:
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	6940      	ldr	r0, [r0, #20]
 8001fd4:	6803      	ldr	r3, [r0, #0]
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	680c      	ldr	r4, [r1, #0]
 8001fda:	6862      	ldr	r2, [r4, #4]
 8001fdc:	68a0      	ldr	r0, [r4, #8]
 8001fde:	68e1      	ldr	r1, [r4, #12]
 8001fe0:	4342      	muls	r2, r0
 8001fe2:	6920      	ldr	r0, [r4, #16]
 8001fe4:	6824      	ldr	r4, [r4, #0]
 8001fe6:	68a4      	ldr	r4, [r4, #8]
 8001fe8:	434a      	muls	r2, r1
 8001fea:	4342      	muls	r2, r0
 8001fec:	6858      	ldr	r0, [r3, #4]
 8001fee:	6801      	ldr	r1, [r0, #0]
 8001ff0:	680b      	ldr	r3, [r1, #0]
 8001ff2:	689d      	ldr	r5, [r3, #8]
 8001ff4:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8001ff8:	42b4      	cmp	r4, r6
 8001ffa:	d209      	bcs.n	8002010 <forward_tanh+0x40>
 8001ffc:	ed94 0a00 	vldr	s0, [r4]
 8002000:	f009 fde2 	bl	800bbc8 <tanhf>
 8002004:	ed85 0a00 	vstr	s0, [r5]
 8002008:	1d2d      	adds	r5, r5, #4
 800200a:	1d24      	adds	r4, r4, #4
 800200c:	42b4      	cmp	r4, r6
 800200e:	d3f5      	bcc.n	8001ffc <forward_tanh+0x2c>
 8002010:	bd70      	pop	{r4, r5, r6, pc}

08002012 <forward_sm>:
 8002012:	b530      	push	{r4, r5, lr}
 8002014:	b083      	sub	sp, #12
 8002016:	6940      	ldr	r0, [r0, #20]
 8002018:	6804      	ldr	r4, [r0, #0]
 800201a:	6821      	ldr	r1, [r4, #0]
 800201c:	680d      	ldr	r5, [r1, #0]
 800201e:	68aa      	ldr	r2, [r5, #8]
 8002020:	9201      	str	r2, [sp, #4]
 8002022:	9200      	str	r2, [sp, #0]
 8002024:	4613      	mov	r3, r2
 8002026:	6868      	ldr	r0, [r5, #4]
 8002028:	68e9      	ldr	r1, [r5, #12]
 800202a:	4342      	muls	r2, r0
 800202c:	6928      	ldr	r0, [r5, #16]
 800202e:	682d      	ldr	r5, [r5, #0]
 8002030:	434a      	muls	r2, r1
 8002032:	4342      	muls	r2, r0
 8002034:	6860      	ldr	r0, [r4, #4]
 8002036:	6804      	ldr	r4, [r0, #0]
 8002038:	68a9      	ldr	r1, [r5, #8]
 800203a:	6825      	ldr	r5, [r4, #0]
 800203c:	68a8      	ldr	r0, [r5, #8]
 800203e:	f7ff fd09 	bl	8001a54 <nl_func_sm_array_f32>
 8002042:	b003      	add	sp, #12
 8002044:	bd30      	pop	{r4, r5, pc}
	...

08002048 <pool_func_mp_array_f32>:
 8002048:	b470      	push	{r4, r5, r6}
 800204a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800204e:	42a1      	cmp	r1, r4
 8002050:	d257      	bcs.n	8002102 <pool_func_mp_array_f32+0xba>
 8002052:	2b00      	cmp	r3, #0
 8002054:	d051      	beq.n	80020fa <pool_func_mp_array_f32+0xb2>
 8002056:	f013 0203 	ands.w	r2, r3, #3
 800205a:	460d      	mov	r5, r1
 800205c:	4606      	mov	r6, r0
 800205e:	d011      	beq.n	8002084 <pool_func_mp_array_f32+0x3c>
 8002060:	ed96 0a00 	vldr	s0, [r6]
 8002064:	edd5 0a00 	vldr	s1, [r5]
 8002068:	eef4 0a40 	vcmp.f32	s1, s0
 800206c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002070:	bf58      	it	pl
 8002072:	eeb0 0a60 	vmovpl.f32	s0, s1
 8002076:	ed86 0a00 	vstr	s0, [r6]
 800207a:	1e52      	subs	r2, r2, #1
 800207c:	1d36      	adds	r6, r6, #4
 800207e:	1d2d      	adds	r5, r5, #4
 8002080:	2a00      	cmp	r2, #0
 8002082:	d1ed      	bne.n	8002060 <pool_func_mp_array_f32+0x18>
 8002084:	089a      	lsrs	r2, r3, #2
 8002086:	d038      	beq.n	80020fa <pool_func_mp_array_f32+0xb2>
 8002088:	edd5 0a00 	vldr	s1, [r5]
 800208c:	edd6 1a00 	vldr	s3, [r6]
 8002090:	eef4 0a61 	vcmp.f32	s1, s3
 8002094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002098:	bf48      	it	mi
 800209a:	eef0 0a61 	vmovmi.f32	s1, s3
 800209e:	edc6 0a00 	vstr	s1, [r6]
 80020a2:	edd5 0a01 	vldr	s1, [r5, #4]
 80020a6:	edd6 1a01 	vldr	s3, [r6, #4]
 80020aa:	ed96 0a02 	vldr	s0, [r6, #8]
 80020ae:	eef4 0a61 	vcmp.f32	s1, s3
 80020b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b6:	bf48      	it	mi
 80020b8:	eef0 0a61 	vmovmi.f32	s1, s3
 80020bc:	edc6 0a01 	vstr	s1, [r6, #4]
 80020c0:	ed95 1a02 	vldr	s2, [r5, #8]
 80020c4:	edd6 1a03 	vldr	s3, [r6, #12]
 80020c8:	eeb4 1a40 	vcmp.f32	s2, s0
 80020cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d0:	bf48      	it	mi
 80020d2:	eeb0 1a40 	vmovmi.f32	s2, s0
 80020d6:	ed86 1a02 	vstr	s2, [r6, #8]
 80020da:	edd5 0a03 	vldr	s1, [r5, #12]
 80020de:	eef4 0a61 	vcmp.f32	s1, s3
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	bf58      	it	pl
 80020e8:	eef0 1a60 	vmovpl.f32	s3, s1
 80020ec:	edc6 1a03 	vstr	s3, [r6, #12]
 80020f0:	1e52      	subs	r2, r2, #1
 80020f2:	3610      	adds	r6, #16
 80020f4:	3510      	adds	r5, #16
 80020f6:	2a00      	cmp	r2, #0
 80020f8:	d1c6      	bne.n	8002088 <pool_func_mp_array_f32+0x40>
 80020fa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80020fe:	42a1      	cmp	r1, r4
 8002100:	d3a7      	bcc.n	8002052 <pool_func_mp_array_f32+0xa>
 8002102:	bc70      	pop	{r4, r5, r6}
 8002104:	4770      	bx	lr
	...

08002108 <pool_func_ap_array_f32>:
 8002108:	b470      	push	{r4, r5, r6}
 800210a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800210e:	42a1      	cmp	r1, r4
 8002110:	d24f      	bcs.n	80021b2 <pool_func_ap_array_f32+0xaa>
 8002112:	2b00      	cmp	r3, #0
 8002114:	d049      	beq.n	80021aa <pool_func_ap_array_f32+0xa2>
 8002116:	f013 0203 	ands.w	r2, r3, #3
 800211a:	460d      	mov	r5, r1
 800211c:	4606      	mov	r6, r0
 800211e:	d00e      	beq.n	800213e <pool_func_ap_array_f32+0x36>
 8002120:	ed95 0a00 	vldr	s0, [r5]
 8002124:	4288      	cmp	r0, r1
 8002126:	bf1c      	itt	ne
 8002128:	edd6 0a00 	vldrne	s1, [r6]
 800212c:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8002130:	ed86 0a00 	vstr	s0, [r6]
 8002134:	1e52      	subs	r2, r2, #1
 8002136:	1d36      	adds	r6, r6, #4
 8002138:	1d2d      	adds	r5, r5, #4
 800213a:	2a00      	cmp	r2, #0
 800213c:	d1f0      	bne.n	8002120 <pool_func_ap_array_f32+0x18>
 800213e:	089a      	lsrs	r2, r3, #2
 8002140:	d033      	beq.n	80021aa <pool_func_ap_array_f32+0xa2>
 8002142:	4288      	cmp	r0, r1
 8002144:	edd5 1a00 	vldr	s3, [r5]
 8002148:	d10c      	bne.n	8002164 <pool_func_ap_array_f32+0x5c>
 800214a:	edc6 1a00 	vstr	s3, [r6]
 800214e:	ed95 0a01 	vldr	s0, [r5, #4]
 8002152:	ed86 0a01 	vstr	s0, [r6, #4]
 8002156:	edd5 1a02 	vldr	s3, [r5, #8]
 800215a:	edc6 1a02 	vstr	s3, [r6, #8]
 800215e:	edd5 1a03 	vldr	s3, [r5, #12]
 8002162:	e01b      	b.n	800219c <pool_func_ap_array_f32+0x94>
 8002164:	edd6 0a00 	vldr	s1, [r6]
 8002168:	ee30 0aa1 	vadd.f32	s0, s1, s3
 800216c:	ed86 0a00 	vstr	s0, [r6]
 8002170:	ed96 1a01 	vldr	s2, [r6, #4]
 8002174:	ed95 0a01 	vldr	s0, [r5, #4]
 8002178:	edd6 1a02 	vldr	s3, [r6, #8]
 800217c:	ee31 0a00 	vadd.f32	s0, s2, s0
 8002180:	ed86 0a01 	vstr	s0, [r6, #4]
 8002184:	edd5 0a02 	vldr	s1, [r5, #8]
 8002188:	ee31 0aa0 	vadd.f32	s0, s3, s1
 800218c:	ed86 0a02 	vstr	s0, [r6, #8]
 8002190:	ed96 0a03 	vldr	s0, [r6, #12]
 8002194:	ed95 1a03 	vldr	s2, [r5, #12]
 8002198:	ee70 1a01 	vadd.f32	s3, s0, s2
 800219c:	edc6 1a03 	vstr	s3, [r6, #12]
 80021a0:	1e52      	subs	r2, r2, #1
 80021a2:	3610      	adds	r6, #16
 80021a4:	3510      	adds	r5, #16
 80021a6:	2a00      	cmp	r2, #0
 80021a8:	d1cb      	bne.n	8002142 <pool_func_ap_array_f32+0x3a>
 80021aa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80021ae:	42a1      	cmp	r1, r4
 80021b0:	d3af      	bcc.n	8002112 <pool_func_ap_array_f32+0xa>
 80021b2:	9903      	ldr	r1, [sp, #12]
 80021b4:	b3a1      	cbz	r1, 8002220 <pool_func_ap_array_f32+0x118>
 80021b6:	ee00 1a10 	vmov	s0, r1
 80021ba:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80021be:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80021c2:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80021c6:	b35b      	cbz	r3, 8002220 <pool_func_ap_array_f32+0x118>
 80021c8:	f013 0103 	ands.w	r1, r3, #3
 80021cc:	f000 800a 	beq.w	80021e4 <pool_func_ap_array_f32+0xdc>
 80021d0:	edd0 0a00 	vldr	s1, [r0]
 80021d4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80021d8:	edc0 0a00 	vstr	s1, [r0]
 80021dc:	1e49      	subs	r1, r1, #1
 80021de:	f100 0004 	add.w	r0, r0, #4
 80021e2:	d1f5      	bne.n	80021d0 <pool_func_ap_array_f32+0xc8>
 80021e4:	089b      	lsrs	r3, r3, #2
 80021e6:	d01b      	beq.n	8002220 <pool_func_ap_array_f32+0x118>
 80021e8:	edd0 0a00 	vldr	s1, [r0]
 80021ec:	ee60 0a80 	vmul.f32	s1, s1, s0
 80021f0:	edc0 0a00 	vstr	s1, [r0]
 80021f4:	1e5b      	subs	r3, r3, #1
 80021f6:	ed90 1a01 	vldr	s2, [r0, #4]
 80021fa:	edd0 0a02 	vldr	s1, [r0, #8]
 80021fe:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002202:	ed80 1a01 	vstr	s2, [r0, #4]
 8002206:	ee60 0a80 	vmul.f32	s1, s1, s0
 800220a:	ed90 1a03 	vldr	s2, [r0, #12]
 800220e:	edc0 0a02 	vstr	s1, [r0, #8]
 8002212:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002216:	ed80 1a03 	vstr	s2, [r0, #12]
 800221a:	f100 0010 	add.w	r0, r0, #16
 800221e:	d1e3      	bne.n	80021e8 <pool_func_ap_array_f32+0xe0>
 8002220:	bc70      	pop	{r4, r5, r6}
 8002222:	4770      	bx	lr

08002224 <forward_mp>:
 8002224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002228:	4603      	mov	r3, r0
 800222a:	b08e      	sub	sp, #56	; 0x38
 800222c:	6958      	ldr	r0, [r3, #20]
 800222e:	6800      	ldr	r0, [r0, #0]
 8002230:	6801      	ldr	r1, [r0, #0]
 8002232:	6840      	ldr	r0, [r0, #4]
 8002234:	680c      	ldr	r4, [r1, #0]
 8002236:	6807      	ldr	r7, [r0, #0]
 8002238:	6921      	ldr	r1, [r4, #16]
 800223a:	693d      	ldr	r5, [r7, #16]
 800223c:	9109      	str	r1, [sp, #36]	; 0x24
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	9208      	str	r2, [sp, #32]
 8002242:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8002246:	68a1      	ldr	r1, [r4, #8]
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	69d8      	ldr	r0, [r3, #28]
 800224c:	9007      	str	r0, [sp, #28]
 800224e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8002250:	6a18      	ldr	r0, [r3, #32]
 8002252:	960d      	str	r6, [sp, #52]	; 0x34
 8002254:	683f      	ldr	r7, [r7, #0]
 8002256:	6824      	ldr	r4, [r4, #0]
 8002258:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800225c:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 800225e:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8002260:	68a4      	ldr	r4, [r4, #8]
 8002262:	427f      	negs	r7, r7
 8002264:	2d00      	cmp	r5, #0
 8002266:	9700      	str	r7, [sp, #0]
 8002268:	f000 80d9 	beq.w	800241e <forward_mp+0x1fa>
 800226c:	9501      	str	r5, [sp, #4]
 800226e:	4276      	negs	r6, r6
 8002270:	960c      	str	r6, [sp, #48]	; 0x30
 8002272:	fb01 f508 	mul.w	r5, r1, r8
 8002276:	950b      	str	r5, [sp, #44]	; 0x2c
 8002278:	9d00      	ldr	r5, [sp, #0]
 800227a:	9b00      	ldr	r3, [sp, #0]
 800227c:	9f00      	ldr	r7, [sp, #0]
 800227e:	426d      	negs	r5, r5
 8002280:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002282:	bfcc      	ite	gt
 8002284:	2600      	movgt	r6, #0
 8002286:	9e00      	ldrle	r6, [sp, #0]
 8002288:	1aeb      	subs	r3, r5, r3
 800228a:	9d07      	ldr	r5, [sp, #28]
 800228c:	42ab      	cmp	r3, r5
 800228e:	bf88      	it	hi
 8002290:	462b      	movhi	r3, r5
 8002292:	19df      	adds	r7, r3, r7
 8002294:	9b08      	ldr	r3, [sp, #32]
 8002296:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80b7 	beq.w	800240c <forward_mp+0x1e8>
 800229e:	fb08 fa06 	mul.w	sl, r8, r6
 80022a2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80022a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80022aa:	9202      	str	r2, [sp, #8]
 80022ac:	9006      	str	r0, [sp, #24]
 80022ae:	9605      	str	r6, [sp, #20]
 80022b0:	9704      	str	r7, [sp, #16]
 80022b2:	4268      	negs	r0, r5
 80022b4:	9f03      	ldr	r7, [sp, #12]
 80022b6:	9a02      	ldr	r2, [sp, #8]
 80022b8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80022bc:	bfcc      	ite	gt
 80022be:	2000      	movgt	r0, #0
 80022c0:	4628      	movle	r0, r5
 80022c2:	1b7f      	subs	r7, r7, r5
 80022c4:	4297      	cmp	r7, r2
 80022c6:	bf88      	it	hi
 80022c8:	4617      	movhi	r7, r2
 80022ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80022cc:	197f      	adds	r7, r7, r5
 80022ce:	1a3f      	subs	r7, r7, r0
 80022d0:	1880      	adds	r0, r0, r2
 80022d2:	4348      	muls	r0, r1
 80022d4:	434f      	muls	r7, r1
 80022d6:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 80022da:	b311      	cbz	r1, 8002322 <forward_mp+0xfe>
 80022dc:	f011 0003 	ands.w	r0, r1, #3
 80022e0:	4672      	mov	r2, lr
 80022e2:	4666      	mov	r6, ip
 80022e4:	f000 8006 	beq.w	80022f4 <forward_mp+0xd0>
 80022e8:	f856 9b04 	ldr.w	r9, [r6], #4
 80022ec:	f842 9b04 	str.w	r9, [r2], #4
 80022f0:	1e40      	subs	r0, r0, #1
 80022f2:	d1f9      	bne.n	80022e8 <forward_mp+0xc4>
 80022f4:	0888      	lsrs	r0, r1, #2
 80022f6:	d014      	beq.n	8002322 <forward_mp+0xfe>
 80022f8:	ed96 0a00 	vldr	s0, [r6]
 80022fc:	ed82 0a00 	vstr	s0, [r2]
 8002300:	1e40      	subs	r0, r0, #1
 8002302:	edd6 0a01 	vldr	s1, [r6, #4]
 8002306:	edc2 0a01 	vstr	s1, [r2, #4]
 800230a:	ed96 0a02 	vldr	s0, [r6, #8]
 800230e:	ed82 0a02 	vstr	s0, [r2, #8]
 8002312:	edd6 0a03 	vldr	s1, [r6, #12]
 8002316:	edc2 0a03 	vstr	s1, [r2, #12]
 800231a:	3210      	adds	r2, #16
 800231c:	3610      	adds	r6, #16
 800231e:	2800      	cmp	r0, #0
 8002320:	d1ea      	bne.n	80022f8 <forward_mp+0xd4>
 8002322:	9805      	ldr	r0, [sp, #20]
 8002324:	9a04      	ldr	r2, [sp, #16]
 8002326:	4290      	cmp	r0, r2
 8002328:	da66      	bge.n	80023f8 <forward_mp+0x1d4>
 800232a:	4610      	mov	r0, r2
 800232c:	9a05      	ldr	r2, [sp, #20]
 800232e:	1a82      	subs	r2, r0, r2
 8002330:	46e2      	mov	sl, ip
 8002332:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 8002336:	45da      	cmp	sl, fp
 8002338:	d25a      	bcs.n	80023f0 <forward_mp+0x1cc>
 800233a:	2900      	cmp	r1, #0
 800233c:	d054      	beq.n	80023e8 <forward_mp+0x1c4>
 800233e:	f011 0003 	ands.w	r0, r1, #3
 8002342:	4656      	mov	r6, sl
 8002344:	46f1      	mov	r9, lr
 8002346:	d012      	beq.n	800236e <forward_mp+0x14a>
 8002348:	ed99 0a00 	vldr	s0, [r9]
 800234c:	edd6 0a00 	vldr	s1, [r6]
 8002350:	eef4 0a40 	vcmp.f32	s1, s0
 8002354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002358:	bf58      	it	pl
 800235a:	eeb0 0a60 	vmovpl.f32	s0, s1
 800235e:	1e40      	subs	r0, r0, #1
 8002360:	1d36      	adds	r6, r6, #4
 8002362:	ed89 0a00 	vstr	s0, [r9]
 8002366:	2800      	cmp	r0, #0
 8002368:	f109 0904 	add.w	r9, r9, #4
 800236c:	d1ec      	bne.n	8002348 <forward_mp+0x124>
 800236e:	0888      	lsrs	r0, r1, #2
 8002370:	f000 803a 	beq.w	80023e8 <forward_mp+0x1c4>
 8002374:	edd6 0a00 	vldr	s1, [r6]
 8002378:	edd9 1a00 	vldr	s3, [r9]
 800237c:	eef4 0a61 	vcmp.f32	s1, s3
 8002380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002384:	bf48      	it	mi
 8002386:	eef0 0a61 	vmovmi.f32	s1, s3
 800238a:	edc9 0a00 	vstr	s1, [r9]
 800238e:	edd6 0a01 	vldr	s1, [r6, #4]
 8002392:	edd9 1a01 	vldr	s3, [r9, #4]
 8002396:	ed99 0a02 	vldr	s0, [r9, #8]
 800239a:	eef4 0a61 	vcmp.f32	s1, s3
 800239e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a2:	bf48      	it	mi
 80023a4:	eef0 0a61 	vmovmi.f32	s1, s3
 80023a8:	edc9 0a01 	vstr	s1, [r9, #4]
 80023ac:	ed96 1a02 	vldr	s2, [r6, #8]
 80023b0:	edd9 1a03 	vldr	s3, [r9, #12]
 80023b4:	eeb4 1a40 	vcmp.f32	s2, s0
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	bf48      	it	mi
 80023be:	eeb0 1a40 	vmovmi.f32	s2, s0
 80023c2:	ed89 1a02 	vstr	s2, [r9, #8]
 80023c6:	edd6 0a03 	vldr	s1, [r6, #12]
 80023ca:	eef4 0a61 	vcmp.f32	s1, s3
 80023ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d2:	bf58      	it	pl
 80023d4:	eef0 1a60 	vmovpl.f32	s3, s1
 80023d8:	1e40      	subs	r0, r0, #1
 80023da:	3610      	adds	r6, #16
 80023dc:	edc9 1a03 	vstr	s3, [r9, #12]
 80023e0:	2800      	cmp	r0, #0
 80023e2:	f109 0910 	add.w	r9, r9, #16
 80023e6:	d1c5      	bne.n	8002374 <forward_mp+0x150>
 80023e8:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 80023ec:	45da      	cmp	sl, fp
 80023ee:	d3a4      	bcc.n	800233a <forward_mp+0x116>
 80023f0:	1e52      	subs	r2, r2, #1
 80023f2:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 80023f6:	d19b      	bne.n	8002330 <forward_mp+0x10c>
 80023f8:	9806      	ldr	r0, [sp, #24]
 80023fa:	1945      	adds	r5, r0, r5
 80023fc:	1e5b      	subs	r3, r3, #1
 80023fe:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8002402:	f47f af56 	bne.w	80022b2 <forward_mp+0x8e>
 8002406:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800240a:	9a02      	ldr	r2, [sp, #8]
 800240c:	9d00      	ldr	r5, [sp, #0]
 800240e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002410:	195d      	adds	r5, r3, r5
 8002412:	9500      	str	r5, [sp, #0]
 8002414:	9d01      	ldr	r5, [sp, #4]
 8002416:	1e6d      	subs	r5, r5, #1
 8002418:	9501      	str	r5, [sp, #4]
 800241a:	f47f af2d 	bne.w	8002278 <forward_mp+0x54>
 800241e:	b00e      	add	sp, #56	; 0x38
 8002420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002424 <forward_ap>:
 8002424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002428:	b094      	sub	sp, #80	; 0x50
 800242a:	6941      	ldr	r1, [r0, #20]
 800242c:	6809      	ldr	r1, [r1, #0]
 800242e:	680a      	ldr	r2, [r1, #0]
 8002430:	6849      	ldr	r1, [r1, #4]
 8002432:	6815      	ldr	r5, [r2, #0]
 8002434:	680e      	ldr	r6, [r1, #0]
 8002436:	692a      	ldr	r2, [r5, #16]
 8002438:	6933      	ldr	r3, [r6, #16]
 800243a:	920c      	str	r2, [sp, #48]	; 0x30
 800243c:	68f4      	ldr	r4, [r6, #12]
 800243e:	940b      	str	r4, [sp, #44]	; 0x2c
 8002440:	68ea      	ldr	r2, [r5, #12]
 8002442:	68a9      	ldr	r1, [r5, #8]
 8002444:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8002448:	69c4      	ldr	r4, [r0, #28]
 800244a:	940a      	str	r4, [sp, #40]	; 0x28
 800244c:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8002450:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8002452:	9713      	str	r7, [sp, #76]	; 0x4c
 8002454:	682d      	ldr	r5, [r5, #0]
 8002456:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8002458:	6834      	ldr	r4, [r6, #0]
 800245a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800245c:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8002460:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8002464:	4240      	negs	r0, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	9001      	str	r0, [sp, #4]
 800246a:	f000 8120 	beq.w	80026ae <forward_ap+0x28a>
 800246e:	427f      	negs	r7, r7
 8002470:	fb01 f402 	mul.w	r4, r1, r2
 8002474:	9303      	str	r3, [sp, #12]
 8002476:	9712      	str	r7, [sp, #72]	; 0x48
 8002478:	9411      	str	r4, [sp, #68]	; 0x44
 800247a:	9801      	ldr	r0, [sp, #4]
 800247c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800247e:	9e01      	ldr	r6, [sp, #4]
 8002480:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8002482:	4240      	negs	r0, r0
 8002484:	9801      	ldr	r0, [sp, #4]
 8002486:	bfcc      	ite	gt
 8002488:	2700      	movgt	r7, #0
 800248a:	9f01      	ldrle	r7, [sp, #4]
 800248c:	1a18      	subs	r0, r3, r0
 800248e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002490:	4298      	cmp	r0, r3
 8002492:	bf88      	it	hi
 8002494:	4618      	movhi	r0, r3
 8002496:	1986      	adds	r6, r0, r6
 8002498:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800249a:	2800      	cmp	r0, #0
 800249c:	f000 80fe 	beq.w	800269c <forward_ap+0x278>
 80024a0:	4605      	mov	r5, r0
 80024a2:	fb02 f007 	mul.w	r0, r2, r7
 80024a6:	9010      	str	r0, [sp, #64]	; 0x40
 80024a8:	9205      	str	r2, [sp, #20]
 80024aa:	1bb8      	subs	r0, r7, r6
 80024ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80024ae:	f8cd 8010 	str.w	r8, [sp, #16]
 80024b2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80024b6:	f8cd e020 	str.w	lr, [sp, #32]
 80024ba:	9707      	str	r7, [sp, #28]
 80024bc:	9606      	str	r6, [sp, #24]
 80024be:	9400      	str	r4, [sp, #0]
 80024c0:	9502      	str	r5, [sp, #8]
 80024c2:	9800      	ldr	r0, [sp, #0]
 80024c4:	9a05      	ldr	r2, [sp, #20]
 80024c6:	f8dd e000 	ldr.w	lr, [sp]
 80024ca:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80024cc:	4240      	negs	r0, r0
 80024ce:	9800      	ldr	r0, [sp, #0]
 80024d0:	bfcc      	ite	gt
 80024d2:	f04f 0c00 	movgt.w	ip, #0
 80024d6:	f8dd c000 	ldrle.w	ip, [sp]
 80024da:	1a10      	subs	r0, r2, r0
 80024dc:	9a04      	ldr	r2, [sp, #16]
 80024de:	4290      	cmp	r0, r2
 80024e0:	bf88      	it	hi
 80024e2:	4610      	movhi	r0, r2
 80024e4:	4486      	add	lr, r0
 80024e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80024e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80024ea:	ebac 050e 	sub.w	r5, ip, lr
 80024ee:	4345      	muls	r5, r0
 80024f0:	9808      	ldr	r0, [sp, #32]
 80024f2:	4462      	add	r2, ip
 80024f4:	434a      	muls	r2, r1
 80024f6:	ebae 060c 	sub.w	r6, lr, ip
 80024fa:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80024fe:	434e      	muls	r6, r1
 8002500:	2200      	movs	r2, #0
 8002502:	b189      	cbz	r1, 8002528 <forward_ap+0x104>
 8002504:	f011 0003 	ands.w	r0, r1, #3
 8002508:	464b      	mov	r3, r9
 800250a:	d003      	beq.n	8002514 <forward_ap+0xf0>
 800250c:	1e40      	subs	r0, r0, #1
 800250e:	f843 2b04 	str.w	r2, [r3], #4
 8002512:	d1fb      	bne.n	800250c <forward_ap+0xe8>
 8002514:	0888      	lsrs	r0, r1, #2
 8002516:	d007      	beq.n	8002528 <forward_ap+0x104>
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	60da      	str	r2, [r3, #12]
 8002520:	1e40      	subs	r0, r0, #1
 8002522:	f103 0310 	add.w	r3, r3, #16
 8002526:	d1f7      	bne.n	8002518 <forward_ap+0xf4>
 8002528:	9807      	ldr	r0, [sp, #28]
 800252a:	9b06      	ldr	r3, [sp, #24]
 800252c:	4298      	cmp	r0, r3
 800252e:	f280 80a3 	bge.w	8002678 <forward_ap+0x254>
 8002532:	1a1b      	subs	r3, r3, r0
 8002534:	ebae 000c 	sub.w	r0, lr, ip
 8002538:	900d      	str	r0, [sp, #52]	; 0x34
 800253a:	940e      	str	r4, [sp, #56]	; 0x38
 800253c:	4694      	mov	ip, r2
 800253e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002540:	4484      	add	ip, r0
 8002542:	4565      	cmp	r5, ip
 8002544:	46be      	mov	lr, r7
 8002546:	bf0c      	ite	eq
 8002548:	462c      	moveq	r4, r5
 800254a:	2400      	movne	r4, #0
 800254c:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8002550:	45c6      	cmp	lr, r8
 8002552:	d24e      	bcs.n	80025f2 <forward_ap+0x1ce>
 8002554:	2200      	movs	r2, #0
 8002556:	2900      	cmp	r1, #0
 8002558:	d047      	beq.n	80025ea <forward_ap+0x1c6>
 800255a:	f011 0003 	ands.w	r0, r1, #3
 800255e:	46f2      	mov	sl, lr
 8002560:	46cb      	mov	fp, r9
 8002562:	d010      	beq.n	8002586 <forward_ap+0x162>
 8002564:	ed9a 0a00 	vldr	s0, [sl]
 8002568:	45f1      	cmp	r9, lr
 800256a:	bf1c      	itt	ne
 800256c:	eddb 0a00 	vldrne	s1, [fp]
 8002570:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8002574:	1c52      	adds	r2, r2, #1
 8002576:	ed8b 0a00 	vstr	s0, [fp]
 800257a:	1e40      	subs	r0, r0, #1
 800257c:	f10b 0b04 	add.w	fp, fp, #4
 8002580:	f10a 0a04 	add.w	sl, sl, #4
 8002584:	d1ee      	bne.n	8002564 <forward_ap+0x140>
 8002586:	0888      	lsrs	r0, r1, #2
 8002588:	f000 802f 	beq.w	80025ea <forward_ap+0x1c6>
 800258c:	eb0e 0a82 	add.w	sl, lr, r2, lsl #2
 8002590:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002594:	edda 1a00 	vldr	s3, [sl]
 8002598:	45f1      	cmp	r9, lr
 800259a:	bf1c      	itt	ne
 800259c:	ed92 0a00 	vldrne	s0, [r2]
 80025a0:	ee70 1a21 	vaddne.f32	s3, s0, s3
 80025a4:	edc2 1a00 	vstr	s3, [r2]
 80025a8:	edda 1a01 	vldr	s3, [sl, #4]
 80025ac:	bf1c      	itt	ne
 80025ae:	edd2 0a01 	vldrne	s1, [r2, #4]
 80025b2:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 80025b6:	edc2 1a01 	vstr	s3, [r2, #4]
 80025ba:	ed9a 1a02 	vldr	s2, [sl, #8]
 80025be:	bf1c      	itt	ne
 80025c0:	ed92 0a02 	vldrne	s0, [r2, #8]
 80025c4:	ee30 1a01 	vaddne.f32	s2, s0, s2
 80025c8:	ed82 1a02 	vstr	s2, [r2, #8]
 80025cc:	edda 1a03 	vldr	s3, [sl, #12]
 80025d0:	bf1c      	itt	ne
 80025d2:	edd2 0a03 	vldrne	s1, [r2, #12]
 80025d6:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 80025da:	edc2 1a03 	vstr	s3, [r2, #12]
 80025de:	1e40      	subs	r0, r0, #1
 80025e0:	3210      	adds	r2, #16
 80025e2:	2800      	cmp	r0, #0
 80025e4:	f10a 0a10 	add.w	sl, sl, #16
 80025e8:	d1d4      	bne.n	8002594 <forward_ap+0x170>
 80025ea:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 80025ee:	45c6      	cmp	lr, r8
 80025f0:	d3b0      	bcc.n	8002554 <forward_ap+0x130>
 80025f2:	2c00      	cmp	r4, #0
 80025f4:	d03a      	beq.n	800266c <forward_ap+0x248>
 80025f6:	ee00 4a10 	vmov	s0, r4
 80025fa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80025fe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002602:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8002606:	2200      	movs	r2, #0
 8002608:	b381      	cbz	r1, 800266c <forward_ap+0x248>
 800260a:	f011 0003 	ands.w	r0, r1, #3
 800260e:	464c      	mov	r4, r9
 8002610:	f000 800b 	beq.w	800262a <forward_ap+0x206>
 8002614:	edd4 0a00 	vldr	s1, [r4]
 8002618:	ee60 0a80 	vmul.f32	s1, s1, s0
 800261c:	1c52      	adds	r2, r2, #1
 800261e:	edc4 0a00 	vstr	s1, [r4]
 8002622:	1e40      	subs	r0, r0, #1
 8002624:	f104 0404 	add.w	r4, r4, #4
 8002628:	d1f4      	bne.n	8002614 <forward_ap+0x1f0>
 800262a:	0888      	lsrs	r0, r1, #2
 800262c:	f000 801e 	beq.w	800266c <forward_ap+0x248>
 8002630:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002634:	edd2 0a00 	vldr	s1, [r2]
 8002638:	ee60 0a80 	vmul.f32	s1, s1, s0
 800263c:	edc2 0a00 	vstr	s1, [r2]
 8002640:	1e40      	subs	r0, r0, #1
 8002642:	ed92 1a01 	vldr	s2, [r2, #4]
 8002646:	edd2 0a02 	vldr	s1, [r2, #8]
 800264a:	ee21 1a00 	vmul.f32	s2, s2, s0
 800264e:	ed82 1a01 	vstr	s2, [r2, #4]
 8002652:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002656:	ed92 1a03 	vldr	s2, [r2, #12]
 800265a:	edc2 0a02 	vstr	s1, [r2, #8]
 800265e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002662:	ed82 1a03 	vstr	s2, [r2, #12]
 8002666:	f102 0210 	add.w	r2, r2, #16
 800266a:	d1e3      	bne.n	8002634 <forward_ap+0x210>
 800266c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800266e:	1e5b      	subs	r3, r3, #1
 8002670:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8002674:	f47f af63 	bne.w	800253e <forward_ap+0x11a>
 8002678:	9800      	ldr	r0, [sp, #0]
 800267a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800267c:	1810      	adds	r0, r2, r0
 800267e:	9000      	str	r0, [sp, #0]
 8002680:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 8002684:	9802      	ldr	r0, [sp, #8]
 8002686:	1e40      	subs	r0, r0, #1
 8002688:	9002      	str	r0, [sp, #8]
 800268a:	f47f af1a 	bne.w	80024c2 <forward_ap+0x9e>
 800268e:	9a05      	ldr	r2, [sp, #20]
 8002690:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8002694:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8002698:	f8dd e020 	ldr.w	lr, [sp, #32]
 800269c:	9c01      	ldr	r4, [sp, #4]
 800269e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80026a0:	191c      	adds	r4, r3, r4
 80026a2:	9401      	str	r4, [sp, #4]
 80026a4:	9c03      	ldr	r4, [sp, #12]
 80026a6:	1e64      	subs	r4, r4, #1
 80026a8:	9403      	str	r4, [sp, #12]
 80026aa:	f47f aee6 	bne.w	800247a <forward_ap+0x56>
 80026ae:	b014      	add	sp, #80	; 0x50
 80026b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080026b4 <ai_math_dot_array>:
 80026b4:	b530      	push	{r4, r5, lr}
 80026b6:	4604      	mov	r4, r0
 80026b8:	4608      	mov	r0, r1
 80026ba:	b081      	sub	sp, #4
 80026bc:	4611      	mov	r1, r2
 80026be:	461a      	mov	r2, r3
 80026c0:	2500      	movs	r5, #0
 80026c2:	9500      	str	r5, [sp, #0]
 80026c4:	466b      	mov	r3, sp
 80026c6:	f000 ff33 	bl	8003530 <arm_dot_prod_f32>
 80026ca:	ed94 0a00 	vldr	s0, [r4]
 80026ce:	eddd 0a00 	vldr	s1, [sp]
 80026d2:	ee70 0a20 	vadd.f32	s1, s0, s1
 80026d6:	edc4 0a00 	vstr	s1, [r4]
 80026da:	b001      	add	sp, #4
 80026dc:	bd30      	pop	{r4, r5, pc}
	...

080026e0 <ai_math_sqrt>:
 80026e0:	eef0 0a40 	vmov.f32	s1, s0
 80026e4:	eef5 0a40 	vcmp.f32	s1, #0.0
 80026e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ec:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002790 <.text_12>
 80026f0:	db01      	blt.n	80026f6 <ai_math_sqrt+0x16>
 80026f2:	eeb1 0ae0 	vsqrt.f32	s0, s1
 80026f6:	4770      	bx	lr

080026f8 <ai_math_exp>:
 80026f8:	f009 bd0a 	b.w	800c110 <expf>

080026fc <ai_math_pow>:
 80026fc:	f009 bd82 	b.w	800c204 <powf>

08002700 <ai_math_tanh>:
 8002700:	f009 ba62 	b.w	800bbc8 <tanhf>

08002704 <ai_math_relu>:
 8002704:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270c:	bfd8      	it	le
 800270e:	ed9f 0a20 	vldrle	s0, [pc, #128]	; 8002790 <.text_12>
 8002712:	4770      	bx	lr

08002714 <ai_math_prelu>:
 8002714:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	bfd8      	it	le
 800271e:	ee20 0a20 	vmulle.f32	s0, s0, s1
 8002722:	4770      	bx	lr

08002724 <ai_math_sigmoid>:
 8002724:	b500      	push	{lr}
 8002726:	b081      	sub	sp, #4
 8002728:	eeb1 0a40 	vneg.f32	s0, s0
 800272c:	f009 fcf0 	bl	800c110 <expf>
 8002730:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002734:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002738:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800273c:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8002740:	b001      	add	sp, #4
 8002742:	bd00      	pop	{pc}

08002744 <ai_math_hard_sigmoid>:
 8002744:	eef0 0a40 	vmov.f32	s1, s0
 8002748:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8002794 <.text_13>
 800274c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002750:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002754:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002798 <.text_14>
 8002758:	eeb4 0a60 	vcmp.f32	s0, s1
 800275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002760:	da07      	bge.n	8002772 <ai_math_hard_sigmoid+0x2e>
 8002762:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276a:	d504      	bpl.n	8002776 <ai_math_hard_sigmoid+0x32>
 800276c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002790 <.text_12>
 8002770:	4770      	bx	lr
 8002772:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002776:	4770      	bx	lr

08002778 <ai_math_sign>:
 8002778:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	bfcc      	ite	gt
 8002782:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 800279c <.text_15>
 8002786:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 80027a0 <.text_16>
 800278a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800278e:	4770      	bx	lr

08002790 <.text_12>:
 8002790:	00000000 	.word	0x00000000

08002794 <.text_13>:
 8002794:	3e4ccccd 	.word	0x3e4ccccd

08002798 <.text_14>:
 8002798:	3f800001 	.word	0x3f800001

0800279c <.text_15>:
 800279c:	00000001 	.word	0x00000001

080027a0 <.text_16>:
 80027a0:	ffffffff 	.word	0xffffffff

080027a4 <strlen>:
 80027a4:	4603      	mov	r3, r0
 80027a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027aa:	2a00      	cmp	r2, #0
 80027ac:	d1fb      	bne.n	80027a6 <strlen+0x2>
 80027ae:	1a18      	subs	r0, r3, r0
 80027b0:	3801      	subs	r0, #1
 80027b2:	4770      	bx	lr
	...

080027c0 <memchr>:
 80027c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80027c4:	2a10      	cmp	r2, #16
 80027c6:	db2b      	blt.n	8002820 <memchr+0x60>
 80027c8:	f010 0f07 	tst.w	r0, #7
 80027cc:	d008      	beq.n	80027e0 <memchr+0x20>
 80027ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80027d2:	3a01      	subs	r2, #1
 80027d4:	428b      	cmp	r3, r1
 80027d6:	d02d      	beq.n	8002834 <memchr+0x74>
 80027d8:	f010 0f07 	tst.w	r0, #7
 80027dc:	b342      	cbz	r2, 8002830 <memchr+0x70>
 80027de:	d1f6      	bne.n	80027ce <memchr+0xe>
 80027e0:	b4f0      	push	{r4, r5, r6, r7}
 80027e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80027e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80027ea:	f022 0407 	bic.w	r4, r2, #7
 80027ee:	f07f 0700 	mvns.w	r7, #0
 80027f2:	2300      	movs	r3, #0
 80027f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80027f8:	3c08      	subs	r4, #8
 80027fa:	ea85 0501 	eor.w	r5, r5, r1
 80027fe:	ea86 0601 	eor.w	r6, r6, r1
 8002802:	fa85 f547 	uadd8	r5, r5, r7
 8002806:	faa3 f587 	sel	r5, r3, r7
 800280a:	fa86 f647 	uadd8	r6, r6, r7
 800280e:	faa5 f687 	sel	r6, r5, r7
 8002812:	b98e      	cbnz	r6, 8002838 <memchr+0x78>
 8002814:	d1ee      	bne.n	80027f4 <memchr+0x34>
 8002816:	bcf0      	pop	{r4, r5, r6, r7}
 8002818:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800281c:	f002 0207 	and.w	r2, r2, #7
 8002820:	b132      	cbz	r2, 8002830 <memchr+0x70>
 8002822:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002826:	3a01      	subs	r2, #1
 8002828:	ea83 0301 	eor.w	r3, r3, r1
 800282c:	b113      	cbz	r3, 8002834 <memchr+0x74>
 800282e:	d1f8      	bne.n	8002822 <memchr+0x62>
 8002830:	2000      	movs	r0, #0
 8002832:	4770      	bx	lr
 8002834:	3801      	subs	r0, #1
 8002836:	4770      	bx	lr
 8002838:	2d00      	cmp	r5, #0
 800283a:	bf06      	itte	eq
 800283c:	4635      	moveq	r5, r6
 800283e:	3803      	subeq	r0, #3
 8002840:	3807      	subne	r0, #7
 8002842:	f015 0f01 	tst.w	r5, #1
 8002846:	d107      	bne.n	8002858 <memchr+0x98>
 8002848:	3001      	adds	r0, #1
 800284a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800284e:	bf02      	ittt	eq
 8002850:	3001      	addeq	r0, #1
 8002852:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8002856:	3001      	addeq	r0, #1
 8002858:	bcf0      	pop	{r4, r5, r6, r7}
 800285a:	3801      	subs	r0, #1
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop

08002860 <__aeabi_drsub>:
 8002860:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002864:	e002      	b.n	800286c <__adddf3>
 8002866:	bf00      	nop

08002868 <__aeabi_dsub>:
 8002868:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800286c <__adddf3>:
 800286c:	b530      	push	{r4, r5, lr}
 800286e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8002872:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002876:	ea94 0f05 	teq	r4, r5
 800287a:	bf08      	it	eq
 800287c:	ea90 0f02 	teqeq	r0, r2
 8002880:	bf1f      	itttt	ne
 8002882:	ea54 0c00 	orrsne.w	ip, r4, r0
 8002886:	ea55 0c02 	orrsne.w	ip, r5, r2
 800288a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800288e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002892:	f000 80e2 	beq.w	8002a5a <__adddf3+0x1ee>
 8002896:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800289a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800289e:	bfb8      	it	lt
 80028a0:	426d      	neglt	r5, r5
 80028a2:	dd0c      	ble.n	80028be <__adddf3+0x52>
 80028a4:	442c      	add	r4, r5
 80028a6:	ea80 0202 	eor.w	r2, r0, r2
 80028aa:	ea81 0303 	eor.w	r3, r1, r3
 80028ae:	ea82 0000 	eor.w	r0, r2, r0
 80028b2:	ea83 0101 	eor.w	r1, r3, r1
 80028b6:	ea80 0202 	eor.w	r2, r0, r2
 80028ba:	ea81 0303 	eor.w	r3, r1, r3
 80028be:	2d36      	cmp	r5, #54	; 0x36
 80028c0:	bf88      	it	hi
 80028c2:	bd30      	pophi	{r4, r5, pc}
 80028c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80028c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80028cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80028d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80028d4:	d002      	beq.n	80028dc <__adddf3+0x70>
 80028d6:	4240      	negs	r0, r0
 80028d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80028dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80028e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80028e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80028e8:	d002      	beq.n	80028f0 <__adddf3+0x84>
 80028ea:	4252      	negs	r2, r2
 80028ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80028f0:	ea94 0f05 	teq	r4, r5
 80028f4:	f000 80a7 	beq.w	8002a46 <__adddf3+0x1da>
 80028f8:	f1a4 0401 	sub.w	r4, r4, #1
 80028fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8002900:	db0d      	blt.n	800291e <__adddf3+0xb2>
 8002902:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002906:	fa22 f205 	lsr.w	r2, r2, r5
 800290a:	1880      	adds	r0, r0, r2
 800290c:	f141 0100 	adc.w	r1, r1, #0
 8002910:	fa03 f20e 	lsl.w	r2, r3, lr
 8002914:	1880      	adds	r0, r0, r2
 8002916:	fa43 f305 	asr.w	r3, r3, r5
 800291a:	4159      	adcs	r1, r3
 800291c:	e00e      	b.n	800293c <__adddf3+0xd0>
 800291e:	f1a5 0520 	sub.w	r5, r5, #32
 8002922:	f10e 0e20 	add.w	lr, lr, #32
 8002926:	2a01      	cmp	r2, #1
 8002928:	fa03 fc0e 	lsl.w	ip, r3, lr
 800292c:	bf28      	it	cs
 800292e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002932:	fa43 f305 	asr.w	r3, r3, r5
 8002936:	18c0      	adds	r0, r0, r3
 8002938:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800293c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002940:	d507      	bpl.n	8002952 <__adddf3+0xe6>
 8002942:	f04f 0e00 	mov.w	lr, #0
 8002946:	f1dc 0c00 	rsbs	ip, ip, #0
 800294a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800294e:	eb6e 0101 	sbc.w	r1, lr, r1
 8002952:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002956:	d31b      	bcc.n	8002990 <__adddf3+0x124>
 8002958:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800295c:	d30c      	bcc.n	8002978 <__adddf3+0x10c>
 800295e:	0849      	lsrs	r1, r1, #1
 8002960:	ea5f 0030 	movs.w	r0, r0, rrx
 8002964:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002968:	f104 0401 	add.w	r4, r4, #1
 800296c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002970:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002974:	f080 809a 	bcs.w	8002aac <__adddf3+0x240>
 8002978:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800297c:	bf08      	it	eq
 800297e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002982:	f150 0000 	adcs.w	r0, r0, #0
 8002986:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800298a:	ea41 0105 	orr.w	r1, r1, r5
 800298e:	bd30      	pop	{r4, r5, pc}
 8002990:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002994:	4140      	adcs	r0, r0
 8002996:	eb41 0101 	adc.w	r1, r1, r1
 800299a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800299e:	f1a4 0401 	sub.w	r4, r4, #1
 80029a2:	d1e9      	bne.n	8002978 <__adddf3+0x10c>
 80029a4:	f091 0f00 	teq	r1, #0
 80029a8:	bf04      	itt	eq
 80029aa:	4601      	moveq	r1, r0
 80029ac:	2000      	moveq	r0, #0
 80029ae:	fab1 f381 	clz	r3, r1
 80029b2:	bf08      	it	eq
 80029b4:	3320      	addeq	r3, #32
 80029b6:	f1a3 030b 	sub.w	r3, r3, #11
 80029ba:	f1b3 0220 	subs.w	r2, r3, #32
 80029be:	da0c      	bge.n	80029da <__adddf3+0x16e>
 80029c0:	320c      	adds	r2, #12
 80029c2:	dd08      	ble.n	80029d6 <__adddf3+0x16a>
 80029c4:	f102 0c14 	add.w	ip, r2, #20
 80029c8:	f1c2 020c 	rsb	r2, r2, #12
 80029cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80029d0:	fa21 f102 	lsr.w	r1, r1, r2
 80029d4:	e00c      	b.n	80029f0 <__adddf3+0x184>
 80029d6:	f102 0214 	add.w	r2, r2, #20
 80029da:	bfd8      	it	le
 80029dc:	f1c2 0c20 	rsble	ip, r2, #32
 80029e0:	fa01 f102 	lsl.w	r1, r1, r2
 80029e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80029e8:	bfdc      	itt	le
 80029ea:	ea41 010c 	orrle.w	r1, r1, ip
 80029ee:	4090      	lslle	r0, r2
 80029f0:	1ae4      	subs	r4, r4, r3
 80029f2:	bfa2      	ittt	ge
 80029f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80029f8:	4329      	orrge	r1, r5
 80029fa:	bd30      	popge	{r4, r5, pc}
 80029fc:	ea6f 0404 	mvn.w	r4, r4
 8002a00:	3c1f      	subs	r4, #31
 8002a02:	da1c      	bge.n	8002a3e <__adddf3+0x1d2>
 8002a04:	340c      	adds	r4, #12
 8002a06:	dc0e      	bgt.n	8002a26 <__adddf3+0x1ba>
 8002a08:	f104 0414 	add.w	r4, r4, #20
 8002a0c:	f1c4 0220 	rsb	r2, r4, #32
 8002a10:	fa20 f004 	lsr.w	r0, r0, r4
 8002a14:	fa01 f302 	lsl.w	r3, r1, r2
 8002a18:	ea40 0003 	orr.w	r0, r0, r3
 8002a1c:	fa21 f304 	lsr.w	r3, r1, r4
 8002a20:	ea45 0103 	orr.w	r1, r5, r3
 8002a24:	bd30      	pop	{r4, r5, pc}
 8002a26:	f1c4 040c 	rsb	r4, r4, #12
 8002a2a:	f1c4 0220 	rsb	r2, r4, #32
 8002a2e:	fa20 f002 	lsr.w	r0, r0, r2
 8002a32:	fa01 f304 	lsl.w	r3, r1, r4
 8002a36:	ea40 0003 	orr.w	r0, r0, r3
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	bd30      	pop	{r4, r5, pc}
 8002a3e:	fa21 f004 	lsr.w	r0, r1, r4
 8002a42:	4629      	mov	r1, r5
 8002a44:	bd30      	pop	{r4, r5, pc}
 8002a46:	f094 0f00 	teq	r4, #0
 8002a4a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002a4e:	bf06      	itte	eq
 8002a50:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002a54:	3401      	addeq	r4, #1
 8002a56:	3d01      	subne	r5, #1
 8002a58:	e74e      	b.n	80028f8 <__adddf3+0x8c>
 8002a5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002a5e:	bf18      	it	ne
 8002a60:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002a64:	d029      	beq.n	8002aba <__adddf3+0x24e>
 8002a66:	ea94 0f05 	teq	r4, r5
 8002a6a:	bf08      	it	eq
 8002a6c:	ea90 0f02 	teqeq	r0, r2
 8002a70:	d005      	beq.n	8002a7e <__adddf3+0x212>
 8002a72:	ea54 0c00 	orrs.w	ip, r4, r0
 8002a76:	bf04      	itt	eq
 8002a78:	4619      	moveq	r1, r3
 8002a7a:	4610      	moveq	r0, r2
 8002a7c:	bd30      	pop	{r4, r5, pc}
 8002a7e:	ea91 0f03 	teq	r1, r3
 8002a82:	bf1e      	ittt	ne
 8002a84:	2100      	movne	r1, #0
 8002a86:	2000      	movne	r0, #0
 8002a88:	bd30      	popne	{r4, r5, pc}
 8002a8a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002a8e:	d105      	bne.n	8002a9c <__adddf3+0x230>
 8002a90:	0040      	lsls	r0, r0, #1
 8002a92:	4149      	adcs	r1, r1
 8002a94:	bf28      	it	cs
 8002a96:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8002a9a:	bd30      	pop	{r4, r5, pc}
 8002a9c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8002aa0:	bf3c      	itt	cc
 8002aa2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8002aa6:	bd30      	popcc	{r4, r5, pc}
 8002aa8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002aac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002ab0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002ab4:	f04f 0000 	mov.w	r0, #0
 8002ab8:	bd30      	pop	{r4, r5, pc}
 8002aba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002abe:	bf1a      	itte	ne
 8002ac0:	4619      	movne	r1, r3
 8002ac2:	4610      	movne	r0, r2
 8002ac4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002ac8:	bf1c      	itt	ne
 8002aca:	460b      	movne	r3, r1
 8002acc:	4602      	movne	r2, r0
 8002ace:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002ad2:	bf06      	itte	eq
 8002ad4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002ad8:	ea91 0f03 	teqeq	r1, r3
 8002adc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002ae0:	bd30      	pop	{r4, r5, pc}
 8002ae2:	bf00      	nop

08002ae4 <__aeabi_ui2d>:
 8002ae4:	f090 0f00 	teq	r0, #0
 8002ae8:	bf04      	itt	eq
 8002aea:	2100      	moveq	r1, #0
 8002aec:	4770      	bxeq	lr
 8002aee:	b530      	push	{r4, r5, lr}
 8002af0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002af4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002af8:	f04f 0500 	mov.w	r5, #0
 8002afc:	f04f 0100 	mov.w	r1, #0
 8002b00:	e750      	b.n	80029a4 <__adddf3+0x138>
 8002b02:	bf00      	nop

08002b04 <__aeabi_i2d>:
 8002b04:	f090 0f00 	teq	r0, #0
 8002b08:	bf04      	itt	eq
 8002b0a:	2100      	moveq	r1, #0
 8002b0c:	4770      	bxeq	lr
 8002b0e:	b530      	push	{r4, r5, lr}
 8002b10:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002b14:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002b18:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002b1c:	bf48      	it	mi
 8002b1e:	4240      	negmi	r0, r0
 8002b20:	f04f 0100 	mov.w	r1, #0
 8002b24:	e73e      	b.n	80029a4 <__adddf3+0x138>
 8002b26:	bf00      	nop

08002b28 <__aeabi_f2d>:
 8002b28:	0042      	lsls	r2, r0, #1
 8002b2a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8002b32:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002b36:	bf1f      	itttt	ne
 8002b38:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002b3c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002b40:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002b44:	4770      	bxne	lr
 8002b46:	f092 0f00 	teq	r2, #0
 8002b4a:	bf14      	ite	ne
 8002b4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002b50:	4770      	bxeq	lr
 8002b52:	b530      	push	{r4, r5, lr}
 8002b54:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002b58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002b5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002b60:	e720      	b.n	80029a4 <__adddf3+0x138>
 8002b62:	bf00      	nop

08002b64 <__aeabi_ul2d>:
 8002b64:	ea50 0201 	orrs.w	r2, r0, r1
 8002b68:	bf08      	it	eq
 8002b6a:	4770      	bxeq	lr
 8002b6c:	b530      	push	{r4, r5, lr}
 8002b6e:	f04f 0500 	mov.w	r5, #0
 8002b72:	e00a      	b.n	8002b8a <__aeabi_l2d+0x16>

08002b74 <__aeabi_l2d>:
 8002b74:	ea50 0201 	orrs.w	r2, r0, r1
 8002b78:	bf08      	it	eq
 8002b7a:	4770      	bxeq	lr
 8002b7c:	b530      	push	{r4, r5, lr}
 8002b7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8002b82:	d502      	bpl.n	8002b8a <__aeabi_l2d+0x16>
 8002b84:	4240      	negs	r0, r0
 8002b86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002b8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002b8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002b92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002b96:	f43f aedc 	beq.w	8002952 <__adddf3+0xe6>
 8002b9a:	f04f 0203 	mov.w	r2, #3
 8002b9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002ba2:	bf18      	it	ne
 8002ba4:	3203      	addne	r2, #3
 8002ba6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002baa:	bf18      	it	ne
 8002bac:	3203      	addne	r2, #3
 8002bae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002bb2:	f1c2 0320 	rsb	r3, r2, #32
 8002bb6:	fa00 fc03 	lsl.w	ip, r0, r3
 8002bba:	fa20 f002 	lsr.w	r0, r0, r2
 8002bbe:	fa01 fe03 	lsl.w	lr, r1, r3
 8002bc2:	ea40 000e 	orr.w	r0, r0, lr
 8002bc6:	fa21 f102 	lsr.w	r1, r1, r2
 8002bca:	4414      	add	r4, r2
 8002bcc:	e6c1      	b.n	8002952 <__adddf3+0xe6>
 8002bce:	bf00      	nop

08002bd0 <__aeabi_dmul>:
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002bd6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002bda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002bde:	bf1d      	ittte	ne
 8002be0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002be4:	ea94 0f0c 	teqne	r4, ip
 8002be8:	ea95 0f0c 	teqne	r5, ip
 8002bec:	f000 f8de 	bleq	8002dac <__aeabi_dmul+0x1dc>
 8002bf0:	442c      	add	r4, r5
 8002bf2:	ea81 0603 	eor.w	r6, r1, r3
 8002bf6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002bfa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002bfe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002c02:	bf18      	it	ne
 8002c04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002c08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c10:	d038      	beq.n	8002c84 <__aeabi_dmul+0xb4>
 8002c12:	fba0 ce02 	umull	ip, lr, r0, r2
 8002c16:	f04f 0500 	mov.w	r5, #0
 8002c1a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002c1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8002c22:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002c26:	f04f 0600 	mov.w	r6, #0
 8002c2a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002c2e:	f09c 0f00 	teq	ip, #0
 8002c32:	bf18      	it	ne
 8002c34:	f04e 0e01 	orrne.w	lr, lr, #1
 8002c38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002c3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002c40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002c44:	d204      	bcs.n	8002c50 <__aeabi_dmul+0x80>
 8002c46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002c4a:	416d      	adcs	r5, r5
 8002c4c:	eb46 0606 	adc.w	r6, r6, r6
 8002c50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002c54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002c58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002c5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002c60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002c64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002c68:	bf88      	it	hi
 8002c6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002c6e:	d81e      	bhi.n	8002cae <__aeabi_dmul+0xde>
 8002c70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8002c74:	bf08      	it	eq
 8002c76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002c7a:	f150 0000 	adcs.w	r0, r0, #0
 8002c7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002c88:	ea46 0101 	orr.w	r1, r6, r1
 8002c8c:	ea40 0002 	orr.w	r0, r0, r2
 8002c90:	ea81 0103 	eor.w	r1, r1, r3
 8002c94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002c98:	bfc2      	ittt	gt
 8002c9a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002c9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002ca2:	bd70      	popgt	{r4, r5, r6, pc}
 8002ca4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002ca8:	f04f 0e00 	mov.w	lr, #0
 8002cac:	3c01      	subs	r4, #1
 8002cae:	f300 80ab 	bgt.w	8002e08 <__aeabi_dmul+0x238>
 8002cb2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8002cb6:	bfde      	ittt	le
 8002cb8:	2000      	movle	r0, #0
 8002cba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002cbe:	bd70      	pople	{r4, r5, r6, pc}
 8002cc0:	f1c4 0400 	rsb	r4, r4, #0
 8002cc4:	3c20      	subs	r4, #32
 8002cc6:	da35      	bge.n	8002d34 <__aeabi_dmul+0x164>
 8002cc8:	340c      	adds	r4, #12
 8002cca:	dc1b      	bgt.n	8002d04 <__aeabi_dmul+0x134>
 8002ccc:	f104 0414 	add.w	r4, r4, #20
 8002cd0:	f1c4 0520 	rsb	r5, r4, #32
 8002cd4:	fa00 f305 	lsl.w	r3, r0, r5
 8002cd8:	fa20 f004 	lsr.w	r0, r0, r4
 8002cdc:	fa01 f205 	lsl.w	r2, r1, r5
 8002ce0:	ea40 0002 	orr.w	r0, r0, r2
 8002ce4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002ce8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002cec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002cf0:	fa21 f604 	lsr.w	r6, r1, r4
 8002cf4:	eb42 0106 	adc.w	r1, r2, r6
 8002cf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002cfc:	bf08      	it	eq
 8002cfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
 8002d04:	f1c4 040c 	rsb	r4, r4, #12
 8002d08:	f1c4 0520 	rsb	r5, r4, #32
 8002d0c:	fa00 f304 	lsl.w	r3, r0, r4
 8002d10:	fa20 f005 	lsr.w	r0, r0, r5
 8002d14:	fa01 f204 	lsl.w	r2, r1, r4
 8002d18:	ea40 0002 	orr.w	r0, r0, r2
 8002d1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002d20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002d24:	f141 0100 	adc.w	r1, r1, #0
 8002d28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002d2c:	bf08      	it	eq
 8002d2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
 8002d34:	f1c4 0520 	rsb	r5, r4, #32
 8002d38:	fa00 f205 	lsl.w	r2, r0, r5
 8002d3c:	ea4e 0e02 	orr.w	lr, lr, r2
 8002d40:	fa20 f304 	lsr.w	r3, r0, r4
 8002d44:	fa01 f205 	lsl.w	r2, r1, r5
 8002d48:	ea43 0302 	orr.w	r3, r3, r2
 8002d4c:	fa21 f004 	lsr.w	r0, r1, r4
 8002d50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002d54:	fa21 f204 	lsr.w	r2, r1, r4
 8002d58:	ea20 0002 	bic.w	r0, r0, r2
 8002d5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002d64:	bf08      	it	eq
 8002d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f094 0f00 	teq	r4, #0
 8002d70:	d10f      	bne.n	8002d92 <__aeabi_dmul+0x1c2>
 8002d72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8002d76:	0040      	lsls	r0, r0, #1
 8002d78:	eb41 0101 	adc.w	r1, r1, r1
 8002d7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002d80:	bf08      	it	eq
 8002d82:	3c01      	subeq	r4, #1
 8002d84:	d0f7      	beq.n	8002d76 <__aeabi_dmul+0x1a6>
 8002d86:	ea41 0106 	orr.w	r1, r1, r6
 8002d8a:	f095 0f00 	teq	r5, #0
 8002d8e:	bf18      	it	ne
 8002d90:	4770      	bxne	lr
 8002d92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8002d96:	0052      	lsls	r2, r2, #1
 8002d98:	eb43 0303 	adc.w	r3, r3, r3
 8002d9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002da0:	bf08      	it	eq
 8002da2:	3d01      	subeq	r5, #1
 8002da4:	d0f7      	beq.n	8002d96 <__aeabi_dmul+0x1c6>
 8002da6:	ea43 0306 	orr.w	r3, r3, r6
 8002daa:	4770      	bx	lr
 8002dac:	ea94 0f0c 	teq	r4, ip
 8002db0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002db4:	bf18      	it	ne
 8002db6:	ea95 0f0c 	teqne	r5, ip
 8002dba:	d00c      	beq.n	8002dd6 <__aeabi_dmul+0x206>
 8002dbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002dc0:	bf18      	it	ne
 8002dc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002dc6:	d1d1      	bne.n	8002d6c <__aeabi_dmul+0x19c>
 8002dc8:	ea81 0103 	eor.w	r1, r1, r3
 8002dcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002dd0:	f04f 0000 	mov.w	r0, #0
 8002dd4:	bd70      	pop	{r4, r5, r6, pc}
 8002dd6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002dda:	bf06      	itte	eq
 8002ddc:	4610      	moveq	r0, r2
 8002dde:	4619      	moveq	r1, r3
 8002de0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002de4:	d019      	beq.n	8002e1a <__aeabi_dmul+0x24a>
 8002de6:	ea94 0f0c 	teq	r4, ip
 8002dea:	d102      	bne.n	8002df2 <__aeabi_dmul+0x222>
 8002dec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002df0:	d113      	bne.n	8002e1a <__aeabi_dmul+0x24a>
 8002df2:	ea95 0f0c 	teq	r5, ip
 8002df6:	d105      	bne.n	8002e04 <__aeabi_dmul+0x234>
 8002df8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002dfc:	bf1c      	itt	ne
 8002dfe:	4610      	movne	r0, r2
 8002e00:	4619      	movne	r1, r3
 8002e02:	d10a      	bne.n	8002e1a <__aeabi_dmul+0x24a>
 8002e04:	ea81 0103 	eor.w	r1, r1, r3
 8002e08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002e0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002e10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
 8002e1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002e1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8002e22:	bd70      	pop	{r4, r5, r6, pc}

08002e24 <__aeabi_ddiv>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002e2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002e2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002e32:	bf1d      	ittte	ne
 8002e34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002e38:	ea94 0f0c 	teqne	r4, ip
 8002e3c:	ea95 0f0c 	teqne	r5, ip
 8002e40:	f000 f8a7 	bleq	8002f92 <__aeabi_ddiv+0x16e>
 8002e44:	eba4 0405 	sub.w	r4, r4, r5
 8002e48:	ea81 0e03 	eor.w	lr, r1, r3
 8002e4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002e50:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002e54:	f000 8088 	beq.w	8002f68 <__aeabi_ddiv+0x144>
 8002e58:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002e5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002e60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002e64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002e68:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002e6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002e70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002e74:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002e78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8002e7c:	429d      	cmp	r5, r3
 8002e7e:	bf08      	it	eq
 8002e80:	4296      	cmpeq	r6, r2
 8002e82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8002e86:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8002e8a:	d202      	bcs.n	8002e92 <__aeabi_ddiv+0x6e>
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	ea4f 0232 	mov.w	r2, r2, rrx
 8002e92:	1ab6      	subs	r6, r6, r2
 8002e94:	eb65 0503 	sbc.w	r5, r5, r3
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	ea4f 0232 	mov.w	r2, r2, rrx
 8002e9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002ea2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8002ea6:	ebb6 0e02 	subs.w	lr, r6, r2
 8002eaa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002eae:	bf22      	ittt	cs
 8002eb0:	1ab6      	subcs	r6, r6, r2
 8002eb2:	4675      	movcs	r5, lr
 8002eb4:	ea40 000c 	orrcs.w	r0, r0, ip
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	ea4f 0232 	mov.w	r2, r2, rrx
 8002ebe:	ebb6 0e02 	subs.w	lr, r6, r2
 8002ec2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002ec6:	bf22      	ittt	cs
 8002ec8:	1ab6      	subcs	r6, r6, r2
 8002eca:	4675      	movcs	r5, lr
 8002ecc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	ea4f 0232 	mov.w	r2, r2, rrx
 8002ed6:	ebb6 0e02 	subs.w	lr, r6, r2
 8002eda:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002ede:	bf22      	ittt	cs
 8002ee0:	1ab6      	subcs	r6, r6, r2
 8002ee2:	4675      	movcs	r5, lr
 8002ee4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	ea4f 0232 	mov.w	r2, r2, rrx
 8002eee:	ebb6 0e02 	subs.w	lr, r6, r2
 8002ef2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002ef6:	bf22      	ittt	cs
 8002ef8:	1ab6      	subcs	r6, r6, r2
 8002efa:	4675      	movcs	r5, lr
 8002efc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002f00:	ea55 0e06 	orrs.w	lr, r5, r6
 8002f04:	d018      	beq.n	8002f38 <__aeabi_ddiv+0x114>
 8002f06:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002f0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8002f0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8002f12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002f16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002f1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8002f1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8002f22:	d1c0      	bne.n	8002ea6 <__aeabi_ddiv+0x82>
 8002f24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002f28:	d10b      	bne.n	8002f42 <__aeabi_ddiv+0x11e>
 8002f2a:	ea41 0100 	orr.w	r1, r1, r0
 8002f2e:	f04f 0000 	mov.w	r0, #0
 8002f32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8002f36:	e7b6      	b.n	8002ea6 <__aeabi_ddiv+0x82>
 8002f38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002f3c:	bf04      	itt	eq
 8002f3e:	4301      	orreq	r1, r0
 8002f40:	2000      	moveq	r0, #0
 8002f42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002f46:	bf88      	it	hi
 8002f48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002f4c:	f63f aeaf 	bhi.w	8002cae <__aeabi_dmul+0xde>
 8002f50:	ebb5 0c03 	subs.w	ip, r5, r3
 8002f54:	bf04      	itt	eq
 8002f56:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002f5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002f5e:	f150 0000 	adcs.w	r0, r0, #0
 8002f62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
 8002f68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8002f6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002f70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002f74:	bfc2      	ittt	gt
 8002f76:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002f7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002f7e:	bd70      	popgt	{r4, r5, r6, pc}
 8002f80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002f84:	f04f 0e00 	mov.w	lr, #0
 8002f88:	3c01      	subs	r4, #1
 8002f8a:	e690      	b.n	8002cae <__aeabi_dmul+0xde>
 8002f8c:	ea45 0e06 	orr.w	lr, r5, r6
 8002f90:	e68d      	b.n	8002cae <__aeabi_dmul+0xde>
 8002f92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002f96:	ea94 0f0c 	teq	r4, ip
 8002f9a:	bf08      	it	eq
 8002f9c:	ea95 0f0c 	teqeq	r5, ip
 8002fa0:	f43f af3b 	beq.w	8002e1a <__aeabi_dmul+0x24a>
 8002fa4:	ea94 0f0c 	teq	r4, ip
 8002fa8:	d10a      	bne.n	8002fc0 <__aeabi_ddiv+0x19c>
 8002faa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002fae:	f47f af34 	bne.w	8002e1a <__aeabi_dmul+0x24a>
 8002fb2:	ea95 0f0c 	teq	r5, ip
 8002fb6:	f47f af25 	bne.w	8002e04 <__aeabi_dmul+0x234>
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	e72c      	b.n	8002e1a <__aeabi_dmul+0x24a>
 8002fc0:	ea95 0f0c 	teq	r5, ip
 8002fc4:	d106      	bne.n	8002fd4 <__aeabi_ddiv+0x1b0>
 8002fc6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002fca:	f43f aefd 	beq.w	8002dc8 <__aeabi_dmul+0x1f8>
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	e722      	b.n	8002e1a <__aeabi_dmul+0x24a>
 8002fd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002fd8:	bf18      	it	ne
 8002fda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002fde:	f47f aec5 	bne.w	8002d6c <__aeabi_dmul+0x19c>
 8002fe2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002fe6:	f47f af0d 	bne.w	8002e04 <__aeabi_dmul+0x234>
 8002fea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002fee:	f47f aeeb 	bne.w	8002dc8 <__aeabi_dmul+0x1f8>
 8002ff2:	e712      	b.n	8002e1a <__aeabi_dmul+0x24a>

08002ff4 <__gedf2>:
 8002ff4:	f04f 3cff 	mov.w	ip, #4294967295
 8002ff8:	e006      	b.n	8003008 <__cmpdf2+0x4>
 8002ffa:	bf00      	nop

08002ffc <__ledf2>:
 8002ffc:	f04f 0c01 	mov.w	ip, #1
 8003000:	e002      	b.n	8003008 <__cmpdf2+0x4>
 8003002:	bf00      	nop

08003004 <__cmpdf2>:
 8003004:	f04f 0c01 	mov.w	ip, #1
 8003008:	f84d cd04 	str.w	ip, [sp, #-4]!
 800300c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003010:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003014:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003018:	bf18      	it	ne
 800301a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800301e:	d01b      	beq.n	8003058 <__cmpdf2+0x54>
 8003020:	b001      	add	sp, #4
 8003022:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8003026:	bf0c      	ite	eq
 8003028:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800302c:	ea91 0f03 	teqne	r1, r3
 8003030:	bf02      	ittt	eq
 8003032:	ea90 0f02 	teqeq	r0, r2
 8003036:	2000      	moveq	r0, #0
 8003038:	4770      	bxeq	lr
 800303a:	f110 0f00 	cmn.w	r0, #0
 800303e:	ea91 0f03 	teq	r1, r3
 8003042:	bf58      	it	pl
 8003044:	4299      	cmppl	r1, r3
 8003046:	bf08      	it	eq
 8003048:	4290      	cmpeq	r0, r2
 800304a:	bf2c      	ite	cs
 800304c:	17d8      	asrcs	r0, r3, #31
 800304e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8003052:	f040 0001 	orr.w	r0, r0, #1
 8003056:	4770      	bx	lr
 8003058:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800305c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003060:	d102      	bne.n	8003068 <__cmpdf2+0x64>
 8003062:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003066:	d107      	bne.n	8003078 <__cmpdf2+0x74>
 8003068:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800306c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003070:	d1d6      	bne.n	8003020 <__cmpdf2+0x1c>
 8003072:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003076:	d0d3      	beq.n	8003020 <__cmpdf2+0x1c>
 8003078:	f85d 0b04 	ldr.w	r0, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop

08003080 <__aeabi_cdrcmple>:
 8003080:	4684      	mov	ip, r0
 8003082:	4610      	mov	r0, r2
 8003084:	4662      	mov	r2, ip
 8003086:	468c      	mov	ip, r1
 8003088:	4619      	mov	r1, r3
 800308a:	4663      	mov	r3, ip
 800308c:	e000      	b.n	8003090 <__aeabi_cdcmpeq>
 800308e:	bf00      	nop

08003090 <__aeabi_cdcmpeq>:
 8003090:	b501      	push	{r0, lr}
 8003092:	f7ff ffb7 	bl	8003004 <__cmpdf2>
 8003096:	2800      	cmp	r0, #0
 8003098:	bf48      	it	mi
 800309a:	f110 0f00 	cmnmi.w	r0, #0
 800309e:	bd01      	pop	{r0, pc}

080030a0 <__aeabi_dcmpeq>:
 80030a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80030a4:	f7ff fff4 	bl	8003090 <__aeabi_cdcmpeq>
 80030a8:	bf0c      	ite	eq
 80030aa:	2001      	moveq	r0, #1
 80030ac:	2000      	movne	r0, #0
 80030ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80030b2:	bf00      	nop

080030b4 <__aeabi_dcmplt>:
 80030b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80030b8:	f7ff ffea 	bl	8003090 <__aeabi_cdcmpeq>
 80030bc:	bf34      	ite	cc
 80030be:	2001      	movcc	r0, #1
 80030c0:	2000      	movcs	r0, #0
 80030c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80030c6:	bf00      	nop

080030c8 <__aeabi_dcmple>:
 80030c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80030cc:	f7ff ffe0 	bl	8003090 <__aeabi_cdcmpeq>
 80030d0:	bf94      	ite	ls
 80030d2:	2001      	movls	r0, #1
 80030d4:	2000      	movhi	r0, #0
 80030d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80030da:	bf00      	nop

080030dc <__aeabi_dcmpge>:
 80030dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80030e0:	f7ff ffce 	bl	8003080 <__aeabi_cdrcmple>
 80030e4:	bf94      	ite	ls
 80030e6:	2001      	movls	r0, #1
 80030e8:	2000      	movhi	r0, #0
 80030ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80030ee:	bf00      	nop

080030f0 <__aeabi_dcmpgt>:
 80030f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80030f4:	f7ff ffc4 	bl	8003080 <__aeabi_cdrcmple>
 80030f8:	bf34      	ite	cc
 80030fa:	2001      	movcc	r0, #1
 80030fc:	2000      	movcs	r0, #0
 80030fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8003102:	bf00      	nop

08003104 <__aeabi_dcmpun>:
 8003104:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003108:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800310c:	d102      	bne.n	8003114 <__aeabi_dcmpun+0x10>
 800310e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003112:	d10a      	bne.n	800312a <__aeabi_dcmpun+0x26>
 8003114:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003118:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800311c:	d102      	bne.n	8003124 <__aeabi_dcmpun+0x20>
 800311e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003122:	d102      	bne.n	800312a <__aeabi_dcmpun+0x26>
 8003124:	f04f 0000 	mov.w	r0, #0
 8003128:	4770      	bx	lr
 800312a:	f04f 0001 	mov.w	r0, #1
 800312e:	4770      	bx	lr

08003130 <__aeabi_d2iz>:
 8003130:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003134:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8003138:	d215      	bcs.n	8003166 <__aeabi_d2iz+0x36>
 800313a:	d511      	bpl.n	8003160 <__aeabi_d2iz+0x30>
 800313c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003140:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003144:	d912      	bls.n	800316c <__aeabi_d2iz+0x3c>
 8003146:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800314a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800314e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003152:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003156:	fa23 f002 	lsr.w	r0, r3, r2
 800315a:	bf18      	it	ne
 800315c:	4240      	negne	r0, r0
 800315e:	4770      	bx	lr
 8003160:	f04f 0000 	mov.w	r0, #0
 8003164:	4770      	bx	lr
 8003166:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800316a:	d105      	bne.n	8003178 <__aeabi_d2iz+0x48>
 800316c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8003170:	bf08      	it	eq
 8003172:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8003176:	4770      	bx	lr
 8003178:	f04f 0000 	mov.w	r0, #0
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop

08003180 <__aeabi_d2f>:
 8003180:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003184:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8003188:	bf24      	itt	cs
 800318a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800318e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8003192:	d90d      	bls.n	80031b0 <__aeabi_d2f+0x30>
 8003194:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003198:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800319c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80031a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80031a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80031a8:	bf08      	it	eq
 80031aa:	f020 0001 	biceq.w	r0, r0, #1
 80031ae:	4770      	bx	lr
 80031b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80031b4:	d121      	bne.n	80031fa <__aeabi_d2f+0x7a>
 80031b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80031ba:	bfbc      	itt	lt
 80031bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80031c0:	4770      	bxlt	lr
 80031c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80031c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80031ca:	f1c2 0218 	rsb	r2, r2, #24
 80031ce:	f1c2 0c20 	rsb	ip, r2, #32
 80031d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80031d6:	fa20 f002 	lsr.w	r0, r0, r2
 80031da:	bf18      	it	ne
 80031dc:	f040 0001 	orrne.w	r0, r0, #1
 80031e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80031e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80031e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80031ec:	ea40 000c 	orr.w	r0, r0, ip
 80031f0:	fa23 f302 	lsr.w	r3, r3, r2
 80031f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80031f8:	e7cc      	b.n	8003194 <__aeabi_d2f+0x14>
 80031fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80031fe:	d107      	bne.n	8003210 <__aeabi_d2f+0x90>
 8003200:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8003204:	bf1e      	ittt	ne
 8003206:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800320a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800320e:	4770      	bxne	lr
 8003210:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8003214:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003218:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop

08003220 <__aeabi_uldivmod>:
 8003220:	b953      	cbnz	r3, 8003238 <__aeabi_uldivmod+0x18>
 8003222:	b94a      	cbnz	r2, 8003238 <__aeabi_uldivmod+0x18>
 8003224:	2900      	cmp	r1, #0
 8003226:	bf08      	it	eq
 8003228:	2800      	cmpeq	r0, #0
 800322a:	bf1c      	itt	ne
 800322c:	f04f 31ff 	movne.w	r1, #4294967295
 8003230:	f04f 30ff 	movne.w	r0, #4294967295
 8003234:	f000 b97a 	b.w	800352c <__aeabi_idiv0>
 8003238:	f1ad 0c08 	sub.w	ip, sp, #8
 800323c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003240:	f000 f806 	bl	8003250 <__udivmoddi4>
 8003244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800324c:	b004      	add	sp, #16
 800324e:	4770      	bx	lr

08003250 <__udivmoddi4>:
 8003250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003254:	468c      	mov	ip, r1
 8003256:	460d      	mov	r5, r1
 8003258:	4604      	mov	r4, r0
 800325a:	9e08      	ldr	r6, [sp, #32]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d151      	bne.n	8003304 <__udivmoddi4+0xb4>
 8003260:	428a      	cmp	r2, r1
 8003262:	4617      	mov	r7, r2
 8003264:	d96d      	bls.n	8003342 <__udivmoddi4+0xf2>
 8003266:	fab2 fe82 	clz	lr, r2
 800326a:	f1be 0f00 	cmp.w	lr, #0
 800326e:	d00b      	beq.n	8003288 <__udivmoddi4+0x38>
 8003270:	f1ce 0c20 	rsb	ip, lr, #32
 8003274:	fa01 f50e 	lsl.w	r5, r1, lr
 8003278:	fa20 fc0c 	lsr.w	ip, r0, ip
 800327c:	fa02 f70e 	lsl.w	r7, r2, lr
 8003280:	ea4c 0c05 	orr.w	ip, ip, r5
 8003284:	fa00 f40e 	lsl.w	r4, r0, lr
 8003288:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800328c:	0c25      	lsrs	r5, r4, #16
 800328e:	fbbc f8fa 	udiv	r8, ip, sl
 8003292:	fa1f f987 	uxth.w	r9, r7
 8003296:	fb0a cc18 	mls	ip, sl, r8, ip
 800329a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800329e:	fb08 f309 	mul.w	r3, r8, r9
 80032a2:	42ab      	cmp	r3, r5
 80032a4:	d90a      	bls.n	80032bc <__udivmoddi4+0x6c>
 80032a6:	19ed      	adds	r5, r5, r7
 80032a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80032ac:	f080 8123 	bcs.w	80034f6 <__udivmoddi4+0x2a6>
 80032b0:	42ab      	cmp	r3, r5
 80032b2:	f240 8120 	bls.w	80034f6 <__udivmoddi4+0x2a6>
 80032b6:	f1a8 0802 	sub.w	r8, r8, #2
 80032ba:	443d      	add	r5, r7
 80032bc:	1aed      	subs	r5, r5, r3
 80032be:	b2a4      	uxth	r4, r4
 80032c0:	fbb5 f0fa 	udiv	r0, r5, sl
 80032c4:	fb0a 5510 	mls	r5, sl, r0, r5
 80032c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80032cc:	fb00 f909 	mul.w	r9, r0, r9
 80032d0:	45a1      	cmp	r9, r4
 80032d2:	d909      	bls.n	80032e8 <__udivmoddi4+0x98>
 80032d4:	19e4      	adds	r4, r4, r7
 80032d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80032da:	f080 810a 	bcs.w	80034f2 <__udivmoddi4+0x2a2>
 80032de:	45a1      	cmp	r9, r4
 80032e0:	f240 8107 	bls.w	80034f2 <__udivmoddi4+0x2a2>
 80032e4:	3802      	subs	r0, #2
 80032e6:	443c      	add	r4, r7
 80032e8:	eba4 0409 	sub.w	r4, r4, r9
 80032ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80032f0:	2100      	movs	r1, #0
 80032f2:	2e00      	cmp	r6, #0
 80032f4:	d061      	beq.n	80033ba <__udivmoddi4+0x16a>
 80032f6:	fa24 f40e 	lsr.w	r4, r4, lr
 80032fa:	2300      	movs	r3, #0
 80032fc:	6034      	str	r4, [r6, #0]
 80032fe:	6073      	str	r3, [r6, #4]
 8003300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003304:	428b      	cmp	r3, r1
 8003306:	d907      	bls.n	8003318 <__udivmoddi4+0xc8>
 8003308:	2e00      	cmp	r6, #0
 800330a:	d054      	beq.n	80033b6 <__udivmoddi4+0x166>
 800330c:	2100      	movs	r1, #0
 800330e:	e886 0021 	stmia.w	r6, {r0, r5}
 8003312:	4608      	mov	r0, r1
 8003314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003318:	fab3 f183 	clz	r1, r3
 800331c:	2900      	cmp	r1, #0
 800331e:	f040 808e 	bne.w	800343e <__udivmoddi4+0x1ee>
 8003322:	42ab      	cmp	r3, r5
 8003324:	d302      	bcc.n	800332c <__udivmoddi4+0xdc>
 8003326:	4282      	cmp	r2, r0
 8003328:	f200 80fa 	bhi.w	8003520 <__udivmoddi4+0x2d0>
 800332c:	1a84      	subs	r4, r0, r2
 800332e:	eb65 0503 	sbc.w	r5, r5, r3
 8003332:	2001      	movs	r0, #1
 8003334:	46ac      	mov	ip, r5
 8003336:	2e00      	cmp	r6, #0
 8003338:	d03f      	beq.n	80033ba <__udivmoddi4+0x16a>
 800333a:	e886 1010 	stmia.w	r6, {r4, ip}
 800333e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003342:	b912      	cbnz	r2, 800334a <__udivmoddi4+0xfa>
 8003344:	2701      	movs	r7, #1
 8003346:	fbb7 f7f2 	udiv	r7, r7, r2
 800334a:	fab7 fe87 	clz	lr, r7
 800334e:	f1be 0f00 	cmp.w	lr, #0
 8003352:	d134      	bne.n	80033be <__udivmoddi4+0x16e>
 8003354:	1beb      	subs	r3, r5, r7
 8003356:	0c3a      	lsrs	r2, r7, #16
 8003358:	fa1f fc87 	uxth.w	ip, r7
 800335c:	2101      	movs	r1, #1
 800335e:	fbb3 f8f2 	udiv	r8, r3, r2
 8003362:	0c25      	lsrs	r5, r4, #16
 8003364:	fb02 3318 	mls	r3, r2, r8, r3
 8003368:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800336c:	fb0c f308 	mul.w	r3, ip, r8
 8003370:	42ab      	cmp	r3, r5
 8003372:	d907      	bls.n	8003384 <__udivmoddi4+0x134>
 8003374:	19ed      	adds	r5, r5, r7
 8003376:	f108 30ff 	add.w	r0, r8, #4294967295
 800337a:	d202      	bcs.n	8003382 <__udivmoddi4+0x132>
 800337c:	42ab      	cmp	r3, r5
 800337e:	f200 80d1 	bhi.w	8003524 <__udivmoddi4+0x2d4>
 8003382:	4680      	mov	r8, r0
 8003384:	1aed      	subs	r5, r5, r3
 8003386:	b2a3      	uxth	r3, r4
 8003388:	fbb5 f0f2 	udiv	r0, r5, r2
 800338c:	fb02 5510 	mls	r5, r2, r0, r5
 8003390:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8003394:	fb0c fc00 	mul.w	ip, ip, r0
 8003398:	45a4      	cmp	ip, r4
 800339a:	d907      	bls.n	80033ac <__udivmoddi4+0x15c>
 800339c:	19e4      	adds	r4, r4, r7
 800339e:	f100 33ff 	add.w	r3, r0, #4294967295
 80033a2:	d202      	bcs.n	80033aa <__udivmoddi4+0x15a>
 80033a4:	45a4      	cmp	ip, r4
 80033a6:	f200 80b8 	bhi.w	800351a <__udivmoddi4+0x2ca>
 80033aa:	4618      	mov	r0, r3
 80033ac:	eba4 040c 	sub.w	r4, r4, ip
 80033b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80033b4:	e79d      	b.n	80032f2 <__udivmoddi4+0xa2>
 80033b6:	4631      	mov	r1, r6
 80033b8:	4630      	mov	r0, r6
 80033ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033be:	f1ce 0420 	rsb	r4, lr, #32
 80033c2:	fa05 f30e 	lsl.w	r3, r5, lr
 80033c6:	fa07 f70e 	lsl.w	r7, r7, lr
 80033ca:	fa20 f804 	lsr.w	r8, r0, r4
 80033ce:	0c3a      	lsrs	r2, r7, #16
 80033d0:	fa25 f404 	lsr.w	r4, r5, r4
 80033d4:	ea48 0803 	orr.w	r8, r8, r3
 80033d8:	fbb4 f1f2 	udiv	r1, r4, r2
 80033dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80033e0:	fb02 4411 	mls	r4, r2, r1, r4
 80033e4:	fa1f fc87 	uxth.w	ip, r7
 80033e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80033ec:	fb01 f30c 	mul.w	r3, r1, ip
 80033f0:	42ab      	cmp	r3, r5
 80033f2:	fa00 f40e 	lsl.w	r4, r0, lr
 80033f6:	d909      	bls.n	800340c <__udivmoddi4+0x1bc>
 80033f8:	19ed      	adds	r5, r5, r7
 80033fa:	f101 30ff 	add.w	r0, r1, #4294967295
 80033fe:	f080 808a 	bcs.w	8003516 <__udivmoddi4+0x2c6>
 8003402:	42ab      	cmp	r3, r5
 8003404:	f240 8087 	bls.w	8003516 <__udivmoddi4+0x2c6>
 8003408:	3902      	subs	r1, #2
 800340a:	443d      	add	r5, r7
 800340c:	1aeb      	subs	r3, r5, r3
 800340e:	fa1f f588 	uxth.w	r5, r8
 8003412:	fbb3 f0f2 	udiv	r0, r3, r2
 8003416:	fb02 3310 	mls	r3, r2, r0, r3
 800341a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800341e:	fb00 f30c 	mul.w	r3, r0, ip
 8003422:	42ab      	cmp	r3, r5
 8003424:	d907      	bls.n	8003436 <__udivmoddi4+0x1e6>
 8003426:	19ed      	adds	r5, r5, r7
 8003428:	f100 38ff 	add.w	r8, r0, #4294967295
 800342c:	d26f      	bcs.n	800350e <__udivmoddi4+0x2be>
 800342e:	42ab      	cmp	r3, r5
 8003430:	d96d      	bls.n	800350e <__udivmoddi4+0x2be>
 8003432:	3802      	subs	r0, #2
 8003434:	443d      	add	r5, r7
 8003436:	1aeb      	subs	r3, r5, r3
 8003438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800343c:	e78f      	b.n	800335e <__udivmoddi4+0x10e>
 800343e:	f1c1 0720 	rsb	r7, r1, #32
 8003442:	fa22 f807 	lsr.w	r8, r2, r7
 8003446:	408b      	lsls	r3, r1
 8003448:	fa05 f401 	lsl.w	r4, r5, r1
 800344c:	ea48 0303 	orr.w	r3, r8, r3
 8003450:	fa20 fe07 	lsr.w	lr, r0, r7
 8003454:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8003458:	40fd      	lsrs	r5, r7
 800345a:	ea4e 0e04 	orr.w	lr, lr, r4
 800345e:	fbb5 f9fc 	udiv	r9, r5, ip
 8003462:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8003466:	fb0c 5519 	mls	r5, ip, r9, r5
 800346a:	fa1f f883 	uxth.w	r8, r3
 800346e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8003472:	fb09 f408 	mul.w	r4, r9, r8
 8003476:	42ac      	cmp	r4, r5
 8003478:	fa02 f201 	lsl.w	r2, r2, r1
 800347c:	fa00 fa01 	lsl.w	sl, r0, r1
 8003480:	d908      	bls.n	8003494 <__udivmoddi4+0x244>
 8003482:	18ed      	adds	r5, r5, r3
 8003484:	f109 30ff 	add.w	r0, r9, #4294967295
 8003488:	d243      	bcs.n	8003512 <__udivmoddi4+0x2c2>
 800348a:	42ac      	cmp	r4, r5
 800348c:	d941      	bls.n	8003512 <__udivmoddi4+0x2c2>
 800348e:	f1a9 0902 	sub.w	r9, r9, #2
 8003492:	441d      	add	r5, r3
 8003494:	1b2d      	subs	r5, r5, r4
 8003496:	fa1f fe8e 	uxth.w	lr, lr
 800349a:	fbb5 f0fc 	udiv	r0, r5, ip
 800349e:	fb0c 5510 	mls	r5, ip, r0, r5
 80034a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80034a6:	fb00 f808 	mul.w	r8, r0, r8
 80034aa:	45a0      	cmp	r8, r4
 80034ac:	d907      	bls.n	80034be <__udivmoddi4+0x26e>
 80034ae:	18e4      	adds	r4, r4, r3
 80034b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80034b4:	d229      	bcs.n	800350a <__udivmoddi4+0x2ba>
 80034b6:	45a0      	cmp	r8, r4
 80034b8:	d927      	bls.n	800350a <__udivmoddi4+0x2ba>
 80034ba:	3802      	subs	r0, #2
 80034bc:	441c      	add	r4, r3
 80034be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80034c2:	eba4 0408 	sub.w	r4, r4, r8
 80034c6:	fba0 8902 	umull	r8, r9, r0, r2
 80034ca:	454c      	cmp	r4, r9
 80034cc:	46c6      	mov	lr, r8
 80034ce:	464d      	mov	r5, r9
 80034d0:	d315      	bcc.n	80034fe <__udivmoddi4+0x2ae>
 80034d2:	d012      	beq.n	80034fa <__udivmoddi4+0x2aa>
 80034d4:	b156      	cbz	r6, 80034ec <__udivmoddi4+0x29c>
 80034d6:	ebba 030e 	subs.w	r3, sl, lr
 80034da:	eb64 0405 	sbc.w	r4, r4, r5
 80034de:	fa04 f707 	lsl.w	r7, r4, r7
 80034e2:	40cb      	lsrs	r3, r1
 80034e4:	431f      	orrs	r7, r3
 80034e6:	40cc      	lsrs	r4, r1
 80034e8:	6037      	str	r7, [r6, #0]
 80034ea:	6074      	str	r4, [r6, #4]
 80034ec:	2100      	movs	r1, #0
 80034ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f2:	4618      	mov	r0, r3
 80034f4:	e6f8      	b.n	80032e8 <__udivmoddi4+0x98>
 80034f6:	4690      	mov	r8, r2
 80034f8:	e6e0      	b.n	80032bc <__udivmoddi4+0x6c>
 80034fa:	45c2      	cmp	sl, r8
 80034fc:	d2ea      	bcs.n	80034d4 <__udivmoddi4+0x284>
 80034fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8003502:	eb69 0503 	sbc.w	r5, r9, r3
 8003506:	3801      	subs	r0, #1
 8003508:	e7e4      	b.n	80034d4 <__udivmoddi4+0x284>
 800350a:	4628      	mov	r0, r5
 800350c:	e7d7      	b.n	80034be <__udivmoddi4+0x26e>
 800350e:	4640      	mov	r0, r8
 8003510:	e791      	b.n	8003436 <__udivmoddi4+0x1e6>
 8003512:	4681      	mov	r9, r0
 8003514:	e7be      	b.n	8003494 <__udivmoddi4+0x244>
 8003516:	4601      	mov	r1, r0
 8003518:	e778      	b.n	800340c <__udivmoddi4+0x1bc>
 800351a:	3802      	subs	r0, #2
 800351c:	443c      	add	r4, r7
 800351e:	e745      	b.n	80033ac <__udivmoddi4+0x15c>
 8003520:	4608      	mov	r0, r1
 8003522:	e708      	b.n	8003336 <__udivmoddi4+0xe6>
 8003524:	f1a8 0802 	sub.w	r8, r8, #2
 8003528:	443d      	add	r5, r7
 800352a:	e72b      	b.n	8003384 <__udivmoddi4+0x134>

0800352c <__aeabi_idiv0>:
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop

08003530 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 8003530:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8003532:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80035a0 <arm_dot_prod_f32+0x70>

#ifndef ARM_MATH_CM0_FAMILY

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8003536:	0896      	lsrs	r6, r2, #2
 8003538:	4605      	mov	r5, r0
 800353a:	460c      	mov	r4, r1
 800353c:	4637      	mov	r7, r6
 800353e:	3510      	adds	r5, #16
 8003540:	3410      	adds	r4, #16

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8003542:	b95f      	cbnz	r7, 800355c <arm_dot_prod_f32+0x2c>
 8003544:	0134      	lsls	r4, r6, #4
 8003546:	4421      	add	r1, r4
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8003548:	f002 0203 	and.w	r2, r2, #3
 800354c:	4420      	add	r0, r4
 800354e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */


  while(blkCnt > 0u)
 8003552:	4291      	cmp	r1, r2
 8003554:	d11c      	bne.n	8003590 <arm_dot_prod_f32+0x60>

    /* Decrement the loop counter */
    blkCnt--;
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 8003556:	edc3 7a00 	vstr	s15, [r3]
 800355a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sum += (*pSrcA++) * (*pSrcB++);
 800355c:	ed55 6a04 	vldr	s13, [r5, #-16]
 8003560:	ed14 7a04 	vldr	s14, [r4, #-16]
 8003564:	eee6 7a87 	vfma.f32	s15, s13, s14
    blkCnt--;
 8003568:	3f01      	subs	r7, #1
    sum += (*pSrcA++) * (*pSrcB++);
 800356a:	ed55 6a03 	vldr	s13, [r5, #-12]
 800356e:	ed14 7a03 	vldr	s14, [r4, #-12]
 8003572:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 8003576:	ed55 6a02 	vldr	s13, [r5, #-8]
 800357a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800357e:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 8003582:	ed55 6a01 	vldr	s13, [r5, #-4]
 8003586:	ed14 7a01 	vldr	s14, [r4, #-4]
 800358a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800358e:	e7d6      	b.n	800353e <arm_dot_prod_f32+0xe>
    sum += (*pSrcA++) * (*pSrcB++);
 8003590:	ecf0 6a01 	vldmia	r0!, {s13}
 8003594:	ecb1 7a01 	vldmia	r1!, {s14}
 8003598:	eee6 7a87 	vfma.f32	s15, s13, s14
 800359c:	e7d9      	b.n	8003552 <arm_dot_prod_f32+0x22>
 800359e:	bf00      	nop
 80035a0:	00000000 	.word	0x00000000

080035a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035a4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <HAL_InitTick+0x2c>)
{
 80035a8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80035b4:	f000 f892 	bl	80036dc <HAL_SYSTICK_Config>
 80035b8:	4604      	mov	r4, r0
 80035ba:	b938      	cbnz	r0, 80035cc <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80035bc:	4602      	mov	r2, r0
 80035be:	4629      	mov	r1, r5
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	f000 f84a 	bl	800365c <HAL_NVIC_SetPriority>
 80035c8:	4620      	mov	r0, r4
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80035cc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
 80035d0:	200006b0 	.word	0x200006b0

080035d4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035d4:	4a09      	ldr	r2, [pc, #36]	; (80035fc <HAL_Init+0x28>)
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80035dc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035de:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035e0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035e2:	f000 f829 	bl	8003638 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035e6:	2000      	movs	r0, #0
 80035e8:	f7ff ffdc 	bl	80035a4 <HAL_InitTick>
 80035ec:	4604      	mov	r4, r0
 80035ee:	b918      	cbnz	r0, 80035f8 <HAL_Init+0x24>
    HAL_MspInit();
 80035f0:	f003 ff58 	bl	80074a4 <HAL_MspInit>
}
 80035f4:	4620      	mov	r0, r4
 80035f6:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80035f8:	2401      	movs	r4, #1
 80035fa:	e7fb      	b.n	80035f4 <HAL_Init+0x20>
 80035fc:	40022000 	.word	0x40022000

08003600 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003600:	4a02      	ldr	r2, [pc, #8]	; (800360c <HAL_IncTick+0xc>)
 8003602:	6813      	ldr	r3, [r2, #0]
 8003604:	3301      	adds	r3, #1
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	2000c644 	.word	0x2000c644

08003610 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003610:	4b01      	ldr	r3, [pc, #4]	; (8003618 <HAL_GetTick+0x8>)
 8003612:	6818      	ldr	r0, [r3, #0]
}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	2000c644 	.word	0x2000c644

0800361c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800361c:	b538      	push	{r3, r4, r5, lr}
 800361e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003620:	f7ff fff6 	bl	8003610 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003624:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003626:	4605      	mov	r5, r0
  {
    wait++;
 8003628:	bf18      	it	ne
 800362a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800362c:	f7ff fff0 	bl	8003610 <HAL_GetTick>
 8003630:	1b40      	subs	r0, r0, r5
 8003632:	4284      	cmp	r4, r0
 8003634:	d8fa      	bhi.n	800362c <HAL_Delay+0x10>
  {
  }
}
 8003636:	bd38      	pop	{r3, r4, r5, pc}

08003638 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003638:	4a07      	ldr	r2, [pc, #28]	; (8003658 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800363a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800363c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003640:	041b      	lsls	r3, r3, #16
 8003642:	0c1b      	lsrs	r3, r3, #16
 8003644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003648:	0200      	lsls	r0, r0, #8
 800364a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8003652:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003654:	60d3      	str	r3, [r2, #12]
 8003656:	4770      	bx	lr
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800365e:	b530      	push	{r4, r5, lr}
 8003660:	68dc      	ldr	r4, [r3, #12]
 8003662:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003666:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800366c:	2b04      	cmp	r3, #4
 800366e:	bf28      	it	cs
 8003670:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003672:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	f04f 0501 	mov.w	r5, #1
 8003678:	fa05 f303 	lsl.w	r3, r5, r3
 800367c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003680:	bf8c      	ite	hi
 8003682:	3c03      	subhi	r4, #3
 8003684:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003686:	4019      	ands	r1, r3
 8003688:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800368a:	fa05 f404 	lsl.w	r4, r5, r4
 800368e:	3c01      	subs	r4, #1
 8003690:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8003692:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003694:	ea42 0201 	orr.w	r2, r2, r1
 8003698:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369c:	bfaf      	iteee	ge
 800369e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a2:	f000 000f 	andlt.w	r0, r0, #15
 80036a6:	4b06      	ldrlt	r3, [pc, #24]	; (80036c0 <HAL_NVIC_SetPriority+0x64>)
 80036a8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036aa:	bfa5      	ittet	ge
 80036ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80036b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80036b8:	bd30      	pop	{r4, r5, pc}
 80036ba:	bf00      	nop
 80036bc:	e000ed00 	.word	0xe000ed00
 80036c0:	e000ed14 	.word	0xe000ed14

080036c4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80036c4:	0942      	lsrs	r2, r0, #5
 80036c6:	2301      	movs	r3, #1
 80036c8:	f000 001f 	and.w	r0, r0, #31
 80036cc:	fa03 f000 	lsl.w	r0, r3, r0
 80036d0:	4b01      	ldr	r3, [pc, #4]	; (80036d8 <HAL_NVIC_EnableIRQ+0x14>)
 80036d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80036d6:	4770      	bx	lr
 80036d8:	e000e100 	.word	0xe000e100

080036dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036dc:	3801      	subs	r0, #1
 80036de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80036e2:	d20a      	bcs.n	80036fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e6:	4a07      	ldr	r2, [pc, #28]	; (8003704 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ea:	21f0      	movs	r1, #240	; 0xf0
 80036ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80036fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000e010 	.word	0xe000e010
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003708:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800370a:	4604      	mov	r4, r0
 800370c:	b908      	cbnz	r0, 8003712 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800370e:	2001      	movs	r0, #1
 8003710:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003712:	7f43      	ldrb	r3, [r0, #29]
 8003714:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003718:	b913      	cbnz	r3, 8003720 <HAL_CRC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800371a:	7702      	strb	r2, [r0, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800371c:	f002 fde0 	bl	80062e0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003720:	2302      	movs	r3, #2
 8003722:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003724:	7923      	ldrb	r3, [r4, #4]
 8003726:	b9e3      	cbnz	r3, 8003762 <HAL_CRC_Init+0x5a>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	4a13      	ldr	r2, [pc, #76]	; (8003778 <HAL_CRC_Init+0x70>)
 800372c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	f022 0218 	bic.w	r2, r2, #24
 8003734:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003736:	7962      	ldrb	r2, [r4, #5]
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	b9d2      	cbnz	r2, 8003772 <HAL_CRC_Init+0x6a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800373c:	f04f 32ff 	mov.w	r2, #4294967295
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003740:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	6961      	ldr	r1, [r4, #20]
 8003746:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	69a1      	ldr	r1, [r4, #24]
 8003752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003756:	430a      	orrs	r2, r1
 8003758:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800375a:	2301      	movs	r3, #1
 800375c:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800375e:	2000      	movs	r0, #0
}
 8003760:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003762:	68e2      	ldr	r2, [r4, #12]
 8003764:	68a1      	ldr	r1, [r4, #8]
 8003766:	4620      	mov	r0, r4
 8003768:	f000 f808 	bl	800377c <HAL_CRCEx_Polynomial_Set>
 800376c:	2800      	cmp	r0, #0
 800376e:	d0e2      	beq.n	8003736 <HAL_CRC_Init+0x2e>
 8003770:	e7cd      	b.n	800370e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003772:	6922      	ldr	r2, [r4, #16]
 8003774:	e7e4      	b.n	8003740 <HAL_CRC_Init+0x38>
 8003776:	bf00      	nop
 8003778:	04c11db7 	.word	0x04c11db7

0800377c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800377c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800377e:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003780:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003784:	d306      	bcc.n	8003794 <HAL_CRCEx_Polynomial_Set+0x18>
 8003786:	fa21 f403 	lsr.w	r4, r1, r3
 800378a:	07e4      	lsls	r4, r4, #31
 800378c:	d5f8      	bpl.n	8003780 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800378e:	2a08      	cmp	r2, #8
 8003790:	d014      	beq.n	80037bc <HAL_CRCEx_Polynomial_Set+0x40>
 8003792:	d809      	bhi.n	80037a8 <HAL_CRCEx_Polynomial_Set+0x2c>
 8003794:	b972      	cbnz	r2, 80037b4 <HAL_CRCEx_Polynomial_Set+0x38>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003796:	6800      	ldr	r0, [r0, #0]
 8003798:	6141      	str	r1, [r0, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800379a:	6883      	ldr	r3, [r0, #8]
 800379c:	f023 0318 	bic.w	r3, r3, #24
 80037a0:	431a      	orrs	r2, r3
 80037a2:	6082      	str	r2, [r0, #8]
 80037a4:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
 80037a6:	bd10      	pop	{r4, pc}
  switch (PolyLength)
 80037a8:	2a10      	cmp	r2, #16
 80037aa:	d005      	beq.n	80037b8 <HAL_CRCEx_Polynomial_Set+0x3c>
 80037ac:	2a18      	cmp	r2, #24
 80037ae:	d101      	bne.n	80037b4 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_7B)
 80037b0:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80037b2:	d9f0      	bls.n	8003796 <HAL_CRCEx_Polynomial_Set+0x1a>
  switch (PolyLength)
 80037b4:	2001      	movs	r0, #1
 80037b6:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80037b8:	2b07      	cmp	r3, #7
 80037ba:	e7fa      	b.n	80037b2 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 80037bc:	2b0f      	cmp	r3, #15
 80037be:	e7f8      	b.n	80037b2 <HAL_CRCEx_Polynomial_Set+0x36>

080037c0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80037c0:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 80037c2:	4604      	mov	r4, r0
 80037c4:	b168      	cbz	r0, 80037e2 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80037c6:	7903      	ldrb	r3, [r0, #4]
 80037c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037cc:	b913      	cbnz	r3, 80037d4 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80037ce:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80037d0:	f002 fdc8 	bl	8006364 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80037d4:	2302      	movs	r3, #2
 80037d6:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037d8:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80037da:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037dc:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80037de:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80037e0:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80037e2:	2001      	movs	r0, #1
}
 80037e4:	bd10      	pop	{r4, pc}

080037e6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80037e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037e8:	7943      	ldrb	r3, [r0, #5]
 80037ea:	2b01      	cmp	r3, #1
{
 80037ec:	4604      	mov	r4, r0
 80037ee:	460d      	mov	r5, r1
 80037f0:	4616      	mov	r6, r2
 80037f2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 80037f6:	d063      	beq.n	80038c0 <HAL_DAC_ConfigChannel+0xda>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80037f8:	680b      	ldr	r3, [r1, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037fa:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 80037fc:	2201      	movs	r2, #1

  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80037fe:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 8003800:	7162      	strb	r2, [r4, #5]
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003802:	d125      	bne.n	8003850 <HAL_DAC_ConfigChannel+0x6a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003804:	2e00      	cmp	r6, #0
 8003806:	d16c      	bne.n	80038e2 <HAL_DAC_ConfigChannel+0xfc>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003808:	f7ff ff02 	bl	8003610 <HAL_GetTick>
 800380c:	4607      	mov	r7, r0

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003812:	041b      	lsls	r3, r3, #16
 8003814:	d455      	bmi.n	80038c2 <HAL_DAC_ConfigChannel+0xdc>
          hdac->State = HAL_DAC_STATE_TIMEOUT;

          return HAL_TIMEOUT;
        }
      }
      HAL_Delay(1);
 8003816:	2001      	movs	r0, #1
 8003818:	f7ff ff00 	bl	800361c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	69aa      	ldr	r2, [r5, #24]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003822:	6821      	ldr	r1, [r4, #0]
 8003824:	f006 0010 	and.w	r0, r6, #16
 8003828:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800382a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800382e:	4083      	lsls	r3, r0
 8003830:	ea22 0203 	bic.w	r2, r2, r3
 8003834:	69eb      	ldr	r3, [r5, #28]
 8003836:	4083      	lsls	r3, r0
 8003838:	431a      	orrs	r2, r3
 800383a:	648a      	str	r2, [r1, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800383c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800383e:	22ff      	movs	r2, #255	; 0xff
 8003840:	4082      	lsls	r2, r0
 8003842:	ea23 0302 	bic.w	r3, r3, r2
 8003846:	6a2a      	ldr	r2, [r5, #32]
 8003848:	fa02 f000 	lsl.w	r0, r2, r0
 800384c:	4303      	orrs	r3, r0
 800384e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003850:	692b      	ldr	r3, [r5, #16]
 8003852:	2b01      	cmp	r3, #1
 8003854:	f006 0210 	and.w	r2, r6, #16
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	d108      	bne.n	800386e <HAL_DAC_ConfigChannel+0x88>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 800385c:	6b99      	ldr	r1, [r3, #56]	; 0x38
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800385e:	201f      	movs	r0, #31
 8003860:	4090      	lsls	r0, r2
 8003862:	ea21 0000 	bic.w	r0, r1, r0
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003866:	6969      	ldr	r1, [r5, #20]
 8003868:	4091      	lsls	r1, r2
 800386a:	4301      	orrs	r1, r0
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 800386c:	6399      	str	r1, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800386e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003870:	68ae      	ldr	r6, [r5, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003872:	2007      	movs	r0, #7
 8003874:	4090      	lsls	r0, r2
 8003876:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800387a:	6829      	ldr	r1, [r5, #0]
 800387c:	4331      	orrs	r1, r6
 800387e:	68ee      	ldr	r6, [r5, #12]
 8003880:	4331      	orrs	r1, r6
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003882:	4091      	lsls	r1, r2
 8003884:	4301      	orrs	r1, r0
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003886:	63d9      	str	r1, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800388e:	4090      	lsls	r0, r2
 8003890:	ea21 0100 	bic.w	r1, r1, r0
 8003894:	6019      	str	r1, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003896:	6819      	ldr	r1, [r3, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003898:	f640 70fc 	movw	r0, #4092	; 0xffc
 800389c:	4090      	lsls	r0, r2
 800389e:	ea21 0000 	bic.w	r0, r1, r0
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038a2:	6869      	ldr	r1, [r5, #4]
 80038a4:	4091      	lsls	r1, r2
 80038a6:	4301      	orrs	r1, r0
  }

#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038a8:	6019      	str	r1, [r3, #0]

  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80038aa:	6819      	ldr	r1, [r3, #0]
 80038ac:	20c0      	movs	r0, #192	; 0xc0
 80038ae:	fa00 f202 	lsl.w	r2, r0, r2
 80038b2:	ea21 0202 	bic.w	r2, r1, r2
 80038b6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038b8:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80038ba:	2301      	movs	r3, #1
 80038bc:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 80038be:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 80038c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80038c2:	f7ff fea5 	bl	8003610 <HAL_GetTick>
 80038c6:	1bc0      	subs	r0, r0, r7
 80038c8:	2801      	cmp	r0, #1
 80038ca:	d9a0      	bls.n	800380e <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80038cc:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80038ce:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80038d0:	f043 0308 	orr.w	r3, r3, #8
 80038d4:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80038d6:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80038d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80038da:	f7ff fe99 	bl	8003610 <HAL_GetTick>
 80038de:	2801      	cmp	r0, #1
 80038e0:	d8f4      	bhi.n	80038cc <HAL_DAC_ConfigChannel+0xe6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	dbf7      	blt.n	80038da <HAL_DAC_ConfigChannel+0xf4>
      HAL_Delay(1);
 80038ea:	2001      	movs	r0, #1
 80038ec:	f7ff fe96 	bl	800361c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	69aa      	ldr	r2, [r5, #24]
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44
 80038f6:	e794      	b.n	8003822 <HAL_DAC_ConfigChannel+0x3c>

080038f8 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80038f8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80038fa:	6803      	ldr	r3, [r0, #0]
 80038fc:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 8003900:	b93a      	cbnz	r2, 8003912 <DFSDM_RegConvStart+0x1a>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003908:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800390a:	2901      	cmp	r1, #1
 800390c:	d11c      	bne.n	8003948 <DFSDM_RegConvStart+0x50>
 800390e:	2302      	movs	r3, #2
 8003910:	e01b      	b.n	800394a <DFSDM_RegConvStart+0x52>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003920:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003922:	681a      	ldr	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003924:	2903      	cmp	r1, #3
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800392c:	d1ed      	bne.n	800390a <DFSDM_RegConvStart+0x12>
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800392e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003930:	b91a      	cbnz	r2, 800393a <DFSDM_RegConvStart+0x42>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	f042 0202 	orr.w	r2, r2, #2
 8003938:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800393a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800393e:	2b01      	cmp	r3, #1
 8003940:	bf0c      	ite	eq
 8003942:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 8003944:	2301      	movne	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003946:	6483      	str	r3, [r0, #72]	; 0x48
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003948:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800394a:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 800394e:	4770      	bx	lr

08003950 <DFSDM_GetChannelFromInstance>:
  if (Instance == DFSDM1_Channel0)
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <DFSDM_GetChannelFromInstance+0x54>)
 8003952:	4298      	cmp	r0, r3
 8003954:	d017      	beq.n	8003986 <DFSDM_GetChannelFromInstance+0x36>
  else if (Instance == DFSDM1_Channel1)
 8003956:	3320      	adds	r3, #32
 8003958:	4298      	cmp	r0, r3
 800395a:	d016      	beq.n	800398a <DFSDM_GetChannelFromInstance+0x3a>
  else if (Instance == DFSDM1_Channel2)
 800395c:	3320      	adds	r3, #32
 800395e:	4298      	cmp	r0, r3
 8003960:	d015      	beq.n	800398e <DFSDM_GetChannelFromInstance+0x3e>
  else if (Instance == DFSDM1_Channel3)
 8003962:	3320      	adds	r3, #32
 8003964:	4298      	cmp	r0, r3
 8003966:	d014      	beq.n	8003992 <DFSDM_GetChannelFromInstance+0x42>
  else if (Instance == DFSDM1_Channel4)
 8003968:	3320      	adds	r3, #32
 800396a:	4298      	cmp	r0, r3
 800396c:	d013      	beq.n	8003996 <DFSDM_GetChannelFromInstance+0x46>
  else if (Instance == DFSDM1_Channel5)
 800396e:	3320      	adds	r3, #32
 8003970:	4298      	cmp	r0, r3
 8003972:	d012      	beq.n	800399a <DFSDM_GetChannelFromInstance+0x4a>
  else if (Instance == DFSDM1_Channel6)
 8003974:	3320      	adds	r3, #32
 8003976:	4298      	cmp	r0, r3
 8003978:	d011      	beq.n	800399e <DFSDM_GetChannelFromInstance+0x4e>
    channel = 7;
 800397a:	3320      	adds	r3, #32
 800397c:	4298      	cmp	r0, r3
 800397e:	bf0c      	ite	eq
 8003980:	2007      	moveq	r0, #7
 8003982:	2000      	movne	r0, #0
 8003984:	4770      	bx	lr
    channel = 0;
 8003986:	2000      	movs	r0, #0
 8003988:	4770      	bx	lr
    channel = 1;
 800398a:	2001      	movs	r0, #1
 800398c:	4770      	bx	lr
    channel = 2;
 800398e:	2002      	movs	r0, #2
 8003990:	4770      	bx	lr
    channel = 3;
 8003992:	2003      	movs	r0, #3
 8003994:	4770      	bx	lr
    channel = 4;
 8003996:	2004      	movs	r0, #4
 8003998:	4770      	bx	lr
    channel = 5;
 800399a:	2005      	movs	r0, #5
 800399c:	4770      	bx	lr
    channel = 6;
 800399e:	2006      	movs	r0, #6
}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40016000 	.word	0x40016000

080039a8 <HAL_DFSDM_ChannelInit>:
{
 80039a8:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 80039aa:	4604      	mov	r4, r0
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d067      	beq.n	8003a80 <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80039b0:	6800      	ldr	r0, [r0, #0]
 80039b2:	4d34      	ldr	r5, [pc, #208]	; (8003a84 <HAL_DFSDM_ChannelInit+0xdc>)
 80039b4:	f7ff ffcc 	bl	8003950 <DFSDM_GetChannelFromInstance>
 80039b8:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d15f      	bne.n	8003a80 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80039c0:	4620      	mov	r0, r4
 80039c2:	f002 fef7 	bl	80067b4 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 80039c6:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <HAL_DFSDM_ChannelInit+0xe0>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	3201      	adds	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d119      	bne.n	8003a08 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80039d4:	4b2d      	ldr	r3, [pc, #180]	; (8003a8c <HAL_DFSDM_ChannelInit+0xe4>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80039dc:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68a1      	ldr	r1, [r4, #8]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80039ec:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80039ee:	7922      	ldrb	r2, [r4, #4]
 80039f0:	2a01      	cmp	r2, #1
 80039f2:	d105      	bne.n	8003a00 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80039f4:	68e1      	ldr	r1, [r4, #12]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	3901      	subs	r1, #1
 80039fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80039fe:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a06:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003a08:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a0a:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003a0c:	6803      	ldr	r3, [r0, #0]
 8003a0e:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8003a12:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a14:	6923      	ldr	r3, [r4, #16]
 8003a16:	6802      	ldr	r2, [r0, #0]
 8003a18:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a1a:	69a1      	ldr	r1, [r4, #24]
 8003a1c:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003a22:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003a24:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003a26:	f023 030f 	bic.w	r3, r3, #15
 8003a2a:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003a2c:	69e3      	ldr	r3, [r4, #28]
 8003a2e:	6802      	ldr	r2, [r0, #0]
 8003a30:	430b      	orrs	r3, r1
 8003a32:	4313      	orrs	r3, r2
 8003a34:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003a36:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003a38:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003a3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003a3c:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8003a40:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003a42:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003a44:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003a46:	430b      	orrs	r3, r1
 8003a48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a4c:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003a4e:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003a50:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003a58:	6843      	ldr	r3, [r0, #4]
 8003a5a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003a5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a64:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003a66:	6803      	ldr	r3, [r0, #0]
 8003a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6c:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003a74:	f7ff ff6c 	bl	8003950 <DFSDM_GetChannelFromInstance>
 8003a78:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003a80:	2001      	movs	r0, #1
}
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
 8003a84:	200008a4 	.word	0x200008a4
 8003a88:	200008c4 	.word	0x200008c4
 8003a8c:	40016000 	.word	0x40016000

08003a90 <HAL_DFSDM_FilterInit>:
{
 8003a90:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_filter == NULL)
 8003a92:	4604      	mov	r4, r0
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d069      	beq.n	8003b6c <HAL_DFSDM_FilterInit+0xdc>
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003a98:	6802      	ldr	r2, [r0, #0]
 8003a9a:	4b35      	ldr	r3, [pc, #212]	; (8003b70 <HAL_DFSDM_FilterInit+0xe0>)
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d105      	bne.n	8003aac <HAL_DFSDM_FilterInit+0x1c>
 8003aa0:	6840      	ldr	r0, [r0, #4]
 8003aa2:	2801      	cmp	r0, #1
 8003aa4:	d063      	beq.n	8003b6e <HAL_DFSDM_FilterInit+0xde>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003aa6:	68e0      	ldr	r0, [r4, #12]
 8003aa8:	2801      	cmp	r0, #1
 8003aaa:	d060      	beq.n	8003b6e <HAL_DFSDM_FilterInit+0xde>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003aac:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003aae:	2201      	movs	r2, #1
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003ab0:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003ab2:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003ab4:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003ab6:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f002 fdf5 	bl	80066a8 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003abe:	6823      	ldr	r3, [r4, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003ac0:	7c20      	ldrb	r0, [r4, #16]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003ac8:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003aca:	7a22      	ldrb	r2, [r4, #8]
 8003acc:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	bf0c      	ite	eq
 8003ad2:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003ad6:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 8003ada:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003adc:	7a62      	ldrb	r2, [r4, #9]
 8003ade:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	bf0c      	ite	eq
 8003ae4:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003ae8:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 8003aec:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003aee:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003af0:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003af2:	f422 42ce 	bic.w	r2, r2, #26368	; 0x6700
 8003af6:	f022 0208 	bic.w	r2, r2, #8
 8003afa:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003afc:	2d02      	cmp	r5, #2
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003afe:	bf01      	itttt	eq
 8003b00:	681a      	ldreq	r2, [r3, #0]
 8003b02:	6961      	ldreq	r1, [r4, #20]
 8003b04:	430a      	orreq	r2, r1
 8003b06:	601a      	streq	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003b08:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003b0a:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003b0c:	bf0c      	ite	eq
 8003b0e:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003b12:	f022 0210 	bicne.w	r2, r2, #16
 8003b16:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003b18:	7c62      	ldrb	r2, [r4, #17]
 8003b1a:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	bf0c      	ite	eq
 8003b20:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003b24:	f022 0220 	bicne.w	r2, r2, #32
 8003b28:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 8003b30:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8003b34:	615a      	str	r2, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003b36:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003b38:	6959      	ldr	r1, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003b3a:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	69e1      	ldr	r1, [r4, #28]
 8003b40:	430a      	orrs	r2, r1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003b42:	6a21      	ldr	r1, [r4, #32]
 8003b44:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003b46:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003b4a:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003b4c:	6862      	ldr	r2, [r4, #4]
 8003b4e:	6362      	str	r2, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003b50:	69a2      	ldr	r2, [r4, #24]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003b52:	63a5      	str	r5, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003b54:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003b56:	681a      	ldr	r2, [r3, #0]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003b58:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 8003b68:	2000      	movs	r0, #0
 8003b6a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003b6c:	2001      	movs	r0, #1
}
 8003b6e:	bd38      	pop	{r3, r4, r5, pc}
 8003b70:	40016100 	.word	0x40016100

08003b74 <HAL_DFSDM_FilterConfigRegChannel>:
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003b74:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2bfd      	cmp	r3, #253	; 0xfd
{
 8003b7e:	b510      	push	{r4, lr}
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003b80:	d813      	bhi.n	8003baa <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003b82:	6803      	ldr	r3, [r0, #0]
 8003b84:	681c      	ldr	r4, [r3, #0]
 8003b86:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 8003b8a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8003b8e:	601c      	str	r4, [r3, #0]
 8003b90:	0209      	lsls	r1, r1, #8
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003b92:	681c      	ldr	r4, [r3, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003b94:	2a01      	cmp	r2, #1
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003b96:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8003b9a:	bf08      	it	eq
 8003b9c:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003ba0:	4321      	orrs	r1, r4
 8003ba2:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003ba4:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003baa:	2001      	movs	r0, #1
}
 8003bac:	bd10      	pop	{r4, pc}
	...

08003bb0 <HAL_DFSDM_FilterRegularStart_DMA>:
{
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	4605      	mov	r5, r0
  if ((pData == NULL) || (Length == 0U))
 8003bb6:	460a      	mov	r2, r1
 8003bb8:	b351      	cbz	r1, 8003c10 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
 8003bba:	b34b      	cbz	r3, 8003c10 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8003bbc:	6807      	ldr	r7, [r0, #0]
 8003bbe:	6839      	ldr	r1, [r7, #0]
 8003bc0:	0289      	lsls	r1, r1, #10
 8003bc2:	d525      	bpl.n	8003c10 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003bc4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003bc6:	b949      	cbnz	r1, 8003bdc <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
 8003bc8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003bca:	b939      	cbnz	r1, 8003bdc <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003bcc:	6a81      	ldr	r1, [r0, #40]	; 0x28
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003bce:	69c8      	ldr	r0, [r1, #28]
 8003bd0:	b908      	cbnz	r0, 8003bd6 <HAL_DFSDM_FilterRegularStart_DMA+0x26>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d11c      	bne.n	8003c10 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003bd6:	69c9      	ldr	r1, [r1, #28]
 8003bd8:	2920      	cmp	r1, #32
 8003bda:	d019      	beq.n	8003c10 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003bdc:	f895 604c 	ldrb.w	r6, [r5, #76]	; 0x4c
 8003be0:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
 8003be4:	2e01      	cmp	r6, #1
 8003be6:	d113      	bne.n	8003c10 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003be8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003bea:	490d      	ldr	r1, [pc, #52]	; (8003c20 <HAL_DFSDM_FilterRegularStart_DMA+0x70>)
 8003bec:	62c1      	str	r1, [r0, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003bee:	490d      	ldr	r1, [pc, #52]	; (8003c24 <HAL_DFSDM_FilterRegularStart_DMA+0x74>)
 8003bf0:	6341      	str	r1, [r0, #52]	; 0x34
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003bf2:	69c1      	ldr	r1, [r0, #28]
 8003bf4:	4c0c      	ldr	r4, [pc, #48]	; (8003c28 <HAL_DFSDM_FilterRegularStart_DMA+0x78>)
 8003bf6:	2920      	cmp	r1, #32
 8003bf8:	bf18      	it	ne
 8003bfa:	2400      	movne	r4, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003bfc:	6304      	str	r4, [r0, #48]	; 0x30
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003bfe:	f107 011c 	add.w	r1, r7, #28
 8003c02:	f000 f887 	bl	8003d14 <HAL_DMA_Start_IT>
 8003c06:	4604      	mov	r4, r0
 8003c08:	b120      	cbz	r0, 8003c14 <HAL_DFSDM_FilterRegularStart_DMA+0x64>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003c0a:	23ff      	movs	r3, #255	; 0xff
 8003c0c:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
    status = HAL_ERROR;
 8003c10:	2401      	movs	r4, #1
 8003c12:	e002      	b.n	8003c1a <HAL_DFSDM_FilterRegularStart_DMA+0x6a>
      DFSDM_RegConvStart(hdfsdm_filter);
 8003c14:	4628      	mov	r0, r5
 8003c16:	f7ff fe6f 	bl	80038f8 <DFSDM_RegConvStart>
}
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	08003c2d 	.word	0x08003c2d
 8003c24:	08003c43 	.word	0x08003c43
 8003c28:	08003c37 	.word	0x08003c37

08003c2c <DFSDM_DMARegularConvCplt>:
{
 8003c2c:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003c2e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003c30:	f003 fbbe 	bl	80073b0 <HAL_DFSDM_FilterRegConvCpltCallback>
 8003c34:	bd08      	pop	{r3, pc}

08003c36 <DFSDM_DMARegularHalfConvCplt>:
{
 8003c36:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003c38:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003c3a:	f003 fba7 	bl	800738c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
 8003c3e:	bd08      	pop	{r3, pc}

08003c40 <HAL_DFSDM_FilterErrorCallback>:
{
 8003c40:	4770      	bx	lr

08003c42 <DFSDM_DMAError>:
{
 8003c42:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c44:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003c46:	2303      	movs	r3, #3
 8003c48:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003c4a:	f7ff fff9 	bl	8003c40 <HAL_DFSDM_FilterErrorCallback>
 8003c4e:	bd08      	pop	{r3, pc}

08003c50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c50:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c52:	2800      	cmp	r0, #0
 8003c54:	d04e      	beq.n	8003cf4 <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c56:	6801      	ldr	r1, [r0, #0]
 8003c58:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <HAL_DMA_Init+0xa8>)
 8003c5a:	4299      	cmp	r1, r3
 8003c5c:	f04f 0414 	mov.w	r4, #20
 8003c60:	d840      	bhi.n	8003ce4 <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c62:	4a26      	ldr	r2, [pc, #152]	; (8003cfc <HAL_DMA_Init+0xac>)
 8003c64:	440a      	add	r2, r1
 8003c66:	fbb2 f2f4 	udiv	r2, r2, r4
 8003c6a:	0092      	lsls	r2, r2, #2
 8003c6c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c6e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8003c72:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c74:	2302      	movs	r3, #2
 8003c76:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c7a:	6884      	ldr	r4, [r0, #8]
 8003c7c:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c7e:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8003c80:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8003c82:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c84:	432b      	orrs	r3, r5
 8003c86:	6945      	ldr	r5, [r0, #20]
 8003c88:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8a:	6985      	ldr	r5, [r0, #24]
 8003c8c:	432b      	orrs	r3, r5
 8003c8e:	69c5      	ldr	r5, [r0, #28]
 8003c90:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c92:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c94:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8003c98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c9c:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8003c9e:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ca0:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8003ca4:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ca6:	d014      	beq.n	8003cd2 <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003ca8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003caa:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <HAL_DMA_Init+0xb0>)
 8003cac:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cae:	bf0c      	ite	eq
 8003cb0:	4914      	ldreq	r1, [pc, #80]	; (8003d04 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cb2:	4915      	ldrne	r1, [pc, #84]	; (8003d08 <HAL_DMA_Init+0xb8>)
 8003cb4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003cb6:	680a      	ldr	r2, [r1, #0]
 8003cb8:	f003 031c 	and.w	r3, r3, #28
 8003cbc:	240f      	movs	r4, #15
 8003cbe:	409c      	lsls	r4, r3
 8003cc0:	ea22 0204 	bic.w	r2, r2, r4
 8003cc4:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003cc6:	6842      	ldr	r2, [r0, #4]
 8003cc8:	680c      	ldr	r4, [r1, #0]
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	4323      	orrs	r3, r4
 8003cd0:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cd2:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003cd4:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cd6:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cd8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8003cdc:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_DMA_Init+0xbc>)
 8003ce6:	440b      	add	r3, r1
 8003ce8:	fbb3 f3f4 	udiv	r3, r3, r4
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003cf0:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <HAL_DMA_Init+0xc0>)
 8003cf2:	e7be      	b.n	8003c72 <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 8003cf4:	2001      	movs	r0, #1
}
 8003cf6:	bd30      	pop	{r4, r5, pc}
 8003cf8:	40020407 	.word	0x40020407
 8003cfc:	bffdfff8 	.word	0xbffdfff8
 8003d00:	40020000 	.word	0x40020000
 8003d04:	400200a8 	.word	0x400200a8
 8003d08:	400204a8 	.word	0x400204a8
 8003d0c:	bffdfbf8 	.word	0xbffdfbf8
 8003d10:	40020400 	.word	0x40020400

08003d14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d14:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d16:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8003d1a:	2c01      	cmp	r4, #1
 8003d1c:	d038      	beq.n	8003d90 <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d1e:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8003d22:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d24:	b2ed      	uxtb	r5, r5
 8003d26:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8003d28:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8003d2c:	f04f 0600 	mov.w	r6, #0
 8003d30:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d34:	d12a      	bne.n	8003d8c <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d36:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d3a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d3c:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003d3e:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d40:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8003d42:	f026 0601 	bic.w	r6, r6, #1
 8003d46:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d48:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8003d4a:	f006 061c 	and.w	r6, r6, #28
 8003d4e:	40b5      	lsls	r5, r6
 8003d50:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d52:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d54:	6883      	ldr	r3, [r0, #8]
 8003d56:	6805      	ldr	r5, [r0, #0]
 8003d58:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8003d5a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d5c:	bf0b      	itete	eq
 8003d5e:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003d60:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003d62:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003d64:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003d66:	b14b      	cbz	r3, 8003d7c <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d6e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d78:	2000      	movs	r0, #0
 8003d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	f023 0304 	bic.w	r3, r3, #4
 8003d82:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	f043 030a 	orr.w	r3, r3, #10
 8003d8a:	e7f0      	b.n	8003d6e <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 8003d8c:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8003d90:	2002      	movs	r0, #2
}
 8003d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d94 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d94:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003d98:	2a02      	cmp	r2, #2
{
 8003d9a:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d9c:	d003      	beq.n	8003da6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d9e:	2204      	movs	r2, #4
 8003da0:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003da2:	2001      	movs	r0, #1
 8003da4:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da6:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003da8:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003daa:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8003dac:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dae:	f021 010e 	bic.w	r1, r1, #14
 8003db2:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003db4:	6811      	ldr	r1, [r2, #0]
 8003db6:	f021 0101 	bic.w	r1, r1, #1
 8003dba:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003dbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	f002 021c 	and.w	r2, r2, #28
 8003dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc8:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8003dca:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003dcc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003dd0:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8003dd4:	b113      	cbz	r3, 8003ddc <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8003dd6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003dd8:	4620      	mov	r0, r4
 8003dda:	bd10      	pop	{r4, pc}
 8003ddc:	4618      	mov	r0, r3
}
 8003dde:	bd10      	pop	{r4, pc}

08003de0 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003de0:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003de2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8003de4:	6803      	ldr	r3, [r0, #0]
{
 8003de6:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003de8:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dec:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003dee:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003df0:	2404      	movs	r4, #4
 8003df2:	4094      	lsls	r4, r2
 8003df4:	4226      	tst	r6, r4
 8003df6:	d00e      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x36>
 8003df8:	f015 0f04 	tst.w	r5, #4
 8003dfc:	d00b      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e02:	bf5e      	ittt	pl
 8003e04:	681a      	ldrpl	r2, [r3, #0]
 8003e06:	f022 0204 	bicpl.w	r2, r2, #4
 8003e0a:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8003e0c:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003e0e:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8003e10:	b373      	cbz	r3, 8003e70 <HAL_DMA_IRQHandler+0x90>
}
 8003e12:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003e14:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003e16:	2402      	movs	r4, #2
 8003e18:	4094      	lsls	r4, r2
 8003e1a:	4226      	tst	r6, r4
 8003e1c:	d012      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x64>
 8003e1e:	f015 0f02 	tst.w	r5, #2
 8003e22:	d00f      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	0695      	lsls	r5, r2, #26
 8003e28:	d406      	bmi.n	8003e38 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	f022 020a 	bic.w	r2, r2, #10
 8003e30:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003e38:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e3a:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003e3c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8003e40:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003e42:	e7e5      	b.n	8003e10 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003e44:	2408      	movs	r4, #8
 8003e46:	4094      	lsls	r4, r2
 8003e48:	4234      	tst	r4, r6
 8003e4a:	d011      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x90>
 8003e4c:	072c      	lsls	r4, r5, #28
 8003e4e:	d50f      	bpl.n	8003e70 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e50:	681c      	ldr	r4, [r3, #0]
 8003e52:	f024 040e 	bic.w	r4, r4, #14
 8003e56:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e58:	2301      	movs	r3, #1
 8003e5a:	fa03 f202 	lsl.w	r2, r3, r2
 8003e5e:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e60:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003e62:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003e66:	2300      	movs	r3, #0
 8003e68:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003e6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e6e:	e7cf      	b.n	8003e10 <HAL_DMA_IRQHandler+0x30>
}
 8003e70:	bc70      	pop	{r4, r5, r6}
 8003e72:	4770      	bx	lr

08003e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e78:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e7a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004028 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e80:	4c67      	ldr	r4, [pc, #412]	; (8004020 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e82:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8003e84:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e86:	9a01      	ldr	r2, [sp, #4]
 8003e88:	40da      	lsrs	r2, r3
 8003e8a:	d102      	bne.n	8003e92 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8003e8c:	b005      	add	sp, #20
 8003e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e92:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8003e94:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e96:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8003e98:	ea12 0e06 	ands.w	lr, r2, r6
 8003e9c:	f000 80b1 	beq.w	8004002 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ea0:	684a      	ldr	r2, [r1, #4]
 8003ea2:	f022 0710 	bic.w	r7, r2, #16
 8003ea6:	2f02      	cmp	r7, #2
 8003ea8:	d116      	bne.n	8003ed8 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8003eaa:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8003eae:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003eb2:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003eb6:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003eba:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003ebe:	f04f 0c0f 	mov.w	ip, #15
 8003ec2:	fa0c fc0a 	lsl.w	ip, ip, sl
 8003ec6:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003eca:	690d      	ldr	r5, [r1, #16]
 8003ecc:	fa05 f50a 	lsl.w	r5, r5, sl
 8003ed0:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8003ed4:	f8c9 5020 	str.w	r5, [r9, #32]
 8003ed8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003edc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8003ede:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ee2:	fa05 f50c 	lsl.w	r5, r5, ip
 8003ee6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ee8:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003eec:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ef0:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ef4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ef6:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003efa:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8003efc:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f00:	d811      	bhi.n	8003f26 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8003f02:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f04:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f08:	68cf      	ldr	r7, [r1, #12]
 8003f0a:	fa07 f70c 	lsl.w	r7, r7, ip
 8003f0e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8003f12:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003f14:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f16:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003f1a:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8003f1e:	409f      	lsls	r7, r3
 8003f20:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8003f24:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f26:	f1ba 0f03 	cmp.w	sl, #3
 8003f2a:	d107      	bne.n	8003f3c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8003f2c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f2e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003f32:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8003f36:	409f      	lsls	r7, r3
 8003f38:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8003f3a:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8003f3c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f3e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f40:	688e      	ldr	r6, [r1, #8]
 8003f42:	fa06 f60c 	lsl.w	r6, r6, ip
 8003f46:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8003f48:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f4a:	00d5      	lsls	r5, r2, #3
 8003f4c:	d559      	bpl.n	8004002 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f4e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8003f52:	f045 0501 	orr.w	r5, r5, #1
 8003f56:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8003f5a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8003f5e:	f023 0603 	bic.w	r6, r3, #3
 8003f62:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8003f66:	f005 0501 	and.w	r5, r5, #1
 8003f6a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8003f6e:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f70:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f74:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f76:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f78:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003f7c:	270f      	movs	r7, #15
 8003f7e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f82:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f86:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f8a:	d03c      	beq.n	8004006 <HAL_GPIO_Init+0x192>
 8003f8c:	4d25      	ldr	r5, [pc, #148]	; (8004024 <HAL_GPIO_Init+0x1b0>)
 8003f8e:	42a8      	cmp	r0, r5
 8003f90:	d03b      	beq.n	800400a <HAL_GPIO_Init+0x196>
 8003f92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f96:	42a8      	cmp	r0, r5
 8003f98:	d039      	beq.n	800400e <HAL_GPIO_Init+0x19a>
 8003f9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f9e:	42a8      	cmp	r0, r5
 8003fa0:	d037      	beq.n	8004012 <HAL_GPIO_Init+0x19e>
 8003fa2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fa6:	42a8      	cmp	r0, r5
 8003fa8:	d035      	beq.n	8004016 <HAL_GPIO_Init+0x1a2>
 8003faa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fae:	42a8      	cmp	r0, r5
 8003fb0:	d033      	beq.n	800401a <HAL_GPIO_Init+0x1a6>
 8003fb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fb6:	42a8      	cmp	r0, r5
 8003fb8:	bf14      	ite	ne
 8003fba:	2507      	movne	r5, #7
 8003fbc:	2506      	moveq	r5, #6
 8003fbe:	fa05 f50c 	lsl.w	r5, r5, ip
 8003fc2:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fc4:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8003fc6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003fc8:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fcc:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8003fce:	bf54      	ite	pl
 8003fd0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8003fd2:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8003fd6:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8003fd8:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fda:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8003fdc:	bf54      	ite	pl
 8003fde:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8003fe0:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8003fe4:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8003fe6:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fe8:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8003fea:	bf54      	ite	pl
 8003fec:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8003fee:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8003ff2:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8003ff4:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ff6:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8003ff8:	bf54      	ite	pl
 8003ffa:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8003ffc:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8004000:	60e5      	str	r5, [r4, #12]
    position++;
 8004002:	3301      	adds	r3, #1
 8004004:	e73f      	b.n	8003e86 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004006:	2500      	movs	r5, #0
 8004008:	e7d9      	b.n	8003fbe <HAL_GPIO_Init+0x14a>
 800400a:	2501      	movs	r5, #1
 800400c:	e7d7      	b.n	8003fbe <HAL_GPIO_Init+0x14a>
 800400e:	2502      	movs	r5, #2
 8004010:	e7d5      	b.n	8003fbe <HAL_GPIO_Init+0x14a>
 8004012:	2503      	movs	r5, #3
 8004014:	e7d3      	b.n	8003fbe <HAL_GPIO_Init+0x14a>
 8004016:	2504      	movs	r5, #4
 8004018:	e7d1      	b.n	8003fbe <HAL_GPIO_Init+0x14a>
 800401a:	2505      	movs	r5, #5
 800401c:	e7cf      	b.n	8003fbe <HAL_GPIO_Init+0x14a>
 800401e:	bf00      	nop
 8004020:	40010400 	.word	0x40010400
 8004024:	48000400 	.word	0x48000400
 8004028:	40021000 	.word	0x40021000

0800402c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800402c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800402e:	4b04      	ldr	r3, [pc, #16]	; (8004040 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004030:	6959      	ldr	r1, [r3, #20]
 8004032:	4201      	tst	r1, r0
 8004034:	d002      	beq.n	800403c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004036:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004038:	f003 f9d8 	bl	80073ec <HAL_GPIO_EXTI_Callback>
 800403c:	bd08      	pop	{r3, pc}
 800403e:	bf00      	nop
 8004040:	40010400 	.word	0x40010400

08004044 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004044:	6803      	ldr	r3, [r0, #0]
 8004046:	699a      	ldr	r2, [r3, #24]
 8004048:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800404a:	bf44      	itt	mi
 800404c:	2200      	movmi	r2, #0
 800404e:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004054:	bf5e      	ittt	pl
 8004056:	699a      	ldrpl	r2, [r3, #24]
 8004058:	f042 0201 	orrpl.w	r2, r2, #1
 800405c:	619a      	strpl	r2, [r3, #24]
 800405e:	4770      	bx	lr

08004060 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004060:	b530      	push	{r4, r5, lr}
 8004062:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004064:	6805      	ldr	r5, [r0, #0]
 8004066:	4323      	orrs	r3, r4
 8004068:	0d64      	lsrs	r4, r4, #21
 800406a:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800406e:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8004072:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8004076:	6868      	ldr	r0, [r5, #4]
 8004078:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800407c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8004080:	4319      	orrs	r1, r3
 8004082:	f044 0403 	orr.w	r4, r4, #3
 8004086:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800408a:	ea20 0404 	bic.w	r4, r0, r4
 800408e:	4321      	orrs	r1, r4
 8004090:	6069      	str	r1, [r5, #4]
 8004092:	bd30      	pop	{r4, r5, pc}

08004094 <I2C_WaitOnFlagUntilTimeout>:
{
 8004094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004098:	9f06      	ldr	r7, [sp, #24]
 800409a:	4604      	mov	r4, r0
 800409c:	4688      	mov	r8, r1
 800409e:	4616      	mov	r6, r2
 80040a0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a2:	6822      	ldr	r2, [r4, #0]
 80040a4:	6993      	ldr	r3, [r2, #24]
 80040a6:	ea38 0303 	bics.w	r3, r8, r3
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	42b3      	cmp	r3, r6
 80040b2:	d002      	beq.n	80040ba <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80040b4:	2000      	movs	r0, #0
}
 80040b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80040ba:	1c6b      	adds	r3, r5, #1
 80040bc:	d0f2      	beq.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040be:	f7ff faa7 	bl	8003610 <HAL_GetTick>
 80040c2:	1bc0      	subs	r0, r0, r7
 80040c4:	4285      	cmp	r5, r0
 80040c6:	d301      	bcc.n	80040cc <I2C_WaitOnFlagUntilTimeout+0x38>
 80040c8:	2d00      	cmp	r5, #0
 80040ca:	d1ea      	bne.n	80040a2 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80040ce:	f043 0320 	orr.w	r3, r3, #32
 80040d2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80040d4:	2320      	movs	r3, #32
 80040d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040da:	2300      	movs	r3, #0
 80040dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80040e4:	2001      	movs	r0, #1
 80040e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080040ea <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ea:	6803      	ldr	r3, [r0, #0]
{
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040f0:	6998      	ldr	r0, [r3, #24]
 80040f2:	f010 0010 	ands.w	r0, r0, #16
{
 80040f6:	460d      	mov	r5, r1
 80040f8:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040fa:	d116      	bne.n	800412a <I2C_IsAcknowledgeFailed+0x40>
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80040fe:	1c69      	adds	r1, r5, #1
 8004100:	d014      	beq.n	800412c <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004102:	f7ff fa85 	bl	8003610 <HAL_GetTick>
 8004106:	1b80      	subs	r0, r0, r6
 8004108:	4285      	cmp	r5, r0
 800410a:	d300      	bcc.n	800410e <I2C_IsAcknowledgeFailed+0x24>
 800410c:	b96d      	cbnz	r5, 800412a <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800410e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004110:	f043 0320 	orr.w	r3, r3, #32
 8004114:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004116:	2320      	movs	r3, #32
 8004118:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800411c:	2300      	movs	r3, #0
 800411e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004122:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8004126:	2001      	movs	r0, #1
}
 8004128:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	6999      	ldr	r1, [r3, #24]
 800412e:	068a      	lsls	r2, r1, #26
 8004130:	d5e5      	bpl.n	80040fe <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004132:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004134:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004136:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8004138:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800413a:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800413c:	f7ff ff82 	bl	8004044 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004140:	6822      	ldr	r2, [r4, #0]
 8004142:	6853      	ldr	r3, [r2, #4]
 8004144:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004148:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800414c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004156:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004158:	f043 0304 	orr.w	r3, r3, #4
 800415c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800415e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8004162:	e7db      	b.n	800411c <I2C_IsAcknowledgeFailed+0x32>

08004164 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	4604      	mov	r4, r0
 8004168:	460d      	mov	r5, r1
 800416a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	079b      	lsls	r3, r3, #30
 8004172:	d501      	bpl.n	8004178 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8004174:	2000      	movs	r0, #0
 8004176:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004178:	4632      	mov	r2, r6
 800417a:	4629      	mov	r1, r5
 800417c:	4620      	mov	r0, r4
 800417e:	f7ff ffb4 	bl	80040ea <I2C_IsAcknowledgeFailed>
 8004182:	b9a0      	cbnz	r0, 80041ae <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8004184:	1c6a      	adds	r2, r5, #1
 8004186:	d0f1      	beq.n	800416c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004188:	f7ff fa42 	bl	8003610 <HAL_GetTick>
 800418c:	1b80      	subs	r0, r0, r6
 800418e:	4285      	cmp	r5, r0
 8004190:	d301      	bcc.n	8004196 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004192:	2d00      	cmp	r5, #0
 8004194:	d1ea      	bne.n	800416c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004196:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004198:	f043 0320 	orr.w	r3, r3, #32
 800419c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800419e:	2320      	movs	r3, #32
 80041a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80041aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80041ae:	2001      	movs	r0, #1
}
 80041b0:	bd70      	pop	{r4, r5, r6, pc}

080041b2 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80041b2:	b570      	push	{r4, r5, r6, lr}
 80041b4:	4604      	mov	r4, r0
 80041b6:	460d      	mov	r5, r1
 80041b8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	069b      	lsls	r3, r3, #26
 80041c0:	d501      	bpl.n	80041c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80041c2:	2000      	movs	r0, #0
 80041c4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c6:	4632      	mov	r2, r6
 80041c8:	4629      	mov	r1, r5
 80041ca:	4620      	mov	r0, r4
 80041cc:	f7ff ff8d 	bl	80040ea <I2C_IsAcknowledgeFailed>
 80041d0:	b990      	cbnz	r0, 80041f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d2:	f7ff fa1d 	bl	8003610 <HAL_GetTick>
 80041d6:	1b80      	subs	r0, r0, r6
 80041d8:	4285      	cmp	r5, r0
 80041da:	d301      	bcc.n	80041e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80041dc:	2d00      	cmp	r5, #0
 80041de:	d1ec      	bne.n	80041ba <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041e2:	f043 0320 	orr.w	r3, r3, #32
 80041e6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041e8:	2320      	movs	r3, #32
 80041ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80041f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80041f8:	2001      	movs	r0, #1
}
 80041fa:	bd70      	pop	{r4, r5, r6, pc}

080041fc <HAL_I2C_Init>:
{
 80041fc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80041fe:	4604      	mov	r4, r0
 8004200:	2800      	cmp	r0, #0
 8004202:	d04a      	beq.n	800429a <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004204:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004208:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800420c:	b91b      	cbnz	r3, 8004216 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800420e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004212:	f002 fe1d 	bl	8006e50 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004216:	2324      	movs	r3, #36	; 0x24
 8004218:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800421c:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800421e:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004228:	6862      	ldr	r2, [r4, #4]
 800422a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800422e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004230:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004232:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004238:	609a      	str	r2, [r3, #8]
 800423a:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800423c:	d124      	bne.n	8004288 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800423e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004242:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004244:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004246:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004248:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800424c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004250:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004258:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800425a:	6922      	ldr	r2, [r4, #16]
 800425c:	430a      	orrs	r2, r1
 800425e:	69a1      	ldr	r1, [r4, #24]
 8004260:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004264:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004266:	6a21      	ldr	r1, [r4, #32]
 8004268:	69e2      	ldr	r2, [r4, #28]
 800426a:	430a      	orrs	r2, r1
 800426c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	f042 0201 	orr.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004276:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004278:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800427a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800427c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004280:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004282:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8004286:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004288:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800428c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800428e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004290:	bf04      	itt	eq
 8004292:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8004296:	605a      	streq	r2, [r3, #4]
 8004298:	e7d4      	b.n	8004244 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800429a:	2001      	movs	r0, #1
}
 800429c:	bd10      	pop	{r4, pc}
	...

080042a0 <HAL_I2C_Master_Transmit>:
{
 80042a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80042a4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80042aa:	2b20      	cmp	r3, #32
{
 80042ac:	4604      	mov	r4, r0
 80042ae:	460e      	mov	r6, r1
 80042b0:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b2:	f040 8084 	bne.w	80043be <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 80042b6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d07f      	beq.n	80043be <HAL_I2C_Master_Transmit+0x11e>
 80042be:	2701      	movs	r7, #1
 80042c0:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80042c4:	f7ff f9a4 	bl	8003610 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042c8:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80042ca:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042cc:	9000      	str	r0, [sp, #0]
 80042ce:	463a      	mov	r2, r7
 80042d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042d4:	4620      	mov	r0, r4
 80042d6:	f7ff fedd 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 80042da:	b118      	cbz	r0, 80042e4 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 80042dc:	2001      	movs	r0, #1
}
 80042de:	b003      	add	sp, #12
 80042e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042e4:	2321      	movs	r3, #33	; 0x21
 80042e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042ea:	2310      	movs	r3, #16
 80042ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042f0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80042f2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80042f8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8004300:	6360      	str	r0, [r4, #52]	; 0x34
 8004302:	4b30      	ldr	r3, [pc, #192]	; (80043c4 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004304:	d926      	bls.n	8004354 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004306:	22ff      	movs	r2, #255	; 0xff
 8004308:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800430a:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800430c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004310:	4631      	mov	r1, r6
 8004312:	4620      	mov	r0, r4
 8004314:	f7ff fea4 	bl	8004060 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004318:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800431a:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 800431c:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800431e:	462a      	mov	r2, r5
 8004320:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8004322:	b9fb      	cbnz	r3, 8004364 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004324:	f7ff ff45 	bl	80041b2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004328:	2800      	cmp	r0, #0
 800432a:	d1d7      	bne.n	80042dc <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	2120      	movs	r1, #32
 8004330:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004338:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800433c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004346:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800434a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800434e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004352:	e7c4      	b.n	80042de <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8004354:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004356:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8004358:	b292      	uxth	r2, r2
 800435a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800435c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	e7d5      	b.n	8004310 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004364:	f7ff fefe 	bl	8004164 <I2C_WaitOnTXISFlagUntilTimeout>
 8004368:	2800      	cmp	r0, #0
 800436a:	d1b7      	bne.n	80042dc <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800436c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800436e:	6822      	ldr	r2, [r4, #0]
 8004370:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004374:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004376:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004378:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800437a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800437c:	3b01      	subs	r3, #1
 800437e:	b29b      	uxth	r3, r3
 8004380:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004382:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004384:	3a01      	subs	r2, #1
 8004386:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004388:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800438a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0c3      	beq.n	8004318 <HAL_I2C_Master_Transmit+0x78>
 8004390:	2a00      	cmp	r2, #0
 8004392:	d1c1      	bne.n	8004318 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004394:	9500      	str	r5, [sp, #0]
 8004396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004398:	2180      	movs	r1, #128	; 0x80
 800439a:	4620      	mov	r0, r4
 800439c:	f7ff fe7a 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d19b      	bne.n	80042dc <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2bff      	cmp	r3, #255	; 0xff
 80043aa:	d903      	bls.n	80043b4 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ac:	22ff      	movs	r2, #255	; 0xff
 80043ae:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043b0:	9000      	str	r0, [sp, #0]
 80043b2:	e7ab      	b.n	800430c <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 80043b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043b6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80043b8:	b292      	uxth	r2, r2
 80043ba:	8522      	strh	r2, [r4, #40]	; 0x28
 80043bc:	e7ce      	b.n	800435c <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 80043be:	2002      	movs	r0, #2
 80043c0:	e78d      	b.n	80042de <HAL_I2C_Master_Transmit+0x3e>
 80043c2:	bf00      	nop
 80043c4:	80002000 	.word	0x80002000

080043c8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043c8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	2a20      	cmp	r2, #32
{
 80043d0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d2:	d11d      	bne.n	8004410 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d019      	beq.n	8004410 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043dc:	2324      	movs	r3, #36	; 0x24
 80043de:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043e2:	6803      	ldr	r3, [r0, #0]
 80043e4:	681c      	ldr	r4, [r3, #0]
 80043e6:	f024 0401 	bic.w	r4, r4, #1
 80043ea:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043ec:	681c      	ldr	r4, [r3, #0]
 80043ee:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80043f2:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043f4:	681c      	ldr	r4, [r3, #0]
 80043f6:	4321      	orrs	r1, r4
 80043f8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043fa:	6819      	ldr	r1, [r3, #0]
 80043fc:	f041 0101 	orr.w	r1, r1, #1
 8004400:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004402:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004404:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004408:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800440c:	4618      	mov	r0, r3
 800440e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8004410:	2002      	movs	r0, #2
  }
}
 8004412:	bd10      	pop	{r4, pc}

08004414 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004414:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004416:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800441a:	b2e4      	uxtb	r4, r4
 800441c:	2c20      	cmp	r4, #32
 800441e:	d11c      	bne.n	800445a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004420:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004424:	2b01      	cmp	r3, #1
 8004426:	d018      	beq.n	800445a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004428:	2324      	movs	r3, #36	; 0x24
 800442a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800442e:	6803      	ldr	r3, [r0, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004438:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800443a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800443e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004442:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800444e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004452:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004456:	4618      	mov	r0, r3
 8004458:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800445a:	2002      	movs	r0, #2
  }
}
 800445c:	bd10      	pop	{r4, pc}
	...

08004460 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004460:	4b02      	ldr	r3, [pc, #8]	; (800446c <HAL_PWREx_GetVoltageRange+0xc>)
 8004462:	6818      	ldr	r0, [r3, #0]
#endif
}
 8004464:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40007000 	.word	0x40007000

08004470 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004470:	4b17      	ldr	r3, [pc, #92]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004472:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004474:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004478:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800447c:	d11c      	bne.n	80044b8 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800447e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004482:	d015      	beq.n	80044b0 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800448a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004490:	4a10      	ldr	r2, [pc, #64]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8004492:	6811      	ldr	r1, [r2, #0]
 8004494:	2232      	movs	r2, #50	; 0x32
 8004496:	434a      	muls	r2, r1
 8004498:	490f      	ldr	r1, [pc, #60]	; (80044d8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800449a:	fbb2 f2f1 	udiv	r2, r2, r1
 800449e:	4619      	mov	r1, r3
 80044a0:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044a2:	6958      	ldr	r0, [r3, #20]
 80044a4:	0540      	lsls	r0, r0, #21
 80044a6:	d500      	bpl.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x3a>
 80044a8:	b922      	cbnz	r2, 80044b4 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044aa:	694b      	ldr	r3, [r1, #20]
 80044ac:	055b      	lsls	r3, r3, #21
 80044ae:	d40d      	bmi.n	80044cc <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044b0:	2000      	movs	r0, #0
 80044b2:	4770      	bx	lr
        wait_loop_index--;
 80044b4:	3a01      	subs	r2, #1
 80044b6:	e7f4      	b.n	80044a2 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044b8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044bc:	bf1f      	itttt	ne
 80044be:	681a      	ldrne	r2, [r3, #0]
 80044c0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80044c4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80044c8:	601a      	strne	r2, [r3, #0]
 80044ca:	e7f1      	b.n	80044b0 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80044cc:	2003      	movs	r0, #3
}
 80044ce:	4770      	bx	lr
 80044d0:	40007000 	.word	0x40007000
 80044d4:	200006b0 	.word	0x200006b0
 80044d8:	000f4240 	.word	0x000f4240

080044dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044de:	4d1e      	ldr	r5, [pc, #120]	; (8004558 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80044e0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80044e2:	00da      	lsls	r2, r3, #3
{
 80044e4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044e6:	d518      	bpl.n	800451a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044e8:	f7ff ffba 	bl	8004460 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80044f0:	d123      	bne.n	800453a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044f2:	2c80      	cmp	r4, #128	; 0x80
 80044f4:	d929      	bls.n	800454a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044f6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044f8:	bf8c      	ite	hi
 80044fa:	2002      	movhi	r0, #2
 80044fc:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044fe:	4a17      	ldr	r2, [pc, #92]	; (800455c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8004500:	6813      	ldr	r3, [r2, #0]
 8004502:	f023 0307 	bic.w	r3, r3, #7
 8004506:	4303      	orrs	r3, r0
 8004508:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800450a:	6813      	ldr	r3, [r2, #0]
 800450c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8004510:	1a18      	subs	r0, r3, r0
 8004512:	bf18      	it	ne
 8004514:	2001      	movne	r0, #1
 8004516:	b003      	add	sp, #12
 8004518:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800451a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800451c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004520:	65ab      	str	r3, [r5, #88]	; 0x58
 8004522:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004528:	9301      	str	r3, [sp, #4]
 800452a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800452c:	f7ff ff98 	bl	8004460 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8004530:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004536:	65ab      	str	r3, [r5, #88]	; 0x58
 8004538:	e7d8      	b.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800453a:	2c80      	cmp	r4, #128	; 0x80
 800453c:	d807      	bhi.n	800454e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800453e:	d008      	beq.n	8004552 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8004540:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8004544:	4258      	negs	r0, r3
 8004546:	4158      	adcs	r0, r3
 8004548:	e7d9      	b.n	80044fe <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800454a:	2000      	movs	r0, #0
 800454c:	e7d7      	b.n	80044fe <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800454e:	2003      	movs	r0, #3
 8004550:	e7d5      	b.n	80044fe <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004552:	2002      	movs	r0, #2
 8004554:	e7d3      	b.n	80044fe <RCC_SetFlashLatencyFromMSIRange+0x22>
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000
 800455c:	40022000 	.word	0x40022000

08004560 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004560:	4b25      	ldr	r3, [pc, #148]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004562:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004564:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004566:	f012 020c 	ands.w	r2, r2, #12
 800456a:	d005      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0x18>
 800456c:	2a0c      	cmp	r2, #12
 800456e:	d115      	bne.n	800459c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004570:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004574:	2901      	cmp	r1, #1
 8004576:	d118      	bne.n	80045aa <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004578:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800457a:	4820      	ldr	r0, [pc, #128]	; (80045fc <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800457c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800457e:	bf55      	itete	pl
 8004580:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004584:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004586:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800458a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800458e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004592:	b382      	cbz	r2, 80045f6 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004594:	2a0c      	cmp	r2, #12
 8004596:	d009      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x4c>
 8004598:	2000      	movs	r0, #0
  return sysclockfreq;
 800459a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800459c:	2a04      	cmp	r2, #4
 800459e:	d029      	beq.n	80045f4 <HAL_RCC_GetSysClockFreq+0x94>
 80045a0:	2a08      	cmp	r2, #8
 80045a2:	4817      	ldr	r0, [pc, #92]	; (8004600 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045a4:	bf18      	it	ne
 80045a6:	2000      	movne	r0, #0
 80045a8:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045aa:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ac:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045ae:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045b0:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045b4:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 80045b8:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045ba:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 80045be:	d005      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x6c>
 80045c0:	2903      	cmp	r1, #3
 80045c2:	d012      	beq.n	80045ea <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045c4:	68d9      	ldr	r1, [r3, #12]
 80045c6:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80045ca:	e003      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045cc:	68d9      	ldr	r1, [r3, #12]
 80045ce:	480d      	ldr	r0, [pc, #52]	; (8004604 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045d0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045d4:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045d6:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045da:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80045de:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045e0:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045e2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80045e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80045e8:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045ea:	68d9      	ldr	r1, [r3, #12]
 80045ec:	4804      	ldr	r0, [pc, #16]	; (8004600 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045ee:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80045f2:	e7ef      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 80045f4:	4803      	ldr	r0, [pc, #12]	; (8004604 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80045f6:	4770      	bx	lr
 80045f8:	40021000 	.word	0x40021000
 80045fc:	0802846c 	.word	0x0802846c
 8004600:	007a1200 	.word	0x007a1200
 8004604:	00f42400 	.word	0x00f42400

08004608 <HAL_RCC_OscConfig>:
{
 8004608:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800460c:	4605      	mov	r5, r0
 800460e:	b918      	cbnz	r0, 8004618 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8004610:	2001      	movs	r0, #1
}
 8004612:	b003      	add	sp, #12
 8004614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004618:	4ca5      	ldr	r4, [pc, #660]	; (80048b0 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800461a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461c:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800461e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004620:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004622:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004626:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800462a:	d53c      	bpl.n	80046a6 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800462c:	b11e      	cbz	r6, 8004636 <HAL_RCC_OscConfig+0x2e>
 800462e:	2e0c      	cmp	r6, #12
 8004630:	d163      	bne.n	80046fa <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004632:	2f01      	cmp	r7, #1
 8004634:	d161      	bne.n	80046fa <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	0798      	lsls	r0, r3, #30
 800463a:	d502      	bpl.n	8004642 <HAL_RCC_OscConfig+0x3a>
 800463c:	69ab      	ldr	r3, [r5, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0e6      	beq.n	8004610 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	6a28      	ldr	r0, [r5, #32]
 8004646:	0719      	lsls	r1, r3, #28
 8004648:	bf56      	itet	pl
 800464a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800464e:	6823      	ldrmi	r3, [r4, #0]
 8004650:	091b      	lsrpl	r3, r3, #4
 8004652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004656:	4283      	cmp	r3, r0
 8004658:	d23a      	bcs.n	80046d0 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800465a:	f7ff ff3f 	bl	80044dc <RCC_SetFlashLatencyFromMSIRange>
 800465e:	2800      	cmp	r0, #0
 8004660:	d1d6      	bne.n	8004610 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	f043 0308 	orr.w	r3, r3, #8
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	6a2a      	ldr	r2, [r5, #32]
 800466e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004672:	4313      	orrs	r3, r2
 8004674:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004676:	6863      	ldr	r3, [r4, #4]
 8004678:	69ea      	ldr	r2, [r5, #28]
 800467a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800467e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004682:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004684:	f7ff ff6c 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 8004688:	68a3      	ldr	r3, [r4, #8]
 800468a:	4a8a      	ldr	r2, [pc, #552]	; (80048b4 <HAL_RCC_OscConfig+0x2ac>)
 800468c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004690:	5cd3      	ldrb	r3, [r2, r3]
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	40d8      	lsrs	r0, r3
 8004698:	4b87      	ldr	r3, [pc, #540]	; (80048b8 <HAL_RCC_OscConfig+0x2b0>)
 800469a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800469c:	2000      	movs	r0, #0
 800469e:	f7fe ff81 	bl	80035a4 <HAL_InitTick>
        if(status != HAL_OK)
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d1b5      	bne.n	8004612 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a6:	682b      	ldr	r3, [r5, #0]
 80046a8:	07d8      	lsls	r0, r3, #31
 80046aa:	d45d      	bmi.n	8004768 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	0799      	lsls	r1, r3, #30
 80046b0:	f100 809c 	bmi.w	80047ec <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	0718      	lsls	r0, r3, #28
 80046b8:	f100 80d0 	bmi.w	800485c <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	0759      	lsls	r1, r3, #29
 80046c0:	f100 80fc 	bmi.w	80048bc <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 8165 	bne.w	8004996 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 80046cc:	2000      	movs	r0, #0
 80046ce:	e7a0      	b.n	8004612 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	f043 0308 	orr.w	r3, r3, #8
 80046d6:	6023      	str	r3, [r4, #0]
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046de:	4303      	orrs	r3, r0
 80046e0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046e2:	6863      	ldr	r3, [r4, #4]
 80046e4:	69ea      	ldr	r2, [r5, #28]
 80046e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80046ee:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046f0:	f7ff fef4 	bl	80044dc <RCC_SetFlashLatencyFromMSIRange>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	d0c5      	beq.n	8004684 <HAL_RCC_OscConfig+0x7c>
 80046f8:	e78a      	b.n	8004610 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046fa:	69ab      	ldr	r3, [r5, #24]
 80046fc:	b31b      	cbz	r3, 8004746 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004706:	f7fe ff83 	bl	8003610 <HAL_GetTick>
 800470a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	079a      	lsls	r2, r3, #30
 8004710:	d511      	bpl.n	8004736 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	f043 0308 	orr.w	r3, r3, #8
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	6a2a      	ldr	r2, [r5, #32]
 800471e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004722:	4313      	orrs	r3, r2
 8004724:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004726:	6863      	ldr	r3, [r4, #4]
 8004728:	69ea      	ldr	r2, [r5, #28]
 800472a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800472e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004732:	6063      	str	r3, [r4, #4]
 8004734:	e7b7      	b.n	80046a6 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004736:	f7fe ff6b 	bl	8003610 <HAL_GetTick>
 800473a:	eba0 0008 	sub.w	r0, r0, r8
 800473e:	2802      	cmp	r0, #2
 8004740:	d9e4      	bls.n	800470c <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8004742:	2003      	movs	r0, #3
 8004744:	e765      	b.n	8004612 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800474e:	f7fe ff5f 	bl	8003610 <HAL_GetTick>
 8004752:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	079b      	lsls	r3, r3, #30
 8004758:	d5a5      	bpl.n	80046a6 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800475a:	f7fe ff59 	bl	8003610 <HAL_GetTick>
 800475e:	eba0 0008 	sub.w	r0, r0, r8
 8004762:	2802      	cmp	r0, #2
 8004764:	d9f6      	bls.n	8004754 <HAL_RCC_OscConfig+0x14c>
 8004766:	e7ec      	b.n	8004742 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004768:	2e08      	cmp	r6, #8
 800476a:	d003      	beq.n	8004774 <HAL_RCC_OscConfig+0x16c>
 800476c:	2e0c      	cmp	r6, #12
 800476e:	d108      	bne.n	8004782 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8004770:	2f03      	cmp	r7, #3
 8004772:	d106      	bne.n	8004782 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	039a      	lsls	r2, r3, #14
 8004778:	d598      	bpl.n	80046ac <HAL_RCC_OscConfig+0xa4>
 800477a:	686b      	ldr	r3, [r5, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d195      	bne.n	80046ac <HAL_RCC_OscConfig+0xa4>
 8004780:	e746      	b.n	8004610 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004782:	686b      	ldr	r3, [r5, #4]
 8004784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004788:	d110      	bne.n	80047ac <HAL_RCC_OscConfig+0x1a4>
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004790:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004792:	f7fe ff3d 	bl	8003610 <HAL_GetTick>
 8004796:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	039b      	lsls	r3, r3, #14
 800479c:	d486      	bmi.n	80046ac <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800479e:	f7fe ff37 	bl	8003610 <HAL_GetTick>
 80047a2:	eba0 0008 	sub.w	r0, r0, r8
 80047a6:	2864      	cmp	r0, #100	; 0x64
 80047a8:	d9f6      	bls.n	8004798 <HAL_RCC_OscConfig+0x190>
 80047aa:	e7ca      	b.n	8004742 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047b0:	d104      	bne.n	80047bc <HAL_RCC_OscConfig+0x1b4>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b8:	6023      	str	r3, [r4, #0]
 80047ba:	e7e6      	b.n	800478a <HAL_RCC_OscConfig+0x182>
 80047bc:	6822      	ldr	r2, [r4, #0]
 80047be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047c2:	6022      	str	r2, [r4, #0]
 80047c4:	6822      	ldr	r2, [r4, #0]
 80047c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047ca:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e0      	bne.n	8004792 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 80047d0:	f7fe ff1e 	bl	8003610 <HAL_GetTick>
 80047d4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	0398      	lsls	r0, r3, #14
 80047da:	f57f af67 	bpl.w	80046ac <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047de:	f7fe ff17 	bl	8003610 <HAL_GetTick>
 80047e2:	eba0 0008 	sub.w	r0, r0, r8
 80047e6:	2864      	cmp	r0, #100	; 0x64
 80047e8:	d9f5      	bls.n	80047d6 <HAL_RCC_OscConfig+0x1ce>
 80047ea:	e7aa      	b.n	8004742 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047ec:	2e04      	cmp	r6, #4
 80047ee:	d003      	beq.n	80047f8 <HAL_RCC_OscConfig+0x1f0>
 80047f0:	2e0c      	cmp	r6, #12
 80047f2:	d110      	bne.n	8004816 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80047f4:	2f02      	cmp	r7, #2
 80047f6:	d10e      	bne.n	8004816 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	0559      	lsls	r1, r3, #21
 80047fc:	d503      	bpl.n	8004806 <HAL_RCC_OscConfig+0x1fe>
 80047fe:	68eb      	ldr	r3, [r5, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	f43f af05 	beq.w	8004610 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004806:	6863      	ldr	r3, [r4, #4]
 8004808:	692a      	ldr	r2, [r5, #16]
 800480a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800480e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004812:	6063      	str	r3, [r4, #4]
 8004814:	e74e      	b.n	80046b4 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004816:	68eb      	ldr	r3, [r5, #12]
 8004818:	b17b      	cbz	r3, 800483a <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004820:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004822:	f7fe fef5 	bl	8003610 <HAL_GetTick>
 8004826:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	055a      	lsls	r2, r3, #21
 800482c:	d4eb      	bmi.n	8004806 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800482e:	f7fe feef 	bl	8003610 <HAL_GetTick>
 8004832:	1bc0      	subs	r0, r0, r7
 8004834:	2802      	cmp	r0, #2
 8004836:	d9f7      	bls.n	8004828 <HAL_RCC_OscConfig+0x220>
 8004838:	e783      	b.n	8004742 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004840:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004842:	f7fe fee5 	bl	8003610 <HAL_GetTick>
 8004846:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	055b      	lsls	r3, r3, #21
 800484c:	f57f af32 	bpl.w	80046b4 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004850:	f7fe fede 	bl	8003610 <HAL_GetTick>
 8004854:	1bc0      	subs	r0, r0, r7
 8004856:	2802      	cmp	r0, #2
 8004858:	d9f6      	bls.n	8004848 <HAL_RCC_OscConfig+0x240>
 800485a:	e772      	b.n	8004742 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800485c:	696b      	ldr	r3, [r5, #20]
 800485e:	b19b      	cbz	r3, 8004888 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8004860:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800486c:	f7fe fed0 	bl	8003610 <HAL_GetTick>
 8004870:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004872:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004876:	079a      	lsls	r2, r3, #30
 8004878:	f53f af20 	bmi.w	80046bc <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800487c:	f7fe fec8 	bl	8003610 <HAL_GetTick>
 8004880:	1bc0      	subs	r0, r0, r7
 8004882:	2802      	cmp	r0, #2
 8004884:	d9f5      	bls.n	8004872 <HAL_RCC_OscConfig+0x26a>
 8004886:	e75c      	b.n	8004742 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8004888:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004894:	f7fe febc 	bl	8003610 <HAL_GetTick>
 8004898:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800489a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800489e:	079b      	lsls	r3, r3, #30
 80048a0:	f57f af0c 	bpl.w	80046bc <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a4:	f7fe feb4 	bl	8003610 <HAL_GetTick>
 80048a8:	1bc0      	subs	r0, r0, r7
 80048aa:	2802      	cmp	r0, #2
 80048ac:	d9f5      	bls.n	800489a <HAL_RCC_OscConfig+0x292>
 80048ae:	e748      	b.n	8004742 <HAL_RCC_OscConfig+0x13a>
 80048b0:	40021000 	.word	0x40021000
 80048b4:	08028454 	.word	0x08028454
 80048b8:	200006b0 	.word	0x200006b0
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048be:	00d8      	lsls	r0, r3, #3
 80048c0:	d429      	bmi.n	8004916 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80048ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d0:	9301      	str	r3, [sp, #4]
 80048d2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80048d4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048d8:	4f5d      	ldr	r7, [pc, #372]	; (8004a50 <HAL_RCC_OscConfig+0x448>)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	05d9      	lsls	r1, r3, #23
 80048de:	d51d      	bpl.n	800491c <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e0:	68ab      	ldr	r3, [r5, #8]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d12b      	bne.n	800493e <HAL_RCC_OscConfig+0x336>
 80048e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80048f2:	f7fe fe8d 	bl	8003610 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80048fa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048fc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004900:	079b      	lsls	r3, r3, #30
 8004902:	d542      	bpl.n	800498a <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8004904:	f1b8 0f00 	cmp.w	r8, #0
 8004908:	f43f aedc 	beq.w	80046c4 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800490c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800490e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004912:	65a3      	str	r3, [r4, #88]	; 0x58
 8004914:	e6d6      	b.n	80046c4 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8004916:	f04f 0800 	mov.w	r8, #0
 800491a:	e7dd      	b.n	80048d8 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004922:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004924:	f7fe fe74 	bl	8003610 <HAL_GetTick>
 8004928:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	05da      	lsls	r2, r3, #23
 800492e:	d4d7      	bmi.n	80048e0 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004930:	f7fe fe6e 	bl	8003610 <HAL_GetTick>
 8004934:	eba0 0009 	sub.w	r0, r0, r9
 8004938:	2802      	cmp	r0, #2
 800493a:	d9f6      	bls.n	800492a <HAL_RCC_OscConfig+0x322>
 800493c:	e701      	b.n	8004742 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800493e:	2b05      	cmp	r3, #5
 8004940:	d106      	bne.n	8004950 <HAL_RCC_OscConfig+0x348>
 8004942:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004946:	f043 0304 	orr.w	r3, r3, #4
 800494a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800494e:	e7ca      	b.n	80048e6 <HAL_RCC_OscConfig+0x2de>
 8004950:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800495c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004960:	f022 0204 	bic.w	r2, r2, #4
 8004964:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1c2      	bne.n	80048f2 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 800496c:	f7fe fe50 	bl	8003610 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004970:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004974:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004976:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800497a:	0798      	lsls	r0, r3, #30
 800497c:	d5c2      	bpl.n	8004904 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497e:	f7fe fe47 	bl	8003610 <HAL_GetTick>
 8004982:	1bc0      	subs	r0, r0, r7
 8004984:	4548      	cmp	r0, r9
 8004986:	d9f6      	bls.n	8004976 <HAL_RCC_OscConfig+0x36e>
 8004988:	e6db      	b.n	8004742 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498a:	f7fe fe41 	bl	8003610 <HAL_GetTick>
 800498e:	1bc0      	subs	r0, r0, r7
 8004990:	4548      	cmp	r0, r9
 8004992:	d9b3      	bls.n	80048fc <HAL_RCC_OscConfig+0x2f4>
 8004994:	e6d5      	b.n	8004742 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004996:	2e0c      	cmp	r6, #12
 8004998:	f43f ae3a 	beq.w	8004610 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800499c:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049a4:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049a6:	d137      	bne.n	8004a18 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 80049a8:	f7fe fe32 	bl	8003610 <HAL_GetTick>
 80049ac:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	0199      	lsls	r1, r3, #6
 80049b2:	d42b      	bmi.n	8004a0c <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80049b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80049b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80049bc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80049be:	3a01      	subs	r2, #1
 80049c0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80049c4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80049c6:	0912      	lsrs	r2, r2, #4
 80049c8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80049cc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80049ce:	0852      	lsrs	r2, r2, #1
 80049d0:	3a01      	subs	r2, #1
 80049d2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80049d6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80049d8:	0852      	lsrs	r2, r2, #1
 80049da:	3a01      	subs	r2, #1
 80049dc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80049e0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049e8:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049ea:	68e3      	ldr	r3, [r4, #12]
 80049ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049f0:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80049f2:	f7fe fe0d 	bl	8003610 <HAL_GetTick>
 80049f6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	019a      	lsls	r2, r3, #6
 80049fc:	f53f ae66 	bmi.w	80046cc <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fe fe06 	bl	8003610 <HAL_GetTick>
 8004a04:	1b40      	subs	r0, r0, r5
 8004a06:	2802      	cmp	r0, #2
 8004a08:	d9f6      	bls.n	80049f8 <HAL_RCC_OscConfig+0x3f0>
 8004a0a:	e69a      	b.n	8004742 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fe fe00 	bl	8003610 <HAL_GetTick>
 8004a10:	1b80      	subs	r0, r0, r6
 8004a12:	2802      	cmp	r0, #2
 8004a14:	d9cb      	bls.n	80049ae <HAL_RCC_OscConfig+0x3a6>
 8004a16:	e694      	b.n	8004742 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a1e:	bf02      	ittt	eq
 8004a20:	68e3      	ldreq	r3, [r4, #12]
 8004a22:	f023 0303 	biceq.w	r3, r3, #3
 8004a26:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a28:	68e3      	ldr	r3, [r4, #12]
 8004a2a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a32:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004a34:	f7fe fdec 	bl	8003610 <HAL_GetTick>
 8004a38:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	019b      	lsls	r3, r3, #6
 8004a3e:	f57f ae45 	bpl.w	80046cc <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a42:	f7fe fde5 	bl	8003610 <HAL_GetTick>
 8004a46:	1b40      	subs	r0, r0, r5
 8004a48:	2802      	cmp	r0, #2
 8004a4a:	d9f6      	bls.n	8004a3a <HAL_RCC_OscConfig+0x432>
 8004a4c:	e679      	b.n	8004742 <HAL_RCC_OscConfig+0x13a>
 8004a4e:	bf00      	nop
 8004a50:	40007000 	.word	0x40007000

08004a54 <HAL_RCC_ClockConfig>:
{
 8004a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a58:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	b910      	cbnz	r0, 8004a64 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004a5e:	2001      	movs	r0, #1
 8004a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a64:	4a40      	ldr	r2, [pc, #256]	; (8004b68 <HAL_RCC_ClockConfig+0x114>)
 8004a66:	6813      	ldr	r3, [r2, #0]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	428b      	cmp	r3, r1
 8004a6e:	d329      	bcc.n	8004ac4 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	07d9      	lsls	r1, r3, #31
 8004a74:	d431      	bmi.n	8004ada <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a76:	6821      	ldr	r1, [r4, #0]
 8004a78:	078a      	lsls	r2, r1, #30
 8004a7a:	d45b      	bmi.n	8004b34 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a7c:	4a3a      	ldr	r2, [pc, #232]	; (8004b68 <HAL_RCC_ClockConfig+0x114>)
 8004a7e:	6813      	ldr	r3, [r2, #0]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	429e      	cmp	r6, r3
 8004a86:	d35d      	bcc.n	8004b44 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a88:	f011 0f04 	tst.w	r1, #4
 8004a8c:	4d37      	ldr	r5, [pc, #220]	; (8004b6c <HAL_RCC_ClockConfig+0x118>)
 8004a8e:	d164      	bne.n	8004b5a <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a90:	070b      	lsls	r3, r1, #28
 8004a92:	d506      	bpl.n	8004aa2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a94:	68ab      	ldr	r3, [r5, #8]
 8004a96:	6922      	ldr	r2, [r4, #16]
 8004a98:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004a9c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004aa0:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aa2:	f7ff fd5d 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 8004aa6:	68ab      	ldr	r3, [r5, #8]
 8004aa8:	4a31      	ldr	r2, [pc, #196]	; (8004b70 <HAL_RCC_ClockConfig+0x11c>)
 8004aaa:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8004aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ab2:	5cd3      	ldrb	r3, [r2, r3]
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	40d8      	lsrs	r0, r3
 8004aba:	4b2e      	ldr	r3, [pc, #184]	; (8004b74 <HAL_RCC_ClockConfig+0x120>)
 8004abc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8004abe:	2000      	movs	r0, #0
 8004ac0:	f7fe bd70 	b.w	80035a4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac4:	6813      	ldr	r3, [r2, #0]
 8004ac6:	f023 0307 	bic.w	r3, r3, #7
 8004aca:	430b      	orrs	r3, r1
 8004acc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	6813      	ldr	r3, [r2, #0]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	4299      	cmp	r1, r3
 8004ad6:	d1c2      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xa>
 8004ad8:	e7ca      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ada:	6862      	ldr	r2, [r4, #4]
 8004adc:	4d23      	ldr	r5, [pc, #140]	; (8004b6c <HAL_RCC_ClockConfig+0x118>)
 8004ade:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae2:	d11b      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae8:	d0b9      	beq.n	8004a5e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004aea:	68ab      	ldr	r3, [r5, #8]
 8004aec:	f023 0303 	bic.w	r3, r3, #3
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8004af4:	f7fe fd8c 	bl	8003610 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004afc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	68ab      	ldr	r3, [r5, #8]
 8004b00:	6862      	ldr	r2, [r4, #4]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004b0a:	d0b4      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0c:	f7fe fd80 	bl	8003610 <HAL_GetTick>
 8004b10:	1bc0      	subs	r0, r0, r7
 8004b12:	4540      	cmp	r0, r8
 8004b14:	d9f3      	bls.n	8004afe <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8004b16:	2003      	movs	r0, #3
}
 8004b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b1c:	2a02      	cmp	r2, #2
 8004b1e:	d102      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b24:	e7e0      	b.n	8004ae8 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b26:	b912      	cbnz	r2, 8004b2e <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b28:	f013 0f02 	tst.w	r3, #2
 8004b2c:	e7dc      	b.n	8004ae8 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b2e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004b32:	e7d9      	b.n	8004ae8 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b34:	4a0d      	ldr	r2, [pc, #52]	; (8004b6c <HAL_RCC_ClockConfig+0x118>)
 8004b36:	68a0      	ldr	r0, [r4, #8]
 8004b38:	6893      	ldr	r3, [r2, #8]
 8004b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b3e:	4303      	orrs	r3, r0
 8004b40:	6093      	str	r3, [r2, #8]
 8004b42:	e79b      	b.n	8004a7c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b44:	6813      	ldr	r3, [r2, #0]
 8004b46:	f023 0307 	bic.w	r3, r3, #7
 8004b4a:	4333      	orrs	r3, r6
 8004b4c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4e:	6813      	ldr	r3, [r2, #0]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	429e      	cmp	r6, r3
 8004b56:	d182      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xa>
 8004b58:	e796      	b.n	8004a88 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b5a:	68ab      	ldr	r3, [r5, #8]
 8004b5c:	68e2      	ldr	r2, [r4, #12]
 8004b5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60ab      	str	r3, [r5, #8]
 8004b66:	e793      	b.n	8004a90 <HAL_RCC_ClockConfig+0x3c>
 8004b68:	40022000 	.word	0x40022000
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	08028454 	.word	0x08028454
 8004b74:	200006b0 	.word	0x200006b0

08004b78 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004b7a:	4a06      	ldr	r2, [pc, #24]	; (8004b94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004b82:	5cd3      	ldrb	r3, [r2, r3]
 8004b84:	4a04      	ldr	r2, [pc, #16]	; (8004b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b86:	6810      	ldr	r0, [r2, #0]
 8004b88:	f003 031f 	and.w	r3, r3, #31
}
 8004b8c:	40d8      	lsrs	r0, r3
 8004b8e:	4770      	bx	lr
 8004b90:	40021000 	.word	0x40021000
 8004b94:	08028464 	.word	0x08028464
 8004b98:	200006b0 	.word	0x200006b0

08004b9c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004b9e:	4a06      	ldr	r2, [pc, #24]	; (8004bb8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004ba6:	5cd3      	ldrb	r3, [r2, r3]
 8004ba8:	4a04      	ldr	r2, [pc, #16]	; (8004bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004baa:	6810      	ldr	r0, [r2, #0]
 8004bac:	f003 031f 	and.w	r3, r3, #31
}
 8004bb0:	40d8      	lsrs	r0, r3
 8004bb2:	4770      	bx	lr
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	08028464 	.word	0x08028464
 8004bbc:	200006b0 	.word	0x200006b0

08004bc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bc2:	4b45      	ldr	r3, [pc, #276]	; (8004cd8 <RCCEx_PLLSAI1_Config+0x118>)
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	f012 0f03 	tst.w	r2, #3
{
 8004bca:	4605      	mov	r5, r0
 8004bcc:	460e      	mov	r6, r1
 8004bce:	461c      	mov	r4, r3
 8004bd0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bd2:	d02a      	beq.n	8004c2a <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	f002 0203 	and.w	r2, r2, #3
 8004bda:	4282      	cmp	r2, r0
 8004bdc:	d13c      	bne.n	8004c58 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	d03a      	beq.n	8004c58 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004be2:	68db      	ldr	r3, [r3, #12]
       ||
 8004be4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004be6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004bea:	3301      	adds	r3, #1
       ||
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d133      	bne.n	8004c58 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bf6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf8:	f7fe fd0a 	bl	8003610 <HAL_GetTick>
 8004bfc:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	011a      	lsls	r2, r3, #4
 8004c02:	d432      	bmi.n	8004c6a <RCCEx_PLLSAI1_Config+0xaa>
 8004c04:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c06:	2e00      	cmp	r6, #0
 8004c08:	d036      	beq.n	8004c78 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c0a:	2e01      	cmp	r6, #1
 8004c0c:	d150      	bne.n	8004cb0 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c0e:	6922      	ldr	r2, [r4, #16]
 8004c10:	6928      	ldr	r0, [r5, #16]
 8004c12:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004c16:	0840      	lsrs	r0, r0, #1
 8004c18:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8004c1c:	3801      	subs	r0, #1
 8004c1e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004c22:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8004c26:	6122      	str	r2, [r4, #16]
 8004c28:	e032      	b.n	8004c90 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8004c2a:	2802      	cmp	r0, #2
 8004c2c:	d010      	beq.n	8004c50 <RCCEx_PLLSAI1_Config+0x90>
 8004c2e:	2803      	cmp	r0, #3
 8004c30:	d014      	beq.n	8004c5c <RCCEx_PLLSAI1_Config+0x9c>
 8004c32:	2801      	cmp	r0, #1
 8004c34:	d110      	bne.n	8004c58 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	079f      	lsls	r7, r3, #30
 8004c3a:	d538      	bpl.n	8004cae <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c3c:	68e3      	ldr	r3, [r4, #12]
 8004c3e:	686a      	ldr	r2, [r5, #4]
 8004c40:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8004c44:	3a01      	subs	r2, #1
 8004c46:	4318      	orrs	r0, r3
 8004c48:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8004c4c:	60e0      	str	r0, [r4, #12]
 8004c4e:	e7cf      	b.n	8004bf0 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c56:	d1f1      	bne.n	8004c3c <RCCEx_PLLSAI1_Config+0x7c>
 8004c58:	2001      	movs	r0, #1
 8004c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	0391      	lsls	r1, r2, #14
 8004c60:	d4ec      	bmi.n	8004c3c <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004c68:	e7f5      	b.n	8004c56 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c6a:	f7fe fcd1 	bl	8003610 <HAL_GetTick>
 8004c6e:	1bc0      	subs	r0, r0, r7
 8004c70:	2802      	cmp	r0, #2
 8004c72:	d9c4      	bls.n	8004bfe <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8004c74:	2003      	movs	r0, #3
 8004c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c78:	6921      	ldr	r1, [r4, #16]
 8004c7a:	68eb      	ldr	r3, [r5, #12]
 8004c7c:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8004c80:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004c84:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8004c8e:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c96:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c98:	f7fe fcba 	bl	8003610 <HAL_GetTick>
 8004c9c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	d513      	bpl.n	8004ccc <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ca4:	6923      	ldr	r3, [r4, #16]
 8004ca6:	69aa      	ldr	r2, [r5, #24]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	6123      	str	r3, [r4, #16]
 8004cac:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cb0:	6923      	ldr	r3, [r4, #16]
 8004cb2:	6968      	ldr	r0, [r5, #20]
 8004cb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cb8:	0840      	lsrs	r0, r0, #1
 8004cba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cbe:	3801      	subs	r0, #1
 8004cc0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004cc4:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8004cc8:	6123      	str	r3, [r4, #16]
 8004cca:	e7e1      	b.n	8004c90 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ccc:	f7fe fca0 	bl	8003610 <HAL_GetTick>
 8004cd0:	1b80      	subs	r0, r0, r6
 8004cd2:	2802      	cmp	r0, #2
 8004cd4:	d9e3      	bls.n	8004c9e <RCCEx_PLLSAI1_Config+0xde>
 8004cd6:	e7cd      	b.n	8004c74 <RCCEx_PLLSAI1_Config+0xb4>
 8004cd8:	40021000 	.word	0x40021000

08004cdc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cde:	4b3d      	ldr	r3, [pc, #244]	; (8004dd4 <RCCEx_PLLSAI2_Config+0xf8>)
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	f012 0f03 	tst.w	r2, #3
{
 8004ce6:	4605      	mov	r5, r0
 8004ce8:	460e      	mov	r6, r1
 8004cea:	461c      	mov	r4, r3
 8004cec:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cee:	d028      	beq.n	8004d42 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	f002 0203 	and.w	r2, r2, #3
 8004cf6:	4282      	cmp	r2, r0
 8004cf8:	d13a      	bne.n	8004d70 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	d038      	beq.n	8004d70 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004cfe:	68db      	ldr	r3, [r3, #12]
       ||
 8004d00:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d02:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004d06:	3301      	adds	r3, #1
       ||
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d131      	bne.n	8004d70 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d12:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d14:	f7fe fc7c 	bl	8003610 <HAL_GetTick>
 8004d18:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	009a      	lsls	r2, r3, #2
 8004d1e:	d430      	bmi.n	8004d82 <RCCEx_PLLSAI2_Config+0xa6>
 8004d20:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d22:	2e00      	cmp	r6, #0
 8004d24:	d034      	beq.n	8004d90 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d26:	6963      	ldr	r3, [r4, #20]
 8004d28:	6929      	ldr	r1, [r5, #16]
 8004d2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d2e:	0849      	lsrs	r1, r1, #1
 8004d30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d34:	3901      	subs	r1, #1
 8004d36:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004d3a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8004d3e:	6163      	str	r3, [r4, #20]
 8004d40:	e032      	b.n	8004da8 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8004d42:	2802      	cmp	r0, #2
 8004d44:	d010      	beq.n	8004d68 <RCCEx_PLLSAI2_Config+0x8c>
 8004d46:	2803      	cmp	r0, #3
 8004d48:	d014      	beq.n	8004d74 <RCCEx_PLLSAI2_Config+0x98>
 8004d4a:	2801      	cmp	r0, #1
 8004d4c:	d110      	bne.n	8004d70 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	079f      	lsls	r7, r3, #30
 8004d52:	d538      	bpl.n	8004dc6 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d54:	68e3      	ldr	r3, [r4, #12]
 8004d56:	686a      	ldr	r2, [r5, #4]
 8004d58:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8004d5c:	3a01      	subs	r2, #1
 8004d5e:	4318      	orrs	r0, r3
 8004d60:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8004d64:	60e0      	str	r0, [r4, #12]
 8004d66:	e7d1      	b.n	8004d0c <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d6e:	d1f1      	bne.n	8004d54 <RCCEx_PLLSAI2_Config+0x78>
 8004d70:	2001      	movs	r0, #1
 8004d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	0391      	lsls	r1, r2, #14
 8004d78:	d4ec      	bmi.n	8004d54 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004d80:	e7f5      	b.n	8004d6e <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d82:	f7fe fc45 	bl	8003610 <HAL_GetTick>
 8004d86:	1bc0      	subs	r0, r0, r7
 8004d88:	2802      	cmp	r0, #2
 8004d8a:	d9c6      	bls.n	8004d1a <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8004d8c:	2003      	movs	r0, #3
 8004d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d90:	6962      	ldr	r2, [r4, #20]
 8004d92:	68eb      	ldr	r3, [r5, #12]
 8004d94:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8004d98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d9c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004da0:	091b      	lsrs	r3, r3, #4
 8004da2:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8004da6:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dae:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db0:	f7fe fc2e 	bl	8003610 <HAL_GetTick>
 8004db4:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	d505      	bpl.n	8004dc8 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004dbc:	6963      	ldr	r3, [r4, #20]
 8004dbe:	696a      	ldr	r2, [r5, #20]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	6163      	str	r3, [r4, #20]
 8004dc4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dc8:	f7fe fc22 	bl	8003610 <HAL_GetTick>
 8004dcc:	1b80      	subs	r0, r0, r6
 8004dce:	2802      	cmp	r0, #2
 8004dd0:	d9f1      	bls.n	8004db6 <RCCEx_PLLSAI2_Config+0xda>
 8004dd2:	e7db      	b.n	8004d8c <RCCEx_PLLSAI2_Config+0xb0>
 8004dd4:	40021000 	.word	0x40021000

08004dd8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004dd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ddc:	6806      	ldr	r6, [r0, #0]
 8004dde:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8004de2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004de4:	d024      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004de6:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8004de8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8004dec:	d02c      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004dee:	d802      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004df0:	b1c1      	cbz	r1, 8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8004df2:	2601      	movs	r6, #1
 8004df4:	e01c      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004df6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8004dfa:	d00d      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004dfc:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8004e00:	d1f7      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e02:	4a4d      	ldr	r2, [pc, #308]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e04:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004e06:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e0a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004e14:	2600      	movs	r6, #0
 8004e16:	e00b      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e18:	4a47      	ldr	r2, [pc, #284]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1a:	68d3      	ldr	r3, [r2, #12]
 8004e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e20:	60d3      	str	r3, [r2, #12]
      break;
 8004e22:	e7ee      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e24:	3004      	adds	r0, #4
 8004e26:	f7ff fecb 	bl	8004bc0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e2a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d0e8      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	04d8      	lsls	r0, r3, #19
 8004e34:	d506      	bpl.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004e36:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004e38:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8004e3c:	d074      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8004e3e:	d808      	bhi.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e40:	b1a9      	cbz	r1, 8004e6e <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8004e42:	2601      	movs	r6, #1
 8004e44:	4635      	mov	r5, r6
 8004e46:	e021      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e48:	2100      	movs	r1, #0
 8004e4a:	3020      	adds	r0, #32
 8004e4c:	f7ff ff46 	bl	8004cdc <RCCEx_PLLSAI2_Config>
 8004e50:	e7eb      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004e52:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8004e56:	d004      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004e58:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8004e5c:	d1f1      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004e5e:	4635      	mov	r5, r6
 8004e60:	e009      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e62:	4a35      	ldr	r2, [pc, #212]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e64:	68d3      	ldr	r3, [r2, #12]
 8004e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6a:	60d3      	str	r3, [r2, #12]
 8004e6c:	e7f7      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e6e:	1d20      	adds	r0, r4, #4
 8004e70:	f7ff fea6 	bl	8004bc0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e74:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004e76:	2d00      	cmp	r5, #0
 8004e78:	d15c      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e7a:	4a2f      	ldr	r2, [pc, #188]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004e7e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e82:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004e86:	430b      	orrs	r3, r1
 8004e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	0399      	lsls	r1, r3, #14
 8004e90:	f140 814f 	bpl.w	8005132 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e94:	4f28      	ldr	r7, [pc, #160]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e98:	00da      	lsls	r2, r3, #3
 8004e9a:	f140 8176 	bpl.w	800518a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8004e9e:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004f3c <HAL_RCCEx_PeriphCLKConfig+0x164>
 8004ea6:	f8d9 3000 	ldr.w	r3, [r9]
 8004eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eae:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8004eb2:	f7fe fbad 	bl	8003610 <HAL_GetTick>
 8004eb6:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eb8:	f8d9 3000 	ldr.w	r3, [r9]
 8004ebc:	05db      	lsls	r3, r3, #23
 8004ebe:	d53f      	bpl.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8004ec0:	2d00      	cmp	r5, #0
 8004ec2:	d144      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ec8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004ecc:	d015      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x122>
 8004ece:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d011      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eda:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004ede:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ee2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ef2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004efa:	07d8      	lsls	r0, r3, #31
 8004efc:	d509      	bpl.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8004efe:	f7fe fb87 	bl	8003610 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f02:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004f06:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f0c:	0799      	lsls	r1, r3, #30
 8004f0e:	f140 8109 	bpl.w	8005124 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f16:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8004f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f24:	4635      	mov	r5, r6
 8004f26:	e012      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f28:	2100      	movs	r1, #0
 8004f2a:	f104 0020 	add.w	r0, r4, #32
 8004f2e:	f7ff fed5 	bl	8004cdc <RCCEx_PLLSAI2_Config>
 8004f32:	e79f      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8004f34:	462e      	mov	r6, r5
 8004f36:	e7a9      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f40:	f7fe fb66 	bl	8003610 <HAL_GetTick>
 8004f44:	eba0 000a 	sub.w	r0, r0, sl
 8004f48:	2802      	cmp	r0, #2
 8004f4a:	d9b5      	bls.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8004f4c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8004f4e:	f1b8 0f00 	cmp.w	r8, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	07da      	lsls	r2, r3, #31
 8004f60:	d508      	bpl.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f62:	4990      	ldr	r1, [pc, #576]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004f64:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f66:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f6a:	f022 0203 	bic.w	r2, r2, #3
 8004f6e:	4302      	orrs	r2, r0
 8004f70:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f74:	079f      	lsls	r7, r3, #30
 8004f76:	d508      	bpl.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f78:	498a      	ldr	r1, [pc, #552]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004f7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004f7c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f80:	f022 020c 	bic.w	r2, r2, #12
 8004f84:	4302      	orrs	r2, r0
 8004f86:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f8a:	075e      	lsls	r6, r3, #29
 8004f8c:	d508      	bpl.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f8e:	4985      	ldr	r1, [pc, #532]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004f90:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004f92:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f96:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004f9a:	4302      	orrs	r2, r0
 8004f9c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fa0:	0718      	lsls	r0, r3, #28
 8004fa2:	d508      	bpl.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fa4:	497f      	ldr	r1, [pc, #508]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004fa6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004fa8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004fac:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004fb0:	4302      	orrs	r2, r0
 8004fb2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fb6:	06d9      	lsls	r1, r3, #27
 8004fb8:	d508      	bpl.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fba:	497a      	ldr	r1, [pc, #488]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004fbc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004fbe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004fc2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fc6:	4302      	orrs	r2, r0
 8004fc8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fcc:	069a      	lsls	r2, r3, #26
 8004fce:	d508      	bpl.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fd0:	4974      	ldr	r1, [pc, #464]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004fd2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004fd4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004fd8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004fdc:	4302      	orrs	r2, r0
 8004fde:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fe2:	059f      	lsls	r7, r3, #22
 8004fe4:	d508      	bpl.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fe6:	496f      	ldr	r1, [pc, #444]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004fe8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004fea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004fee:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004ff2:	4302      	orrs	r2, r0
 8004ff4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ff8:	055e      	lsls	r6, r3, #21
 8004ffa:	d508      	bpl.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ffc:	4969      	ldr	r1, [pc, #420]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004ffe:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005000:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005004:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005008:	4302      	orrs	r2, r0
 800500a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800500e:	0658      	lsls	r0, r3, #25
 8005010:	d508      	bpl.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005012:	4964      	ldr	r1, [pc, #400]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8005014:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005016:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800501a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800501e:	4302      	orrs	r2, r0
 8005020:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005024:	0619      	lsls	r1, r3, #24
 8005026:	d508      	bpl.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005028:	495e      	ldr	r1, [pc, #376]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800502a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800502c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005030:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005034:	4302      	orrs	r2, r0
 8005036:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800503a:	05da      	lsls	r2, r3, #23
 800503c:	d508      	bpl.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800503e:	4959      	ldr	r1, [pc, #356]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8005040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005042:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005046:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800504a:	4302      	orrs	r2, r0
 800504c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005050:	049b      	lsls	r3, r3, #18
 8005052:	d50f      	bpl.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005054:	4a53      	ldr	r2, [pc, #332]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8005056:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005058:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800505c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005060:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005062:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005066:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800506a:	d164      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800506c:	68d3      	ldr	r3, [r2, #12]
 800506e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005072:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	031f      	lsls	r7, r3, #12
 8005078:	d50f      	bpl.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800507a:	4a4a      	ldr	r2, [pc, #296]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800507c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800507e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005082:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005086:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005088:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800508c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005090:	d15c      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005092:	68d3      	ldr	r3, [r2, #12]
 8005094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005098:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	035e      	lsls	r6, r3, #13
 800509e:	d50f      	bpl.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050a0:	4a40      	ldr	r2, [pc, #256]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80050a2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80050a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80050a8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80050ac:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050ae:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050b6:	d154      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050b8:	68d3      	ldr	r3, [r2, #12]
 80050ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050be:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	0458      	lsls	r0, r3, #17
 80050c4:	d512      	bpl.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050c6:	4937      	ldr	r1, [pc, #220]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80050c8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80050ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80050ce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80050d2:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80050d4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80050dc:	d14c      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050de:	2102      	movs	r1, #2
 80050e0:	1d20      	adds	r0, r4, #4
 80050e2:	f7ff fd6d 	bl	8004bc0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80050e6:	2800      	cmp	r0, #0
 80050e8:	bf18      	it	ne
 80050ea:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050ec:	6822      	ldr	r2, [r4, #0]
 80050ee:	0411      	lsls	r1, r2, #16
 80050f0:	d508      	bpl.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050f2:	492c      	ldr	r1, [pc, #176]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80050f4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80050f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80050fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050fe:	4303      	orrs	r3, r0
 8005100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005104:	03d3      	lsls	r3, r2, #15
 8005106:	d509      	bpl.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005108:	4a26      	ldr	r2, [pc, #152]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800510a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800510e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005112:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005116:	430b      	orrs	r3, r1
 8005118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800511c:	4628      	mov	r0, r5
 800511e:	b002      	add	sp, #8
 8005120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005124:	f7fe fa74 	bl	8003610 <HAL_GetTick>
 8005128:	1b40      	subs	r0, r0, r5
 800512a:	4548      	cmp	r0, r9
 800512c:	f67f aeec 	bls.w	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8005130:	e70c      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005132:	4635      	mov	r5, r6
 8005134:	e712      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005136:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800513a:	d19b      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800513c:	2101      	movs	r1, #1
 800513e:	1d20      	adds	r0, r4, #4
 8005140:	f7ff fd3e 	bl	8004bc0 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8005144:	2800      	cmp	r0, #0
 8005146:	bf18      	it	ne
 8005148:	4605      	movne	r5, r0
 800514a:	e793      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800514c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8005150:	d1a3      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005152:	2101      	movs	r1, #1
 8005154:	1d20      	adds	r0, r4, #4
 8005156:	f7ff fd33 	bl	8004bc0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800515a:	2800      	cmp	r0, #0
 800515c:	bf18      	it	ne
 800515e:	4605      	movne	r5, r0
 8005160:	e79b      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005162:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8005166:	d1ab      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005168:	2101      	movs	r1, #1
 800516a:	1d20      	adds	r0, r4, #4
 800516c:	f7ff fd28 	bl	8004bc0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8005170:	2800      	cmp	r0, #0
 8005172:	bf18      	it	ne
 8005174:	4605      	movne	r5, r0
 8005176:	e7a3      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005178:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800517c:	d1b6      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800517e:	2102      	movs	r1, #2
 8005180:	f104 0020 	add.w	r0, r4, #32
 8005184:	f7ff fdaa 	bl	8004cdc <RCCEx_PLLSAI2_Config>
 8005188:	e7ad      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800518a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800518c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005190:	65bb      	str	r3, [r7, #88]	; 0x58
 8005192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800519c:	f04f 0801 	mov.w	r8, #1
 80051a0:	e67f      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xca>
 80051a2:	bf00      	nop
 80051a4:	40021000 	.word	0x40021000

080051a8 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	2302      	movs	r3, #2
{
 80051aa:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80051b0:	6803      	ldr	r3, [r0, #0]
 80051b2:	4c09      	ldr	r4, [pc, #36]	; (80051d8 <HAL_TIM_Base_Start+0x30>)
 80051b4:	6899      	ldr	r1, [r3, #8]
 80051b6:	4021      	ands	r1, r4
 80051b8:	2906      	cmp	r1, #6
 80051ba:	d008      	beq.n	80051ce <HAL_TIM_Base_Start+0x26>
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	4022      	ands	r2, r4
 80051c0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 80051c4:	bf1e      	ittt	ne
 80051c6:	681a      	ldrne	r2, [r3, #0]
 80051c8:	f042 0201 	orrne.w	r2, r2, #1
 80051cc:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 80051d4:	2000      	movs	r0, #0
 80051d6:	bd10      	pop	{r4, pc}
 80051d8:	00010007 	.word	0x00010007

080051dc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051dc:	4a30      	ldr	r2, [pc, #192]	; (80052a0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80051de:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e0:	4290      	cmp	r0, r2
 80051e2:	d012      	beq.n	800520a <TIM_Base_SetConfig+0x2e>
 80051e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80051e8:	d00f      	beq.n	800520a <TIM_Base_SetConfig+0x2e>
 80051ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80051ee:	4290      	cmp	r0, r2
 80051f0:	d00b      	beq.n	800520a <TIM_Base_SetConfig+0x2e>
 80051f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051f6:	4290      	cmp	r0, r2
 80051f8:	d007      	beq.n	800520a <TIM_Base_SetConfig+0x2e>
 80051fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051fe:	4290      	cmp	r0, r2
 8005200:	d003      	beq.n	800520a <TIM_Base_SetConfig+0x2e>
 8005202:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005206:	4290      	cmp	r0, r2
 8005208:	d119      	bne.n	800523e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800520a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800520c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005210:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005212:	4a23      	ldr	r2, [pc, #140]	; (80052a0 <TIM_Base_SetConfig+0xc4>)
 8005214:	4290      	cmp	r0, r2
 8005216:	d01d      	beq.n	8005254 <TIM_Base_SetConfig+0x78>
 8005218:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800521c:	d01a      	beq.n	8005254 <TIM_Base_SetConfig+0x78>
 800521e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005222:	4290      	cmp	r0, r2
 8005224:	d016      	beq.n	8005254 <TIM_Base_SetConfig+0x78>
 8005226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800522a:	4290      	cmp	r0, r2
 800522c:	d012      	beq.n	8005254 <TIM_Base_SetConfig+0x78>
 800522e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005232:	4290      	cmp	r0, r2
 8005234:	d00e      	beq.n	8005254 <TIM_Base_SetConfig+0x78>
 8005236:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800523a:	4290      	cmp	r0, r2
 800523c:	d00a      	beq.n	8005254 <TIM_Base_SetConfig+0x78>
 800523e:	4a19      	ldr	r2, [pc, #100]	; (80052a4 <TIM_Base_SetConfig+0xc8>)
 8005240:	4290      	cmp	r0, r2
 8005242:	d007      	beq.n	8005254 <TIM_Base_SetConfig+0x78>
 8005244:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005248:	4290      	cmp	r0, r2
 800524a:	d003      	beq.n	8005254 <TIM_Base_SetConfig+0x78>
 800524c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005250:	4290      	cmp	r0, r2
 8005252:	d103      	bne.n	800525c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005254:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800525a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800525c:	694a      	ldr	r2, [r1, #20]
 800525e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005262:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005264:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005266:	688b      	ldr	r3, [r1, #8]
 8005268:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800526a:	680b      	ldr	r3, [r1, #0]
 800526c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <TIM_Base_SetConfig+0xc4>)
 8005270:	4298      	cmp	r0, r3
 8005272:	d00f      	beq.n	8005294 <TIM_Base_SetConfig+0xb8>
 8005274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005278:	4298      	cmp	r0, r3
 800527a:	d00b      	beq.n	8005294 <TIM_Base_SetConfig+0xb8>
 800527c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005280:	4298      	cmp	r0, r3
 8005282:	d007      	beq.n	8005294 <TIM_Base_SetConfig+0xb8>
 8005284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005288:	4298      	cmp	r0, r3
 800528a:	d003      	beq.n	8005294 <TIM_Base_SetConfig+0xb8>
 800528c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005290:	4298      	cmp	r0, r3
 8005292:	d101      	bne.n	8005298 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005294:	690b      	ldr	r3, [r1, #16]
 8005296:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005298:	2301      	movs	r3, #1
 800529a:	6143      	str	r3, [r0, #20]
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40014000 	.word	0x40014000

080052a8 <HAL_TIM_Base_Init>:
{
 80052a8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80052aa:	4604      	mov	r4, r0
 80052ac:	b1a0      	cbz	r0, 80052d8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80052ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80052b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80052b6:	b91b      	cbnz	r3, 80052c0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80052b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80052bc:	f002 f9b2 	bl	8007624 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	2302      	movs	r3, #2
 80052c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c6:	6820      	ldr	r0, [r4, #0]
 80052c8:	1d21      	adds	r1, r4, #4
 80052ca:	f7ff ff87 	bl	80051dc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80052d4:	2000      	movs	r0, #0
 80052d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80052d8:	2001      	movs	r0, #1
}
 80052da:	bd10      	pop	{r4, pc}

080052dc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80052e0:	2b01      	cmp	r3, #1
{
 80052e2:	b530      	push	{r4, r5, lr}
 80052e4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80052e8:	d01f      	beq.n	800532a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052ea:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052ec:	4d10      	ldr	r5, [pc, #64]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 80052ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052f2:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80052f4:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80052f6:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052f8:	d003      	beq.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80052fa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80052fe:	42aa      	cmp	r2, r5
 8005300:	d103      	bne.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005302:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005304:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005308:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800530a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800530c:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005312:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005314:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005318:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800531a:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800531c:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 800531e:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005320:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005324:	2300      	movs	r3, #0
 8005326:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800532a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800532c:	bd30      	pop	{r4, r5, pc}
 800532e:	bf00      	nop
 8005330:	40012c00 	.word	0x40012c00

08005334 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005334:	6803      	ldr	r3, [r0, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800533c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	f022 0201 	bic.w	r2, r2, #1
 8005344:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005346:	2320      	movs	r3, #32
 8005348:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800534c:	2300      	movs	r3, #0
 800534e:	6603      	str	r3, [r0, #96]	; 0x60
 8005350:	4770      	bx	lr
	...

08005354 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8005354:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8005358:	2b20      	cmp	r3, #32
 800535a:	d149      	bne.n	80053f0 <HAL_UART_Receive_IT+0x9c>
    if ((pData == NULL) || (Size == 0U))
 800535c:	2900      	cmp	r1, #0
 800535e:	d045      	beq.n	80053ec <HAL_UART_Receive_IT+0x98>
 8005360:	2a00      	cmp	r2, #0
 8005362:	d043      	beq.n	80053ec <HAL_UART_Receive_IT+0x98>
    __HAL_LOCK(huart);
 8005364:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8005368:	2b01      	cmp	r3, #1
 800536a:	d041      	beq.n	80053f0 <HAL_UART_Receive_IT+0x9c>
 800536c:	2301      	movs	r3, #1
 800536e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxISR       = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8005376:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 8005378:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 800537a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize  = Size;
 800537e:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8005382:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8005386:	d121      	bne.n	80053cc <HAL_UART_Receive_IT+0x78>
 8005388:	6902      	ldr	r2, [r0, #16]
 800538a:	b9ea      	cbnz	r2, 80053c8 <HAL_UART_Receive_IT+0x74>
 800538c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005390:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005394:	2200      	movs	r2, #0
 8005396:	6742      	str	r2, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005398:	2222      	movs	r2, #34	; 0x22
 800539a:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539e:	6802      	ldr	r2, [r0, #0]
 80053a0:	6891      	ldr	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a6:	f041 0101 	orr.w	r1, r1, #1
 80053aa:	6091      	str	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ac:	d11c      	bne.n	80053e8 <HAL_UART_Receive_IT+0x94>
 80053ae:	6903      	ldr	r3, [r0, #16]
 80053b0:	b9d3      	cbnz	r3, 80053e8 <HAL_UART_Receive_IT+0x94>
        huart->RxISR = UART_RxISR_16BIT;
 80053b2:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <HAL_UART_Receive_IT+0xa0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80053b4:	6811      	ldr	r1, [r2, #0]
        huart->RxISR = UART_RxISR_8BIT;
 80053b6:	6603      	str	r3, [r0, #96]	; 0x60
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80053b8:	f441 7190 	orr.w	r1, r1, #288	; 0x120
      __HAL_UNLOCK(huart);
 80053bc:	2300      	movs	r3, #0
 80053be:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80053c2:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 80053c4:	4618      	mov	r0, r3
 80053c6:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80053c8:	22ff      	movs	r2, #255	; 0xff
 80053ca:	e7e1      	b.n	8005390 <HAL_UART_Receive_IT+0x3c>
 80053cc:	b923      	cbnz	r3, 80053d8 <HAL_UART_Receive_IT+0x84>
 80053ce:	6902      	ldr	r2, [r0, #16]
 80053d0:	2a00      	cmp	r2, #0
 80053d2:	d0f9      	beq.n	80053c8 <HAL_UART_Receive_IT+0x74>
 80053d4:	227f      	movs	r2, #127	; 0x7f
 80053d6:	e7db      	b.n	8005390 <HAL_UART_Receive_IT+0x3c>
 80053d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053dc:	d1da      	bne.n	8005394 <HAL_UART_Receive_IT+0x40>
 80053de:	6902      	ldr	r2, [r0, #16]
 80053e0:	2a00      	cmp	r2, #0
 80053e2:	d0f7      	beq.n	80053d4 <HAL_UART_Receive_IT+0x80>
 80053e4:	223f      	movs	r2, #63	; 0x3f
 80053e6:	e7d3      	b.n	8005390 <HAL_UART_Receive_IT+0x3c>
        huart->RxISR = UART_RxISR_8BIT;
 80053e8:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <HAL_UART_Receive_IT+0xa4>)
 80053ea:	e7e3      	b.n	80053b4 <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 80053ec:	2001      	movs	r0, #1
 80053ee:	4770      	bx	lr
    return HAL_BUSY;
 80053f0:	2002      	movs	r0, #2
}
 80053f2:	4770      	bx	lr
 80053f4:	08005455 	.word	0x08005455
 80053f8:	080053ff 	.word	0x080053ff

080053fc <HAL_UART_TxCpltCallback>:
 80053fc:	4770      	bx	lr

080053fe <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053fe:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8005402:	2a22      	cmp	r2, #34	; 0x22
{
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005408:	d11e      	bne.n	8005448 <UART_RxISR_8BIT+0x4a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800540a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800540c:	6d44      	ldr	r4, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 800540e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005412:	1c65      	adds	r5, r4, #1
 8005414:	400a      	ands	r2, r1
 8005416:	6545      	str	r5, [r0, #84]	; 0x54
 8005418:	7022      	strb	r2, [r4, #0]

    if (--huart->RxXferCount == 0)
 800541a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 800541e:	3a01      	subs	r2, #1
 8005420:	b292      	uxth	r2, r2
 8005422:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 8005426:	b9a2      	cbnz	r2, 8005452 <UART_RxISR_8BIT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005428:	6801      	ldr	r1, [r0, #0]
 800542a:	680c      	ldr	r4, [r1, #0]
 800542c:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8005430:	600c      	str	r4, [r1, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005432:	688c      	ldr	r4, [r1, #8]
 8005434:	f024 0401 	bic.w	r4, r4, #1
 8005438:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800543a:	2120      	movs	r1, #32
 800543c:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005440:	6602      	str	r2, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005442:	f001 ffd5 	bl	80073f0 <HAL_UART_RxCpltCallback>
 8005446:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005448:	8b13      	ldrh	r3, [r2, #24]
 800544a:	b29b      	uxth	r3, r3
 800544c:	f043 0308 	orr.w	r3, r3, #8
 8005450:	8313      	strh	r3, [r2, #24]
 8005452:	bd38      	pop	{r3, r4, r5, pc}

08005454 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005454:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8005458:	2a22      	cmp	r2, #34	; 0x22
{
 800545a:	b510      	push	{r4, lr}
 800545c:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800545e:	d11d      	bne.n	800549c <UART_RxISR_16BIT+0x48>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005460:	8c94      	ldrh	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8005462:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005466:	400c      	ands	r4, r1
 8005468:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800546a:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2;
 800546e:	6541      	str	r1, [r0, #84]	; 0x54

    if (--huart->RxXferCount == 0)
 8005470:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
 8005474:	3901      	subs	r1, #1
 8005476:	b289      	uxth	r1, r1
 8005478:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
 800547c:	b999      	cbnz	r1, 80054a6 <UART_RxISR_16BIT+0x52>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800547e:	6814      	ldr	r4, [r2, #0]
 8005480:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8005484:	6014      	str	r4, [r2, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005486:	6894      	ldr	r4, [r2, #8]
 8005488:	f024 0401 	bic.w	r4, r4, #1
 800548c:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800548e:	2220      	movs	r2, #32
 8005490:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005494:	6601      	str	r1, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005496:	f001 ffab 	bl	80073f0 <HAL_UART_RxCpltCallback>
 800549a:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800549c:	8b13      	ldrh	r3, [r2, #24]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f043 0308 	orr.w	r3, r3, #8
 80054a4:	8313      	strh	r3, [r2, #24]
 80054a6:	bd10      	pop	{r4, pc}

080054a8 <HAL_UART_ErrorCallback>:
 80054a8:	4770      	bx	lr
	...

080054ac <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054ac:	6803      	ldr	r3, [r0, #0]
 80054ae:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054b0:	6819      	ldr	r1, [r3, #0]
{
 80054b2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80054b4:	0716      	lsls	r6, r2, #28
{
 80054b6:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054b8:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 80054ba:	d10a      	bne.n	80054d2 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 80054bc:	0696      	lsls	r6, r2, #26
 80054be:	d564      	bpl.n	800558a <HAL_UART_IRQHandler+0xde>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054c0:	068e      	lsls	r6, r1, #26
 80054c2:	d562      	bpl.n	800558a <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 80054c4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 8083 	beq.w	80055d2 <HAL_UART_IRQHandler+0x126>
}
 80054cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80054d0:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != RESET)
 80054d2:	f015 0001 	ands.w	r0, r5, #1
 80054d6:	d102      	bne.n	80054de <HAL_UART_IRQHandler+0x32>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054d8:	f411 7f90 	tst.w	r1, #288	; 0x120
 80054dc:	d055      	beq.n	800558a <HAL_UART_IRQHandler+0xde>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054de:	07d5      	lsls	r5, r2, #31
 80054e0:	d507      	bpl.n	80054f2 <HAL_UART_IRQHandler+0x46>
 80054e2:	05ce      	lsls	r6, r1, #23
 80054e4:	d505      	bpl.n	80054f2 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054e6:	2501      	movs	r5, #1
 80054e8:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ea:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80054ec:	f045 0501 	orr.w	r5, r5, #1
 80054f0:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054f2:	0795      	lsls	r5, r2, #30
 80054f4:	d506      	bpl.n	8005504 <HAL_UART_IRQHandler+0x58>
 80054f6:	b128      	cbz	r0, 8005504 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054f8:	2502      	movs	r5, #2
 80054fa:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054fc:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80054fe:	f045 0504 	orr.w	r5, r5, #4
 8005502:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005504:	0756      	lsls	r6, r2, #29
 8005506:	d506      	bpl.n	8005516 <HAL_UART_IRQHandler+0x6a>
 8005508:	b128      	cbz	r0, 8005516 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800550a:	2504      	movs	r5, #4
 800550c:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800550e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8005510:	f045 0502 	orr.w	r5, r5, #2
 8005514:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 8005516:	0715      	lsls	r5, r2, #28
 8005518:	d507      	bpl.n	800552a <HAL_UART_IRQHandler+0x7e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 800551a:	068e      	lsls	r6, r1, #26
 800551c:	d400      	bmi.n	8005520 <HAL_UART_IRQHandler+0x74>
 800551e:	b120      	cbz	r0, 800552a <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005520:	2008      	movs	r0, #8
 8005522:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005524:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005526:	4303      	orrs	r3, r0
 8005528:	6763      	str	r3, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800552a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800552c:	2b00      	cmp	r3, #0
 800552e:	d050      	beq.n	80055d2 <HAL_UART_IRQHandler+0x126>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8005530:	0695      	lsls	r5, r2, #26
 8005532:	d505      	bpl.n	8005540 <HAL_UART_IRQHandler+0x94>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005534:	0688      	lsls	r0, r1, #26
 8005536:	d503      	bpl.n	8005540 <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL)
 8005538:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800553a:	b10b      	cbz	r3, 8005540 <HAL_UART_IRQHandler+0x94>
          huart->RxISR(huart);
 800553c:	4620      	mov	r0, r4
 800553e:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005540:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005542:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8005544:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005546:	d404      	bmi.n	8005552 <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800554c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8005550:	d017      	beq.n	8005582 <HAL_UART_IRQHandler+0xd6>
        UART_EndRxTransfer(huart);
 8005552:	f7ff feef 	bl	8005334 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	0652      	lsls	r2, r2, #25
 800555c:	d50d      	bpl.n	800557a <HAL_UART_IRQHandler+0xce>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800555e:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8005560:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005566:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8005568:	b138      	cbz	r0, 800557a <HAL_UART_IRQHandler+0xce>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800556a:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <HAL_UART_IRQHandler+0x128>)
 800556c:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800556e:	f7fe fc11 	bl	8003d94 <HAL_DMA_Abort_IT>
 8005572:	b370      	cbz	r0, 80055d2 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005574:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005576:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005578:	e7a8      	b.n	80054cc <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 800557a:	4620      	mov	r0, r4
 800557c:	f7ff ff94 	bl	80054a8 <HAL_UART_ErrorCallback>
 8005580:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005582:	f7ff ff91 	bl	80054a8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005586:	6765      	str	r5, [r4, #116]	; 0x74
 8005588:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800558a:	02d6      	lsls	r6, r2, #11
 800558c:	d509      	bpl.n	80055a2 <HAL_UART_IRQHandler+0xf6>
 800558e:	0268      	lsls	r0, r5, #9
 8005590:	d507      	bpl.n	80055a2 <HAL_UART_IRQHandler+0xf6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005592:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8005596:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800559e:	f000 bafd 	b.w	8005b9c <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != RESET)
 80055a2:	0616      	lsls	r6, r2, #24
 80055a4:	d505      	bpl.n	80055b2 <HAL_UART_IRQHandler+0x106>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055a6:	060d      	lsls	r5, r1, #24
 80055a8:	d503      	bpl.n	80055b2 <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 80055aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055ac:	b18b      	cbz	r3, 80055d2 <HAL_UART_IRQHandler+0x126>
      huart->TxISR(huart);
 80055ae:	4620      	mov	r0, r4
 80055b0:	e78c      	b.n	80054cc <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055b2:	0650      	lsls	r0, r2, #25
 80055b4:	d50d      	bpl.n	80055d2 <HAL_UART_IRQHandler+0x126>
 80055b6:	064a      	lsls	r2, r1, #25
 80055b8:	d50b      	bpl.n	80055d2 <HAL_UART_IRQHandler+0x126>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055c0:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80055c2:	2320      	movs	r3, #32
 80055c4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->TxISR = NULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 80055cc:	4620      	mov	r0, r4
 80055ce:	f7ff ff15 	bl	80053fc <HAL_UART_TxCpltCallback>
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	080055d9 	.word	0x080055d9

080055d8 <UART_DMAAbortOnError>:
{
 80055d8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055da:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80055e2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80055e6:	f7ff ff5f 	bl	80054a8 <HAL_UART_ErrorCallback>
 80055ea:	bd08      	pop	{r3, pc}

080055ec <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 80055ec:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055ee:	69c1      	ldr	r1, [r0, #28]
{
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055f4:	6883      	ldr	r3, [r0, #8]
 80055f6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055f8:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055fa:	4303      	orrs	r3, r0
 80055fc:	6960      	ldr	r0, [r4, #20]
 80055fe:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005600:	48ba      	ldr	r0, [pc, #744]	; (80058ec <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005602:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005604:	4028      	ands	r0, r5
 8005606:	4303      	orrs	r3, r0
 8005608:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800560a:	6853      	ldr	r3, [r2, #4]
 800560c:	68e0      	ldr	r0, [r4, #12]
 800560e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005612:	4303      	orrs	r3, r0
 8005614:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005616:	4bb6      	ldr	r3, [pc, #728]	; (80058f0 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005618:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800561a:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 800561c:	bf1c      	itt	ne
 800561e:	6a23      	ldrne	r3, [r4, #32]
 8005620:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005622:	6893      	ldr	r3, [r2, #8]
 8005624:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005628:	4303      	orrs	r3, r0
 800562a:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800562c:	4bb1      	ldr	r3, [pc, #708]	; (80058f4 <UART_SetConfig+0x308>)
 800562e:	429a      	cmp	r2, r3
 8005630:	d119      	bne.n	8005666 <UART_SetConfig+0x7a>
 8005632:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005636:	4ab0      	ldr	r2, [pc, #704]	; (80058f8 <UART_SetConfig+0x30c>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005640:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005644:	5cd3      	ldrb	r3, [r2, r3]
 8005646:	f040 8138 	bne.w	80058ba <UART_SetConfig+0x2ce>
    switch (clocksource)
 800564a:	2b08      	cmp	r3, #8
 800564c:	f200 808f 	bhi.w	800576e <UART_SetConfig+0x182>
 8005650:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005654:	00ca011a 	.word	0x00ca011a
 8005658:	008d00f9 	.word	0x008d00f9
 800565c:	008d0114 	.word	0x008d0114
 8005660:	008d008d 	.word	0x008d008d
 8005664:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005666:	4ba5      	ldr	r3, [pc, #660]	; (80058fc <UART_SetConfig+0x310>)
 8005668:	429a      	cmp	r2, r3
 800566a:	d107      	bne.n	800567c <UART_SetConfig+0x90>
 800566c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8005670:	4aa3      	ldr	r2, [pc, #652]	; (8005900 <UART_SetConfig+0x314>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f003 030c 	and.w	r3, r3, #12
 800567a:	e7e1      	b.n	8005640 <UART_SetConfig+0x54>
 800567c:	4ba1      	ldr	r3, [pc, #644]	; (8005904 <UART_SetConfig+0x318>)
 800567e:	429a      	cmp	r2, r3
 8005680:	d123      	bne.n	80056ca <UART_SetConfig+0xde>
 8005682:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800568e:	2b10      	cmp	r3, #16
 8005690:	f000 80f1 	beq.w	8005876 <UART_SetConfig+0x28a>
 8005694:	d80b      	bhi.n	80056ae <UART_SetConfig+0xc2>
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80f3 	beq.w	8005882 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800569c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        ret = HAL_ERROR;
 80056a0:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80056a4:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056a8:	f000 80f8 	beq.w	800589c <UART_SetConfig+0x2b0>
 80056ac:	e0a8      	b.n	8005800 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	f000 80c6 	beq.w	8005840 <UART_SetConfig+0x254>
 80056b4:	2b30      	cmp	r3, #48	; 0x30
 80056b6:	d1f1      	bne.n	800569c <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056b8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80056bc:	f040 80b8 	bne.w	8005830 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80056c0:	6860      	ldr	r0, [r4, #4]
 80056c2:	0843      	lsrs	r3, r0, #1
 80056c4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80056c8:	e0c3      	b.n	8005852 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ca:	4b8f      	ldr	r3, [pc, #572]	; (8005908 <UART_SetConfig+0x31c>)
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d11e      	bne.n	800570e <UART_SetConfig+0x122>
 80056d0:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80056d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056dc:	2b40      	cmp	r3, #64	; 0x40
 80056de:	f000 80bb 	beq.w	8005858 <UART_SetConfig+0x26c>
 80056e2:	d80a      	bhi.n	80056fa <UART_SetConfig+0x10e>
 80056e4:	b97b      	cbnz	r3, 8005706 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80056e6:	4b82      	ldr	r3, [pc, #520]	; (80058f0 <UART_SetConfig+0x304>)
 80056e8:	429a      	cmp	r2, r3
 80056ea:	f040 80ca 	bne.w	8005882 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80056ee:	f7ff fa43 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
        break;
 80056f2:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80056f4:	bbb0      	cbnz	r0, 8005764 <UART_SetConfig+0x178>
 80056f6:	4602      	mov	r2, r0
 80056f8:	e03a      	b.n	8005770 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056fa:	2b80      	cmp	r3, #128	; 0x80
 80056fc:	f000 809d 	beq.w	800583a <UART_SetConfig+0x24e>
 8005700:	2bc0      	cmp	r3, #192	; 0xc0
 8005702:	f000 80b0 	beq.w	8005866 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005706:	4b7a      	ldr	r3, [pc, #488]	; (80058f0 <UART_SetConfig+0x304>)
 8005708:	429a      	cmp	r2, r3
 800570a:	d1c7      	bne.n	800569c <UART_SetConfig+0xb0>
 800570c:	e02f      	b.n	800576e <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800570e:	4b7f      	ldr	r3, [pc, #508]	; (800590c <UART_SetConfig+0x320>)
 8005710:	429a      	cmp	r2, r3
 8005712:	d111      	bne.n	8005738 <UART_SetConfig+0x14c>
 8005714:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8005718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005724:	f000 8098 	beq.w	8005858 <UART_SetConfig+0x26c>
 8005728:	d9dc      	bls.n	80056e4 <UART_SetConfig+0xf8>
 800572a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572e:	f000 8084 	beq.w	800583a <UART_SetConfig+0x24e>
 8005732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005736:	e7e4      	b.n	8005702 <UART_SetConfig+0x116>
 8005738:	4b6d      	ldr	r3, [pc, #436]	; (80058f0 <UART_SetConfig+0x304>)
 800573a:	429a      	cmp	r2, r3
 800573c:	d1ae      	bne.n	800569c <UART_SetConfig+0xb0>
 800573e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005746:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800574a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800574e:	f000 8083 	beq.w	8005858 <UART_SetConfig+0x26c>
 8005752:	d9c7      	bls.n	80056e4 <UART_SetConfig+0xf8>
 8005754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005758:	d06f      	beq.n	800583a <UART_SetConfig+0x24e>
 800575a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800575e:	e7d0      	b.n	8005702 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005760:	486b      	ldr	r0, [pc, #428]	; (8005910 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8005762:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8005764:	6862      	ldr	r2, [r4, #4]
 8005766:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800576a:	4281      	cmp	r1, r0
 800576c:	d905      	bls.n	800577a <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800576e:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 8005770:	2300      	movs	r3, #0
 8005772:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005774:	6663      	str	r3, [r4, #100]	; 0x64
}
 8005776:	4610      	mov	r0, r2
 8005778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800577a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800577e:	d8f6      	bhi.n	800576e <UART_SetConfig+0x182>
        switch (clocksource)
 8005780:	2b08      	cmp	r3, #8
 8005782:	d82e      	bhi.n	80057e2 <UART_SetConfig+0x1f6>
 8005784:	e8df f003 	tbb	[pc, r3]
 8005788:	2d1c2d05 	.word	0x2d1c2d05
 800578c:	2d2d2d24 	.word	0x2d2d2d24
 8005790:	27          	.byte	0x27
 8005791:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005792:	f7ff f9f1 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005796:	6862      	ldr	r2, [r4, #4]
 8005798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800579c:	0856      	lsrs	r6, r2, #1
 800579e:	2700      	movs	r7, #0
 80057a0:	fbe1 6700 	umlal	r6, r7, r1, r0
 80057a4:	2300      	movs	r3, #0
 80057a6:	4630      	mov	r0, r6
 80057a8:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80057aa:	f7fd fd39 	bl	8003220 <__aeabi_uldivmod>
            break;
 80057ae:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057b0:	4b58      	ldr	r3, [pc, #352]	; (8005914 <UART_SetConfig+0x328>)
 80057b2:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80057b6:	4299      	cmp	r1, r3
 80057b8:	d8d9      	bhi.n	800576e <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	60d8      	str	r0, [r3, #12]
 80057be:	e7d7      	b.n	8005770 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80057c0:	4855      	ldr	r0, [pc, #340]	; (8005918 <UART_SetConfig+0x32c>)
 80057c2:	0855      	lsrs	r5, r2, #1
 80057c4:	2300      	movs	r3, #0
 80057c6:	2100      	movs	r1, #0
 80057c8:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80057ca:	f141 0100 	adc.w	r1, r1, #0
 80057ce:	e7ec      	b.n	80057aa <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80057d0:	f7fe fec6 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 80057d4:	e7df      	b.n	8005796 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80057d6:	0850      	lsrs	r0, r2, #1
 80057d8:	2100      	movs	r1, #0
 80057da:	2300      	movs	r3, #0
 80057dc:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80057e0:	e7f3      	b.n	80057ca <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 80057e2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80057e4:	2000      	movs	r0, #0
 80057e6:	e7e3      	b.n	80057b0 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80057e8:	f7ff f9d8 	bl	8004b9c <HAL_RCC_GetPCLK2Freq>
 80057ec:	e04e      	b.n	800588c <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80057ee:	f7ff f9c3 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80057f2:	6862      	ldr	r2, [r4, #4]
 80057f4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80057f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80057fc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80057fe:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005800:	f1a3 0010 	sub.w	r0, r3, #16
 8005804:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005808:	4288      	cmp	r0, r1
 800580a:	d8b0      	bhi.n	800576e <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 800580c:	6821      	ldr	r1, [r4, #0]
 800580e:	60cb      	str	r3, [r1, #12]
 8005810:	e7ae      	b.n	8005770 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005812:	f7ff f9c3 	bl	8004b9c <HAL_RCC_GetPCLK2Freq>
 8005816:	e7ec      	b.n	80057f2 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005818:	6860      	ldr	r0, [r4, #4]
 800581a:	0843      	lsrs	r3, r0, #1
 800581c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005820:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005824:	fbb3 f3f0 	udiv	r3, r3, r0
 8005828:	e7e8      	b.n	80057fc <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800582a:	f7fe fe99 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 800582e:	e7e0      	b.n	80057f2 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005830:	6860      	ldr	r0, [r4, #4]
 8005832:	0843      	lsrs	r3, r0, #1
 8005834:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005838:	e7f4      	b.n	8005824 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 800583a:	4b2d      	ldr	r3, [pc, #180]	; (80058f0 <UART_SetConfig+0x304>)
 800583c:	429a      	cmp	r2, r3
 800583e:	d08f      	beq.n	8005760 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005840:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005844:	d1e8      	bne.n	8005818 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005846:	6860      	ldr	r0, [r4, #4]
 8005848:	0843      	lsrs	r3, r0, #1
 800584a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800584e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005852:	fbb3 f3f0 	udiv	r3, r3, r0
 8005856:	e01f      	b.n	8005898 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005858:	4b25      	ldr	r3, [pc, #148]	; (80058f0 <UART_SetConfig+0x304>)
 800585a:	429a      	cmp	r2, r3
 800585c:	d10b      	bne.n	8005876 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800585e:	f7fe fe7f 	bl	8004560 <HAL_RCC_GetSysClockFreq>
        break;
 8005862:	2304      	movs	r3, #4
 8005864:	e746      	b.n	80056f4 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005866:	4b22      	ldr	r3, [pc, #136]	; (80058f0 <UART_SetConfig+0x304>)
 8005868:	429a      	cmp	r2, r3
 800586a:	f47f af25 	bne.w	80056b8 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800586e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8005872:	2308      	movs	r3, #8
 8005874:	e776      	b.n	8005764 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005876:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800587a:	d1d6      	bne.n	800582a <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800587c:	f7fe fe70 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 8005880:	e004      	b.n	800588c <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005882:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005886:	d1b2      	bne.n	80057ee <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005888:	f7ff f976 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800588c:	6861      	ldr	r1, [r4, #4]
 800588e:	084a      	lsrs	r2, r1, #1
 8005890:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8005894:	fbb3 f3f1 	udiv	r3, r3, r1
 8005898:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800589a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800589c:	f1a3 0010 	sub.w	r0, r3, #16
 80058a0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80058a4:	4288      	cmp	r0, r1
 80058a6:	f63f af62 	bhi.w	800576e <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 80058aa:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80058ae:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058b0:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80058b4:	430b      	orrs	r3, r1
 80058b6:	60c3      	str	r3, [r0, #12]
 80058b8:	e75a      	b.n	8005770 <UART_SetConfig+0x184>
    switch (clocksource)
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	f63f af57 	bhi.w	800576e <UART_SetConfig+0x182>
 80058c0:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <UART_SetConfig+0x2dc>)
 80058c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c6:	bf00      	nop
 80058c8:	080057ef 	.word	0x080057ef
 80058cc:	08005813 	.word	0x08005813
 80058d0:	08005819 	.word	0x08005819
 80058d4:	0800576f 	.word	0x0800576f
 80058d8:	0800582b 	.word	0x0800582b
 80058dc:	0800576f 	.word	0x0800576f
 80058e0:	0800576f 	.word	0x0800576f
 80058e4:	0800576f 	.word	0x0800576f
 80058e8:	08005831 	.word	0x08005831
 80058ec:	efff69f3 	.word	0xefff69f3
 80058f0:	40008000 	.word	0x40008000
 80058f4:	40013800 	.word	0x40013800
 80058f8:	0800e4d0 	.word	0x0800e4d0
 80058fc:	40004400 	.word	0x40004400
 8005900:	0800e4d4 	.word	0x0800e4d4
 8005904:	40004800 	.word	0x40004800
 8005908:	40004c00 	.word	0x40004c00
 800590c:	40005000 	.word	0x40005000
 8005910:	00f42400 	.word	0x00f42400
 8005914:	000ffcff 	.word	0x000ffcff
 8005918:	f4240000 	.word	0xf4240000

0800591c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800591c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800591e:	07da      	lsls	r2, r3, #31
{
 8005920:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005922:	d506      	bpl.n	8005932 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005924:	6801      	ldr	r1, [r0, #0]
 8005926:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005928:	684a      	ldr	r2, [r1, #4]
 800592a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800592e:	4322      	orrs	r2, r4
 8005930:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005932:	079c      	lsls	r4, r3, #30
 8005934:	d506      	bpl.n	8005944 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005936:	6801      	ldr	r1, [r0, #0]
 8005938:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800593a:	684a      	ldr	r2, [r1, #4]
 800593c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005940:	4322      	orrs	r2, r4
 8005942:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005944:	0759      	lsls	r1, r3, #29
 8005946:	d506      	bpl.n	8005956 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005948:	6801      	ldr	r1, [r0, #0]
 800594a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800594c:	684a      	ldr	r2, [r1, #4]
 800594e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005952:	4322      	orrs	r2, r4
 8005954:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005956:	071a      	lsls	r2, r3, #28
 8005958:	d506      	bpl.n	8005968 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800595a:	6801      	ldr	r1, [r0, #0]
 800595c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800595e:	684a      	ldr	r2, [r1, #4]
 8005960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005964:	4322      	orrs	r2, r4
 8005966:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005968:	06dc      	lsls	r4, r3, #27
 800596a:	d506      	bpl.n	800597a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800596c:	6801      	ldr	r1, [r0, #0]
 800596e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005970:	688a      	ldr	r2, [r1, #8]
 8005972:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005976:	4322      	orrs	r2, r4
 8005978:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800597a:	0699      	lsls	r1, r3, #26
 800597c:	d506      	bpl.n	800598c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800597e:	6801      	ldr	r1, [r0, #0]
 8005980:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005982:	688a      	ldr	r2, [r1, #8]
 8005984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005988:	4322      	orrs	r2, r4
 800598a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800598c:	065a      	lsls	r2, r3, #25
 800598e:	d50f      	bpl.n	80059b0 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005990:	6801      	ldr	r1, [r0, #0]
 8005992:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005994:	684a      	ldr	r2, [r1, #4]
 8005996:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800599a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800599c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059a0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059a2:	d105      	bne.n	80059b0 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059a4:	684a      	ldr	r2, [r1, #4]
 80059a6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80059a8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80059ac:	4322      	orrs	r2, r4
 80059ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059b0:	061b      	lsls	r3, r3, #24
 80059b2:	d506      	bpl.n	80059c2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059b4:	6802      	ldr	r2, [r0, #0]
 80059b6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80059b8:	6853      	ldr	r3, [r2, #4]
 80059ba:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80059be:	430b      	orrs	r3, r1
 80059c0:	6053      	str	r3, [r2, #4]
 80059c2:	bd10      	pop	{r4, pc}

080059c4 <UART_WaitOnFlagUntilTimeout>:
{
 80059c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c8:	9d06      	ldr	r5, [sp, #24]
 80059ca:	4604      	mov	r4, r0
 80059cc:	460f      	mov	r7, r1
 80059ce:	4616      	mov	r6, r2
 80059d0:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d2:	6821      	ldr	r1, [r4, #0]
 80059d4:	69ca      	ldr	r2, [r1, #28]
 80059d6:	ea37 0302 	bics.w	r3, r7, r2
 80059da:	bf0c      	ite	eq
 80059dc:	2201      	moveq	r2, #1
 80059de:	2200      	movne	r2, #0
 80059e0:	42b2      	cmp	r2, r6
 80059e2:	d002      	beq.n	80059ea <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80059e4:	2000      	movs	r0, #0
}
 80059e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80059ea:	1c6b      	adds	r3, r5, #1
 80059ec:	d0f2      	beq.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059ee:	b99d      	cbnz	r5, 8005a18 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	f022 0201 	bic.w	r2, r2, #1
 8005a00:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005a02:	2320      	movs	r3, #32
 8005a04:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8005a08:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8005a12:	2003      	movs	r0, #3
 8005a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a18:	f7fd fdfa 	bl	8003610 <HAL_GetTick>
 8005a1c:	eba0 0008 	sub.w	r0, r0, r8
 8005a20:	4285      	cmp	r5, r0
 8005a22:	d2d6      	bcs.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xe>
 8005a24:	e7e4      	b.n	80059f0 <UART_WaitOnFlagUntilTimeout+0x2c>

08005a26 <HAL_UART_Transmit>:
{
 8005a26:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005a2a:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005a2c:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8005a30:	2b20      	cmp	r3, #32
{
 8005a32:	4604      	mov	r4, r0
 8005a34:	460d      	mov	r5, r1
 8005a36:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005a38:	d14a      	bne.n	8005ad0 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8005a3a:	2900      	cmp	r1, #0
 8005a3c:	d046      	beq.n	8005acc <HAL_UART_Transmit+0xa6>
 8005a3e:	2a00      	cmp	r2, #0
 8005a40:	d044      	beq.n	8005acc <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8005a42:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d042      	beq.n	8005ad0 <HAL_UART_Transmit+0xaa>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a50:	2300      	movs	r3, #0
 8005a52:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a54:	2321      	movs	r3, #33	; 0x21
 8005a56:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8005a5a:	f7fd fdd9 	bl	8003610 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8005a5e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8005a62:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8005a64:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a68:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a6c:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8005a6e:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a70:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8005a72:	b952      	cbnz	r2, 8005a8a <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a74:	2140      	movs	r1, #64	; 0x40
 8005a76:	4620      	mov	r0, r4
 8005a78:	f7ff ffa4 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 8005a7c:	b958      	cbnz	r0, 8005a96 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8005a7e:	2320      	movs	r3, #32
 8005a80:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8005a84:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8005a88:	e006      	b.n	8005a98 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2180      	movs	r1, #128	; 0x80
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f7ff ff98 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 8005a94:	b118      	cbz	r0, 8005a9e <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8005a96:	2003      	movs	r0, #3
}
 8005a98:	b002      	add	sp, #8
 8005a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a9e:	68a3      	ldr	r3, [r4, #8]
 8005aa0:	6822      	ldr	r2, [r4, #0]
 8005aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa6:	d10d      	bne.n	8005ac4 <HAL_UART_Transmit+0x9e>
 8005aa8:	6923      	ldr	r3, [r4, #16]
 8005aaa:	b95b      	cbnz	r3, 8005ac4 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8005aac:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab4:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005ab6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8005ac2:	e7d1      	b.n	8005a68 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8005ac4:	782b      	ldrb	r3, [r5, #0]
 8005ac6:	8513      	strh	r3, [r2, #40]	; 0x28
 8005ac8:	3501      	adds	r5, #1
 8005aca:	e7f4      	b.n	8005ab6 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8005acc:	2001      	movs	r0, #1
 8005ace:	e7e3      	b.n	8005a98 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8005ad0:	2002      	movs	r0, #2
 8005ad2:	e7e1      	b.n	8005a98 <HAL_UART_Transmit+0x72>

08005ad4 <UART_CheckIdleState>:
{
 8005ad4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ad6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad8:	2600      	movs	r6, #0
 8005ada:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8005adc:	f7fd fd98 	bl	8003610 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8005ae6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ae8:	d417      	bmi.n	8005b1a <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	075b      	lsls	r3, r3, #29
 8005af0:	d50a      	bpl.n	8005b08 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005af2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	2200      	movs	r2, #0
 8005afa:	462b      	mov	r3, r5
 8005afc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b00:	4620      	mov	r0, r4
 8005b02:	f7ff ff5f 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 8005b06:	b9a0      	cbnz	r0, 8005b32 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8005b08:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8005b0a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005b0c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8005b10:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8005b14:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8005b18:	e00c      	b.n	8005b34 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	4632      	mov	r2, r6
 8005b22:	4603      	mov	r3, r0
 8005b24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f7ff ff4b 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d0db      	beq.n	8005aea <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8005b32:	2003      	movs	r0, #3
}
 8005b34:	b002      	add	sp, #8
 8005b36:	bd70      	pop	{r4, r5, r6, pc}

08005b38 <HAL_UART_Init>:
{
 8005b38:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	b360      	cbz	r0, 8005b98 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005b3e:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8005b42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005b46:	b91b      	cbnz	r3, 8005b50 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005b48:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005b4c:	f001 fd9c 	bl	8007688 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005b50:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005b52:	2324      	movs	r3, #36	; 0x24
 8005b54:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8005b58:	6813      	ldr	r3, [r2, #0]
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b60:	4620      	mov	r0, r4
 8005b62:	f7ff fd43 	bl	80055ec <UART_SetConfig>
 8005b66:	2801      	cmp	r0, #1
 8005b68:	d016      	beq.n	8005b98 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b6c:	b113      	cbz	r3, 8005b74 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f7ff fed4 	bl	800591c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b84:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005b8c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005b8e:	601a      	str	r2, [r3, #0]
}
 8005b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005b94:	f7ff bf9e 	b.w	8005ad4 <UART_CheckIdleState>
}
 8005b98:	2001      	movs	r0, #1
 8005b9a:	bd10      	pop	{r4, pc}

08005b9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b9c:	4770      	bx	lr
	...

08005ba0 <ai_network_data_weights_get>:
    0x57, 0x0e, 0xe5, 0xbd, 0x20, 0xfd, 0x95, 0x3d, 0xe8, 0x09,
    0x51, 0xbe, 0x24, 0x65, 0xc6, 0xbd, 0xbe, 0xf7, 0xb2, 0xbd
  };

  return AI_HANDLE_PTR(s_network_weights);
}
 8005ba0:	4800      	ldr	r0, [pc, #0]	; (8005ba4 <ai_network_data_weights_get+0x4>)
 8005ba2:	4770      	bx	lr
 8005ba4:	0800e4e4 	.word	0x0800e4e4

08005ba8 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8005ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bac:	b0a0      	sub	sp, #128	; 0x80
 8005bae:	460f      	mov	r7, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005bb0:	f7fa fc05 	bl	80003be <ai_platform_context_acquire>
 8005bb4:	4604      	mov	r4, r0

  if ( report && net_ctx )
 8005bb6:	2f00      	cmp	r7, #0
 8005bb8:	d06d      	beq.n	8005c96 <ai_network_get_info+0xee>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d06d      	beq.n	8005c9a <ai_network_get_info+0xf2>
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005bbe:	f7fa fb98 	bl	80002f2 <ai_platform_runtime_get_revision>
 8005bc2:	4680      	mov	r8, r0
    ai_network_report r = {
 8005bc4:	f7fa fbad 	bl	8000322 <ai_platform_runtime_get_version>
 8005bc8:	9006      	str	r0, [sp, #24]
 8005bca:	f7fa fbc4 	bl	8000356 <ai_platform_api_get_version>
 8005bce:	900a      	str	r0, [sp, #40]	; 0x28
 8005bd0:	f7fa fbdb 	bl	800038a <ai_platform_interface_api_get_version>
 8005bd4:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8005bd8:	900b      	str	r0, [sp, #44]	; 0x2c
 8005bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bdc:	ae16      	add	r6, sp, #88	; 0x58
 8005bde:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8005be2:	f104 0314 	add.w	r3, r4, #20
 8005be6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005be8:	ae1a      	add	r6, sp, #104	; 0x68
 8005bea:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
                              14,
                              1, NULL),
      .activations       = net_ctx->activations,
      .weights           = net_ctx->params,
      .n_nodes           = 0,
      .signature         = net_ctx->signature,
 8005bee:	6861      	ldr	r1, [r4, #4]
    };

    AI_FOR_EACH_NODE_DO(node, net_ctx->input_node)
 8005bf0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005bf2:	2500      	movs	r5, #0
 8005bf4:	2a00      	cmp	r2, #0
 8005bf6:	d147      	bne.n	8005c88 <ai_network_get_info+0xe0>
    {
      r.n_nodes++;
    }

    *report = r;
 8005bf8:	4b28      	ldr	r3, [pc, #160]	; (8005c9c <ai_network_get_info+0xf4>)
 8005bfa:	9301      	str	r3, [sp, #4]
 8005bfc:	4b28      	ldr	r3, [pc, #160]	; (8005ca0 <ai_network_get_info+0xf8>)
 8005bfe:	9302      	str	r3, [sp, #8]
 8005c00:	4b28      	ldr	r3, [pc, #160]	; (8005ca4 <ai_network_get_info+0xfc>)
 8005c02:	9303      	str	r3, [sp, #12]
 8005c04:	4b28      	ldr	r3, [pc, #160]	; (8005ca8 <ai_network_get_info+0x100>)
 8005c06:	9304      	str	r3, [sp, #16]
 8005c08:	4828      	ldr	r0, [pc, #160]	; (8005cac <ai_network_get_info+0x104>)
 8005c0a:	4b29      	ldr	r3, [pc, #164]	; (8005cb0 <ai_network_get_info+0x108>)
 8005c0c:	9307      	str	r3, [sp, #28]
 8005c0e:	900c      	str	r0, [sp, #48]	; 0x30
 8005c10:	2303      	movs	r3, #3
 8005c12:	2040      	movs	r0, #64	; 0x40
 8005c14:	f88d 3020 	strb.w	r3, [sp, #32]
 8005c18:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8005c1c:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8005c20:	2301      	movs	r3, #1
 8005c22:	2028      	movs	r0, #40	; 0x28
 8005c24:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 8005c28:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8005c2c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8005c30:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8005c34:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 8005c38:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 8005c3c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8005c40:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8005c44:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8005c48:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8005c4c:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 8005c50:	9310      	str	r3, [sp, #64]	; 0x40
 8005c52:	9211      	str	r2, [sp, #68]	; 0x44
 8005c54:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8005c58:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8005c5c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8005c60:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8005c64:	9215      	str	r2, [sp, #84]	; 0x54
 8005c66:	230e      	movs	r3, #14
 8005c68:	911f      	str	r1, [sp, #124]	; 0x7c
 8005c6a:	227c      	movs	r2, #124	; 0x7c
 8005c6c:	a901      	add	r1, sp, #4
 8005c6e:	4638      	mov	r0, r7
 8005c70:	f8cd 8014 	str.w	r8, [sp, #20]
 8005c74:	9314      	str	r3, [sp, #80]	; 0x50
 8005c76:	951e      	str	r5, [sp, #120]	; 0x78
 8005c78:	f003 fae5 	bl	8009246 <memcpy>

    return ( r.n_nodes>0 ) ? true : false;
 8005c7c:	1c28      	adds	r0, r5, #0
 8005c7e:	bf18      	it	ne
 8005c80:	2001      	movne	r0, #1
  }
  
  return false;
}
 8005c82:	b020      	add	sp, #128	; 0x80
 8005c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    AI_FOR_EACH_NODE_DO(node, net_ctx->input_node)
 8005c88:	6893      	ldr	r3, [r2, #8]
 8005c8a:	3501      	adds	r5, #1
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	bf14      	ite	ne
 8005c90:	461a      	movne	r2, r3
 8005c92:	2200      	moveq	r2, #0
 8005c94:	e7ae      	b.n	8005bf4 <ai_network_get_info+0x4c>
  return false;
 8005c96:	4638      	mov	r0, r7
 8005c98:	e7f3      	b.n	8005c82 <ai_network_get_info+0xda>
 8005c9a:	e7f2      	b.n	8005c82 <ai_network_get_info+0xda>
 8005c9c:	0802831c 	.word	0x0802831c
 8005ca0:	08028324 	.word	0x08028324
 8005ca4:	08028345 	.word	0x08028345
 8005ca8:	0802835e 	.word	0x0802835e
 8005cac:	001259ba 	.word	0x001259ba
 8005cb0:	08028373 	.word	0x08028373

08005cb4 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8005cb4:	b508      	push	{r3, lr}
  return ai_platform_network_get_error(network);
 8005cb6:	f7fa fba7 	bl	8000408 <ai_platform_network_get_error>
}
 8005cba:	bd08      	pop	{r3, pc}

08005cbc <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005cbc:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	4a03      	ldr	r2, [pc, #12]	; (8005cd4 <ai_network_create+0x18>)
 8005cc8:	f7fa fbc6 	bl	8000458 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005ccc:	b003      	add	sp, #12
 8005cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cd2:	bf00      	nop
 8005cd4:	20000620 	.word	0x20000620

08005cd8 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8005cd8:	f7fa bbfc 	b.w	80004d4 <ai_platform_network_destroy>

08005cdc <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005cdc:	b510      	push	{r4, lr}
 8005cde:	460c      	mov	r4, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005ce0:	f7fa fc17 	bl	8000512 <ai_platform_network_init>
  if ( !net_ctx ) return false;
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	f000 8085 	beq.w	8005df4 <ai_network_init+0x118>
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cea:	4a43      	ldr	r2, [pc, #268]	; (8005df8 <ai_network_init+0x11c>)
 8005cec:	68e3      	ldr	r3, [r4, #12]
 8005cee:	6811      	ldr	r1, [r2, #0]
  conv2d_4_weights_array.data = weights + 0;
 8005cf0:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cf2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005cf6:	6011      	str	r1, [r2, #0]
  conv2d_4_weights_array.data_start = weights + 0;
 8005cf8:	60d3      	str	r3, [r2, #12]
  conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cfa:	4a40      	ldr	r2, [pc, #256]	; (8005dfc <ai_network_init+0x120>)
 8005cfc:	6811      	ldr	r1, [r2, #0]
 8005cfe:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005d02:	6011      	str	r1, [r2, #0]
  conv2d_4_bias_array.data = weights + 288;
 8005d04:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8005d08:	6091      	str	r1, [r2, #8]
  conv2d_4_bias_array.data_start = weights + 288;
 8005d0a:	60d1      	str	r1, [r2, #12]
  conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d0c:	4a3c      	ldr	r2, [pc, #240]	; (8005e00 <ai_network_init+0x124>)
 8005d0e:	6811      	ldr	r1, [r2, #0]
 8005d10:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005d14:	6011      	str	r1, [r2, #0]
  conv2d_5_weights_array.data = weights + 320;
 8005d16:	f503 71a0 	add.w	r1, r3, #320	; 0x140
 8005d1a:	6091      	str	r1, [r2, #8]
  conv2d_5_weights_array.data_start = weights + 320;
 8005d1c:	60d1      	str	r1, [r2, #12]
  conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d1e:	4a39      	ldr	r2, [pc, #228]	; (8005e04 <ai_network_init+0x128>)
 8005d20:	6811      	ldr	r1, [r2, #0]
 8005d22:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005d26:	6011      	str	r1, [r2, #0]
  conv2d_5_bias_array.data = weights + 4928;
 8005d28:	f503 519a 	add.w	r1, r3, #4928	; 0x1340
 8005d2c:	6091      	str	r1, [r2, #8]
  conv2d_5_bias_array.data_start = weights + 4928;
 8005d2e:	60d1      	str	r1, [r2, #12]
  conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d30:	4a35      	ldr	r2, [pc, #212]	; (8005e08 <ai_network_init+0x12c>)
 8005d32:	6811      	ldr	r1, [r2, #0]
 8005d34:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005d38:	6011      	str	r1, [r2, #0]
  conv2d_6_weights_array.data = weights + 4992;
 8005d3a:	f503 519c 	add.w	r1, r3, #4992	; 0x1380
 8005d3e:	6091      	str	r1, [r2, #8]
  conv2d_6_weights_array.data_start = weights + 4992;
 8005d40:	60d1      	str	r1, [r2, #12]
  conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d42:	4a32      	ldr	r2, [pc, #200]	; (8005e0c <ai_network_init+0x130>)
 8005d44:	6811      	ldr	r1, [r2, #0]
 8005d46:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005d4a:	6011      	str	r1, [r2, #0]
  conv2d_6_bias_array.data = weights + 23424;
 8005d4c:	f503 41b7 	add.w	r1, r3, #23424	; 0x5b80
 8005d50:	6091      	str	r1, [r2, #8]
  conv2d_6_bias_array.data_start = weights + 23424;
 8005d52:	60d1      	str	r1, [r2, #12]
  dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d54:	4a2e      	ldr	r2, [pc, #184]	; (8005e10 <ai_network_init+0x134>)
 8005d56:	6811      	ldr	r1, [r2, #0]
 8005d58:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005d5c:	6011      	str	r1, [r2, #0]
  dense_3_weights_array.data = weights + 23552;
 8005d5e:	f503 41b8 	add.w	r1, r3, #23552	; 0x5c00
 8005d62:	6091      	str	r1, [r2, #8]
  dense_3_weights_array.data_start = weights + 97280;
 8005d64:	f503 31be 	add.w	r1, r3, #97280	; 0x17c00
 8005d68:	60d1      	str	r1, [r2, #12]
  dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d6a:	4a2a      	ldr	r2, [pc, #168]	; (8005e14 <ai_network_init+0x138>)
 8005d6c:	6811      	ldr	r1, [r2, #0]
 8005d6e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005d72:	6011      	str	r1, [r2, #0]
  dense_3_bias_array.data = weights + 98304;
 8005d74:	f503 31c0 	add.w	r1, r3, #98304	; 0x18000
 8005d78:	6091      	str	r1, [r2, #8]
  dense_3_bias_array.data_start = weights + 98304;
 8005d7a:	60d1      	str	r1, [r2, #12]
  dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d7c:	4a26      	ldr	r2, [pc, #152]	; (8005e18 <ai_network_init+0x13c>)
 8005d7e:	6811      	ldr	r1, [r2, #0]
 8005d80:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005d84:	6011      	str	r1, [r2, #0]
  dense_4_weights_array.data = weights + 98816;
 8005d86:	f503 31c1 	add.w	r1, r3, #98816	; 0x18200
 8005d8a:	6091      	str	r1, [r2, #8]
  dense_4_weights_array.data_start = weights + 98816;
 8005d8c:	60d1      	str	r1, [r2, #12]
  dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d8e:	4a23      	ldr	r2, [pc, #140]	; (8005e1c <ai_network_init+0x140>)
 8005d90:	6811      	ldr	r1, [r2, #0]
  dense_4_bias_array.data = weights + 105984;
 8005d92:	f503 33cf 	add.w	r3, r3, #105984	; 0x19e00
  dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d96:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  dense_4_bias_array.data = weights + 105984;
 8005d9a:	6093      	str	r3, [r2, #8]
  dense_4_bias_array.data_start = weights + 105984;
 8005d9c:	60d3      	str	r3, [r2, #12]
  dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d9e:	6011      	str	r1, [r2, #0]
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8005da0:	6882      	ldr	r2, [r0, #8]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005da2:	69e3      	ldr	r3, [r4, #28]
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8005da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da8:	6082      	str	r2, [r0, #8]
    input_0_output_array.data = NULL;
 8005daa:	4a1d      	ldr	r2, [pc, #116]	; (8005e20 <ai_network_init+0x144>)
 8005dac:	2100      	movs	r1, #0
 8005dae:	6091      	str	r1, [r2, #8]
  input_0_output_array.data_start = NULL;
 8005db0:	60d1      	str	r1, [r2, #12]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005db2:	3303      	adds	r3, #3
  conv2d_4_output_array.data = activations + 0;
 8005db4:	4a1b      	ldr	r2, [pc, #108]	; (8005e24 <ai_network_init+0x148>)
  conv2d_5_output_array.data = activations + 18880;
 8005db6:	491c      	ldr	r1, [pc, #112]	; (8005e28 <ai_network_init+0x14c>)
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005db8:	f023 0303 	bic.w	r3, r3, #3
  conv2d_4_output_array.data = activations + 0;
 8005dbc:	6093      	str	r3, [r2, #8]
  conv2d_4_output_array.data_start = activations + 0;
 8005dbe:	60d3      	str	r3, [r2, #12]
  conv2d_5_output_array.data = activations + 18880;
 8005dc0:	f503 4293 	add.w	r2, r3, #18816	; 0x4980
 8005dc4:	3240      	adds	r2, #64	; 0x40
 8005dc6:	608a      	str	r2, [r1, #8]
  conv2d_5_output_array.data_start = activations + 18880;
 8005dc8:	60ca      	str	r2, [r1, #12]
  conv2d_6_output_in_array.data = activations + 0;
 8005dca:	4a18      	ldr	r2, [pc, #96]	; (8005e2c <ai_network_init+0x150>)
  dense_3_output_array.data = activations + 4608;
 8005dcc:	4918      	ldr	r1, [pc, #96]	; (8005e30 <ai_network_init+0x154>)
  conv2d_6_output_in_array.data = activations + 0;
 8005dce:	6093      	str	r3, [r2, #8]
  conv2d_6_output_in_array.data_start = activations + 0;
 8005dd0:	60d3      	str	r3, [r2, #12]
  conv2d_6_output_out_array.data = activations + 0;
 8005dd2:	4a18      	ldr	r2, [pc, #96]	; (8005e34 <ai_network_init+0x158>)
 8005dd4:	6093      	str	r3, [r2, #8]
  conv2d_6_output_out_array.data_start = activations + 0;
 8005dd6:	60d3      	str	r3, [r2, #12]
  dense_3_output_array.data = activations + 4608;
 8005dd8:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
 8005ddc:	608a      	str	r2, [r1, #8]
  dense_3_output_array.data_start = activations + 4608;
 8005dde:	60ca      	str	r2, [r1, #12]
  dense_3_nl_output_array.data = activations + 4608;
 8005de0:	4915      	ldr	r1, [pc, #84]	; (8005e38 <ai_network_init+0x15c>)
 8005de2:	608a      	str	r2, [r1, #8]
  dense_3_nl_output_array.data_start = activations + 4608;
 8005de4:	60ca      	str	r2, [r1, #12]
  dense_4_output_array.data = activations + 0;
 8005de6:	4a15      	ldr	r2, [pc, #84]	; (8005e3c <ai_network_init+0x160>)
 8005de8:	6093      	str	r3, [r2, #8]
  dense_4_output_array.data_start = activations + 0;
 8005dea:	60d3      	str	r3, [r2, #12]
  dense_4_nl_output_array.data = activations + 0;
 8005dec:	4a14      	ldr	r2, [pc, #80]	; (8005e40 <ai_network_init+0x164>)

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, &params->params);
  ok &= network_configure_activations(net_ctx, &params->activations);
  
  return ok;
 8005dee:	2001      	movs	r0, #1
  dense_4_nl_output_array.data = activations + 0;
 8005df0:	6093      	str	r3, [r2, #8]
  dense_4_nl_output_array.data_start = activations + 0;
 8005df2:	60d3      	str	r3, [r2, #12]
}
 8005df4:	bd10      	pop	{r4, pc}
 8005df6:	bf00      	nop
 8005df8:	200001fc 	.word	0x200001fc
 8005dfc:	20000140 	.word	0x20000140
 8005e00:	200002ec 	.word	0x200002ec
 8005e04:	20000230 	.word	0x20000230
 8005e08:	20000410 	.word	0x20000410
 8005e0c:	20000320 	.word	0x20000320
 8005e10:	20000510 	.word	0x20000510
 8005e14:	20000444 	.word	0x20000444
 8005e18:	20000610 	.word	0x20000610
 8005e1c:	20000544 	.word	0x20000544
 8005e20:	2000068c 	.word	0x2000068c
 8005e24:	200001c8 	.word	0x200001c8
 8005e28:	200002b8 	.word	0x200002b8
 8005e2c:	200003a8 	.word	0x200003a8
 8005e30:	200004dc 	.word	0x200004dc
 8005e34:	200003dc 	.word	0x200003dc
 8005e38:	200004a8 	.word	0x200004a8
 8005e3c:	200005dc 	.word	0x200005dc
 8005e40:	200005a8 	.word	0x200005a8

08005e44 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8005e44:	f7fa bbb0 	b.w	80005a8 <ai_platform_network_process>

08005e48 <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f7fa bbad 	b.w	80005a8 <ai_platform_network_process>
	...

08005e50 <normalize>:
ai_float* output_;
ai_float normalized_data[AI_MNETWORK_IN_1_SIZE];
ai_float feature[AI_MNETWORK_OUT_1_SIZE];

// Standard normalization
void normalize(ai_float *in_data, ai_float *normalized_data, int len) {
 8005e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e54:	ed2d 8b04 	vpush	{d8-d9}

  float mean = 0.0;
 8005e58:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8005f14 <normalize+0xc4>
void normalize(ai_float *in_data, ai_float *normalized_data, int len) {
 8005e5c:	4615      	mov	r5, r2
 8005e5e:	460e      	mov	r6, r1
 8005e60:	4607      	mov	r7, r0
  float std = 0.0;

  // Sum and mean
  for (int i = 0; i < len; i++) {
 8005e62:	4602      	mov	r2, r0
 8005e64:	2300      	movs	r3, #0
 8005e66:	42ab      	cmp	r3, r5
 8005e68:	db24      	blt.n	8005eb4 <normalize+0x64>
    mean += in_data[i];
  }
  mean = mean / len;
 8005e6a:	ee07 5a10 	vmov	s14, r5
 8005e6e:	eeb8 9ac7 	vcvt.f32.s32	s18, s14
  float std = 0.0;
 8005e72:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8005f14 <normalize+0xc4>
  mean = mean / len;
 8005e76:	eec7 8a89 	vdiv.f32	s17, s15, s18

  // Standard deviation
  for (int i = 0; i < len; i++) {
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	f04f 0a00 	mov.w	sl, #0
 8005e80:	45aa      	cmp	sl, r5
 8005e82:	db1d      	blt.n	8005ec0 <normalize+0x70>
    std += pow(in_data[i] - mean, 2);
  }
  std = sqrt(std / len);
 8005e84:	eec8 7a09 	vdiv.f32	s15, s16, s18
 8005e88:	ee17 0a90 	vmov	r0, s15
 8005e8c:	f7fc fe4c 	bl	8002b28 <__aeabi_f2d>
 8005e90:	ec41 0b10 	vmov	d0, r0, r1
 8005e94:	f006 f8e2 	bl	800c05c <sqrt>
 8005e98:	ec51 0b10 	vmov	r0, r1, d0
 8005e9c:	f7fd f970 	bl	8003180 <__aeabi_d2f>
 8005ea0:	ee07 0a10 	vmov	s14, r0
 8005ea4:	4631      	mov	r1, r6

  // Normalization
  for (int i = 0; i < len; i++) {
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	42ab      	cmp	r3, r5
 8005eaa:	db28      	blt.n	8005efe <normalize+0xae>
    normalized_data[i] = (in_data[i] - mean) / std;
  }

}
 8005eac:	ecbd 8b04 	vpop	{d8-d9}
 8005eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mean += in_data[i];
 8005eb4:	ecb2 7a01 	vldmia	r2!, {s14}
  for (int i = 0; i < len; i++) {
 8005eb8:	3301      	adds	r3, #1
    mean += in_data[i];
 8005eba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ebe:	e7d2      	b.n	8005e66 <normalize+0x16>
    std += pow(in_data[i] - mean, 2);
 8005ec0:	ecf4 7a01 	vldmia	r4!, {s15}
 8005ec4:	ee77 7ae8 	vsub.f32	s15, s15, s17
  for (int i = 0; i < len; i++) {
 8005ec8:	f10a 0a01 	add.w	sl, sl, #1
    std += pow(in_data[i] - mean, 2);
 8005ecc:	ee17 0a90 	vmov	r0, s15
 8005ed0:	f7fc fe2a 	bl	8002b28 <__aeabi_f2d>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	f7fc fe7a 	bl	8002bd0 <__aeabi_dmul>
 8005edc:	4680      	mov	r8, r0
 8005ede:	ee18 0a10 	vmov	r0, s16
 8005ee2:	4689      	mov	r9, r1
 8005ee4:	f7fc fe20 	bl	8002b28 <__aeabi_f2d>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4640      	mov	r0, r8
 8005eee:	4649      	mov	r1, r9
 8005ef0:	f7fc fcbc 	bl	800286c <__adddf3>
 8005ef4:	f7fd f944 	bl	8003180 <__aeabi_d2f>
 8005ef8:	ee08 0a10 	vmov	s16, r0
 8005efc:	e7c0      	b.n	8005e80 <normalize+0x30>
    normalized_data[i] = (in_data[i] - mean) / std;
 8005efe:	ecf7 7a01 	vldmia	r7!, {s15}
 8005f02:	ee77 7ae8 	vsub.f32	s15, s15, s17
  for (int i = 0; i < len; i++) {
 8005f06:	3301      	adds	r3, #1
    normalized_data[i] = (in_data[i] - mean) / std;
 8005f08:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f0c:	ece1 6a01 	vstmia	r1!, {s13}
 8005f10:	e7ca      	b.n	8005ea8 <normalize+0x58>
 8005f12:	bf00      	nop
 8005f14:	00000000 	.word	0x00000000

08005f18 <ai_init>:

// Initialize the neural network
int ai_init(void) {
 8005f18:	b530      	push	{r4, r5, lr}

  ai_error err;
  const char *nn_name;
  const ai_network_params params = {
 8005f1a:	4d13      	ldr	r5, [pc, #76]	; (8005f68 <ai_init+0x50>)
 8005f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
int ai_init(void) {
 8005f1e:	b089      	sub	sp, #36	; 0x24
  const ai_network_params params = {
 8005f20:	466c      	mov	r4, sp
 8005f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005f28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AI_BUFFER_NULL(NULL),
  AI_BUFFER_NULL(activations) };

  // Find a network
  nn_name = ai_mnetwork_find(NULL, 0);
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4608      	mov	r0, r1
 8005f30:	f000 f93e 	bl	80061b0 <ai_mnetwork_find>
  if (nn_name) {
 8005f34:	b930      	cbnz	r0, 8005f44 <ai_init+0x2c>
#ifndef INFERENCE_LOGGING
    printf("\nFound network: \"%s\"\n", nn_name);
#endif
  } else {
    printf("E: ai_mnetwork_find\n");
 8005f36:	480d      	ldr	r0, [pc, #52]	; (8005f6c <ai_init+0x54>)
    return -1;
  }

  // Initialize the network
  if (!ai_mnetwork_init(handle, &params)) {
    printf("E: ai_mnetwork_init\n");
 8005f38:	f003 fef8 	bl	8009d2c <puts>
    return -1;
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return 0;
}
 8005f40:	b009      	add	sp, #36	; 0x24
 8005f42:	bd30      	pop	{r4, r5, pc}
  err = ai_mnetwork_create(nn_name, &handle, NULL);
 8005f44:	4d0a      	ldr	r5, [pc, #40]	; (8005f70 <ai_init+0x58>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	4629      	mov	r1, r5
 8005f4a:	f000 f943 	bl	80061d4 <ai_mnetwork_create>
  if (err.type) {
 8005f4e:	b2c4      	uxtb	r4, r0
 8005f50:	b10c      	cbz	r4, 8005f56 <ai_init+0x3e>
    printf("E: ai_mnetwork_create\n");
 8005f52:	4808      	ldr	r0, [pc, #32]	; (8005f74 <ai_init+0x5c>)
 8005f54:	e7f0      	b.n	8005f38 <ai_init+0x20>
  if (!ai_mnetwork_init(handle, &params)) {
 8005f56:	4669      	mov	r1, sp
 8005f58:	6828      	ldr	r0, [r5, #0]
 8005f5a:	f000 f969 	bl	8006230 <ai_mnetwork_init>
 8005f5e:	b908      	cbnz	r0, 8005f64 <ai_init+0x4c>
    printf("E: ai_mnetwork_init\n");
 8005f60:	4805      	ldr	r0, [pc, #20]	; (8005f78 <ai_init+0x60>)
 8005f62:	e7e9      	b.n	8005f38 <ai_init+0x20>
  return 0;
 8005f64:	4620      	mov	r0, r4
 8005f66:	e7eb      	b.n	8005f40 <ai_init+0x28>
 8005f68:	0800e380 	.word	0x0800e380
 8005f6c:	08028398 	.word	0x08028398
 8005f70:	2000c6a4 	.word	0x2000c6a4
 8005f74:	080283ac 	.word	0x080283ac
 8005f78:	080283c2 	.word	0x080283c2

08005f7c <ai_infer>:

// Run inference
void ai_infer(ai_float *input_data, ai_float *output_data) {
 8005f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  // Normalize the feature data (DC is discarded)
  normalize(input_data, normalized_data, AI_MNETWORK_IN_1_SIZE);
 8005f80:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8005fe8 <ai_infer+0x6c>

  // Input parameters for running inference
  ai_input[0] = report.inputs;
 8005f84:	4c14      	ldr	r4, [pc, #80]	; (8005fd8 <ai_infer+0x5c>)
 8005f86:	4e15      	ldr	r6, [pc, #84]	; (8005fdc <ai_infer+0x60>)
  ai_output[0] = report.outputs;
 8005f88:	4d15      	ldr	r5, [pc, #84]	; (8005fe0 <ai_infer+0x64>)
void ai_infer(ai_float *input_data, ai_float *output_data) {
 8005f8a:	460f      	mov	r7, r1
  normalize(input_data, normalized_data, AI_MNETWORK_IN_1_SIZE);
 8005f8c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005f90:	4641      	mov	r1, r8
 8005f92:	f7ff ff5d 	bl	8005e50 <normalize>
  ai_input[0] = report.inputs;
 8005f96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  ai_output[0] = report.outputs;
 8005f9a:	3410      	adds	r4, #16
  ai_input[0] = report.inputs;
 8005f9c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  ai_output[0] = report.outputs;
 8005fa0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005fa4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ai_input[0].n_batches = 1;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	8073      	strh	r3, [r6, #2]
  ai_input[0].data = AI_HANDLE_PTR(normalized_data);
  ai_output[0].n_batches = 1;
 8005fac:	806b      	strh	r3, [r5, #2]
  ai_output[0].data = AI_HANDLE_PTR(output_data);

  // Run inference
  ai_mnetwork_run(handle, &ai_input[0], &ai_output[0]);
 8005fae:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <ai_infer+0x68>)
  ai_input[0].data = AI_HANDLE_PTR(normalized_data);
 8005fb0:	f8c6 800c 	str.w	r8, [r6, #12]
  ai_mnetwork_run(handle, &ai_input[0], &ai_output[0]);
 8005fb4:	462a      	mov	r2, r5
 8005fb6:	6818      	ldr	r0, [r3, #0]
  ai_output[0].data = AI_HANDLE_PTR(output_data);
 8005fb8:	60ef      	str	r7, [r5, #12]
  ai_mnetwork_run(handle, &ai_input[0], &ai_output[0]);
 8005fba:	4631      	mov	r1, r6
 8005fbc:	f000 f969 	bl	8006292 <ai_mnetwork_run>

  // Copy inference result
  for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
    output_data[i] = ((ai_float *) (ai_output[0].data))[i];
 8005fc0:	68eb      	ldr	r3, [r5, #12]
 8005fc2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005fc6:	f853 1b04 	ldr.w	r1, [r3], #4
 8005fca:	f847 1b04 	str.w	r1, [r7], #4
  for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d1f9      	bne.n	8005fc6 <ai_infer+0x4a>
  }
}
 8005fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd6:	bf00      	nop
 8005fd8:	2000c6dc 	.word	0x2000c6dc
 8005fdc:	2000c648 	.word	0x2000c648
 8005fe0:	2000c658 	.word	0x2000c658
 8005fe4:	2000c6a4 	.word	0x2000c6a4
 8005fe8:	2000c724 	.word	0x2000c724

08005fec <ai_mnetwork_handle>:
    return false;
}

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 8005fec:	4b05      	ldr	r3, [pc, #20]	; (8006004 <ai_mnetwork_handle+0x18>)
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8005fee:	b120      	cbz	r0, 8005ffa <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8005ff0:	4298      	cmp	r0, r3
 8005ff2:	bf0c      	ite	eq
 8005ff4:	4618      	moveq	r0, r3
 8005ff6:	2000      	movne	r0, #0
 8005ff8:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8005ffa:	681a      	ldr	r2, [r3, #0]
            return &gnetworks[i];
 8005ffc:	2a00      	cmp	r2, #0
 8005ffe:	bf08      	it	eq
 8006000:	4618      	moveq	r0, r3
}
 8006002:	4770      	bx	lr
 8006004:	20006ef4 	.word	0x20006ef4

08006008 <ai_mnetwork_is_valid.isra.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8006008:	b570      	push	{r4, r5, r6, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 800600a:	4604      	mov	r4, r0
 800600c:	b190      	cbz	r0, 8006034 <ai_mnetwork_is_valid.isra.0+0x2c>
 800600e:	680d      	ldr	r5, [r1, #0]
 8006010:	4628      	mov	r0, r5
 8006012:	f7fc fbc7 	bl	80027a4 <strlen>
 8006016:	4606      	mov	r6, r0
 8006018:	4620      	mov	r0, r4
 800601a:	f7fc fbc3 	bl	80027a4 <strlen>
 800601e:	4286      	cmp	r6, r0
 8006020:	d108      	bne.n	8006034 <ai_mnetwork_is_valid.isra.0+0x2c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8006022:	4632      	mov	r2, r6
 8006024:	4621      	mov	r1, r4
 8006026:	4628      	mov	r0, r5
 8006028:	f003 fec2 	bl	8009db0 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 800602c:	fab0 f080 	clz	r0, r0
 8006030:	0940      	lsrs	r0, r0, #5
 8006032:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8006034:	2000      	movs	r0, #0
}
 8006036:	bd70      	pop	{r4, r5, r6, pc}

08006038 <MX_X_CUBE_AI_Init>:
{
 8006038:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 800603a:	f001 fb07 	bl	800764c <MX_USART2_UART_Init>
  ai_init();
 800603e:	f7ff ff6b 	bl	8005f18 <ai_init>
  lcd_init(&hi2c1);
 8006042:	4802      	ldr	r0, [pc, #8]	; (800604c <MX_X_CUBE_AI_Init+0x14>)
}
 8006044:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  lcd_init(&hi2c1);
 8006048:	f000 bf68 	b.w	8006f1c <lcd_init>
 800604c:	2000f1e8 	.word	0x2000f1e8

08006050 <MX_X_CUBE_AI_Process>:
{
 8006050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006052:	f5ad 5d26 	sub.w	sp, sp, #10624	; 0x2980
 8006056:	b08b      	sub	sp, #44	; 0x2c
  char lcd_line1[5][16] = { "Scene           ", "Scene .         ",
 8006058:	2250      	movs	r2, #80	; 0x50
 800605a:	494d      	ldr	r1, [pc, #308]	; (8006190 <MX_X_CUBE_AI_Process+0x140>)
  if (start_inference) {
 800605c:	4c4d      	ldr	r4, [pc, #308]	; (8006194 <MX_X_CUBE_AI_Process+0x144>)
  char lcd_line1[5][16] = { "Scene           ", "Scene .         ",
 800605e:	a81e      	add	r0, sp, #120	; 0x78
 8006060:	f003 f8f1 	bl	8009246 <memcpy>
  char lcd_line2[][16] = { "CHATTING        ", "READING A BOOK  ", "WATCHING TV     ",
 8006064:	22e0      	movs	r2, #224	; 0xe0
 8006066:	494c      	ldr	r1, [pc, #304]	; (8006198 <MX_X_CUBE_AI_Process+0x148>)
 8006068:	a832      	add	r0, sp, #200	; 0xc8
 800606a:	f003 f8ec 	bl	8009246 <memcpy>
  ai_float out_data[AI_NETWORK_OUT_1_SIZE] = { 0.0 };
 800606e:	2238      	movs	r2, #56	; 0x38
 8006070:	2100      	movs	r1, #0
 8006072:	a802      	add	r0, sp, #8
 8006074:	f003 f8f2 	bl	800925c <memset>
  ai_float out_sum[AI_NETWORK_OUT_1_SIZE] = { 0.0 };
 8006078:	2238      	movs	r2, #56	; 0x38
 800607a:	2100      	movs	r1, #0
 800607c:	a810      	add	r0, sp, #64	; 0x40
 800607e:	f003 f8ed 	bl	800925c <memset>
  if (start_inference) {
 8006082:	7823      	ldrb	r3, [r4, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d07f      	beq.n	8006188 <MX_X_CUBE_AI_Process+0x138>
    if (pos > l) {
 8006088:	4b44      	ldr	r3, [pc, #272]	; (800619c <MX_X_CUBE_AI_Process+0x14c>)
        in_data[idx_in + i] = (ai_float) (mfsc_buffer[idx_buf + i]);
 800608a:	4d45      	ldr	r5, [pc, #276]	; (80061a0 <MX_X_CUBE_AI_Process+0x150>)
    if (pos > l) {
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	2a45      	cmp	r2, #69	; 0x45
      pos_start = pos - l;
 8006090:	bfcc      	ite	gt
 8006092:	3a45      	subgt	r2, #69	; 0x45
      pos_start = 200 - (l - pos);
 8006094:	3283      	addle	r2, #131	; 0x83
    window_start_idx = pos_start * NUM_FILTERS;
 8006096:	2328      	movs	r3, #40	; 0x28
 8006098:	4353      	muls	r3, r2
 800609a:	2200      	movs	r2, #0
        idx_buf = 0;
 800609c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80060a0:	a96a      	add	r1, sp, #424	; 0x1a8
 80060a2:	bfa8      	it	ge
 80060a4:	2300      	movge	r3, #0
 80060a6:	1888      	adds	r0, r1, r2
        in_data[idx_in + i] = (ai_float) (mfsc_buffer[idx_buf + i]);
 80060a8:	195e      	adds	r6, r3, r5
      for (int i = 0; i < NUM_FILTERS; i++) {
 80060aa:	2100      	movs	r1, #0
        in_data[idx_in + i] = (ai_float) (mfsc_buffer[idx_buf + i]);
 80060ac:	5677      	ldrsb	r7, [r6, r1]
 80060ae:	ee07 7a90 	vmov	s15, r7
      for (int i = 0; i < NUM_FILTERS; i++) {
 80060b2:	3101      	adds	r1, #1
        in_data[idx_in + i] = (ai_float) (mfsc_buffer[idx_buf + i]);
 80060b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for (int i = 0; i < NUM_FILTERS; i++) {
 80060b8:	2928      	cmp	r1, #40	; 0x28
        in_data[idx_in + i] = (ai_float) (mfsc_buffer[idx_buf + i]);
 80060ba:	ece0 7a01 	vstmia	r0!, {s15}
      for (int i = 0; i < NUM_FILTERS; i++) {
 80060be:	d1f5      	bne.n	80060ac <MX_X_CUBE_AI_Process+0x5c>
 80060c0:	32a0      	adds	r2, #160	; 0xa0
    for (int j = 0; j < WINDOW_LENGTH; j++) {
 80060c2:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      idx_buf += NUM_FILTERS;
 80060c6:	f103 0328 	add.w	r3, r3, #40	; 0x28
    for (int j = 0; j < WINDOW_LENGTH; j++) {
 80060ca:	d1e7      	bne.n	800609c <MX_X_CUBE_AI_Process+0x4c>
    ai_infer(in_data, out_data);  // Inference
 80060cc:	a902      	add	r1, sp, #8
 80060ce:	a86a      	add	r0, sp, #424	; 0x1a8
      out_hist[current][i] = out_data[i];
 80060d0:	4d34      	ldr	r5, [pc, #208]	; (80061a4 <MX_X_CUBE_AI_Process+0x154>)
 80060d2:	4e35      	ldr	r6, [pc, #212]	; (80061a8 <MX_X_CUBE_AI_Process+0x158>)
    ai_infer(in_data, out_data);  // Inference
 80060d4:	f7ff ff52 	bl	8005f7c <ai_infer>
    arm_max_f32(out_data, AI_NETWORK_OUT_1_SIZE, &max_value, &max_idx);
 80060d8:	ab01      	add	r3, sp, #4
 80060da:	466a      	mov	r2, sp
 80060dc:	210e      	movs	r1, #14
 80060de:	a802      	add	r0, sp, #8
 80060e0:	f001 fbd2 	bl	8007888 <arm_max_f32>
      out_hist[current][i] = out_data[i];
 80060e4:	682a      	ldr	r2, [r5, #0]
 80060e6:	2138      	movs	r1, #56	; 0x38
 80060e8:	af10      	add	r7, sp, #64	; 0x40
 80060ea:	ab02      	add	r3, sp, #8
 80060ec:	fb01 6102 	mla	r1, r1, r2, r6
 80060f0:	4638      	mov	r0, r7
      out_sum[i] = 0.0;
 80060f2:	f04f 0e00 	mov.w	lr, #0
      out_hist[current][i] = out_data[i];
 80060f6:	f853 cb04 	ldr.w	ip, [r3], #4
 80060fa:	f841 cb04 	str.w	ip, [r1], #4
    for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 80060fe:	42bb      	cmp	r3, r7
      out_sum[i] = 0.0;
 8006100:	f840 eb04 	str.w	lr, [r0], #4
    for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8006104:	d1f7      	bne.n	80060f6 <MX_X_CUBE_AI_Process+0xa6>
    if (++current >= HISTORY_LENGTH) {
 8006106:	3201      	adds	r2, #1
 8006108:	2300      	movs	r3, #0
      current = 0;
 800610a:	2a05      	cmp	r2, #5
 800610c:	bf28      	it	cs
 800610e:	461a      	movcs	r2, r3
 8006110:	602a      	str	r2, [r5, #0]
 8006112:	a81e      	add	r0, sp, #120	; 0x78
 8006114:	18f1      	adds	r1, r6, r3
      out_hist[current][i] = out_data[i];
 8006116:	aa10      	add	r2, sp, #64	; 0x40
        out_sum[i] += out_hist[j][i];
 8006118:	edd2 7a00 	vldr	s15, [r2]
 800611c:	ecb1 7a01 	vldmia	r1!, {s14}
 8006120:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006124:	ece2 7a01 	vstmia	r2!, {s15}
      for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8006128:	4282      	cmp	r2, r0
 800612a:	d1f5      	bne.n	8006118 <MX_X_CUBE_AI_Process+0xc8>
 800612c:	3338      	adds	r3, #56	; 0x38
    for (int j = 0; j < 5; j++) {
 800612e:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006132:	d1ef      	bne.n	8006114 <MX_X_CUBE_AI_Process+0xc4>
 8006134:	ab11      	add	r3, sp, #68	; 0x44
 8006136:	2201      	movs	r2, #1
 8006138:	2600      	movs	r6, #0
      if (out_sum[class] < out_sum[i]) {
 800613a:	a910      	add	r1, sp, #64	; 0x40
 800613c:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8006140:	ecf3 7a01 	vldmia	r3!, {s15}
 8006144:	ed91 7a00 	vldr	s14, [r1]
        class = i;
 8006148:	eeb4 7a67 	vcmp.f32	s14, s15
 800614c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006150:	bf48      	it	mi
 8006152:	4616      	movmi	r6, r2
    for (int i = 1; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8006154:	3201      	adds	r2, #1
 8006156:	2a0e      	cmp	r2, #14
 8006158:	d1ef      	bne.n	800613a <MX_X_CUBE_AI_Process+0xea>
    lcd_clear();
 800615a:	f000 ff0b 	bl	8006f74 <lcd_clear>
    lcd_string(lcd_line1[current], 16);
 800615e:	6828      	ldr	r0, [r5, #0]
 8006160:	ab1e      	add	r3, sp, #120	; 0x78
 8006162:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8006166:	2110      	movs	r1, #16
 8006168:	f000 ff0a 	bl	8006f80 <lcd_string>
    lcd_newline();
 800616c:	f000 ff05 	bl	8006f7a <lcd_newline>
    lcd_string(lcd_line2[class], 16);
 8006170:	ab32      	add	r3, sp, #200	; 0xc8
 8006172:	eb03 1006 	add.w	r0, r3, r6, lsl #4
 8006176:	2110      	movs	r1, #16
 8006178:	f000 ff02 	bl	8006f80 <lcd_string>
    start_inference = false;
 800617c:	2300      	movs	r3, #0
    printf("%lu\n", max_idx);
 800617e:	9901      	ldr	r1, [sp, #4]
 8006180:	480a      	ldr	r0, [pc, #40]	; (80061ac <MX_X_CUBE_AI_Process+0x15c>)
    start_inference = false;
 8006182:	7023      	strb	r3, [r4, #0]
    printf("%lu\n", max_idx);
 8006184:	f003 fd4a 	bl	8009c1c <iprintf>
}
 8006188:	f50d 5d26 	add.w	sp, sp, #10624	; 0x2980
 800618c:	b00b      	add	sp, #44	; 0x2c
 800618e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006190:	0800e3a0 	.word	0x0800e3a0
 8006194:	2000c635 	.word	0x2000c635
 8006198:	0800e3f0 	.word	0x0800e3f0
 800619c:	2000c630 	.word	0x2000c630
 80061a0:	2000a6ec 	.word	0x2000a6ec
 80061a4:	20006ef0 	.word	0x20006ef0
 80061a8:	20006f1c 	.word	0x20006f1c
 80061ac:	080283d6 	.word	0x080283d6

080061b0 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 80061b0:	b510      	push	{r4, lr}
 80061b2:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 80061b4:	4905      	ldr	r1, [pc, #20]	; (80061cc <ai_mnetwork_find+0x1c>)
 80061b6:	f7ff ff27 	bl	8006008 <ai_mnetwork_is_valid.isra.0>
 80061ba:	b920      	cbnz	r0, 80061c6 <ai_mnetwork_find+0x16>
            return entry->name;
        else {
            if (!idx--)
 80061bc:	2c00      	cmp	r4, #0
                return entry->name;
        }
    }
    return NULL;
 80061be:	4804      	ldr	r0, [pc, #16]	; (80061d0 <ai_mnetwork_find+0x20>)
 80061c0:	bf18      	it	ne
 80061c2:	2000      	movne	r0, #0
 80061c4:	bd10      	pop	{r4, pc}
                return entry->name;
 80061c6:	4802      	ldr	r0, [pc, #8]	; (80061d0 <ai_mnetwork_find+0x20>)
}
 80061c8:	bd10      	pop	{r4, pc}
 80061ca:	bf00      	nop
 80061cc:	080283dc 	.word	0x080283dc
 80061d0:	0802831c 	.word	0x0802831c

080061d4 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 80061d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d6:	4607      	mov	r7, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80061d8:	2000      	movs	r0, #0
{
 80061da:	460d      	mov	r5, r1
 80061dc:	4616      	mov	r6, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80061de:	f7ff ff05 	bl	8005fec <ai_mnetwork_handle>

    if (!inst) {
 80061e2:	4604      	mov	r4, r0
 80061e4:	b1c8      	cbz	r0, 800621a <ai_mnetwork_create+0x46>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 80061e6:	4911      	ldr	r1, [pc, #68]	; (800622c <ai_mnetwork_create+0x58>)
 80061e8:	4638      	mov	r0, r7
 80061ea:	f7ff ff0d 	bl	8006008 <ai_mnetwork_is_valid.isra.0>
 80061ee:	b1d0      	cbz	r0, 8006226 <ai_mnetwork_create+0x52>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 80061f0:	4631      	mov	r1, r6
 80061f2:	4628      	mov	r0, r5
 80061f4:	f7ff fd62 	bl	8005cbc <ai_network_create>
 80061f8:	b2c2      	uxtb	r2, r0
 80061fa:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 80061fe:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8006202:	d104      	bne.n	800620e <ai_mnetwork_create+0x3a>
        inst->entry = found;
 8006204:	4909      	ldr	r1, [pc, #36]	; (800622c <ai_mnetwork_create+0x58>)
 8006206:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8006208:	6829      	ldr	r1, [r5, #0]
 800620a:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 800620c:	602c      	str	r4, [r5, #0]
    }

    return err;
 800620e:	2000      	movs	r0, #0
 8006210:	f362 0007 	bfi	r0, r2, #0, #8
        return err;
 8006214:	f363 201f 	bfi	r0, r3, #8, #24
 8006218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err;
 800621a:	2000      	movs	r0, #0
 800621c:	2331      	movs	r3, #49	; 0x31
        return err;
 800621e:	f363 0007 	bfi	r0, r3, #0, #8
 8006222:	2310      	movs	r3, #16
 8006224:	e7f6      	b.n	8006214 <ai_mnetwork_create+0x40>
 8006226:	2000      	movs	r0, #0
 8006228:	2314      	movs	r3, #20
 800622a:	e7f8      	b.n	800621e <ai_mnetwork_create+0x4a>
 800622c:	080283dc 	.word	0x080283dc

08006230 <ai_mnetwork_init>:
        return err;
}

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 8006230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006232:	b089      	sub	sp, #36	; 0x24
 8006234:	460f      	mov	r7, r1
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8006236:	f7ff fed9 	bl	8005fec <ai_mnetwork_handle>
    if (inn) {
 800623a:	4606      	mov	r6, r0
 800623c:	b340      	cbz	r0, 8006290 <ai_mnetwork_init+0x60>
        par = inn->entry->params;
 800623e:	f8d0 e000 	ldr.w	lr, [r0]
 8006242:	f10e 0504 	add.w	r5, lr, #4
 8006246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006248:	466c      	mov	r4, sp
 800624a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800624c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 8006254:	8a7b      	ldrh	r3, [r7, #18]
 8006256:	466c      	mov	r4, sp
 8006258:	b193      	cbz	r3, 8006280 <ai_mnetwork_init+0x50>
            par.activations = params->activations;
 800625a:	f107 0310 	add.w	r3, r7, #16
 800625e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006260:	ad08      	add	r5, sp, #32
 8006262:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
        else
            par.activations.data = params->activations.data;
        if (params->params.n_batches)
 8006266:	887b      	ldrh	r3, [r7, #2]
 8006268:	b16b      	cbz	r3, 8006286 <ai_mnetwork_init+0x56>
            par.params = params->params;
 800626a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800626e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
        return inn->entry->ai_init(inn->handle, &par);
 8006272:	6833      	ldr	r3, [r6, #0]
 8006274:	6870      	ldr	r0, [r6, #4]
 8006276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006278:	4621      	mov	r1, r4
 800627a:	4798      	blx	r3
    }
    else
        return false;
}
 800627c:	b009      	add	sp, #36	; 0x24
 800627e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            par.activations.data = params->activations.data;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	9307      	str	r3, [sp, #28]
 8006284:	e7ef      	b.n	8006266 <ai_mnetwork_init+0x36>
            par.params.data = inn->entry->ai_data_weights_get_default();
 8006286:	f8de 3028 	ldr.w	r3, [lr, #40]	; 0x28
 800628a:	4798      	blx	r3
 800628c:	9003      	str	r0, [sp, #12]
 800628e:	e7f0      	b.n	8006272 <ai_mnetwork_init+0x42>
 8006290:	e7f4      	b.n	800627c <ai_mnetwork_init+0x4c>

08006292 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8006292:	b570      	push	{r4, r5, r6, lr}
 8006294:	4615      	mov	r5, r2
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8006296:	f7ff fea9 	bl	8005fec <ai_mnetwork_handle>
    if (inn)
 800629a:	b138      	cbz	r0, 80062ac <ai_mnetwork_run+0x1a>
        return inn->entry->ai_run(inn->handle, input, output);
 800629c:	6802      	ldr	r2, [r0, #0]
 800629e:	6840      	ldr	r0, [r0, #4]
 80062a0:	6c14      	ldr	r4, [r2, #64]	; 0x40
 80062a2:	462a      	mov	r2, r5
 80062a4:	4623      	mov	r3, r4
    else
        return 0;
}
 80062a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 80062aa:	4718      	bx	r3
}
 80062ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080062b0 <MX_CRC_Init>:

/* CRC init function */
void MX_CRC_Init(void)
{

  hcrc.Instance = CRC;
 80062b0:	4809      	ldr	r0, [pc, #36]	; (80062d8 <MX_CRC_Init+0x28>)
{
 80062b2:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80062b4:	4b09      	ldr	r3, [pc, #36]	; (80062dc <MX_CRC_Init+0x2c>)
 80062b6:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80062b8:	2300      	movs	r3, #0
 80062ba:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80062bc:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80062be:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80062c0:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80062c2:	2301      	movs	r3, #1
 80062c4:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80062c6:	f7fd fa1f 	bl	8003708 <HAL_CRC_Init>
 80062ca:	b118      	cbz	r0, 80062d4 <MX_CRC_Init+0x24>
  {
    Error_Handler();
  }

}
 80062cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80062d0:	f001 b8e6 	b.w	80074a0 <Error_Handler>
 80062d4:	bd08      	pop	{r3, pc}
 80062d6:	bf00      	nop
 80062d8:	2000ef24 	.word	0x2000ef24
 80062dc:	40023000 	.word	0x40023000

080062e0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 80062e0:	6802      	ldr	r2, [r0, #0]
 80062e2:	4b08      	ldr	r3, [pc, #32]	; (8006304 <HAL_CRC_MspInit+0x24>)
 80062e4:	429a      	cmp	r2, r3
{
 80062e6:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 80062e8:	d10a      	bne.n	8006300 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80062ea:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80062ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062f4:	649a      	str	r2, [r3, #72]	; 0x48
 80062f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8006300:	b002      	add	sp, #8
 8006302:	4770      	bx	lr
 8006304:	40023000 	.word	0x40023000

08006308 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006308:	b510      	push	{r4, lr}
 800630a:	b08a      	sub	sp, #40	; 0x28
  DAC_ChannelConfTypeDef sConfig = {0};
 800630c:	2224      	movs	r2, #36	; 0x24
 800630e:	2100      	movs	r1, #0
 8006310:	a801      	add	r0, sp, #4
 8006312:	f002 ffa3 	bl	800925c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006316:	4811      	ldr	r0, [pc, #68]	; (800635c <MX_DAC1_Init+0x54>)
 8006318:	4b11      	ldr	r3, [pc, #68]	; (8006360 <MX_DAC1_Init+0x58>)
 800631a:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800631c:	f7fd fa50 	bl	80037c0 <HAL_DAC_Init>
 8006320:	b108      	cbz	r0, 8006326 <MX_DAC1_Init+0x1e>
  {
    Error_Handler();
 8006322:	f001 f8bd 	bl	80074a0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006326:	2400      	movs	r4, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8006328:	2304      	movs	r3, #4
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800632a:	4622      	mov	r2, r4
 800632c:	eb0d 0103 	add.w	r1, sp, r3
 8006330:	480a      	ldr	r0, [pc, #40]	; (800635c <MX_DAC1_Init+0x54>)
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006332:	9401      	str	r4, [sp, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8006334:	9302      	str	r3, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006336:	9403      	str	r4, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006338:	9404      	str	r4, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800633a:	9405      	str	r4, [sp, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800633c:	f7fd fa53 	bl	80037e6 <HAL_DAC_ConfigChannel>
 8006340:	b108      	cbz	r0, 8006346 <MX_DAC1_Init+0x3e>
  {
    Error_Handler();
 8006342:	f001 f8ad 	bl	80074a0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006346:	2210      	movs	r2, #16
 8006348:	a901      	add	r1, sp, #4
 800634a:	4804      	ldr	r0, [pc, #16]	; (800635c <MX_DAC1_Init+0x54>)
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800634c:	9404      	str	r4, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800634e:	f7fd fa4a 	bl	80037e6 <HAL_DAC_ConfigChannel>
 8006352:	b108      	cbz	r0, 8006358 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8006354:	f001 f8a4 	bl	80074a0 <Error_Handler>
  }

}
 8006358:	b00a      	add	sp, #40	; 0x28
 800635a:	bd10      	pop	{r4, pc}
 800635c:	2000ef48 	.word	0x2000ef48
 8006360:	40007400 	.word	0x40007400

08006364 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006364:	b530      	push	{r4, r5, lr}
 8006366:	4605      	mov	r5, r0
 8006368:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800636a:	2214      	movs	r2, #20
 800636c:	2100      	movs	r1, #0
 800636e:	a803      	add	r0, sp, #12
 8006370:	f002 ff74 	bl	800925c <memset>
  if(dacHandle->Instance==DAC1)
 8006374:	682a      	ldr	r2, [r5, #0]
 8006376:	4b2e      	ldr	r3, [pc, #184]	; (8006430 <HAL_DAC_MspInit+0xcc>)
 8006378:	429a      	cmp	r2, r3
 800637a:	d156      	bne.n	800642a <HAL_DAC_MspInit+0xc6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800637c:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8006380:	4c2c      	ldr	r4, [pc, #176]	; (8006434 <HAL_DAC_MspInit+0xd0>)
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006382:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006384:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006388:	659a      	str	r2, [r3, #88]	; 0x58
 800638a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800638c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8006390:	9201      	str	r2, [sp, #4]
 8006392:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006394:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006396:	f042 0201 	orr.w	r2, r2, #1
 800639a:	64da      	str	r2, [r3, #76]	; 0x4c
 800639c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	9302      	str	r3, [sp, #8]
 80063a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80063a6:	2330      	movs	r3, #48	; 0x30
 80063a8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063ae:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063b0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063b2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063b4:	f7fd fd5e 	bl	8003e74 <HAL_GPIO_Init>
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80063b8:	2280      	movs	r2, #128	; 0x80
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063ba:	4b1f      	ldr	r3, [pc, #124]	; (8006438 <HAL_DAC_MspInit+0xd4>)
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80063bc:	6122      	str	r2, [r4, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80063be:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063c2:	f04f 0c06 	mov.w	ip, #6
 80063c6:	f04f 0e10 	mov.w	lr, #16
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80063ca:	6162      	str	r2, [r4, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80063cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063d0:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80063d4:	61a2      	str	r2, [r4, #24]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80063d6:	2300      	movs	r3, #0
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80063d8:	2220      	movs	r2, #32
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80063da:	4620      	mov	r0, r4
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80063dc:	60e3      	str	r3, [r4, #12]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80063de:	61e2      	str	r2, [r4, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80063e0:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80063e2:	f7fd fc35 	bl	8003c50 <HAL_DMA_Init>
 80063e6:	b108      	cbz	r0, 80063ec <HAL_DAC_MspInit+0x88>
    {
      Error_Handler();
 80063e8:	f001 f85a 	bl	80074a0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 80063ec:	60ac      	str	r4, [r5, #8]
 80063ee:	62a5      	str	r5, [r4, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel5;
 80063f0:	4c12      	ldr	r4, [pc, #72]	; (800643c <HAL_DAC_MspInit+0xd8>)
    hdma_dac_ch2.Init.Request = DMA_REQUEST_3;
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063f2:	4b13      	ldr	r3, [pc, #76]	; (8006440 <HAL_DAC_MspInit+0xdc>)
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80063f4:	2280      	movs	r2, #128	; 0x80
 80063f6:	6122      	str	r2, [r4, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80063f8:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063fc:	f04f 0c03 	mov.w	ip, #3
 8006400:	f04f 0e10 	mov.w	lr, #16
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006404:	6162      	str	r2, [r4, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006406:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800640a:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800640e:	61a2      	str	r2, [r4, #24]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006410:	2300      	movs	r3, #0
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8006412:	2220      	movs	r2, #32
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8006414:	4620      	mov	r0, r4
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006416:	60e3      	str	r3, [r4, #12]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8006418:	61e2      	str	r2, [r4, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800641a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 800641c:	f7fd fc18 	bl	8003c50 <HAL_DMA_Init>
 8006420:	b108      	cbz	r0, 8006426 <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8006422:	f001 f83d 	bl	80074a0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 8006426:	60ec      	str	r4, [r5, #12]
 8006428:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800642a:	b009      	add	sp, #36	; 0x24
 800642c:	bd30      	pop	{r4, r5, pc}
 800642e:	bf00      	nop
 8006430:	40007400 	.word	0x40007400
 8006434:	2000ef5c 	.word	0x2000ef5c
 8006438:	40020030 	.word	0x40020030
 800643c:	2000efa4 	.word	0x2000efa4
 8006440:	40020458 	.word	0x40020458
 8006444:	00000000 	.word	0x00000000

08006448 <dct2_init_f32>:
 * @brief  Initialization function for the DCT2.
 * @param[in]     *S         points to an instance of floating-point DCT2 structure.
 * @param[in]     width      length of the DCT2.
 * @return        none.
 */
void dct2_init_f32(dct2_instance_f32 *S, uint16_t width) {
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	ed2d 8b04 	vpush	{d8-d9}
 8006450:	460d      	mov	r5, r1
 8006452:	b083      	sub	sp, #12
 8006454:	4604      	mov	r4, r0
  float32_t *pDataW = NULL;
  float32_t *pDataW_I = NULL;
  float32_t *pDataX = NULL;
  S->width = width;

  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 8006456:	2300      	movs	r3, #0
  S->width = width;
 8006458:	f820 1b04 	strh.w	r1, [r0], #4
  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 800645c:	2201      	movs	r2, #1

  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 800645e:	fb05 f605 	mul.w	r6, r5, r5
  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 8006462:	f001 ff67 	bl	8008334 <arm_mat_init_f32>
  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8006466:	2104      	movs	r1, #4
 8006468:	4630      	mov	r0, r6
 800646a:	f002 feab 	bl	80091c4 <calloc>
  arm_mat_init_f32(&(S->W), width, width, pDataW);
 800646e:	462a      	mov	r2, r5
 8006470:	4603      	mov	r3, r0
 8006472:	4629      	mov	r1, r5
 8006474:	f104 000c 	add.w	r0, r4, #12
 8006478:	f001 ff5c 	bl	8008334 <arm_mat_init_f32>

  pDataW_I = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 800647c:	2104      	movs	r1, #4
 800647e:	4630      	mov	r0, r6
 8006480:	f002 fea0 	bl	80091c4 <calloc>
  arm_mat_init_f32(&(S->W_I), width, width, pDataW_I);
 8006484:	462a      	mov	r2, r5
 8006486:	4603      	mov	r3, r0
 8006488:	4629      	mov	r1, r5
 800648a:	f104 0014 	add.w	r0, r4, #20
 800648e:	f001 ff51 	bl	8008334 <arm_mat_init_f32>

  pDataX = (float32_t *) (calloc(width, sizeof(float32_t)));
 8006492:	2104      	movs	r1, #4
 8006494:	4628      	mov	r0, r5
 8006496:	f002 fe95 	bl	80091c4 <calloc>
  arm_mat_init_f32(&(S->X), width, 1, pDataX);
 800649a:	4629      	mov	r1, r5
 800649c:	4603      	mov	r3, r0
 800649e:	2201      	movs	r2, #1
 80064a0:	f104 001c 	add.w	r0, r4, #28
 80064a4:	f001 ff46 	bl	8008334 <arm_mat_init_f32>

  for (int k = 0; k < S->width; k++) {
 80064a8:	2500      	movs	r5, #0
 80064aa:	8823      	ldrh	r3, [r4, #0]
 80064ac:	429d      	cmp	r5, r3
 80064ae:	db37      	blt.n	8006520 <dct2_init_f32+0xd8>
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 80064b0:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 80065a0 <dct2_init_f32+0x158>
 80064b4:	2600      	movs	r6, #0
      S->W.pData[k * S->width + n] = arm_cos_f32(
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
    }
  }

  for (int n = 0; n < S->width; n++) {
 80064b6:	8823      	ldrh	r3, [r4, #0]
 80064b8:	429e      	cmp	r6, r3
 80064ba:	da68      	bge.n	800658e <dct2_init_f32+0x146>
 80064bc:	0073      	lsls	r3, r6, #1
 80064be:	3301      	adds	r3, #1
 80064c0:	2700      	movs	r7, #0
 80064c2:	9301      	str	r3, [sp, #4]
 80064c4:	463d      	mov	r5, r7
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 80064c6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80064ca:	e05a      	b.n	8006582 <dct2_init_f32+0x13a>
      S->W.pData[k * S->width + n] = arm_cos_f32(
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	fb0a 6b05 	mla	fp, sl, r5, r6
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
 80064d2:	4638      	mov	r0, r7
      S->W.pData[k * S->width + n] = arm_cos_f32(
 80064d4:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
 80064d8:	f7fc fb14 	bl	8002b04 <__aeabi_i2d>
 80064dc:	a32e      	add	r3, pc, #184	; (adr r3, 8006598 <dct2_init_f32+0x150>)
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f7fc fb75 	bl	8002bd0 <__aeabi_dmul>
 80064e6:	4680      	mov	r8, r0
 80064e8:	ea4f 004a 	mov.w	r0, sl, lsl #1
 80064ec:	4689      	mov	r9, r1
 80064ee:	f7fc fb09 	bl	8002b04 <__aeabi_i2d>
 80064f2:	460b      	mov	r3, r1
 80064f4:	4602      	mov	r2, r0
 80064f6:	4649      	mov	r1, r9
 80064f8:	4640      	mov	r0, r8
 80064fa:	f7fc fc93 	bl	8002e24 <__aeabi_ddiv>
      S->W.pData[k * S->width + n] = arm_cos_f32(
 80064fe:	f7fc fe3f 	bl	8003180 <__aeabi_d2f>
 8006502:	ee00 0a10 	vmov	s0, r0
 8006506:	f002 fa77 	bl	80089f8 <arm_cos_f32>
 800650a:	9b01      	ldr	r3, [sp, #4]
 800650c:	ed8b 0a00 	vstr	s0, [fp]
    for (int n = 0; n < S->width; n++) {
 8006510:	3601      	adds	r6, #1
 8006512:	441f      	add	r7, r3
 8006514:	f8b4 a000 	ldrh.w	sl, [r4]
 8006518:	4556      	cmp	r6, sl
 800651a:	dbd7      	blt.n	80064cc <dct2_init_f32+0x84>
  for (int k = 0; k < S->width; k++) {
 800651c:	3501      	adds	r5, #1
 800651e:	e7c4      	b.n	80064aa <dct2_init_f32+0x62>
 8006520:	006b      	lsls	r3, r5, #1
 8006522:	462f      	mov	r7, r5
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	2600      	movs	r6, #0
 8006528:	e7f4      	b.n	8006514 <dct2_init_f32+0xcc>
    for (int k = 0; k < S->width; k++) {
      S->W_I.pData[n * S->width + k] = c_k(k)
 800652a:	69a3      	ldr	r3, [r4, #24]
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 800652c:	2d00      	cmp	r5, #0
      S->W_I.pData[n * S->width + k] = c_k(k)
 800652e:	fb0a 5b06 	mla	fp, sl, r6, r5
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 8006532:	4638      	mov	r0, r7
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 8006534:	bf14      	ite	ne
 8006536:	eeb0 8a68 	vmovne.f32	s16, s17
 800653a:	eeb0 8a49 	vmoveq.f32	s16, s18
      S->W_I.pData[n * S->width + k] = c_k(k)
 800653e:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 8006542:	f7fc fadf 	bl	8002b04 <__aeabi_i2d>
 8006546:	a314      	add	r3, pc, #80	; (adr r3, 8006598 <dct2_init_f32+0x150>)
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f7fc fb40 	bl	8002bd0 <__aeabi_dmul>
 8006550:	4680      	mov	r8, r0
 8006552:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8006556:	4689      	mov	r9, r1
 8006558:	f7fc fad4 	bl	8002b04 <__aeabi_i2d>
 800655c:	460b      	mov	r3, r1
 800655e:	4602      	mov	r2, r0
 8006560:	4649      	mov	r1, r9
 8006562:	4640      	mov	r0, r8
 8006564:	f7fc fc5e 	bl	8002e24 <__aeabi_ddiv>
 8006568:	f7fc fe0a 	bl	8003180 <__aeabi_d2f>
 800656c:	ee00 0a10 	vmov	s0, r0
 8006570:	f002 fa42 	bl	80089f8 <arm_cos_f32>
 8006574:	9b01      	ldr	r3, [sp, #4]
 8006576:	ee28 0a00 	vmul.f32	s0, s16, s0
    for (int k = 0; k < S->width; k++) {
 800657a:	3501      	adds	r5, #1
      S->W_I.pData[n * S->width + k] = c_k(k)
 800657c:	ed8b 0a00 	vstr	s0, [fp]
 8006580:	441f      	add	r7, r3
    for (int k = 0; k < S->width; k++) {
 8006582:	f8b4 a000 	ldrh.w	sl, [r4]
 8006586:	4555      	cmp	r5, sl
 8006588:	dbcf      	blt.n	800652a <dct2_init_f32+0xe2>
  for (int n = 0; n < S->width; n++) {
 800658a:	3601      	adds	r6, #1
 800658c:	e793      	b.n	80064b6 <dct2_init_f32+0x6e>
    }
  }

}
 800658e:	b003      	add	sp, #12
 8006590:	ecbd 8b04 	vpop	{d8-d9}
 8006594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006598:	54442d18 	.word	0x54442d18
 800659c:	400921fb 	.word	0x400921fb
 80065a0:	3f3504f3 	.word	0x3f3504f3

080065a4 <MX_DFSDM1_Init>:

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80065a4:	4836      	ldr	r0, [pc, #216]	; (8006680 <MX_DFSDM1_Init+0xdc>)
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80065a6:	4937      	ldr	r1, [pc, #220]	; (8006684 <MX_DFSDM1_Init+0xe0>)
{
 80065a8:	b508      	push	{r3, lr}
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80065aa:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80065ae:	2300      	movs	r3, #0
 80065b0:	e880 000a 	stmia.w	r0, {r1, r3}
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80065b4:	61c2      	str	r2, [r0, #28]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80065b6:	2301      	movs	r3, #1
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 128;
 80065b8:	2280      	movs	r2, #128	; 0x80
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80065ba:	7203      	strb	r3, [r0, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80065bc:	7243      	strb	r3, [r0, #9]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 128;
 80065be:	6202      	str	r2, [r0, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80065c0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80065c2:	f7fd fa65 	bl	8003a90 <HAL_DFSDM_FilterInit>
 80065c6:	b108      	cbz	r0, 80065cc <MX_DFSDM1_Init+0x28>
  {
    Error_Handler();
 80065c8:	f000 ff6a 	bl	80074a0 <Error_Handler>
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80065cc:	482e      	ldr	r0, [pc, #184]	; (8006688 <MX_DFSDM1_Init+0xe4>)
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80065ce:	4a2f      	ldr	r2, [pc, #188]	; (800668c <MX_DFSDM1_Init+0xe8>)
 80065d0:	2300      	movs	r3, #0
 80065d2:	e880 000c 	stmia.w	r0, {r2, r3}
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80065d6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80065da:	2301      	movs	r3, #1
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80065dc:	61c2      	str	r2, [r0, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 128;
 80065de:	2280      	movs	r2, #128	; 0x80
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80065e0:	7203      	strb	r3, [r0, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80065e2:	7243      	strb	r3, [r0, #9]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 128;
 80065e4:	6202      	str	r2, [r0, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80065e6:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 80065e8:	f7fd fa52 	bl	8003a90 <HAL_DFSDM_FilterInit>
 80065ec:	b108      	cbz	r0, 80065f2 <MX_DFSDM1_Init+0x4e>
  {
    Error_Handler();
 80065ee:	f000 ff57 	bl	80074a0 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80065f2:	4827      	ldr	r0, [pc, #156]	; (8006690 <MX_DFSDM1_Init+0xec>)
 80065f4:	4b27      	ldr	r3, [pc, #156]	; (8006694 <MX_DFSDM1_Init+0xf0>)
 80065f6:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel2.Init.OutputClock.Divider = 32;
 80065f8:	2120      	movs	r1, #32
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80065fa:	2300      	movs	r3, #0
  hdfsdm1_channel2.Init.OutputClock.Divider = 32;
 80065fc:	60c1      	str	r1, [r0, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80065fe:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8006602:	2201      	movs	r2, #1
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8006604:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8006606:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8006608:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800660a:	6181      	str	r1, [r0, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800660c:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800660e:	2104      	movs	r1, #4
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8006610:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
  hdfsdm1_channel2.Init.Offset = 0;
 8006612:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x06;
 8006614:	2306      	movs	r3, #6
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8006616:	7102      	strb	r2, [r0, #4]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8006618:	6201      	str	r1, [r0, #32]
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800661a:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel2.Init.RightBitShift = 0x06;
 800661c:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800661e:	f7fd f9c3 	bl	80039a8 <HAL_DFSDM_ChannelInit>
 8006622:	b108      	cbz	r0, 8006628 <MX_DFSDM1_Init+0x84>
  {
    Error_Handler();
 8006624:	f000 ff3c 	bl	80074a0 <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8006628:	481b      	ldr	r0, [pc, #108]	; (8006698 <MX_DFSDM1_Init+0xf4>)
 800662a:	4b1c      	ldr	r3, [pc, #112]	; (800669c <MX_DFSDM1_Init+0xf8>)
 800662c:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 32;
 800662e:	2120      	movs	r1, #32
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8006630:	2300      	movs	r3, #0
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 8006632:	2201      	movs	r2, #1
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8006634:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 32;
 8006636:	60c1      	str	r1, [r0, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8006638:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800663a:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800663c:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800663e:	2104      	movs	r1, #4
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8006640:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
  hdfsdm1_channel3.Init.Offset = 0;
 8006642:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x06;
 8006644:	2306      	movs	r3, #6
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 8006646:	7102      	strb	r2, [r0, #4]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8006648:	61c2      	str	r2, [r0, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800664a:	6201      	str	r1, [r0, #32]
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 800664c:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel3.Init.RightBitShift = 0x06;
 800664e:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 8006650:	f7fd f9aa 	bl	80039a8 <HAL_DFSDM_ChannelInit>
 8006654:	b108      	cbz	r0, 800665a <MX_DFSDM1_Init+0xb6>
  {
    Error_Handler();
 8006656:	f000 ff23 	bl	80074a0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800665a:	2201      	movs	r2, #1
 800665c:	4910      	ldr	r1, [pc, #64]	; (80066a0 <MX_DFSDM1_Init+0xfc>)
 800665e:	4808      	ldr	r0, [pc, #32]	; (8006680 <MX_DFSDM1_Init+0xdc>)
 8006660:	f7fd fa88 	bl	8003b74 <HAL_DFSDM_FilterConfigRegChannel>
 8006664:	b108      	cbz	r0, 800666a <MX_DFSDM1_Init+0xc6>
  {
    Error_Handler();
 8006666:	f000 ff1b 	bl	80074a0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800666a:	2201      	movs	r2, #1
 800666c:	490d      	ldr	r1, [pc, #52]	; (80066a4 <MX_DFSDM1_Init+0x100>)
 800666e:	4806      	ldr	r0, [pc, #24]	; (8006688 <MX_DFSDM1_Init+0xe4>)
 8006670:	f7fd fa80 	bl	8003b74 <HAL_DFSDM_FilterConfigRegChannel>
 8006674:	b118      	cbz	r0, 800667e <MX_DFSDM1_Init+0xda>
  {
    Error_Handler();
  }

}
 8006676:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800667a:	f000 bf11 	b.w	80074a0 <Error_Handler>
 800667e:	bd08      	pop	{r3, pc}
 8006680:	2000efec 	.word	0x2000efec
 8006684:	40016100 	.word	0x40016100
 8006688:	2000f108 	.word	0x2000f108
 800668c:	40016180 	.word	0x40016180
 8006690:	2000f15c 	.word	0x2000f15c
 8006694:	40016040 	.word	0x40016040
 8006698:	2000f040 	.word	0x2000f040
 800669c:	40016060 	.word	0x40016060
 80066a0:	00020004 	.word	0x00020004
 80066a4:	00030008 	.word	0x00030008

080066a8 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80066a8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 80066aa:	4c3a      	ldr	r4, [pc, #232]	; (8006794 <HAL_DFSDM_FilterMspInit+0xec>)
{
 80066ac:	b089      	sub	sp, #36	; 0x24
 80066ae:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066b0:	2214      	movs	r2, #20
 80066b2:	2100      	movs	r1, #0
 80066b4:	a803      	add	r0, sp, #12
 80066b6:	f002 fdd1 	bl	800925c <memset>
  if(DFSDM1_Init == 0)
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	bb2b      	cbnz	r3, 800670a <HAL_DFSDM_FilterMspInit+0x62>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80066be:	4a36      	ldr	r2, [pc, #216]	; (8006798 <HAL_DFSDM_FilterMspInit+0xf0>)
 80066c0:	6813      	ldr	r3, [r2, #0]
 80066c2:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80066c4:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	4b34      	ldr	r3, [pc, #208]	; (800679c <HAL_DFSDM_FilterMspInit+0xf4>)
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80066ca:	d108      	bne.n	80066de <HAL_DFSDM_FilterMspInit+0x36>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80066cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80066ce:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80066d2:	661a      	str	r2, [r3, #96]	; 0x60
 80066d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80066d6:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 80066da:	9201      	str	r2, [sp, #4]
 80066dc:	9a01      	ldr	r2, [sp, #4]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066e0:	482f      	ldr	r0, [pc, #188]	; (80067a0 <HAL_DFSDM_FilterMspInit+0xf8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066e2:	f042 0204 	orr.w	r2, r2, #4
 80066e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80066e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ea:	f003 0304 	and.w	r3, r3, #4
 80066ee:	9302      	str	r3, [sp, #8]
 80066f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 80066f2:	2384      	movs	r3, #132	; 0x84
 80066f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f6:	2302      	movs	r3, #2
 80066f8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066fa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80066fc:	2306      	movs	r3, #6
 80066fe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006700:	f7fd fbb8 	bl	8003e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	3301      	adds	r3, #1
 8006708:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800670a:	682a      	ldr	r2, [r5, #0]
 800670c:	4b25      	ldr	r3, [pc, #148]	; (80067a4 <HAL_DFSDM_FilterMspInit+0xfc>)
 800670e:	429a      	cmp	r2, r3
 8006710:	d11c      	bne.n	800674c <HAL_DFSDM_FilterMspInit+0xa4>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8006712:	4c25      	ldr	r4, [pc, #148]	; (80067a8 <HAL_DFSDM_FilterMspInit+0x100>)
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8006714:	2280      	movs	r2, #128	; 0x80
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8006716:	f503 431f 	add.w	r3, r3, #40704	; 0x9f00
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800671a:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800671c:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8006720:	3344      	adds	r3, #68	; 0x44
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006722:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006724:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8006728:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800672a:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 800672c:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800672e:	2220      	movs	r2, #32
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8006730:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8006732:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006734:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8006736:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8006738:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 800673a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800673c:	f7fd fa88 	bl	8003c50 <HAL_DMA_Init>
 8006740:	b108      	cbz	r0, 8006746 <HAL_DFSDM_FilterMspInit+0x9e>
    {
      Error_Handler();
 8006742:	f000 fead 	bl	80074a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8006746:	62a5      	str	r5, [r4, #40]	; 0x28
 8006748:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 800674a:	62ac      	str	r4, [r5, #40]	; 0x28
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 800674c:	682a      	ldr	r2, [r5, #0]
 800674e:	4b17      	ldr	r3, [pc, #92]	; (80067ac <HAL_DFSDM_FilterMspInit+0x104>)
 8006750:	429a      	cmp	r2, r3
 8006752:	d11c      	bne.n	800678e <HAL_DFSDM_FilterMspInit+0xe6>
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8006754:	4c16      	ldr	r4, [pc, #88]	; (80067b0 <HAL_DFSDM_FilterMspInit+0x108>)
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8006756:	2280      	movs	r2, #128	; 0x80
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8006758:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 800675c:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800675e:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8006762:	33d8      	adds	r3, #216	; 0xd8
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006764:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006766:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 800676a:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800676c:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 800676e:	2300      	movs	r3, #0
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8006770:	2220      	movs	r2, #32
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8006772:	4620      	mov	r0, r4
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 8006774:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006776:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006778:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 800677a:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_LOW;
 800677c:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 800677e:	f7fd fa67 	bl	8003c50 <HAL_DMA_Init>
 8006782:	b108      	cbz	r0, 8006788 <HAL_DFSDM_FilterMspInit+0xe0>
    {
      Error_Handler();
 8006784:	f000 fe8c 	bl	80074a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8006788:	62a5      	str	r5, [r4, #40]	; 0x28
 800678a:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 800678c:	62ac      	str	r4, [r5, #40]	; 0x28
  }

}
 800678e:	b009      	add	sp, #36	; 0x24
 8006790:	bd30      	pop	{r4, r5, pc}
 8006792:	bf00      	nop
 8006794:	20007034 	.word	0x20007034
 8006798:	20007038 	.word	0x20007038
 800679c:	40021000 	.word	0x40021000
 80067a0:	48000800 	.word	0x48000800
 80067a4:	40016100 	.word	0x40016100
 80067a8:	2000f0c0 	.word	0x2000f0c0
 80067ac:	40016180 	.word	0x40016180
 80067b0:	2000f078 	.word	0x2000f078

080067b4 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80067b4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 80067b6:	4c18      	ldr	r4, [pc, #96]	; (8006818 <HAL_DFSDM_ChannelMspInit+0x64>)
{
 80067b8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067ba:	2214      	movs	r2, #20
 80067bc:	2100      	movs	r1, #0
 80067be:	a803      	add	r0, sp, #12
 80067c0:	f002 fd4c 	bl	800925c <memset>
  if(DFSDM1_Init == 0)
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	bb2b      	cbnz	r3, 8006814 <HAL_DFSDM_ChannelMspInit+0x60>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80067c8:	4a14      	ldr	r2, [pc, #80]	; (800681c <HAL_DFSDM_ChannelMspInit+0x68>)
 80067ca:	6813      	ldr	r3, [r2, #0]
 80067cc:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80067ce:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	4b13      	ldr	r3, [pc, #76]	; (8006820 <HAL_DFSDM_ChannelMspInit+0x6c>)
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80067d4:	d108      	bne.n	80067e8 <HAL_DFSDM_ChannelMspInit+0x34>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80067d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80067d8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80067dc:	661a      	str	r2, [r3, #96]	; 0x60
 80067de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80067e0:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 80067e4:	9201      	str	r2, [sp, #4]
 80067e6:	9a01      	ldr	r2, [sp, #4]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067ea:	480e      	ldr	r0, [pc, #56]	; (8006824 <HAL_DFSDM_ChannelMspInit+0x70>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067ec:	f042 0204 	orr.w	r2, r2, #4
 80067f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80067f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f4:	f003 0304 	and.w	r3, r3, #4
 80067f8:	9302      	str	r3, [sp, #8]
 80067fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 80067fc:	2384      	movs	r3, #132	; 0x84
 80067fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006800:	2302      	movs	r3, #2
 8006802:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006804:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8006806:	2306      	movs	r3, #6
 8006808:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800680a:	f7fd fb33 	bl	8003e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	6023      	str	r3, [r4, #0]
  }
}
 8006814:	b008      	add	sp, #32
 8006816:	bd10      	pop	{r4, pc}
 8006818:	20007034 	.word	0x20007034
 800681c:	20007038 	.word	0x20007038
 8006820:	40021000 	.word	0x40021000
 8006824:	48000800 	.word	0x48000800

08006828 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006828:	4b1f      	ldr	r3, [pc, #124]	; (80068a8 <MX_DMA_Init+0x80>)
{
 800682a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800682c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	649a      	str	r2, [r3, #72]	; 0x48
 8006834:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006836:	f002 0201 	and.w	r2, r2, #1
 800683a:	9200      	str	r2, [sp, #0]
 800683c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800683e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006840:	f042 0202 	orr.w	r2, r2, #2
 8006844:	649a      	str	r2, [r3, #72]	; 0x48
 8006846:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006848:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 800684a:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800684e:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006850:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006852:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006854:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006856:	f7fc ff01 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800685a:	200d      	movs	r0, #13
 800685c:	f7fc ff32 	bl	80036c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8006860:	2200      	movs	r2, #0
 8006862:	4611      	mov	r1, r2
 8006864:	200e      	movs	r0, #14
 8006866:	f7fc fef9 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800686a:	200e      	movs	r0, #14
 800686c:	f7fc ff2a 	bl	80036c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006870:	2200      	movs	r2, #0
 8006872:	4611      	mov	r1, r2
 8006874:	200f      	movs	r0, #15
 8006876:	f7fc fef1 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800687a:	200f      	movs	r0, #15
 800687c:	f7fc ff22 	bl	80036c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8006880:	2200      	movs	r2, #0
 8006882:	4611      	mov	r1, r2
 8006884:	2011      	movs	r0, #17
 8006886:	f7fc fee9 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800688a:	2011      	movs	r0, #17
 800688c:	f7fc ff1a 	bl	80036c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8006890:	2200      	movs	r2, #0
 8006892:	4611      	mov	r1, r2
 8006894:	203c      	movs	r0, #60	; 0x3c
 8006896:	f7fc fee1 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800689a:	203c      	movs	r0, #60	; 0x3c
 800689c:	f7fc ff12 	bl	80036c4 <HAL_NVIC_EnableIRQ>

}
 80068a0:	b003      	add	sp, #12
 80068a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80068a6:	bf00      	nop
 80068a8:	40021000 	.word	0x40021000

080068ac <log10_approx>:
 *  reference: https://community.arm.com/tools/f/discussions/4292/cmsis-dsp-new-functionality-proposal
 */
const float32_t C[4] = { 1.23149591368684f, -4.11852516267426f,
    6.02197014179219f, -3.13396450166353f };
const float32_t LOG10_2 = log10(2.0f);
float32_t log10_approx(float32_t x) {
 80068ac:	b507      	push	{r0, r1, r2, lr}
  float32_t f, l;
  int e;
  f = frexpf(fabsf(x), &e);
 80068ae:	eeb0 0ac0 	vabs.f32	s0, s0
 80068b2:	a801      	add	r0, sp, #4
 80068b4:	f003 fa52 	bl	8009d5c <frexpf>
  l = LOG10_2 * (C[0] * f * f * f + C[1] * f * f + C[2] * f + C[3] + e);
 80068b8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8006900 <log10_approx+0x54>
 80068bc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006904 <log10_approx+0x58>
 80068c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80068c4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80068c8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80068cc:	ee27 7a00 	vmul.f32	s14, s14, s0
 80068d0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80068d4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006908 <log10_approx+0x5c>
 80068d8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80068dc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800690c <log10_approx+0x60>
 80068e0:	ed9d 7a01 	vldr	s14, [sp, #4]
 80068e4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80068e8:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 80068ec:	ee77 7a80 	vadd.f32	s15, s15, s0
  return l;
  //return (l >= 0.0) ? l : 0.0;  // regard a negative value as featureless
}
 80068f0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8006910 <log10_approx+0x64>
 80068f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80068f8:	b003      	add	sp, #12
 80068fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80068fe:	bf00      	nop
 8006900:	c083caf5 	.word	0xc083caf5
 8006904:	3f9da1a8 	.word	0x3f9da1a8
 8006908:	40c0b3fb 	.word	0x40c0b3fb
 800690c:	404892e0 	.word	0x404892e0
 8006910:	3e9a209b 	.word	0x3e9a209b

08006914 <hann>:

// Hann window generation
void hann(int num) {
 8006914:	b570      	push	{r4, r5, r6, lr}
  arm_fill_f32(0.0f, hann_window, NN);
 8006916:	f44f 7100 	mov.w	r1, #512	; 0x200
void hann(int num) {
 800691a:	ed2d 8b02 	vpush	{d8}
 800691e:	4605      	mov	r5, r0
  arm_fill_f32(0.0f, hann_window, NN);
 8006920:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800696c <hann+0x58>
 8006924:	4812      	ldr	r0, [pc, #72]	; (8006970 <hann+0x5c>)
 8006926:	4e12      	ldr	r6, [pc, #72]	; (8006970 <hann+0x5c>)
 8006928:	f000 ff2c 	bl	8007784 <arm_fill_f32>
  float32_t scale = 2.0f * PI / (float32_t) num;
 800692c:	ee07 5a90 	vmov	s15, r5
 8006930:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006974 <hann+0x60>
 8006934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int n = 0; n < num; n++) {
 8006938:	2400      	movs	r4, #0
  float32_t scale = 2.0f * PI / (float32_t) num;
 800693a:	eec7 8a27 	vdiv.f32	s17, s14, s15
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 800693e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
  for (int n = 0; n < num; n++) {
 8006942:	42ac      	cmp	r4, r5
 8006944:	db02      	blt.n	800694c <hann+0x38>
  }
}
 8006946:	ecbd 8b02 	vpop	{d8}
 800694a:	bd70      	pop	{r4, r5, r6, pc}
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 800694c:	ee07 4a90 	vmov	s15, r4
 8006950:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  for (int n = 0; n < num; n++) {
 8006954:	3401      	adds	r4, #1
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 8006956:	ee20 0a28 	vmul.f32	s0, s0, s17
 800695a:	f002 f84d 	bl	80089f8 <arm_cos_f32>
 800695e:	eef0 7a48 	vmov.f32	s15, s16
 8006962:	eee0 7a48 	vfms.f32	s15, s0, s16
 8006966:	ece6 7a01 	vstmia	r6!, {s15}
 800696a:	e7ea      	b.n	8006942 <hann+0x2e>
 800696c:	00000000 	.word	0x00000000
 8006970:	20008540 	.word	0x20008540
 8006974:	40c90fdb 	.word	0x40c90fdb

08006978 <freq2mel>:

// Frequency in Hz to Mel-scale
float32_t freq2mel(float32_t hz) {
  return 2595.0f * log10(hz / 700.0f + 1.0f);
 8006978:	eddf 7a11 	vldr	s15, [pc, #68]	; 80069c0 <freq2mel+0x48>
 800697c:	ee80 0a27 	vdiv.f32	s0, s0, s15
float32_t freq2mel(float32_t hz) {
 8006980:	b508      	push	{r3, lr}
  return 2595.0f * log10(hz / 700.0f + 1.0f);
 8006982:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006986:	ee70 7a27 	vadd.f32	s15, s0, s15
 800698a:	ee17 0a90 	vmov	r0, s15
 800698e:	f7fc f8cb 	bl	8002b28 <__aeabi_f2d>
 8006992:	ec41 0b10 	vmov	d0, r0, r1
 8006996:	f005 f969 	bl	800bc6c <log10>
 800699a:	a307      	add	r3, pc, #28	; (adr r3, 80069b8 <freq2mel+0x40>)
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	ec51 0b10 	vmov	r0, r1, d0
 80069a4:	f7fc f914 	bl	8002bd0 <__aeabi_dmul>
 80069a8:	f7fc fbea 	bl	8003180 <__aeabi_d2f>
}
 80069ac:	ee00 0a10 	vmov	s0, r0
 80069b0:	bd08      	pop	{r3, pc}
 80069b2:	bf00      	nop
 80069b4:	f3af 8000 	nop.w
 80069b8:	00000000 	.word	0x00000000
 80069bc:	40a44600 	.word	0x40a44600
 80069c0:	442f0000 	.word	0x442f0000
 80069c4:	00000000 	.word	0x00000000

080069c8 <mel2freq>:

// Mel-scale to Frequency in Hz
float32_t mel2freq(float32_t mel) {
  return 700.0 * (pow(10.0, (mel / 2595.0f)) - 1.0f);
 80069c8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8006a10 <mel2freq+0x48>
 80069cc:	ee80 7a27 	vdiv.f32	s14, s0, s15
float32_t mel2freq(float32_t mel) {
 80069d0:	b508      	push	{r3, lr}
  return 700.0 * (pow(10.0, (mel / 2595.0f)) - 1.0f);
 80069d2:	ee17 0a10 	vmov	r0, s14
 80069d6:	f7fc f8a7 	bl	8002b28 <__aeabi_f2d>
 80069da:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8006a08 <mel2freq+0x40>
 80069de:	ec41 0b11 	vmov	d1, r0, r1
 80069e2:	f005 f9c3 	bl	800bd6c <pow>
 80069e6:	2200      	movs	r2, #0
 80069e8:	ec51 0b10 	vmov	r0, r1, d0
 80069ec:	4b09      	ldr	r3, [pc, #36]	; (8006a14 <mel2freq+0x4c>)
 80069ee:	f7fb ff3b 	bl	8002868 <__aeabi_dsub>
 80069f2:	2200      	movs	r2, #0
 80069f4:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <mel2freq+0x50>)
 80069f6:	f7fc f8eb 	bl	8002bd0 <__aeabi_dmul>
 80069fa:	f7fc fbc1 	bl	8003180 <__aeabi_d2f>
}
 80069fe:	ee00 0a10 	vmov	s0, r0
 8006a02:	bd08      	pop	{r3, pc}
 8006a04:	f3af 8000 	nop.w
 8006a08:	00000000 	.word	0x00000000
 8006a0c:	40240000 	.word	0x40240000
 8006a10:	45223000 	.word	0x45223000
 8006a14:	3ff00000 	.word	0x3ff00000
 8006a18:	4085e000 	.word	0x4085e000

08006a1c <generate_filters>:

// Generate Mel filter bank
void generate_filters(void) {
 8006a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a20:	ed2d 8b02 	vpush	{d8}
  const float32_t mel_min = 0.0f;
  float32_t mel_points[NUM_FILTERS + 2];
  float32_t hz_points[NUM_FILTERS + 2];
  float32_t f[NUM_FILTERS + 2];
  float32_t f_minus, f_center, f_plus;
  float32_t mel_max = freq2mel(nyq_fs);
 8006a24:	4b44      	ldr	r3, [pc, #272]	; (8006b38 <generate_filters+0x11c>)
  float32_t delta_mel = (mel_max - mel_min) / (NUM_FILTERS + 2);
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
    mel_points[m] = delta_mel * m;
    hz_points[m] = mel2freq(mel_points[m]);
    f[m] = floor((NN + 1) * hz_points[m] / fs);
 8006a26:	ed9f 8a45 	vldr	s16, [pc, #276]	; 8006b3c <generate_filters+0x120>
  float32_t mel_max = freq2mel(nyq_fs);
 8006a2a:	ed93 0a00 	vldr	s0, [r3]
    f[m] = floor((NN + 1) * hz_points[m] / fs);
 8006a2e:	4f44      	ldr	r7, [pc, #272]	; (8006b40 <generate_filters+0x124>)
void generate_filters(void) {
 8006a30:	b0ab      	sub	sp, #172	; 0xac
  float32_t mel_max = freq2mel(nyq_fs);
 8006a32:	f7ff ffa1 	bl	8006978 <freq2mel>
  float32_t delta_mel = (mel_max - mel_min) / (NUM_FILTERS + 2);
 8006a36:	eddf 7a43 	vldr	s15, [pc, #268]	; 8006b44 <generate_filters+0x128>
 8006a3a:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8006a3e:	466d      	mov	r5, sp
 8006a40:	466e      	mov	r6, sp
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8006a42:	2400      	movs	r4, #0
    mel_points[m] = delta_mel * m;
 8006a44:	ee07 4a90 	vmov	s15, r4
 8006a48:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8006a4c:	3401      	adds	r4, #1
    hz_points[m] = mel2freq(mel_points[m]);
 8006a4e:	ee20 0a28 	vmul.f32	s0, s0, s17
 8006a52:	f7ff ffb9 	bl	80069c8 <mel2freq>
    f[m] = floor((NN + 1) * hz_points[m] / fs);
 8006a56:	edd7 7a00 	vldr	s15, [r7]
 8006a5a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006a5e:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8006a62:	ee17 0a10 	vmov	r0, s14
 8006a66:	f7fc f85f 	bl	8002b28 <__aeabi_f2d>
 8006a6a:	ec41 0b10 	vmov	d0, r0, r1
 8006a6e:	f005 f827 	bl	800bac0 <floor>
 8006a72:	ec51 0b10 	vmov	r0, r1, d0
 8006a76:	f7fc fb83 	bl	8003180 <__aeabi_d2f>
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8006a7a:	2c2a      	cmp	r4, #42	; 0x2a
    f[m] = floor((NN + 1) * hz_points[m] / fs);
 8006a7c:	f846 0b04 	str.w	r0, [r6], #4
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8006a80:	d1e0      	bne.n	8006a44 <generate_filters+0x28>
 8006a82:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8006b4c <generate_filters+0x130>
 8006a86:	4e30      	ldr	r6, [pc, #192]	; (8006b48 <generate_filters+0x12c>)
 8006a88:	2380      	movs	r3, #128	; 0x80
 8006a8a:	f06f 0c03 	mvn.w	ip, #3
 8006a8e:	46f0      	mov	r8, lr
  }
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
    for (int k = 1; k < NN / 2; k++) {
      f_minus = f[m - 1];
 8006a90:	ed95 6a00 	vldr	s12, [r5]
      f_center = f[m];
 8006a94:	3504      	adds	r5, #4
      f_plus = f[m + 1];
      for (int k = f_minus; k < f_center; k++) {
 8006a96:	eefd 6ac6 	vcvt.s32.f32	s13, s12
      f_plus = f[m + 1];
 8006a9a:	edd5 7a01 	vldr	s15, [r5, #4]
      f_center = f[m];
 8006a9e:	ed95 7a00 	vldr	s14, [r5]
      for (int k = f_minus; k < f_center; k++) {
 8006aa2:	ee16 4a90 	vmov	r4, s13
      }
      for (int k = f_center; k <= f_plus; k++) {
        filterbank[m][k - (int) f_minus] = (f_plus - k) / (f_plus - f_center);
      }
      k_range[m][0] = (int) f_minus;
      k_range[m][1] = (int) f_plus - (int) f_minus + 1;
 8006aa6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      for (int k = f_center; k <= f_plus; k++) {
 8006aaa:	eefd 5ac7 	vcvt.s32.f32	s11, s14
      k_range[m][1] = (int) f_plus - (int) f_minus + 1;
 8006aae:	ee16 2a90 	vmov	r2, s13
 8006ab2:	1b12      	subs	r2, r2, r4
 8006ab4:	3201      	adds	r2, #1
 8006ab6:	fb0c 3904 	mla	r9, ip, r4, r3
 8006aba:	20ff      	movs	r0, #255	; 0xff
 8006abc:	eb0e 0703 	add.w	r7, lr, r3
      for (int k = f_minus; k < f_center; k++) {
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	ee06 1a90 	vmov	s13, r1
 8006ac6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006aca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad2:	dc19      	bgt.n	8006b08 <generate_filters+0xec>
 8006ad4:	ee15 1a90 	vmov	r1, s11
      for (int k = f_center; k <= f_plus; k++) {
 8006ad8:	ee06 1a90 	vmov	s13, r1
 8006adc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006ae0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae8:	da18      	bge.n	8006b1c <generate_filters+0x100>
    for (int k = 1; k < NN / 2; k++) {
 8006aea:	3801      	subs	r0, #1
      k_range[m][0] = (int) f_minus;
 8006aec:	60b4      	str	r4, [r6, #8]
      k_range[m][1] = (int) f_plus - (int) f_minus + 1;
 8006aee:	60f2      	str	r2, [r6, #12]
    for (int k = 1; k < NN / 2; k++) {
 8006af0:	d1e4      	bne.n	8006abc <generate_filters+0xa0>
 8006af2:	3380      	adds	r3, #128	; 0x80
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 8006af4:	f5b3 5fa4 	cmp.w	r3, #5248	; 0x1480
 8006af8:	f106 0608 	add.w	r6, r6, #8
 8006afc:	d1c8      	bne.n	8006a90 <generate_filters+0x74>
    }
  }
}
 8006afe:	b02b      	add	sp, #172	; 0xac
 8006b00:	ecbd 8b02 	vpop	{d8}
 8006b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        filterbank[m][k - (int) f_minus] = (k - f_minus) / (f_center - f_minus);
 8006b08:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006b0c:	ee77 4a46 	vsub.f32	s9, s14, s12
      for (int k = f_minus; k < f_center; k++) {
 8006b10:	3101      	adds	r1, #1
        filterbank[m][k - (int) f_minus] = (k - f_minus) / (f_center - f_minus);
 8006b12:	ee86 5aa4 	vdiv.f32	s10, s13, s9
 8006b16:	eca7 5a01 	vstmia	r7!, {s10}
 8006b1a:	e7d2      	b.n	8006ac2 <generate_filters+0xa6>
        filterbank[m][k - (int) f_minus] = (f_plus - k) / (f_plus - f_center);
 8006b1c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8006b20:	ee77 4ac7 	vsub.f32	s9, s15, s14
 8006b24:	eb09 0781 	add.w	r7, r9, r1, lsl #2
 8006b28:	ee86 5aa4 	vdiv.f32	s10, s13, s9
 8006b2c:	4447      	add	r7, r8
      for (int k = f_center; k <= f_plus; k++) {
 8006b2e:	3101      	adds	r1, #1
        filterbank[m][k - (int) f_minus] = (f_plus - k) / (f_plus - f_center);
 8006b30:	ed87 5a00 	vstr	s10, [r7]
 8006b34:	e7d0      	b.n	8006ad8 <generate_filters+0xbc>
 8006b36:	bf00      	nop
 8006b38:	20008ed0 	.word	0x20008ed0
 8006b3c:	44004000 	.word	0x44004000
 8006b40:	2000853c 	.word	0x2000853c
 8006b44:	42280000 	.word	0x42280000
 8006b48:	20008d40 	.word	0x20008d40
 8006b4c:	2000703c 	.word	0x2000703c

08006b50 <init_dsp>:

/*
 * DSP pipeline initialization
 */
void init_dsp(float32_t f_s) {
 8006b50:	b510      	push	{r4, lr}
 8006b52:	ed2d 8b02 	vpush	{d8}
  // Generate Hanning window
  hann(NN);
 8006b56:	f44f 7000 	mov.w	r0, #512	; 0x200
void init_dsp(float32_t f_s) {
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	eeb0 8a40 	vmov.f32	s16, s0
  hann(NN);
 8006b60:	f7ff fed8 	bl	8006914 <hann>
  fs = f_s;
 8006b64:	4b14      	ldr	r3, [pc, #80]	; (8006bb8 <init_dsp+0x68>)
  nyq_fs = f_s / 2.0;
  arm_rfft_fast_init_f32(&S, NN);
 8006b66:	4815      	ldr	r0, [pc, #84]	; (8006bbc <init_dsp+0x6c>)
  fs = f_s;
 8006b68:	ed83 8a00 	vstr	s16, [r3]
  nyq_fs = f_s / 2.0;
 8006b6c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006b70:	ee28 8a00 	vmul.f32	s16, s16, s0
 8006b74:	4b12      	ldr	r3, [pc, #72]	; (8006bc0 <init_dsp+0x70>)
  arm_fir_init_f32(&S_PRE, 2, fir_coefficients, state_buf, NN);
 8006b76:	f44f 7400 	mov.w	r4, #512	; 0x200
  arm_rfft_fast_init_f32(&S, NN);
 8006b7a:	f44f 7100 	mov.w	r1, #512	; 0x200
  nyq_fs = f_s / 2.0;
 8006b7e:	ed83 8a00 	vstr	s16, [r3]
  arm_rfft_fast_init_f32(&S, NN);
 8006b82:	f000 fee9 	bl	8007958 <arm_rfft_fast_init_f32>
  arm_fir_init_f32(&S_PRE, 2, fir_coefficients, state_buf, NN);
 8006b86:	9400      	str	r4, [sp, #0]
 8006b88:	4b0e      	ldr	r3, [pc, #56]	; (8006bc4 <init_dsp+0x74>)
 8006b8a:	4a0f      	ldr	r2, [pc, #60]	; (8006bc8 <init_dsp+0x78>)
 8006b8c:	480f      	ldr	r0, [pc, #60]	; (8006bcc <init_dsp+0x7c>)
 8006b8e:	2102      	movs	r1, #2
 8006b90:	f001 fbd4 	bl	800833c <arm_fir_init_f32>
  arm_fir_init_f32(&S_WPRE, 2, fir_w_coefficients, state_w_buf, NN);
 8006b94:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <init_dsp+0x80>)
 8006b96:	4a0f      	ldr	r2, [pc, #60]	; (8006bd4 <init_dsp+0x84>)
 8006b98:	480f      	ldr	r0, [pc, #60]	; (8006bd8 <init_dsp+0x88>)
 8006b9a:	9400      	str	r4, [sp, #0]
 8006b9c:	2102      	movs	r1, #2
 8006b9e:	f001 fbcd 	bl	800833c <arm_fir_init_f32>
  generate_filters();
 8006ba2:	f7ff ff3b 	bl	8006a1c <generate_filters>
#ifndef FEATURE_MFSC
  dct2_init_f32(&S_DCT, NUM_FILTERS);
 8006ba6:	480d      	ldr	r0, [pc, #52]	; (8006bdc <init_dsp+0x8c>)
 8006ba8:	2128      	movs	r1, #40	; 0x28
#endif
}
 8006baa:	b002      	add	sp, #8
 8006bac:	ecbd 8b02 	vpop	{d8}
 8006bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  dct2_init_f32(&S_DCT, NUM_FILTERS);
 8006bb4:	f7ff bc48 	b.w	8006448 <dct2_init_f32>
 8006bb8:	2000853c 	.word	0x2000853c
 8006bbc:	2000f1c4 	.word	0x2000f1c4
 8006bc0:	20008ed0 	.word	0x20008ed0
 8006bc4:	200096d4 	.word	0x200096d4
 8006bc8:	2000069c 	.word	0x2000069c
 8006bcc:	2000f1dc 	.word	0x2000f1dc
 8006bd0:	20009ed8 	.word	0x20009ed8
 8006bd4:	200006a4 	.word	0x200006a4
 8006bd8:	2000f1b8 	.word	0x2000f1b8
 8006bdc:	2000f194 	.word	0x2000f194

08006be0 <apply_pre_emphasis>:

//--- DSP pipeline functions -----------------------------//

// Apply pre-emphasis
void apply_pre_emphasis(float32_t *signal) {
 8006be0:	4602      	mov	r2, r0
  arm_fir_f32(&S_PRE, signal, signal, NN);
 8006be2:	4601      	mov	r1, r0
 8006be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006be8:	4801      	ldr	r0, [pc, #4]	; (8006bf0 <apply_pre_emphasis+0x10>)
 8006bea:	f001 bbb9 	b.w	8008360 <arm_fir_f32>
 8006bee:	bf00      	nop
 8006bf0:	2000f1dc 	.word	0x2000f1dc

08006bf4 <apply_weak_pre_emphasis>:
}

void apply_weak_pre_emphasis(float32_t *signal) {
 8006bf4:	4602      	mov	r2, r0
  arm_fir_f32(&S_WPRE, signal, signal, NN);
 8006bf6:	4601      	mov	r1, r0
 8006bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bfc:	4801      	ldr	r0, [pc, #4]	; (8006c04 <apply_weak_pre_emphasis+0x10>)
 8006bfe:	f001 bbaf 	b.w	8008360 <arm_fir_f32>
 8006c02:	bf00      	nop
 8006c04:	2000f1b8 	.word	0x2000f1b8

08006c08 <apply_ac_coupling>:
}

// AC coupling (to remove DC)
void apply_ac_coupling(float32_t *signal) {
 8006c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  float32_t mean;
  static float32_t mean_hist[NUM_MEANS] = { 0.0f };
  arm_copy_f32(mean_hist + 1, mean_hist, NUM_MEANS - 1);
 8006c0a:	4d0f      	ldr	r5, [pc, #60]	; (8006c48 <apply_ac_coupling+0x40>)
void apply_ac_coupling(float32_t *signal) {
 8006c0c:	4604      	mov	r4, r0
  arm_copy_f32(mean_hist + 1, mean_hist, NUM_MEANS - 1);
 8006c0e:	4629      	mov	r1, r5
 8006c10:	1d28      	adds	r0, r5, #4
 8006c12:	220f      	movs	r2, #15
 8006c14:	f000 fdd4 	bl	80077c0 <arm_copy_f32>
  arm_mean_f32(signal, NN, mean_hist + NUM_MEANS - 1);
 8006c18:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c22:	f000 fdfd 	bl	8007820 <arm_mean_f32>
  arm_mean_f32(signal, NUM_MEANS, &mean);
 8006c26:	aa01      	add	r2, sp, #4
 8006c28:	4620      	mov	r0, r4
 8006c2a:	2110      	movs	r1, #16
 8006c2c:	f000 fdf8 	bl	8007820 <arm_mean_f32>
  arm_offset_f32(signal, -mean, signal, NN);
 8006c30:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c38:	4621      	mov	r1, r4
 8006c3a:	eeb1 0a40 	vneg.f32	s0, s0
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f001 ff50 	bl	8008ae4 <arm_offset_f32>
}
 8006c44:	b003      	add	sp, #12
 8006c46:	bd30      	pop	{r4, r5, pc}
 8006c48:	20008e90 	.word	0x20008e90

08006c4c <apply_hann>:

// Apply Hann window
void apply_hann(float32_t *signal) {
  arm_mult_f32(signal, hann_window, signal, NN);
 8006c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c50:	4602      	mov	r2, r0
 8006c52:	4901      	ldr	r1, [pc, #4]	; (8006c58 <apply_hann+0xc>)
 8006c54:	f001 bf7c 	b.w	8008b50 <arm_mult_f32>
 8006c58:	20008540 	.word	0x20008540

08006c5c <apply_fft>:
}

// FFT
void apply_fft(float32_t *signal) {
 8006c5c:	b538      	push	{r3, r4, r5, lr}
  // Caution: arm_rfft_fast_f32() rewrites the 2nd arg (signal)
  arm_rfft_fast_f32(&S, signal, signal_buf, 0);
 8006c5e:	4c08      	ldr	r4, [pc, #32]	; (8006c80 <apply_fft+0x24>)
void apply_fft(float32_t *signal) {
 8006c60:	4605      	mov	r5, r0
  arm_rfft_fast_f32(&S, signal, signal_buf, 0);
 8006c62:	4622      	mov	r2, r4
 8006c64:	4601      	mov	r1, r0
 8006c66:	2300      	movs	r3, #0
 8006c68:	4806      	ldr	r0, [pc, #24]	; (8006c84 <apply_fft+0x28>)
 8006c6a:	f000 fef7 	bl	8007a5c <arm_rfft_fast_f32>
  arm_copy_f32(signal_buf, signal, NN);
 8006c6e:	4629      	mov	r1, r5
 8006c70:	4620      	mov	r0, r4
 8006c72:	f44f 7200 	mov.w	r2, #512	; 0x200
}
 8006c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  arm_copy_f32(signal_buf, signal, NN);
 8006c7a:	f000 bda1 	b.w	80077c0 <arm_copy_f32>
 8006c7e:	bf00      	nop
 8006c80:	20008ed4 	.word	0x20008ed4
 8006c84:	2000f1c4 	.word	0x2000f1c4

08006c88 <apply_psd>:

// PSD
void apply_psd(float32_t *signal) {
 8006c88:	b538      	push	{r3, r4, r5, lr}
  arm_cmplx_mag_f32(signal, signal_buf, NN / 2);
 8006c8a:	4c08      	ldr	r4, [pc, #32]	; (8006cac <apply_psd+0x24>)
void apply_psd(float32_t *signal) {
 8006c8c:	4605      	mov	r5, r0
  arm_cmplx_mag_f32(signal, signal_buf, NN / 2);
 8006c8e:	4621      	mov	r1, r4
 8006c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c94:	f001 fdc8 	bl	8008828 <arm_cmplx_mag_f32>
  arm_scale_f32(signal_buf, RECIPROCAL_NN, signal, NN / 2);
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ca0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8006cb0 <apply_psd+0x28>
}
 8006ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  arm_scale_f32(signal_buf, RECIPROCAL_NN, signal, NN / 2);
 8006ca8:	f001 bee6 	b.w	8008a78 <arm_scale_f32>
 8006cac:	20008ed4 	.word	0x20008ed4
 8006cb0:	3b000000 	.word	0x3b000000

08006cb4 <apply_psd_logscale>:

// PSD in logscale
void apply_psd_logscale(float32_t *signal) {
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	ed2d 8b02 	vpush	{d8}
 8006cbc:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (int n = 0; n < NN / 2; n++) {
    signal[n] = 20.0 * log10_approx(signal[n]);
 8006cc0:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
 8006cc4:	ed94 0a00 	vldr	s0, [r4]
 8006cc8:	f7ff fdf0 	bl	80068ac <log10_approx>
 8006ccc:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006cd0:	eca4 0a01 	vstmia	r4!, {s0}
  for (int n = 0; n < NN / 2; n++) {
 8006cd4:	42ac      	cmp	r4, r5
 8006cd6:	d1f5      	bne.n	8006cc4 <apply_psd_logscale+0x10>
  }
}
 8006cd8:	ecbd 8b02 	vpop	{d8}
 8006cdc:	bd38      	pop	{r3, r4, r5, pc}
	...

08006ce0 <apply_filterbank>:

// Apply mel filter bank
void apply_filterbank(float32_t *signal) {
 8006ce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  float32_t sum = 0.0f;
 8006ce4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8006d40 <apply_filterbank+0x60>
 8006ce8:	4f16      	ldr	r7, [pc, #88]	; (8006d44 <apply_filterbank+0x64>)
  int left_k, len;
  arm_fill_f32(0.0f, signal_buf, NN / 2);
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
    left_k = k_range[m][0];
    len = k_range[m][1];
 8006cea:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8006d48 <apply_filterbank+0x68>
    arm_dot_prod_f32(&signal[left_k], filterbank[m], len, &sum);
 8006cee:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8006d4c <apply_filterbank+0x6c>
void apply_filterbank(float32_t *signal) {
 8006cf2:	4606      	mov	r6, r0
  float32_t sum = 0.0f;
 8006cf4:	ad02      	add	r5, sp, #8
  arm_fill_f32(0.0f, signal_buf, NN / 2);
 8006cf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006cfa:	4812      	ldr	r0, [pc, #72]	; (8006d44 <apply_filterbank+0x64>)
  float32_t sum = 0.0f;
 8006cfc:	ed25 0a01 	vstmdb	r5!, {s0}
  arm_fill_f32(0.0f, signal_buf, NN / 2);
 8006d00:	f000 fd40 	bl	8007784 <arm_fill_f32>
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 8006d04:	2400      	movs	r4, #0
 8006d06:	3408      	adds	r4, #8
 8006d08:	f5b4 7fa4 	cmp.w	r4, #328	; 0x148
 8006d0c:	d107      	bne.n	8006d1e <apply_filterbank+0x3e>
    signal_buf[m - 1] = sum;
  }
  arm_copy_f32(signal_buf, signal, NUM_FILTERS);
 8006d0e:	2228      	movs	r2, #40	; 0x28
 8006d10:	4631      	mov	r1, r6
 8006d12:	480c      	ldr	r0, [pc, #48]	; (8006d44 <apply_filterbank+0x64>)
 8006d14:	f000 fd54 	bl	80077c0 <arm_copy_f32>
}
 8006d18:	b003      	add	sp, #12
 8006d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    arm_dot_prod_f32(&signal[left_k], filterbank[m], len, &sum);
 8006d1e:	f854 0008 	ldr.w	r0, [r4, r8]
    len = k_range[m][1];
 8006d22:	eb08 0204 	add.w	r2, r8, r4
    arm_dot_prod_f32(&signal[left_k], filterbank[m], len, &sum);
 8006d26:	462b      	mov	r3, r5
 8006d28:	6852      	ldr	r2, [r2, #4]
 8006d2a:	eb09 1104 	add.w	r1, r9, r4, lsl #4
 8006d2e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8006d32:	f7fc fbfd 	bl	8003530 <arm_dot_prod_f32>
    signal_buf[m - 1] = sum;
 8006d36:	9b01      	ldr	r3, [sp, #4]
 8006d38:	f847 3b04 	str.w	r3, [r7], #4
 8006d3c:	e7e3      	b.n	8006d06 <apply_filterbank+0x26>
 8006d3e:	bf00      	nop
 8006d40:	00000000 	.word	0x00000000
 8006d44:	20008ed4 	.word	0x20008ed4
 8006d48:	20008d40 	.word	0x20008d40
 8006d4c:	2000703c 	.word	0x2000703c

08006d50 <apply_filterbank_logscale>:

// Filtered PSD in logscale
void apply_filterbank_logscale(float32_t *signal) {
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	4604      	mov	r4, r0
 8006d54:	ed2d 8b02 	vpush	{d8}
 8006d58:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
  for (int n = 0; n < NUM_FILTERS; n++) {
    signal[n] = 20.0 * log10_approx(signal[n]);
 8006d5c:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
  for (int n = 0; n < NUM_FILTERS; n++) {
 8006d60:	42ac      	cmp	r4, r5
 8006d62:	d102      	bne.n	8006d6a <apply_filterbank_logscale+0x1a>
  }
}
 8006d64:	ecbd 8b02 	vpop	{d8}
 8006d68:	bd38      	pop	{r3, r4, r5, pc}
    signal[n] = 20.0 * log10_approx(signal[n]);
 8006d6a:	ed94 0a00 	vldr	s0, [r4]
 8006d6e:	f7ff fd9d 	bl	80068ac <log10_approx>
 8006d72:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006d76:	eca4 0a01 	vstmia	r4!, {s0}
 8006d7a:	e7f1      	b.n	8006d60 <apply_filterbank_logscale+0x10>

08006d7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006d7c:	b500      	push	{lr}
 8006d7e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d80:	2214      	movs	r2, #20
 8006d82:	2100      	movs	r1, #0
 8006d84:	a803      	add	r0, sp, #12
 8006d86:	f002 fa69 	bl	800925c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d8a:	4b18      	ldr	r3, [pc, #96]	; (8006dec <MX_GPIO_Init+0x70>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006d8c:	4818      	ldr	r0, [pc, #96]	; (8006df0 <MX_GPIO_Init+0x74>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d90:	f042 0204 	orr.w	r2, r2, #4
 8006d94:	64da      	str	r2, [r3, #76]	; 0x4c
 8006d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d98:	f002 0204 	and.w	r2, r2, #4
 8006d9c:	9200      	str	r2, [sp, #0]
 8006d9e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006da0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006da2:	f042 0201 	orr.w	r2, r2, #1
 8006da6:	64da      	str	r2, [r3, #76]	; 0x4c
 8006da8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006daa:	f002 0201 	and.w	r2, r2, #1
 8006dae:	9201      	str	r2, [sp, #4]
 8006db0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006db2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006db4:	f042 0202 	orr.w	r2, r2, #2
 8006db8:	64da      	str	r2, [r3, #76]	; 0x4c
 8006dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	9302      	str	r3, [sp, #8]
 8006dc2:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = B1_Pin;
 8006dc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006dc8:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006dca:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006dcc:	4b09      	ldr	r3, [pc, #36]	; (8006df4 <MX_GPIO_Init+0x78>)
 8006dce:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006dd0:	f7fd f850 	bl	8003e74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	2028      	movs	r0, #40	; 0x28
 8006dda:	f7fc fc3f 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006dde:	2028      	movs	r0, #40	; 0x28
 8006de0:	f7fc fc70 	bl	80036c4 <HAL_NVIC_EnableIRQ>

}
 8006de4:	b009      	add	sp, #36	; 0x24
 8006de6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006dea:	bf00      	nop
 8006dec:	40021000 	.word	0x40021000
 8006df0:	48000800 	.word	0x48000800
 8006df4:	10210000 	.word	0x10210000

08006df8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006df8:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8006dfa:	4812      	ldr	r0, [pc, #72]	; (8006e44 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x10909CEC;
 8006dfc:	4b12      	ldr	r3, [pc, #72]	; (8006e48 <MX_I2C1_Init+0x50>)
 8006dfe:	4913      	ldr	r1, [pc, #76]	; (8006e4c <MX_I2C1_Init+0x54>)
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e00:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x10909CEC;
 8006e02:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e0a:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e0c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006e0e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006e10:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e12:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e14:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006e16:	f7fd f9f1 	bl	80041fc <HAL_I2C_Init>
 8006e1a:	b108      	cbz	r0, 8006e20 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8006e1c:	f000 fb40 	bl	80074a0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006e20:	2100      	movs	r1, #0
 8006e22:	4808      	ldr	r0, [pc, #32]	; (8006e44 <MX_I2C1_Init+0x4c>)
 8006e24:	f7fd fad0 	bl	80043c8 <HAL_I2CEx_ConfigAnalogFilter>
 8006e28:	b108      	cbz	r0, 8006e2e <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8006e2a:	f000 fb39 	bl	80074a0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006e2e:	2100      	movs	r1, #0
 8006e30:	4804      	ldr	r0, [pc, #16]	; (8006e44 <MX_I2C1_Init+0x4c>)
 8006e32:	f7fd faef 	bl	8004414 <HAL_I2CEx_ConfigDigitalFilter>
 8006e36:	b118      	cbz	r0, 8006e40 <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 8006e38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006e3c:	f000 bb30 	b.w	80074a0 <Error_Handler>
 8006e40:	bd08      	pop	{r3, pc}
 8006e42:	bf00      	nop
 8006e44:	2000f1e8 	.word	0x2000f1e8
 8006e48:	10909cec 	.word	0x10909cec
 8006e4c:	40005400 	.word	0x40005400

08006e50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006e50:	b510      	push	{r4, lr}
 8006e52:	4604      	mov	r4, r0
 8006e54:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e56:	2214      	movs	r2, #20
 8006e58:	2100      	movs	r1, #0
 8006e5a:	a803      	add	r0, sp, #12
 8006e5c:	f002 f9fe 	bl	800925c <memset>
  if(i2cHandle->Instance==I2C1)
 8006e60:	6822      	ldr	r2, [r4, #0]
 8006e62:	4b13      	ldr	r3, [pc, #76]	; (8006eb0 <HAL_I2C_MspInit+0x60>)
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d121      	bne.n	8006eac <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e68:	4c12      	ldr	r4, [pc, #72]	; (8006eb4 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e6a:	4813      	ldr	r0, [pc, #76]	; (8006eb8 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e6c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006e6e:	f043 0302 	orr.w	r3, r3, #2
 8006e72:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006e74:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	9301      	str	r3, [sp, #4]
 8006e7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006e7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006e82:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e84:	2312      	movs	r3, #18
 8006e86:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e90:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e92:	2304      	movs	r3, #4
 8006e94:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e96:	f7fc ffed 	bl	8003e74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ea0:	65a3      	str	r3, [r4, #88]	; 0x58
 8006ea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ea8:	9302      	str	r3, [sp, #8]
 8006eaa:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006eac:	b008      	add	sp, #32
 8006eae:	bd10      	pop	{r4, pc}
 8006eb0:	40005400 	.word	0x40005400
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	48000400 	.word	0x48000400

08006ebc <write_command>:

/*
 * AQM1602XA-RN-GBW
 * LCD write command
 */
void write_command(uint8_t command) {
 8006ebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buf[2] = { 0x00, 0x00 };
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f88d 300c 	strb.w	r3, [sp, #12]
  buf[1] = command;
 8006ec4:	f88d 000d 	strb.w	r0, [sp, #13]
  HAL_I2C_Master_Transmit(phi2c, lcd_i2c_addr, buf, 2, 100);
 8006ec8:	2364      	movs	r3, #100	; 0x64
 8006eca:	4807      	ldr	r0, [pc, #28]	; (8006ee8 <write_command+0x2c>)
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	aa03      	add	r2, sp, #12
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	217c      	movs	r1, #124	; 0x7c
 8006ed4:	6800      	ldr	r0, [r0, #0]
 8006ed6:	f7fd f9e3 	bl	80042a0 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8006eda:	2001      	movs	r0, #1
 8006edc:	f7fc fb9e 	bl	800361c <HAL_Delay>
}
 8006ee0:	b005      	add	sp, #20
 8006ee2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ee6:	bf00      	nop
 8006ee8:	2000f234 	.word	0x2000f234

08006eec <write_data>:

/*
 * AQM1602XA-RN-GBW
 * LCD write data
 */
void write_data(uint8_t data) {
 8006eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buf[2] = { 0x40, 0x00 };
 8006eee:	2340      	movs	r3, #64	; 0x40
 8006ef0:	f88d 300c 	strb.w	r3, [sp, #12]
  buf[1] = data;
 8006ef4:	f88d 000d 	strb.w	r0, [sp, #13]
  HAL_I2C_Master_Transmit(phi2c, lcd_i2c_addr, buf, 2, 100);
 8006ef8:	2364      	movs	r3, #100	; 0x64
 8006efa:	4807      	ldr	r0, [pc, #28]	; (8006f18 <write_data+0x2c>)
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	aa03      	add	r2, sp, #12
 8006f00:	2302      	movs	r3, #2
 8006f02:	217c      	movs	r1, #124	; 0x7c
 8006f04:	6800      	ldr	r0, [r0, #0]
 8006f06:	f7fd f9cb 	bl	80042a0 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8006f0a:	2001      	movs	r0, #1
 8006f0c:	f7fc fb86 	bl	800361c <HAL_Delay>
}
 8006f10:	b005      	add	sp, #20
 8006f12:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f16:	bf00      	nop
 8006f18:	2000f234 	.word	0x2000f234

08006f1c <lcd_init>:

void lcd_init(I2C_HandleTypeDef *p_hi2c) {
 8006f1c:	b508      	push	{r3, lr}
  phi2c = p_hi2c;
 8006f1e:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <lcd_init+0x54>)
 8006f20:	6018      	str	r0, [r3, #0]
  HAL_Delay(50);
 8006f22:	2032      	movs	r0, #50	; 0x32
 8006f24:	f7fc fb7a 	bl	800361c <HAL_Delay>
  write_command(0x38);
 8006f28:	2038      	movs	r0, #56	; 0x38
 8006f2a:	f7ff ffc7 	bl	8006ebc <write_command>
  write_command(0x39);
 8006f2e:	2039      	movs	r0, #57	; 0x39
 8006f30:	f7ff ffc4 	bl	8006ebc <write_command>
  write_command(0x14);
 8006f34:	2014      	movs	r0, #20
 8006f36:	f7ff ffc1 	bl	8006ebc <write_command>
  write_command(0x73);  // Contrast: C3=0 C2=0 C1=1 C0=1
 8006f3a:	2073      	movs	r0, #115	; 0x73
 8006f3c:	f7ff ffbe 	bl	8006ebc <write_command>
  write_command(0x52);  // Contrast: BON=0 C5=1 C4=0
 8006f40:	2052      	movs	r0, #82	; 0x52
 8006f42:	f7ff ffbb 	bl	8006ebc <write_command>
  write_command(0x6c);
 8006f46:	206c      	movs	r0, #108	; 0x6c
 8006f48:	f7ff ffb8 	bl	8006ebc <write_command>
  HAL_Delay(250);
 8006f4c:	20fa      	movs	r0, #250	; 0xfa
 8006f4e:	f7fc fb65 	bl	800361c <HAL_Delay>
  write_command(0x38);
 8006f52:	2038      	movs	r0, #56	; 0x38
 8006f54:	f7ff ffb2 	bl	8006ebc <write_command>
  write_command(0x01);
 8006f58:	2001      	movs	r0, #1
 8006f5a:	f7ff ffaf 	bl	8006ebc <write_command>
  write_command(0x0c);
 8006f5e:	200c      	movs	r0, #12
 8006f60:	f7ff ffac 	bl	8006ebc <write_command>
  HAL_Delay(50);
 8006f64:	2032      	movs	r0, #50	; 0x32
}
 8006f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(50);
 8006f6a:	f7fc bb57 	b.w	800361c <HAL_Delay>
 8006f6e:	bf00      	nop
 8006f70:	2000f234 	.word	0x2000f234

08006f74 <lcd_clear>:

void lcd_clear(void) {
  write_command(0x01);
 8006f74:	2001      	movs	r0, #1
 8006f76:	f7ff bfa1 	b.w	8006ebc <write_command>

08006f7a <lcd_newline>:
}

void lcd_newline(void) {
  write_command(0xc0);
 8006f7a:	20c0      	movs	r0, #192	; 0xc0
 8006f7c:	f7ff bf9e 	b.w	8006ebc <write_command>

08006f80 <lcd_string>:

void lcd_move_right(void) {
  write_command(0x14);
}

void lcd_string(char *pbuf, uint8_t len) {
 8006f80:	3901      	subs	r1, #1
 8006f82:	b538      	push	{r3, r4, r5, lr}
 8006f84:	1e45      	subs	r5, r0, #1
 8006f86:	1844      	adds	r4, r0, r1
  uint8_t i;
  for(i=0; i<len; i++) {
 8006f88:	42a5      	cmp	r5, r4
 8006f8a:	d100      	bne.n	8006f8e <lcd_string+0xe>
    write_data((uint8_t)pbuf[i]);
  }
}
 8006f8c:	bd38      	pop	{r3, r4, r5, pc}
    write_data((uint8_t)pbuf[i]);
 8006f8e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8006f92:	f7ff ffab 	bl	8006eec <write_data>
 8006f96:	e7f7      	b.n	8006f88 <lcd_string+0x8>

08006f98 <dsp>:
#endif

/*
 * DSP pipeline
 */
void dsp(float32_t *s1, mode mode) {
 8006f98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006f9c:	460f      	mov	r7, r1
 8006f9e:	4604      	mov	r4, r0
  static int activity_cnt = 0;
  float32_t max_value;
  uint32_t max_index;
#endif

  start = HAL_GetTick();
 8006fa0:	f7fc fb36 	bl	8003610 <HAL_GetTick>
 8006fa4:	4606      	mov	r6, r0

  apply_ac_coupling(s1);  // remove DC
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f7ff fe2e 	bl	8006c08 <apply_ac_coupling>

  if (mode >= FFT) {
 8006fac:	2f01      	cmp	r7, #1
 8006fae:	4d2e      	ldr	r5, [pc, #184]	; (8007068 <dsp+0xd0>)
 8006fb0:	d90d      	bls.n	8006fce <dsp+0x36>
    apply_hann(s1);
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f7ff fe4a 	bl	8006c4c <apply_hann>
    apply_fft(s1);
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f7ff fe4f 	bl	8006c5c <apply_fft>
    apply_psd(s1);
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f7ff fe62 	bl	8006c88 <apply_psd>
    if (mode < FEATURES) {
 8006fc4:	2f03      	cmp	r7, #3
      apply_psd_logscale(s1);
 8006fc6:	4620      	mov	r0, r4
    if (mode < FEATURES) {
 8006fc8:	d80f      	bhi.n	8006fea <dsp+0x52>
      apply_psd_logscale(s1);
 8006fca:	f7ff fe73 	bl	8006cb4 <apply_psd_logscale>
        mfcc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
      }
#endif
    }
  }
  if (++pos >= 200)
 8006fce:	682b      	ldr	r3, [r5, #0]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	2bc7      	cmp	r3, #199	; 0xc7
    pos = 0;
 8006fd4:	bfc8      	it	gt
 8006fd6:	2300      	movgt	r3, #0
 8006fd8:	602b      	str	r3, [r5, #0]

  end = HAL_GetTick();
 8006fda:	f7fc fb19 	bl	8003610 <HAL_GetTick>
  elapsed_time = end - start;
 8006fde:	4b23      	ldr	r3, [pc, #140]	; (800706c <dsp+0xd4>)
 8006fe0:	1b80      	subs	r0, r0, r6
 8006fe2:	6018      	str	r0, [r3, #0]
}
 8006fe4:	b002      	add	sp, #8
 8006fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      apply_filterbank(s1);
 8006fea:	f7ff fe79 	bl	8006ce0 <apply_filterbank>
      apply_filterbank_logscale(s1);
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f7ff feae 	bl	8006d50 <apply_filterbank_logscale>
        mfsc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	4a1e      	ldr	r2, [pc, #120]	; (8007070 <dsp+0xd8>)
 8006ff8:	2728      	movs	r7, #40	; 0x28
 8006ffa:	4620      	mov	r0, r4
      for (int i = 0; i < NUM_FILTERS; i++) {
 8006ffc:	2100      	movs	r1, #0
        mfsc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
 8006ffe:	fb07 2303 	mla	r3, r7, r3, r2
 8007002:	ecf0 7a01 	vldmia	r0!, {s15}
 8007006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800700a:	ee17 2a90 	vmov	r2, s15
 800700e:	545a      	strb	r2, [r3, r1]
      for (int i = 0; i < NUM_FILTERS; i++) {
 8007010:	3101      	adds	r1, #1
 8007012:	2928      	cmp	r1, #40	; 0x28
 8007014:	d1f5      	bne.n	8007002 <dsp+0x6a>
      if (!start_inference) {
 8007016:	4a17      	ldr	r2, [pc, #92]	; (8007074 <dsp+0xdc>)
 8007018:	7810      	ldrb	r0, [r2, #0]
 800701a:	2800      	cmp	r0, #0
 800701c:	d1d7      	bne.n	8006fce <dsp+0x36>
        if (!active) {
 800701e:	4f16      	ldr	r7, [pc, #88]	; (8007078 <dsp+0xe0>)
 8007020:	f897 8000 	ldrb.w	r8, [r7]
 8007024:	f1b8 0f00 	cmp.w	r8, #0
 8007028:	d113      	bne.n	8007052 <dsp+0xba>
          arm_max_f32(s1, NUM_FILTERS, &max_value, &max_index);
 800702a:	ab01      	add	r3, sp, #4
 800702c:	466a      	mov	r2, sp
 800702e:	4620      	mov	r0, r4
 8007030:	f000 fc2a 	bl	8007888 <arm_max_f32>
          if (max_value > ACTIVITY_THRESHOLD) {
 8007034:	ed9d 7a00 	vldr	s14, [sp]
 8007038:	eefb 7a0e 	vmov.f32	s15, #190	; 0xc1f00000 -30.0
 800703c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007044:	ddc3      	ble.n	8006fce <dsp+0x36>
            active = true;
 8007046:	2301      	movs	r3, #1
 8007048:	703b      	strb	r3, [r7, #0]
            activity_cnt = 0;
 800704a:	4b0c      	ldr	r3, [pc, #48]	; (800707c <dsp+0xe4>)
 800704c:	f8c3 8000 	str.w	r8, [r3]
 8007050:	e7bd      	b.n	8006fce <dsp+0x36>
          if (++activity_cnt >= WINDOW_LENGTH) {
 8007052:	490a      	ldr	r1, [pc, #40]	; (800707c <dsp+0xe4>)
 8007054:	680b      	ldr	r3, [r1, #0]
 8007056:	3301      	adds	r3, #1
 8007058:	2b3f      	cmp	r3, #63	; 0x3f
 800705a:	600b      	str	r3, [r1, #0]
            start_inference = true;
 800705c:	bf82      	ittt	hi
 800705e:	2301      	movhi	r3, #1
            active = false;
 8007060:	7038      	strbhi	r0, [r7, #0]
            start_inference = true;
 8007062:	7013      	strbhi	r3, [r2, #0]
 8007064:	e7b3      	b.n	8006fce <dsp+0x36>
 8007066:	bf00      	nop
 8007068:	2000c630 	.word	0x2000c630
 800706c:	2000a6e8 	.word	0x2000a6e8
 8007070:	2000a6ec 	.word	0x2000a6ec
 8007074:	2000c635 	.word	0x2000c635
 8007078:	2000a6dc 	.word	0x2000a6dc
 800707c:	2000a6e0 	.word	0x2000a6e0

08007080 <overlap_dsp>:
 *       [a1|b0]      b(1/2) ... 13.2msec
 *          [b0|b1]   b(2/2) ... 13.2msec
 * --- overlap dsp -------------
 *             :
 */
void overlap_dsp(float32_t *buf, mode mode) {
 8007080:	b530      	push	{r4, r5, lr}
 8007082:	f6ad 0d04 	subw	sp, sp, #2052	; 0x804
 8007086:	4605      	mov	r5, r0
 8007088:	460c      	mov	r4, r1

  float32_t signal[NN] = { 0.0f };
 800708a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800708e:	2100      	movs	r1, #0
 8007090:	4668      	mov	r0, sp
 8007092:	f002 f8e3 	bl	800925c <memset>

  arm_copy_f32(buf, signal, NN);
 8007096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800709a:	4669      	mov	r1, sp
 800709c:	4628      	mov	r0, r5
 800709e:	f000 fb8f 	bl	80077c0 <arm_copy_f32>
  dsp(signal, mode);  // (1/2)
 80070a2:	4621      	mov	r1, r4
 80070a4:	4668      	mov	r0, sp
 80070a6:	f7ff ff77 	bl	8006f98 <dsp>
  if (printing) {
    printing = uart_tx(signal, mode, false);  // false: UART output pending
  }
#endif

  arm_copy_f32(buf + NN_HALF, signal, NN);
 80070aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ae:	4669      	mov	r1, sp
 80070b0:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80070b4:	f000 fb84 	bl	80077c0 <arm_copy_f32>
  dsp(signal, mode);  // (2/2)
 80070b8:	4621      	mov	r1, r4
 80070ba:	4668      	mov	r0, sp
 80070bc:	f7ff ff6c 	bl	8006f98 <dsp>
#ifndef INFERENCE
  if (printing) {
    printing = uart_tx(signal, mode, true);  // true: UART output
  }
#endif
}
 80070c0:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
 80070c4:	bd30      	pop	{r4, r5, pc}
	...

080070c8 <dump>:

/*
 * Dump debug info
 */
void dump(void) {
 80070c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (debug_output != DISABLED) {
 80070cc:	4d1e      	ldr	r5, [pc, #120]	; (8007148 <dump+0x80>)
 80070ce:	782b      	ldrb	r3, [r5, #0]
 80070d0:	b13b      	cbz	r3, 80070e2 <dump+0x1a>
    switch (debug_output) {
 80070d2:	782b      	ldrb	r3, [r5, #0]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d005      	beq.n	80070e6 <dump+0x1e>
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d02b      	beq.n	8007136 <dump+0x6e>
      printf("mode: %d, elapsed_time: %lu(msec)\n", output_mode, elapsed_time);
      break;
    default:
      break;
    }
    debug_output = DISABLED;
 80070de:	2300      	movs	r3, #0
 80070e0:	702b      	strb	r3, [r5, #0]
 80070e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        printf("%d:%d,", k_range[m][0], k_range[m][1]);
 80070e6:	4f19      	ldr	r7, [pc, #100]	; (800714c <dump+0x84>)
 80070e8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007160 <dump+0x98>
 80070ec:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8007164 <dump+0x9c>
    switch (debug_output) {
 80070f0:	2400      	movs	r4, #0
        printf("%d:%d,", k_range[m][0], k_range[m][1]);
 80070f2:	19e3      	adds	r3, r4, r7
 80070f4:	59e1      	ldr	r1, [r4, r7]
 80070f6:	685a      	ldr	r2, [r3, #4]
          printf("%.3f,", filterbank[m][n]);
 80070f8:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8007168 <dump+0xa0>
        printf("%d:%d,", k_range[m][0], k_range[m][1]);
 80070fc:	4650      	mov	r0, sl
 80070fe:	f002 fd8d 	bl	8009c1c <iprintf>
 8007102:	eb09 1804 	add.w	r8, r9, r4, lsl #4
        for (int n = 0; n < FILTER_LENGTH; n++) {
 8007106:	2600      	movs	r6, #0
          printf("%.3f,", filterbank[m][n]);
 8007108:	f858 0b04 	ldr.w	r0, [r8], #4
 800710c:	f7fb fd0c 	bl	8002b28 <__aeabi_f2d>
        for (int n = 0; n < FILTER_LENGTH; n++) {
 8007110:	3601      	adds	r6, #1
          printf("%.3f,", filterbank[m][n]);
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4658      	mov	r0, fp
 8007118:	f002 fd80 	bl	8009c1c <iprintf>
        for (int n = 0; n < FILTER_LENGTH; n++) {
 800711c:	2e20      	cmp	r6, #32
 800711e:	d1f3      	bne.n	8007108 <dump+0x40>
        printf("\n");
 8007120:	200a      	movs	r0, #10
 8007122:	3408      	adds	r4, #8
 8007124:	f002 fd92 	bl	8009c4c <putchar>
      for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8007128:	f5b4 7fa8 	cmp.w	r4, #336	; 0x150
 800712c:	d1e1      	bne.n	80070f2 <dump+0x2a>
      printf("e\n");
 800712e:	4808      	ldr	r0, [pc, #32]	; (8007150 <dump+0x88>)
 8007130:	f002 fdfc 	bl	8009d2c <puts>
 8007134:	e7d3      	b.n	80070de <dump+0x16>
      printf("mode: %d, elapsed_time: %lu(msec)\n", output_mode, elapsed_time);
 8007136:	4b07      	ldr	r3, [pc, #28]	; (8007154 <dump+0x8c>)
 8007138:	4807      	ldr	r0, [pc, #28]	; (8007158 <dump+0x90>)
 800713a:	7819      	ldrb	r1, [r3, #0]
 800713c:	4b07      	ldr	r3, [pc, #28]	; (800715c <dump+0x94>)
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	f002 fd6c 	bl	8009c1c <iprintf>
 8007144:	e7cb      	b.n	80070de <dump+0x16>
 8007146:	bf00      	nop
 8007148:	2000a6e4 	.word	0x2000a6e4
 800714c:	20008d40 	.word	0x20008d40
 8007150:	080283c0 	.word	0x080283c0
 8007154:	200006ae 	.word	0x200006ae
 8007158:	08028431 	.word	0x08028431
 800715c:	2000a6e8 	.word	0x2000a6e8
 8007160:	08028424 	.word	0x08028424
 8007164:	2000703c 	.word	0x2000703c
 8007168:	0802842b 	.word	0x0802842b

0800716c <pre_emphasis>:

/*
 * Apply pre emphasis
 */
void pre_emphasis(float32_t *signal, int direction) {
  if (pre_emphasis_enabled) {
 800716c:	4a07      	ldr	r2, [pc, #28]	; (800718c <pre_emphasis+0x20>)
 800716e:	7812      	ldrb	r2, [r2, #0]
void pre_emphasis(float32_t *signal, int direction) {
 8007170:	4603      	mov	r3, r0
  if (pre_emphasis_enabled) {
 8007172:	b152      	cbz	r2, 800718a <pre_emphasis+0x1e>
    if (beam_forming_mode == ENDFIRE && direction != 2) {
 8007174:	4a06      	ldr	r2, [pc, #24]	; (8007190 <pre_emphasis+0x24>)
 8007176:	7812      	ldrb	r2, [r2, #0]
 8007178:	2a01      	cmp	r2, #1
 800717a:	d103      	bne.n	8007184 <pre_emphasis+0x18>
 800717c:	2902      	cmp	r1, #2
 800717e:	d001      	beq.n	8007184 <pre_emphasis+0x18>
      apply_weak_pre_emphasis(signal);
 8007180:	f7ff bd38 	b.w	8006bf4 <apply_weak_pre_emphasis>
    } else {
      apply_pre_emphasis(signal);
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff bd2b 	b.w	8006be0 <apply_pre_emphasis>
 800718a:	4770      	bx	lr
 800718c:	200006af 	.word	0x200006af
 8007190:	200006ad 	.word	0x200006ad

08007194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007194:	b500      	push	{lr}
 8007196:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007198:	2244      	movs	r2, #68	; 0x44
 800719a:	2100      	movs	r1, #0
 800719c:	a805      	add	r0, sp, #20
 800719e:	f002 f85d 	bl	800925c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071a2:	2214      	movs	r2, #20
 80071a4:	2100      	movs	r1, #0
 80071a6:	4668      	mov	r0, sp
 80071a8:	f002 f858 	bl	800925c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80071ac:	2288      	movs	r2, #136	; 0x88
 80071ae:	2100      	movs	r1, #0
 80071b0:	a816      	add	r0, sp, #88	; 0x58
 80071b2:	f002 f853 	bl	800925c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80071b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071ba:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80071bc:	2210      	movs	r2, #16
 80071be:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 80071c0:	2201      	movs	r2, #1
 80071c2:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80071c4:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80071c6:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 80071c8:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071ca:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80071cc:	2207      	movs	r2, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80071ce:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071d0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80071d2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80071d4:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80071d6:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80071d8:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071da:	f7fd fa15 	bl	8004608 <HAL_RCC_OscConfig>
 80071de:	b100      	cbz	r0, 80071e2 <SystemClock_Config+0x4e>
 80071e0:	e7fe      	b.n	80071e0 <SystemClock_Config+0x4c>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80071e2:	220f      	movs	r2, #15
 80071e4:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80071e6:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80071e8:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80071ea:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80071ec:	2104      	movs	r1, #4
 80071ee:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80071f0:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80071f4:	f7fd fc2e 	bl	8004a54 <HAL_RCC_ClockConfig>
 80071f8:	b100      	cbz	r0, 80071fc <SystemClock_Config+0x68>
 80071fa:	e7fe      	b.n	80071fa <SystemClock_Config+0x66>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80071fc:	4b09      	ldr	r3, [pc, #36]	; (8007224 <SystemClock_Config+0x90>)
                              |RCC_PERIPHCLK_DFSDM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80071fe:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007200:	902a      	str	r0, [sp, #168]	; 0xa8
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8007202:	9036      	str	r0, [sp, #216]	; 0xd8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007204:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8007206:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007208:	f7fd fde6 	bl	8004dd8 <HAL_RCCEx_PeriphCLKConfig>
 800720c:	b100      	cbz	r0, 8007210 <SystemClock_Config+0x7c>
 800720e:	e7fe      	b.n	800720e <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007210:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007214:	f7fd f92c 	bl	8004470 <HAL_PWREx_ControlVoltageScaling>
 8007218:	b100      	cbz	r0, 800721c <SystemClock_Config+0x88>
 800721a:	e7fe      	b.n	800721a <SystemClock_Config+0x86>
  {
    Error_Handler();
  }
}
 800721c:	b039      	add	sp, #228	; 0xe4
 800721e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007222:	bf00      	nop
 8007224:	00010042 	.word	0x00010042

08007228 <main>:
{
 8007228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722c:	f5ad 5de0 	sub.w	sp, sp, #7168	; 0x1c00
  int32_t input_buf_l[NN * 2] = { 0 };
 8007230:	f50d 6440 	add.w	r4, sp, #3072	; 0xc00
 8007234:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007238:	2100      	movs	r1, #0
 800723a:	4620      	mov	r0, r4
 800723c:	f002 f80e 	bl	800925c <memset>
  float32_t signal_buf[NN + NN / 2] = { 0.0f };  // NN/2 overlap
 8007240:	2100      	movs	r1, #0
 8007242:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8007246:	4668      	mov	r0, sp
 8007248:	f002 f808 	bl	800925c <memset>
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 800724c:	4d45      	ldr	r5, [pc, #276]	; (8007364 <main+0x13c>)
  HAL_Init();
 800724e:	f7fc f9c1 	bl	80035d4 <HAL_Init>
  SystemClock_Config();
 8007252:	f7ff ff9f 	bl	8007194 <SystemClock_Config>
  MX_GPIO_Init();
 8007256:	f7ff fd91 	bl	8006d7c <MX_GPIO_Init>
  MX_DMA_Init();
 800725a:	f7ff fae5 	bl	8006828 <MX_DMA_Init>
  MX_DAC1_Init();
 800725e:	f7ff f853 	bl	8006308 <MX_DAC1_Init>
  MX_TIM6_Init();
 8007262:	f000 f9bb 	bl	80075dc <MX_TIM6_Init>
  MX_DFSDM1_Init();
 8007266:	f7ff f99d 	bl	80065a4 <MX_DFSDM1_Init>
  MX_CRC_Init();
 800726a:	f7ff f821 	bl	80062b0 <MX_CRC_Init>
  MX_I2C1_Init();
 800726e:	f7ff fdc3 	bl	8006df8 <MX_I2C1_Init>
  MX_X_CUBE_AI_Init();
 8007272:	f7fe fee1 	bl	8006038 <MX_X_CUBE_AI_Init>
  f_s = SystemCoreClock / hdfsdm1_channel2.Init.OutputClock.Divider
 8007276:	4b3c      	ldr	r3, [pc, #240]	; (8007368 <main+0x140>)
 8007278:	4a3c      	ldr	r2, [pc, #240]	; (800736c <main+0x144>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68d2      	ldr	r2, [r2, #12]
 800727e:	fbb3 f3f2 	udiv	r3, r3, r2
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 8007282:	6a2a      	ldr	r2, [r5, #32]
 8007284:	fbb3 f3f2 	udiv	r3, r3, r2
      / hdfsdm1_filter0.Init.FilterParam.IntOversampling;
 8007288:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800728a:	fbb3 f3f2 	udiv	r3, r3, r2
 800728e:	ee00 3a10 	vmov	s0, r3
  init_dsp(f_s);
 8007292:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8007296:	f7ff fc5b 	bl	8006b50 <init_dsp>
  HAL_TIM_Base_Start(&htim6);
 800729a:	4835      	ldr	r0, [pc, #212]	; (8007370 <main+0x148>)
 800729c:	f7fd ff84 	bl	80051a8 <HAL_TIM_Base_Start>
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, input_buf_l, NN * 2) != HAL_OK) {
 80072a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072a4:	4621      	mov	r1, r4
 80072a6:	4628      	mov	r0, r5
 80072a8:	f7fc fc82 	bl	8003bb0 <HAL_DFSDM_FilterRegularStart_DMA>
 80072ac:	b100      	cbz	r0, 80072b0 <main+0x88>
 80072ae:	e7fe      	b.n	80072ae <main+0x86>
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 80072b0:	2201      	movs	r2, #1
 80072b2:	4930      	ldr	r1, [pc, #192]	; (8007374 <main+0x14c>)
 80072b4:	4830      	ldr	r0, [pc, #192]	; (8007378 <main+0x150>)
    if (new_pcm_data_l_a) {  // 1st half of the buffer
 80072b6:	4d31      	ldr	r5, [pc, #196]	; (800737c <main+0x154>)
      pre_emphasis(signal_buf + NN_HALF, angle);
 80072b8:	4e31      	ldr	r6, [pc, #196]	; (8007380 <main+0x158>)
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 80072ba:	f7fe f84b 	bl	8005354 <HAL_UART_Receive_IT>
 80072be:	462f      	mov	r7, r5
    if (new_pcm_data_l_a) {  // 1st half of the buffer
 80072c0:	782b      	ldrb	r3, [r5, #0]
 80072c2:	b30b      	cbz	r3, 8007308 <main+0xe0>
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 80072c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072c8:	4669      	mov	r1, sp
 80072ca:	f50d 6000 	add.w	r0, sp, #2048	; 0x800
 80072ce:	f000 fa77 	bl	80077c0 <arm_copy_f32>
 80072d2:	f50d 6180 	add.w	r1, sp, #1024	; 0x400
      for (uint32_t n = 0; n < NN; n++) {
 80072d6:	2200      	movs	r2, #0
 80072d8:	4608      	mov	r0, r1
        signal_buf[n+NN_HALF] = (float32_t) (input_buf_l[n] >> 9);
 80072da:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 80072de:	125b      	asrs	r3, r3, #9
 80072e0:	ee07 3a90 	vmov	s15, r3
      for (uint32_t n = 0; n < NN; n++) {
 80072e4:	3201      	adds	r2, #1
        signal_buf[n+NN_HALF] = (float32_t) (input_buf_l[n] >> 9);
 80072e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for (uint32_t n = 0; n < NN; n++) {
 80072ea:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
        signal_buf[n+NN_HALF] = (float32_t) (input_buf_l[n] >> 9);
 80072ee:	ece1 7a01 	vstmia	r1!, {s15}
      for (uint32_t n = 0; n < NN; n++) {
 80072f2:	d1f2      	bne.n	80072da <main+0xb2>
      pre_emphasis(signal_buf + NN_HALF, angle);
 80072f4:	7831      	ldrb	r1, [r6, #0]
 80072f6:	f7ff ff39 	bl	800716c <pre_emphasis>
      overlap_dsp(signal_buf, output_mode);
 80072fa:	4b22      	ldr	r3, [pc, #136]	; (8007384 <main+0x15c>)
 80072fc:	4668      	mov	r0, sp
 80072fe:	7819      	ldrb	r1, [r3, #0]
 8007300:	f7ff febe 	bl	8007080 <overlap_dsp>
      new_pcm_data_l_a = false;
 8007304:	2300      	movs	r3, #0
 8007306:	703b      	strb	r3, [r7, #0]
    if (new_pcm_data_l_b) {  // 2nd half of the buffer
 8007308:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8007388 <main+0x160>
 800730c:	f898 3000 	ldrb.w	r3, [r8]
 8007310:	b31b      	cbz	r3, 800735a <main+0x132>
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 8007312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007316:	4669      	mov	r1, sp
 8007318:	f50d 6000 	add.w	r0, sp, #2048	; 0x800
 800731c:	f000 fa50 	bl	80077c0 <arm_copy_f32>
 8007320:	f50d 6180 	add.w	r1, sp, #1024	; 0x400
 8007324:	2200      	movs	r2, #0
 8007326:	4608      	mov	r0, r1
        signal_buf[n+NN_HALF] = (float32_t) (input_buf_l[NN+n] >> 9);
 8007328:	18a3      	adds	r3, r4, r2
 800732a:	3204      	adds	r2, #4
 800732c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8007330:	125b      	asrs	r3, r3, #9
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for (uint32_t n = 0; n < NN; n++) {
 800733a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
        signal_buf[n+NN_HALF] = (float32_t) (input_buf_l[NN+n] >> 9);
 800733e:	ece1 7a01 	vstmia	r1!, {s15}
      for (uint32_t n = 0; n < NN; n++) {
 8007342:	d1f1      	bne.n	8007328 <main+0x100>
      pre_emphasis(signal_buf + NN_HALF, angle);
 8007344:	7831      	ldrb	r1, [r6, #0]
 8007346:	f7ff ff11 	bl	800716c <pre_emphasis>
      overlap_dsp(signal_buf, output_mode);
 800734a:	4b0e      	ldr	r3, [pc, #56]	; (8007384 <main+0x15c>)
 800734c:	4668      	mov	r0, sp
 800734e:	7819      	ldrb	r1, [r3, #0]
 8007350:	f7ff fe96 	bl	8007080 <overlap_dsp>
      new_pcm_data_l_b = false;
 8007354:	2300      	movs	r3, #0
 8007356:	f888 3000 	strb.w	r3, [r8]
    dump();
 800735a:	f7ff feb5 	bl	80070c8 <dump>
  MX_X_CUBE_AI_Process();
 800735e:	f7fe fe77 	bl	8006050 <MX_X_CUBE_AI_Process>
    if (new_pcm_data_l_a) {  // 1st half of the buffer
 8007362:	e7ad      	b.n	80072c0 <main+0x98>
 8007364:	2000efec 	.word	0x2000efec
 8007368:	200006b0 	.word	0x200006b0
 800736c:	2000f15c 	.word	0x2000f15c
 8007370:	2000f23c 	.word	0x2000f23c
 8007374:	2000f238 	.word	0x2000f238
 8007378:	2000f2c4 	.word	0x2000f2c4
 800737c:	2000c62c 	.word	0x2000c62c
 8007380:	200006ac 	.word	0x200006ac
 8007384:	200006ae 	.word	0x200006ae
 8007388:	2000c62d 	.word	0x2000c62d

0800738c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
 * @param  hdfsdm_filter DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
  if (!new_pcm_data_l_a && (hdfsdm_filter == &hdfsdm1_filter0)) {
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>)
 800738e:	781a      	ldrb	r2, [r3, #0]
 8007390:	b922      	cbnz	r2, 800739c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x10>
 8007392:	4a05      	ldr	r2, [pc, #20]	; (80073a8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8007394:	4290      	cmp	r0, r2
    new_pcm_data_l_a = true;  // ready for 1st half of the buffer
 8007396:	bf04      	itt	eq
 8007398:	2201      	moveq	r2, #1
 800739a:	701a      	strbeq	r2, [r3, #0]
  }
  if (!new_pcm_data_r_a && (hdfsdm_filter == &hdfsdm1_filter1)) {
 800739c:	4b03      	ldr	r3, [pc, #12]	; (80073ac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x20>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	2000c62c 	.word	0x2000c62c
 80073a8:	2000efec 	.word	0x2000efec
 80073ac:	2000c62e 	.word	0x2000c62e

080073b0 <HAL_DFSDM_FilterRegConvCpltCallback>:
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
  if (!new_pcm_data_l_b && (hdfsdm_filter == &hdfsdm1_filter0)) {
 80073b0:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>)
 80073b2:	781a      	ldrb	r2, [r3, #0]
 80073b4:	b922      	cbnz	r2, 80073c0 <HAL_DFSDM_FilterRegConvCpltCallback+0x10>
 80073b6:	4a05      	ldr	r2, [pc, #20]	; (80073cc <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 80073b8:	4290      	cmp	r0, r2
    new_pcm_data_l_b = true;  // ready for 2nd half of the buffer
 80073ba:	bf04      	itt	eq
 80073bc:	2201      	moveq	r2, #1
 80073be:	701a      	strbeq	r2, [r3, #0]
  }
  if (!new_pcm_data_r_b && (hdfsdm_filter == &hdfsdm1_filter1)) {
 80073c0:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <HAL_DFSDM_FilterRegConvCpltCallback+0x20>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	2000c62d 	.word	0x2000c62d
 80073cc:	2000efec 	.word	0x2000efec
 80073d0:	2000c62f 	.word	0x2000c62f

080073d4 <_write>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
int _write(int file, char *ptr, int len) {
 80073d4:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 80073d6:	f04f 33ff 	mov.w	r3, #4294967295
int _write(int file, char *ptr, int len) {
 80073da:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 80073dc:	4802      	ldr	r0, [pc, #8]	; (80073e8 <_write+0x14>)
 80073de:	b292      	uxth	r2, r2
 80073e0:	f7fe fb21 	bl	8005a26 <HAL_UART_Transmit>
  return len;
}
 80073e4:	4620      	mov	r0, r4
 80073e6:	bd10      	pop	{r4, pc}
 80073e8:	2000f2c4 	.word	0x2000f2c4

080073ec <HAL_GPIO_EXTI_Callback>:

//  (This func is commented out: for a debug purpose only)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80073ec:	4770      	bx	lr
	...

080073f0 <HAL_UART_RxCpltCallback>:
 * One-byte command reception from an application processor
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
  char cmd;

  cmd = rxbuf[0];
 80073f0:	4b23      	ldr	r3, [pc, #140]	; (8007480 <HAL_UART_RxCpltCallback+0x90>)
 80073f2:	781b      	ldrb	r3, [r3, #0]

  switch (cmd) {
 80073f4:	2b63      	cmp	r3, #99	; 0x63
 80073f6:	d036      	beq.n	8007466 <HAL_UART_RxCpltCallback+0x76>
 80073f8:	d815      	bhi.n	8007426 <HAL_UART_RxCpltCallback+0x36>
 80073fa:	2b52      	cmp	r3, #82	; 0x52
 80073fc:	d037      	beq.n	800746e <HAL_UART_RxCpltCallback+0x7e>
 80073fe:	d80a      	bhi.n	8007416 <HAL_UART_RxCpltCallback+0x26>
 8007400:	2b4c      	cmp	r3, #76	; 0x4c
 8007402:	d02b      	beq.n	800745c <HAL_UART_RxCpltCallback+0x6c>
 8007404:	2b50      	cmp	r3, #80	; 0x50
 8007406:	d021      	beq.n	800744c <HAL_UART_RxCpltCallback+0x5c>
  case 't':
    debug_output = ELAPSED_TIME;
    break;
    // The others
  default:
    output_mode = (mode) (cmd - 0x30);
 8007408:	4a1e      	ldr	r2, [pc, #120]	; (8007484 <HAL_UART_RxCpltCallback+0x94>)
 800740a:	3b30      	subs	r3, #48	; 0x30
 800740c:	b2db      	uxtb	r3, r3
 800740e:	7013      	strb	r3, [r2, #0]
    printing = true;
 8007410:	2201      	movs	r2, #1
 8007412:	4b1d      	ldr	r3, [pc, #116]	; (8007488 <HAL_UART_RxCpltCallback+0x98>)
 8007414:	e01c      	b.n	8007450 <HAL_UART_RxCpltCallback+0x60>
  switch (cmd) {
 8007416:	2b5d      	cmp	r3, #93	; 0x5d
 8007418:	d02e      	beq.n	8007478 <HAL_UART_RxCpltCallback+0x88>
 800741a:	2b62      	cmp	r3, #98	; 0x62
 800741c:	d029      	beq.n	8007472 <HAL_UART_RxCpltCallback+0x82>
 800741e:	2b5b      	cmp	r3, #91	; 0x5b
 8007420:	d1f2      	bne.n	8007408 <HAL_UART_RxCpltCallback+0x18>
    beam_forming_mode = LEFT_MIC_ONLY;
 8007422:	2202      	movs	r2, #2
 8007424:	e026      	b.n	8007474 <HAL_UART_RxCpltCallback+0x84>
  switch (cmd) {
 8007426:	2b6c      	cmp	r3, #108	; 0x6c
 8007428:	d01b      	beq.n	8007462 <HAL_UART_RxCpltCallback+0x72>
 800742a:	d807      	bhi.n	800743c <HAL_UART_RxCpltCallback+0x4c>
 800742c:	2b65      	cmp	r3, #101	; 0x65
 800742e:	f04f 0201 	mov.w	r2, #1
 8007432:	d01f      	beq.n	8007474 <HAL_UART_RxCpltCallback+0x84>
 8007434:	2b66      	cmp	r3, #102	; 0x66
 8007436:	d1e7      	bne.n	8007408 <HAL_UART_RxCpltCallback+0x18>
    debug_output = ELAPSED_TIME;
 8007438:	4b14      	ldr	r3, [pc, #80]	; (800748c <HAL_UART_RxCpltCallback+0x9c>)
 800743a:	e009      	b.n	8007450 <HAL_UART_RxCpltCallback+0x60>
  switch (cmd) {
 800743c:	2b72      	cmp	r3, #114	; 0x72
 800743e:	d014      	beq.n	800746a <HAL_UART_RxCpltCallback+0x7a>
 8007440:	2b74      	cmp	r3, #116	; 0x74
 8007442:	d01b      	beq.n	800747c <HAL_UART_RxCpltCallback+0x8c>
 8007444:	2b70      	cmp	r3, #112	; 0x70
 8007446:	d1df      	bne.n	8007408 <HAL_UART_RxCpltCallback+0x18>
    pre_emphasis_enabled = false;
 8007448:	2200      	movs	r2, #0
 800744a:	e000      	b.n	800744e <HAL_UART_RxCpltCallback+0x5e>
    pre_emphasis_enabled = true;
 800744c:	2201      	movs	r2, #1
    pre_emphasis_enabled = false;
 800744e:	4b10      	ldr	r3, [pc, #64]	; (8007490 <HAL_UART_RxCpltCallback+0xa0>)
    printing = true;
 8007450:	701a      	strb	r2, [r3, #0]
    break;
  }

  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 8007452:	490b      	ldr	r1, [pc, #44]	; (8007480 <HAL_UART_RxCpltCallback+0x90>)
 8007454:	480f      	ldr	r0, [pc, #60]	; (8007494 <HAL_UART_RxCpltCallback+0xa4>)
 8007456:	2201      	movs	r2, #1
 8007458:	f7fd bf7c 	b.w	8005354 <HAL_UART_Receive_IT>
    angle = LEFT2;
 800745c:	2200      	movs	r2, #0
    angle = RIGHT2;
 800745e:	4b0e      	ldr	r3, [pc, #56]	; (8007498 <HAL_UART_RxCpltCallback+0xa8>)
 8007460:	e7f6      	b.n	8007450 <HAL_UART_RxCpltCallback+0x60>
    angle = LEFT;
 8007462:	2201      	movs	r2, #1
 8007464:	e7fb      	b.n	800745e <HAL_UART_RxCpltCallback+0x6e>
    angle = CENTER;
 8007466:	2202      	movs	r2, #2
 8007468:	e7f9      	b.n	800745e <HAL_UART_RxCpltCallback+0x6e>
    angle = RIGHT;
 800746a:	2203      	movs	r2, #3
 800746c:	e7f7      	b.n	800745e <HAL_UART_RxCpltCallback+0x6e>
    angle = RIGHT2;
 800746e:	2204      	movs	r2, #4
 8007470:	e7f5      	b.n	800745e <HAL_UART_RxCpltCallback+0x6e>
    beam_forming_mode = BROADSIDE;
 8007472:	2200      	movs	r2, #0
    beam_forming_mode = RIGHT_MIC_ONLY;
 8007474:	4b09      	ldr	r3, [pc, #36]	; (800749c <HAL_UART_RxCpltCallback+0xac>)
 8007476:	e7eb      	b.n	8007450 <HAL_UART_RxCpltCallback+0x60>
 8007478:	2203      	movs	r2, #3
 800747a:	e7fb      	b.n	8007474 <HAL_UART_RxCpltCallback+0x84>
    debug_output = ELAPSED_TIME;
 800747c:	2202      	movs	r2, #2
 800747e:	e7db      	b.n	8007438 <HAL_UART_RxCpltCallback+0x48>
 8007480:	2000f238 	.word	0x2000f238
 8007484:	200006ae 	.word	0x200006ae
 8007488:	2000c634 	.word	0x2000c634
 800748c:	2000a6e4 	.word	0x2000a6e4
 8007490:	200006af 	.word	0x200006af
 8007494:	2000f2c4 	.word	0x2000f2c4
 8007498:	200006ac 	.word	0x200006ac
 800749c:	200006ad 	.word	0x200006ad

080074a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80074a0:	e7fe      	b.n	80074a0 <Error_Handler>
	...

080074a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074a4:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <HAL_MspInit+0x2c>)
 80074a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80074a8:	f042 0201 	orr.w	r2, r2, #1
 80074ac:	661a      	str	r2, [r3, #96]	; 0x60
 80074ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80074b0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074b2:	f002 0201 	and.w	r2, r2, #1
 80074b6:	9200      	str	r2, [sp, #0]
 80074b8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80074ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80074bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80074c0:	659a      	str	r2, [r3, #88]	; 0x58
 80074c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80074cc:	b002      	add	sp, #8
 80074ce:	4770      	bx	lr
 80074d0:	40021000 	.word	0x40021000

080074d4 <SVC_Handler>:
 80074d4:	4770      	bx	lr

080074d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80074d6:	4770      	bx	lr

080074d8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80074d8:	f7fc b892 	b.w	8003600 <HAL_IncTick>

080074dc <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80074dc:	4801      	ldr	r0, [pc, #4]	; (80074e4 <DMA1_Channel3_IRQHandler+0x8>)
 80074de:	f7fc bc7f 	b.w	8003de0 <HAL_DMA_IRQHandler>
 80074e2:	bf00      	nop
 80074e4:	2000ef5c 	.word	0x2000ef5c

080074e8 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80074e8:	4801      	ldr	r0, [pc, #4]	; (80074f0 <DMA1_Channel4_IRQHandler+0x8>)
 80074ea:	f7fc bc79 	b.w	8003de0 <HAL_DMA_IRQHandler>
 80074ee:	bf00      	nop
 80074f0:	2000f0c0 	.word	0x2000f0c0

080074f4 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 80074f4:	4801      	ldr	r0, [pc, #4]	; (80074fc <DMA1_Channel5_IRQHandler+0x8>)
 80074f6:	f7fc bc73 	b.w	8003de0 <HAL_DMA_IRQHandler>
 80074fa:	bf00      	nop
 80074fc:	2000f078 	.word	0x2000f078

08007500 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007500:	4801      	ldr	r0, [pc, #4]	; (8007508 <DMA1_Channel7_IRQHandler+0x8>)
 8007502:	f7fc bc6d 	b.w	8003de0 <HAL_DMA_IRQHandler>
 8007506:	bf00      	nop
 8007508:	2000f27c 	.word	0x2000f27c

0800750c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800750c:	4801      	ldr	r0, [pc, #4]	; (8007514 <USART2_IRQHandler+0x8>)
 800750e:	f7fd bfcd 	b.w	80054ac <HAL_UART_IRQHandler>
 8007512:	bf00      	nop
 8007514:	2000f2c4 	.word	0x2000f2c4

08007518 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007518:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800751c:	f7fc bd86 	b.w	800402c <HAL_GPIO_EXTI_IRQHandler>

08007520 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8007520:	4801      	ldr	r0, [pc, #4]	; (8007528 <DMA2_Channel5_IRQHandler+0x8>)
 8007522:	f7fc bc5d 	b.w	8003de0 <HAL_DMA_IRQHandler>
 8007526:	bf00      	nop
 8007528:	2000efa4 	.word	0x2000efa4

0800752c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800752c:	b570      	push	{r4, r5, r6, lr}
 800752e:	460e      	mov	r6, r1
 8007530:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007532:	460c      	mov	r4, r1
 8007534:	1ba3      	subs	r3, r4, r6
 8007536:	429d      	cmp	r5, r3
 8007538:	dc01      	bgt.n	800753e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800753a:	4628      	mov	r0, r5
 800753c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800753e:	f3af 8000 	nop.w
 8007542:	f804 0b01 	strb.w	r0, [r4], #1
 8007546:	e7f5      	b.n	8007534 <_read+0x8>

08007548 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8007548:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800754a:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <_sbrk+0x2c>)
 800754c:	6819      	ldr	r1, [r3, #0]
{
 800754e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8007550:	b909      	cbnz	r1, 8007556 <_sbrk+0xe>
		heap_end = &end;
 8007552:	4909      	ldr	r1, [pc, #36]	; (8007578 <_sbrk+0x30>)
 8007554:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8007556:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8007558:	4669      	mov	r1, sp
 800755a:	4402      	add	r2, r0
 800755c:	428a      	cmp	r2, r1
 800755e:	d906      	bls.n	800756e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8007560:	f001 fe38 	bl	80091d4 <__errno>
 8007564:	230c      	movs	r3, #12
 8007566:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800756e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8007570:	bd08      	pop	{r3, pc}
 8007572:	bf00      	nop
 8007574:	2000c638 	.word	0x2000c638
 8007578:	2000f340 	.word	0x2000f340

0800757c <_close>:

int _close(int file)
{
	return -1;
}
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	4770      	bx	lr

08007582 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007586:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007588:	2000      	movs	r0, #0
 800758a:	4770      	bx	lr

0800758c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800758c:	2001      	movs	r0, #1
 800758e:	4770      	bx	lr

08007590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007590:	2000      	movs	r0, #0
 8007592:	4770      	bx	lr

08007594 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007594:	490f      	ldr	r1, [pc, #60]	; (80075d4 <SystemInit+0x40>)
 8007596:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800759a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800759e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80075a2:	4b0d      	ldr	r3, [pc, #52]	; (80075d8 <SystemInit+0x44>)
 80075a4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80075a6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80075a8:	f042 0201 	orr.w	r2, r2, #1
 80075ac:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80075ae:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80075b6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80075ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80075bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80075c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075c8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80075ca:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80075cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075d0:	608b      	str	r3, [r1, #8]
 80075d2:	4770      	bx	lr
 80075d4:	e000ed00 	.word	0xe000ed00
 80075d8:	40021000 	.word	0x40021000

080075dc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80075dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
 80075de:	480f      	ldr	r0, [pc, #60]	; (800761c <MX_TIM6_Init+0x40>)
 80075e0:	4b0f      	ldr	r3, [pc, #60]	; (8007620 <MX_TIM6_Init+0x44>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80075e2:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 0;
 80075e4:	e880 0018 	stmia.w	r0, {r3, r4}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 4095;
 80075e8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80075ec:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80075ee:	2380      	movs	r3, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80075f0:	9401      	str	r4, [sp, #4]
 80075f2:	9402      	str	r4, [sp, #8]
 80075f4:	9403      	str	r4, [sp, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075f6:	6084      	str	r4, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80075f8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80075fa:	f7fd fe55 	bl	80052a8 <HAL_TIM_Base_Init>
 80075fe:	b108      	cbz	r0, 8007604 <MX_TIM6_Init+0x28>
  {
    Error_Handler();
 8007600:	f7ff ff4e 	bl	80074a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007604:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8007606:	a901      	add	r1, sp, #4
 8007608:	4804      	ldr	r0, [pc, #16]	; (800761c <MX_TIM6_Init+0x40>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800760a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800760c:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800760e:	f7fd fe65 	bl	80052dc <HAL_TIMEx_MasterConfigSynchronization>
 8007612:	b108      	cbz	r0, 8007618 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8007614:	f7ff ff44 	bl	80074a0 <Error_Handler>
  }

}
 8007618:	b004      	add	sp, #16
 800761a:	bd10      	pop	{r4, pc}
 800761c:	2000f23c 	.word	0x2000f23c
 8007620:	40001000 	.word	0x40001000

08007624 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8007624:	6802      	ldr	r2, [r0, #0]
 8007626:	4b08      	ldr	r3, [pc, #32]	; (8007648 <HAL_TIM_Base_MspInit+0x24>)
 8007628:	429a      	cmp	r2, r3
{
 800762a:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM6)
 800762c:	d10a      	bne.n	8007644 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800762e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8007632:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007634:	f042 0210 	orr.w	r2, r2, #16
 8007638:	659a      	str	r2, [r3, #88]	; 0x58
 800763a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763c:	f003 0310 	and.w	r3, r3, #16
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8007644:	b002      	add	sp, #8
 8007646:	4770      	bx	lr
 8007648:	40001000 	.word	0x40001000

0800764c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800764c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 800764e:	480c      	ldr	r0, [pc, #48]	; (8007680 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 460800;
 8007650:	4b0c      	ldr	r3, [pc, #48]	; (8007684 <MX_USART2_UART_Init+0x38>)
 8007652:	f44f 2ee1 	mov.w	lr, #460800	; 0x70800
 8007656:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800765a:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800765c:	2300      	movs	r3, #0
 800765e:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007660:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007662:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007664:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007666:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007668:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800766a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800766c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800766e:	f7fe fa63 	bl	8005b38 <HAL_UART_Init>
 8007672:	b118      	cbz	r0, 800767c <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8007674:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007678:	f7ff bf12 	b.w	80074a0 <Error_Handler>
 800767c:	bd08      	pop	{r3, pc}
 800767e:	bf00      	nop
 8007680:	2000f2c4 	.word	0x2000f2c4
 8007684:	40004400 	.word	0x40004400

08007688 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	4605      	mov	r5, r0
 800768c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800768e:	2214      	movs	r2, #20
 8007690:	2100      	movs	r1, #0
 8007692:	a803      	add	r0, sp, #12
 8007694:	f001 fde2 	bl	800925c <memset>
  if(uartHandle->Instance==USART2)
 8007698:	682a      	ldr	r2, [r5, #0]
 800769a:	4b22      	ldr	r3, [pc, #136]	; (8007724 <HAL_UART_MspInit+0x9c>)
 800769c:	429a      	cmp	r2, r3
 800769e:	d13e      	bne.n	800771e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80076a0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076a4:	2602      	movs	r6, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 80076a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80076a8:	4c1f      	ldr	r4, [pc, #124]	; (8007728 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80076aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80076ae:	659a      	str	r2, [r3, #88]	; 0x58
 80076b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076b2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80076b6:	9201      	str	r2, [sp, #4]
 80076b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076bc:	f042 0201 	orr.w	r2, r2, #1
 80076c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80076c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076c4:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	9302      	str	r3, [sp, #8]
 80076cc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80076ce:	230c      	movs	r3, #12
 80076d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076d2:	2303      	movs	r3, #3
 80076d4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80076da:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076dc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80076de:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076e0:	f7fc fbc8 	bl	8003e74 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80076e4:	4b11      	ldr	r3, [pc, #68]	; (800772c <HAL_UART_MspInit+0xa4>)
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80076e6:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80076ea:	2310      	movs	r3, #16
 80076ec:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80076ee:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076f0:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80076f2:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076f4:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80076f6:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80076f8:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076fa:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80076fc:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80076fe:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007700:	f7fc faa6 	bl	8003c50 <HAL_DMA_Init>
 8007704:	b108      	cbz	r0, 800770a <HAL_UART_MspInit+0x82>
    {
      Error_Handler();
 8007706:	f7ff fecb 	bl	80074a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800770a:	2200      	movs	r2, #0
 800770c:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800770e:	66ac      	str	r4, [r5, #104]	; 0x68
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007710:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8007712:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007714:	f7fb ffa2 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007718:	2026      	movs	r0, #38	; 0x26
 800771a:	f7fb ffd3 	bl	80036c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800771e:	b008      	add	sp, #32
 8007720:	bd70      	pop	{r4, r5, r6, pc}
 8007722:	bf00      	nop
 8007724:	40004400 	.word	0x40004400
 8007728:	2000f27c 	.word	0x2000f27c
 800772c:	40020080 	.word	0x40020080

08007730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007768 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007734:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007736:	e003      	b.n	8007740 <LoopCopyDataInit>

08007738 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007738:	4b0c      	ldr	r3, [pc, #48]	; (800776c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800773a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800773c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800773e:	3104      	adds	r1, #4

08007740 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007740:	480b      	ldr	r0, [pc, #44]	; (8007770 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007742:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007744:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007746:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007748:	d3f6      	bcc.n	8007738 <CopyDataInit>
	ldr	r2, =_sbss
 800774a:	4a0b      	ldr	r2, [pc, #44]	; (8007778 <LoopForever+0x12>)
	b	LoopFillZerobss
 800774c:	e002      	b.n	8007754 <LoopFillZerobss>

0800774e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800774e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007750:	f842 3b04 	str.w	r3, [r2], #4

08007754 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007754:	4b09      	ldr	r3, [pc, #36]	; (800777c <LoopForever+0x16>)
	cmp	r2, r3
 8007756:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007758:	d3f9      	bcc.n	800774e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800775a:	f7ff ff1b 	bl	8007594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800775e:	f001 fd3f 	bl	80091e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007762:	f7ff fd61 	bl	8007228 <main>

08007766 <LoopForever>:

LoopForever:
    b LoopForever
 8007766:	e7fe      	b.n	8007766 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007768:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800776c:	0803c458 	.word	0x0803c458
	ldr	r0, =_sdata
 8007770:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007774:	20000888 	.word	0x20000888
	ldr	r2, =_sbss
 8007778:	20000888 	.word	0x20000888
	ldr	r3, = _ebss
 800777c:	2000f340 	.word	0x2000f340

08007780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007780:	e7fe      	b.n	8007780 <ADC1_2_IRQHandler>
	...

08007784 <arm_fill_f32>:
 8007784:	b410      	push	{r4}
 8007786:	088c      	lsrs	r4, r1, #2
 8007788:	d010      	beq.n	80077ac <arm_fill_f32+0x28>
 800778a:	f100 0310 	add.w	r3, r0, #16
 800778e:	4622      	mov	r2, r4
 8007790:	3a01      	subs	r2, #1
 8007792:	ed03 0a04 	vstr	s0, [r3, #-16]
 8007796:	ed03 0a03 	vstr	s0, [r3, #-12]
 800779a:	ed03 0a02 	vstr	s0, [r3, #-8]
 800779e:	ed03 0a01 	vstr	s0, [r3, #-4]
 80077a2:	f103 0310 	add.w	r3, r3, #16
 80077a6:	d1f3      	bne.n	8007790 <arm_fill_f32+0xc>
 80077a8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80077ac:	f011 0103 	ands.w	r1, r1, #3
 80077b0:	d003      	beq.n	80077ba <arm_fill_f32+0x36>
 80077b2:	3901      	subs	r1, #1
 80077b4:	eca0 0a01 	vstmia	r0!, {s0}
 80077b8:	d1fb      	bne.n	80077b2 <arm_fill_f32+0x2e>
 80077ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <arm_copy_f32>:
 80077c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c4:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80077c8:	d01e      	beq.n	8007808 <arm_copy_f32+0x48>
 80077ca:	f100 0410 	add.w	r4, r0, #16
 80077ce:	f101 0310 	add.w	r3, r1, #16
 80077d2:	4645      	mov	r5, r8
 80077d4:	f854 cc10 	ldr.w	ip, [r4, #-16]
 80077d8:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 80077dc:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80077e0:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80077e4:	f843 6c04 	str.w	r6, [r3, #-4]
 80077e8:	3d01      	subs	r5, #1
 80077ea:	f843 cc10 	str.w	ip, [r3, #-16]
 80077ee:	f843 ec0c 	str.w	lr, [r3, #-12]
 80077f2:	f843 7c08 	str.w	r7, [r3, #-8]
 80077f6:	f104 0410 	add.w	r4, r4, #16
 80077fa:	f103 0310 	add.w	r3, r3, #16
 80077fe:	d1e9      	bne.n	80077d4 <arm_copy_f32+0x14>
 8007800:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8007804:	4440      	add	r0, r8
 8007806:	4441      	add	r1, r8
 8007808:	f012 0203 	ands.w	r2, r2, #3
 800780c:	d005      	beq.n	800781a <arm_copy_f32+0x5a>
 800780e:	f850 3b04 	ldr.w	r3, [r0], #4
 8007812:	f841 3b04 	str.w	r3, [r1], #4
 8007816:	3a01      	subs	r2, #1
 8007818:	d1f9      	bne.n	800780e <arm_copy_f32+0x4e>
 800781a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800781e:	bf00      	nop

08007820 <arm_mean_f32>:
 8007820:	b430      	push	{r4, r5}
 8007822:	088d      	lsrs	r5, r1, #2
 8007824:	eddf 7a17 	vldr	s15, [pc, #92]	; 8007884 <arm_mean_f32+0x64>
 8007828:	d018      	beq.n	800785c <arm_mean_f32+0x3c>
 800782a:	f100 0310 	add.w	r3, r0, #16
 800782e:	462c      	mov	r4, r5
 8007830:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007834:	ed53 5a03 	vldr	s11, [r3, #-12]
 8007838:	ed13 6a02 	vldr	s12, [r3, #-8]
 800783c:	ed53 6a01 	vldr	s13, [r3, #-4]
 8007840:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007844:	3c01      	subs	r4, #1
 8007846:	ee77 7a25 	vadd.f32	s15, s14, s11
 800784a:	f103 0310 	add.w	r3, r3, #16
 800784e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007856:	d1eb      	bne.n	8007830 <arm_mean_f32+0x10>
 8007858:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800785c:	f011 0303 	ands.w	r3, r1, #3
 8007860:	d005      	beq.n	800786e <arm_mean_f32+0x4e>
 8007862:	ecb0 7a01 	vldmia	r0!, {s14}
 8007866:	3b01      	subs	r3, #1
 8007868:	ee77 7a87 	vadd.f32	s15, s15, s14
 800786c:	d1f9      	bne.n	8007862 <arm_mean_f32+0x42>
 800786e:	ee07 1a10 	vmov	s14, r1
 8007872:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007876:	bc30      	pop	{r4, r5}
 8007878:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800787c:	edc2 6a00 	vstr	s13, [r2]
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	00000000 	.word	0x00000000

08007888 <arm_max_f32>:
 8007888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800788c:	1e4f      	subs	r7, r1, #1
 800788e:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8007892:	f100 0e04 	add.w	lr, r0, #4
 8007896:	edd0 7a00 	vldr	s15, [r0]
 800789a:	d058      	beq.n	800794e <arm_max_f32+0xc6>
 800789c:	3014      	adds	r0, #20
 800789e:	46c4      	mov	ip, r8
 80078a0:	2604      	movs	r6, #4
 80078a2:	2400      	movs	r4, #0
 80078a4:	ed10 6a04 	vldr	s12, [r0, #-16]
 80078a8:	ed50 6a03 	vldr	s13, [r0, #-12]
 80078ac:	ed10 7a02 	vldr	s14, [r0, #-8]
 80078b0:	ed50 5a01 	vldr	s11, [r0, #-4]
 80078b4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80078b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078bc:	bfc8      	it	gt
 80078be:	eef0 7a46 	vmovgt.f32	s15, s12
 80078c2:	f1a6 0503 	sub.w	r5, r6, #3
 80078c6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80078ca:	bfc8      	it	gt
 80078cc:	462c      	movgt	r4, r5
 80078ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d2:	bf48      	it	mi
 80078d4:	eef0 7a66 	vmovmi.f32	s15, s13
 80078d8:	f1a6 0502 	sub.w	r5, r6, #2
 80078dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078e0:	bf48      	it	mi
 80078e2:	462c      	movmi	r4, r5
 80078e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e8:	bf48      	it	mi
 80078ea:	eef0 7a47 	vmovmi.f32	s15, s14
 80078ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80078f2:	eef4 7ae5 	vcmpe.f32	s15, s11
 80078f6:	bf48      	it	mi
 80078f8:	462c      	movmi	r4, r5
 80078fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fe:	bf48      	it	mi
 8007900:	4634      	movmi	r4, r6
 8007902:	bf48      	it	mi
 8007904:	eef0 7a65 	vmovmi.f32	s15, s11
 8007908:	f1bc 0c01 	subs.w	ip, ip, #1
 800790c:	f100 0010 	add.w	r0, r0, #16
 8007910:	f106 0604 	add.w	r6, r6, #4
 8007914:	d1c6      	bne.n	80078a4 <arm_max_f32+0x1c>
 8007916:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 800791a:	f017 0003 	ands.w	r0, r7, #3
 800791e:	d018      	beq.n	8007952 <arm_max_f32+0xca>
 8007920:	1a08      	subs	r0, r1, r0
 8007922:	ecbe 7a01 	vldmia	lr!, {s14}
 8007926:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800792a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800792e:	bfc8      	it	gt
 8007930:	4604      	movgt	r4, r0
 8007932:	f100 0001 	add.w	r0, r0, #1
 8007936:	bfd8      	it	le
 8007938:	eeb0 7a67 	vmovle.f32	s14, s15
 800793c:	4281      	cmp	r1, r0
 800793e:	eef0 7a47 	vmov.f32	s15, s14
 8007942:	d1ee      	bne.n	8007922 <arm_max_f32+0x9a>
 8007944:	ed82 7a00 	vstr	s14, [r2]
 8007948:	601c      	str	r4, [r3, #0]
 800794a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800794e:	4644      	mov	r4, r8
 8007950:	e7e3      	b.n	800791a <arm_max_f32+0x92>
 8007952:	eeb0 7a67 	vmov.f32	s14, s15
 8007956:	e7f5      	b.n	8007944 <arm_max_f32+0xbc>

08007958 <arm_rfft_fast_init_f32>:
 8007958:	084b      	lsrs	r3, r1, #1
 800795a:	2b80      	cmp	r3, #128	; 0x80
 800795c:	b410      	push	{r4}
 800795e:	8201      	strh	r1, [r0, #16]
 8007960:	8003      	strh	r3, [r0, #0]
 8007962:	d046      	beq.n	80079f2 <arm_rfft_fast_init_f32+0x9a>
 8007964:	d916      	bls.n	8007994 <arm_rfft_fast_init_f32+0x3c>
 8007966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796a:	d03c      	beq.n	80079e6 <arm_rfft_fast_init_f32+0x8e>
 800796c:	d928      	bls.n	80079c0 <arm_rfft_fast_init_f32+0x68>
 800796e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007972:	d01f      	beq.n	80079b4 <arm_rfft_fast_init_f32+0x5c>
 8007974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007978:	d112      	bne.n	80079a0 <arm_rfft_fast_init_f32+0x48>
 800797a:	4920      	ldr	r1, [pc, #128]	; (80079fc <arm_rfft_fast_init_f32+0xa4>)
 800797c:	4a20      	ldr	r2, [pc, #128]	; (8007a00 <arm_rfft_fast_init_f32+0xa8>)
 800797e:	4b21      	ldr	r3, [pc, #132]	; (8007a04 <arm_rfft_fast_init_f32+0xac>)
 8007980:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8007984:	8184      	strh	r4, [r0, #12]
 8007986:	6081      	str	r1, [r0, #8]
 8007988:	6042      	str	r2, [r0, #4]
 800798a:	6143      	str	r3, [r0, #20]
 800798c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007990:	2000      	movs	r0, #0
 8007992:	4770      	bx	lr
 8007994:	2b20      	cmp	r3, #32
 8007996:	d01c      	beq.n	80079d2 <arm_rfft_fast_init_f32+0x7a>
 8007998:	2b40      	cmp	r3, #64	; 0x40
 800799a:	d006      	beq.n	80079aa <arm_rfft_fast_init_f32+0x52>
 800799c:	2b10      	cmp	r3, #16
 800799e:	d01d      	beq.n	80079dc <arm_rfft_fast_init_f32+0x84>
 80079a0:	f04f 30ff 	mov.w	r0, #4294967295
 80079a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	2438      	movs	r4, #56	; 0x38
 80079ac:	4916      	ldr	r1, [pc, #88]	; (8007a08 <arm_rfft_fast_init_f32+0xb0>)
 80079ae:	4a17      	ldr	r2, [pc, #92]	; (8007a0c <arm_rfft_fast_init_f32+0xb4>)
 80079b0:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <arm_rfft_fast_init_f32+0xb8>)
 80079b2:	e7e7      	b.n	8007984 <arm_rfft_fast_init_f32+0x2c>
 80079b4:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80079b8:	4916      	ldr	r1, [pc, #88]	; (8007a14 <arm_rfft_fast_init_f32+0xbc>)
 80079ba:	4a17      	ldr	r2, [pc, #92]	; (8007a18 <arm_rfft_fast_init_f32+0xc0>)
 80079bc:	4b17      	ldr	r3, [pc, #92]	; (8007a1c <arm_rfft_fast_init_f32+0xc4>)
 80079be:	e7e1      	b.n	8007984 <arm_rfft_fast_init_f32+0x2c>
 80079c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c4:	d1ec      	bne.n	80079a0 <arm_rfft_fast_init_f32+0x48>
 80079c6:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80079ca:	4915      	ldr	r1, [pc, #84]	; (8007a20 <arm_rfft_fast_init_f32+0xc8>)
 80079cc:	4a15      	ldr	r2, [pc, #84]	; (8007a24 <arm_rfft_fast_init_f32+0xcc>)
 80079ce:	4b16      	ldr	r3, [pc, #88]	; (8007a28 <arm_rfft_fast_init_f32+0xd0>)
 80079d0:	e7d8      	b.n	8007984 <arm_rfft_fast_init_f32+0x2c>
 80079d2:	2430      	movs	r4, #48	; 0x30
 80079d4:	4915      	ldr	r1, [pc, #84]	; (8007a2c <arm_rfft_fast_init_f32+0xd4>)
 80079d6:	4a16      	ldr	r2, [pc, #88]	; (8007a30 <arm_rfft_fast_init_f32+0xd8>)
 80079d8:	4b16      	ldr	r3, [pc, #88]	; (8007a34 <arm_rfft_fast_init_f32+0xdc>)
 80079da:	e7d3      	b.n	8007984 <arm_rfft_fast_init_f32+0x2c>
 80079dc:	2414      	movs	r4, #20
 80079de:	4916      	ldr	r1, [pc, #88]	; (8007a38 <arm_rfft_fast_init_f32+0xe0>)
 80079e0:	4a16      	ldr	r2, [pc, #88]	; (8007a3c <arm_rfft_fast_init_f32+0xe4>)
 80079e2:	4b17      	ldr	r3, [pc, #92]	; (8007a40 <arm_rfft_fast_init_f32+0xe8>)
 80079e4:	e7ce      	b.n	8007984 <arm_rfft_fast_init_f32+0x2c>
 80079e6:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80079ea:	4916      	ldr	r1, [pc, #88]	; (8007a44 <arm_rfft_fast_init_f32+0xec>)
 80079ec:	4a16      	ldr	r2, [pc, #88]	; (8007a48 <arm_rfft_fast_init_f32+0xf0>)
 80079ee:	4b17      	ldr	r3, [pc, #92]	; (8007a4c <arm_rfft_fast_init_f32+0xf4>)
 80079f0:	e7c8      	b.n	8007984 <arm_rfft_fast_init_f32+0x2c>
 80079f2:	24d0      	movs	r4, #208	; 0xd0
 80079f4:	4916      	ldr	r1, [pc, #88]	; (8007a50 <arm_rfft_fast_init_f32+0xf8>)
 80079f6:	4a17      	ldr	r2, [pc, #92]	; (8007a54 <arm_rfft_fast_init_f32+0xfc>)
 80079f8:	4b17      	ldr	r3, [pc, #92]	; (8007a58 <arm_rfft_fast_init_f32+0x100>)
 80079fa:	e7c3      	b.n	8007984 <arm_rfft_fast_init_f32+0x2c>
 80079fc:	08037aa8 	.word	0x08037aa8
 8007a00:	0802849c 	.word	0x0802849c
 8007a04:	0802e60c 	.word	0x0802e60c
 8007a08:	0802c59c 	.word	0x0802c59c
 8007a0c:	08039868 	.word	0x08039868
 8007a10:	0803bd58 	.word	0x0803bd58
 8007a14:	08034f8c 	.word	0x08034f8c
 8007a18:	08032e8c 	.word	0x08032e8c
 8007a1c:	0802c60c 	.word	0x0802c60c
 8007a20:	0803b9e8 	.word	0x0803b9e8
 8007a24:	0803260c 	.word	0x0803260c
 8007a28:	08039a68 	.word	0x08039a68
 8007a2c:	08035e44 	.word	0x08035e44
 8007a30:	08034e8c 	.word	0x08034e8c
 8007a34:	0802c49c 	.word	0x0802c49c
 8007a38:	08035d9c 	.word	0x08035d9c
 8007a3c:	08032e0c 	.word	0x08032e0c
 8007a40:	08035dc4 	.word	0x08035dc4
 8007a44:	0803a268 	.word	0x0803a268
 8007a48:	08036aa8 	.word	0x08036aa8
 8007a4c:	0803a5e8 	.word	0x0803a5e8
 8007a50:	0803bf58 	.word	0x0803bf58
 8007a54:	080366a8 	.word	0x080366a8
 8007a58:	0803b5e8 	.word	0x0803b5e8

08007a5c <arm_rfft_fast_f32>:
 8007a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a60:	8a06      	ldrh	r6, [r0, #16]
 8007a62:	0876      	lsrs	r6, r6, #1
 8007a64:	4607      	mov	r7, r0
 8007a66:	4615      	mov	r5, r2
 8007a68:	8006      	strh	r6, [r0, #0]
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d15c      	bne.n	8007b2a <arm_rfft_fast_f32+0xce>
 8007a70:	461a      	mov	r2, r3
 8007a72:	2301      	movs	r3, #1
 8007a74:	f000 fbe4 	bl	8008240 <arm_cfft_f32>
 8007a78:	edd4 7a00 	vldr	s15, [r4]
 8007a7c:	ed94 7a01 	vldr	s14, [r4, #4]
 8007a80:	883e      	ldrh	r6, [r7, #0]
 8007a82:	6978      	ldr	r0, [r7, #20]
 8007a84:	ee37 7a07 	vadd.f32	s14, s14, s14
 8007a88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007a8c:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 8007a90:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007a94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a98:	3e01      	subs	r6, #1
 8007a9a:	ee26 7a83 	vmul.f32	s14, s13, s6
 8007a9e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007aa2:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8007aa6:	ed85 7a00 	vstr	s14, [r5]
 8007aaa:	edc5 7a01 	vstr	s15, [r5, #4]
 8007aae:	3010      	adds	r0, #16
 8007ab0:	f105 0210 	add.w	r2, r5, #16
 8007ab4:	3b08      	subs	r3, #8
 8007ab6:	f104 0110 	add.w	r1, r4, #16
 8007aba:	ed93 7a02 	vldr	s14, [r3, #8]
 8007abe:	ed51 6a02 	vldr	s13, [r1, #-8]
 8007ac2:	ed10 6a02 	vldr	s12, [r0, #-8]
 8007ac6:	edd3 3a03 	vldr	s7, [r3, #12]
 8007aca:	ed11 5a01 	vldr	s10, [r1, #-4]
 8007ace:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007ad2:	ee77 7a66 	vsub.f32	s15, s14, s13
 8007ad6:	ee77 4a26 	vadd.f32	s9, s14, s13
 8007ada:	ee33 4a85 	vadd.f32	s8, s7, s10
 8007ade:	ee66 6a27 	vmul.f32	s13, s12, s15
 8007ae2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8007ae6:	ee35 5a63 	vsub.f32	s10, s10, s7
 8007aea:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007aee:	ee77 7a05 	vadd.f32	s15, s14, s10
 8007af2:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007af6:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007afa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007afe:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8007b02:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007b06:	ee27 7a03 	vmul.f32	s14, s14, s6
 8007b0a:	3e01      	subs	r6, #1
 8007b0c:	ed02 7a02 	vstr	s14, [r2, #-8]
 8007b10:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007b14:	f1a3 0308 	sub.w	r3, r3, #8
 8007b18:	f101 0108 	add.w	r1, r1, #8
 8007b1c:	f100 0008 	add.w	r0, r0, #8
 8007b20:	f102 0208 	add.w	r2, r2, #8
 8007b24:	d1c9      	bne.n	8007aba <arm_rfft_fast_f32+0x5e>
 8007b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b2a:	edd1 7a00 	vldr	s15, [r1]
 8007b2e:	edd1 6a01 	vldr	s13, [r1, #4]
 8007b32:	6941      	ldr	r1, [r0, #20]
 8007b34:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007b38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007b3c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8007b40:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007b44:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007b48:	3e01      	subs	r6, #1
 8007b4a:	ed82 7a00 	vstr	s14, [r2]
 8007b4e:	edc2 7a01 	vstr	s15, [r2, #4]
 8007b52:	00f0      	lsls	r0, r6, #3
 8007b54:	b3ee      	cbz	r6, 8007bd2 <arm_rfft_fast_f32+0x176>
 8007b56:	3808      	subs	r0, #8
 8007b58:	f101 0e10 	add.w	lr, r1, #16
 8007b5c:	4420      	add	r0, r4
 8007b5e:	f104 0110 	add.w	r1, r4, #16
 8007b62:	f102 0c10 	add.w	ip, r2, #16
 8007b66:	ed90 7a02 	vldr	s14, [r0, #8]
 8007b6a:	ed51 6a02 	vldr	s13, [r1, #-8]
 8007b6e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8007b72:	ed90 4a03 	vldr	s8, [r0, #12]
 8007b76:	ed11 5a01 	vldr	s10, [r1, #-4]
 8007b7a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8007b7e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8007b82:	ee74 4a05 	vadd.f32	s9, s8, s10
 8007b86:	ee26 3a27 	vmul.f32	s6, s12, s15
 8007b8a:	ee77 6a26 	vadd.f32	s13, s14, s13
 8007b8e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007b92:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8007b96:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007b9a:	ee77 7a05 	vadd.f32	s15, s14, s10
 8007b9e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007ba2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8007ba6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007baa:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8007bae:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007bb2:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007bb6:	3e01      	subs	r6, #1
 8007bb8:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8007bbc:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8007bc0:	f1a0 0008 	sub.w	r0, r0, #8
 8007bc4:	f101 0108 	add.w	r1, r1, #8
 8007bc8:	f10e 0e08 	add.w	lr, lr, #8
 8007bcc:	f10c 0c08 	add.w	ip, ip, #8
 8007bd0:	d1c9      	bne.n	8007b66 <arm_rfft_fast_f32+0x10a>
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bde:	f000 bb2f 	b.w	8008240 <arm_cfft_f32>
 8007be2:	bf00      	nop

08007be4 <arm_cfft_radix8by2_f32>:
 8007be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be8:	ed2d 8b08 	vpush	{d8-d11}
 8007bec:	4607      	mov	r7, r0
 8007bee:	4608      	mov	r0, r1
 8007bf0:	f8b7 e000 	ldrh.w	lr, [r7]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8007bfa:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8007bfe:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8007c02:	f000 80b0 	beq.w	8007d66 <arm_cfft_radix8by2_f32+0x182>
 8007c06:	008b      	lsls	r3, r1, #2
 8007c08:	3310      	adds	r3, #16
 8007c0a:	18c6      	adds	r6, r0, r3
 8007c0c:	3210      	adds	r2, #16
 8007c0e:	4443      	add	r3, r8
 8007c10:	f100 0510 	add.w	r5, r0, #16
 8007c14:	f108 0410 	add.w	r4, r8, #16
 8007c18:	ed54 1a04 	vldr	s3, [r4, #-16]
 8007c1c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8007c20:	ed13 4a04 	vldr	s8, [r3, #-16]
 8007c24:	ed53 3a03 	vldr	s7, [r3, #-12]
 8007c28:	ed53 5a02 	vldr	s11, [r3, #-8]
 8007c2c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8007c30:	ed14 0a02 	vldr	s0, [r4, #-8]
 8007c34:	ed54 7a01 	vldr	s15, [r4, #-4]
 8007c38:	ed16 2a04 	vldr	s4, [r6, #-16]
 8007c3c:	ed56 2a03 	vldr	s5, [r6, #-12]
 8007c40:	ed15 6a03 	vldr	s12, [r5, #-12]
 8007c44:	ed15 7a01 	vldr	s14, [r5, #-4]
 8007c48:	ed15 3a04 	vldr	s6, [r5, #-16]
 8007c4c:	ed56 0a02 	vldr	s1, [r6, #-8]
 8007c50:	ed16 1a01 	vldr	s2, [r6, #-4]
 8007c54:	ed55 4a02 	vldr	s9, [r5, #-8]
 8007c58:	ee73 ba21 	vadd.f32	s23, s6, s3
 8007c5c:	ee36 ba26 	vadd.f32	s22, s12, s13
 8007c60:	ee37 aa27 	vadd.f32	s20, s14, s15
 8007c64:	ee72 9a04 	vadd.f32	s19, s4, s8
 8007c68:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8007c6c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8007c70:	ee74 aa80 	vadd.f32	s21, s9, s0
 8007c74:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8007c78:	ed45 ba04 	vstr	s23, [r5, #-16]
 8007c7c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8007c80:	ed45 aa02 	vstr	s21, [r5, #-8]
 8007c84:	ed05 aa01 	vstr	s20, [r5, #-4]
 8007c88:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007c8c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8007c90:	ed06 9a03 	vstr	s18, [r6, #-12]
 8007c94:	ed46 8a02 	vstr	s17, [r6, #-8]
 8007c98:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007c9c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8007ca0:	ed12 6a03 	vldr	s12, [r2, #-12]
 8007ca4:	ed52 2a04 	vldr	s5, [r2, #-16]
 8007ca8:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007cac:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007cb0:	ee26 8a86 	vmul.f32	s16, s13, s12
 8007cb4:	ee24 2a06 	vmul.f32	s4, s8, s12
 8007cb8:	ee63 1a22 	vmul.f32	s3, s6, s5
 8007cbc:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007cc0:	ee23 3a06 	vmul.f32	s6, s6, s12
 8007cc4:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8007cc8:	ee23 6a86 	vmul.f32	s12, s7, s12
 8007ccc:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8007cd0:	ee36 6a04 	vadd.f32	s12, s12, s8
 8007cd4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007cd8:	ee72 3a63 	vsub.f32	s7, s4, s7
 8007cdc:	ee71 2a88 	vadd.f32	s5, s3, s16
 8007ce0:	ed44 6a03 	vstr	s13, [r4, #-12]
 8007ce4:	ed44 2a04 	vstr	s5, [r4, #-16]
 8007ce8:	ed43 3a04 	vstr	s7, [r3, #-16]
 8007cec:	ed03 6a03 	vstr	s12, [r3, #-12]
 8007cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cf4:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8007cf8:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007cfc:	ed52 5a02 	vldr	s11, [r2, #-8]
 8007d00:	ee35 6a41 	vsub.f32	s12, s10, s2
 8007d04:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8007d08:	ee67 3a87 	vmul.f32	s7, s15, s14
 8007d0c:	ee26 5a87 	vmul.f32	s10, s13, s14
 8007d10:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8007d14:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007d18:	ee64 4a87 	vmul.f32	s9, s9, s14
 8007d1c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8007d20:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007d24:	ee26 6a25 	vmul.f32	s12, s12, s11
 8007d28:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007d2c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8007d30:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007d34:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007d38:	f1be 0e01 	subs.w	lr, lr, #1
 8007d3c:	ed44 5a02 	vstr	s11, [r4, #-8]
 8007d40:	f105 0510 	add.w	r5, r5, #16
 8007d44:	ed44 7a01 	vstr	s15, [r4, #-4]
 8007d48:	f106 0610 	add.w	r6, r6, #16
 8007d4c:	ed03 6a02 	vstr	s12, [r3, #-8]
 8007d50:	ed03 7a01 	vstr	s14, [r3, #-4]
 8007d54:	f102 0210 	add.w	r2, r2, #16
 8007d58:	f104 0410 	add.w	r4, r4, #16
 8007d5c:	f103 0310 	add.w	r3, r3, #16
 8007d60:	f47f af5a 	bne.w	8007c18 <arm_cfft_radix8by2_f32+0x34>
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	b28c      	uxth	r4, r1
 8007d68:	4621      	mov	r1, r4
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	f000 ff36 	bl	8008bdc <arm_radix8_butterfly_f32>
 8007d70:	ecbd 8b08 	vpop	{d8-d11}
 8007d74:	4621      	mov	r1, r4
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	4640      	mov	r0, r8
 8007d7a:	2302      	movs	r3, #2
 8007d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d80:	f000 bf2c 	b.w	8008bdc <arm_radix8_butterfly_f32>

08007d84 <arm_cfft_radix8by4_f32>:
 8007d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d88:	ed2d 8b0a 	vpush	{d8-d12}
 8007d8c:	8802      	ldrh	r2, [r0, #0]
 8007d8e:	ed91 6a00 	vldr	s12, [r1]
 8007d92:	b08f      	sub	sp, #60	; 0x3c
 8007d94:	460f      	mov	r7, r1
 8007d96:	0852      	lsrs	r2, r2, #1
 8007d98:	6841      	ldr	r1, [r0, #4]
 8007d9a:	900c      	str	r0, [sp, #48]	; 0x30
 8007d9c:	0093      	lsls	r3, r2, #2
 8007d9e:	4638      	mov	r0, r7
 8007da0:	4418      	add	r0, r3
 8007da2:	4606      	mov	r6, r0
 8007da4:	9009      	str	r0, [sp, #36]	; 0x24
 8007da6:	4418      	add	r0, r3
 8007da8:	edd0 6a00 	vldr	s13, [r0]
 8007dac:	ed96 4a00 	vldr	s8, [r6]
 8007db0:	edd6 2a01 	vldr	s5, [r6, #4]
 8007db4:	edd0 7a01 	vldr	s15, [r0, #4]
 8007db8:	900a      	str	r0, [sp, #40]	; 0x28
 8007dba:	ee76 5a26 	vadd.f32	s11, s12, s13
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	4625      	mov	r5, r4
 8007dc2:	441c      	add	r4, r3
 8007dc4:	edd4 4a00 	vldr	s9, [r4]
 8007dc8:	ed97 7a01 	vldr	s14, [r7, #4]
 8007dcc:	ed94 3a01 	vldr	s6, [r4, #4]
 8007dd0:	9401      	str	r4, [sp, #4]
 8007dd2:	ee35 5a84 	vadd.f32	s10, s11, s8
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007ddc:	463e      	mov	r6, r7
 8007dde:	ee15 ea10 	vmov	lr, s10
 8007de2:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007de6:	f846 eb08 	str.w	lr, [r6], #8
 8007dea:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007dee:	ed90 5a01 	vldr	s10, [r0, #4]
 8007df2:	9605      	str	r6, [sp, #20]
 8007df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007df8:	9e01      	ldr	r6, [sp, #4]
 8007dfa:	9707      	str	r7, [sp, #28]
 8007dfc:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8007e00:	ed96 2a01 	vldr	s4, [r6, #4]
 8007e04:	ee36 7a05 	vadd.f32	s14, s12, s10
 8007e08:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8007e0c:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8007e10:	ee77 7a84 	vadd.f32	s15, s15, s8
 8007e14:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8007e18:	4604      	mov	r4, r0
 8007e1a:	46a3      	mov	fp, r4
 8007e1c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8007e20:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007e24:	ee14 8a10 	vmov	r8, s8
 8007e28:	46a4      	mov	ip, r4
 8007e2a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8007e2e:	ed87 7a01 	vstr	s14, [r7, #4]
 8007e32:	f84b 8b08 	str.w	r8, [fp], #8
 8007e36:	f1ac 0704 	sub.w	r7, ip, #4
 8007e3a:	ed8c 5a01 	vstr	s10, [ip, #4]
 8007e3e:	f101 0c08 	add.w	ip, r1, #8
 8007e42:	462c      	mov	r4, r5
 8007e44:	f8cd c010 	str.w	ip, [sp, #16]
 8007e48:	ee15 ca90 	vmov	ip, s11
 8007e4c:	ee36 6a62 	vsub.f32	s12, s12, s5
 8007e50:	f844 cb08 	str.w	ip, [r4], #8
 8007e54:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8007e58:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007e5c:	9406      	str	r4, [sp, #24]
 8007e5e:	ee76 6a83 	vadd.f32	s13, s13, s6
 8007e62:	f101 0410 	add.w	r4, r1, #16
 8007e66:	0852      	lsrs	r2, r2, #1
 8007e68:	9402      	str	r4, [sp, #8]
 8007e6a:	ed85 6a01 	vstr	s12, [r5, #4]
 8007e6e:	462c      	mov	r4, r5
 8007e70:	f101 0518 	add.w	r5, r1, #24
 8007e74:	920b      	str	r2, [sp, #44]	; 0x2c
 8007e76:	46b2      	mov	sl, r6
 8007e78:	9503      	str	r5, [sp, #12]
 8007e7a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007e7e:	3a02      	subs	r2, #2
 8007e80:	ee16 5a90 	vmov	r5, s13
 8007e84:	46b6      	mov	lr, r6
 8007e86:	4630      	mov	r0, r6
 8007e88:	0852      	lsrs	r2, r2, #1
 8007e8a:	f84a 5b08 	str.w	r5, [sl], #8
 8007e8e:	f1a0 0604 	sub.w	r6, r0, #4
 8007e92:	edce 7a01 	vstr	s15, [lr, #4]
 8007e96:	9208      	str	r2, [sp, #32]
 8007e98:	f000 8130 	beq.w	80080fc <arm_cfft_radix8by4_f32+0x378>
 8007e9c:	4691      	mov	r9, r2
 8007e9e:	9a07      	ldr	r2, [sp, #28]
 8007ea0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007ea4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007ea8:	3b08      	subs	r3, #8
 8007eaa:	f102 0510 	add.w	r5, r2, #16
 8007eae:	f101 0c20 	add.w	ip, r1, #32
 8007eb2:	f1a4 020c 	sub.w	r2, r4, #12
 8007eb6:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8007eba:	4433      	add	r3, r6
 8007ebc:	3410      	adds	r4, #16
 8007ebe:	4650      	mov	r0, sl
 8007ec0:	4659      	mov	r1, fp
 8007ec2:	ed55 3a02 	vldr	s7, [r5, #-8]
 8007ec6:	ed14 5a02 	vldr	s10, [r4, #-8]
 8007eca:	ed91 7a00 	vldr	s14, [r1]
 8007ece:	edd0 7a00 	vldr	s15, [r0]
 8007ed2:	ed54 5a01 	vldr	s11, [r4, #-4]
 8007ed6:	ed15 4a01 	vldr	s8, [r5, #-4]
 8007eda:	edd0 6a01 	vldr	s13, [r0, #4]
 8007ede:	ed91 6a01 	vldr	s12, [r1, #4]
 8007ee2:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007ee6:	ee34 0a25 	vadd.f32	s0, s8, s11
 8007eea:	ee78 4a07 	vadd.f32	s9, s16, s14
 8007eee:	ee74 5a65 	vsub.f32	s11, s8, s11
 8007ef2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8007ef6:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8007efa:	ed45 4a02 	vstr	s9, [r5, #-8]
 8007efe:	edd1 4a01 	vldr	s9, [r1, #4]
 8007f02:	ed90 4a01 	vldr	s8, [r0, #4]
 8007f06:	ee70 4a24 	vadd.f32	s9, s0, s9
 8007f0a:	ee75 aa06 	vadd.f32	s21, s10, s12
 8007f0e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007f12:	ee35 aac7 	vsub.f32	s20, s11, s14
 8007f16:	ed45 4a01 	vstr	s9, [r5, #-4]
 8007f1a:	edd6 1a00 	vldr	s3, [r6]
 8007f1e:	edd7 0a00 	vldr	s1, [r7]
 8007f22:	ed92 4a02 	vldr	s8, [r2, #8]
 8007f26:	edd3 3a02 	vldr	s7, [r3, #8]
 8007f2a:	ed93 2a01 	vldr	s4, [r3, #4]
 8007f2e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8007f32:	edd2 2a01 	vldr	s5, [r2, #4]
 8007f36:	ed57 9a01 	vldr	s19, [r7, #-4]
 8007f3a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8007f3e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8007f42:	ee74 8a84 	vadd.f32	s17, s9, s8
 8007f46:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8007f4a:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8007f4e:	ee7a aae6 	vsub.f32	s21, s21, s13
 8007f52:	ee18 aa90 	vmov	sl, s17
 8007f56:	f847 a908 	str.w	sl, [r7], #-8
 8007f5a:	edd2 8a01 	vldr	s17, [r2, #4]
 8007f5e:	ed93 9a01 	vldr	s18, [r3, #4]
 8007f62:	ee73 8a28 	vadd.f32	s17, s6, s17
 8007f66:	ee3a aa27 	vadd.f32	s20, s20, s15
 8007f6a:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007f6e:	ee74 0a63 	vsub.f32	s1, s8, s7
 8007f72:	edc7 8a01 	vstr	s17, [r7, #4]
 8007f76:	ed18 ba02 	vldr	s22, [r8, #-8]
 8007f7a:	ed58 8a01 	vldr	s17, [r8, #-4]
 8007f7e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8007f82:	ee6a ba28 	vmul.f32	s23, s20, s17
 8007f86:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8007f8a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8007f8e:	ee31 9a20 	vadd.f32	s18, s2, s1
 8007f92:	ee79 9a82 	vadd.f32	s19, s19, s4
 8007f96:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8007f9a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8007f9e:	ee69 baa8 	vmul.f32	s23, s19, s17
 8007fa2:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8007fa6:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8007faa:	ee69 8a28 	vmul.f32	s17, s18, s17
 8007fae:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8007fb2:	ee1c aa10 	vmov	sl, s24
 8007fb6:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8007fba:	f841 ab08 	str.w	sl, [r1], #8
 8007fbe:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8007fc2:	ee3b bacb 	vsub.f32	s22, s23, s22
 8007fc6:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8007fca:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007fce:	ed01 aa01 	vstr	s20, [r1, #-4]
 8007fd2:	edc2 8a01 	vstr	s17, [r2, #4]
 8007fd6:	ed82 ba02 	vstr	s22, [r2, #8]
 8007fda:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8007fde:	ee74 3a63 	vsub.f32	s7, s8, s7
 8007fe2:	ee38 8a47 	vsub.f32	s16, s16, s14
 8007fe6:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8007fea:	ee30 0a46 	vsub.f32	s0, s0, s12
 8007fee:	ee33 3a42 	vsub.f32	s6, s6, s4
 8007ff2:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007ff6:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007ffa:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8007ffe:	ee63 8a04 	vmul.f32	s17, s6, s8
 8008002:	ee28 aa24 	vmul.f32	s20, s16, s9
 8008006:	ee60 9a04 	vmul.f32	s19, s0, s8
 800800a:	ee28 8a04 	vmul.f32	s16, s16, s8
 800800e:	ee20 0a24 	vmul.f32	s0, s0, s9
 8008012:	ee63 3a84 	vmul.f32	s7, s7, s8
 8008016:	ee39 4a68 	vsub.f32	s8, s18, s17
 800801a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800801e:	ee14 aa10 	vmov	sl, s8
 8008022:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008026:	ee63 4a24 	vmul.f32	s9, s6, s9
 800802a:	ed44 9a02 	vstr	s19, [r4, #-8]
 800802e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8008032:	ed04 0a01 	vstr	s0, [r4, #-4]
 8008036:	f846 a908 	str.w	sl, [r6], #-8
 800803a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800803e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8008042:	edc6 3a01 	vstr	s7, [r6, #4]
 8008046:	ee76 6a26 	vadd.f32	s13, s12, s13
 800804a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800804e:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8008052:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8008056:	ee67 5a86 	vmul.f32	s11, s15, s12
 800805a:	ee26 5a87 	vmul.f32	s10, s13, s14
 800805e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8008062:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008066:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800806a:	ee75 5a25 	vadd.f32	s11, s10, s11
 800806e:	ee62 0a86 	vmul.f32	s1, s5, s12
 8008072:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008076:	ee67 7a87 	vmul.f32	s15, s15, s14
 800807a:	ee21 6a06 	vmul.f32	s12, s2, s12
 800807e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8008082:	ee21 1a07 	vmul.f32	s2, s2, s14
 8008086:	ee15 aa90 	vmov	sl, s11
 800808a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800808e:	f840 ab08 	str.w	sl, [r0], #8
 8008092:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008096:	ee76 2a22 	vadd.f32	s5, s12, s5
 800809a:	f1b9 0901 	subs.w	r9, r9, #1
 800809e:	ed40 7a01 	vstr	s15, [r0, #-4]
 80080a2:	f105 0508 	add.w	r5, r5, #8
 80080a6:	ed83 1a02 	vstr	s2, [r3, #8]
 80080aa:	edc3 2a01 	vstr	s5, [r3, #4]
 80080ae:	f108 0808 	add.w	r8, r8, #8
 80080b2:	f1a2 0208 	sub.w	r2, r2, #8
 80080b6:	f10c 0c10 	add.w	ip, ip, #16
 80080ba:	f104 0408 	add.w	r4, r4, #8
 80080be:	f10e 0e18 	add.w	lr, lr, #24
 80080c2:	f1a3 0308 	sub.w	r3, r3, #8
 80080c6:	f47f aefc 	bne.w	8007ec2 <arm_cfft_radix8by4_f32+0x13e>
 80080ca:	9908      	ldr	r1, [sp, #32]
 80080cc:	9802      	ldr	r0, [sp, #8]
 80080ce:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80080d2:	00cb      	lsls	r3, r1, #3
 80080d4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80080d8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80080dc:	9102      	str	r1, [sp, #8]
 80080de:	9905      	ldr	r1, [sp, #20]
 80080e0:	4419      	add	r1, r3
 80080e2:	9105      	str	r1, [sp, #20]
 80080e4:	9904      	ldr	r1, [sp, #16]
 80080e6:	4419      	add	r1, r3
 80080e8:	9104      	str	r1, [sp, #16]
 80080ea:	9906      	ldr	r1, [sp, #24]
 80080ec:	449b      	add	fp, r3
 80080ee:	4419      	add	r1, r3
 80080f0:	449a      	add	sl, r3
 80080f2:	9b03      	ldr	r3, [sp, #12]
 80080f4:	9106      	str	r1, [sp, #24]
 80080f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080fa:	9303      	str	r3, [sp, #12]
 80080fc:	9a05      	ldr	r2, [sp, #20]
 80080fe:	9806      	ldr	r0, [sp, #24]
 8008100:	ed92 4a00 	vldr	s8, [r2]
 8008104:	ed90 7a00 	vldr	s14, [r0]
 8008108:	ed9b 3a00 	vldr	s6, [fp]
 800810c:	edda 3a00 	vldr	s7, [sl]
 8008110:	edd2 4a01 	vldr	s9, [r2, #4]
 8008114:	edd0 6a01 	vldr	s13, [r0, #4]
 8008118:	ed9a 2a01 	vldr	s4, [sl, #4]
 800811c:	eddb 7a01 	vldr	s15, [fp, #4]
 8008120:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8008124:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008126:	ee34 6a07 	vadd.f32	s12, s8, s14
 800812a:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800812e:	ee36 5a03 	vadd.f32	s10, s12, s6
 8008132:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8008136:	ee35 5a23 	vadd.f32	s10, s10, s7
 800813a:	ee34 7a47 	vsub.f32	s14, s8, s14
 800813e:	ed82 5a00 	vstr	s10, [r2]
 8008142:	ed9b 5a01 	vldr	s10, [fp, #4]
 8008146:	edda 4a01 	vldr	s9, [sl, #4]
 800814a:	ee35 5a85 	vadd.f32	s10, s11, s10
 800814e:	ee37 4a27 	vadd.f32	s8, s14, s15
 8008152:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008156:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800815a:	ed82 5a01 	vstr	s10, [r2, #4]
 800815e:	9a04      	ldr	r2, [sp, #16]
 8008160:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8008164:	edd2 1a00 	vldr	s3, [r2]
 8008168:	edd2 2a01 	vldr	s5, [r2, #4]
 800816c:	9a02      	ldr	r2, [sp, #8]
 800816e:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008172:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008176:	ee64 4a21 	vmul.f32	s9, s8, s3
 800817a:	ee24 4a22 	vmul.f32	s8, s8, s5
 800817e:	ee65 2a22 	vmul.f32	s5, s10, s5
 8008182:	ee25 5a21 	vmul.f32	s10, s10, s3
 8008186:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800818a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800818e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8008192:	edcb 2a00 	vstr	s5, [fp]
 8008196:	ed8b 5a01 	vstr	s10, [fp, #4]
 800819a:	ed92 4a01 	vldr	s8, [r2, #4]
 800819e:	ed92 5a00 	vldr	s10, [r2]
 80081a2:	9a03      	ldr	r2, [sp, #12]
 80081a4:	ee36 6a63 	vsub.f32	s12, s12, s7
 80081a8:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80081ac:	ee66 4a05 	vmul.f32	s9, s12, s10
 80081b0:	ee25 5a85 	vmul.f32	s10, s11, s10
 80081b4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80081b8:	ee65 5a84 	vmul.f32	s11, s11, s8
 80081bc:	ee35 6a46 	vsub.f32	s12, s10, s12
 80081c0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80081c4:	ee76 6a83 	vadd.f32	s13, s13, s6
 80081c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80081cc:	ed80 6a01 	vstr	s12, [r0, #4]
 80081d0:	edc0 5a00 	vstr	s11, [r0]
 80081d4:	edd2 5a01 	vldr	s11, [r2, #4]
 80081d8:	9807      	ldr	r0, [sp, #28]
 80081da:	ee77 7a02 	vadd.f32	s15, s14, s4
 80081de:	ee36 7ae3 	vsub.f32	s14, s13, s7
 80081e2:	edd2 6a00 	vldr	s13, [r2]
 80081e6:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80081ea:	ee67 6a26 	vmul.f32	s13, s14, s13
 80081ee:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80081f2:	ee27 7a25 	vmul.f32	s14, s14, s11
 80081f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80081fa:	ee36 7a07 	vadd.f32	s14, s12, s14
 80081fe:	edca 7a01 	vstr	s15, [sl, #4]
 8008202:	ed8a 7a00 	vstr	s14, [sl]
 8008206:	6872      	ldr	r2, [r6, #4]
 8008208:	4621      	mov	r1, r4
 800820a:	2304      	movs	r3, #4
 800820c:	f000 fce6 	bl	8008bdc <arm_radix8_butterfly_f32>
 8008210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008212:	6872      	ldr	r2, [r6, #4]
 8008214:	4621      	mov	r1, r4
 8008216:	2304      	movs	r3, #4
 8008218:	f000 fce0 	bl	8008bdc <arm_radix8_butterfly_f32>
 800821c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800821e:	6872      	ldr	r2, [r6, #4]
 8008220:	4621      	mov	r1, r4
 8008222:	2304      	movs	r3, #4
 8008224:	f000 fcda 	bl	8008bdc <arm_radix8_butterfly_f32>
 8008228:	6872      	ldr	r2, [r6, #4]
 800822a:	9801      	ldr	r0, [sp, #4]
 800822c:	4621      	mov	r1, r4
 800822e:	2304      	movs	r3, #4
 8008230:	b00f      	add	sp, #60	; 0x3c
 8008232:	ecbd 8b0a 	vpop	{d8-d12}
 8008236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823a:	f000 bccf 	b.w	8008bdc <arm_radix8_butterfly_f32>
 800823e:	bf00      	nop

08008240 <arm_cfft_f32>:
 8008240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008244:	2a01      	cmp	r2, #1
 8008246:	4606      	mov	r6, r0
 8008248:	4617      	mov	r7, r2
 800824a:	460c      	mov	r4, r1
 800824c:	4698      	mov	r8, r3
 800824e:	8805      	ldrh	r5, [r0, #0]
 8008250:	d054      	beq.n	80082fc <arm_cfft_f32+0xbc>
 8008252:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008256:	d04c      	beq.n	80082f2 <arm_cfft_f32+0xb2>
 8008258:	d916      	bls.n	8008288 <arm_cfft_f32+0x48>
 800825a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800825e:	d01a      	beq.n	8008296 <arm_cfft_f32+0x56>
 8008260:	d95c      	bls.n	800831c <arm_cfft_f32+0xdc>
 8008262:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008266:	d044      	beq.n	80082f2 <arm_cfft_f32+0xb2>
 8008268:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800826c:	d105      	bne.n	800827a <arm_cfft_f32+0x3a>
 800826e:	2301      	movs	r3, #1
 8008270:	6872      	ldr	r2, [r6, #4]
 8008272:	4629      	mov	r1, r5
 8008274:	4620      	mov	r0, r4
 8008276:	f000 fcb1 	bl	8008bdc <arm_radix8_butterfly_f32>
 800827a:	f1b8 0f00 	cmp.w	r8, #0
 800827e:	d111      	bne.n	80082a4 <arm_cfft_f32+0x64>
 8008280:	2f01      	cmp	r7, #1
 8008282:	d016      	beq.n	80082b2 <arm_cfft_f32+0x72>
 8008284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008288:	2d20      	cmp	r5, #32
 800828a:	d032      	beq.n	80082f2 <arm_cfft_f32+0xb2>
 800828c:	d94a      	bls.n	8008324 <arm_cfft_f32+0xe4>
 800828e:	2d40      	cmp	r5, #64	; 0x40
 8008290:	d0ed      	beq.n	800826e <arm_cfft_f32+0x2e>
 8008292:	2d80      	cmp	r5, #128	; 0x80
 8008294:	d1f1      	bne.n	800827a <arm_cfft_f32+0x3a>
 8008296:	4621      	mov	r1, r4
 8008298:	4630      	mov	r0, r6
 800829a:	f7ff fca3 	bl	8007be4 <arm_cfft_radix8by2_f32>
 800829e:	f1b8 0f00 	cmp.w	r8, #0
 80082a2:	d0ed      	beq.n	8008280 <arm_cfft_f32+0x40>
 80082a4:	68b2      	ldr	r2, [r6, #8]
 80082a6:	89b1      	ldrh	r1, [r6, #12]
 80082a8:	4620      	mov	r0, r4
 80082aa:	f7f7 ff91 	bl	80001d0 <arm_bitreversal_32>
 80082ae:	2f01      	cmp	r7, #1
 80082b0:	d1e8      	bne.n	8008284 <arm_cfft_f32+0x44>
 80082b2:	ee07 5a90 	vmov	s15, r5
 80082b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80082c2:	2d00      	cmp	r5, #0
 80082c4:	d0de      	beq.n	8008284 <arm_cfft_f32+0x44>
 80082c6:	f104 0108 	add.w	r1, r4, #8
 80082ca:	2300      	movs	r3, #0
 80082cc:	3301      	adds	r3, #1
 80082ce:	429d      	cmp	r5, r3
 80082d0:	f101 0108 	add.w	r1, r1, #8
 80082d4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80082d8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80082dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80082e0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80082e4:	ed01 7a04 	vstr	s14, [r1, #-16]
 80082e8:	ed41 7a03 	vstr	s15, [r1, #-12]
 80082ec:	d1ee      	bne.n	80082cc <arm_cfft_f32+0x8c>
 80082ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f2:	4621      	mov	r1, r4
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7ff fd45 	bl	8007d84 <arm_cfft_radix8by4_f32>
 80082fa:	e7be      	b.n	800827a <arm_cfft_f32+0x3a>
 80082fc:	b1ad      	cbz	r5, 800832a <arm_cfft_f32+0xea>
 80082fe:	f101 030c 	add.w	r3, r1, #12
 8008302:	2200      	movs	r2, #0
 8008304:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008308:	3201      	adds	r2, #1
 800830a:	eef1 7a67 	vneg.f32	s15, s15
 800830e:	4295      	cmp	r5, r2
 8008310:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008314:	f103 0308 	add.w	r3, r3, #8
 8008318:	d1f4      	bne.n	8008304 <arm_cfft_f32+0xc4>
 800831a:	e79a      	b.n	8008252 <arm_cfft_f32+0x12>
 800831c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008320:	d0a5      	beq.n	800826e <arm_cfft_f32+0x2e>
 8008322:	e7aa      	b.n	800827a <arm_cfft_f32+0x3a>
 8008324:	2d10      	cmp	r5, #16
 8008326:	d0b6      	beq.n	8008296 <arm_cfft_f32+0x56>
 8008328:	e7a7      	b.n	800827a <arm_cfft_f32+0x3a>
 800832a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800832e:	d894      	bhi.n	800825a <arm_cfft_f32+0x1a>
 8008330:	e7aa      	b.n	8008288 <arm_cfft_f32+0x48>
 8008332:	bf00      	nop

08008334 <arm_mat_init_f32>:
 8008334:	8001      	strh	r1, [r0, #0]
 8008336:	8042      	strh	r2, [r0, #2]
 8008338:	6043      	str	r3, [r0, #4]
 800833a:	4770      	bx	lr

0800833c <arm_fir_init_f32>:
 800833c:	b570      	push	{r4, r5, r6, lr}
 800833e:	9c04      	ldr	r4, [sp, #16]
 8008340:	6082      	str	r2, [r0, #8]
 8008342:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8008346:	3c01      	subs	r4, #1
 8008348:	4605      	mov	r5, r0
 800834a:	440c      	add	r4, r1
 800834c:	8001      	strh	r1, [r0, #0]
 800834e:	461e      	mov	r6, r3
 8008350:	00a2      	lsls	r2, r4, #2
 8008352:	4618      	mov	r0, r3
 8008354:	2100      	movs	r1, #0
 8008356:	f000 ff81 	bl	800925c <memset>
 800835a:	606e      	str	r6, [r5, #4]
 800835c:	bd70      	pop	{r4, r5, r6, pc}
 800835e:	bf00      	nop

08008360 <arm_fir_f32>:
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	ed2d 8b10 	vpush	{d8-d15}
 8008368:	b089      	sub	sp, #36	; 0x24
 800836a:	4605      	mov	r5, r0
 800836c:	9003      	str	r0, [sp, #12]
 800836e:	8800      	ldrh	r0, [r0, #0]
 8008370:	9304      	str	r3, [sp, #16]
 8008372:	461e      	mov	r6, r3
 8008374:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8008378:	9001      	str	r0, [sp, #4]
 800837a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800837e:	3b01      	subs	r3, #1
 8008380:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8008384:	08f3      	lsrs	r3, r6, #3
 8008386:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800838a:	9400      	str	r4, [sp, #0]
 800838c:	9302      	str	r3, [sp, #8]
 800838e:	f000 81ef 	beq.w	8008770 <arm_fir_f32+0x410>
 8008392:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8008396:	469e      	mov	lr, r3
 8008398:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800839c:	1f1e      	subs	r6, r3, #4
 800839e:	4625      	mov	r5, r4
 80083a0:	9605      	str	r6, [sp, #20]
 80083a2:	4604      	mov	r4, r0
 80083a4:	eb08 0003 	add.w	r0, r8, r3
 80083a8:	f004 0a07 	and.w	sl, r4, #7
 80083ac:	4613      	mov	r3, r2
 80083ae:	f10c 0420 	add.w	r4, ip, #32
 80083b2:	f8cd c018 	str.w	ip, [sp, #24]
 80083b6:	4684      	mov	ip, r0
 80083b8:	4648      	mov	r0, r9
 80083ba:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80083be:	9107      	str	r1, [sp, #28]
 80083c0:	f105 0720 	add.w	r7, r5, #32
 80083c4:	f101 0620 	add.w	r6, r1, #32
 80083c8:	f102 0520 	add.w	r5, r2, #32
 80083cc:	4652      	mov	r2, sl
 80083ce:	469a      	mov	sl, r3
 80083d0:	f856 3c20 	ldr.w	r3, [r6, #-32]
 80083d4:	f847 3c20 	str.w	r3, [r7, #-32]
 80083d8:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 80083dc:	f847 3c1c 	str.w	r3, [r7, #-28]
 80083e0:	f856 3c18 	ldr.w	r3, [r6, #-24]
 80083e4:	f847 3c18 	str.w	r3, [r7, #-24]
 80083e8:	f856 3c14 	ldr.w	r3, [r6, #-20]
 80083ec:	f847 3c14 	str.w	r3, [r7, #-20]
 80083f0:	f856 3c10 	ldr.w	r3, [r6, #-16]
 80083f4:	f847 3c10 	str.w	r3, [r7, #-16]
 80083f8:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80083fc:	f847 3c0c 	str.w	r3, [r7, #-12]
 8008400:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8008404:	f847 3c08 	str.w	r3, [r7, #-8]
 8008408:	eddf 3af1 	vldr	s7, [pc, #964]	; 80087d0 <arm_fir_f32+0x470>
 800840c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008410:	f847 3c04 	str.w	r3, [r7, #-4]
 8008414:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8008418:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800841c:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8008420:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8008424:	ed14 1a04 	vldr	s2, [r4, #-16]
 8008428:	ed54 0a03 	vldr	s1, [r4, #-12]
 800842c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008430:	1f21      	subs	r1, r4, #4
 8008432:	eef0 8a63 	vmov.f32	s17, s7
 8008436:	eef0 9a63 	vmov.f32	s19, s7
 800843a:	eef0 aa63 	vmov.f32	s21, s7
 800843e:	eef0 ba63 	vmov.f32	s23, s7
 8008442:	eeb0 ca63 	vmov.f32	s24, s7
 8008446:	eef0 ca63 	vmov.f32	s25, s7
 800844a:	eeb0 da63 	vmov.f32	s26, s7
 800844e:	2800      	cmp	r0, #0
 8008450:	f000 81e8 	beq.w	8008824 <arm_fir_f32+0x4c4>
 8008454:	f108 0120 	add.w	r1, r8, #32
 8008458:	f104 031c 	add.w	r3, r4, #28
 800845c:	4683      	mov	fp, r0
 800845e:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8008462:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8008466:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 800846a:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 800846e:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8008472:	ed11 6a04 	vldr	s12, [r1, #-16]
 8008476:	ed51 6a03 	vldr	s13, [r1, #-12]
 800847a:	ed11 7a02 	vldr	s14, [r1, #-8]
 800847e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008482:	ee24 fa03 	vmul.f32	s30, s8, s6
 8008486:	ee64 ea22 	vmul.f32	s29, s8, s5
 800848a:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 800848e:	ee24 ea02 	vmul.f32	s28, s8, s4
 8008492:	ee64 da21 	vmul.f32	s27, s8, s3
 8008496:	ee24 ba01 	vmul.f32	s22, s8, s2
 800849a:	ee24 aa20 	vmul.f32	s20, s8, s1
 800849e:	ee24 9a00 	vmul.f32	s18, s8, s0
 80084a2:	ee24 4a08 	vmul.f32	s8, s8, s16
 80084a6:	ee3f da0d 	vadd.f32	s26, s30, s26
 80084aa:	ee74 3a23 	vadd.f32	s7, s8, s7
 80084ae:	ee24 faa2 	vmul.f32	s30, s9, s5
 80084b2:	ee7e caac 	vadd.f32	s25, s29, s25
 80084b6:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 80084ba:	ee64 ea82 	vmul.f32	s29, s9, s4
 80084be:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80084c2:	ee7d baab 	vadd.f32	s23, s27, s23
 80084c6:	ee24 eaa1 	vmul.f32	s28, s9, s3
 80084ca:	ee64 da81 	vmul.f32	s27, s9, s2
 80084ce:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80084d2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80084d6:	ee24 baa0 	vmul.f32	s22, s9, s1
 80084da:	ee24 aa80 	vmul.f32	s20, s9, s0
 80084de:	ee79 8a28 	vadd.f32	s17, s18, s17
 80084e2:	ee28 9a24 	vmul.f32	s18, s16, s9
 80084e6:	ee64 4a83 	vmul.f32	s9, s9, s6
 80084ea:	ee25 4a02 	vmul.f32	s8, s10, s4
 80084ee:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80084f2:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 80084f6:	ee7e caac 	vadd.f32	s25, s29, s25
 80084fa:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80084fe:	ee65 ea21 	vmul.f32	s29, s10, s3
 8008502:	ee25 ea01 	vmul.f32	s28, s10, s2
 8008506:	ee7d baab 	vadd.f32	s23, s27, s23
 800850a:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800850e:	ee65 da20 	vmul.f32	s27, s10, s1
 8008512:	ee25 ba00 	vmul.f32	s22, s10, s0
 8008516:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800851a:	ee79 8a28 	vadd.f32	s17, s18, s17
 800851e:	ee28 aa05 	vmul.f32	s20, s16, s10
 8008522:	ee23 9a05 	vmul.f32	s18, s6, s10
 8008526:	ee3d da0f 	vadd.f32	s26, s26, s30
 800852a:	ee25 5a22 	vmul.f32	s10, s10, s5
 800852e:	ee65 3aa1 	vmul.f32	s7, s11, s3
 8008532:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008536:	ed53 1a04 	vldr	s3, [r3, #-16]
 800853a:	ee7e caac 	vadd.f32	s25, s29, s25
 800853e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8008542:	ee65 ea81 	vmul.f32	s29, s11, s2
 8008546:	ee25 eaa0 	vmul.f32	s28, s11, s1
 800854a:	ee7d baab 	vadd.f32	s23, s27, s23
 800854e:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8008552:	ee65 da80 	vmul.f32	s27, s11, s0
 8008556:	ee28 ba25 	vmul.f32	s22, s16, s11
 800855a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800855e:	ee79 8a28 	vadd.f32	s17, s18, s17
 8008562:	ee23 aa25 	vmul.f32	s20, s6, s11
 8008566:	ee22 9aa5 	vmul.f32	s18, s5, s11
 800856a:	ee3d da04 	vadd.f32	s26, s26, s8
 800856e:	ee65 5a82 	vmul.f32	s11, s11, s4
 8008572:	ee66 4a01 	vmul.f32	s9, s12, s2
 8008576:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800857a:	ed13 1a03 	vldr	s2, [r3, #-12]
 800857e:	ee75 5a85 	vadd.f32	s11, s11, s10
 8008582:	ee3d da23 	vadd.f32	s26, s26, s7
 8008586:	ee22 5a06 	vmul.f32	s10, s4, s12
 800858a:	ee7e caac 	vadd.f32	s25, s29, s25
 800858e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8008592:	ee66 ea20 	vmul.f32	s29, s12, s1
 8008596:	ee26 ea00 	vmul.f32	s28, s12, s0
 800859a:	ee7d baab 	vadd.f32	s23, s27, s23
 800859e:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80085a2:	ee68 da06 	vmul.f32	s27, s16, s12
 80085a6:	ee23 ba06 	vmul.f32	s22, s6, s12
 80085aa:	ee22 aa86 	vmul.f32	s20, s5, s12
 80085ae:	ee79 8a28 	vadd.f32	s17, s18, s17
 80085b2:	ee26 6a21 	vmul.f32	s12, s12, s3
 80085b6:	ee26 9aa0 	vmul.f32	s18, s13, s1
 80085ba:	ee36 6a25 	vadd.f32	s12, s12, s11
 80085be:	ed53 0a02 	vldr	s1, [r3, #-8]
 80085c2:	ee61 5aa6 	vmul.f32	s11, s3, s13
 80085c6:	ee3d da24 	vadd.f32	s26, s26, s9
 80085ca:	ee7e caac 	vadd.f32	s25, s29, s25
 80085ce:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80085d2:	ee66 ea80 	vmul.f32	s29, s13, s0
 80085d6:	ee28 ea26 	vmul.f32	s28, s16, s13
 80085da:	ee7d baab 	vadd.f32	s23, s27, s23
 80085de:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80085e2:	ee63 da26 	vmul.f32	s27, s6, s13
 80085e6:	ee22 baa6 	vmul.f32	s22, s5, s13
 80085ea:	ee3a aa29 	vadd.f32	s20, s20, s19
 80085ee:	ee75 8a28 	vadd.f32	s17, s10, s17
 80085f2:	ee62 9a26 	vmul.f32	s19, s4, s13
 80085f6:	ee66 6a81 	vmul.f32	s13, s13, s2
 80085fa:	ee27 5a00 	vmul.f32	s10, s14, s0
 80085fe:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8008602:	ee75 8aa8 	vadd.f32	s17, s11, s17
 8008606:	ee7e caac 	vadd.f32	s25, s29, s25
 800860a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800860e:	ee68 ea07 	vmul.f32	s29, s16, s14
 8008612:	ee23 ea07 	vmul.f32	s28, s6, s14
 8008616:	ee7d baab 	vadd.f32	s23, s27, s23
 800861a:	ee22 ba07 	vmul.f32	s22, s4, s14
 800861e:	ee62 da87 	vmul.f32	s27, s5, s14
 8008622:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8008626:	ee76 6a86 	vadd.f32	s13, s13, s12
 800862a:	ee61 9a87 	vmul.f32	s19, s3, s14
 800862e:	ee67 3a20 	vmul.f32	s7, s14, s1
 8008632:	ed13 0a01 	vldr	s0, [r3, #-4]
 8008636:	ee3d da09 	vadd.f32	s26, s26, s18
 800863a:	ee21 6a07 	vmul.f32	s12, s2, s14
 800863e:	ee3d da05 	vadd.f32	s26, s26, s10
 8008642:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008646:	ee63 5a27 	vmul.f32	s11, s6, s15
 800864a:	ee22 5aa7 	vmul.f32	s10, s5, s15
 800864e:	ee62 4a27 	vmul.f32	s9, s4, s15
 8008652:	ee3b ba2a 	vadd.f32	s22, s22, s21
 8008656:	ee39 aa8a 	vadd.f32	s20, s19, s20
 800865a:	ee61 aaa7 	vmul.f32	s21, s3, s15
 800865e:	ee61 9a27 	vmul.f32	s19, s2, s15
 8008662:	ee36 7a28 	vadd.f32	s14, s12, s17
 8008666:	ee7e caac 	vadd.f32	s25, s29, s25
 800866a:	ee60 8aa7 	vmul.f32	s17, s1, s15
 800866e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8008672:	ee7d baab 	vadd.f32	s23, s27, s23
 8008676:	ee73 3aa6 	vadd.f32	s7, s7, s13
 800867a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800867e:	f1bb 0b01 	subs.w	fp, fp, #1
 8008682:	f101 0120 	add.w	r1, r1, #32
 8008686:	ee38 da0d 	vadd.f32	s26, s16, s26
 800868a:	ee75 caac 	vadd.f32	s25, s11, s25
 800868e:	ee35 ca0c 	vadd.f32	s24, s10, s24
 8008692:	ee74 baab 	vadd.f32	s23, s9, s23
 8008696:	ee7a aa8b 	vadd.f32	s21, s21, s22
 800869a:	ee79 9a8a 	vadd.f32	s19, s19, s20
 800869e:	ee78 8a87 	vadd.f32	s17, s17, s14
 80086a2:	ee77 3aa3 	vadd.f32	s7, s15, s7
 80086a6:	f103 0320 	add.w	r3, r3, #32
 80086aa:	f47f aed8 	bne.w	800845e <arm_fir_f32+0xfe>
 80086ae:	eb09 0104 	add.w	r1, r9, r4
 80086b2:	46e3      	mov	fp, ip
 80086b4:	b3a2      	cbz	r2, 8008720 <arm_fir_f32+0x3c0>
 80086b6:	4613      	mov	r3, r2
 80086b8:	ecbb 6a01 	vldmia	fp!, {s12}
 80086bc:	ecf1 7a01 	vldmia	r1!, {s15}
 80086c0:	ee26 3a03 	vmul.f32	s6, s12, s6
 80086c4:	ee26 4a22 	vmul.f32	s8, s12, s5
 80086c8:	ee66 4a02 	vmul.f32	s9, s12, s4
 80086cc:	ee26 5a21 	vmul.f32	s10, s12, s3
 80086d0:	ee66 5a01 	vmul.f32	s11, s12, s2
 80086d4:	ee66 6a20 	vmul.f32	s13, s12, s1
 80086d8:	ee26 7a00 	vmul.f32	s14, s12, s0
 80086dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80086e0:	3b01      	subs	r3, #1
 80086e2:	ee3d da03 	vadd.f32	s26, s26, s6
 80086e6:	ee7c ca84 	vadd.f32	s25, s25, s8
 80086ea:	eeb0 3a62 	vmov.f32	s6, s5
 80086ee:	ee3c ca24 	vadd.f32	s24, s24, s9
 80086f2:	eef0 2a42 	vmov.f32	s5, s4
 80086f6:	ee7b ba85 	vadd.f32	s23, s23, s10
 80086fa:	eeb0 2a61 	vmov.f32	s4, s3
 80086fe:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8008702:	eef0 1a41 	vmov.f32	s3, s2
 8008706:	ee79 9aa6 	vadd.f32	s19, s19, s13
 800870a:	eeb0 1a60 	vmov.f32	s2, s1
 800870e:	ee78 8a87 	vadd.f32	s17, s17, s14
 8008712:	eef0 0a40 	vmov.f32	s1, s0
 8008716:	ee73 3a86 	vadd.f32	s7, s7, s12
 800871a:	eeb0 0a67 	vmov.f32	s0, s15
 800871e:	d1cb      	bne.n	80086b8 <arm_fir_f32+0x358>
 8008720:	f1be 0e01 	subs.w	lr, lr, #1
 8008724:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8008728:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 800872c:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8008730:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8008734:	ed45 aa04 	vstr	s21, [r5, #-16]
 8008738:	ed45 9a03 	vstr	s19, [r5, #-12]
 800873c:	ed45 8a02 	vstr	s17, [r5, #-8]
 8008740:	ed45 3a01 	vstr	s7, [r5, #-4]
 8008744:	f107 0720 	add.w	r7, r7, #32
 8008748:	f106 0620 	add.w	r6, r6, #32
 800874c:	f104 0420 	add.w	r4, r4, #32
 8008750:	f105 0520 	add.w	r5, r5, #32
 8008754:	f47f ae3c 	bne.w	80083d0 <arm_fir_f32+0x70>
 8008758:	9b02      	ldr	r3, [sp, #8]
 800875a:	9800      	ldr	r0, [sp, #0]
 800875c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8008760:	9907      	ldr	r1, [sp, #28]
 8008762:	015b      	lsls	r3, r3, #5
 8008764:	4652      	mov	r2, sl
 8008766:	4418      	add	r0, r3
 8008768:	9000      	str	r0, [sp, #0]
 800876a:	4419      	add	r1, r3
 800876c:	449c      	add	ip, r3
 800876e:	441a      	add	r2, r3
 8008770:	9b04      	ldr	r3, [sp, #16]
 8008772:	f013 0e07 	ands.w	lr, r3, #7
 8008776:	d01f      	beq.n	80087b8 <arm_fir_f32+0x458>
 8008778:	9f00      	ldr	r7, [sp, #0]
 800877a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800877e:	4676      	mov	r6, lr
 8008780:	4665      	mov	r5, ip
 8008782:	f851 3b04 	ldr.w	r3, [r1], #4
 8008786:	eddf 6a12 	vldr	s13, [pc, #72]	; 80087d0 <arm_fir_f32+0x470>
 800878a:	f847 3b04 	str.w	r3, [r7], #4
 800878e:	4644      	mov	r4, r8
 8008790:	464b      	mov	r3, r9
 8008792:	4628      	mov	r0, r5
 8008794:	ecb0 7a01 	vldmia	r0!, {s14}
 8008798:	ecf4 7a01 	vldmia	r4!, {s15}
 800879c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a0:	3b01      	subs	r3, #1
 80087a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80087a6:	d1f5      	bne.n	8008794 <arm_fir_f32+0x434>
 80087a8:	3e01      	subs	r6, #1
 80087aa:	ece2 6a01 	vstmia	r2!, {s13}
 80087ae:	f105 0504 	add.w	r5, r5, #4
 80087b2:	d1e6      	bne.n	8008782 <arm_fir_f32+0x422>
 80087b4:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 80087b8:	9b01      	ldr	r3, [sp, #4]
 80087ba:	1e59      	subs	r1, r3, #1
 80087bc:	9b03      	ldr	r3, [sp, #12]
 80087be:	088e      	lsrs	r6, r1, #2
 80087c0:	685c      	ldr	r4, [r3, #4]
 80087c2:	d020      	beq.n	8008806 <arm_fir_f32+0x4a6>
 80087c4:	f104 0210 	add.w	r2, r4, #16
 80087c8:	f10c 0310 	add.w	r3, ip, #16
 80087cc:	4630      	mov	r0, r6
 80087ce:	e001      	b.n	80087d4 <arm_fir_f32+0x474>
 80087d0:	00000000 	.word	0x00000000
 80087d4:	f853 5c10 	ldr.w	r5, [r3, #-16]
 80087d8:	f842 5c10 	str.w	r5, [r2, #-16]
 80087dc:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 80087e0:	f842 5c0c 	str.w	r5, [r2, #-12]
 80087e4:	f853 5c08 	ldr.w	r5, [r3, #-8]
 80087e8:	f842 5c08 	str.w	r5, [r2, #-8]
 80087ec:	f853 5c04 	ldr.w	r5, [r3, #-4]
 80087f0:	f842 5c04 	str.w	r5, [r2, #-4]
 80087f4:	3801      	subs	r0, #1
 80087f6:	f103 0310 	add.w	r3, r3, #16
 80087fa:	f102 0210 	add.w	r2, r2, #16
 80087fe:	d1e9      	bne.n	80087d4 <arm_fir_f32+0x474>
 8008800:	0133      	lsls	r3, r6, #4
 8008802:	441c      	add	r4, r3
 8008804:	449c      	add	ip, r3
 8008806:	f011 0303 	ands.w	r3, r1, #3
 800880a:	d006      	beq.n	800881a <arm_fir_f32+0x4ba>
 800880c:	4622      	mov	r2, r4
 800880e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008812:	f842 1b04 	str.w	r1, [r2], #4
 8008816:	3b01      	subs	r3, #1
 8008818:	d1f9      	bne.n	800880e <arm_fir_f32+0x4ae>
 800881a:	b009      	add	sp, #36	; 0x24
 800881c:	ecbd 8b10 	vpop	{d8-d15}
 8008820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008824:	46c3      	mov	fp, r8
 8008826:	e745      	b.n	80086b4 <arm_fir_f32+0x354>

08008828 <arm_cmplx_mag_f32>:
 8008828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800882c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8008830:	b084      	sub	sp, #16
 8008832:	d07f      	beq.n	8008934 <arm_cmplx_mag_f32+0x10c>
 8008834:	2700      	movs	r7, #0
 8008836:	f100 0420 	add.w	r4, r0, #32
 800883a:	f101 0510 	add.w	r5, r1, #16
 800883e:	4646      	mov	r6, r8
 8008840:	e05a      	b.n	80088f8 <arm_cmplx_mag_f32+0xd0>
 8008842:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008846:	eeb4 0a40 	vcmp.f32	s0, s0
 800884a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800884e:	f040 80a4 	bne.w	800899a <arm_cmplx_mag_f32+0x172>
 8008852:	ed05 0a04 	vstr	s0, [r5, #-16]
 8008856:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800885a:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800885e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008862:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008866:	ee77 7a80 	vadd.f32	s15, s15, s0
 800886a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800886e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008872:	f2c0 808f 	blt.w	8008994 <arm_cmplx_mag_f32+0x16c>
 8008876:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800887a:	eeb4 0a40 	vcmp.f32	s0, s0
 800887e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008882:	f040 80af 	bne.w	80089e4 <arm_cmplx_mag_f32+0x1bc>
 8008886:	ed05 0a03 	vstr	s0, [r5, #-12]
 800888a:	ed54 7a04 	vldr	s15, [r4, #-16]
 800888e:	ed14 0a03 	vldr	s0, [r4, #-12]
 8008892:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008896:	ee20 0a00 	vmul.f32	s0, s0, s0
 800889a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800889e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a6:	db72      	blt.n	800898e <arm_cmplx_mag_f32+0x166>
 80088a8:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80088ac:	eeb4 0a40 	vcmp.f32	s0, s0
 80088b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b4:	f040 808c 	bne.w	80089d0 <arm_cmplx_mag_f32+0x1a8>
 80088b8:	ed05 0a02 	vstr	s0, [r5, #-8]
 80088bc:	ed54 7a02 	vldr	s15, [r4, #-8]
 80088c0:	ed14 0a01 	vldr	s0, [r4, #-4]
 80088c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80088c8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80088cc:	ee77 7a80 	vadd.f32	s15, s15, s0
 80088d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d8:	db20      	blt.n	800891c <arm_cmplx_mag_f32+0xf4>
 80088da:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80088de:	eeb4 0a40 	vcmp.f32	s0, s0
 80088e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e6:	d169      	bne.n	80089bc <arm_cmplx_mag_f32+0x194>
 80088e8:	3e01      	subs	r6, #1
 80088ea:	ed05 0a01 	vstr	s0, [r5, #-4]
 80088ee:	f104 0420 	add.w	r4, r4, #32
 80088f2:	f105 0510 	add.w	r5, r5, #16
 80088f6:	d019      	beq.n	800892c <arm_cmplx_mag_f32+0x104>
 80088f8:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80088fc:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8008900:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008904:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008908:	ee77 7a80 	vadd.f32	s15, s15, s0
 800890c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008914:	da95      	bge.n	8008842 <arm_cmplx_mag_f32+0x1a>
 8008916:	f845 7c10 	str.w	r7, [r5, #-16]
 800891a:	e79c      	b.n	8008856 <arm_cmplx_mag_f32+0x2e>
 800891c:	3e01      	subs	r6, #1
 800891e:	f845 7c04 	str.w	r7, [r5, #-4]
 8008922:	f104 0420 	add.w	r4, r4, #32
 8008926:	f105 0510 	add.w	r5, r5, #16
 800892a:	d1e5      	bne.n	80088f8 <arm_cmplx_mag_f32+0xd0>
 800892c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8008930:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8008934:	f012 0503 	ands.w	r5, r2, #3
 8008938:	d026      	beq.n	8008988 <arm_cmplx_mag_f32+0x160>
 800893a:	2600      	movs	r6, #0
 800893c:	f100 0408 	add.w	r4, r0, #8
 8008940:	e00c      	b.n	800895c <arm_cmplx_mag_f32+0x134>
 8008942:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008946:	eeb4 0a40 	vcmp.f32	s0, s0
 800894a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800894e:	d12e      	bne.n	80089ae <arm_cmplx_mag_f32+0x186>
 8008950:	3d01      	subs	r5, #1
 8008952:	ed01 0a01 	vstr	s0, [r1, #-4]
 8008956:	f104 0408 	add.w	r4, r4, #8
 800895a:	d015      	beq.n	8008988 <arm_cmplx_mag_f32+0x160>
 800895c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008960:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008964:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008968:	ee20 0a00 	vmul.f32	s0, s0, s0
 800896c:	3104      	adds	r1, #4
 800896e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008972:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800897a:	dae2      	bge.n	8008942 <arm_cmplx_mag_f32+0x11a>
 800897c:	3d01      	subs	r5, #1
 800897e:	f841 6c04 	str.w	r6, [r1, #-4]
 8008982:	f104 0408 	add.w	r4, r4, #8
 8008986:	d1e9      	bne.n	800895c <arm_cmplx_mag_f32+0x134>
 8008988:	b004      	add	sp, #16
 800898a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800898e:	f845 7c08 	str.w	r7, [r5, #-8]
 8008992:	e793      	b.n	80088bc <arm_cmplx_mag_f32+0x94>
 8008994:	f845 7c0c 	str.w	r7, [r5, #-12]
 8008998:	e777      	b.n	800888a <arm_cmplx_mag_f32+0x62>
 800899a:	eeb0 0a67 	vmov.f32	s0, s15
 800899e:	9203      	str	r2, [sp, #12]
 80089a0:	9102      	str	r1, [sp, #8]
 80089a2:	9001      	str	r0, [sp, #4]
 80089a4:	f003 fdaa 	bl	800c4fc <sqrtf>
 80089a8:	a801      	add	r0, sp, #4
 80089aa:	c807      	ldmia	r0, {r0, r1, r2}
 80089ac:	e751      	b.n	8008852 <arm_cmplx_mag_f32+0x2a>
 80089ae:	eeb0 0a67 	vmov.f32	s0, s15
 80089b2:	9101      	str	r1, [sp, #4]
 80089b4:	f003 fda2 	bl	800c4fc <sqrtf>
 80089b8:	9901      	ldr	r1, [sp, #4]
 80089ba:	e7c9      	b.n	8008950 <arm_cmplx_mag_f32+0x128>
 80089bc:	eeb0 0a67 	vmov.f32	s0, s15
 80089c0:	9203      	str	r2, [sp, #12]
 80089c2:	9102      	str	r1, [sp, #8]
 80089c4:	9001      	str	r0, [sp, #4]
 80089c6:	f003 fd99 	bl	800c4fc <sqrtf>
 80089ca:	a801      	add	r0, sp, #4
 80089cc:	c807      	ldmia	r0, {r0, r1, r2}
 80089ce:	e78b      	b.n	80088e8 <arm_cmplx_mag_f32+0xc0>
 80089d0:	eeb0 0a67 	vmov.f32	s0, s15
 80089d4:	9203      	str	r2, [sp, #12]
 80089d6:	9102      	str	r1, [sp, #8]
 80089d8:	9001      	str	r0, [sp, #4]
 80089da:	f003 fd8f 	bl	800c4fc <sqrtf>
 80089de:	a801      	add	r0, sp, #4
 80089e0:	c807      	ldmia	r0, {r0, r1, r2}
 80089e2:	e769      	b.n	80088b8 <arm_cmplx_mag_f32+0x90>
 80089e4:	eeb0 0a67 	vmov.f32	s0, s15
 80089e8:	9203      	str	r2, [sp, #12]
 80089ea:	9102      	str	r1, [sp, #8]
 80089ec:	9001      	str	r0, [sp, #4]
 80089ee:	f003 fd85 	bl	800c4fc <sqrtf>
 80089f2:	a801      	add	r0, sp, #4
 80089f4:	c807      	ldmia	r0, {r0, r1, r2}
 80089f6:	e746      	b.n	8008886 <arm_cmplx_mag_f32+0x5e>

080089f8 <arm_cos_f32>:
 80089f8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008a6c <arm_cos_f32+0x74>
 80089fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008a00:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8008a04:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a08:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a10:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008a14:	d504      	bpl.n	8008a20 <arm_cos_f32+0x28>
 8008a16:	ee17 3a90 	vmov	r3, s15
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	ee07 3a90 	vmov	s15, r3
 8008a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a24:	eddf 6a12 	vldr	s13, [pc, #72]	; 8008a70 <arm_cos_f32+0x78>
 8008a28:	4a12      	ldr	r2, [pc, #72]	; (8008a74 <arm_cos_f32+0x7c>)
 8008a2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008a2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a32:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008a36:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008a3a:	ee17 3a90 	vmov	r3, s15
 8008a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008a4e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008a52:	edd1 6a01 	vldr	s13, [r1, #4]
 8008a56:	ed91 0a00 	vldr	s0, [r1]
 8008a5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008a62:	ee27 0a00 	vmul.f32	s0, s14, s0
 8008a66:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a6a:	4770      	bx	lr
 8008a6c:	3e22f983 	.word	0x3e22f983
 8008a70:	44000000 	.word	0x44000000
 8008a74:	08035ea4 	.word	0x08035ea4

08008a78 <arm_scale_f32>:
 8008a78:	b470      	push	{r4, r5, r6}
 8008a7a:	0896      	lsrs	r6, r2, #2
 8008a7c:	d025      	beq.n	8008aca <arm_scale_f32+0x52>
 8008a7e:	f100 0410 	add.w	r4, r0, #16
 8008a82:	f101 0310 	add.w	r3, r1, #16
 8008a86:	4635      	mov	r5, r6
 8008a88:	ed14 6a04 	vldr	s12, [r4, #-16]
 8008a8c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008a90:	ed14 7a02 	vldr	s14, [r4, #-8]
 8008a94:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008a98:	ee26 6a00 	vmul.f32	s12, s12, s0
 8008a9c:	ee66 6a80 	vmul.f32	s13, s13, s0
 8008aa0:	ee20 7a07 	vmul.f32	s14, s0, s14
 8008aa4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008aa8:	3d01      	subs	r5, #1
 8008aaa:	ed03 6a04 	vstr	s12, [r3, #-16]
 8008aae:	ed43 6a03 	vstr	s13, [r3, #-12]
 8008ab2:	ed03 7a02 	vstr	s14, [r3, #-8]
 8008ab6:	ed43 7a01 	vstr	s15, [r3, #-4]
 8008aba:	f104 0410 	add.w	r4, r4, #16
 8008abe:	f103 0310 	add.w	r3, r3, #16
 8008ac2:	d1e1      	bne.n	8008a88 <arm_scale_f32+0x10>
 8008ac4:	0136      	lsls	r6, r6, #4
 8008ac6:	4430      	add	r0, r6
 8008ac8:	4431      	add	r1, r6
 8008aca:	f012 0203 	ands.w	r2, r2, #3
 8008ace:	d007      	beq.n	8008ae0 <arm_scale_f32+0x68>
 8008ad0:	ecf0 7a01 	vldmia	r0!, {s15}
 8008ad4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008ad8:	3a01      	subs	r2, #1
 8008ada:	ece1 7a01 	vstmia	r1!, {s15}
 8008ade:	d1f7      	bne.n	8008ad0 <arm_scale_f32+0x58>
 8008ae0:	bc70      	pop	{r4, r5, r6}
 8008ae2:	4770      	bx	lr

08008ae4 <arm_offset_f32>:
 8008ae4:	b470      	push	{r4, r5, r6}
 8008ae6:	0896      	lsrs	r6, r2, #2
 8008ae8:	d025      	beq.n	8008b36 <arm_offset_f32+0x52>
 8008aea:	f100 0410 	add.w	r4, r0, #16
 8008aee:	f101 0310 	add.w	r3, r1, #16
 8008af2:	4635      	mov	r5, r6
 8008af4:	ed14 6a04 	vldr	s12, [r4, #-16]
 8008af8:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008afc:	ed14 7a02 	vldr	s14, [r4, #-8]
 8008b00:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008b04:	ee36 6a00 	vadd.f32	s12, s12, s0
 8008b08:	ee76 6a80 	vadd.f32	s13, s13, s0
 8008b0c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008b10:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008b14:	3d01      	subs	r5, #1
 8008b16:	ed03 6a04 	vstr	s12, [r3, #-16]
 8008b1a:	ed43 6a03 	vstr	s13, [r3, #-12]
 8008b1e:	ed03 7a02 	vstr	s14, [r3, #-8]
 8008b22:	ed43 7a01 	vstr	s15, [r3, #-4]
 8008b26:	f104 0410 	add.w	r4, r4, #16
 8008b2a:	f103 0310 	add.w	r3, r3, #16
 8008b2e:	d1e1      	bne.n	8008af4 <arm_offset_f32+0x10>
 8008b30:	0136      	lsls	r6, r6, #4
 8008b32:	4430      	add	r0, r6
 8008b34:	4431      	add	r1, r6
 8008b36:	f012 0203 	ands.w	r2, r2, #3
 8008b3a:	d007      	beq.n	8008b4c <arm_offset_f32+0x68>
 8008b3c:	ecf0 7a01 	vldmia	r0!, {s15}
 8008b40:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008b44:	3a01      	subs	r2, #1
 8008b46:	ece1 7a01 	vstmia	r1!, {s15}
 8008b4a:	d1f7      	bne.n	8008b3c <arm_offset_f32+0x58>
 8008b4c:	bc70      	pop	{r4, r5, r6}
 8008b4e:	4770      	bx	lr

08008b50 <arm_mult_f32>:
 8008b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b52:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8008b56:	d033      	beq.n	8008bc0 <arm_mult_f32+0x70>
 8008b58:	f100 0610 	add.w	r6, r0, #16
 8008b5c:	f101 0510 	add.w	r5, r1, #16
 8008b60:	f102 0410 	add.w	r4, r2, #16
 8008b64:	4677      	mov	r7, lr
 8008b66:	ed16 6a04 	vldr	s12, [r6, #-16]
 8008b6a:	ed55 4a04 	vldr	s9, [r5, #-16]
 8008b6e:	ed56 6a02 	vldr	s13, [r6, #-8]
 8008b72:	ed15 5a02 	vldr	s10, [r5, #-8]
 8008b76:	ed16 7a03 	vldr	s14, [r6, #-12]
 8008b7a:	ed55 5a03 	vldr	s11, [r5, #-12]
 8008b7e:	ed56 7a01 	vldr	s15, [r6, #-4]
 8008b82:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008b86:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008b8a:	ed04 6a04 	vstr	s12, [r4, #-16]
 8008b8e:	ed15 6a01 	vldr	s12, [r5, #-4]
 8008b92:	ed44 6a02 	vstr	s13, [r4, #-8]
 8008b96:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008b9a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008b9e:	3f01      	subs	r7, #1
 8008ba0:	ed04 7a03 	vstr	s14, [r4, #-12]
 8008ba4:	ed44 7a01 	vstr	s15, [r4, #-4]
 8008ba8:	f106 0610 	add.w	r6, r6, #16
 8008bac:	f105 0510 	add.w	r5, r5, #16
 8008bb0:	f104 0410 	add.w	r4, r4, #16
 8008bb4:	d1d7      	bne.n	8008b66 <arm_mult_f32+0x16>
 8008bb6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008bba:	4420      	add	r0, r4
 8008bbc:	4421      	add	r1, r4
 8008bbe:	4422      	add	r2, r4
 8008bc0:	f013 0303 	ands.w	r3, r3, #3
 8008bc4:	d009      	beq.n	8008bda <arm_mult_f32+0x8a>
 8008bc6:	ecf0 7a01 	vldmia	r0!, {s15}
 8008bca:	ecb1 7a01 	vldmia	r1!, {s14}
 8008bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	ece2 7a01 	vstmia	r2!, {s15}
 8008bd8:	d1f5      	bne.n	8008bc6 <arm_mult_f32+0x76>
 8008bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008bdc <arm_radix8_butterfly_f32>:
 8008bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be0:	ed2d 8b10 	vpush	{d8-d15}
 8008be4:	461c      	mov	r4, r3
 8008be6:	b09d      	sub	sp, #116	; 0x74
 8008be8:	4603      	mov	r3, r0
 8008bea:	3304      	adds	r3, #4
 8008bec:	ed9f bac4 	vldr	s22, [pc, #784]	; 8008f00 <arm_radix8_butterfly_f32+0x324>
 8008bf0:	9019      	str	r0, [sp, #100]	; 0x64
 8008bf2:	921a      	str	r2, [sp, #104]	; 0x68
 8008bf4:	468b      	mov	fp, r1
 8008bf6:	931b      	str	r3, [sp, #108]	; 0x6c
 8008bf8:	468a      	mov	sl, r1
 8008bfa:	46a1      	mov	r9, r4
 8008bfc:	4607      	mov	r7, r0
 8008bfe:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8008c02:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8008c06:	eb03 0508 	add.w	r5, r3, r8
 8008c0a:	195c      	adds	r4, r3, r5
 8008c0c:	00de      	lsls	r6, r3, #3
 8008c0e:	191a      	adds	r2, r3, r4
 8008c10:	9600      	str	r6, [sp, #0]
 8008c12:	1898      	adds	r0, r3, r2
 8008c14:	4619      	mov	r1, r3
 8008c16:	9e00      	ldr	r6, [sp, #0]
 8008c18:	9311      	str	r3, [sp, #68]	; 0x44
 8008c1a:	4401      	add	r1, r0
 8008c1c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8008c20:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8008c24:	19be      	adds	r6, r7, r6
 8008c26:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8008c2a:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8008c2e:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8008c32:	9f00      	ldr	r7, [sp, #0]
 8008c34:	011b      	lsls	r3, r3, #4
 8008c36:	eb06 0e07 	add.w	lr, r6, r7
 8008c3a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008c3c:	9302      	str	r3, [sp, #8]
 8008c3e:	3204      	adds	r2, #4
 8008c40:	3104      	adds	r1, #4
 8008c42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c46:	f04f 0c00 	mov.w	ip, #0
 8008c4a:	edde 7a00 	vldr	s15, [lr]
 8008c4e:	edd6 6a00 	vldr	s13, [r6]
 8008c52:	ed95 2a00 	vldr	s4, [r5]
 8008c56:	ed17 aa01 	vldr	s20, [r7, #-4]
 8008c5a:	edd4 4a00 	vldr	s9, [r4]
 8008c5e:	ed90 5a00 	vldr	s10, [r0]
 8008c62:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008c66:	ed51 0a01 	vldr	s1, [r1, #-4]
 8008c6a:	ee77 8a85 	vadd.f32	s17, s15, s10
 8008c6e:	ee76 3a87 	vadd.f32	s7, s13, s14
 8008c72:	ee32 4a20 	vadd.f32	s8, s4, s1
 8008c76:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8008c7a:	ee33 6a84 	vadd.f32	s12, s7, s8
 8008c7e:	ee73 5a28 	vadd.f32	s11, s6, s17
 8008c82:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008c86:	ee75 6a86 	vadd.f32	s13, s11, s12
 8008c8a:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8008c8e:	ed47 6a01 	vstr	s13, [r7, #-4]
 8008c92:	edc4 5a00 	vstr	s11, [r4]
 8008c96:	ed92 9a00 	vldr	s18, [r2]
 8008c9a:	ed95 1a01 	vldr	s2, [r5, #4]
 8008c9e:	edd6 5a01 	vldr	s11, [r6, #4]
 8008ca2:	ed91 6a00 	vldr	s12, [r1]
 8008ca6:	edd7 2a00 	vldr	s5, [r7]
 8008caa:	edd4 1a01 	vldr	s3, [r4, #4]
 8008cae:	edde 6a01 	vldr	s13, [lr, #4]
 8008cb2:	edd0 9a01 	vldr	s19, [r0, #4]
 8008cb6:	ee72 0a60 	vsub.f32	s1, s4, s1
 8008cba:	ee71 aa46 	vsub.f32	s21, s2, s12
 8008cbe:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8008cc2:	ee37 0a60 	vsub.f32	s0, s14, s1
 8008cc6:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8008cca:	ee37 7a20 	vadd.f32	s14, s14, s1
 8008cce:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8008cd2:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8008cd6:	ee75 5a89 	vadd.f32	s11, s11, s18
 8008cda:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8008cde:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8008ce2:	ee31 6a06 	vadd.f32	s12, s2, s12
 8008ce6:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8008cea:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8008cee:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8008cf2:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8008cf6:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8008cfa:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8008cfe:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8008d02:	ee33 3a68 	vsub.f32	s6, s6, s17
 8008d06:	ee36 0a88 	vadd.f32	s0, s13, s16
 8008d0a:	ee75 8a86 	vadd.f32	s17, s11, s12
 8008d0e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8008d12:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8008d16:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8008d1a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8008d1e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8008d22:	ee75 4a27 	vadd.f32	s9, s10, s15
 8008d26:	ee71 5a49 	vsub.f32	s11, s2, s18
 8008d2a:	ee31 2a09 	vadd.f32	s4, s2, s18
 8008d2e:	ee75 7a67 	vsub.f32	s15, s10, s15
 8008d32:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8008d36:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8008d3a:	ee73 0a06 	vadd.f32	s1, s6, s12
 8008d3e:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8008d42:	ee36 5a87 	vadd.f32	s10, s13, s14
 8008d46:	ee32 8a28 	vadd.f32	s16, s4, s17
 8008d4a:	ee33 6a46 	vsub.f32	s12, s6, s12
 8008d4e:	ee34 4a25 	vadd.f32	s8, s8, s11
 8008d52:	ee33 3a80 	vadd.f32	s6, s7, s0
 8008d56:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008d5a:	ee71 5a64 	vsub.f32	s11, s2, s9
 8008d5e:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8008d62:	ee32 2a68 	vsub.f32	s4, s4, s17
 8008d66:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8008d6a:	ee74 4a81 	vadd.f32	s9, s9, s2
 8008d6e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8008d72:	44dc      	add	ip, fp
 8008d74:	45e2      	cmp	sl, ip
 8008d76:	ed87 8a00 	vstr	s16, [r7]
 8008d7a:	ed84 2a01 	vstr	s4, [r4, #4]
 8008d7e:	441f      	add	r7, r3
 8008d80:	edce 0a00 	vstr	s1, [lr]
 8008d84:	441c      	add	r4, r3
 8008d86:	ed80 6a00 	vstr	s12, [r0]
 8008d8a:	edce 1a01 	vstr	s3, [lr, #4]
 8008d8e:	ed80 4a01 	vstr	s8, [r0, #4]
 8008d92:	449e      	add	lr, r3
 8008d94:	ed86 3a00 	vstr	s6, [r6]
 8008d98:	4418      	add	r0, r3
 8008d9a:	ed41 3a01 	vstr	s7, [r1, #-4]
 8008d9e:	ed02 5a01 	vstr	s10, [r2, #-4]
 8008da2:	ed85 7a00 	vstr	s14, [r5]
 8008da6:	edc6 5a01 	vstr	s11, [r6, #4]
 8008daa:	edc1 4a00 	vstr	s9, [r1]
 8008dae:	441e      	add	r6, r3
 8008db0:	edc2 6a00 	vstr	s13, [r2]
 8008db4:	4419      	add	r1, r3
 8008db6:	edc5 7a01 	vstr	s15, [r5, #4]
 8008dba:	441a      	add	r2, r3
 8008dbc:	441d      	add	r5, r3
 8008dbe:	f63f af44 	bhi.w	8008c4a <arm_radix8_butterfly_f32+0x6e>
 8008dc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008dc4:	2a07      	cmp	r2, #7
 8008dc6:	f240 81f5 	bls.w	80091b4 <arm_radix8_butterfly_f32+0x5d8>
 8008dca:	f108 0101 	add.w	r1, r8, #1
 8008dce:	188f      	adds	r7, r1, r2
 8008dd0:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8008dd4:	19d6      	adds	r6, r2, r7
 8008dd6:	eb08 0c09 	add.w	ip, r8, r9
 8008dda:	1994      	adds	r4, r2, r6
 8008ddc:	eb0c 0e09 	add.w	lr, ip, r9
 8008de0:	4610      	mov	r0, r2
 8008de2:	9701      	str	r7, [sp, #4]
 8008de4:	4420      	add	r0, r4
 8008de6:	eb0e 0709 	add.w	r7, lr, r9
 8008dea:	1815      	adds	r5, r2, r0
 8008dec:	eb07 0209 	add.w	r2, r7, r9
 8008df0:	9203      	str	r2, [sp, #12]
 8008df2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008df4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008df8:	9117      	str	r1, [sp, #92]	; 0x5c
 8008dfa:	440a      	add	r2, r1
 8008dfc:	9900      	ldr	r1, [sp, #0]
 8008dfe:	3108      	adds	r1, #8
 8008e00:	9100      	str	r1, [sp, #0]
 8008e02:	9902      	ldr	r1, [sp, #8]
 8008e04:	3108      	adds	r1, #8
 8008e06:	9102      	str	r1, [sp, #8]
 8008e08:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008e0a:	00ff      	lsls	r7, r7, #3
 8008e0c:	9715      	str	r7, [sp, #84]	; 0x54
 8008e0e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8008e12:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008e16:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8008e1a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8008e1c:	9903      	ldr	r1, [sp, #12]
 8008e1e:	19d7      	adds	r7, r2, r7
 8008e20:	00c9      	lsls	r1, r1, #3
 8008e22:	9114      	str	r1, [sp, #80]	; 0x50
 8008e24:	9710      	str	r7, [sp, #64]	; 0x40
 8008e26:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008e28:	9f00      	ldr	r7, [sp, #0]
 8008e2a:	19cf      	adds	r7, r1, r7
 8008e2c:	970d      	str	r7, [sp, #52]	; 0x34
 8008e2e:	9f02      	ldr	r7, [sp, #8]
 8008e30:	19cf      	adds	r7, r1, r7
 8008e32:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8008e36:	970c      	str	r7, [sp, #48]	; 0x30
 8008e38:	9f01      	ldr	r7, [sp, #4]
 8008e3a:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8008e3e:	3504      	adds	r5, #4
 8008e40:	3004      	adds	r0, #4
 8008e42:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8008e46:	9508      	str	r5, [sp, #32]
 8008e48:	9009      	str	r0, [sp, #36]	; 0x24
 8008e4a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008e4c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008e4e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8008e52:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8008e56:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8008e5a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008e5c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8008e60:	1945      	adds	r5, r0, r5
 8008e62:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008e66:	460f      	mov	r7, r1
 8008e68:	3404      	adds	r4, #4
 8008e6a:	4641      	mov	r1, r8
 8008e6c:	1841      	adds	r1, r0, r1
 8008e6e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8008e72:	940a      	str	r4, [sp, #40]	; 0x28
 8008e74:	eb00 0c06 	add.w	ip, r0, r6
 8008e78:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008e7c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008e7e:	9506      	str	r5, [sp, #24]
 8008e80:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008e82:	9105      	str	r1, [sp, #20]
 8008e84:	4639      	mov	r1, r7
 8008e86:	1905      	adds	r5, r0, r4
 8008e88:	3108      	adds	r1, #8
 8008e8a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008e8c:	9507      	str	r5, [sp, #28]
 8008e8e:	910f      	str	r1, [sp, #60]	; 0x3c
 8008e90:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8008e94:	2101      	movs	r1, #1
 8008e96:	eb00 0e06 	add.w	lr, r0, r6
 8008e9a:	9518      	str	r5, [sp, #96]	; 0x60
 8008e9c:	9404      	str	r4, [sp, #16]
 8008e9e:	9103      	str	r1, [sp, #12]
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	4689      	mov	r9, r1
 8008ea4:	9e06      	ldr	r6, [sp, #24]
 8008ea6:	ed90 fa00 	vldr	s30, [r0]
 8008eaa:	edd6 7a01 	vldr	s15, [r6, #4]
 8008eae:	edd0 ba01 	vldr	s23, [r0, #4]
 8008eb2:	edcd 7a00 	vstr	s15, [sp]
 8008eb6:	a80d      	add	r0, sp, #52	; 0x34
 8008eb8:	edde 7a01 	vldr	s15, [lr, #4]
 8008ebc:	9c05      	ldr	r4, [sp, #20]
 8008ebe:	9d07      	ldr	r5, [sp, #28]
 8008ec0:	edd2 fa00 	vldr	s31, [r2]
 8008ec4:	ed92 ca01 	vldr	s24, [r2, #4]
 8008ec8:	edcd 7a01 	vstr	s15, [sp, #4]
 8008ecc:	c807      	ldmia	r0, {r0, r1, r2}
 8008ece:	eddc 7a01 	vldr	s15, [ip, #4]
 8008ed2:	edd4 ea00 	vldr	s29, [r4]
 8008ed6:	ed95 ea00 	vldr	s28, [r5]
 8008eda:	edd6 da00 	vldr	s27, [r6]
 8008ede:	edd4 aa01 	vldr	s21, [r4, #4]
 8008ee2:	ed95 aa01 	vldr	s20, [r5, #4]
 8008ee6:	ed9e da00 	vldr	s26, [lr]
 8008eea:	eddc ca00 	vldr	s25, [ip]
 8008eee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ef2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008ef4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008ef6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008ef8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008efa:	edcd 7a02 	vstr	s15, [sp, #8]
 8008efe:	e001      	b.n	8008f04 <arm_radix8_butterfly_f32+0x328>
 8008f00:	3f3504f3 	.word	0x3f3504f3
 8008f04:	ed16 6a01 	vldr	s12, [r6, #-4]
 8008f08:	ed91 5a00 	vldr	s10, [r1]
 8008f0c:	ed57 9a01 	vldr	s19, [r7, #-4]
 8008f10:	edd5 7a00 	vldr	s15, [r5]
 8008f14:	ed18 7a01 	vldr	s14, [r8, #-4]
 8008f18:	edd2 3a00 	vldr	s7, [r2]
 8008f1c:	ed94 3a00 	vldr	s6, [r4]
 8008f20:	ed90 2a00 	vldr	s4, [r0]
 8008f24:	ed92 0a01 	vldr	s0, [r2, #4]
 8008f28:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008f2c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8008f30:	ee33 4a29 	vadd.f32	s8, s6, s19
 8008f34:	ee77 4a87 	vadd.f32	s9, s15, s14
 8008f38:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008f3c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8008f40:	ee32 2a46 	vsub.f32	s4, s4, s12
 8008f44:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8008f48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f4c:	ed82 6a00 	vstr	s12, [r2]
 8008f50:	edd5 8a01 	vldr	s17, [r5, #4]
 8008f54:	ed90 9a01 	vldr	s18, [r0, #4]
 8008f58:	edd6 2a00 	vldr	s5, [r6]
 8008f5c:	ed98 7a00 	vldr	s14, [r8]
 8008f60:	edd4 0a01 	vldr	s1, [r4, #4]
 8008f64:	ed91 6a01 	vldr	s12, [r1, #4]
 8008f68:	edd7 5a00 	vldr	s11, [r7]
 8008f6c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008f70:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008f74:	ee39 5a62 	vsub.f32	s10, s18, s5
 8008f78:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8008f7c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008f80:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008f84:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008f88:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008f8c:	ee75 8a69 	vsub.f32	s17, s10, s19
 8008f90:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008f94:	ee35 5a29 	vadd.f32	s10, s10, s19
 8008f98:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008f9c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8008fa0:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8008fa4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008fa8:	ee32 9a08 	vadd.f32	s18, s4, s16
 8008fac:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8008fb0:	ee32 2a48 	vsub.f32	s4, s4, s16
 8008fb4:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008fb8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8008fbc:	ee32 1a87 	vadd.f32	s2, s5, s14
 8008fc0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008fc4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008fc8:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008fcc:	ee73 0a29 	vadd.f32	s1, s6, s19
 8008fd0:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008fd4:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008fd8:	ee32 7a64 	vsub.f32	s14, s4, s9
 8008fdc:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8008fe0:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008fe4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008fe8:	ee75 8a85 	vadd.f32	s17, s11, s10
 8008fec:	ee74 3a22 	vadd.f32	s7, s8, s5
 8008ff0:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8008ff4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8008ff8:	ee79 1a41 	vsub.f32	s3, s18, s2
 8008ffc:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8009000:	ee76 5a43 	vsub.f32	s11, s12, s6
 8009004:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009008:	ee74 4a82 	vadd.f32	s9, s9, s4
 800900c:	ee30 4a60 	vsub.f32	s8, s0, s1
 8009010:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8009014:	ee30 0a80 	vadd.f32	s0, s1, s0
 8009018:	ee77 9a85 	vadd.f32	s19, s15, s10
 800901c:	ee33 6a06 	vadd.f32	s12, s6, s12
 8009020:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009024:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8009028:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800902c:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8009030:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8009034:	ee39 1a01 	vadd.f32	s2, s18, s2
 8009038:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800903c:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8009040:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8009044:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8009048:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800904c:	ee35 3a03 	vadd.f32	s6, s10, s6
 8009050:	ee72 6a66 	vsub.f32	s13, s4, s13
 8009054:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8009058:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800905c:	ed9d 4a02 	vldr	s8, [sp, #8]
 8009060:	ed82 1a01 	vstr	s2, [r2, #4]
 8009064:	ee77 3a63 	vsub.f32	s7, s14, s7
 8009068:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800906c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8009070:	ed81 3a00 	vstr	s6, [r1]
 8009074:	ee30 9a89 	vadd.f32	s18, s1, s18
 8009078:	ee32 2a05 	vadd.f32	s4, s4, s10
 800907c:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8009080:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8009084:	ee67 2a22 	vmul.f32	s5, s14, s5
 8009088:	ee64 1a00 	vmul.f32	s3, s8, s0
 800908c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8009090:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8009094:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8009098:	ee64 8a28 	vmul.f32	s17, s8, s17
 800909c:	ed9d 4a00 	vldr	s8, [sp]
 80090a0:	edc1 6a01 	vstr	s13, [r1, #4]
 80090a4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80090a8:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80090ac:	ee64 9a29 	vmul.f32	s19, s8, s19
 80090b0:	ee24 4a25 	vmul.f32	s8, s8, s11
 80090b4:	ee30 7a87 	vadd.f32	s14, s1, s14
 80090b8:	ee74 4a84 	vadd.f32	s9, s9, s8
 80090bc:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80090c0:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80090c4:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80090c8:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80090cc:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80090d0:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80090d4:	ee75 1a21 	vadd.f32	s3, s10, s3
 80090d8:	ee30 0a68 	vsub.f32	s0, s0, s17
 80090dc:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80090e0:	ee70 0a84 	vadd.f32	s1, s1, s8
 80090e4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80090e8:	44d9      	add	r9, fp
 80090ea:	45ca      	cmp	sl, r9
 80090ec:	ed84 9a00 	vstr	s18, [r4]
 80090f0:	edc4 3a01 	vstr	s7, [r4, #4]
 80090f4:	441a      	add	r2, r3
 80090f6:	ed07 7a01 	vstr	s14, [r7, #-4]
 80090fa:	edc7 2a00 	vstr	s5, [r7]
 80090fe:	4419      	add	r1, r3
 8009100:	ed80 2a00 	vstr	s4, [r0]
 8009104:	ed80 8a01 	vstr	s16, [r0, #4]
 8009108:	441c      	add	r4, r3
 800910a:	ed48 1a01 	vstr	s3, [r8, #-4]
 800910e:	ed88 0a00 	vstr	s0, [r8]
 8009112:	441f      	add	r7, r3
 8009114:	ed46 4a01 	vstr	s9, [r6, #-4]
 8009118:	4418      	add	r0, r3
 800911a:	edc6 9a00 	vstr	s19, [r6]
 800911e:	4498      	add	r8, r3
 8009120:	edc5 0a00 	vstr	s1, [r5]
 8009124:	ed85 6a01 	vstr	s12, [r5, #4]
 8009128:	441e      	add	r6, r3
 800912a:	441d      	add	r5, r3
 800912c:	f63f aeea 	bhi.w	8008f04 <arm_radix8_butterfly_f32+0x328>
 8009130:	9a03      	ldr	r2, [sp, #12]
 8009132:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009134:	3201      	adds	r2, #1
 8009136:	4611      	mov	r1, r2
 8009138:	9203      	str	r2, [sp, #12]
 800913a:	9a04      	ldr	r2, [sp, #16]
 800913c:	4402      	add	r2, r0
 800913e:	9204      	str	r2, [sp, #16]
 8009140:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009142:	9a05      	ldr	r2, [sp, #20]
 8009144:	4402      	add	r2, r0
 8009146:	9205      	str	r2, [sp, #20]
 8009148:	9812      	ldr	r0, [sp, #72]	; 0x48
 800914a:	9a07      	ldr	r2, [sp, #28]
 800914c:	4402      	add	r2, r0
 800914e:	9207      	str	r2, [sp, #28]
 8009150:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009152:	9a06      	ldr	r2, [sp, #24]
 8009154:	4402      	add	r2, r0
 8009156:	9206      	str	r2, [sp, #24]
 8009158:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800915a:	4496      	add	lr, r2
 800915c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800915e:	4494      	add	ip, r2
 8009160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009162:	3208      	adds	r2, #8
 8009164:	920f      	str	r2, [sp, #60]	; 0x3c
 8009166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009168:	3208      	adds	r2, #8
 800916a:	920e      	str	r2, [sp, #56]	; 0x38
 800916c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800916e:	3208      	adds	r2, #8
 8009170:	920d      	str	r2, [sp, #52]	; 0x34
 8009172:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009174:	3208      	adds	r2, #8
 8009176:	920c      	str	r2, [sp, #48]	; 0x30
 8009178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800917a:	3208      	adds	r2, #8
 800917c:	920b      	str	r2, [sp, #44]	; 0x2c
 800917e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009180:	3208      	adds	r2, #8
 8009182:	920a      	str	r2, [sp, #40]	; 0x28
 8009184:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009186:	3208      	adds	r2, #8
 8009188:	9209      	str	r2, [sp, #36]	; 0x24
 800918a:	9a08      	ldr	r2, [sp, #32]
 800918c:	3208      	adds	r2, #8
 800918e:	9208      	str	r2, [sp, #32]
 8009190:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009192:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009194:	4288      	cmp	r0, r1
 8009196:	4622      	mov	r2, r4
 8009198:	d007      	beq.n	80091aa <arm_radix8_butterfly_f32+0x5ce>
 800919a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800919c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80091a0:	4621      	mov	r1, r4
 80091a2:	4401      	add	r1, r0
 80091a4:	9110      	str	r1, [sp, #64]	; 0x40
 80091a6:	9804      	ldr	r0, [sp, #16]
 80091a8:	e67c      	b.n	8008ea4 <arm_radix8_butterfly_f32+0x2c8>
 80091aa:	4683      	mov	fp, r0
 80091ac:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 80091b0:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80091b2:	e524      	b.n	8008bfe <arm_radix8_butterfly_f32+0x22>
 80091b4:	b01d      	add	sp, #116	; 0x74
 80091b6:	ecbd 8b10 	vpop	{d8-d15}
 80091ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091be:	bf00      	nop

080091c0 <__aeabi_memcpy>:
 80091c0:	f000 b841 	b.w	8009246 <memcpy>

080091c4 <calloc>:
 80091c4:	4b02      	ldr	r3, [pc, #8]	; (80091d0 <calloc+0xc>)
 80091c6:	460a      	mov	r2, r1
 80091c8:	4601      	mov	r1, r0
 80091ca:	6818      	ldr	r0, [r3, #0]
 80091cc:	f000 b84e 	b.w	800926c <_calloc_r>
 80091d0:	200006b4 	.word	0x200006b4

080091d4 <__errno>:
 80091d4:	4b01      	ldr	r3, [pc, #4]	; (80091dc <__errno+0x8>)
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	200006b4 	.word	0x200006b4

080091e0 <__libc_init_array>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	4e0d      	ldr	r6, [pc, #52]	; (8009218 <__libc_init_array+0x38>)
 80091e4:	4c0d      	ldr	r4, [pc, #52]	; (800921c <__libc_init_array+0x3c>)
 80091e6:	1ba4      	subs	r4, r4, r6
 80091e8:	10a4      	asrs	r4, r4, #2
 80091ea:	2500      	movs	r5, #0
 80091ec:	42a5      	cmp	r5, r4
 80091ee:	d109      	bne.n	8009204 <__libc_init_array+0x24>
 80091f0:	4e0b      	ldr	r6, [pc, #44]	; (8009220 <__libc_init_array+0x40>)
 80091f2:	4c0c      	ldr	r4, [pc, #48]	; (8009224 <__libc_init_array+0x44>)
 80091f4:	f005 f8b6 	bl	800e364 <_init>
 80091f8:	1ba4      	subs	r4, r4, r6
 80091fa:	10a4      	asrs	r4, r4, #2
 80091fc:	2500      	movs	r5, #0
 80091fe:	42a5      	cmp	r5, r4
 8009200:	d105      	bne.n	800920e <__libc_init_array+0x2e>
 8009202:	bd70      	pop	{r4, r5, r6, pc}
 8009204:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009208:	4798      	blx	r3
 800920a:	3501      	adds	r5, #1
 800920c:	e7ee      	b.n	80091ec <__libc_init_array+0xc>
 800920e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009212:	4798      	blx	r3
 8009214:	3501      	adds	r5, #1
 8009216:	e7f2      	b.n	80091fe <__libc_init_array+0x1e>
 8009218:	0803c450 	.word	0x0803c450
 800921c:	0803c450 	.word	0x0803c450
 8009220:	0803c450 	.word	0x0803c450
 8009224:	0803c454 	.word	0x0803c454

08009228 <memcmp>:
 8009228:	b510      	push	{r4, lr}
 800922a:	3901      	subs	r1, #1
 800922c:	4402      	add	r2, r0
 800922e:	4290      	cmp	r0, r2
 8009230:	d101      	bne.n	8009236 <memcmp+0xe>
 8009232:	2000      	movs	r0, #0
 8009234:	bd10      	pop	{r4, pc}
 8009236:	f810 3b01 	ldrb.w	r3, [r0], #1
 800923a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800923e:	42a3      	cmp	r3, r4
 8009240:	d0f5      	beq.n	800922e <memcmp+0x6>
 8009242:	1b18      	subs	r0, r3, r4
 8009244:	bd10      	pop	{r4, pc}

08009246 <memcpy>:
 8009246:	b510      	push	{r4, lr}
 8009248:	1e43      	subs	r3, r0, #1
 800924a:	440a      	add	r2, r1
 800924c:	4291      	cmp	r1, r2
 800924e:	d100      	bne.n	8009252 <memcpy+0xc>
 8009250:	bd10      	pop	{r4, pc}
 8009252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800925a:	e7f7      	b.n	800924c <memcpy+0x6>

0800925c <memset>:
 800925c:	4402      	add	r2, r0
 800925e:	4603      	mov	r3, r0
 8009260:	4293      	cmp	r3, r2
 8009262:	d100      	bne.n	8009266 <memset+0xa>
 8009264:	4770      	bx	lr
 8009266:	f803 1b01 	strb.w	r1, [r3], #1
 800926a:	e7f9      	b.n	8009260 <memset+0x4>

0800926c <_calloc_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	fb02 f401 	mul.w	r4, r2, r1
 8009272:	4621      	mov	r1, r4
 8009274:	f000 f808 	bl	8009288 <_malloc_r>
 8009278:	4605      	mov	r5, r0
 800927a:	b118      	cbz	r0, 8009284 <_calloc_r+0x18>
 800927c:	4622      	mov	r2, r4
 800927e:	2100      	movs	r1, #0
 8009280:	f7ff ffec 	bl	800925c <memset>
 8009284:	4628      	mov	r0, r5
 8009286:	bd38      	pop	{r3, r4, r5, pc}

08009288 <_malloc_r>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	1ccd      	adds	r5, r1, #3
 800928c:	f025 0503 	bic.w	r5, r5, #3
 8009290:	3508      	adds	r5, #8
 8009292:	2d0c      	cmp	r5, #12
 8009294:	bf38      	it	cc
 8009296:	250c      	movcc	r5, #12
 8009298:	2d00      	cmp	r5, #0
 800929a:	4606      	mov	r6, r0
 800929c:	db01      	blt.n	80092a2 <_malloc_r+0x1a>
 800929e:	42a9      	cmp	r1, r5
 80092a0:	d903      	bls.n	80092aa <_malloc_r+0x22>
 80092a2:	230c      	movs	r3, #12
 80092a4:	6033      	str	r3, [r6, #0]
 80092a6:	2000      	movs	r0, #0
 80092a8:	bd70      	pop	{r4, r5, r6, pc}
 80092aa:	f001 fea5 	bl	800aff8 <__malloc_lock>
 80092ae:	4a23      	ldr	r2, [pc, #140]	; (800933c <_malloc_r+0xb4>)
 80092b0:	6814      	ldr	r4, [r2, #0]
 80092b2:	4621      	mov	r1, r4
 80092b4:	b991      	cbnz	r1, 80092dc <_malloc_r+0x54>
 80092b6:	4c22      	ldr	r4, [pc, #136]	; (8009340 <_malloc_r+0xb8>)
 80092b8:	6823      	ldr	r3, [r4, #0]
 80092ba:	b91b      	cbnz	r3, 80092c4 <_malloc_r+0x3c>
 80092bc:	4630      	mov	r0, r6
 80092be:	f000 fd3d 	bl	8009d3c <_sbrk_r>
 80092c2:	6020      	str	r0, [r4, #0]
 80092c4:	4629      	mov	r1, r5
 80092c6:	4630      	mov	r0, r6
 80092c8:	f000 fd38 	bl	8009d3c <_sbrk_r>
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d126      	bne.n	800931e <_malloc_r+0x96>
 80092d0:	230c      	movs	r3, #12
 80092d2:	6033      	str	r3, [r6, #0]
 80092d4:	4630      	mov	r0, r6
 80092d6:	f001 fe90 	bl	800affa <__malloc_unlock>
 80092da:	e7e4      	b.n	80092a6 <_malloc_r+0x1e>
 80092dc:	680b      	ldr	r3, [r1, #0]
 80092de:	1b5b      	subs	r3, r3, r5
 80092e0:	d41a      	bmi.n	8009318 <_malloc_r+0x90>
 80092e2:	2b0b      	cmp	r3, #11
 80092e4:	d90f      	bls.n	8009306 <_malloc_r+0x7e>
 80092e6:	600b      	str	r3, [r1, #0]
 80092e8:	50cd      	str	r5, [r1, r3]
 80092ea:	18cc      	adds	r4, r1, r3
 80092ec:	4630      	mov	r0, r6
 80092ee:	f001 fe84 	bl	800affa <__malloc_unlock>
 80092f2:	f104 000b 	add.w	r0, r4, #11
 80092f6:	1d23      	adds	r3, r4, #4
 80092f8:	f020 0007 	bic.w	r0, r0, #7
 80092fc:	1ac3      	subs	r3, r0, r3
 80092fe:	d01b      	beq.n	8009338 <_malloc_r+0xb0>
 8009300:	425a      	negs	r2, r3
 8009302:	50e2      	str	r2, [r4, r3]
 8009304:	bd70      	pop	{r4, r5, r6, pc}
 8009306:	428c      	cmp	r4, r1
 8009308:	bf0d      	iteet	eq
 800930a:	6863      	ldreq	r3, [r4, #4]
 800930c:	684b      	ldrne	r3, [r1, #4]
 800930e:	6063      	strne	r3, [r4, #4]
 8009310:	6013      	streq	r3, [r2, #0]
 8009312:	bf18      	it	ne
 8009314:	460c      	movne	r4, r1
 8009316:	e7e9      	b.n	80092ec <_malloc_r+0x64>
 8009318:	460c      	mov	r4, r1
 800931a:	6849      	ldr	r1, [r1, #4]
 800931c:	e7ca      	b.n	80092b4 <_malloc_r+0x2c>
 800931e:	1cc4      	adds	r4, r0, #3
 8009320:	f024 0403 	bic.w	r4, r4, #3
 8009324:	42a0      	cmp	r0, r4
 8009326:	d005      	beq.n	8009334 <_malloc_r+0xac>
 8009328:	1a21      	subs	r1, r4, r0
 800932a:	4630      	mov	r0, r6
 800932c:	f000 fd06 	bl	8009d3c <_sbrk_r>
 8009330:	3001      	adds	r0, #1
 8009332:	d0cd      	beq.n	80092d0 <_malloc_r+0x48>
 8009334:	6025      	str	r5, [r4, #0]
 8009336:	e7d9      	b.n	80092ec <_malloc_r+0x64>
 8009338:	bd70      	pop	{r4, r5, r6, pc}
 800933a:	bf00      	nop
 800933c:	2000c63c 	.word	0x2000c63c
 8009340:	2000c640 	.word	0x2000c640

08009344 <__cvt>:
 8009344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009348:	ec55 4b10 	vmov	r4, r5, d0
 800934c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800934e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009352:	2d00      	cmp	r5, #0
 8009354:	460e      	mov	r6, r1
 8009356:	4691      	mov	r9, r2
 8009358:	4619      	mov	r1, r3
 800935a:	bfb8      	it	lt
 800935c:	4622      	movlt	r2, r4
 800935e:	462b      	mov	r3, r5
 8009360:	f027 0720 	bic.w	r7, r7, #32
 8009364:	bfbb      	ittet	lt
 8009366:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800936a:	461d      	movlt	r5, r3
 800936c:	2300      	movge	r3, #0
 800936e:	232d      	movlt	r3, #45	; 0x2d
 8009370:	bfb8      	it	lt
 8009372:	4614      	movlt	r4, r2
 8009374:	2f46      	cmp	r7, #70	; 0x46
 8009376:	700b      	strb	r3, [r1, #0]
 8009378:	d004      	beq.n	8009384 <__cvt+0x40>
 800937a:	2f45      	cmp	r7, #69	; 0x45
 800937c:	d100      	bne.n	8009380 <__cvt+0x3c>
 800937e:	3601      	adds	r6, #1
 8009380:	2102      	movs	r1, #2
 8009382:	e000      	b.n	8009386 <__cvt+0x42>
 8009384:	2103      	movs	r1, #3
 8009386:	ab03      	add	r3, sp, #12
 8009388:	9301      	str	r3, [sp, #4]
 800938a:	ab02      	add	r3, sp, #8
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	4632      	mov	r2, r6
 8009390:	4653      	mov	r3, sl
 8009392:	ec45 4b10 	vmov	d0, r4, r5
 8009396:	f000 fe6b 	bl	800a070 <_dtoa_r>
 800939a:	2f47      	cmp	r7, #71	; 0x47
 800939c:	4680      	mov	r8, r0
 800939e:	d102      	bne.n	80093a6 <__cvt+0x62>
 80093a0:	f019 0f01 	tst.w	r9, #1
 80093a4:	d026      	beq.n	80093f4 <__cvt+0xb0>
 80093a6:	2f46      	cmp	r7, #70	; 0x46
 80093a8:	eb08 0906 	add.w	r9, r8, r6
 80093ac:	d111      	bne.n	80093d2 <__cvt+0x8e>
 80093ae:	f898 3000 	ldrb.w	r3, [r8]
 80093b2:	2b30      	cmp	r3, #48	; 0x30
 80093b4:	d10a      	bne.n	80093cc <__cvt+0x88>
 80093b6:	2200      	movs	r2, #0
 80093b8:	2300      	movs	r3, #0
 80093ba:	4620      	mov	r0, r4
 80093bc:	4629      	mov	r1, r5
 80093be:	f7f9 fe6f 	bl	80030a0 <__aeabi_dcmpeq>
 80093c2:	b918      	cbnz	r0, 80093cc <__cvt+0x88>
 80093c4:	f1c6 0601 	rsb	r6, r6, #1
 80093c8:	f8ca 6000 	str.w	r6, [sl]
 80093cc:	f8da 3000 	ldr.w	r3, [sl]
 80093d0:	4499      	add	r9, r3
 80093d2:	2200      	movs	r2, #0
 80093d4:	2300      	movs	r3, #0
 80093d6:	4620      	mov	r0, r4
 80093d8:	4629      	mov	r1, r5
 80093da:	f7f9 fe61 	bl	80030a0 <__aeabi_dcmpeq>
 80093de:	b938      	cbnz	r0, 80093f0 <__cvt+0xac>
 80093e0:	2230      	movs	r2, #48	; 0x30
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	4599      	cmp	r9, r3
 80093e6:	d905      	bls.n	80093f4 <__cvt+0xb0>
 80093e8:	1c59      	adds	r1, r3, #1
 80093ea:	9103      	str	r1, [sp, #12]
 80093ec:	701a      	strb	r2, [r3, #0]
 80093ee:	e7f8      	b.n	80093e2 <__cvt+0x9e>
 80093f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80093f4:	9b03      	ldr	r3, [sp, #12]
 80093f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093f8:	eba3 0308 	sub.w	r3, r3, r8
 80093fc:	4640      	mov	r0, r8
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	b004      	add	sp, #16
 8009402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009406 <__exponent>:
 8009406:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009408:	4603      	mov	r3, r0
 800940a:	2900      	cmp	r1, #0
 800940c:	bfb8      	it	lt
 800940e:	4249      	neglt	r1, r1
 8009410:	f803 2b02 	strb.w	r2, [r3], #2
 8009414:	bfb4      	ite	lt
 8009416:	222d      	movlt	r2, #45	; 0x2d
 8009418:	222b      	movge	r2, #43	; 0x2b
 800941a:	2909      	cmp	r1, #9
 800941c:	7042      	strb	r2, [r0, #1]
 800941e:	dd20      	ble.n	8009462 <__exponent+0x5c>
 8009420:	f10d 0207 	add.w	r2, sp, #7
 8009424:	4617      	mov	r7, r2
 8009426:	260a      	movs	r6, #10
 8009428:	fb91 f5f6 	sdiv	r5, r1, r6
 800942c:	fb06 1115 	mls	r1, r6, r5, r1
 8009430:	3130      	adds	r1, #48	; 0x30
 8009432:	2d09      	cmp	r5, #9
 8009434:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009438:	f102 34ff 	add.w	r4, r2, #4294967295
 800943c:	4629      	mov	r1, r5
 800943e:	dc09      	bgt.n	8009454 <__exponent+0x4e>
 8009440:	3130      	adds	r1, #48	; 0x30
 8009442:	3a02      	subs	r2, #2
 8009444:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009448:	42ba      	cmp	r2, r7
 800944a:	461c      	mov	r4, r3
 800944c:	d304      	bcc.n	8009458 <__exponent+0x52>
 800944e:	1a20      	subs	r0, r4, r0
 8009450:	b003      	add	sp, #12
 8009452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009454:	4622      	mov	r2, r4
 8009456:	e7e7      	b.n	8009428 <__exponent+0x22>
 8009458:	f812 1b01 	ldrb.w	r1, [r2], #1
 800945c:	f803 1b01 	strb.w	r1, [r3], #1
 8009460:	e7f2      	b.n	8009448 <__exponent+0x42>
 8009462:	2230      	movs	r2, #48	; 0x30
 8009464:	461c      	mov	r4, r3
 8009466:	4411      	add	r1, r2
 8009468:	f804 2b02 	strb.w	r2, [r4], #2
 800946c:	7059      	strb	r1, [r3, #1]
 800946e:	e7ee      	b.n	800944e <__exponent+0x48>

08009470 <_printf_float>:
 8009470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	b08d      	sub	sp, #52	; 0x34
 8009476:	460c      	mov	r4, r1
 8009478:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800947c:	4616      	mov	r6, r2
 800947e:	461f      	mov	r7, r3
 8009480:	4605      	mov	r5, r0
 8009482:	f001 fd3f 	bl	800af04 <_localeconv_r>
 8009486:	6803      	ldr	r3, [r0, #0]
 8009488:	9304      	str	r3, [sp, #16]
 800948a:	4618      	mov	r0, r3
 800948c:	f7f9 f98a 	bl	80027a4 <strlen>
 8009490:	2300      	movs	r3, #0
 8009492:	930a      	str	r3, [sp, #40]	; 0x28
 8009494:	f8d8 3000 	ldr.w	r3, [r8]
 8009498:	9005      	str	r0, [sp, #20]
 800949a:	3307      	adds	r3, #7
 800949c:	f023 0307 	bic.w	r3, r3, #7
 80094a0:	f103 0208 	add.w	r2, r3, #8
 80094a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80094a8:	f8d4 b000 	ldr.w	fp, [r4]
 80094ac:	f8c8 2000 	str.w	r2, [r8]
 80094b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80094b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80094bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80094c0:	9307      	str	r3, [sp, #28]
 80094c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80094c6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ca:	4ba5      	ldr	r3, [pc, #660]	; (8009760 <_printf_float+0x2f0>)
 80094cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094d0:	f7f9 fe18 	bl	8003104 <__aeabi_dcmpun>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	f040 81fb 	bne.w	80098d0 <_printf_float+0x460>
 80094da:	f04f 32ff 	mov.w	r2, #4294967295
 80094de:	4ba0      	ldr	r3, [pc, #640]	; (8009760 <_printf_float+0x2f0>)
 80094e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094e4:	f7f9 fdf0 	bl	80030c8 <__aeabi_dcmple>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	f040 81f1 	bne.w	80098d0 <_printf_float+0x460>
 80094ee:	2200      	movs	r2, #0
 80094f0:	2300      	movs	r3, #0
 80094f2:	4640      	mov	r0, r8
 80094f4:	4649      	mov	r1, r9
 80094f6:	f7f9 fddd 	bl	80030b4 <__aeabi_dcmplt>
 80094fa:	b110      	cbz	r0, 8009502 <_printf_float+0x92>
 80094fc:	232d      	movs	r3, #45	; 0x2d
 80094fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009502:	4b98      	ldr	r3, [pc, #608]	; (8009764 <_printf_float+0x2f4>)
 8009504:	4a98      	ldr	r2, [pc, #608]	; (8009768 <_printf_float+0x2f8>)
 8009506:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800950a:	bf8c      	ite	hi
 800950c:	4690      	movhi	r8, r2
 800950e:	4698      	movls	r8, r3
 8009510:	2303      	movs	r3, #3
 8009512:	f02b 0204 	bic.w	r2, fp, #4
 8009516:	6123      	str	r3, [r4, #16]
 8009518:	6022      	str	r2, [r4, #0]
 800951a:	f04f 0900 	mov.w	r9, #0
 800951e:	9700      	str	r7, [sp, #0]
 8009520:	4633      	mov	r3, r6
 8009522:	aa0b      	add	r2, sp, #44	; 0x2c
 8009524:	4621      	mov	r1, r4
 8009526:	4628      	mov	r0, r5
 8009528:	f000 f9e2 	bl	80098f0 <_printf_common>
 800952c:	3001      	adds	r0, #1
 800952e:	f040 8093 	bne.w	8009658 <_printf_float+0x1e8>
 8009532:	f04f 30ff 	mov.w	r0, #4294967295
 8009536:	b00d      	add	sp, #52	; 0x34
 8009538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953c:	6861      	ldr	r1, [r4, #4]
 800953e:	1c4b      	adds	r3, r1, #1
 8009540:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009544:	d13f      	bne.n	80095c6 <_printf_float+0x156>
 8009546:	2306      	movs	r3, #6
 8009548:	6063      	str	r3, [r4, #4]
 800954a:	2300      	movs	r3, #0
 800954c:	9303      	str	r3, [sp, #12]
 800954e:	ab0a      	add	r3, sp, #40	; 0x28
 8009550:	9302      	str	r3, [sp, #8]
 8009552:	ab09      	add	r3, sp, #36	; 0x24
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	ec49 8b10 	vmov	d0, r8, r9
 800955a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800955e:	6022      	str	r2, [r4, #0]
 8009560:	f8cd a004 	str.w	sl, [sp, #4]
 8009564:	6861      	ldr	r1, [r4, #4]
 8009566:	4628      	mov	r0, r5
 8009568:	f7ff feec 	bl	8009344 <__cvt>
 800956c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009570:	2b47      	cmp	r3, #71	; 0x47
 8009572:	4680      	mov	r8, r0
 8009574:	d109      	bne.n	800958a <_printf_float+0x11a>
 8009576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009578:	1cd8      	adds	r0, r3, #3
 800957a:	db02      	blt.n	8009582 <_printf_float+0x112>
 800957c:	6862      	ldr	r2, [r4, #4]
 800957e:	4293      	cmp	r3, r2
 8009580:	dd57      	ble.n	8009632 <_printf_float+0x1c2>
 8009582:	f1aa 0a02 	sub.w	sl, sl, #2
 8009586:	fa5f fa8a 	uxtb.w	sl, sl
 800958a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800958e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009590:	d834      	bhi.n	80095fc <_printf_float+0x18c>
 8009592:	3901      	subs	r1, #1
 8009594:	4652      	mov	r2, sl
 8009596:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800959a:	9109      	str	r1, [sp, #36]	; 0x24
 800959c:	f7ff ff33 	bl	8009406 <__exponent>
 80095a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095a2:	1883      	adds	r3, r0, r2
 80095a4:	2a01      	cmp	r2, #1
 80095a6:	4681      	mov	r9, r0
 80095a8:	6123      	str	r3, [r4, #16]
 80095aa:	dc02      	bgt.n	80095b2 <_printf_float+0x142>
 80095ac:	6822      	ldr	r2, [r4, #0]
 80095ae:	07d1      	lsls	r1, r2, #31
 80095b0:	d501      	bpl.n	80095b6 <_printf_float+0x146>
 80095b2:	3301      	adds	r3, #1
 80095b4:	6123      	str	r3, [r4, #16]
 80095b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d0af      	beq.n	800951e <_printf_float+0xae>
 80095be:	232d      	movs	r3, #45	; 0x2d
 80095c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095c4:	e7ab      	b.n	800951e <_printf_float+0xae>
 80095c6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80095ca:	d002      	beq.n	80095d2 <_printf_float+0x162>
 80095cc:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80095d0:	d1bb      	bne.n	800954a <_printf_float+0xda>
 80095d2:	b189      	cbz	r1, 80095f8 <_printf_float+0x188>
 80095d4:	2300      	movs	r3, #0
 80095d6:	9303      	str	r3, [sp, #12]
 80095d8:	ab0a      	add	r3, sp, #40	; 0x28
 80095da:	9302      	str	r3, [sp, #8]
 80095dc:	ab09      	add	r3, sp, #36	; 0x24
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	ec49 8b10 	vmov	d0, r8, r9
 80095e4:	6022      	str	r2, [r4, #0]
 80095e6:	f8cd a004 	str.w	sl, [sp, #4]
 80095ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80095ee:	4628      	mov	r0, r5
 80095f0:	f7ff fea8 	bl	8009344 <__cvt>
 80095f4:	4680      	mov	r8, r0
 80095f6:	e7be      	b.n	8009576 <_printf_float+0x106>
 80095f8:	2301      	movs	r3, #1
 80095fa:	e7a5      	b.n	8009548 <_printf_float+0xd8>
 80095fc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009600:	d119      	bne.n	8009636 <_printf_float+0x1c6>
 8009602:	2900      	cmp	r1, #0
 8009604:	6863      	ldr	r3, [r4, #4]
 8009606:	dd0c      	ble.n	8009622 <_printf_float+0x1b2>
 8009608:	6121      	str	r1, [r4, #16]
 800960a:	b913      	cbnz	r3, 8009612 <_printf_float+0x1a2>
 800960c:	6822      	ldr	r2, [r4, #0]
 800960e:	07d2      	lsls	r2, r2, #31
 8009610:	d502      	bpl.n	8009618 <_printf_float+0x1a8>
 8009612:	3301      	adds	r3, #1
 8009614:	440b      	add	r3, r1
 8009616:	6123      	str	r3, [r4, #16]
 8009618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800961a:	65a3      	str	r3, [r4, #88]	; 0x58
 800961c:	f04f 0900 	mov.w	r9, #0
 8009620:	e7c9      	b.n	80095b6 <_printf_float+0x146>
 8009622:	b913      	cbnz	r3, 800962a <_printf_float+0x1ba>
 8009624:	6822      	ldr	r2, [r4, #0]
 8009626:	07d0      	lsls	r0, r2, #31
 8009628:	d501      	bpl.n	800962e <_printf_float+0x1be>
 800962a:	3302      	adds	r3, #2
 800962c:	e7f3      	b.n	8009616 <_printf_float+0x1a6>
 800962e:	2301      	movs	r3, #1
 8009630:	e7f1      	b.n	8009616 <_printf_float+0x1a6>
 8009632:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800963a:	4293      	cmp	r3, r2
 800963c:	db05      	blt.n	800964a <_printf_float+0x1da>
 800963e:	6822      	ldr	r2, [r4, #0]
 8009640:	6123      	str	r3, [r4, #16]
 8009642:	07d1      	lsls	r1, r2, #31
 8009644:	d5e8      	bpl.n	8009618 <_printf_float+0x1a8>
 8009646:	3301      	adds	r3, #1
 8009648:	e7e5      	b.n	8009616 <_printf_float+0x1a6>
 800964a:	2b00      	cmp	r3, #0
 800964c:	bfd4      	ite	le
 800964e:	f1c3 0302 	rsble	r3, r3, #2
 8009652:	2301      	movgt	r3, #1
 8009654:	4413      	add	r3, r2
 8009656:	e7de      	b.n	8009616 <_printf_float+0x1a6>
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	055a      	lsls	r2, r3, #21
 800965c:	d407      	bmi.n	800966e <_printf_float+0x1fe>
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	4642      	mov	r2, r8
 8009662:	4631      	mov	r1, r6
 8009664:	4628      	mov	r0, r5
 8009666:	47b8      	blx	r7
 8009668:	3001      	adds	r0, #1
 800966a:	d12b      	bne.n	80096c4 <_printf_float+0x254>
 800966c:	e761      	b.n	8009532 <_printf_float+0xc2>
 800966e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009672:	f240 80e2 	bls.w	800983a <_printf_float+0x3ca>
 8009676:	2200      	movs	r2, #0
 8009678:	2300      	movs	r3, #0
 800967a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800967e:	f7f9 fd0f 	bl	80030a0 <__aeabi_dcmpeq>
 8009682:	2800      	cmp	r0, #0
 8009684:	d03c      	beq.n	8009700 <_printf_float+0x290>
 8009686:	2301      	movs	r3, #1
 8009688:	4a38      	ldr	r2, [pc, #224]	; (800976c <_printf_float+0x2fc>)
 800968a:	4631      	mov	r1, r6
 800968c:	4628      	mov	r0, r5
 800968e:	47b8      	blx	r7
 8009690:	3001      	adds	r0, #1
 8009692:	f43f af4e 	beq.w	8009532 <_printf_float+0xc2>
 8009696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800969a:	429a      	cmp	r2, r3
 800969c:	db02      	blt.n	80096a4 <_printf_float+0x234>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	07d8      	lsls	r0, r3, #31
 80096a2:	d50f      	bpl.n	80096c4 <_printf_float+0x254>
 80096a4:	9b05      	ldr	r3, [sp, #20]
 80096a6:	9a04      	ldr	r2, [sp, #16]
 80096a8:	4631      	mov	r1, r6
 80096aa:	4628      	mov	r0, r5
 80096ac:	47b8      	blx	r7
 80096ae:	3001      	adds	r0, #1
 80096b0:	f43f af3f 	beq.w	8009532 <_printf_float+0xc2>
 80096b4:	f04f 0800 	mov.w	r8, #0
 80096b8:	f104 091a 	add.w	r9, r4, #26
 80096bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096be:	3b01      	subs	r3, #1
 80096c0:	4598      	cmp	r8, r3
 80096c2:	db12      	blt.n	80096ea <_printf_float+0x27a>
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	079b      	lsls	r3, r3, #30
 80096c8:	d509      	bpl.n	80096de <_printf_float+0x26e>
 80096ca:	f04f 0800 	mov.w	r8, #0
 80096ce:	f104 0919 	add.w	r9, r4, #25
 80096d2:	68e3      	ldr	r3, [r4, #12]
 80096d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096d6:	1a9b      	subs	r3, r3, r2
 80096d8:	4598      	cmp	r8, r3
 80096da:	f2c0 80ee 	blt.w	80098ba <_printf_float+0x44a>
 80096de:	68e0      	ldr	r0, [r4, #12]
 80096e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096e2:	4298      	cmp	r0, r3
 80096e4:	bfb8      	it	lt
 80096e6:	4618      	movlt	r0, r3
 80096e8:	e725      	b.n	8009536 <_printf_float+0xc6>
 80096ea:	2301      	movs	r3, #1
 80096ec:	464a      	mov	r2, r9
 80096ee:	4631      	mov	r1, r6
 80096f0:	4628      	mov	r0, r5
 80096f2:	47b8      	blx	r7
 80096f4:	3001      	adds	r0, #1
 80096f6:	f43f af1c 	beq.w	8009532 <_printf_float+0xc2>
 80096fa:	f108 0801 	add.w	r8, r8, #1
 80096fe:	e7dd      	b.n	80096bc <_printf_float+0x24c>
 8009700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009702:	2b00      	cmp	r3, #0
 8009704:	dc34      	bgt.n	8009770 <_printf_float+0x300>
 8009706:	2301      	movs	r3, #1
 8009708:	4a18      	ldr	r2, [pc, #96]	; (800976c <_printf_float+0x2fc>)
 800970a:	4631      	mov	r1, r6
 800970c:	4628      	mov	r0, r5
 800970e:	47b8      	blx	r7
 8009710:	3001      	adds	r0, #1
 8009712:	f43f af0e 	beq.w	8009532 <_printf_float+0xc2>
 8009716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009718:	b923      	cbnz	r3, 8009724 <_printf_float+0x2b4>
 800971a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800971c:	b913      	cbnz	r3, 8009724 <_printf_float+0x2b4>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	07d9      	lsls	r1, r3, #31
 8009722:	d5cf      	bpl.n	80096c4 <_printf_float+0x254>
 8009724:	9b05      	ldr	r3, [sp, #20]
 8009726:	9a04      	ldr	r2, [sp, #16]
 8009728:	4631      	mov	r1, r6
 800972a:	4628      	mov	r0, r5
 800972c:	47b8      	blx	r7
 800972e:	3001      	adds	r0, #1
 8009730:	f43f aeff 	beq.w	8009532 <_printf_float+0xc2>
 8009734:	f04f 0900 	mov.w	r9, #0
 8009738:	f104 0a1a 	add.w	sl, r4, #26
 800973c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800973e:	425b      	negs	r3, r3
 8009740:	4599      	cmp	r9, r3
 8009742:	db01      	blt.n	8009748 <_printf_float+0x2d8>
 8009744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009746:	e78b      	b.n	8009660 <_printf_float+0x1f0>
 8009748:	2301      	movs	r3, #1
 800974a:	4652      	mov	r2, sl
 800974c:	4631      	mov	r1, r6
 800974e:	4628      	mov	r0, r5
 8009750:	47b8      	blx	r7
 8009752:	3001      	adds	r0, #1
 8009754:	f43f aeed 	beq.w	8009532 <_printf_float+0xc2>
 8009758:	f109 0901 	add.w	r9, r9, #1
 800975c:	e7ee      	b.n	800973c <_printf_float+0x2cc>
 800975e:	bf00      	nop
 8009760:	7fefffff 	.word	0x7fefffff
 8009764:	0803c0fc 	.word	0x0803c0fc
 8009768:	0803c100 	.word	0x0803c100
 800976c:	0803c3bc 	.word	0x0803c3bc
 8009770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009772:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009774:	429a      	cmp	r2, r3
 8009776:	bfa8      	it	ge
 8009778:	461a      	movge	r2, r3
 800977a:	2a00      	cmp	r2, #0
 800977c:	4691      	mov	r9, r2
 800977e:	dc38      	bgt.n	80097f2 <_printf_float+0x382>
 8009780:	f104 031a 	add.w	r3, r4, #26
 8009784:	f04f 0b00 	mov.w	fp, #0
 8009788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800978c:	9306      	str	r3, [sp, #24]
 800978e:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009792:	ebaa 0309 	sub.w	r3, sl, r9
 8009796:	459b      	cmp	fp, r3
 8009798:	db33      	blt.n	8009802 <_printf_float+0x392>
 800979a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800979c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800979e:	429a      	cmp	r2, r3
 80097a0:	db3a      	blt.n	8009818 <_printf_float+0x3a8>
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	07da      	lsls	r2, r3, #31
 80097a6:	d437      	bmi.n	8009818 <_printf_float+0x3a8>
 80097a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097ac:	eba3 020a 	sub.w	r2, r3, sl
 80097b0:	eba3 0901 	sub.w	r9, r3, r1
 80097b4:	4591      	cmp	r9, r2
 80097b6:	bfa8      	it	ge
 80097b8:	4691      	movge	r9, r2
 80097ba:	f1b9 0f00 	cmp.w	r9, #0
 80097be:	dc33      	bgt.n	8009828 <_printf_float+0x3b8>
 80097c0:	f04f 0800 	mov.w	r8, #0
 80097c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097c8:	f104 0a1a 	add.w	sl, r4, #26
 80097cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d0:	1a9b      	subs	r3, r3, r2
 80097d2:	eba3 0309 	sub.w	r3, r3, r9
 80097d6:	4598      	cmp	r8, r3
 80097d8:	f6bf af74 	bge.w	80096c4 <_printf_float+0x254>
 80097dc:	2301      	movs	r3, #1
 80097de:	4652      	mov	r2, sl
 80097e0:	4631      	mov	r1, r6
 80097e2:	4628      	mov	r0, r5
 80097e4:	47b8      	blx	r7
 80097e6:	3001      	adds	r0, #1
 80097e8:	f43f aea3 	beq.w	8009532 <_printf_float+0xc2>
 80097ec:	f108 0801 	add.w	r8, r8, #1
 80097f0:	e7ec      	b.n	80097cc <_printf_float+0x35c>
 80097f2:	4613      	mov	r3, r2
 80097f4:	4631      	mov	r1, r6
 80097f6:	4642      	mov	r2, r8
 80097f8:	4628      	mov	r0, r5
 80097fa:	47b8      	blx	r7
 80097fc:	3001      	adds	r0, #1
 80097fe:	d1bf      	bne.n	8009780 <_printf_float+0x310>
 8009800:	e697      	b.n	8009532 <_printf_float+0xc2>
 8009802:	2301      	movs	r3, #1
 8009804:	9a06      	ldr	r2, [sp, #24]
 8009806:	4631      	mov	r1, r6
 8009808:	4628      	mov	r0, r5
 800980a:	47b8      	blx	r7
 800980c:	3001      	adds	r0, #1
 800980e:	f43f ae90 	beq.w	8009532 <_printf_float+0xc2>
 8009812:	f10b 0b01 	add.w	fp, fp, #1
 8009816:	e7ba      	b.n	800978e <_printf_float+0x31e>
 8009818:	9b05      	ldr	r3, [sp, #20]
 800981a:	9a04      	ldr	r2, [sp, #16]
 800981c:	4631      	mov	r1, r6
 800981e:	4628      	mov	r0, r5
 8009820:	47b8      	blx	r7
 8009822:	3001      	adds	r0, #1
 8009824:	d1c0      	bne.n	80097a8 <_printf_float+0x338>
 8009826:	e684      	b.n	8009532 <_printf_float+0xc2>
 8009828:	464b      	mov	r3, r9
 800982a:	eb08 020a 	add.w	r2, r8, sl
 800982e:	4631      	mov	r1, r6
 8009830:	4628      	mov	r0, r5
 8009832:	47b8      	blx	r7
 8009834:	3001      	adds	r0, #1
 8009836:	d1c3      	bne.n	80097c0 <_printf_float+0x350>
 8009838:	e67b      	b.n	8009532 <_printf_float+0xc2>
 800983a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800983c:	2a01      	cmp	r2, #1
 800983e:	dc01      	bgt.n	8009844 <_printf_float+0x3d4>
 8009840:	07db      	lsls	r3, r3, #31
 8009842:	d537      	bpl.n	80098b4 <_printf_float+0x444>
 8009844:	2301      	movs	r3, #1
 8009846:	4642      	mov	r2, r8
 8009848:	4631      	mov	r1, r6
 800984a:	4628      	mov	r0, r5
 800984c:	47b8      	blx	r7
 800984e:	3001      	adds	r0, #1
 8009850:	f43f ae6f 	beq.w	8009532 <_printf_float+0xc2>
 8009854:	9b05      	ldr	r3, [sp, #20]
 8009856:	9a04      	ldr	r2, [sp, #16]
 8009858:	4631      	mov	r1, r6
 800985a:	4628      	mov	r0, r5
 800985c:	47b8      	blx	r7
 800985e:	3001      	adds	r0, #1
 8009860:	f43f ae67 	beq.w	8009532 <_printf_float+0xc2>
 8009864:	2200      	movs	r2, #0
 8009866:	2300      	movs	r3, #0
 8009868:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800986c:	f7f9 fc18 	bl	80030a0 <__aeabi_dcmpeq>
 8009870:	b158      	cbz	r0, 800988a <_printf_float+0x41a>
 8009872:	f04f 0800 	mov.w	r8, #0
 8009876:	f104 0a1a 	add.w	sl, r4, #26
 800987a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987c:	3b01      	subs	r3, #1
 800987e:	4598      	cmp	r8, r3
 8009880:	db0d      	blt.n	800989e <_printf_float+0x42e>
 8009882:	464b      	mov	r3, r9
 8009884:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009888:	e6eb      	b.n	8009662 <_printf_float+0x1f2>
 800988a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800988c:	f108 0201 	add.w	r2, r8, #1
 8009890:	3b01      	subs	r3, #1
 8009892:	4631      	mov	r1, r6
 8009894:	4628      	mov	r0, r5
 8009896:	47b8      	blx	r7
 8009898:	3001      	adds	r0, #1
 800989a:	d1f2      	bne.n	8009882 <_printf_float+0x412>
 800989c:	e649      	b.n	8009532 <_printf_float+0xc2>
 800989e:	2301      	movs	r3, #1
 80098a0:	4652      	mov	r2, sl
 80098a2:	4631      	mov	r1, r6
 80098a4:	4628      	mov	r0, r5
 80098a6:	47b8      	blx	r7
 80098a8:	3001      	adds	r0, #1
 80098aa:	f43f ae42 	beq.w	8009532 <_printf_float+0xc2>
 80098ae:	f108 0801 	add.w	r8, r8, #1
 80098b2:	e7e2      	b.n	800987a <_printf_float+0x40a>
 80098b4:	2301      	movs	r3, #1
 80098b6:	4642      	mov	r2, r8
 80098b8:	e7eb      	b.n	8009892 <_printf_float+0x422>
 80098ba:	2301      	movs	r3, #1
 80098bc:	464a      	mov	r2, r9
 80098be:	4631      	mov	r1, r6
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b8      	blx	r7
 80098c4:	3001      	adds	r0, #1
 80098c6:	f43f ae34 	beq.w	8009532 <_printf_float+0xc2>
 80098ca:	f108 0801 	add.w	r8, r8, #1
 80098ce:	e700      	b.n	80096d2 <_printf_float+0x262>
 80098d0:	4642      	mov	r2, r8
 80098d2:	464b      	mov	r3, r9
 80098d4:	4640      	mov	r0, r8
 80098d6:	4649      	mov	r1, r9
 80098d8:	f7f9 fc14 	bl	8003104 <__aeabi_dcmpun>
 80098dc:	2800      	cmp	r0, #0
 80098de:	f43f ae2d 	beq.w	800953c <_printf_float+0xcc>
 80098e2:	4b01      	ldr	r3, [pc, #4]	; (80098e8 <_printf_float+0x478>)
 80098e4:	4a01      	ldr	r2, [pc, #4]	; (80098ec <_printf_float+0x47c>)
 80098e6:	e60e      	b.n	8009506 <_printf_float+0x96>
 80098e8:	0803c104 	.word	0x0803c104
 80098ec:	0803c108 	.word	0x0803c108

080098f0 <_printf_common>:
 80098f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f4:	4691      	mov	r9, r2
 80098f6:	461f      	mov	r7, r3
 80098f8:	688a      	ldr	r2, [r1, #8]
 80098fa:	690b      	ldr	r3, [r1, #16]
 80098fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009900:	4293      	cmp	r3, r2
 8009902:	bfb8      	it	lt
 8009904:	4613      	movlt	r3, r2
 8009906:	f8c9 3000 	str.w	r3, [r9]
 800990a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800990e:	4606      	mov	r6, r0
 8009910:	460c      	mov	r4, r1
 8009912:	b112      	cbz	r2, 800991a <_printf_common+0x2a>
 8009914:	3301      	adds	r3, #1
 8009916:	f8c9 3000 	str.w	r3, [r9]
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	0699      	lsls	r1, r3, #26
 800991e:	bf42      	ittt	mi
 8009920:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009924:	3302      	addmi	r3, #2
 8009926:	f8c9 3000 	strmi.w	r3, [r9]
 800992a:	6825      	ldr	r5, [r4, #0]
 800992c:	f015 0506 	ands.w	r5, r5, #6
 8009930:	d107      	bne.n	8009942 <_printf_common+0x52>
 8009932:	f104 0a19 	add.w	sl, r4, #25
 8009936:	68e3      	ldr	r3, [r4, #12]
 8009938:	f8d9 2000 	ldr.w	r2, [r9]
 800993c:	1a9b      	subs	r3, r3, r2
 800993e:	429d      	cmp	r5, r3
 8009940:	db29      	blt.n	8009996 <_printf_common+0xa6>
 8009942:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009946:	6822      	ldr	r2, [r4, #0]
 8009948:	3300      	adds	r3, #0
 800994a:	bf18      	it	ne
 800994c:	2301      	movne	r3, #1
 800994e:	0692      	lsls	r2, r2, #26
 8009950:	d42e      	bmi.n	80099b0 <_printf_common+0xc0>
 8009952:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009956:	4639      	mov	r1, r7
 8009958:	4630      	mov	r0, r6
 800995a:	47c0      	blx	r8
 800995c:	3001      	adds	r0, #1
 800995e:	d021      	beq.n	80099a4 <_printf_common+0xb4>
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	68e5      	ldr	r5, [r4, #12]
 8009964:	f8d9 2000 	ldr.w	r2, [r9]
 8009968:	f003 0306 	and.w	r3, r3, #6
 800996c:	2b04      	cmp	r3, #4
 800996e:	bf08      	it	eq
 8009970:	1aad      	subeq	r5, r5, r2
 8009972:	68a3      	ldr	r3, [r4, #8]
 8009974:	6922      	ldr	r2, [r4, #16]
 8009976:	bf0c      	ite	eq
 8009978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800997c:	2500      	movne	r5, #0
 800997e:	4293      	cmp	r3, r2
 8009980:	bfc4      	itt	gt
 8009982:	1a9b      	subgt	r3, r3, r2
 8009984:	18ed      	addgt	r5, r5, r3
 8009986:	f04f 0900 	mov.w	r9, #0
 800998a:	341a      	adds	r4, #26
 800998c:	454d      	cmp	r5, r9
 800998e:	d11b      	bne.n	80099c8 <_printf_common+0xd8>
 8009990:	2000      	movs	r0, #0
 8009992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009996:	2301      	movs	r3, #1
 8009998:	4652      	mov	r2, sl
 800999a:	4639      	mov	r1, r7
 800999c:	4630      	mov	r0, r6
 800999e:	47c0      	blx	r8
 80099a0:	3001      	adds	r0, #1
 80099a2:	d103      	bne.n	80099ac <_printf_common+0xbc>
 80099a4:	f04f 30ff 	mov.w	r0, #4294967295
 80099a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ac:	3501      	adds	r5, #1
 80099ae:	e7c2      	b.n	8009936 <_printf_common+0x46>
 80099b0:	18e1      	adds	r1, r4, r3
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	2030      	movs	r0, #48	; 0x30
 80099b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099ba:	4422      	add	r2, r4
 80099bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099c4:	3302      	adds	r3, #2
 80099c6:	e7c4      	b.n	8009952 <_printf_common+0x62>
 80099c8:	2301      	movs	r3, #1
 80099ca:	4622      	mov	r2, r4
 80099cc:	4639      	mov	r1, r7
 80099ce:	4630      	mov	r0, r6
 80099d0:	47c0      	blx	r8
 80099d2:	3001      	adds	r0, #1
 80099d4:	d0e6      	beq.n	80099a4 <_printf_common+0xb4>
 80099d6:	f109 0901 	add.w	r9, r9, #1
 80099da:	e7d7      	b.n	800998c <_printf_common+0x9c>

080099dc <_printf_i>:
 80099dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099e0:	4617      	mov	r7, r2
 80099e2:	7e0a      	ldrb	r2, [r1, #24]
 80099e4:	b085      	sub	sp, #20
 80099e6:	2a6e      	cmp	r2, #110	; 0x6e
 80099e8:	4698      	mov	r8, r3
 80099ea:	4606      	mov	r6, r0
 80099ec:	460c      	mov	r4, r1
 80099ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099f0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80099f4:	f000 80bc 	beq.w	8009b70 <_printf_i+0x194>
 80099f8:	d81a      	bhi.n	8009a30 <_printf_i+0x54>
 80099fa:	2a63      	cmp	r2, #99	; 0x63
 80099fc:	d02e      	beq.n	8009a5c <_printf_i+0x80>
 80099fe:	d80a      	bhi.n	8009a16 <_printf_i+0x3a>
 8009a00:	2a00      	cmp	r2, #0
 8009a02:	f000 80c8 	beq.w	8009b96 <_printf_i+0x1ba>
 8009a06:	2a58      	cmp	r2, #88	; 0x58
 8009a08:	f000 808a 	beq.w	8009b20 <_printf_i+0x144>
 8009a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a10:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8009a14:	e02a      	b.n	8009a6c <_printf_i+0x90>
 8009a16:	2a64      	cmp	r2, #100	; 0x64
 8009a18:	d001      	beq.n	8009a1e <_printf_i+0x42>
 8009a1a:	2a69      	cmp	r2, #105	; 0x69
 8009a1c:	d1f6      	bne.n	8009a0c <_printf_i+0x30>
 8009a1e:	6821      	ldr	r1, [r4, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009a26:	d023      	beq.n	8009a70 <_printf_i+0x94>
 8009a28:	1d11      	adds	r1, r2, #4
 8009a2a:	6019      	str	r1, [r3, #0]
 8009a2c:	6813      	ldr	r3, [r2, #0]
 8009a2e:	e027      	b.n	8009a80 <_printf_i+0xa4>
 8009a30:	2a73      	cmp	r2, #115	; 0x73
 8009a32:	f000 80b4 	beq.w	8009b9e <_printf_i+0x1c2>
 8009a36:	d808      	bhi.n	8009a4a <_printf_i+0x6e>
 8009a38:	2a6f      	cmp	r2, #111	; 0x6f
 8009a3a:	d02a      	beq.n	8009a92 <_printf_i+0xb6>
 8009a3c:	2a70      	cmp	r2, #112	; 0x70
 8009a3e:	d1e5      	bne.n	8009a0c <_printf_i+0x30>
 8009a40:	680a      	ldr	r2, [r1, #0]
 8009a42:	f042 0220 	orr.w	r2, r2, #32
 8009a46:	600a      	str	r2, [r1, #0]
 8009a48:	e003      	b.n	8009a52 <_printf_i+0x76>
 8009a4a:	2a75      	cmp	r2, #117	; 0x75
 8009a4c:	d021      	beq.n	8009a92 <_printf_i+0xb6>
 8009a4e:	2a78      	cmp	r2, #120	; 0x78
 8009a50:	d1dc      	bne.n	8009a0c <_printf_i+0x30>
 8009a52:	2278      	movs	r2, #120	; 0x78
 8009a54:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8009a58:	496e      	ldr	r1, [pc, #440]	; (8009c14 <_printf_i+0x238>)
 8009a5a:	e064      	b.n	8009b26 <_printf_i+0x14a>
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8009a62:	1d11      	adds	r1, r2, #4
 8009a64:	6019      	str	r1, [r3, #0]
 8009a66:	6813      	ldr	r3, [r2, #0]
 8009a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e0a3      	b.n	8009bb8 <_printf_i+0x1dc>
 8009a70:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009a74:	f102 0104 	add.w	r1, r2, #4
 8009a78:	6019      	str	r1, [r3, #0]
 8009a7a:	d0d7      	beq.n	8009a2c <_printf_i+0x50>
 8009a7c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	da03      	bge.n	8009a8c <_printf_i+0xb0>
 8009a84:	222d      	movs	r2, #45	; 0x2d
 8009a86:	425b      	negs	r3, r3
 8009a88:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009a8c:	4962      	ldr	r1, [pc, #392]	; (8009c18 <_printf_i+0x23c>)
 8009a8e:	220a      	movs	r2, #10
 8009a90:	e017      	b.n	8009ac2 <_printf_i+0xe6>
 8009a92:	6820      	ldr	r0, [r4, #0]
 8009a94:	6819      	ldr	r1, [r3, #0]
 8009a96:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009a9a:	d003      	beq.n	8009aa4 <_printf_i+0xc8>
 8009a9c:	1d08      	adds	r0, r1, #4
 8009a9e:	6018      	str	r0, [r3, #0]
 8009aa0:	680b      	ldr	r3, [r1, #0]
 8009aa2:	e006      	b.n	8009ab2 <_printf_i+0xd6>
 8009aa4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009aa8:	f101 0004 	add.w	r0, r1, #4
 8009aac:	6018      	str	r0, [r3, #0]
 8009aae:	d0f7      	beq.n	8009aa0 <_printf_i+0xc4>
 8009ab0:	880b      	ldrh	r3, [r1, #0]
 8009ab2:	4959      	ldr	r1, [pc, #356]	; (8009c18 <_printf_i+0x23c>)
 8009ab4:	2a6f      	cmp	r2, #111	; 0x6f
 8009ab6:	bf14      	ite	ne
 8009ab8:	220a      	movne	r2, #10
 8009aba:	2208      	moveq	r2, #8
 8009abc:	2000      	movs	r0, #0
 8009abe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8009ac2:	6865      	ldr	r5, [r4, #4]
 8009ac4:	60a5      	str	r5, [r4, #8]
 8009ac6:	2d00      	cmp	r5, #0
 8009ac8:	f2c0 809c 	blt.w	8009c04 <_printf_i+0x228>
 8009acc:	6820      	ldr	r0, [r4, #0]
 8009ace:	f020 0004 	bic.w	r0, r0, #4
 8009ad2:	6020      	str	r0, [r4, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d13f      	bne.n	8009b58 <_printf_i+0x17c>
 8009ad8:	2d00      	cmp	r5, #0
 8009ada:	f040 8095 	bne.w	8009c08 <_printf_i+0x22c>
 8009ade:	4675      	mov	r5, lr
 8009ae0:	2a08      	cmp	r2, #8
 8009ae2:	d10b      	bne.n	8009afc <_printf_i+0x120>
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	07da      	lsls	r2, r3, #31
 8009ae8:	d508      	bpl.n	8009afc <_printf_i+0x120>
 8009aea:	6923      	ldr	r3, [r4, #16]
 8009aec:	6862      	ldr	r2, [r4, #4]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	bfde      	ittt	le
 8009af2:	2330      	movle	r3, #48	; 0x30
 8009af4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009af8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009afc:	ebae 0305 	sub.w	r3, lr, r5
 8009b00:	6123      	str	r3, [r4, #16]
 8009b02:	f8cd 8000 	str.w	r8, [sp]
 8009b06:	463b      	mov	r3, r7
 8009b08:	aa03      	add	r2, sp, #12
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	f7ff feef 	bl	80098f0 <_printf_common>
 8009b12:	3001      	adds	r0, #1
 8009b14:	d155      	bne.n	8009bc2 <_printf_i+0x1e6>
 8009b16:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1a:	b005      	add	sp, #20
 8009b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b20:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8009b24:	493c      	ldr	r1, [pc, #240]	; (8009c18 <_printf_i+0x23c>)
 8009b26:	6822      	ldr	r2, [r4, #0]
 8009b28:	6818      	ldr	r0, [r3, #0]
 8009b2a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009b2e:	f100 0504 	add.w	r5, r0, #4
 8009b32:	601d      	str	r5, [r3, #0]
 8009b34:	d001      	beq.n	8009b3a <_printf_i+0x15e>
 8009b36:	6803      	ldr	r3, [r0, #0]
 8009b38:	e002      	b.n	8009b40 <_printf_i+0x164>
 8009b3a:	0655      	lsls	r5, r2, #25
 8009b3c:	d5fb      	bpl.n	8009b36 <_printf_i+0x15a>
 8009b3e:	8803      	ldrh	r3, [r0, #0]
 8009b40:	07d0      	lsls	r0, r2, #31
 8009b42:	bf44      	itt	mi
 8009b44:	f042 0220 	orrmi.w	r2, r2, #32
 8009b48:	6022      	strmi	r2, [r4, #0]
 8009b4a:	b91b      	cbnz	r3, 8009b54 <_printf_i+0x178>
 8009b4c:	6822      	ldr	r2, [r4, #0]
 8009b4e:	f022 0220 	bic.w	r2, r2, #32
 8009b52:	6022      	str	r2, [r4, #0]
 8009b54:	2210      	movs	r2, #16
 8009b56:	e7b1      	b.n	8009abc <_printf_i+0xe0>
 8009b58:	4675      	mov	r5, lr
 8009b5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b5e:	fb02 3310 	mls	r3, r2, r0, r3
 8009b62:	5ccb      	ldrb	r3, [r1, r3]
 8009b64:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	d1f5      	bne.n	8009b5a <_printf_i+0x17e>
 8009b6e:	e7b7      	b.n	8009ae0 <_printf_i+0x104>
 8009b70:	6808      	ldr	r0, [r1, #0]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	6949      	ldr	r1, [r1, #20]
 8009b76:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009b7a:	d004      	beq.n	8009b86 <_printf_i+0x1aa>
 8009b7c:	1d10      	adds	r0, r2, #4
 8009b7e:	6018      	str	r0, [r3, #0]
 8009b80:	6813      	ldr	r3, [r2, #0]
 8009b82:	6019      	str	r1, [r3, #0]
 8009b84:	e007      	b.n	8009b96 <_printf_i+0x1ba>
 8009b86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b8a:	f102 0004 	add.w	r0, r2, #4
 8009b8e:	6018      	str	r0, [r3, #0]
 8009b90:	6813      	ldr	r3, [r2, #0]
 8009b92:	d0f6      	beq.n	8009b82 <_printf_i+0x1a6>
 8009b94:	8019      	strh	r1, [r3, #0]
 8009b96:	2300      	movs	r3, #0
 8009b98:	6123      	str	r3, [r4, #16]
 8009b9a:	4675      	mov	r5, lr
 8009b9c:	e7b1      	b.n	8009b02 <_printf_i+0x126>
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	1d11      	adds	r1, r2, #4
 8009ba2:	6019      	str	r1, [r3, #0]
 8009ba4:	6815      	ldr	r5, [r2, #0]
 8009ba6:	6862      	ldr	r2, [r4, #4]
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4628      	mov	r0, r5
 8009bac:	f7f8 fe08 	bl	80027c0 <memchr>
 8009bb0:	b108      	cbz	r0, 8009bb6 <_printf_i+0x1da>
 8009bb2:	1b40      	subs	r0, r0, r5
 8009bb4:	6060      	str	r0, [r4, #4]
 8009bb6:	6863      	ldr	r3, [r4, #4]
 8009bb8:	6123      	str	r3, [r4, #16]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bc0:	e79f      	b.n	8009b02 <_printf_i+0x126>
 8009bc2:	6923      	ldr	r3, [r4, #16]
 8009bc4:	462a      	mov	r2, r5
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	4630      	mov	r0, r6
 8009bca:	47c0      	blx	r8
 8009bcc:	3001      	adds	r0, #1
 8009bce:	d0a2      	beq.n	8009b16 <_printf_i+0x13a>
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	079b      	lsls	r3, r3, #30
 8009bd4:	d507      	bpl.n	8009be6 <_printf_i+0x20a>
 8009bd6:	2500      	movs	r5, #0
 8009bd8:	f104 0919 	add.w	r9, r4, #25
 8009bdc:	68e3      	ldr	r3, [r4, #12]
 8009bde:	9a03      	ldr	r2, [sp, #12]
 8009be0:	1a9b      	subs	r3, r3, r2
 8009be2:	429d      	cmp	r5, r3
 8009be4:	db05      	blt.n	8009bf2 <_printf_i+0x216>
 8009be6:	68e0      	ldr	r0, [r4, #12]
 8009be8:	9b03      	ldr	r3, [sp, #12]
 8009bea:	4298      	cmp	r0, r3
 8009bec:	bfb8      	it	lt
 8009bee:	4618      	movlt	r0, r3
 8009bf0:	e793      	b.n	8009b1a <_printf_i+0x13e>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	464a      	mov	r2, r9
 8009bf6:	4639      	mov	r1, r7
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	47c0      	blx	r8
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	d08a      	beq.n	8009b16 <_printf_i+0x13a>
 8009c00:	3501      	adds	r5, #1
 8009c02:	e7eb      	b.n	8009bdc <_printf_i+0x200>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1a7      	bne.n	8009b58 <_printf_i+0x17c>
 8009c08:	780b      	ldrb	r3, [r1, #0]
 8009c0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c12:	e765      	b.n	8009ae0 <_printf_i+0x104>
 8009c14:	0803c11d 	.word	0x0803c11d
 8009c18:	0803c10c 	.word	0x0803c10c

08009c1c <iprintf>:
 8009c1c:	b40f      	push	{r0, r1, r2, r3}
 8009c1e:	4b0a      	ldr	r3, [pc, #40]	; (8009c48 <iprintf+0x2c>)
 8009c20:	b513      	push	{r0, r1, r4, lr}
 8009c22:	681c      	ldr	r4, [r3, #0]
 8009c24:	b124      	cbz	r4, 8009c30 <iprintf+0x14>
 8009c26:	69a3      	ldr	r3, [r4, #24]
 8009c28:	b913      	cbnz	r3, 8009c30 <iprintf+0x14>
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f001 f8e0 	bl	800adf0 <__sinit>
 8009c30:	ab05      	add	r3, sp, #20
 8009c32:	9a04      	ldr	r2, [sp, #16]
 8009c34:	68a1      	ldr	r1, [r4, #8]
 8009c36:	9301      	str	r3, [sp, #4]
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f001 fd27 	bl	800b68c <_vfiprintf_r>
 8009c3e:	b002      	add	sp, #8
 8009c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c44:	b004      	add	sp, #16
 8009c46:	4770      	bx	lr
 8009c48:	200006b4 	.word	0x200006b4

08009c4c <putchar>:
 8009c4c:	b538      	push	{r3, r4, r5, lr}
 8009c4e:	4b08      	ldr	r3, [pc, #32]	; (8009c70 <putchar+0x24>)
 8009c50:	681c      	ldr	r4, [r3, #0]
 8009c52:	4605      	mov	r5, r0
 8009c54:	b124      	cbz	r4, 8009c60 <putchar+0x14>
 8009c56:	69a3      	ldr	r3, [r4, #24]
 8009c58:	b913      	cbnz	r3, 8009c60 <putchar+0x14>
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f001 f8c8 	bl	800adf0 <__sinit>
 8009c60:	68a2      	ldr	r2, [r4, #8]
 8009c62:	4629      	mov	r1, r5
 8009c64:	4620      	mov	r0, r4
 8009c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c6a:	f001 be25 	b.w	800b8b8 <_putc_r>
 8009c6e:	bf00      	nop
 8009c70:	200006b4 	.word	0x200006b4

08009c74 <_puts_r>:
 8009c74:	b570      	push	{r4, r5, r6, lr}
 8009c76:	460e      	mov	r6, r1
 8009c78:	4605      	mov	r5, r0
 8009c7a:	b118      	cbz	r0, 8009c84 <_puts_r+0x10>
 8009c7c:	6983      	ldr	r3, [r0, #24]
 8009c7e:	b90b      	cbnz	r3, 8009c84 <_puts_r+0x10>
 8009c80:	f001 f8b6 	bl	800adf0 <__sinit>
 8009c84:	69ab      	ldr	r3, [r5, #24]
 8009c86:	68ac      	ldr	r4, [r5, #8]
 8009c88:	b913      	cbnz	r3, 8009c90 <_puts_r+0x1c>
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f001 f8b0 	bl	800adf0 <__sinit>
 8009c90:	4b23      	ldr	r3, [pc, #140]	; (8009d20 <_puts_r+0xac>)
 8009c92:	429c      	cmp	r4, r3
 8009c94:	d117      	bne.n	8009cc6 <_puts_r+0x52>
 8009c96:	686c      	ldr	r4, [r5, #4]
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	071b      	lsls	r3, r3, #28
 8009c9c:	d51d      	bpl.n	8009cda <_puts_r+0x66>
 8009c9e:	6923      	ldr	r3, [r4, #16]
 8009ca0:	b1db      	cbz	r3, 8009cda <_puts_r+0x66>
 8009ca2:	3e01      	subs	r6, #1
 8009ca4:	68a3      	ldr	r3, [r4, #8]
 8009ca6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009caa:	3b01      	subs	r3, #1
 8009cac:	60a3      	str	r3, [r4, #8]
 8009cae:	b9e9      	cbnz	r1, 8009cec <_puts_r+0x78>
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	da2e      	bge.n	8009d12 <_puts_r+0x9e>
 8009cb4:	4622      	mov	r2, r4
 8009cb6:	210a      	movs	r1, #10
 8009cb8:	4628      	mov	r0, r5
 8009cba:	f000 f88b 	bl	8009dd4 <__swbuf_r>
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	d011      	beq.n	8009ce6 <_puts_r+0x72>
 8009cc2:	200a      	movs	r0, #10
 8009cc4:	bd70      	pop	{r4, r5, r6, pc}
 8009cc6:	4b17      	ldr	r3, [pc, #92]	; (8009d24 <_puts_r+0xb0>)
 8009cc8:	429c      	cmp	r4, r3
 8009cca:	d101      	bne.n	8009cd0 <_puts_r+0x5c>
 8009ccc:	68ac      	ldr	r4, [r5, #8]
 8009cce:	e7e3      	b.n	8009c98 <_puts_r+0x24>
 8009cd0:	4b15      	ldr	r3, [pc, #84]	; (8009d28 <_puts_r+0xb4>)
 8009cd2:	429c      	cmp	r4, r3
 8009cd4:	bf08      	it	eq
 8009cd6:	68ec      	ldreq	r4, [r5, #12]
 8009cd8:	e7de      	b.n	8009c98 <_puts_r+0x24>
 8009cda:	4621      	mov	r1, r4
 8009cdc:	4628      	mov	r0, r5
 8009cde:	f000 f8cb 	bl	8009e78 <__swsetup_r>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d0dd      	beq.n	8009ca2 <_puts_r+0x2e>
 8009ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	da04      	bge.n	8009cfa <_puts_r+0x86>
 8009cf0:	69a2      	ldr	r2, [r4, #24]
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	db06      	blt.n	8009d04 <_puts_r+0x90>
 8009cf6:	290a      	cmp	r1, #10
 8009cf8:	d004      	beq.n	8009d04 <_puts_r+0x90>
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	1c5a      	adds	r2, r3, #1
 8009cfe:	6022      	str	r2, [r4, #0]
 8009d00:	7019      	strb	r1, [r3, #0]
 8009d02:	e7cf      	b.n	8009ca4 <_puts_r+0x30>
 8009d04:	4622      	mov	r2, r4
 8009d06:	4628      	mov	r0, r5
 8009d08:	f000 f864 	bl	8009dd4 <__swbuf_r>
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	d1c9      	bne.n	8009ca4 <_puts_r+0x30>
 8009d10:	e7e9      	b.n	8009ce6 <_puts_r+0x72>
 8009d12:	6823      	ldr	r3, [r4, #0]
 8009d14:	200a      	movs	r0, #10
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	6022      	str	r2, [r4, #0]
 8009d1a:	7018      	strb	r0, [r3, #0]
 8009d1c:	bd70      	pop	{r4, r5, r6, pc}
 8009d1e:	bf00      	nop
 8009d20:	0803c15c 	.word	0x0803c15c
 8009d24:	0803c17c 	.word	0x0803c17c
 8009d28:	0803c13c 	.word	0x0803c13c

08009d2c <puts>:
 8009d2c:	4b02      	ldr	r3, [pc, #8]	; (8009d38 <puts+0xc>)
 8009d2e:	4601      	mov	r1, r0
 8009d30:	6818      	ldr	r0, [r3, #0]
 8009d32:	f7ff bf9f 	b.w	8009c74 <_puts_r>
 8009d36:	bf00      	nop
 8009d38:	200006b4 	.word	0x200006b4

08009d3c <_sbrk_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	4c06      	ldr	r4, [pc, #24]	; (8009d58 <_sbrk_r+0x1c>)
 8009d40:	2300      	movs	r3, #0
 8009d42:	4605      	mov	r5, r0
 8009d44:	4608      	mov	r0, r1
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	f7fd fbfe 	bl	8007548 <_sbrk>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	d102      	bne.n	8009d56 <_sbrk_r+0x1a>
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	b103      	cbz	r3, 8009d56 <_sbrk_r+0x1a>
 8009d54:	602b      	str	r3, [r5, #0]
 8009d56:	bd38      	pop	{r3, r4, r5, pc}
 8009d58:	2000f33c 	.word	0x2000f33c

08009d5c <frexpf>:
 8009d5c:	ee10 1a10 	vmov	r1, s0
 8009d60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d64:	b510      	push	{r4, lr}
 8009d66:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009d6a:	f04f 0400 	mov.w	r4, #0
 8009d6e:	ee10 2a10 	vmov	r2, s0
 8009d72:	6004      	str	r4, [r0, #0]
 8009d74:	da17      	bge.n	8009da6 <frexpf+0x4a>
 8009d76:	b1b3      	cbz	r3, 8009da6 <frexpf+0x4a>
 8009d78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d7c:	da0a      	bge.n	8009d94 <frexpf+0x38>
 8009d7e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009dac <frexpf+0x50>
 8009d82:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009d86:	f06f 0118 	mvn.w	r1, #24
 8009d8a:	ee17 2a90 	vmov	r2, s15
 8009d8e:	6001      	str	r1, [r0, #0]
 8009d90:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009d94:	6801      	ldr	r1, [r0, #0]
 8009d96:	15db      	asrs	r3, r3, #23
 8009d98:	3b7e      	subs	r3, #126	; 0x7e
 8009d9a:	440b      	add	r3, r1
 8009d9c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009da0:	6003      	str	r3, [r0, #0]
 8009da2:	f042 517c 	orr.w	r1, r2, #1056964608	; 0x3f000000
 8009da6:	ee00 1a10 	vmov	s0, r1
 8009daa:	bd10      	pop	{r4, pc}
 8009dac:	4c000000 	.word	0x4c000000

08009db0 <strncmp>:
 8009db0:	b510      	push	{r4, lr}
 8009db2:	b16a      	cbz	r2, 8009dd0 <strncmp+0x20>
 8009db4:	3901      	subs	r1, #1
 8009db6:	1884      	adds	r4, r0, r2
 8009db8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009dbc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d103      	bne.n	8009dcc <strncmp+0x1c>
 8009dc4:	42a0      	cmp	r0, r4
 8009dc6:	d001      	beq.n	8009dcc <strncmp+0x1c>
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1f5      	bne.n	8009db8 <strncmp+0x8>
 8009dcc:	1a98      	subs	r0, r3, r2
 8009dce:	bd10      	pop	{r4, pc}
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	bd10      	pop	{r4, pc}

08009dd4 <__swbuf_r>:
 8009dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd6:	460e      	mov	r6, r1
 8009dd8:	4614      	mov	r4, r2
 8009dda:	4605      	mov	r5, r0
 8009ddc:	b118      	cbz	r0, 8009de6 <__swbuf_r+0x12>
 8009dde:	6983      	ldr	r3, [r0, #24]
 8009de0:	b90b      	cbnz	r3, 8009de6 <__swbuf_r+0x12>
 8009de2:	f001 f805 	bl	800adf0 <__sinit>
 8009de6:	4b21      	ldr	r3, [pc, #132]	; (8009e6c <__swbuf_r+0x98>)
 8009de8:	429c      	cmp	r4, r3
 8009dea:	d12a      	bne.n	8009e42 <__swbuf_r+0x6e>
 8009dec:	686c      	ldr	r4, [r5, #4]
 8009dee:	69a3      	ldr	r3, [r4, #24]
 8009df0:	60a3      	str	r3, [r4, #8]
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	071a      	lsls	r2, r3, #28
 8009df6:	d52e      	bpl.n	8009e56 <__swbuf_r+0x82>
 8009df8:	6923      	ldr	r3, [r4, #16]
 8009dfa:	b363      	cbz	r3, 8009e56 <__swbuf_r+0x82>
 8009dfc:	6923      	ldr	r3, [r4, #16]
 8009dfe:	6820      	ldr	r0, [r4, #0]
 8009e00:	1ac0      	subs	r0, r0, r3
 8009e02:	6963      	ldr	r3, [r4, #20]
 8009e04:	b2f6      	uxtb	r6, r6
 8009e06:	4298      	cmp	r0, r3
 8009e08:	4637      	mov	r7, r6
 8009e0a:	db04      	blt.n	8009e16 <__swbuf_r+0x42>
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f000 ff84 	bl	800ad1c <_fflush_r>
 8009e14:	bb28      	cbnz	r0, 8009e62 <__swbuf_r+0x8e>
 8009e16:	68a3      	ldr	r3, [r4, #8]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	60a3      	str	r3, [r4, #8]
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	1c5a      	adds	r2, r3, #1
 8009e20:	6022      	str	r2, [r4, #0]
 8009e22:	701e      	strb	r6, [r3, #0]
 8009e24:	6963      	ldr	r3, [r4, #20]
 8009e26:	3001      	adds	r0, #1
 8009e28:	4298      	cmp	r0, r3
 8009e2a:	d004      	beq.n	8009e36 <__swbuf_r+0x62>
 8009e2c:	89a3      	ldrh	r3, [r4, #12]
 8009e2e:	07db      	lsls	r3, r3, #31
 8009e30:	d519      	bpl.n	8009e66 <__swbuf_r+0x92>
 8009e32:	2e0a      	cmp	r6, #10
 8009e34:	d117      	bne.n	8009e66 <__swbuf_r+0x92>
 8009e36:	4621      	mov	r1, r4
 8009e38:	4628      	mov	r0, r5
 8009e3a:	f000 ff6f 	bl	800ad1c <_fflush_r>
 8009e3e:	b190      	cbz	r0, 8009e66 <__swbuf_r+0x92>
 8009e40:	e00f      	b.n	8009e62 <__swbuf_r+0x8e>
 8009e42:	4b0b      	ldr	r3, [pc, #44]	; (8009e70 <__swbuf_r+0x9c>)
 8009e44:	429c      	cmp	r4, r3
 8009e46:	d101      	bne.n	8009e4c <__swbuf_r+0x78>
 8009e48:	68ac      	ldr	r4, [r5, #8]
 8009e4a:	e7d0      	b.n	8009dee <__swbuf_r+0x1a>
 8009e4c:	4b09      	ldr	r3, [pc, #36]	; (8009e74 <__swbuf_r+0xa0>)
 8009e4e:	429c      	cmp	r4, r3
 8009e50:	bf08      	it	eq
 8009e52:	68ec      	ldreq	r4, [r5, #12]
 8009e54:	e7cb      	b.n	8009dee <__swbuf_r+0x1a>
 8009e56:	4621      	mov	r1, r4
 8009e58:	4628      	mov	r0, r5
 8009e5a:	f000 f80d 	bl	8009e78 <__swsetup_r>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	d0cc      	beq.n	8009dfc <__swbuf_r+0x28>
 8009e62:	f04f 37ff 	mov.w	r7, #4294967295
 8009e66:	4638      	mov	r0, r7
 8009e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	0803c15c 	.word	0x0803c15c
 8009e70:	0803c17c 	.word	0x0803c17c
 8009e74:	0803c13c 	.word	0x0803c13c

08009e78 <__swsetup_r>:
 8009e78:	4b32      	ldr	r3, [pc, #200]	; (8009f44 <__swsetup_r+0xcc>)
 8009e7a:	b570      	push	{r4, r5, r6, lr}
 8009e7c:	681d      	ldr	r5, [r3, #0]
 8009e7e:	4606      	mov	r6, r0
 8009e80:	460c      	mov	r4, r1
 8009e82:	b125      	cbz	r5, 8009e8e <__swsetup_r+0x16>
 8009e84:	69ab      	ldr	r3, [r5, #24]
 8009e86:	b913      	cbnz	r3, 8009e8e <__swsetup_r+0x16>
 8009e88:	4628      	mov	r0, r5
 8009e8a:	f000 ffb1 	bl	800adf0 <__sinit>
 8009e8e:	4b2e      	ldr	r3, [pc, #184]	; (8009f48 <__swsetup_r+0xd0>)
 8009e90:	429c      	cmp	r4, r3
 8009e92:	d10f      	bne.n	8009eb4 <__swsetup_r+0x3c>
 8009e94:	686c      	ldr	r4, [r5, #4]
 8009e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	0715      	lsls	r5, r2, #28
 8009e9e:	d42c      	bmi.n	8009efa <__swsetup_r+0x82>
 8009ea0:	06d0      	lsls	r0, r2, #27
 8009ea2:	d411      	bmi.n	8009ec8 <__swsetup_r+0x50>
 8009ea4:	2209      	movs	r2, #9
 8009ea6:	6032      	str	r2, [r6, #0]
 8009ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eac:	81a3      	strh	r3, [r4, #12]
 8009eae:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	4b25      	ldr	r3, [pc, #148]	; (8009f4c <__swsetup_r+0xd4>)
 8009eb6:	429c      	cmp	r4, r3
 8009eb8:	d101      	bne.n	8009ebe <__swsetup_r+0x46>
 8009eba:	68ac      	ldr	r4, [r5, #8]
 8009ebc:	e7eb      	b.n	8009e96 <__swsetup_r+0x1e>
 8009ebe:	4b24      	ldr	r3, [pc, #144]	; (8009f50 <__swsetup_r+0xd8>)
 8009ec0:	429c      	cmp	r4, r3
 8009ec2:	bf08      	it	eq
 8009ec4:	68ec      	ldreq	r4, [r5, #12]
 8009ec6:	e7e6      	b.n	8009e96 <__swsetup_r+0x1e>
 8009ec8:	0751      	lsls	r1, r2, #29
 8009eca:	d512      	bpl.n	8009ef2 <__swsetup_r+0x7a>
 8009ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ece:	b141      	cbz	r1, 8009ee2 <__swsetup_r+0x6a>
 8009ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ed4:	4299      	cmp	r1, r3
 8009ed6:	d002      	beq.n	8009ede <__swsetup_r+0x66>
 8009ed8:	4630      	mov	r0, r6
 8009eda:	f001 fb5f 	bl	800b59c <_free_r>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	6363      	str	r3, [r4, #52]	; 0x34
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ee8:	81a3      	strh	r3, [r4, #12]
 8009eea:	2300      	movs	r3, #0
 8009eec:	6063      	str	r3, [r4, #4]
 8009eee:	6923      	ldr	r3, [r4, #16]
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	89a3      	ldrh	r3, [r4, #12]
 8009ef4:	f043 0308 	orr.w	r3, r3, #8
 8009ef8:	81a3      	strh	r3, [r4, #12]
 8009efa:	6923      	ldr	r3, [r4, #16]
 8009efc:	b94b      	cbnz	r3, 8009f12 <__swsetup_r+0x9a>
 8009efe:	89a3      	ldrh	r3, [r4, #12]
 8009f00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f08:	d003      	beq.n	8009f12 <__swsetup_r+0x9a>
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	f001 f82b 	bl	800af68 <__smakebuf_r>
 8009f12:	89a2      	ldrh	r2, [r4, #12]
 8009f14:	f012 0301 	ands.w	r3, r2, #1
 8009f18:	d00c      	beq.n	8009f34 <__swsetup_r+0xbc>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60a3      	str	r3, [r4, #8]
 8009f1e:	6963      	ldr	r3, [r4, #20]
 8009f20:	425b      	negs	r3, r3
 8009f22:	61a3      	str	r3, [r4, #24]
 8009f24:	6923      	ldr	r3, [r4, #16]
 8009f26:	b953      	cbnz	r3, 8009f3e <__swsetup_r+0xc6>
 8009f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009f30:	d1ba      	bne.n	8009ea8 <__swsetup_r+0x30>
 8009f32:	bd70      	pop	{r4, r5, r6, pc}
 8009f34:	0792      	lsls	r2, r2, #30
 8009f36:	bf58      	it	pl
 8009f38:	6963      	ldrpl	r3, [r4, #20]
 8009f3a:	60a3      	str	r3, [r4, #8]
 8009f3c:	e7f2      	b.n	8009f24 <__swsetup_r+0xac>
 8009f3e:	2000      	movs	r0, #0
 8009f40:	e7f7      	b.n	8009f32 <__swsetup_r+0xba>
 8009f42:	bf00      	nop
 8009f44:	200006b4 	.word	0x200006b4
 8009f48:	0803c15c 	.word	0x0803c15c
 8009f4c:	0803c17c 	.word	0x0803c17c
 8009f50:	0803c13c 	.word	0x0803c13c

08009f54 <quorem>:
 8009f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f58:	6903      	ldr	r3, [r0, #16]
 8009f5a:	690c      	ldr	r4, [r1, #16]
 8009f5c:	429c      	cmp	r4, r3
 8009f5e:	4680      	mov	r8, r0
 8009f60:	f300 8082 	bgt.w	800a068 <quorem+0x114>
 8009f64:	3c01      	subs	r4, #1
 8009f66:	f101 0714 	add.w	r7, r1, #20
 8009f6a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8009f6e:	f100 0614 	add.w	r6, r0, #20
 8009f72:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009f76:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009f7a:	eb06 030e 	add.w	r3, r6, lr
 8009f7e:	3501      	adds	r5, #1
 8009f80:	eb07 090e 	add.w	r9, r7, lr
 8009f84:	9301      	str	r3, [sp, #4]
 8009f86:	fbb0 f5f5 	udiv	r5, r0, r5
 8009f8a:	b395      	cbz	r5, 8009ff2 <quorem+0x9e>
 8009f8c:	f04f 0a00 	mov.w	sl, #0
 8009f90:	4638      	mov	r0, r7
 8009f92:	46b4      	mov	ip, r6
 8009f94:	46d3      	mov	fp, sl
 8009f96:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f9a:	b293      	uxth	r3, r2
 8009f9c:	fb05 a303 	mla	r3, r5, r3, sl
 8009fa0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	ebab 0303 	sub.w	r3, fp, r3
 8009faa:	0c12      	lsrs	r2, r2, #16
 8009fac:	f8bc b000 	ldrh.w	fp, [ip]
 8009fb0:	fb05 a202 	mla	r2, r5, r2, sl
 8009fb4:	fa13 f38b 	uxtah	r3, r3, fp
 8009fb8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009fbc:	fa1f fb82 	uxth.w	fp, r2
 8009fc0:	f8dc 2000 	ldr.w	r2, [ip]
 8009fc4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009fc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fd2:	4581      	cmp	r9, r0
 8009fd4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009fd8:	f84c 3b04 	str.w	r3, [ip], #4
 8009fdc:	d2db      	bcs.n	8009f96 <quorem+0x42>
 8009fde:	f856 300e 	ldr.w	r3, [r6, lr]
 8009fe2:	b933      	cbnz	r3, 8009ff2 <quorem+0x9e>
 8009fe4:	9b01      	ldr	r3, [sp, #4]
 8009fe6:	3b04      	subs	r3, #4
 8009fe8:	429e      	cmp	r6, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	d330      	bcc.n	800a050 <quorem+0xfc>
 8009fee:	f8c8 4010 	str.w	r4, [r8, #16]
 8009ff2:	4640      	mov	r0, r8
 8009ff4:	f001 fa0b 	bl	800b40e <__mcmp>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	db25      	blt.n	800a048 <quorem+0xf4>
 8009ffc:	3501      	adds	r5, #1
 8009ffe:	4630      	mov	r0, r6
 800a000:	f04f 0e00 	mov.w	lr, #0
 800a004:	f857 2b04 	ldr.w	r2, [r7], #4
 800a008:	f8d0 c000 	ldr.w	ip, [r0]
 800a00c:	b293      	uxth	r3, r2
 800a00e:	ebae 0303 	sub.w	r3, lr, r3
 800a012:	0c12      	lsrs	r2, r2, #16
 800a014:	fa13 f38c 	uxtah	r3, r3, ip
 800a018:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a01c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a020:	b29b      	uxth	r3, r3
 800a022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a026:	45b9      	cmp	r9, r7
 800a028:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a02c:	f840 3b04 	str.w	r3, [r0], #4
 800a030:	d2e8      	bcs.n	800a004 <quorem+0xb0>
 800a032:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a036:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a03a:	b92a      	cbnz	r2, 800a048 <quorem+0xf4>
 800a03c:	3b04      	subs	r3, #4
 800a03e:	429e      	cmp	r6, r3
 800a040:	461a      	mov	r2, r3
 800a042:	d30b      	bcc.n	800a05c <quorem+0x108>
 800a044:	f8c8 4010 	str.w	r4, [r8, #16]
 800a048:	4628      	mov	r0, r5
 800a04a:	b003      	add	sp, #12
 800a04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a050:	6812      	ldr	r2, [r2, #0]
 800a052:	3b04      	subs	r3, #4
 800a054:	2a00      	cmp	r2, #0
 800a056:	d1ca      	bne.n	8009fee <quorem+0x9a>
 800a058:	3c01      	subs	r4, #1
 800a05a:	e7c5      	b.n	8009fe8 <quorem+0x94>
 800a05c:	6812      	ldr	r2, [r2, #0]
 800a05e:	3b04      	subs	r3, #4
 800a060:	2a00      	cmp	r2, #0
 800a062:	d1ef      	bne.n	800a044 <quorem+0xf0>
 800a064:	3c01      	subs	r4, #1
 800a066:	e7ea      	b.n	800a03e <quorem+0xea>
 800a068:	2000      	movs	r0, #0
 800a06a:	e7ee      	b.n	800a04a <quorem+0xf6>
 800a06c:	0000      	movs	r0, r0
	...

0800a070 <_dtoa_r>:
 800a070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a074:	ec57 6b10 	vmov	r6, r7, d0
 800a078:	b097      	sub	sp, #92	; 0x5c
 800a07a:	e9cd 6700 	strd	r6, r7, [sp]
 800a07e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a080:	9107      	str	r1, [sp, #28]
 800a082:	4604      	mov	r4, r0
 800a084:	920a      	str	r2, [sp, #40]	; 0x28
 800a086:	930f      	str	r3, [sp, #60]	; 0x3c
 800a088:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800a08a:	b93e      	cbnz	r6, 800a09c <_dtoa_r+0x2c>
 800a08c:	2010      	movs	r0, #16
 800a08e:	f000 ffab 	bl	800afe8 <malloc>
 800a092:	6260      	str	r0, [r4, #36]	; 0x24
 800a094:	6046      	str	r6, [r0, #4]
 800a096:	6086      	str	r6, [r0, #8]
 800a098:	6006      	str	r6, [r0, #0]
 800a09a:	60c6      	str	r6, [r0, #12]
 800a09c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a09e:	6819      	ldr	r1, [r3, #0]
 800a0a0:	b151      	cbz	r1, 800a0b8 <_dtoa_r+0x48>
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	604a      	str	r2, [r1, #4]
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	4093      	lsls	r3, r2
 800a0aa:	608b      	str	r3, [r1, #8]
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 ffd9 	bl	800b064 <_Bfree>
 800a0b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	9b01      	ldr	r3, [sp, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	bfbf      	itttt	lt
 800a0be:	2301      	movlt	r3, #1
 800a0c0:	602b      	strlt	r3, [r5, #0]
 800a0c2:	9b01      	ldrlt	r3, [sp, #4]
 800a0c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a0c8:	bfb2      	itee	lt
 800a0ca:	9301      	strlt	r3, [sp, #4]
 800a0cc:	2300      	movge	r3, #0
 800a0ce:	602b      	strge	r3, [r5, #0]
 800a0d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a0d4:	4ba8      	ldr	r3, [pc, #672]	; (800a378 <_dtoa_r+0x308>)
 800a0d6:	ea33 0308 	bics.w	r3, r3, r8
 800a0da:	d11b      	bne.n	800a114 <_dtoa_r+0xa4>
 800a0dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0de:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0e2:	6013      	str	r3, [r2, #0]
 800a0e4:	9b00      	ldr	r3, [sp, #0]
 800a0e6:	b923      	cbnz	r3, 800a0f2 <_dtoa_r+0x82>
 800a0e8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	f000 8578 	beq.w	800abe2 <_dtoa_r+0xb72>
 800a0f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0f4:	b953      	cbnz	r3, 800a10c <_dtoa_r+0x9c>
 800a0f6:	4ba1      	ldr	r3, [pc, #644]	; (800a37c <_dtoa_r+0x30c>)
 800a0f8:	e021      	b.n	800a13e <_dtoa_r+0xce>
 800a0fa:	4ba1      	ldr	r3, [pc, #644]	; (800a380 <_dtoa_r+0x310>)
 800a0fc:	9302      	str	r3, [sp, #8]
 800a0fe:	3308      	adds	r3, #8
 800a100:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a102:	6013      	str	r3, [r2, #0]
 800a104:	9802      	ldr	r0, [sp, #8]
 800a106:	b017      	add	sp, #92	; 0x5c
 800a108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10c:	4b9b      	ldr	r3, [pc, #620]	; (800a37c <_dtoa_r+0x30c>)
 800a10e:	9302      	str	r3, [sp, #8]
 800a110:	3303      	adds	r3, #3
 800a112:	e7f5      	b.n	800a100 <_dtoa_r+0x90>
 800a114:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a118:	2200      	movs	r2, #0
 800a11a:	2300      	movs	r3, #0
 800a11c:	4630      	mov	r0, r6
 800a11e:	4639      	mov	r1, r7
 800a120:	f7f8 ffbe 	bl	80030a0 <__aeabi_dcmpeq>
 800a124:	4681      	mov	r9, r0
 800a126:	b160      	cbz	r0, 800a142 <_dtoa_r+0xd2>
 800a128:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a12a:	2301      	movs	r3, #1
 800a12c:	6013      	str	r3, [r2, #0]
 800a12e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 8553 	beq.w	800abdc <_dtoa_r+0xb6c>
 800a136:	4b93      	ldr	r3, [pc, #588]	; (800a384 <_dtoa_r+0x314>)
 800a138:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a13a:	6013      	str	r3, [r2, #0]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	9302      	str	r3, [sp, #8]
 800a140:	e7e0      	b.n	800a104 <_dtoa_r+0x94>
 800a142:	aa14      	add	r2, sp, #80	; 0x50
 800a144:	a915      	add	r1, sp, #84	; 0x54
 800a146:	ec47 6b10 	vmov	d0, r6, r7
 800a14a:	4620      	mov	r0, r4
 800a14c:	f001 f9d7 	bl	800b4fe <__d2b>
 800a150:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a154:	4682      	mov	sl, r0
 800a156:	2d00      	cmp	r5, #0
 800a158:	d07e      	beq.n	800a258 <_dtoa_r+0x1e8>
 800a15a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a15e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a162:	4630      	mov	r0, r6
 800a164:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a168:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a16c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 800a170:	2200      	movs	r2, #0
 800a172:	4b85      	ldr	r3, [pc, #532]	; (800a388 <_dtoa_r+0x318>)
 800a174:	f7f8 fb78 	bl	8002868 <__aeabi_dsub>
 800a178:	a379      	add	r3, pc, #484	; (adr r3, 800a360 <_dtoa_r+0x2f0>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f8 fd27 	bl	8002bd0 <__aeabi_dmul>
 800a182:	a379      	add	r3, pc, #484	; (adr r3, 800a368 <_dtoa_r+0x2f8>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	f7f8 fb70 	bl	800286c <__adddf3>
 800a18c:	4606      	mov	r6, r0
 800a18e:	4628      	mov	r0, r5
 800a190:	460f      	mov	r7, r1
 800a192:	f7f8 fcb7 	bl	8002b04 <__aeabi_i2d>
 800a196:	a376      	add	r3, pc, #472	; (adr r3, 800a370 <_dtoa_r+0x300>)
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	f7f8 fd18 	bl	8002bd0 <__aeabi_dmul>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	4639      	mov	r1, r7
 800a1a8:	f7f8 fb60 	bl	800286c <__adddf3>
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	460f      	mov	r7, r1
 800a1b0:	f7f8 ffbe 	bl	8003130 <__aeabi_d2iz>
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	4683      	mov	fp, r0
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	4639      	mov	r1, r7
 800a1be:	f7f8 ff79 	bl	80030b4 <__aeabi_dcmplt>
 800a1c2:	b158      	cbz	r0, 800a1dc <_dtoa_r+0x16c>
 800a1c4:	4658      	mov	r0, fp
 800a1c6:	f7f8 fc9d 	bl	8002b04 <__aeabi_i2d>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	4639      	mov	r1, r7
 800a1d2:	f7f8 ff65 	bl	80030a0 <__aeabi_dcmpeq>
 800a1d6:	b908      	cbnz	r0, 800a1dc <_dtoa_r+0x16c>
 800a1d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1dc:	f1bb 0f16 	cmp.w	fp, #22
 800a1e0:	d859      	bhi.n	800a296 <_dtoa_r+0x226>
 800a1e2:	496a      	ldr	r1, [pc, #424]	; (800a38c <_dtoa_r+0x31c>)
 800a1e4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a1e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1f0:	f7f8 ff7e 	bl	80030f0 <__aeabi_dcmpgt>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d050      	beq.n	800a29a <_dtoa_r+0x22a>
 800a1f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	930e      	str	r3, [sp, #56]	; 0x38
 800a200:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a202:	1b5d      	subs	r5, r3, r5
 800a204:	1e6b      	subs	r3, r5, #1
 800a206:	9306      	str	r3, [sp, #24]
 800a208:	bf45      	ittet	mi
 800a20a:	f1c5 0301 	rsbmi	r3, r5, #1
 800a20e:	9305      	strmi	r3, [sp, #20]
 800a210:	2300      	movpl	r3, #0
 800a212:	2300      	movmi	r3, #0
 800a214:	bf4c      	ite	mi
 800a216:	9306      	strmi	r3, [sp, #24]
 800a218:	9305      	strpl	r3, [sp, #20]
 800a21a:	f1bb 0f00 	cmp.w	fp, #0
 800a21e:	db3e      	blt.n	800a29e <_dtoa_r+0x22e>
 800a220:	9b06      	ldr	r3, [sp, #24]
 800a222:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a226:	445b      	add	r3, fp
 800a228:	9306      	str	r3, [sp, #24]
 800a22a:	2300      	movs	r3, #0
 800a22c:	9308      	str	r3, [sp, #32]
 800a22e:	9b07      	ldr	r3, [sp, #28]
 800a230:	2b09      	cmp	r3, #9
 800a232:	f200 80af 	bhi.w	800a394 <_dtoa_r+0x324>
 800a236:	2b05      	cmp	r3, #5
 800a238:	bfc4      	itt	gt
 800a23a:	3b04      	subgt	r3, #4
 800a23c:	9307      	strgt	r3, [sp, #28]
 800a23e:	9b07      	ldr	r3, [sp, #28]
 800a240:	f1a3 0302 	sub.w	r3, r3, #2
 800a244:	bfcc      	ite	gt
 800a246:	2600      	movgt	r6, #0
 800a248:	2601      	movle	r6, #1
 800a24a:	2b03      	cmp	r3, #3
 800a24c:	f200 80ae 	bhi.w	800a3ac <_dtoa_r+0x33c>
 800a250:	e8df f003 	tbb	[pc, r3]
 800a254:	772f8482 	.word	0x772f8482
 800a258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a25a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a25c:	441d      	add	r5, r3
 800a25e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a262:	2b20      	cmp	r3, #32
 800a264:	dd11      	ble.n	800a28a <_dtoa_r+0x21a>
 800a266:	9a00      	ldr	r2, [sp, #0]
 800a268:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a26c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800a270:	fa22 f000 	lsr.w	r0, r2, r0
 800a274:	fa08 f303 	lsl.w	r3, r8, r3
 800a278:	4318      	orrs	r0, r3
 800a27a:	f7f8 fc33 	bl	8002ae4 <__aeabi_ui2d>
 800a27e:	2301      	movs	r3, #1
 800a280:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a284:	3d01      	subs	r5, #1
 800a286:	9312      	str	r3, [sp, #72]	; 0x48
 800a288:	e772      	b.n	800a170 <_dtoa_r+0x100>
 800a28a:	f1c3 0020 	rsb	r0, r3, #32
 800a28e:	9b00      	ldr	r3, [sp, #0]
 800a290:	fa03 f000 	lsl.w	r0, r3, r0
 800a294:	e7f1      	b.n	800a27a <_dtoa_r+0x20a>
 800a296:	2301      	movs	r3, #1
 800a298:	e7b1      	b.n	800a1fe <_dtoa_r+0x18e>
 800a29a:	900e      	str	r0, [sp, #56]	; 0x38
 800a29c:	e7b0      	b.n	800a200 <_dtoa_r+0x190>
 800a29e:	9b05      	ldr	r3, [sp, #20]
 800a2a0:	eba3 030b 	sub.w	r3, r3, fp
 800a2a4:	9305      	str	r3, [sp, #20]
 800a2a6:	f1cb 0300 	rsb	r3, fp, #0
 800a2aa:	9308      	str	r3, [sp, #32]
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2b0:	e7bd      	b.n	800a22e <_dtoa_r+0x1be>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	dd7a      	ble.n	800a3b2 <_dtoa_r+0x342>
 800a2bc:	9304      	str	r3, [sp, #16]
 800a2be:	9303      	str	r3, [sp, #12]
 800a2c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	606a      	str	r2, [r5, #4]
 800a2c6:	2104      	movs	r1, #4
 800a2c8:	f101 0214 	add.w	r2, r1, #20
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d975      	bls.n	800a3bc <_dtoa_r+0x34c>
 800a2d0:	6869      	ldr	r1, [r5, #4]
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f000 fe92 	bl	800affc <_Balloc>
 800a2d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2da:	6028      	str	r0, [r5, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	9302      	str	r3, [sp, #8]
 800a2e0:	9b03      	ldr	r3, [sp, #12]
 800a2e2:	2b0e      	cmp	r3, #14
 800a2e4:	f200 80e5 	bhi.w	800a4b2 <_dtoa_r+0x442>
 800a2e8:	2e00      	cmp	r6, #0
 800a2ea:	f000 80e2 	beq.w	800a4b2 <_dtoa_r+0x442>
 800a2ee:	ed9d 7b00 	vldr	d7, [sp]
 800a2f2:	f1bb 0f00 	cmp.w	fp, #0
 800a2f6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a2fa:	dd74      	ble.n	800a3e6 <_dtoa_r+0x376>
 800a2fc:	4a23      	ldr	r2, [pc, #140]	; (800a38c <_dtoa_r+0x31c>)
 800a2fe:	f00b 030f 	and.w	r3, fp, #15
 800a302:	ea4f 162b 	mov.w	r6, fp, asr #4
 800a306:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a30a:	06f0      	lsls	r0, r6, #27
 800a30c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a310:	d559      	bpl.n	800a3c6 <_dtoa_r+0x356>
 800a312:	4b1f      	ldr	r3, [pc, #124]	; (800a390 <_dtoa_r+0x320>)
 800a314:	ec51 0b17 	vmov	r0, r1, d7
 800a318:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a31c:	f7f8 fd82 	bl	8002e24 <__aeabi_ddiv>
 800a320:	e9cd 0100 	strd	r0, r1, [sp]
 800a324:	f006 060f 	and.w	r6, r6, #15
 800a328:	2503      	movs	r5, #3
 800a32a:	4f19      	ldr	r7, [pc, #100]	; (800a390 <_dtoa_r+0x320>)
 800a32c:	2e00      	cmp	r6, #0
 800a32e:	d14c      	bne.n	800a3ca <_dtoa_r+0x35a>
 800a330:	4642      	mov	r2, r8
 800a332:	464b      	mov	r3, r9
 800a334:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a338:	f7f8 fd74 	bl	8002e24 <__aeabi_ddiv>
 800a33c:	e9cd 0100 	strd	r0, r1, [sp]
 800a340:	e06a      	b.n	800a418 <_dtoa_r+0x3a8>
 800a342:	2301      	movs	r3, #1
 800a344:	9309      	str	r3, [sp, #36]	; 0x24
 800a346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a348:	445b      	add	r3, fp
 800a34a:	9304      	str	r3, [sp, #16]
 800a34c:	3301      	adds	r3, #1
 800a34e:	2b01      	cmp	r3, #1
 800a350:	9303      	str	r3, [sp, #12]
 800a352:	bfb8      	it	lt
 800a354:	2301      	movlt	r3, #1
 800a356:	e7b3      	b.n	800a2c0 <_dtoa_r+0x250>
 800a358:	2300      	movs	r3, #0
 800a35a:	e7ab      	b.n	800a2b4 <_dtoa_r+0x244>
 800a35c:	2300      	movs	r3, #0
 800a35e:	e7f1      	b.n	800a344 <_dtoa_r+0x2d4>
 800a360:	636f4361 	.word	0x636f4361
 800a364:	3fd287a7 	.word	0x3fd287a7
 800a368:	8b60c8b3 	.word	0x8b60c8b3
 800a36c:	3fc68a28 	.word	0x3fc68a28
 800a370:	509f79fb 	.word	0x509f79fb
 800a374:	3fd34413 	.word	0x3fd34413
 800a378:	7ff00000 	.word	0x7ff00000
 800a37c:	0803c137 	.word	0x0803c137
 800a380:	0803c12e 	.word	0x0803c12e
 800a384:	0803c3bd 	.word	0x0803c3bd
 800a388:	3ff80000 	.word	0x3ff80000
 800a38c:	0803c1c8 	.word	0x0803c1c8
 800a390:	0803c1a0 	.word	0x0803c1a0
 800a394:	2601      	movs	r6, #1
 800a396:	2300      	movs	r3, #0
 800a398:	9307      	str	r3, [sp, #28]
 800a39a:	9609      	str	r6, [sp, #36]	; 0x24
 800a39c:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a0:	9304      	str	r3, [sp, #16]
 800a3a2:	9303      	str	r3, [sp, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2312      	movs	r3, #18
 800a3a8:	920a      	str	r2, [sp, #40]	; 0x28
 800a3aa:	e789      	b.n	800a2c0 <_dtoa_r+0x250>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b0:	e7f4      	b.n	800a39c <_dtoa_r+0x32c>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	9304      	str	r3, [sp, #16]
 800a3b6:	9303      	str	r3, [sp, #12]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	e7f5      	b.n	800a3a8 <_dtoa_r+0x338>
 800a3bc:	686a      	ldr	r2, [r5, #4]
 800a3be:	3201      	adds	r2, #1
 800a3c0:	606a      	str	r2, [r5, #4]
 800a3c2:	0049      	lsls	r1, r1, #1
 800a3c4:	e780      	b.n	800a2c8 <_dtoa_r+0x258>
 800a3c6:	2502      	movs	r5, #2
 800a3c8:	e7af      	b.n	800a32a <_dtoa_r+0x2ba>
 800a3ca:	07f1      	lsls	r1, r6, #31
 800a3cc:	d508      	bpl.n	800a3e0 <_dtoa_r+0x370>
 800a3ce:	4640      	mov	r0, r8
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3d6:	f7f8 fbfb 	bl	8002bd0 <__aeabi_dmul>
 800a3da:	3501      	adds	r5, #1
 800a3dc:	4680      	mov	r8, r0
 800a3de:	4689      	mov	r9, r1
 800a3e0:	1076      	asrs	r6, r6, #1
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	e7a2      	b.n	800a32c <_dtoa_r+0x2bc>
 800a3e6:	f000 809d 	beq.w	800a524 <_dtoa_r+0x4b4>
 800a3ea:	f1cb 0600 	rsb	r6, fp, #0
 800a3ee:	4b9f      	ldr	r3, [pc, #636]	; (800a66c <_dtoa_r+0x5fc>)
 800a3f0:	4f9f      	ldr	r7, [pc, #636]	; (800a670 <_dtoa_r+0x600>)
 800a3f2:	f006 020f 	and.w	r2, r6, #15
 800a3f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a402:	f7f8 fbe5 	bl	8002bd0 <__aeabi_dmul>
 800a406:	e9cd 0100 	strd	r0, r1, [sp]
 800a40a:	1136      	asrs	r6, r6, #4
 800a40c:	2300      	movs	r3, #0
 800a40e:	2502      	movs	r5, #2
 800a410:	2e00      	cmp	r6, #0
 800a412:	d17c      	bne.n	800a50e <_dtoa_r+0x49e>
 800a414:	2b00      	cmp	r3, #0
 800a416:	d191      	bne.n	800a33c <_dtoa_r+0x2cc>
 800a418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f000 8084 	beq.w	800a528 <_dtoa_r+0x4b8>
 800a420:	e9dd 8900 	ldrd	r8, r9, [sp]
 800a424:	2200      	movs	r2, #0
 800a426:	4b93      	ldr	r3, [pc, #588]	; (800a674 <_dtoa_r+0x604>)
 800a428:	4640      	mov	r0, r8
 800a42a:	4649      	mov	r1, r9
 800a42c:	f7f8 fe42 	bl	80030b4 <__aeabi_dcmplt>
 800a430:	2800      	cmp	r0, #0
 800a432:	d079      	beq.n	800a528 <_dtoa_r+0x4b8>
 800a434:	9b03      	ldr	r3, [sp, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d076      	beq.n	800a528 <_dtoa_r+0x4b8>
 800a43a:	9b04      	ldr	r3, [sp, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	dd34      	ble.n	800a4aa <_dtoa_r+0x43a>
 800a440:	2200      	movs	r2, #0
 800a442:	4b8d      	ldr	r3, [pc, #564]	; (800a678 <_dtoa_r+0x608>)
 800a444:	4640      	mov	r0, r8
 800a446:	4649      	mov	r1, r9
 800a448:	f7f8 fbc2 	bl	8002bd0 <__aeabi_dmul>
 800a44c:	e9cd 0100 	strd	r0, r1, [sp]
 800a450:	9e04      	ldr	r6, [sp, #16]
 800a452:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a456:	3501      	adds	r5, #1
 800a458:	4628      	mov	r0, r5
 800a45a:	f7f8 fb53 	bl	8002b04 <__aeabi_i2d>
 800a45e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a462:	f7f8 fbb5 	bl	8002bd0 <__aeabi_dmul>
 800a466:	2200      	movs	r2, #0
 800a468:	4b84      	ldr	r3, [pc, #528]	; (800a67c <_dtoa_r+0x60c>)
 800a46a:	f7f8 f9ff 	bl	800286c <__adddf3>
 800a46e:	4680      	mov	r8, r0
 800a470:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800a474:	2e00      	cmp	r6, #0
 800a476:	d15a      	bne.n	800a52e <_dtoa_r+0x4be>
 800a478:	2200      	movs	r2, #0
 800a47a:	4b81      	ldr	r3, [pc, #516]	; (800a680 <_dtoa_r+0x610>)
 800a47c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a480:	f7f8 f9f2 	bl	8002868 <__aeabi_dsub>
 800a484:	4642      	mov	r2, r8
 800a486:	464b      	mov	r3, r9
 800a488:	e9cd 0100 	strd	r0, r1, [sp]
 800a48c:	f7f8 fe30 	bl	80030f0 <__aeabi_dcmpgt>
 800a490:	2800      	cmp	r0, #0
 800a492:	f040 829b 	bne.w	800a9cc <_dtoa_r+0x95c>
 800a496:	4642      	mov	r2, r8
 800a498:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a49c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4a0:	f7f8 fe08 	bl	80030b4 <__aeabi_dcmplt>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	f040 828f 	bne.w	800a9c8 <_dtoa_r+0x958>
 800a4aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a4ae:	e9cd 2300 	strd	r2, r3, [sp]
 800a4b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f2c0 8150 	blt.w	800a75a <_dtoa_r+0x6ea>
 800a4ba:	f1bb 0f0e 	cmp.w	fp, #14
 800a4be:	f300 814c 	bgt.w	800a75a <_dtoa_r+0x6ea>
 800a4c2:	4b6a      	ldr	r3, [pc, #424]	; (800a66c <_dtoa_r+0x5fc>)
 800a4c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a4c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f280 80da 	bge.w	800a688 <_dtoa_r+0x618>
 800a4d4:	9b03      	ldr	r3, [sp, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f300 80d6 	bgt.w	800a688 <_dtoa_r+0x618>
 800a4dc:	f040 8273 	bne.w	800a9c6 <_dtoa_r+0x956>
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	4b67      	ldr	r3, [pc, #412]	; (800a680 <_dtoa_r+0x610>)
 800a4e4:	4640      	mov	r0, r8
 800a4e6:	4649      	mov	r1, r9
 800a4e8:	f7f8 fb72 	bl	8002bd0 <__aeabi_dmul>
 800a4ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4f0:	f7f8 fdf4 	bl	80030dc <__aeabi_dcmpge>
 800a4f4:	9e03      	ldr	r6, [sp, #12]
 800a4f6:	4637      	mov	r7, r6
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	f040 824a 	bne.w	800a992 <_dtoa_r+0x922>
 800a4fe:	9b02      	ldr	r3, [sp, #8]
 800a500:	9a02      	ldr	r2, [sp, #8]
 800a502:	1c5d      	adds	r5, r3, #1
 800a504:	2331      	movs	r3, #49	; 0x31
 800a506:	7013      	strb	r3, [r2, #0]
 800a508:	f10b 0b01 	add.w	fp, fp, #1
 800a50c:	e245      	b.n	800a99a <_dtoa_r+0x92a>
 800a50e:	07f2      	lsls	r2, r6, #31
 800a510:	d505      	bpl.n	800a51e <_dtoa_r+0x4ae>
 800a512:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a516:	f7f8 fb5b 	bl	8002bd0 <__aeabi_dmul>
 800a51a:	3501      	adds	r5, #1
 800a51c:	2301      	movs	r3, #1
 800a51e:	1076      	asrs	r6, r6, #1
 800a520:	3708      	adds	r7, #8
 800a522:	e775      	b.n	800a410 <_dtoa_r+0x3a0>
 800a524:	2502      	movs	r5, #2
 800a526:	e777      	b.n	800a418 <_dtoa_r+0x3a8>
 800a528:	465f      	mov	r7, fp
 800a52a:	9e03      	ldr	r6, [sp, #12]
 800a52c:	e794      	b.n	800a458 <_dtoa_r+0x3e8>
 800a52e:	9a02      	ldr	r2, [sp, #8]
 800a530:	4b4e      	ldr	r3, [pc, #312]	; (800a66c <_dtoa_r+0x5fc>)
 800a532:	4432      	add	r2, r6
 800a534:	9213      	str	r2, [sp, #76]	; 0x4c
 800a536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a538:	1e71      	subs	r1, r6, #1
 800a53a:	2a00      	cmp	r2, #0
 800a53c:	d048      	beq.n	800a5d0 <_dtoa_r+0x560>
 800a53e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a546:	2000      	movs	r0, #0
 800a548:	494e      	ldr	r1, [pc, #312]	; (800a684 <_dtoa_r+0x614>)
 800a54a:	f7f8 fc6b 	bl	8002e24 <__aeabi_ddiv>
 800a54e:	4642      	mov	r2, r8
 800a550:	464b      	mov	r3, r9
 800a552:	f7f8 f989 	bl	8002868 <__aeabi_dsub>
 800a556:	9d02      	ldr	r5, [sp, #8]
 800a558:	4680      	mov	r8, r0
 800a55a:	4689      	mov	r9, r1
 800a55c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a560:	f7f8 fde6 	bl	8003130 <__aeabi_d2iz>
 800a564:	4606      	mov	r6, r0
 800a566:	f7f8 facd 	bl	8002b04 <__aeabi_i2d>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a572:	f7f8 f979 	bl	8002868 <__aeabi_dsub>
 800a576:	3630      	adds	r6, #48	; 0x30
 800a578:	f805 6b01 	strb.w	r6, [r5], #1
 800a57c:	4642      	mov	r2, r8
 800a57e:	464b      	mov	r3, r9
 800a580:	e9cd 0100 	strd	r0, r1, [sp]
 800a584:	f7f8 fd96 	bl	80030b4 <__aeabi_dcmplt>
 800a588:	2800      	cmp	r0, #0
 800a58a:	d165      	bne.n	800a658 <_dtoa_r+0x5e8>
 800a58c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a590:	2000      	movs	r0, #0
 800a592:	4938      	ldr	r1, [pc, #224]	; (800a674 <_dtoa_r+0x604>)
 800a594:	f7f8 f968 	bl	8002868 <__aeabi_dsub>
 800a598:	4642      	mov	r2, r8
 800a59a:	464b      	mov	r3, r9
 800a59c:	f7f8 fd8a 	bl	80030b4 <__aeabi_dcmplt>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	f040 80ba 	bne.w	800a71a <_dtoa_r+0x6aa>
 800a5a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5a8:	429d      	cmp	r5, r3
 800a5aa:	f43f af7e 	beq.w	800a4aa <_dtoa_r+0x43a>
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	4b31      	ldr	r3, [pc, #196]	; (800a678 <_dtoa_r+0x608>)
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	4649      	mov	r1, r9
 800a5b6:	f7f8 fb0b 	bl	8002bd0 <__aeabi_dmul>
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	4680      	mov	r8, r0
 800a5be:	4689      	mov	r9, r1
 800a5c0:	4b2d      	ldr	r3, [pc, #180]	; (800a678 <_dtoa_r+0x608>)
 800a5c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5c6:	f7f8 fb03 	bl	8002bd0 <__aeabi_dmul>
 800a5ca:	e9cd 0100 	strd	r0, r1, [sp]
 800a5ce:	e7c5      	b.n	800a55c <_dtoa_r+0x4ec>
 800a5d0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a5d4:	4642      	mov	r2, r8
 800a5d6:	464b      	mov	r3, r9
 800a5d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5dc:	f7f8 faf8 	bl	8002bd0 <__aeabi_dmul>
 800a5e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a5e4:	9d02      	ldr	r5, [sp, #8]
 800a5e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5ea:	f7f8 fda1 	bl	8003130 <__aeabi_d2iz>
 800a5ee:	4606      	mov	r6, r0
 800a5f0:	f7f8 fa88 	bl	8002b04 <__aeabi_i2d>
 800a5f4:	3630      	adds	r6, #48	; 0x30
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5fe:	f7f8 f933 	bl	8002868 <__aeabi_dsub>
 800a602:	f805 6b01 	strb.w	r6, [r5], #1
 800a606:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a608:	42ab      	cmp	r3, r5
 800a60a:	4680      	mov	r8, r0
 800a60c:	4689      	mov	r9, r1
 800a60e:	f04f 0200 	mov.w	r2, #0
 800a612:	d125      	bne.n	800a660 <_dtoa_r+0x5f0>
 800a614:	4b1b      	ldr	r3, [pc, #108]	; (800a684 <_dtoa_r+0x614>)
 800a616:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a61a:	f7f8 f927 	bl	800286c <__adddf3>
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	4640      	mov	r0, r8
 800a624:	4649      	mov	r1, r9
 800a626:	f7f8 fd63 	bl	80030f0 <__aeabi_dcmpgt>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d175      	bne.n	800a71a <_dtoa_r+0x6aa>
 800a62e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a632:	2000      	movs	r0, #0
 800a634:	4913      	ldr	r1, [pc, #76]	; (800a684 <_dtoa_r+0x614>)
 800a636:	f7f8 f917 	bl	8002868 <__aeabi_dsub>
 800a63a:	4602      	mov	r2, r0
 800a63c:	460b      	mov	r3, r1
 800a63e:	4640      	mov	r0, r8
 800a640:	4649      	mov	r1, r9
 800a642:	f7f8 fd37 	bl	80030b4 <__aeabi_dcmplt>
 800a646:	2800      	cmp	r0, #0
 800a648:	f43f af2f 	beq.w	800a4aa <_dtoa_r+0x43a>
 800a64c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a650:	2b30      	cmp	r3, #48	; 0x30
 800a652:	f105 32ff 	add.w	r2, r5, #4294967295
 800a656:	d001      	beq.n	800a65c <_dtoa_r+0x5ec>
 800a658:	46bb      	mov	fp, r7
 800a65a:	e04d      	b.n	800a6f8 <_dtoa_r+0x688>
 800a65c:	4615      	mov	r5, r2
 800a65e:	e7f5      	b.n	800a64c <_dtoa_r+0x5dc>
 800a660:	4b05      	ldr	r3, [pc, #20]	; (800a678 <_dtoa_r+0x608>)
 800a662:	f7f8 fab5 	bl	8002bd0 <__aeabi_dmul>
 800a666:	e9cd 0100 	strd	r0, r1, [sp]
 800a66a:	e7bc      	b.n	800a5e6 <_dtoa_r+0x576>
 800a66c:	0803c1c8 	.word	0x0803c1c8
 800a670:	0803c1a0 	.word	0x0803c1a0
 800a674:	3ff00000 	.word	0x3ff00000
 800a678:	40240000 	.word	0x40240000
 800a67c:	401c0000 	.word	0x401c0000
 800a680:	40140000 	.word	0x40140000
 800a684:	3fe00000 	.word	0x3fe00000
 800a688:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a68c:	9d02      	ldr	r5, [sp, #8]
 800a68e:	4642      	mov	r2, r8
 800a690:	464b      	mov	r3, r9
 800a692:	4630      	mov	r0, r6
 800a694:	4639      	mov	r1, r7
 800a696:	f7f8 fbc5 	bl	8002e24 <__aeabi_ddiv>
 800a69a:	f7f8 fd49 	bl	8003130 <__aeabi_d2iz>
 800a69e:	9000      	str	r0, [sp, #0]
 800a6a0:	f7f8 fa30 	bl	8002b04 <__aeabi_i2d>
 800a6a4:	4642      	mov	r2, r8
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	f7f8 fa92 	bl	8002bd0 <__aeabi_dmul>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	4639      	mov	r1, r7
 800a6b4:	f7f8 f8d8 	bl	8002868 <__aeabi_dsub>
 800a6b8:	9e00      	ldr	r6, [sp, #0]
 800a6ba:	9f03      	ldr	r7, [sp, #12]
 800a6bc:	3630      	adds	r6, #48	; 0x30
 800a6be:	f805 6b01 	strb.w	r6, [r5], #1
 800a6c2:	9e02      	ldr	r6, [sp, #8]
 800a6c4:	1bae      	subs	r6, r5, r6
 800a6c6:	42b7      	cmp	r7, r6
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	d138      	bne.n	800a740 <_dtoa_r+0x6d0>
 800a6ce:	f7f8 f8cd 	bl	800286c <__adddf3>
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	460f      	mov	r7, r1
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4640      	mov	r0, r8
 800a6dc:	4649      	mov	r1, r9
 800a6de:	f7f8 fce9 	bl	80030b4 <__aeabi_dcmplt>
 800a6e2:	b9c8      	cbnz	r0, 800a718 <_dtoa_r+0x6a8>
 800a6e4:	4632      	mov	r2, r6
 800a6e6:	463b      	mov	r3, r7
 800a6e8:	4640      	mov	r0, r8
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	f7f8 fcd8 	bl	80030a0 <__aeabi_dcmpeq>
 800a6f0:	b110      	cbz	r0, 800a6f8 <_dtoa_r+0x688>
 800a6f2:	9b00      	ldr	r3, [sp, #0]
 800a6f4:	07db      	lsls	r3, r3, #31
 800a6f6:	d40f      	bmi.n	800a718 <_dtoa_r+0x6a8>
 800a6f8:	4651      	mov	r1, sl
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 fcb2 	bl	800b064 <_Bfree>
 800a700:	2300      	movs	r3, #0
 800a702:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a704:	702b      	strb	r3, [r5, #0]
 800a706:	f10b 0301 	add.w	r3, fp, #1
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f43f acf8 	beq.w	800a104 <_dtoa_r+0x94>
 800a714:	601d      	str	r5, [r3, #0]
 800a716:	e4f5      	b.n	800a104 <_dtoa_r+0x94>
 800a718:	465f      	mov	r7, fp
 800a71a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a71e:	2a39      	cmp	r2, #57	; 0x39
 800a720:	f105 33ff 	add.w	r3, r5, #4294967295
 800a724:	d106      	bne.n	800a734 <_dtoa_r+0x6c4>
 800a726:	9a02      	ldr	r2, [sp, #8]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d107      	bne.n	800a73c <_dtoa_r+0x6cc>
 800a72c:	2330      	movs	r3, #48	; 0x30
 800a72e:	7013      	strb	r3, [r2, #0]
 800a730:	3701      	adds	r7, #1
 800a732:	4613      	mov	r3, r2
 800a734:	781a      	ldrb	r2, [r3, #0]
 800a736:	3201      	adds	r2, #1
 800a738:	701a      	strb	r2, [r3, #0]
 800a73a:	e78d      	b.n	800a658 <_dtoa_r+0x5e8>
 800a73c:	461d      	mov	r5, r3
 800a73e:	e7ec      	b.n	800a71a <_dtoa_r+0x6aa>
 800a740:	2200      	movs	r2, #0
 800a742:	4ba4      	ldr	r3, [pc, #656]	; (800a9d4 <_dtoa_r+0x964>)
 800a744:	f7f8 fa44 	bl	8002bd0 <__aeabi_dmul>
 800a748:	2200      	movs	r2, #0
 800a74a:	2300      	movs	r3, #0
 800a74c:	4606      	mov	r6, r0
 800a74e:	460f      	mov	r7, r1
 800a750:	f7f8 fca6 	bl	80030a0 <__aeabi_dcmpeq>
 800a754:	2800      	cmp	r0, #0
 800a756:	d09a      	beq.n	800a68e <_dtoa_r+0x61e>
 800a758:	e7ce      	b.n	800a6f8 <_dtoa_r+0x688>
 800a75a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a75c:	2a00      	cmp	r2, #0
 800a75e:	f000 80cd 	beq.w	800a8fc <_dtoa_r+0x88c>
 800a762:	9a07      	ldr	r2, [sp, #28]
 800a764:	2a01      	cmp	r2, #1
 800a766:	f300 80af 	bgt.w	800a8c8 <_dtoa_r+0x858>
 800a76a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a76c:	2a00      	cmp	r2, #0
 800a76e:	f000 80a7 	beq.w	800a8c0 <_dtoa_r+0x850>
 800a772:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a776:	9e08      	ldr	r6, [sp, #32]
 800a778:	9d05      	ldr	r5, [sp, #20]
 800a77a:	9a05      	ldr	r2, [sp, #20]
 800a77c:	441a      	add	r2, r3
 800a77e:	9205      	str	r2, [sp, #20]
 800a780:	9a06      	ldr	r2, [sp, #24]
 800a782:	2101      	movs	r1, #1
 800a784:	441a      	add	r2, r3
 800a786:	4620      	mov	r0, r4
 800a788:	9206      	str	r2, [sp, #24]
 800a78a:	f000 fd0b 	bl	800b1a4 <__i2b>
 800a78e:	4607      	mov	r7, r0
 800a790:	2d00      	cmp	r5, #0
 800a792:	dd0c      	ble.n	800a7ae <_dtoa_r+0x73e>
 800a794:	9b06      	ldr	r3, [sp, #24]
 800a796:	2b00      	cmp	r3, #0
 800a798:	dd09      	ble.n	800a7ae <_dtoa_r+0x73e>
 800a79a:	42ab      	cmp	r3, r5
 800a79c:	9a05      	ldr	r2, [sp, #20]
 800a79e:	bfa8      	it	ge
 800a7a0:	462b      	movge	r3, r5
 800a7a2:	1ad2      	subs	r2, r2, r3
 800a7a4:	9205      	str	r2, [sp, #20]
 800a7a6:	9a06      	ldr	r2, [sp, #24]
 800a7a8:	1aed      	subs	r5, r5, r3
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	9306      	str	r3, [sp, #24]
 800a7ae:	9b08      	ldr	r3, [sp, #32]
 800a7b0:	b1f3      	cbz	r3, 800a7f0 <_dtoa_r+0x780>
 800a7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 80a5 	beq.w	800a904 <_dtoa_r+0x894>
 800a7ba:	2e00      	cmp	r6, #0
 800a7bc:	dd10      	ble.n	800a7e0 <_dtoa_r+0x770>
 800a7be:	4639      	mov	r1, r7
 800a7c0:	4632      	mov	r2, r6
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 fd84 	bl	800b2d0 <__pow5mult>
 800a7c8:	4652      	mov	r2, sl
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	4607      	mov	r7, r0
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 fcf1 	bl	800b1b6 <__multiply>
 800a7d4:	4651      	mov	r1, sl
 800a7d6:	4680      	mov	r8, r0
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 fc43 	bl	800b064 <_Bfree>
 800a7de:	46c2      	mov	sl, r8
 800a7e0:	9b08      	ldr	r3, [sp, #32]
 800a7e2:	1b9a      	subs	r2, r3, r6
 800a7e4:	d004      	beq.n	800a7f0 <_dtoa_r+0x780>
 800a7e6:	4651      	mov	r1, sl
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f000 fd71 	bl	800b2d0 <__pow5mult>
 800a7ee:	4682      	mov	sl, r0
 800a7f0:	2101      	movs	r1, #1
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f000 fcd6 	bl	800b1a4 <__i2b>
 800a7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	f340 8083 	ble.w	800a908 <_dtoa_r+0x898>
 800a802:	461a      	mov	r2, r3
 800a804:	4601      	mov	r1, r0
 800a806:	4620      	mov	r0, r4
 800a808:	f000 fd62 	bl	800b2d0 <__pow5mult>
 800a80c:	9b07      	ldr	r3, [sp, #28]
 800a80e:	2b01      	cmp	r3, #1
 800a810:	4606      	mov	r6, r0
 800a812:	dd7c      	ble.n	800a90e <_dtoa_r+0x89e>
 800a814:	f04f 0800 	mov.w	r8, #0
 800a818:	6933      	ldr	r3, [r6, #16]
 800a81a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a81e:	6918      	ldr	r0, [r3, #16]
 800a820:	f000 fc72 	bl	800b108 <__hi0bits>
 800a824:	f1c0 0020 	rsb	r0, r0, #32
 800a828:	9b06      	ldr	r3, [sp, #24]
 800a82a:	4418      	add	r0, r3
 800a82c:	f010 001f 	ands.w	r0, r0, #31
 800a830:	f000 8096 	beq.w	800a960 <_dtoa_r+0x8f0>
 800a834:	f1c0 0320 	rsb	r3, r0, #32
 800a838:	2b04      	cmp	r3, #4
 800a83a:	f340 8087 	ble.w	800a94c <_dtoa_r+0x8dc>
 800a83e:	9b05      	ldr	r3, [sp, #20]
 800a840:	f1c0 001c 	rsb	r0, r0, #28
 800a844:	4403      	add	r3, r0
 800a846:	9305      	str	r3, [sp, #20]
 800a848:	9b06      	ldr	r3, [sp, #24]
 800a84a:	4405      	add	r5, r0
 800a84c:	4403      	add	r3, r0
 800a84e:	9306      	str	r3, [sp, #24]
 800a850:	9b05      	ldr	r3, [sp, #20]
 800a852:	2b00      	cmp	r3, #0
 800a854:	dd05      	ble.n	800a862 <_dtoa_r+0x7f2>
 800a856:	4651      	mov	r1, sl
 800a858:	461a      	mov	r2, r3
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 fd86 	bl	800b36c <__lshift>
 800a860:	4682      	mov	sl, r0
 800a862:	9b06      	ldr	r3, [sp, #24]
 800a864:	2b00      	cmp	r3, #0
 800a866:	dd05      	ble.n	800a874 <_dtoa_r+0x804>
 800a868:	4631      	mov	r1, r6
 800a86a:	461a      	mov	r2, r3
 800a86c:	4620      	mov	r0, r4
 800a86e:	f000 fd7d 	bl	800b36c <__lshift>
 800a872:	4606      	mov	r6, r0
 800a874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a876:	2b00      	cmp	r3, #0
 800a878:	d074      	beq.n	800a964 <_dtoa_r+0x8f4>
 800a87a:	4631      	mov	r1, r6
 800a87c:	4650      	mov	r0, sl
 800a87e:	f000 fdc6 	bl	800b40e <__mcmp>
 800a882:	2800      	cmp	r0, #0
 800a884:	da6e      	bge.n	800a964 <_dtoa_r+0x8f4>
 800a886:	2300      	movs	r3, #0
 800a888:	4651      	mov	r1, sl
 800a88a:	220a      	movs	r2, #10
 800a88c:	4620      	mov	r0, r4
 800a88e:	f000 fc00 	bl	800b092 <__multadd>
 800a892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a894:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a898:	4682      	mov	sl, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f000 81a8 	beq.w	800abf0 <_dtoa_r+0xb80>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	4639      	mov	r1, r7
 800a8a4:	220a      	movs	r2, #10
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f000 fbf3 	bl	800b092 <__multadd>
 800a8ac:	9b04      	ldr	r3, [sp, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	4607      	mov	r7, r0
 800a8b2:	f300 80c8 	bgt.w	800aa46 <_dtoa_r+0x9d6>
 800a8b6:	9b07      	ldr	r3, [sp, #28]
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	f340 80c4 	ble.w	800aa46 <_dtoa_r+0x9d6>
 800a8be:	e059      	b.n	800a974 <_dtoa_r+0x904>
 800a8c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8c6:	e756      	b.n	800a776 <_dtoa_r+0x706>
 800a8c8:	9b03      	ldr	r3, [sp, #12]
 800a8ca:	1e5e      	subs	r6, r3, #1
 800a8cc:	9b08      	ldr	r3, [sp, #32]
 800a8ce:	42b3      	cmp	r3, r6
 800a8d0:	bfbf      	itttt	lt
 800a8d2:	9b08      	ldrlt	r3, [sp, #32]
 800a8d4:	9608      	strlt	r6, [sp, #32]
 800a8d6:	1af2      	sublt	r2, r6, r3
 800a8d8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800a8da:	bfb6      	itet	lt
 800a8dc:	189b      	addlt	r3, r3, r2
 800a8de:	1b9e      	subge	r6, r3, r6
 800a8e0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800a8e2:	9b03      	ldr	r3, [sp, #12]
 800a8e4:	bfb8      	it	lt
 800a8e6:	2600      	movlt	r6, #0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	bfb9      	ittee	lt
 800a8ec:	9b05      	ldrlt	r3, [sp, #20]
 800a8ee:	9a03      	ldrlt	r2, [sp, #12]
 800a8f0:	9d05      	ldrge	r5, [sp, #20]
 800a8f2:	9b03      	ldrge	r3, [sp, #12]
 800a8f4:	bfbc      	itt	lt
 800a8f6:	1a9d      	sublt	r5, r3, r2
 800a8f8:	2300      	movlt	r3, #0
 800a8fa:	e73e      	b.n	800a77a <_dtoa_r+0x70a>
 800a8fc:	9e08      	ldr	r6, [sp, #32]
 800a8fe:	9d05      	ldr	r5, [sp, #20]
 800a900:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a902:	e745      	b.n	800a790 <_dtoa_r+0x720>
 800a904:	9a08      	ldr	r2, [sp, #32]
 800a906:	e76e      	b.n	800a7e6 <_dtoa_r+0x776>
 800a908:	9b07      	ldr	r3, [sp, #28]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	dc19      	bgt.n	800a942 <_dtoa_r+0x8d2>
 800a90e:	9b00      	ldr	r3, [sp, #0]
 800a910:	b9bb      	cbnz	r3, 800a942 <_dtoa_r+0x8d2>
 800a912:	9b01      	ldr	r3, [sp, #4]
 800a914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a918:	b99b      	cbnz	r3, 800a942 <_dtoa_r+0x8d2>
 800a91a:	9b01      	ldr	r3, [sp, #4]
 800a91c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a920:	0d1b      	lsrs	r3, r3, #20
 800a922:	051b      	lsls	r3, r3, #20
 800a924:	b183      	cbz	r3, 800a948 <_dtoa_r+0x8d8>
 800a926:	9b05      	ldr	r3, [sp, #20]
 800a928:	3301      	adds	r3, #1
 800a92a:	9305      	str	r3, [sp, #20]
 800a92c:	9b06      	ldr	r3, [sp, #24]
 800a92e:	3301      	adds	r3, #1
 800a930:	9306      	str	r3, [sp, #24]
 800a932:	f04f 0801 	mov.w	r8, #1
 800a936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f47f af6d 	bne.w	800a818 <_dtoa_r+0x7a8>
 800a93e:	2001      	movs	r0, #1
 800a940:	e772      	b.n	800a828 <_dtoa_r+0x7b8>
 800a942:	f04f 0800 	mov.w	r8, #0
 800a946:	e7f6      	b.n	800a936 <_dtoa_r+0x8c6>
 800a948:	4698      	mov	r8, r3
 800a94a:	e7f4      	b.n	800a936 <_dtoa_r+0x8c6>
 800a94c:	d080      	beq.n	800a850 <_dtoa_r+0x7e0>
 800a94e:	9a05      	ldr	r2, [sp, #20]
 800a950:	331c      	adds	r3, #28
 800a952:	441a      	add	r2, r3
 800a954:	9205      	str	r2, [sp, #20]
 800a956:	9a06      	ldr	r2, [sp, #24]
 800a958:	441a      	add	r2, r3
 800a95a:	441d      	add	r5, r3
 800a95c:	4613      	mov	r3, r2
 800a95e:	e776      	b.n	800a84e <_dtoa_r+0x7de>
 800a960:	4603      	mov	r3, r0
 800a962:	e7f4      	b.n	800a94e <_dtoa_r+0x8de>
 800a964:	9b03      	ldr	r3, [sp, #12]
 800a966:	2b00      	cmp	r3, #0
 800a968:	dc36      	bgt.n	800a9d8 <_dtoa_r+0x968>
 800a96a:	9b07      	ldr	r3, [sp, #28]
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	dd33      	ble.n	800a9d8 <_dtoa_r+0x968>
 800a970:	9b03      	ldr	r3, [sp, #12]
 800a972:	9304      	str	r3, [sp, #16]
 800a974:	9b04      	ldr	r3, [sp, #16]
 800a976:	b963      	cbnz	r3, 800a992 <_dtoa_r+0x922>
 800a978:	4631      	mov	r1, r6
 800a97a:	2205      	movs	r2, #5
 800a97c:	4620      	mov	r0, r4
 800a97e:	f000 fb88 	bl	800b092 <__multadd>
 800a982:	4601      	mov	r1, r0
 800a984:	4606      	mov	r6, r0
 800a986:	4650      	mov	r0, sl
 800a988:	f000 fd41 	bl	800b40e <__mcmp>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	f73f adb6 	bgt.w	800a4fe <_dtoa_r+0x48e>
 800a992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a994:	9d02      	ldr	r5, [sp, #8]
 800a996:	ea6f 0b03 	mvn.w	fp, r3
 800a99a:	2300      	movs	r3, #0
 800a99c:	9303      	str	r3, [sp, #12]
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f000 fb5f 	bl	800b064 <_Bfree>
 800a9a6:	2f00      	cmp	r7, #0
 800a9a8:	f43f aea6 	beq.w	800a6f8 <_dtoa_r+0x688>
 800a9ac:	9b03      	ldr	r3, [sp, #12]
 800a9ae:	b12b      	cbz	r3, 800a9bc <_dtoa_r+0x94c>
 800a9b0:	42bb      	cmp	r3, r7
 800a9b2:	d003      	beq.n	800a9bc <_dtoa_r+0x94c>
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 fb54 	bl	800b064 <_Bfree>
 800a9bc:	4639      	mov	r1, r7
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f000 fb50 	bl	800b064 <_Bfree>
 800a9c4:	e698      	b.n	800a6f8 <_dtoa_r+0x688>
 800a9c6:	2600      	movs	r6, #0
 800a9c8:	4637      	mov	r7, r6
 800a9ca:	e7e2      	b.n	800a992 <_dtoa_r+0x922>
 800a9cc:	46bb      	mov	fp, r7
 800a9ce:	4637      	mov	r7, r6
 800a9d0:	e595      	b.n	800a4fe <_dtoa_r+0x48e>
 800a9d2:	bf00      	nop
 800a9d4:	40240000 	.word	0x40240000
 800a9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9da:	bb93      	cbnz	r3, 800aa42 <_dtoa_r+0x9d2>
 800a9dc:	9b03      	ldr	r3, [sp, #12]
 800a9de:	9304      	str	r3, [sp, #16]
 800a9e0:	9d02      	ldr	r5, [sp, #8]
 800a9e2:	4631      	mov	r1, r6
 800a9e4:	4650      	mov	r0, sl
 800a9e6:	f7ff fab5 	bl	8009f54 <quorem>
 800a9ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a9ee:	f805 9b01 	strb.w	r9, [r5], #1
 800a9f2:	9b02      	ldr	r3, [sp, #8]
 800a9f4:	9a04      	ldr	r2, [sp, #16]
 800a9f6:	1aeb      	subs	r3, r5, r3
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	f300 80dc 	bgt.w	800abb6 <_dtoa_r+0xb46>
 800a9fe:	9b02      	ldr	r3, [sp, #8]
 800aa00:	2a01      	cmp	r2, #1
 800aa02:	bfac      	ite	ge
 800aa04:	189b      	addge	r3, r3, r2
 800aa06:	3301      	addlt	r3, #1
 800aa08:	4698      	mov	r8, r3
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	9303      	str	r3, [sp, #12]
 800aa0e:	4651      	mov	r1, sl
 800aa10:	2201      	movs	r2, #1
 800aa12:	4620      	mov	r0, r4
 800aa14:	f000 fcaa 	bl	800b36c <__lshift>
 800aa18:	4631      	mov	r1, r6
 800aa1a:	4682      	mov	sl, r0
 800aa1c:	f000 fcf7 	bl	800b40e <__mcmp>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	f300 808d 	bgt.w	800ab40 <_dtoa_r+0xad0>
 800aa26:	d103      	bne.n	800aa30 <_dtoa_r+0x9c0>
 800aa28:	f019 0f01 	tst.w	r9, #1
 800aa2c:	f040 8088 	bne.w	800ab40 <_dtoa_r+0xad0>
 800aa30:	4645      	mov	r5, r8
 800aa32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa36:	2b30      	cmp	r3, #48	; 0x30
 800aa38:	f105 32ff 	add.w	r2, r5, #4294967295
 800aa3c:	d1af      	bne.n	800a99e <_dtoa_r+0x92e>
 800aa3e:	4615      	mov	r5, r2
 800aa40:	e7f7      	b.n	800aa32 <_dtoa_r+0x9c2>
 800aa42:	9b03      	ldr	r3, [sp, #12]
 800aa44:	9304      	str	r3, [sp, #16]
 800aa46:	2d00      	cmp	r5, #0
 800aa48:	dd05      	ble.n	800aa56 <_dtoa_r+0x9e6>
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	462a      	mov	r2, r5
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f000 fc8c 	bl	800b36c <__lshift>
 800aa54:	4607      	mov	r7, r0
 800aa56:	f1b8 0f00 	cmp.w	r8, #0
 800aa5a:	d04c      	beq.n	800aaf6 <_dtoa_r+0xa86>
 800aa5c:	6879      	ldr	r1, [r7, #4]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 facc 	bl	800affc <_Balloc>
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	3202      	adds	r2, #2
 800aa68:	4605      	mov	r5, r0
 800aa6a:	0092      	lsls	r2, r2, #2
 800aa6c:	f107 010c 	add.w	r1, r7, #12
 800aa70:	300c      	adds	r0, #12
 800aa72:	f7fe fbe8 	bl	8009246 <memcpy>
 800aa76:	2201      	movs	r2, #1
 800aa78:	4629      	mov	r1, r5
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 fc76 	bl	800b36c <__lshift>
 800aa80:	9b00      	ldr	r3, [sp, #0]
 800aa82:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800aa86:	9703      	str	r7, [sp, #12]
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	4607      	mov	r7, r0
 800aa8e:	9305      	str	r3, [sp, #20]
 800aa90:	4631      	mov	r1, r6
 800aa92:	4650      	mov	r0, sl
 800aa94:	f7ff fa5e 	bl	8009f54 <quorem>
 800aa98:	9903      	ldr	r1, [sp, #12]
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aaa0:	4650      	mov	r0, sl
 800aaa2:	f000 fcb4 	bl	800b40e <__mcmp>
 800aaa6:	463a      	mov	r2, r7
 800aaa8:	9000      	str	r0, [sp, #0]
 800aaaa:	4631      	mov	r1, r6
 800aaac:	4620      	mov	r0, r4
 800aaae:	f000 fcc8 	bl	800b442 <__mdiff>
 800aab2:	68c3      	ldr	r3, [r0, #12]
 800aab4:	4602      	mov	r2, r0
 800aab6:	bb03      	cbnz	r3, 800aafa <_dtoa_r+0xa8a>
 800aab8:	4601      	mov	r1, r0
 800aaba:	9006      	str	r0, [sp, #24]
 800aabc:	4650      	mov	r0, sl
 800aabe:	f000 fca6 	bl	800b40e <__mcmp>
 800aac2:	9a06      	ldr	r2, [sp, #24]
 800aac4:	4603      	mov	r3, r0
 800aac6:	4611      	mov	r1, r2
 800aac8:	4620      	mov	r0, r4
 800aaca:	9306      	str	r3, [sp, #24]
 800aacc:	f000 faca 	bl	800b064 <_Bfree>
 800aad0:	9b06      	ldr	r3, [sp, #24]
 800aad2:	b9a3      	cbnz	r3, 800aafe <_dtoa_r+0xa8e>
 800aad4:	9a07      	ldr	r2, [sp, #28]
 800aad6:	b992      	cbnz	r2, 800aafe <_dtoa_r+0xa8e>
 800aad8:	9a05      	ldr	r2, [sp, #20]
 800aada:	b982      	cbnz	r2, 800aafe <_dtoa_r+0xa8e>
 800aadc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aae0:	d029      	beq.n	800ab36 <_dtoa_r+0xac6>
 800aae2:	9b00      	ldr	r3, [sp, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	dd01      	ble.n	800aaec <_dtoa_r+0xa7c>
 800aae8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800aaec:	f108 0501 	add.w	r5, r8, #1
 800aaf0:	f888 9000 	strb.w	r9, [r8]
 800aaf4:	e753      	b.n	800a99e <_dtoa_r+0x92e>
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	e7c2      	b.n	800aa80 <_dtoa_r+0xa10>
 800aafa:	2301      	movs	r3, #1
 800aafc:	e7e3      	b.n	800aac6 <_dtoa_r+0xa56>
 800aafe:	9a00      	ldr	r2, [sp, #0]
 800ab00:	2a00      	cmp	r2, #0
 800ab02:	db04      	blt.n	800ab0e <_dtoa_r+0xa9e>
 800ab04:	d125      	bne.n	800ab52 <_dtoa_r+0xae2>
 800ab06:	9a07      	ldr	r2, [sp, #28]
 800ab08:	bb1a      	cbnz	r2, 800ab52 <_dtoa_r+0xae2>
 800ab0a:	9a05      	ldr	r2, [sp, #20]
 800ab0c:	bb0a      	cbnz	r2, 800ab52 <_dtoa_r+0xae2>
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	ddec      	ble.n	800aaec <_dtoa_r+0xa7c>
 800ab12:	4651      	mov	r1, sl
 800ab14:	2201      	movs	r2, #1
 800ab16:	4620      	mov	r0, r4
 800ab18:	f000 fc28 	bl	800b36c <__lshift>
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	4682      	mov	sl, r0
 800ab20:	f000 fc75 	bl	800b40e <__mcmp>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	dc03      	bgt.n	800ab30 <_dtoa_r+0xac0>
 800ab28:	d1e0      	bne.n	800aaec <_dtoa_r+0xa7c>
 800ab2a:	f019 0f01 	tst.w	r9, #1
 800ab2e:	d0dd      	beq.n	800aaec <_dtoa_r+0xa7c>
 800ab30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ab34:	d1d8      	bne.n	800aae8 <_dtoa_r+0xa78>
 800ab36:	2339      	movs	r3, #57	; 0x39
 800ab38:	f888 3000 	strb.w	r3, [r8]
 800ab3c:	f108 0801 	add.w	r8, r8, #1
 800ab40:	4645      	mov	r5, r8
 800ab42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab46:	2b39      	cmp	r3, #57	; 0x39
 800ab48:	f105 32ff 	add.w	r2, r5, #4294967295
 800ab4c:	d03b      	beq.n	800abc6 <_dtoa_r+0xb56>
 800ab4e:	3301      	adds	r3, #1
 800ab50:	e040      	b.n	800abd4 <_dtoa_r+0xb64>
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f108 0501 	add.w	r5, r8, #1
 800ab58:	dd05      	ble.n	800ab66 <_dtoa_r+0xaf6>
 800ab5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ab5e:	d0ea      	beq.n	800ab36 <_dtoa_r+0xac6>
 800ab60:	f109 0901 	add.w	r9, r9, #1
 800ab64:	e7c4      	b.n	800aaf0 <_dtoa_r+0xa80>
 800ab66:	9b02      	ldr	r3, [sp, #8]
 800ab68:	9a04      	ldr	r2, [sp, #16]
 800ab6a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800ab6e:	1aeb      	subs	r3, r5, r3
 800ab70:	4293      	cmp	r3, r2
 800ab72:	46a8      	mov	r8, r5
 800ab74:	f43f af4b 	beq.w	800aa0e <_dtoa_r+0x99e>
 800ab78:	4651      	mov	r1, sl
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	220a      	movs	r2, #10
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 fa87 	bl	800b092 <__multadd>
 800ab84:	9b03      	ldr	r3, [sp, #12]
 800ab86:	9903      	ldr	r1, [sp, #12]
 800ab88:	42bb      	cmp	r3, r7
 800ab8a:	4682      	mov	sl, r0
 800ab8c:	f04f 0300 	mov.w	r3, #0
 800ab90:	f04f 020a 	mov.w	r2, #10
 800ab94:	4620      	mov	r0, r4
 800ab96:	d104      	bne.n	800aba2 <_dtoa_r+0xb32>
 800ab98:	f000 fa7b 	bl	800b092 <__multadd>
 800ab9c:	9003      	str	r0, [sp, #12]
 800ab9e:	4607      	mov	r7, r0
 800aba0:	e776      	b.n	800aa90 <_dtoa_r+0xa20>
 800aba2:	f000 fa76 	bl	800b092 <__multadd>
 800aba6:	2300      	movs	r3, #0
 800aba8:	9003      	str	r0, [sp, #12]
 800abaa:	220a      	movs	r2, #10
 800abac:	4639      	mov	r1, r7
 800abae:	4620      	mov	r0, r4
 800abb0:	f000 fa6f 	bl	800b092 <__multadd>
 800abb4:	e7f3      	b.n	800ab9e <_dtoa_r+0xb2e>
 800abb6:	4651      	mov	r1, sl
 800abb8:	2300      	movs	r3, #0
 800abba:	220a      	movs	r2, #10
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 fa68 	bl	800b092 <__multadd>
 800abc2:	4682      	mov	sl, r0
 800abc4:	e70d      	b.n	800a9e2 <_dtoa_r+0x972>
 800abc6:	9b02      	ldr	r3, [sp, #8]
 800abc8:	4293      	cmp	r3, r2
 800abca:	d105      	bne.n	800abd8 <_dtoa_r+0xb68>
 800abcc:	9a02      	ldr	r2, [sp, #8]
 800abce:	f10b 0b01 	add.w	fp, fp, #1
 800abd2:	2331      	movs	r3, #49	; 0x31
 800abd4:	7013      	strb	r3, [r2, #0]
 800abd6:	e6e2      	b.n	800a99e <_dtoa_r+0x92e>
 800abd8:	4615      	mov	r5, r2
 800abda:	e7b2      	b.n	800ab42 <_dtoa_r+0xad2>
 800abdc:	4b09      	ldr	r3, [pc, #36]	; (800ac04 <_dtoa_r+0xb94>)
 800abde:	f7ff baae 	b.w	800a13e <_dtoa_r+0xce>
 800abe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f47f aa88 	bne.w	800a0fa <_dtoa_r+0x8a>
 800abea:	4b07      	ldr	r3, [pc, #28]	; (800ac08 <_dtoa_r+0xb98>)
 800abec:	f7ff baa7 	b.w	800a13e <_dtoa_r+0xce>
 800abf0:	9b04      	ldr	r3, [sp, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f73f aef4 	bgt.w	800a9e0 <_dtoa_r+0x970>
 800abf8:	9b07      	ldr	r3, [sp, #28]
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	f77f aef0 	ble.w	800a9e0 <_dtoa_r+0x970>
 800ac00:	e6b8      	b.n	800a974 <_dtoa_r+0x904>
 800ac02:	bf00      	nop
 800ac04:	0803c3bc 	.word	0x0803c3bc
 800ac08:	0803c12e 	.word	0x0803c12e

0800ac0c <__sflush_r>:
 800ac0c:	898a      	ldrh	r2, [r1, #12]
 800ac0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac12:	4605      	mov	r5, r0
 800ac14:	0710      	lsls	r0, r2, #28
 800ac16:	460c      	mov	r4, r1
 800ac18:	d45a      	bmi.n	800acd0 <__sflush_r+0xc4>
 800ac1a:	684b      	ldr	r3, [r1, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dc05      	bgt.n	800ac2c <__sflush_r+0x20>
 800ac20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	dc02      	bgt.n	800ac2c <__sflush_r+0x20>
 800ac26:	2000      	movs	r0, #0
 800ac28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac2e:	2e00      	cmp	r6, #0
 800ac30:	d0f9      	beq.n	800ac26 <__sflush_r+0x1a>
 800ac32:	2300      	movs	r3, #0
 800ac34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac38:	682f      	ldr	r7, [r5, #0]
 800ac3a:	602b      	str	r3, [r5, #0]
 800ac3c:	d033      	beq.n	800aca6 <__sflush_r+0x9a>
 800ac3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac40:	89a3      	ldrh	r3, [r4, #12]
 800ac42:	075a      	lsls	r2, r3, #29
 800ac44:	d505      	bpl.n	800ac52 <__sflush_r+0x46>
 800ac46:	6863      	ldr	r3, [r4, #4]
 800ac48:	1ac0      	subs	r0, r0, r3
 800ac4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac4c:	b10b      	cbz	r3, 800ac52 <__sflush_r+0x46>
 800ac4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac50:	1ac0      	subs	r0, r0, r3
 800ac52:	2300      	movs	r3, #0
 800ac54:	4602      	mov	r2, r0
 800ac56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac58:	6a21      	ldr	r1, [r4, #32]
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	47b0      	blx	r6
 800ac5e:	1c43      	adds	r3, r0, #1
 800ac60:	89a3      	ldrh	r3, [r4, #12]
 800ac62:	d106      	bne.n	800ac72 <__sflush_r+0x66>
 800ac64:	6829      	ldr	r1, [r5, #0]
 800ac66:	291d      	cmp	r1, #29
 800ac68:	d84b      	bhi.n	800ad02 <__sflush_r+0xf6>
 800ac6a:	4a2b      	ldr	r2, [pc, #172]	; (800ad18 <__sflush_r+0x10c>)
 800ac6c:	40ca      	lsrs	r2, r1
 800ac6e:	07d6      	lsls	r6, r2, #31
 800ac70:	d547      	bpl.n	800ad02 <__sflush_r+0xf6>
 800ac72:	2200      	movs	r2, #0
 800ac74:	6062      	str	r2, [r4, #4]
 800ac76:	04d9      	lsls	r1, r3, #19
 800ac78:	6922      	ldr	r2, [r4, #16]
 800ac7a:	6022      	str	r2, [r4, #0]
 800ac7c:	d504      	bpl.n	800ac88 <__sflush_r+0x7c>
 800ac7e:	1c42      	adds	r2, r0, #1
 800ac80:	d101      	bne.n	800ac86 <__sflush_r+0x7a>
 800ac82:	682b      	ldr	r3, [r5, #0]
 800ac84:	b903      	cbnz	r3, 800ac88 <__sflush_r+0x7c>
 800ac86:	6560      	str	r0, [r4, #84]	; 0x54
 800ac88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac8a:	602f      	str	r7, [r5, #0]
 800ac8c:	2900      	cmp	r1, #0
 800ac8e:	d0ca      	beq.n	800ac26 <__sflush_r+0x1a>
 800ac90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac94:	4299      	cmp	r1, r3
 800ac96:	d002      	beq.n	800ac9e <__sflush_r+0x92>
 800ac98:	4628      	mov	r0, r5
 800ac9a:	f000 fc7f 	bl	800b59c <_free_r>
 800ac9e:	2000      	movs	r0, #0
 800aca0:	6360      	str	r0, [r4, #52]	; 0x34
 800aca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca6:	6a21      	ldr	r1, [r4, #32]
 800aca8:	2301      	movs	r3, #1
 800acaa:	4628      	mov	r0, r5
 800acac:	47b0      	blx	r6
 800acae:	1c41      	adds	r1, r0, #1
 800acb0:	d1c6      	bne.n	800ac40 <__sflush_r+0x34>
 800acb2:	682b      	ldr	r3, [r5, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d0c3      	beq.n	800ac40 <__sflush_r+0x34>
 800acb8:	2b1d      	cmp	r3, #29
 800acba:	d001      	beq.n	800acc0 <__sflush_r+0xb4>
 800acbc:	2b16      	cmp	r3, #22
 800acbe:	d101      	bne.n	800acc4 <__sflush_r+0xb8>
 800acc0:	602f      	str	r7, [r5, #0]
 800acc2:	e7b0      	b.n	800ac26 <__sflush_r+0x1a>
 800acc4:	89a3      	ldrh	r3, [r4, #12]
 800acc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acca:	81a3      	strh	r3, [r4, #12]
 800accc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd0:	690f      	ldr	r7, [r1, #16]
 800acd2:	2f00      	cmp	r7, #0
 800acd4:	d0a7      	beq.n	800ac26 <__sflush_r+0x1a>
 800acd6:	0793      	lsls	r3, r2, #30
 800acd8:	680e      	ldr	r6, [r1, #0]
 800acda:	bf08      	it	eq
 800acdc:	694b      	ldreq	r3, [r1, #20]
 800acde:	600f      	str	r7, [r1, #0]
 800ace0:	bf18      	it	ne
 800ace2:	2300      	movne	r3, #0
 800ace4:	eba6 0807 	sub.w	r8, r6, r7
 800ace8:	608b      	str	r3, [r1, #8]
 800acea:	f1b8 0f00 	cmp.w	r8, #0
 800acee:	dd9a      	ble.n	800ac26 <__sflush_r+0x1a>
 800acf0:	4643      	mov	r3, r8
 800acf2:	463a      	mov	r2, r7
 800acf4:	6a21      	ldr	r1, [r4, #32]
 800acf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acf8:	4628      	mov	r0, r5
 800acfa:	47b0      	blx	r6
 800acfc:	2800      	cmp	r0, #0
 800acfe:	dc07      	bgt.n	800ad10 <__sflush_r+0x104>
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad06:	81a3      	strh	r3, [r4, #12]
 800ad08:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad10:	4407      	add	r7, r0
 800ad12:	eba8 0800 	sub.w	r8, r8, r0
 800ad16:	e7e8      	b.n	800acea <__sflush_r+0xde>
 800ad18:	20400001 	.word	0x20400001

0800ad1c <_fflush_r>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	690b      	ldr	r3, [r1, #16]
 800ad20:	4605      	mov	r5, r0
 800ad22:	460c      	mov	r4, r1
 800ad24:	b1db      	cbz	r3, 800ad5e <_fflush_r+0x42>
 800ad26:	b118      	cbz	r0, 800ad30 <_fflush_r+0x14>
 800ad28:	6983      	ldr	r3, [r0, #24]
 800ad2a:	b90b      	cbnz	r3, 800ad30 <_fflush_r+0x14>
 800ad2c:	f000 f860 	bl	800adf0 <__sinit>
 800ad30:	4b0c      	ldr	r3, [pc, #48]	; (800ad64 <_fflush_r+0x48>)
 800ad32:	429c      	cmp	r4, r3
 800ad34:	d109      	bne.n	800ad4a <_fflush_r+0x2e>
 800ad36:	686c      	ldr	r4, [r5, #4]
 800ad38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad3c:	b17b      	cbz	r3, 800ad5e <_fflush_r+0x42>
 800ad3e:	4621      	mov	r1, r4
 800ad40:	4628      	mov	r0, r5
 800ad42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad46:	f7ff bf61 	b.w	800ac0c <__sflush_r>
 800ad4a:	4b07      	ldr	r3, [pc, #28]	; (800ad68 <_fflush_r+0x4c>)
 800ad4c:	429c      	cmp	r4, r3
 800ad4e:	d101      	bne.n	800ad54 <_fflush_r+0x38>
 800ad50:	68ac      	ldr	r4, [r5, #8]
 800ad52:	e7f1      	b.n	800ad38 <_fflush_r+0x1c>
 800ad54:	4b05      	ldr	r3, [pc, #20]	; (800ad6c <_fflush_r+0x50>)
 800ad56:	429c      	cmp	r4, r3
 800ad58:	bf08      	it	eq
 800ad5a:	68ec      	ldreq	r4, [r5, #12]
 800ad5c:	e7ec      	b.n	800ad38 <_fflush_r+0x1c>
 800ad5e:	2000      	movs	r0, #0
 800ad60:	bd38      	pop	{r3, r4, r5, pc}
 800ad62:	bf00      	nop
 800ad64:	0803c15c 	.word	0x0803c15c
 800ad68:	0803c17c 	.word	0x0803c17c
 800ad6c:	0803c13c 	.word	0x0803c13c

0800ad70 <_cleanup_r>:
 800ad70:	4901      	ldr	r1, [pc, #4]	; (800ad78 <_cleanup_r+0x8>)
 800ad72:	f000 b8a9 	b.w	800aec8 <_fwalk_reent>
 800ad76:	bf00      	nop
 800ad78:	0800ad1d 	.word	0x0800ad1d

0800ad7c <std.isra.0>:
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	b510      	push	{r4, lr}
 800ad80:	4604      	mov	r4, r0
 800ad82:	6003      	str	r3, [r0, #0]
 800ad84:	6043      	str	r3, [r0, #4]
 800ad86:	6083      	str	r3, [r0, #8]
 800ad88:	8181      	strh	r1, [r0, #12]
 800ad8a:	6643      	str	r3, [r0, #100]	; 0x64
 800ad8c:	81c2      	strh	r2, [r0, #14]
 800ad8e:	6103      	str	r3, [r0, #16]
 800ad90:	6143      	str	r3, [r0, #20]
 800ad92:	6183      	str	r3, [r0, #24]
 800ad94:	4619      	mov	r1, r3
 800ad96:	2208      	movs	r2, #8
 800ad98:	305c      	adds	r0, #92	; 0x5c
 800ad9a:	f7fe fa5f 	bl	800925c <memset>
 800ad9e:	4b05      	ldr	r3, [pc, #20]	; (800adb4 <std.isra.0+0x38>)
 800ada0:	6263      	str	r3, [r4, #36]	; 0x24
 800ada2:	4b05      	ldr	r3, [pc, #20]	; (800adb8 <std.isra.0+0x3c>)
 800ada4:	62a3      	str	r3, [r4, #40]	; 0x28
 800ada6:	4b05      	ldr	r3, [pc, #20]	; (800adbc <std.isra.0+0x40>)
 800ada8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800adaa:	4b05      	ldr	r3, [pc, #20]	; (800adc0 <std.isra.0+0x44>)
 800adac:	6224      	str	r4, [r4, #32]
 800adae:	6323      	str	r3, [r4, #48]	; 0x30
 800adb0:	bd10      	pop	{r4, pc}
 800adb2:	bf00      	nop
 800adb4:	0800b925 	.word	0x0800b925
 800adb8:	0800b947 	.word	0x0800b947
 800adbc:	0800b97f 	.word	0x0800b97f
 800adc0:	0800b9a3 	.word	0x0800b9a3

0800adc4 <__sfmoreglue>:
 800adc4:	b570      	push	{r4, r5, r6, lr}
 800adc6:	1e4a      	subs	r2, r1, #1
 800adc8:	2568      	movs	r5, #104	; 0x68
 800adca:	4355      	muls	r5, r2
 800adcc:	460e      	mov	r6, r1
 800adce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800add2:	f7fe fa59 	bl	8009288 <_malloc_r>
 800add6:	4604      	mov	r4, r0
 800add8:	b140      	cbz	r0, 800adec <__sfmoreglue+0x28>
 800adda:	2100      	movs	r1, #0
 800addc:	e880 0042 	stmia.w	r0, {r1, r6}
 800ade0:	300c      	adds	r0, #12
 800ade2:	60a0      	str	r0, [r4, #8]
 800ade4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ade8:	f7fe fa38 	bl	800925c <memset>
 800adec:	4620      	mov	r0, r4
 800adee:	bd70      	pop	{r4, r5, r6, pc}

0800adf0 <__sinit>:
 800adf0:	6983      	ldr	r3, [r0, #24]
 800adf2:	b510      	push	{r4, lr}
 800adf4:	4604      	mov	r4, r0
 800adf6:	bb33      	cbnz	r3, 800ae46 <__sinit+0x56>
 800adf8:	6483      	str	r3, [r0, #72]	; 0x48
 800adfa:	64c3      	str	r3, [r0, #76]	; 0x4c
 800adfc:	6503      	str	r3, [r0, #80]	; 0x50
 800adfe:	4b12      	ldr	r3, [pc, #72]	; (800ae48 <__sinit+0x58>)
 800ae00:	4a12      	ldr	r2, [pc, #72]	; (800ae4c <__sinit+0x5c>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6282      	str	r2, [r0, #40]	; 0x28
 800ae06:	4298      	cmp	r0, r3
 800ae08:	bf04      	itt	eq
 800ae0a:	2301      	moveq	r3, #1
 800ae0c:	6183      	streq	r3, [r0, #24]
 800ae0e:	f000 f81f 	bl	800ae50 <__sfp>
 800ae12:	6060      	str	r0, [r4, #4]
 800ae14:	4620      	mov	r0, r4
 800ae16:	f000 f81b 	bl	800ae50 <__sfp>
 800ae1a:	60a0      	str	r0, [r4, #8]
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f000 f817 	bl	800ae50 <__sfp>
 800ae22:	2200      	movs	r2, #0
 800ae24:	60e0      	str	r0, [r4, #12]
 800ae26:	2104      	movs	r1, #4
 800ae28:	6860      	ldr	r0, [r4, #4]
 800ae2a:	f7ff ffa7 	bl	800ad7c <std.isra.0>
 800ae2e:	2201      	movs	r2, #1
 800ae30:	2109      	movs	r1, #9
 800ae32:	68a0      	ldr	r0, [r4, #8]
 800ae34:	f7ff ffa2 	bl	800ad7c <std.isra.0>
 800ae38:	2202      	movs	r2, #2
 800ae3a:	2112      	movs	r1, #18
 800ae3c:	68e0      	ldr	r0, [r4, #12]
 800ae3e:	f7ff ff9d 	bl	800ad7c <std.isra.0>
 800ae42:	2301      	movs	r3, #1
 800ae44:	61a3      	str	r3, [r4, #24]
 800ae46:	bd10      	pop	{r4, pc}
 800ae48:	0803c0f8 	.word	0x0803c0f8
 800ae4c:	0800ad71 	.word	0x0800ad71

0800ae50 <__sfp>:
 800ae50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae52:	4b1c      	ldr	r3, [pc, #112]	; (800aec4 <__sfp+0x74>)
 800ae54:	681e      	ldr	r6, [r3, #0]
 800ae56:	69b3      	ldr	r3, [r6, #24]
 800ae58:	4607      	mov	r7, r0
 800ae5a:	b913      	cbnz	r3, 800ae62 <__sfp+0x12>
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f7ff ffc7 	bl	800adf0 <__sinit>
 800ae62:	3648      	adds	r6, #72	; 0x48
 800ae64:	68b4      	ldr	r4, [r6, #8]
 800ae66:	6873      	ldr	r3, [r6, #4]
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	d503      	bpl.n	800ae74 <__sfp+0x24>
 800ae6c:	6833      	ldr	r3, [r6, #0]
 800ae6e:	b133      	cbz	r3, 800ae7e <__sfp+0x2e>
 800ae70:	6836      	ldr	r6, [r6, #0]
 800ae72:	e7f7      	b.n	800ae64 <__sfp+0x14>
 800ae74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae78:	b16d      	cbz	r5, 800ae96 <__sfp+0x46>
 800ae7a:	3468      	adds	r4, #104	; 0x68
 800ae7c:	e7f4      	b.n	800ae68 <__sfp+0x18>
 800ae7e:	2104      	movs	r1, #4
 800ae80:	4638      	mov	r0, r7
 800ae82:	f7ff ff9f 	bl	800adc4 <__sfmoreglue>
 800ae86:	6030      	str	r0, [r6, #0]
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d1f1      	bne.n	800ae70 <__sfp+0x20>
 800ae8c:	230c      	movs	r3, #12
 800ae8e:	603b      	str	r3, [r7, #0]
 800ae90:	4604      	mov	r4, r0
 800ae92:	4620      	mov	r0, r4
 800ae94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae9a:	81e3      	strh	r3, [r4, #14]
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	81a3      	strh	r3, [r4, #12]
 800aea0:	6665      	str	r5, [r4, #100]	; 0x64
 800aea2:	6025      	str	r5, [r4, #0]
 800aea4:	60a5      	str	r5, [r4, #8]
 800aea6:	6065      	str	r5, [r4, #4]
 800aea8:	6125      	str	r5, [r4, #16]
 800aeaa:	6165      	str	r5, [r4, #20]
 800aeac:	61a5      	str	r5, [r4, #24]
 800aeae:	2208      	movs	r2, #8
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aeb6:	f7fe f9d1 	bl	800925c <memset>
 800aeba:	6365      	str	r5, [r4, #52]	; 0x34
 800aebc:	63a5      	str	r5, [r4, #56]	; 0x38
 800aebe:	64a5      	str	r5, [r4, #72]	; 0x48
 800aec0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800aec2:	e7e6      	b.n	800ae92 <__sfp+0x42>
 800aec4:	0803c0f8 	.word	0x0803c0f8

0800aec8 <_fwalk_reent>:
 800aec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aecc:	4680      	mov	r8, r0
 800aece:	4689      	mov	r9, r1
 800aed0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aed4:	2600      	movs	r6, #0
 800aed6:	b914      	cbnz	r4, 800aede <_fwalk_reent+0x16>
 800aed8:	4630      	mov	r0, r6
 800aeda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aede:	68a5      	ldr	r5, [r4, #8]
 800aee0:	6867      	ldr	r7, [r4, #4]
 800aee2:	3f01      	subs	r7, #1
 800aee4:	d501      	bpl.n	800aeea <_fwalk_reent+0x22>
 800aee6:	6824      	ldr	r4, [r4, #0]
 800aee8:	e7f5      	b.n	800aed6 <_fwalk_reent+0xe>
 800aeea:	89ab      	ldrh	r3, [r5, #12]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d907      	bls.n	800af00 <_fwalk_reent+0x38>
 800aef0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aef4:	3301      	adds	r3, #1
 800aef6:	d003      	beq.n	800af00 <_fwalk_reent+0x38>
 800aef8:	4629      	mov	r1, r5
 800aefa:	4640      	mov	r0, r8
 800aefc:	47c8      	blx	r9
 800aefe:	4306      	orrs	r6, r0
 800af00:	3568      	adds	r5, #104	; 0x68
 800af02:	e7ee      	b.n	800aee2 <_fwalk_reent+0x1a>

0800af04 <_localeconv_r>:
 800af04:	4b04      	ldr	r3, [pc, #16]	; (800af18 <_localeconv_r+0x14>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6a18      	ldr	r0, [r3, #32]
 800af0a:	4b04      	ldr	r3, [pc, #16]	; (800af1c <_localeconv_r+0x18>)
 800af0c:	2800      	cmp	r0, #0
 800af0e:	bf08      	it	eq
 800af10:	4618      	moveq	r0, r3
 800af12:	30f0      	adds	r0, #240	; 0xf0
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	200006b4 	.word	0x200006b4
 800af1c:	20000718 	.word	0x20000718

0800af20 <__swhatbuf_r>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	460e      	mov	r6, r1
 800af24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af28:	2900      	cmp	r1, #0
 800af2a:	b090      	sub	sp, #64	; 0x40
 800af2c:	4614      	mov	r4, r2
 800af2e:	461d      	mov	r5, r3
 800af30:	da07      	bge.n	800af42 <__swhatbuf_r+0x22>
 800af32:	2300      	movs	r3, #0
 800af34:	602b      	str	r3, [r5, #0]
 800af36:	89b3      	ldrh	r3, [r6, #12]
 800af38:	061a      	lsls	r2, r3, #24
 800af3a:	d410      	bmi.n	800af5e <__swhatbuf_r+0x3e>
 800af3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af40:	e00e      	b.n	800af60 <__swhatbuf_r+0x40>
 800af42:	aa01      	add	r2, sp, #4
 800af44:	f000 fd54 	bl	800b9f0 <_fstat_r>
 800af48:	2800      	cmp	r0, #0
 800af4a:	dbf2      	blt.n	800af32 <__swhatbuf_r+0x12>
 800af4c:	9a02      	ldr	r2, [sp, #8]
 800af4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af56:	425a      	negs	r2, r3
 800af58:	415a      	adcs	r2, r3
 800af5a:	602a      	str	r2, [r5, #0]
 800af5c:	e7ee      	b.n	800af3c <__swhatbuf_r+0x1c>
 800af5e:	2340      	movs	r3, #64	; 0x40
 800af60:	2000      	movs	r0, #0
 800af62:	6023      	str	r3, [r4, #0]
 800af64:	b010      	add	sp, #64	; 0x40
 800af66:	bd70      	pop	{r4, r5, r6, pc}

0800af68 <__smakebuf_r>:
 800af68:	898b      	ldrh	r3, [r1, #12]
 800af6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af6c:	079d      	lsls	r5, r3, #30
 800af6e:	4606      	mov	r6, r0
 800af70:	460c      	mov	r4, r1
 800af72:	d507      	bpl.n	800af84 <__smakebuf_r+0x1c>
 800af74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	6123      	str	r3, [r4, #16]
 800af7c:	2301      	movs	r3, #1
 800af7e:	6163      	str	r3, [r4, #20]
 800af80:	b002      	add	sp, #8
 800af82:	bd70      	pop	{r4, r5, r6, pc}
 800af84:	ab01      	add	r3, sp, #4
 800af86:	466a      	mov	r2, sp
 800af88:	f7ff ffca 	bl	800af20 <__swhatbuf_r>
 800af8c:	9900      	ldr	r1, [sp, #0]
 800af8e:	4605      	mov	r5, r0
 800af90:	4630      	mov	r0, r6
 800af92:	f7fe f979 	bl	8009288 <_malloc_r>
 800af96:	b948      	cbnz	r0, 800afac <__smakebuf_r+0x44>
 800af98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af9c:	059a      	lsls	r2, r3, #22
 800af9e:	d4ef      	bmi.n	800af80 <__smakebuf_r+0x18>
 800afa0:	f023 0303 	bic.w	r3, r3, #3
 800afa4:	f043 0302 	orr.w	r3, r3, #2
 800afa8:	81a3      	strh	r3, [r4, #12]
 800afaa:	e7e3      	b.n	800af74 <__smakebuf_r+0xc>
 800afac:	4b0d      	ldr	r3, [pc, #52]	; (800afe4 <__smakebuf_r+0x7c>)
 800afae:	62b3      	str	r3, [r6, #40]	; 0x28
 800afb0:	89a3      	ldrh	r3, [r4, #12]
 800afb2:	6020      	str	r0, [r4, #0]
 800afb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afb8:	81a3      	strh	r3, [r4, #12]
 800afba:	9b00      	ldr	r3, [sp, #0]
 800afbc:	6163      	str	r3, [r4, #20]
 800afbe:	9b01      	ldr	r3, [sp, #4]
 800afc0:	6120      	str	r0, [r4, #16]
 800afc2:	b15b      	cbz	r3, 800afdc <__smakebuf_r+0x74>
 800afc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afc8:	4630      	mov	r0, r6
 800afca:	f000 fd23 	bl	800ba14 <_isatty_r>
 800afce:	b128      	cbz	r0, 800afdc <__smakebuf_r+0x74>
 800afd0:	89a3      	ldrh	r3, [r4, #12]
 800afd2:	f023 0303 	bic.w	r3, r3, #3
 800afd6:	f043 0301 	orr.w	r3, r3, #1
 800afda:	81a3      	strh	r3, [r4, #12]
 800afdc:	89a3      	ldrh	r3, [r4, #12]
 800afde:	431d      	orrs	r5, r3
 800afe0:	81a5      	strh	r5, [r4, #12]
 800afe2:	e7cd      	b.n	800af80 <__smakebuf_r+0x18>
 800afe4:	0800ad71 	.word	0x0800ad71

0800afe8 <malloc>:
 800afe8:	4b02      	ldr	r3, [pc, #8]	; (800aff4 <malloc+0xc>)
 800afea:	4601      	mov	r1, r0
 800afec:	6818      	ldr	r0, [r3, #0]
 800afee:	f7fe b94b 	b.w	8009288 <_malloc_r>
 800aff2:	bf00      	nop
 800aff4:	200006b4 	.word	0x200006b4

0800aff8 <__malloc_lock>:
 800aff8:	4770      	bx	lr

0800affa <__malloc_unlock>:
 800affa:	4770      	bx	lr

0800affc <_Balloc>:
 800affc:	b570      	push	{r4, r5, r6, lr}
 800affe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b000:	4604      	mov	r4, r0
 800b002:	460e      	mov	r6, r1
 800b004:	b93d      	cbnz	r5, 800b016 <_Balloc+0x1a>
 800b006:	2010      	movs	r0, #16
 800b008:	f7ff ffee 	bl	800afe8 <malloc>
 800b00c:	6260      	str	r0, [r4, #36]	; 0x24
 800b00e:	6045      	str	r5, [r0, #4]
 800b010:	6085      	str	r5, [r0, #8]
 800b012:	6005      	str	r5, [r0, #0]
 800b014:	60c5      	str	r5, [r0, #12]
 800b016:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b018:	68eb      	ldr	r3, [r5, #12]
 800b01a:	b183      	cbz	r3, 800b03e <_Balloc+0x42>
 800b01c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b024:	b9b8      	cbnz	r0, 800b056 <_Balloc+0x5a>
 800b026:	2101      	movs	r1, #1
 800b028:	fa01 f506 	lsl.w	r5, r1, r6
 800b02c:	1d6a      	adds	r2, r5, #5
 800b02e:	0092      	lsls	r2, r2, #2
 800b030:	4620      	mov	r0, r4
 800b032:	f7fe f91b 	bl	800926c <_calloc_r>
 800b036:	b160      	cbz	r0, 800b052 <_Balloc+0x56>
 800b038:	6046      	str	r6, [r0, #4]
 800b03a:	6085      	str	r5, [r0, #8]
 800b03c:	e00e      	b.n	800b05c <_Balloc+0x60>
 800b03e:	2221      	movs	r2, #33	; 0x21
 800b040:	2104      	movs	r1, #4
 800b042:	4620      	mov	r0, r4
 800b044:	f7fe f912 	bl	800926c <_calloc_r>
 800b048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b04a:	60e8      	str	r0, [r5, #12]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1e4      	bne.n	800b01c <_Balloc+0x20>
 800b052:	2000      	movs	r0, #0
 800b054:	bd70      	pop	{r4, r5, r6, pc}
 800b056:	6802      	ldr	r2, [r0, #0]
 800b058:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b05c:	2300      	movs	r3, #0
 800b05e:	6103      	str	r3, [r0, #16]
 800b060:	60c3      	str	r3, [r0, #12]
 800b062:	bd70      	pop	{r4, r5, r6, pc}

0800b064 <_Bfree>:
 800b064:	b570      	push	{r4, r5, r6, lr}
 800b066:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b068:	4606      	mov	r6, r0
 800b06a:	460d      	mov	r5, r1
 800b06c:	b93c      	cbnz	r4, 800b07e <_Bfree+0x1a>
 800b06e:	2010      	movs	r0, #16
 800b070:	f7ff ffba 	bl	800afe8 <malloc>
 800b074:	6270      	str	r0, [r6, #36]	; 0x24
 800b076:	6044      	str	r4, [r0, #4]
 800b078:	6084      	str	r4, [r0, #8]
 800b07a:	6004      	str	r4, [r0, #0]
 800b07c:	60c4      	str	r4, [r0, #12]
 800b07e:	b13d      	cbz	r5, 800b090 <_Bfree+0x2c>
 800b080:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b082:	686a      	ldr	r2, [r5, #4]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b08a:	6029      	str	r1, [r5, #0]
 800b08c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b090:	bd70      	pop	{r4, r5, r6, pc}

0800b092 <__multadd>:
 800b092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b096:	690d      	ldr	r5, [r1, #16]
 800b098:	461f      	mov	r7, r3
 800b09a:	4606      	mov	r6, r0
 800b09c:	460c      	mov	r4, r1
 800b09e:	f101 0e14 	add.w	lr, r1, #20
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f8de 0000 	ldr.w	r0, [lr]
 800b0a8:	b281      	uxth	r1, r0
 800b0aa:	fb02 7101 	mla	r1, r2, r1, r7
 800b0ae:	0c0f      	lsrs	r7, r1, #16
 800b0b0:	0c00      	lsrs	r0, r0, #16
 800b0b2:	fb02 7000 	mla	r0, r2, r0, r7
 800b0b6:	b289      	uxth	r1, r1
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b0be:	429d      	cmp	r5, r3
 800b0c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b0c4:	f84e 1b04 	str.w	r1, [lr], #4
 800b0c8:	dcec      	bgt.n	800b0a4 <__multadd+0x12>
 800b0ca:	b1d7      	cbz	r7, 800b102 <__multadd+0x70>
 800b0cc:	68a3      	ldr	r3, [r4, #8]
 800b0ce:	429d      	cmp	r5, r3
 800b0d0:	db12      	blt.n	800b0f8 <__multadd+0x66>
 800b0d2:	6861      	ldr	r1, [r4, #4]
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	3101      	adds	r1, #1
 800b0d8:	f7ff ff90 	bl	800affc <_Balloc>
 800b0dc:	6922      	ldr	r2, [r4, #16]
 800b0de:	3202      	adds	r2, #2
 800b0e0:	f104 010c 	add.w	r1, r4, #12
 800b0e4:	4680      	mov	r8, r0
 800b0e6:	0092      	lsls	r2, r2, #2
 800b0e8:	300c      	adds	r0, #12
 800b0ea:	f7fe f8ac 	bl	8009246 <memcpy>
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	f7ff ffb7 	bl	800b064 <_Bfree>
 800b0f6:	4644      	mov	r4, r8
 800b0f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0fc:	3501      	adds	r5, #1
 800b0fe:	615f      	str	r7, [r3, #20]
 800b100:	6125      	str	r5, [r4, #16]
 800b102:	4620      	mov	r0, r4
 800b104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b108 <__hi0bits>:
 800b108:	0c02      	lsrs	r2, r0, #16
 800b10a:	0412      	lsls	r2, r2, #16
 800b10c:	4603      	mov	r3, r0
 800b10e:	b9b2      	cbnz	r2, 800b13e <__hi0bits+0x36>
 800b110:	0403      	lsls	r3, r0, #16
 800b112:	2010      	movs	r0, #16
 800b114:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b118:	bf04      	itt	eq
 800b11a:	021b      	lsleq	r3, r3, #8
 800b11c:	3008      	addeq	r0, #8
 800b11e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b122:	bf04      	itt	eq
 800b124:	011b      	lsleq	r3, r3, #4
 800b126:	3004      	addeq	r0, #4
 800b128:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b12c:	bf04      	itt	eq
 800b12e:	009b      	lsleq	r3, r3, #2
 800b130:	3002      	addeq	r0, #2
 800b132:	2b00      	cmp	r3, #0
 800b134:	db06      	blt.n	800b144 <__hi0bits+0x3c>
 800b136:	005b      	lsls	r3, r3, #1
 800b138:	d503      	bpl.n	800b142 <__hi0bits+0x3a>
 800b13a:	3001      	adds	r0, #1
 800b13c:	4770      	bx	lr
 800b13e:	2000      	movs	r0, #0
 800b140:	e7e8      	b.n	800b114 <__hi0bits+0xc>
 800b142:	2020      	movs	r0, #32
 800b144:	4770      	bx	lr

0800b146 <__lo0bits>:
 800b146:	6803      	ldr	r3, [r0, #0]
 800b148:	f013 0207 	ands.w	r2, r3, #7
 800b14c:	4601      	mov	r1, r0
 800b14e:	d00b      	beq.n	800b168 <__lo0bits+0x22>
 800b150:	07da      	lsls	r2, r3, #31
 800b152:	d423      	bmi.n	800b19c <__lo0bits+0x56>
 800b154:	0798      	lsls	r0, r3, #30
 800b156:	bf49      	itett	mi
 800b158:	085b      	lsrmi	r3, r3, #1
 800b15a:	089b      	lsrpl	r3, r3, #2
 800b15c:	2001      	movmi	r0, #1
 800b15e:	600b      	strmi	r3, [r1, #0]
 800b160:	bf5c      	itt	pl
 800b162:	600b      	strpl	r3, [r1, #0]
 800b164:	2002      	movpl	r0, #2
 800b166:	4770      	bx	lr
 800b168:	b298      	uxth	r0, r3
 800b16a:	b9a8      	cbnz	r0, 800b198 <__lo0bits+0x52>
 800b16c:	0c1b      	lsrs	r3, r3, #16
 800b16e:	2010      	movs	r0, #16
 800b170:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b174:	bf04      	itt	eq
 800b176:	0a1b      	lsreq	r3, r3, #8
 800b178:	3008      	addeq	r0, #8
 800b17a:	071a      	lsls	r2, r3, #28
 800b17c:	bf04      	itt	eq
 800b17e:	091b      	lsreq	r3, r3, #4
 800b180:	3004      	addeq	r0, #4
 800b182:	079a      	lsls	r2, r3, #30
 800b184:	bf04      	itt	eq
 800b186:	089b      	lsreq	r3, r3, #2
 800b188:	3002      	addeq	r0, #2
 800b18a:	07da      	lsls	r2, r3, #31
 800b18c:	d402      	bmi.n	800b194 <__lo0bits+0x4e>
 800b18e:	085b      	lsrs	r3, r3, #1
 800b190:	d006      	beq.n	800b1a0 <__lo0bits+0x5a>
 800b192:	3001      	adds	r0, #1
 800b194:	600b      	str	r3, [r1, #0]
 800b196:	4770      	bx	lr
 800b198:	4610      	mov	r0, r2
 800b19a:	e7e9      	b.n	800b170 <__lo0bits+0x2a>
 800b19c:	2000      	movs	r0, #0
 800b19e:	4770      	bx	lr
 800b1a0:	2020      	movs	r0, #32
 800b1a2:	4770      	bx	lr

0800b1a4 <__i2b>:
 800b1a4:	b510      	push	{r4, lr}
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	2101      	movs	r1, #1
 800b1aa:	f7ff ff27 	bl	800affc <_Balloc>
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	6144      	str	r4, [r0, #20]
 800b1b2:	6102      	str	r2, [r0, #16]
 800b1b4:	bd10      	pop	{r4, pc}

0800b1b6 <__multiply>:
 800b1b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ba:	4614      	mov	r4, r2
 800b1bc:	690a      	ldr	r2, [r1, #16]
 800b1be:	6923      	ldr	r3, [r4, #16]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	bfb8      	it	lt
 800b1c4:	460b      	movlt	r3, r1
 800b1c6:	4689      	mov	r9, r1
 800b1c8:	bfbc      	itt	lt
 800b1ca:	46a1      	movlt	r9, r4
 800b1cc:	461c      	movlt	r4, r3
 800b1ce:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b1d2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b1d6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b1da:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b1de:	eb07 060a 	add.w	r6, r7, sl
 800b1e2:	429e      	cmp	r6, r3
 800b1e4:	bfc8      	it	gt
 800b1e6:	3101      	addgt	r1, #1
 800b1e8:	f7ff ff08 	bl	800affc <_Balloc>
 800b1ec:	f100 0514 	add.w	r5, r0, #20
 800b1f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1f4:	462b      	mov	r3, r5
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	4543      	cmp	r3, r8
 800b1fa:	d316      	bcc.n	800b22a <__multiply+0x74>
 800b1fc:	f104 0214 	add.w	r2, r4, #20
 800b200:	f109 0114 	add.w	r1, r9, #20
 800b204:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800b208:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b20c:	9301      	str	r3, [sp, #4]
 800b20e:	9c01      	ldr	r4, [sp, #4]
 800b210:	4294      	cmp	r4, r2
 800b212:	4613      	mov	r3, r2
 800b214:	d80c      	bhi.n	800b230 <__multiply+0x7a>
 800b216:	2e00      	cmp	r6, #0
 800b218:	dd03      	ble.n	800b222 <__multiply+0x6c>
 800b21a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d054      	beq.n	800b2cc <__multiply+0x116>
 800b222:	6106      	str	r6, [r0, #16]
 800b224:	b003      	add	sp, #12
 800b226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22a:	f843 2b04 	str.w	r2, [r3], #4
 800b22e:	e7e3      	b.n	800b1f8 <__multiply+0x42>
 800b230:	f8b3 a000 	ldrh.w	sl, [r3]
 800b234:	3204      	adds	r2, #4
 800b236:	f1ba 0f00 	cmp.w	sl, #0
 800b23a:	d020      	beq.n	800b27e <__multiply+0xc8>
 800b23c:	46ae      	mov	lr, r5
 800b23e:	4689      	mov	r9, r1
 800b240:	f04f 0c00 	mov.w	ip, #0
 800b244:	f859 4b04 	ldr.w	r4, [r9], #4
 800b248:	f8be b000 	ldrh.w	fp, [lr]
 800b24c:	b2a3      	uxth	r3, r4
 800b24e:	fb0a b303 	mla	r3, sl, r3, fp
 800b252:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800b256:	f8de 4000 	ldr.w	r4, [lr]
 800b25a:	4463      	add	r3, ip
 800b25c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800b260:	fb0a c40b 	mla	r4, sl, fp, ip
 800b264:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b268:	b29b      	uxth	r3, r3
 800b26a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b26e:	454f      	cmp	r7, r9
 800b270:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800b274:	f84e 3b04 	str.w	r3, [lr], #4
 800b278:	d8e4      	bhi.n	800b244 <__multiply+0x8e>
 800b27a:	f8ce c000 	str.w	ip, [lr]
 800b27e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800b282:	f1b9 0f00 	cmp.w	r9, #0
 800b286:	d01f      	beq.n	800b2c8 <__multiply+0x112>
 800b288:	682b      	ldr	r3, [r5, #0]
 800b28a:	46ae      	mov	lr, r5
 800b28c:	468c      	mov	ip, r1
 800b28e:	f04f 0a00 	mov.w	sl, #0
 800b292:	f8bc 4000 	ldrh.w	r4, [ip]
 800b296:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b29a:	fb09 b404 	mla	r4, r9, r4, fp
 800b29e:	44a2      	add	sl, r4
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800b2a6:	f84e 3b04 	str.w	r3, [lr], #4
 800b2aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b2ae:	f8be 4000 	ldrh.w	r4, [lr]
 800b2b2:	0c1b      	lsrs	r3, r3, #16
 800b2b4:	fb09 4303 	mla	r3, r9, r3, r4
 800b2b8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800b2bc:	4567      	cmp	r7, ip
 800b2be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b2c2:	d8e6      	bhi.n	800b292 <__multiply+0xdc>
 800b2c4:	f8ce 3000 	str.w	r3, [lr]
 800b2c8:	3504      	adds	r5, #4
 800b2ca:	e7a0      	b.n	800b20e <__multiply+0x58>
 800b2cc:	3e01      	subs	r6, #1
 800b2ce:	e7a2      	b.n	800b216 <__multiply+0x60>

0800b2d0 <__pow5mult>:
 800b2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2d4:	4615      	mov	r5, r2
 800b2d6:	f012 0203 	ands.w	r2, r2, #3
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460f      	mov	r7, r1
 800b2de:	d007      	beq.n	800b2f0 <__pow5mult+0x20>
 800b2e0:	3a01      	subs	r2, #1
 800b2e2:	4c21      	ldr	r4, [pc, #132]	; (800b368 <__pow5mult+0x98>)
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2ea:	f7ff fed2 	bl	800b092 <__multadd>
 800b2ee:	4607      	mov	r7, r0
 800b2f0:	10ad      	asrs	r5, r5, #2
 800b2f2:	d035      	beq.n	800b360 <__pow5mult+0x90>
 800b2f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2f6:	b93c      	cbnz	r4, 800b308 <__pow5mult+0x38>
 800b2f8:	2010      	movs	r0, #16
 800b2fa:	f7ff fe75 	bl	800afe8 <malloc>
 800b2fe:	6270      	str	r0, [r6, #36]	; 0x24
 800b300:	6044      	str	r4, [r0, #4]
 800b302:	6084      	str	r4, [r0, #8]
 800b304:	6004      	str	r4, [r0, #0]
 800b306:	60c4      	str	r4, [r0, #12]
 800b308:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b30c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b310:	b94c      	cbnz	r4, 800b326 <__pow5mult+0x56>
 800b312:	f240 2171 	movw	r1, #625	; 0x271
 800b316:	4630      	mov	r0, r6
 800b318:	f7ff ff44 	bl	800b1a4 <__i2b>
 800b31c:	2300      	movs	r3, #0
 800b31e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b322:	4604      	mov	r4, r0
 800b324:	6003      	str	r3, [r0, #0]
 800b326:	f04f 0800 	mov.w	r8, #0
 800b32a:	07eb      	lsls	r3, r5, #31
 800b32c:	d50a      	bpl.n	800b344 <__pow5mult+0x74>
 800b32e:	4639      	mov	r1, r7
 800b330:	4622      	mov	r2, r4
 800b332:	4630      	mov	r0, r6
 800b334:	f7ff ff3f 	bl	800b1b6 <__multiply>
 800b338:	4639      	mov	r1, r7
 800b33a:	4681      	mov	r9, r0
 800b33c:	4630      	mov	r0, r6
 800b33e:	f7ff fe91 	bl	800b064 <_Bfree>
 800b342:	464f      	mov	r7, r9
 800b344:	106d      	asrs	r5, r5, #1
 800b346:	d00b      	beq.n	800b360 <__pow5mult+0x90>
 800b348:	6820      	ldr	r0, [r4, #0]
 800b34a:	b938      	cbnz	r0, 800b35c <__pow5mult+0x8c>
 800b34c:	4622      	mov	r2, r4
 800b34e:	4621      	mov	r1, r4
 800b350:	4630      	mov	r0, r6
 800b352:	f7ff ff30 	bl	800b1b6 <__multiply>
 800b356:	6020      	str	r0, [r4, #0]
 800b358:	f8c0 8000 	str.w	r8, [r0]
 800b35c:	4604      	mov	r4, r0
 800b35e:	e7e4      	b.n	800b32a <__pow5mult+0x5a>
 800b360:	4638      	mov	r0, r7
 800b362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b366:	bf00      	nop
 800b368:	0803c290 	.word	0x0803c290

0800b36c <__lshift>:
 800b36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b370:	460c      	mov	r4, r1
 800b372:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b376:	6923      	ldr	r3, [r4, #16]
 800b378:	6849      	ldr	r1, [r1, #4]
 800b37a:	eb0a 0903 	add.w	r9, sl, r3
 800b37e:	68a3      	ldr	r3, [r4, #8]
 800b380:	4607      	mov	r7, r0
 800b382:	4616      	mov	r6, r2
 800b384:	f109 0501 	add.w	r5, r9, #1
 800b388:	42ab      	cmp	r3, r5
 800b38a:	db31      	blt.n	800b3f0 <__lshift+0x84>
 800b38c:	4638      	mov	r0, r7
 800b38e:	f7ff fe35 	bl	800affc <_Balloc>
 800b392:	2200      	movs	r2, #0
 800b394:	4680      	mov	r8, r0
 800b396:	f100 0314 	add.w	r3, r0, #20
 800b39a:	4611      	mov	r1, r2
 800b39c:	4552      	cmp	r2, sl
 800b39e:	db2a      	blt.n	800b3f6 <__lshift+0x8a>
 800b3a0:	6920      	ldr	r0, [r4, #16]
 800b3a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3a6:	f104 0114 	add.w	r1, r4, #20
 800b3aa:	f016 021f 	ands.w	r2, r6, #31
 800b3ae:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b3b2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800b3b6:	d022      	beq.n	800b3fe <__lshift+0x92>
 800b3b8:	f1c2 0c20 	rsb	ip, r2, #32
 800b3bc:	2000      	movs	r0, #0
 800b3be:	680e      	ldr	r6, [r1, #0]
 800b3c0:	4096      	lsls	r6, r2
 800b3c2:	4330      	orrs	r0, r6
 800b3c4:	f843 0b04 	str.w	r0, [r3], #4
 800b3c8:	f851 0b04 	ldr.w	r0, [r1], #4
 800b3cc:	458e      	cmp	lr, r1
 800b3ce:	fa20 f00c 	lsr.w	r0, r0, ip
 800b3d2:	d8f4      	bhi.n	800b3be <__lshift+0x52>
 800b3d4:	6018      	str	r0, [r3, #0]
 800b3d6:	b108      	cbz	r0, 800b3dc <__lshift+0x70>
 800b3d8:	f109 0502 	add.w	r5, r9, #2
 800b3dc:	3d01      	subs	r5, #1
 800b3de:	4638      	mov	r0, r7
 800b3e0:	f8c8 5010 	str.w	r5, [r8, #16]
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	f7ff fe3d 	bl	800b064 <_Bfree>
 800b3ea:	4640      	mov	r0, r8
 800b3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f0:	3101      	adds	r1, #1
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	e7c8      	b.n	800b388 <__lshift+0x1c>
 800b3f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b3fa:	3201      	adds	r2, #1
 800b3fc:	e7ce      	b.n	800b39c <__lshift+0x30>
 800b3fe:	3b04      	subs	r3, #4
 800b400:	f851 2b04 	ldr.w	r2, [r1], #4
 800b404:	f843 2f04 	str.w	r2, [r3, #4]!
 800b408:	458e      	cmp	lr, r1
 800b40a:	d8f9      	bhi.n	800b400 <__lshift+0x94>
 800b40c:	e7e6      	b.n	800b3dc <__lshift+0x70>

0800b40e <__mcmp>:
 800b40e:	6903      	ldr	r3, [r0, #16]
 800b410:	690a      	ldr	r2, [r1, #16]
 800b412:	1a9b      	subs	r3, r3, r2
 800b414:	b530      	push	{r4, r5, lr}
 800b416:	d10c      	bne.n	800b432 <__mcmp+0x24>
 800b418:	0092      	lsls	r2, r2, #2
 800b41a:	3014      	adds	r0, #20
 800b41c:	3114      	adds	r1, #20
 800b41e:	1884      	adds	r4, r0, r2
 800b420:	4411      	add	r1, r2
 800b422:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b426:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b42a:	4295      	cmp	r5, r2
 800b42c:	d003      	beq.n	800b436 <__mcmp+0x28>
 800b42e:	d305      	bcc.n	800b43c <__mcmp+0x2e>
 800b430:	2301      	movs	r3, #1
 800b432:	4618      	mov	r0, r3
 800b434:	bd30      	pop	{r4, r5, pc}
 800b436:	42a0      	cmp	r0, r4
 800b438:	d3f3      	bcc.n	800b422 <__mcmp+0x14>
 800b43a:	e7fa      	b.n	800b432 <__mcmp+0x24>
 800b43c:	f04f 33ff 	mov.w	r3, #4294967295
 800b440:	e7f7      	b.n	800b432 <__mcmp+0x24>

0800b442 <__mdiff>:
 800b442:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b446:	460d      	mov	r5, r1
 800b448:	4607      	mov	r7, r0
 800b44a:	4611      	mov	r1, r2
 800b44c:	4628      	mov	r0, r5
 800b44e:	4614      	mov	r4, r2
 800b450:	f7ff ffdd 	bl	800b40e <__mcmp>
 800b454:	1e06      	subs	r6, r0, #0
 800b456:	d108      	bne.n	800b46a <__mdiff+0x28>
 800b458:	4631      	mov	r1, r6
 800b45a:	4638      	mov	r0, r7
 800b45c:	f7ff fdce 	bl	800affc <_Balloc>
 800b460:	2301      	movs	r3, #1
 800b462:	6103      	str	r3, [r0, #16]
 800b464:	6146      	str	r6, [r0, #20]
 800b466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b46a:	bfa4      	itt	ge
 800b46c:	4623      	movge	r3, r4
 800b46e:	462c      	movge	r4, r5
 800b470:	4638      	mov	r0, r7
 800b472:	6861      	ldr	r1, [r4, #4]
 800b474:	bfa6      	itte	ge
 800b476:	461d      	movge	r5, r3
 800b478:	2600      	movge	r6, #0
 800b47a:	2601      	movlt	r6, #1
 800b47c:	f7ff fdbe 	bl	800affc <_Balloc>
 800b480:	692b      	ldr	r3, [r5, #16]
 800b482:	60c6      	str	r6, [r0, #12]
 800b484:	6926      	ldr	r6, [r4, #16]
 800b486:	f105 0914 	add.w	r9, r5, #20
 800b48a:	f104 0214 	add.w	r2, r4, #20
 800b48e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b492:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b496:	f100 0514 	add.w	r5, r0, #20
 800b49a:	f04f 0c00 	mov.w	ip, #0
 800b49e:	f852 ab04 	ldr.w	sl, [r2], #4
 800b4a2:	f859 4b04 	ldr.w	r4, [r9], #4
 800b4a6:	fa1c f18a 	uxtah	r1, ip, sl
 800b4aa:	b2a3      	uxth	r3, r4
 800b4ac:	1ac9      	subs	r1, r1, r3
 800b4ae:	0c23      	lsrs	r3, r4, #16
 800b4b0:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b4b4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b4b8:	b289      	uxth	r1, r1
 800b4ba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b4be:	45c8      	cmp	r8, r9
 800b4c0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b4c4:	4696      	mov	lr, r2
 800b4c6:	f845 3b04 	str.w	r3, [r5], #4
 800b4ca:	d8e8      	bhi.n	800b49e <__mdiff+0x5c>
 800b4cc:	45be      	cmp	lr, r7
 800b4ce:	d305      	bcc.n	800b4dc <__mdiff+0x9a>
 800b4d0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b4d4:	b18b      	cbz	r3, 800b4fa <__mdiff+0xb8>
 800b4d6:	6106      	str	r6, [r0, #16]
 800b4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4dc:	f85e 1b04 	ldr.w	r1, [lr], #4
 800b4e0:	fa1c f381 	uxtah	r3, ip, r1
 800b4e4:	141a      	asrs	r2, r3, #16
 800b4e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b4f4:	f845 3b04 	str.w	r3, [r5], #4
 800b4f8:	e7e8      	b.n	800b4cc <__mdiff+0x8a>
 800b4fa:	3e01      	subs	r6, #1
 800b4fc:	e7e8      	b.n	800b4d0 <__mdiff+0x8e>

0800b4fe <__d2b>:
 800b4fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b502:	460e      	mov	r6, r1
 800b504:	2101      	movs	r1, #1
 800b506:	ec59 8b10 	vmov	r8, r9, d0
 800b50a:	4615      	mov	r5, r2
 800b50c:	f7ff fd76 	bl	800affc <_Balloc>
 800b510:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b514:	4607      	mov	r7, r0
 800b516:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b51a:	bb34      	cbnz	r4, 800b56a <__d2b+0x6c>
 800b51c:	9301      	str	r3, [sp, #4]
 800b51e:	f1b8 0f00 	cmp.w	r8, #0
 800b522:	d027      	beq.n	800b574 <__d2b+0x76>
 800b524:	a802      	add	r0, sp, #8
 800b526:	f840 8d08 	str.w	r8, [r0, #-8]!
 800b52a:	f7ff fe0c 	bl	800b146 <__lo0bits>
 800b52e:	9900      	ldr	r1, [sp, #0]
 800b530:	b1f0      	cbz	r0, 800b570 <__d2b+0x72>
 800b532:	9a01      	ldr	r2, [sp, #4]
 800b534:	f1c0 0320 	rsb	r3, r0, #32
 800b538:	fa02 f303 	lsl.w	r3, r2, r3
 800b53c:	430b      	orrs	r3, r1
 800b53e:	40c2      	lsrs	r2, r0
 800b540:	617b      	str	r3, [r7, #20]
 800b542:	9201      	str	r2, [sp, #4]
 800b544:	9b01      	ldr	r3, [sp, #4]
 800b546:	61bb      	str	r3, [r7, #24]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	bf14      	ite	ne
 800b54c:	2102      	movne	r1, #2
 800b54e:	2101      	moveq	r1, #1
 800b550:	6139      	str	r1, [r7, #16]
 800b552:	b1c4      	cbz	r4, 800b586 <__d2b+0x88>
 800b554:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b558:	4404      	add	r4, r0
 800b55a:	6034      	str	r4, [r6, #0]
 800b55c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b560:	6028      	str	r0, [r5, #0]
 800b562:	4638      	mov	r0, r7
 800b564:	b003      	add	sp, #12
 800b566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b56a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b56e:	e7d5      	b.n	800b51c <__d2b+0x1e>
 800b570:	6179      	str	r1, [r7, #20]
 800b572:	e7e7      	b.n	800b544 <__d2b+0x46>
 800b574:	a801      	add	r0, sp, #4
 800b576:	f7ff fde6 	bl	800b146 <__lo0bits>
 800b57a:	9b01      	ldr	r3, [sp, #4]
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	2101      	movs	r1, #1
 800b580:	6139      	str	r1, [r7, #16]
 800b582:	3020      	adds	r0, #32
 800b584:	e7e5      	b.n	800b552 <__d2b+0x54>
 800b586:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b58a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b58e:	6030      	str	r0, [r6, #0]
 800b590:	6918      	ldr	r0, [r3, #16]
 800b592:	f7ff fdb9 	bl	800b108 <__hi0bits>
 800b596:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b59a:	e7e1      	b.n	800b560 <__d2b+0x62>

0800b59c <_free_r>:
 800b59c:	b538      	push	{r3, r4, r5, lr}
 800b59e:	4605      	mov	r5, r0
 800b5a0:	2900      	cmp	r1, #0
 800b5a2:	d045      	beq.n	800b630 <_free_r+0x94>
 800b5a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5a8:	1f0c      	subs	r4, r1, #4
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	bfb8      	it	lt
 800b5ae:	18e4      	addlt	r4, r4, r3
 800b5b0:	f7ff fd22 	bl	800aff8 <__malloc_lock>
 800b5b4:	4a1f      	ldr	r2, [pc, #124]	; (800b634 <_free_r+0x98>)
 800b5b6:	6813      	ldr	r3, [r2, #0]
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	b933      	cbnz	r3, 800b5ca <_free_r+0x2e>
 800b5bc:	6063      	str	r3, [r4, #4]
 800b5be:	6014      	str	r4, [r2, #0]
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5c6:	f7ff bd18 	b.w	800affa <__malloc_unlock>
 800b5ca:	42a3      	cmp	r3, r4
 800b5cc:	d90c      	bls.n	800b5e8 <_free_r+0x4c>
 800b5ce:	6821      	ldr	r1, [r4, #0]
 800b5d0:	1862      	adds	r2, r4, r1
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	bf04      	itt	eq
 800b5d6:	681a      	ldreq	r2, [r3, #0]
 800b5d8:	685b      	ldreq	r3, [r3, #4]
 800b5da:	6063      	str	r3, [r4, #4]
 800b5dc:	bf04      	itt	eq
 800b5de:	1852      	addeq	r2, r2, r1
 800b5e0:	6022      	streq	r2, [r4, #0]
 800b5e2:	6004      	str	r4, [r0, #0]
 800b5e4:	e7ec      	b.n	800b5c0 <_free_r+0x24>
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	685a      	ldr	r2, [r3, #4]
 800b5ea:	b10a      	cbz	r2, 800b5f0 <_free_r+0x54>
 800b5ec:	42a2      	cmp	r2, r4
 800b5ee:	d9fa      	bls.n	800b5e6 <_free_r+0x4a>
 800b5f0:	6819      	ldr	r1, [r3, #0]
 800b5f2:	1858      	adds	r0, r3, r1
 800b5f4:	42a0      	cmp	r0, r4
 800b5f6:	d10b      	bne.n	800b610 <_free_r+0x74>
 800b5f8:	6820      	ldr	r0, [r4, #0]
 800b5fa:	4401      	add	r1, r0
 800b5fc:	1858      	adds	r0, r3, r1
 800b5fe:	4282      	cmp	r2, r0
 800b600:	6019      	str	r1, [r3, #0]
 800b602:	d1dd      	bne.n	800b5c0 <_free_r+0x24>
 800b604:	6810      	ldr	r0, [r2, #0]
 800b606:	6852      	ldr	r2, [r2, #4]
 800b608:	605a      	str	r2, [r3, #4]
 800b60a:	4401      	add	r1, r0
 800b60c:	6019      	str	r1, [r3, #0]
 800b60e:	e7d7      	b.n	800b5c0 <_free_r+0x24>
 800b610:	d902      	bls.n	800b618 <_free_r+0x7c>
 800b612:	230c      	movs	r3, #12
 800b614:	602b      	str	r3, [r5, #0]
 800b616:	e7d3      	b.n	800b5c0 <_free_r+0x24>
 800b618:	6820      	ldr	r0, [r4, #0]
 800b61a:	1821      	adds	r1, r4, r0
 800b61c:	428a      	cmp	r2, r1
 800b61e:	bf04      	itt	eq
 800b620:	6811      	ldreq	r1, [r2, #0]
 800b622:	6852      	ldreq	r2, [r2, #4]
 800b624:	6062      	str	r2, [r4, #4]
 800b626:	bf04      	itt	eq
 800b628:	1809      	addeq	r1, r1, r0
 800b62a:	6021      	streq	r1, [r4, #0]
 800b62c:	605c      	str	r4, [r3, #4]
 800b62e:	e7c7      	b.n	800b5c0 <_free_r+0x24>
 800b630:	bd38      	pop	{r3, r4, r5, pc}
 800b632:	bf00      	nop
 800b634:	2000c63c 	.word	0x2000c63c

0800b638 <__sfputc_r>:
 800b638:	6893      	ldr	r3, [r2, #8]
 800b63a:	3b01      	subs	r3, #1
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	b410      	push	{r4}
 800b640:	6093      	str	r3, [r2, #8]
 800b642:	da09      	bge.n	800b658 <__sfputc_r+0x20>
 800b644:	6994      	ldr	r4, [r2, #24]
 800b646:	42a3      	cmp	r3, r4
 800b648:	db02      	blt.n	800b650 <__sfputc_r+0x18>
 800b64a:	b2cb      	uxtb	r3, r1
 800b64c:	2b0a      	cmp	r3, #10
 800b64e:	d103      	bne.n	800b658 <__sfputc_r+0x20>
 800b650:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b654:	f7fe bbbe 	b.w	8009dd4 <__swbuf_r>
 800b658:	6813      	ldr	r3, [r2, #0]
 800b65a:	1c58      	adds	r0, r3, #1
 800b65c:	6010      	str	r0, [r2, #0]
 800b65e:	7019      	strb	r1, [r3, #0]
 800b660:	b2c8      	uxtb	r0, r1
 800b662:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <__sfputs_r>:
 800b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66a:	4606      	mov	r6, r0
 800b66c:	460f      	mov	r7, r1
 800b66e:	4614      	mov	r4, r2
 800b670:	18d5      	adds	r5, r2, r3
 800b672:	42ac      	cmp	r4, r5
 800b674:	d101      	bne.n	800b67a <__sfputs_r+0x12>
 800b676:	2000      	movs	r0, #0
 800b678:	e007      	b.n	800b68a <__sfputs_r+0x22>
 800b67a:	463a      	mov	r2, r7
 800b67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b680:	4630      	mov	r0, r6
 800b682:	f7ff ffd9 	bl	800b638 <__sfputc_r>
 800b686:	1c43      	adds	r3, r0, #1
 800b688:	d1f3      	bne.n	800b672 <__sfputs_r+0xa>
 800b68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b68c <_vfiprintf_r>:
 800b68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b690:	b09d      	sub	sp, #116	; 0x74
 800b692:	460c      	mov	r4, r1
 800b694:	4617      	mov	r7, r2
 800b696:	9303      	str	r3, [sp, #12]
 800b698:	4606      	mov	r6, r0
 800b69a:	b118      	cbz	r0, 800b6a4 <_vfiprintf_r+0x18>
 800b69c:	6983      	ldr	r3, [r0, #24]
 800b69e:	b90b      	cbnz	r3, 800b6a4 <_vfiprintf_r+0x18>
 800b6a0:	f7ff fba6 	bl	800adf0 <__sinit>
 800b6a4:	4b7c      	ldr	r3, [pc, #496]	; (800b898 <_vfiprintf_r+0x20c>)
 800b6a6:	429c      	cmp	r4, r3
 800b6a8:	d157      	bne.n	800b75a <_vfiprintf_r+0xce>
 800b6aa:	6874      	ldr	r4, [r6, #4]
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	0718      	lsls	r0, r3, #28
 800b6b0:	d55d      	bpl.n	800b76e <_vfiprintf_r+0xe2>
 800b6b2:	6923      	ldr	r3, [r4, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d05a      	beq.n	800b76e <_vfiprintf_r+0xe2>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b6bc:	2320      	movs	r3, #32
 800b6be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6c2:	2330      	movs	r3, #48	; 0x30
 800b6c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6c8:	f04f 0b01 	mov.w	fp, #1
 800b6cc:	46b8      	mov	r8, r7
 800b6ce:	4645      	mov	r5, r8
 800b6d0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d155      	bne.n	800b784 <_vfiprintf_r+0xf8>
 800b6d8:	ebb8 0a07 	subs.w	sl, r8, r7
 800b6dc:	d00b      	beq.n	800b6f6 <_vfiprintf_r+0x6a>
 800b6de:	4653      	mov	r3, sl
 800b6e0:	463a      	mov	r2, r7
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f7ff ffbf 	bl	800b668 <__sfputs_r>
 800b6ea:	3001      	adds	r0, #1
 800b6ec:	f000 80c4 	beq.w	800b878 <_vfiprintf_r+0x1ec>
 800b6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f2:	4453      	add	r3, sl
 800b6f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6f6:	f898 3000 	ldrb.w	r3, [r8]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f000 80bc 	beq.w	800b878 <_vfiprintf_r+0x1ec>
 800b700:	2300      	movs	r3, #0
 800b702:	f04f 32ff 	mov.w	r2, #4294967295
 800b706:	9304      	str	r3, [sp, #16]
 800b708:	9307      	str	r3, [sp, #28]
 800b70a:	9205      	str	r2, [sp, #20]
 800b70c:	9306      	str	r3, [sp, #24]
 800b70e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b712:	931a      	str	r3, [sp, #104]	; 0x68
 800b714:	2205      	movs	r2, #5
 800b716:	7829      	ldrb	r1, [r5, #0]
 800b718:	4860      	ldr	r0, [pc, #384]	; (800b89c <_vfiprintf_r+0x210>)
 800b71a:	f7f7 f851 	bl	80027c0 <memchr>
 800b71e:	f105 0801 	add.w	r8, r5, #1
 800b722:	9b04      	ldr	r3, [sp, #16]
 800b724:	2800      	cmp	r0, #0
 800b726:	d131      	bne.n	800b78c <_vfiprintf_r+0x100>
 800b728:	06d9      	lsls	r1, r3, #27
 800b72a:	bf44      	itt	mi
 800b72c:	2220      	movmi	r2, #32
 800b72e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b732:	071a      	lsls	r2, r3, #28
 800b734:	bf44      	itt	mi
 800b736:	222b      	movmi	r2, #43	; 0x2b
 800b738:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b73c:	782a      	ldrb	r2, [r5, #0]
 800b73e:	2a2a      	cmp	r2, #42	; 0x2a
 800b740:	d02c      	beq.n	800b79c <_vfiprintf_r+0x110>
 800b742:	9a07      	ldr	r2, [sp, #28]
 800b744:	2100      	movs	r1, #0
 800b746:	200a      	movs	r0, #10
 800b748:	46a8      	mov	r8, r5
 800b74a:	3501      	adds	r5, #1
 800b74c:	f898 3000 	ldrb.w	r3, [r8]
 800b750:	3b30      	subs	r3, #48	; 0x30
 800b752:	2b09      	cmp	r3, #9
 800b754:	d96d      	bls.n	800b832 <_vfiprintf_r+0x1a6>
 800b756:	b371      	cbz	r1, 800b7b6 <_vfiprintf_r+0x12a>
 800b758:	e026      	b.n	800b7a8 <_vfiprintf_r+0x11c>
 800b75a:	4b51      	ldr	r3, [pc, #324]	; (800b8a0 <_vfiprintf_r+0x214>)
 800b75c:	429c      	cmp	r4, r3
 800b75e:	d101      	bne.n	800b764 <_vfiprintf_r+0xd8>
 800b760:	68b4      	ldr	r4, [r6, #8]
 800b762:	e7a3      	b.n	800b6ac <_vfiprintf_r+0x20>
 800b764:	4b4f      	ldr	r3, [pc, #316]	; (800b8a4 <_vfiprintf_r+0x218>)
 800b766:	429c      	cmp	r4, r3
 800b768:	bf08      	it	eq
 800b76a:	68f4      	ldreq	r4, [r6, #12]
 800b76c:	e79e      	b.n	800b6ac <_vfiprintf_r+0x20>
 800b76e:	4621      	mov	r1, r4
 800b770:	4630      	mov	r0, r6
 800b772:	f7fe fb81 	bl	8009e78 <__swsetup_r>
 800b776:	2800      	cmp	r0, #0
 800b778:	d09e      	beq.n	800b6b8 <_vfiprintf_r+0x2c>
 800b77a:	f04f 30ff 	mov.w	r0, #4294967295
 800b77e:	b01d      	add	sp, #116	; 0x74
 800b780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b784:	2b25      	cmp	r3, #37	; 0x25
 800b786:	d0a7      	beq.n	800b6d8 <_vfiprintf_r+0x4c>
 800b788:	46a8      	mov	r8, r5
 800b78a:	e7a0      	b.n	800b6ce <_vfiprintf_r+0x42>
 800b78c:	4a43      	ldr	r2, [pc, #268]	; (800b89c <_vfiprintf_r+0x210>)
 800b78e:	1a80      	subs	r0, r0, r2
 800b790:	fa0b f000 	lsl.w	r0, fp, r0
 800b794:	4318      	orrs	r0, r3
 800b796:	9004      	str	r0, [sp, #16]
 800b798:	4645      	mov	r5, r8
 800b79a:	e7bb      	b.n	800b714 <_vfiprintf_r+0x88>
 800b79c:	9a03      	ldr	r2, [sp, #12]
 800b79e:	1d11      	adds	r1, r2, #4
 800b7a0:	6812      	ldr	r2, [r2, #0]
 800b7a2:	9103      	str	r1, [sp, #12]
 800b7a4:	2a00      	cmp	r2, #0
 800b7a6:	db01      	blt.n	800b7ac <_vfiprintf_r+0x120>
 800b7a8:	9207      	str	r2, [sp, #28]
 800b7aa:	e004      	b.n	800b7b6 <_vfiprintf_r+0x12a>
 800b7ac:	4252      	negs	r2, r2
 800b7ae:	f043 0302 	orr.w	r3, r3, #2
 800b7b2:	9207      	str	r2, [sp, #28]
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	f898 3000 	ldrb.w	r3, [r8]
 800b7ba:	2b2e      	cmp	r3, #46	; 0x2e
 800b7bc:	d110      	bne.n	800b7e0 <_vfiprintf_r+0x154>
 800b7be:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b7c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b7c4:	f108 0101 	add.w	r1, r8, #1
 800b7c8:	d137      	bne.n	800b83a <_vfiprintf_r+0x1ae>
 800b7ca:	9b03      	ldr	r3, [sp, #12]
 800b7cc:	1d1a      	adds	r2, r3, #4
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	9203      	str	r2, [sp, #12]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	bfb8      	it	lt
 800b7d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7da:	f108 0802 	add.w	r8, r8, #2
 800b7de:	9305      	str	r3, [sp, #20]
 800b7e0:	4d31      	ldr	r5, [pc, #196]	; (800b8a8 <_vfiprintf_r+0x21c>)
 800b7e2:	f898 1000 	ldrb.w	r1, [r8]
 800b7e6:	2203      	movs	r2, #3
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	f7f6 ffe9 	bl	80027c0 <memchr>
 800b7ee:	b140      	cbz	r0, 800b802 <_vfiprintf_r+0x176>
 800b7f0:	2340      	movs	r3, #64	; 0x40
 800b7f2:	1b40      	subs	r0, r0, r5
 800b7f4:	fa03 f000 	lsl.w	r0, r3, r0
 800b7f8:	9b04      	ldr	r3, [sp, #16]
 800b7fa:	4303      	orrs	r3, r0
 800b7fc:	9304      	str	r3, [sp, #16]
 800b7fe:	f108 0801 	add.w	r8, r8, #1
 800b802:	f898 1000 	ldrb.w	r1, [r8]
 800b806:	4829      	ldr	r0, [pc, #164]	; (800b8ac <_vfiprintf_r+0x220>)
 800b808:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b80c:	2206      	movs	r2, #6
 800b80e:	f108 0701 	add.w	r7, r8, #1
 800b812:	f7f6 ffd5 	bl	80027c0 <memchr>
 800b816:	2800      	cmp	r0, #0
 800b818:	d034      	beq.n	800b884 <_vfiprintf_r+0x1f8>
 800b81a:	4b25      	ldr	r3, [pc, #148]	; (800b8b0 <_vfiprintf_r+0x224>)
 800b81c:	bb03      	cbnz	r3, 800b860 <_vfiprintf_r+0x1d4>
 800b81e:	9b03      	ldr	r3, [sp, #12]
 800b820:	3307      	adds	r3, #7
 800b822:	f023 0307 	bic.w	r3, r3, #7
 800b826:	3308      	adds	r3, #8
 800b828:	9303      	str	r3, [sp, #12]
 800b82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b82c:	444b      	add	r3, r9
 800b82e:	9309      	str	r3, [sp, #36]	; 0x24
 800b830:	e74c      	b.n	800b6cc <_vfiprintf_r+0x40>
 800b832:	fb00 3202 	mla	r2, r0, r2, r3
 800b836:	2101      	movs	r1, #1
 800b838:	e786      	b.n	800b748 <_vfiprintf_r+0xbc>
 800b83a:	2300      	movs	r3, #0
 800b83c:	9305      	str	r3, [sp, #20]
 800b83e:	4618      	mov	r0, r3
 800b840:	250a      	movs	r5, #10
 800b842:	4688      	mov	r8, r1
 800b844:	3101      	adds	r1, #1
 800b846:	f898 2000 	ldrb.w	r2, [r8]
 800b84a:	3a30      	subs	r2, #48	; 0x30
 800b84c:	2a09      	cmp	r2, #9
 800b84e:	d903      	bls.n	800b858 <_vfiprintf_r+0x1cc>
 800b850:	2b00      	cmp	r3, #0
 800b852:	d0c5      	beq.n	800b7e0 <_vfiprintf_r+0x154>
 800b854:	9005      	str	r0, [sp, #20]
 800b856:	e7c3      	b.n	800b7e0 <_vfiprintf_r+0x154>
 800b858:	fb05 2000 	mla	r0, r5, r0, r2
 800b85c:	2301      	movs	r3, #1
 800b85e:	e7f0      	b.n	800b842 <_vfiprintf_r+0x1b6>
 800b860:	ab03      	add	r3, sp, #12
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	4622      	mov	r2, r4
 800b866:	4b13      	ldr	r3, [pc, #76]	; (800b8b4 <_vfiprintf_r+0x228>)
 800b868:	a904      	add	r1, sp, #16
 800b86a:	4630      	mov	r0, r6
 800b86c:	f7fd fe00 	bl	8009470 <_printf_float>
 800b870:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b874:	4681      	mov	r9, r0
 800b876:	d1d8      	bne.n	800b82a <_vfiprintf_r+0x19e>
 800b878:	89a3      	ldrh	r3, [r4, #12]
 800b87a:	065b      	lsls	r3, r3, #25
 800b87c:	f53f af7d 	bmi.w	800b77a <_vfiprintf_r+0xee>
 800b880:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b882:	e77c      	b.n	800b77e <_vfiprintf_r+0xf2>
 800b884:	ab03      	add	r3, sp, #12
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	4622      	mov	r2, r4
 800b88a:	4b0a      	ldr	r3, [pc, #40]	; (800b8b4 <_vfiprintf_r+0x228>)
 800b88c:	a904      	add	r1, sp, #16
 800b88e:	4630      	mov	r0, r6
 800b890:	f7fe f8a4 	bl	80099dc <_printf_i>
 800b894:	e7ec      	b.n	800b870 <_vfiprintf_r+0x1e4>
 800b896:	bf00      	nop
 800b898:	0803c15c 	.word	0x0803c15c
 800b89c:	0803c29c 	.word	0x0803c29c
 800b8a0:	0803c17c 	.word	0x0803c17c
 800b8a4:	0803c13c 	.word	0x0803c13c
 800b8a8:	0803c2a2 	.word	0x0803c2a2
 800b8ac:	0803c2a6 	.word	0x0803c2a6
 800b8b0:	08009471 	.word	0x08009471
 800b8b4:	0800b669 	.word	0x0800b669

0800b8b8 <_putc_r>:
 800b8b8:	b570      	push	{r4, r5, r6, lr}
 800b8ba:	460d      	mov	r5, r1
 800b8bc:	4614      	mov	r4, r2
 800b8be:	4606      	mov	r6, r0
 800b8c0:	b118      	cbz	r0, 800b8ca <_putc_r+0x12>
 800b8c2:	6983      	ldr	r3, [r0, #24]
 800b8c4:	b90b      	cbnz	r3, 800b8ca <_putc_r+0x12>
 800b8c6:	f7ff fa93 	bl	800adf0 <__sinit>
 800b8ca:	4b13      	ldr	r3, [pc, #76]	; (800b918 <_putc_r+0x60>)
 800b8cc:	429c      	cmp	r4, r3
 800b8ce:	d112      	bne.n	800b8f6 <_putc_r+0x3e>
 800b8d0:	6874      	ldr	r4, [r6, #4]
 800b8d2:	68a3      	ldr	r3, [r4, #8]
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	60a3      	str	r3, [r4, #8]
 800b8da:	da16      	bge.n	800b90a <_putc_r+0x52>
 800b8dc:	69a2      	ldr	r2, [r4, #24]
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	db02      	blt.n	800b8e8 <_putc_r+0x30>
 800b8e2:	b2eb      	uxtb	r3, r5
 800b8e4:	2b0a      	cmp	r3, #10
 800b8e6:	d110      	bne.n	800b90a <_putc_r+0x52>
 800b8e8:	4622      	mov	r2, r4
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8f2:	f7fe ba6f 	b.w	8009dd4 <__swbuf_r>
 800b8f6:	4b09      	ldr	r3, [pc, #36]	; (800b91c <_putc_r+0x64>)
 800b8f8:	429c      	cmp	r4, r3
 800b8fa:	d101      	bne.n	800b900 <_putc_r+0x48>
 800b8fc:	68b4      	ldr	r4, [r6, #8]
 800b8fe:	e7e8      	b.n	800b8d2 <_putc_r+0x1a>
 800b900:	4b07      	ldr	r3, [pc, #28]	; (800b920 <_putc_r+0x68>)
 800b902:	429c      	cmp	r4, r3
 800b904:	bf08      	it	eq
 800b906:	68f4      	ldreq	r4, [r6, #12]
 800b908:	e7e3      	b.n	800b8d2 <_putc_r+0x1a>
 800b90a:	6823      	ldr	r3, [r4, #0]
 800b90c:	1c5a      	adds	r2, r3, #1
 800b90e:	6022      	str	r2, [r4, #0]
 800b910:	701d      	strb	r5, [r3, #0]
 800b912:	b2e8      	uxtb	r0, r5
 800b914:	bd70      	pop	{r4, r5, r6, pc}
 800b916:	bf00      	nop
 800b918:	0803c15c 	.word	0x0803c15c
 800b91c:	0803c17c 	.word	0x0803c17c
 800b920:	0803c13c 	.word	0x0803c13c

0800b924 <__sread>:
 800b924:	b510      	push	{r4, lr}
 800b926:	460c      	mov	r4, r1
 800b928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b92c:	f000 f8a6 	bl	800ba7c <_read_r>
 800b930:	2800      	cmp	r0, #0
 800b932:	bfab      	itete	ge
 800b934:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b936:	89a3      	ldrhlt	r3, [r4, #12]
 800b938:	181b      	addge	r3, r3, r0
 800b93a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b93e:	bfac      	ite	ge
 800b940:	6563      	strge	r3, [r4, #84]	; 0x54
 800b942:	81a3      	strhlt	r3, [r4, #12]
 800b944:	bd10      	pop	{r4, pc}

0800b946 <__swrite>:
 800b946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b94a:	461f      	mov	r7, r3
 800b94c:	898b      	ldrh	r3, [r1, #12]
 800b94e:	05db      	lsls	r3, r3, #23
 800b950:	4605      	mov	r5, r0
 800b952:	460c      	mov	r4, r1
 800b954:	4616      	mov	r6, r2
 800b956:	d505      	bpl.n	800b964 <__swrite+0x1e>
 800b958:	2302      	movs	r3, #2
 800b95a:	2200      	movs	r2, #0
 800b95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b960:	f000 f868 	bl	800ba34 <_lseek_r>
 800b964:	89a3      	ldrh	r3, [r4, #12]
 800b966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b96a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b96e:	81a3      	strh	r3, [r4, #12]
 800b970:	4632      	mov	r2, r6
 800b972:	463b      	mov	r3, r7
 800b974:	4628      	mov	r0, r5
 800b976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b97a:	f000 b817 	b.w	800b9ac <_write_r>

0800b97e <__sseek>:
 800b97e:	b510      	push	{r4, lr}
 800b980:	460c      	mov	r4, r1
 800b982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b986:	f000 f855 	bl	800ba34 <_lseek_r>
 800b98a:	1c43      	adds	r3, r0, #1
 800b98c:	89a3      	ldrh	r3, [r4, #12]
 800b98e:	bf15      	itete	ne
 800b990:	6560      	strne	r0, [r4, #84]	; 0x54
 800b992:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b996:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b99a:	81a3      	strheq	r3, [r4, #12]
 800b99c:	bf18      	it	ne
 800b99e:	81a3      	strhne	r3, [r4, #12]
 800b9a0:	bd10      	pop	{r4, pc}

0800b9a2 <__sclose>:
 800b9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a6:	f000 b813 	b.w	800b9d0 <_close_r>
	...

0800b9ac <_write_r>:
 800b9ac:	b538      	push	{r3, r4, r5, lr}
 800b9ae:	4c07      	ldr	r4, [pc, #28]	; (800b9cc <_write_r+0x20>)
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	4608      	mov	r0, r1
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	6022      	str	r2, [r4, #0]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	f7fb fd0a 	bl	80073d4 <_write>
 800b9c0:	1c43      	adds	r3, r0, #1
 800b9c2:	d102      	bne.n	800b9ca <_write_r+0x1e>
 800b9c4:	6823      	ldr	r3, [r4, #0]
 800b9c6:	b103      	cbz	r3, 800b9ca <_write_r+0x1e>
 800b9c8:	602b      	str	r3, [r5, #0]
 800b9ca:	bd38      	pop	{r3, r4, r5, pc}
 800b9cc:	2000f33c 	.word	0x2000f33c

0800b9d0 <_close_r>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	4c06      	ldr	r4, [pc, #24]	; (800b9ec <_close_r+0x1c>)
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	4608      	mov	r0, r1
 800b9da:	6023      	str	r3, [r4, #0]
 800b9dc:	f7fb fdce 	bl	800757c <_close>
 800b9e0:	1c43      	adds	r3, r0, #1
 800b9e2:	d102      	bne.n	800b9ea <_close_r+0x1a>
 800b9e4:	6823      	ldr	r3, [r4, #0]
 800b9e6:	b103      	cbz	r3, 800b9ea <_close_r+0x1a>
 800b9e8:	602b      	str	r3, [r5, #0]
 800b9ea:	bd38      	pop	{r3, r4, r5, pc}
 800b9ec:	2000f33c 	.word	0x2000f33c

0800b9f0 <_fstat_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4c07      	ldr	r4, [pc, #28]	; (800ba10 <_fstat_r+0x20>)
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	4605      	mov	r5, r0
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	4611      	mov	r1, r2
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	f7fb fdc0 	bl	8007582 <_fstat>
 800ba02:	1c43      	adds	r3, r0, #1
 800ba04:	d102      	bne.n	800ba0c <_fstat_r+0x1c>
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	b103      	cbz	r3, 800ba0c <_fstat_r+0x1c>
 800ba0a:	602b      	str	r3, [r5, #0]
 800ba0c:	bd38      	pop	{r3, r4, r5, pc}
 800ba0e:	bf00      	nop
 800ba10:	2000f33c 	.word	0x2000f33c

0800ba14 <_isatty_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4c06      	ldr	r4, [pc, #24]	; (800ba30 <_isatty_r+0x1c>)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	6023      	str	r3, [r4, #0]
 800ba20:	f7fb fdb4 	bl	800758c <_isatty>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	d102      	bne.n	800ba2e <_isatty_r+0x1a>
 800ba28:	6823      	ldr	r3, [r4, #0]
 800ba2a:	b103      	cbz	r3, 800ba2e <_isatty_r+0x1a>
 800ba2c:	602b      	str	r3, [r5, #0]
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}
 800ba30:	2000f33c 	.word	0x2000f33c

0800ba34 <_lseek_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	4c07      	ldr	r4, [pc, #28]	; (800ba54 <_lseek_r+0x20>)
 800ba38:	4605      	mov	r5, r0
 800ba3a:	4608      	mov	r0, r1
 800ba3c:	4611      	mov	r1, r2
 800ba3e:	2200      	movs	r2, #0
 800ba40:	6022      	str	r2, [r4, #0]
 800ba42:	461a      	mov	r2, r3
 800ba44:	f7fb fda4 	bl	8007590 <_lseek>
 800ba48:	1c43      	adds	r3, r0, #1
 800ba4a:	d102      	bne.n	800ba52 <_lseek_r+0x1e>
 800ba4c:	6823      	ldr	r3, [r4, #0]
 800ba4e:	b103      	cbz	r3, 800ba52 <_lseek_r+0x1e>
 800ba50:	602b      	str	r3, [r5, #0]
 800ba52:	bd38      	pop	{r3, r4, r5, pc}
 800ba54:	2000f33c 	.word	0x2000f33c

0800ba58 <__ascii_mbtowc>:
 800ba58:	b082      	sub	sp, #8
 800ba5a:	b901      	cbnz	r1, 800ba5e <__ascii_mbtowc+0x6>
 800ba5c:	a901      	add	r1, sp, #4
 800ba5e:	b142      	cbz	r2, 800ba72 <__ascii_mbtowc+0x1a>
 800ba60:	b14b      	cbz	r3, 800ba76 <__ascii_mbtowc+0x1e>
 800ba62:	7813      	ldrb	r3, [r2, #0]
 800ba64:	600b      	str	r3, [r1, #0]
 800ba66:	7812      	ldrb	r2, [r2, #0]
 800ba68:	1c10      	adds	r0, r2, #0
 800ba6a:	bf18      	it	ne
 800ba6c:	2001      	movne	r0, #1
 800ba6e:	b002      	add	sp, #8
 800ba70:	4770      	bx	lr
 800ba72:	4610      	mov	r0, r2
 800ba74:	e7fb      	b.n	800ba6e <__ascii_mbtowc+0x16>
 800ba76:	f06f 0001 	mvn.w	r0, #1
 800ba7a:	e7f8      	b.n	800ba6e <__ascii_mbtowc+0x16>

0800ba7c <_read_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4c07      	ldr	r4, [pc, #28]	; (800ba9c <_read_r+0x20>)
 800ba80:	4605      	mov	r5, r0
 800ba82:	4608      	mov	r0, r1
 800ba84:	4611      	mov	r1, r2
 800ba86:	2200      	movs	r2, #0
 800ba88:	6022      	str	r2, [r4, #0]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	f7fb fd4e 	bl	800752c <_read>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d102      	bne.n	800ba9a <_read_r+0x1e>
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	b103      	cbz	r3, 800ba9a <_read_r+0x1e>
 800ba98:	602b      	str	r3, [r5, #0]
 800ba9a:	bd38      	pop	{r3, r4, r5, pc}
 800ba9c:	2000f33c 	.word	0x2000f33c

0800baa0 <__ascii_wctomb>:
 800baa0:	b149      	cbz	r1, 800bab6 <__ascii_wctomb+0x16>
 800baa2:	2aff      	cmp	r2, #255	; 0xff
 800baa4:	bf85      	ittet	hi
 800baa6:	238a      	movhi	r3, #138	; 0x8a
 800baa8:	6003      	strhi	r3, [r0, #0]
 800baaa:	700a      	strbls	r2, [r1, #0]
 800baac:	f04f 30ff 	movhi.w	r0, #4294967295
 800bab0:	bf98      	it	ls
 800bab2:	2001      	movls	r0, #1
 800bab4:	4770      	bx	lr
 800bab6:	4608      	mov	r0, r1
 800bab8:	4770      	bx	lr
 800baba:	0000      	movs	r0, r0
 800babc:	0000      	movs	r0, r0
	...

0800bac0 <floor>:
 800bac0:	ec51 0b10 	vmov	r0, r1, d0
 800bac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bacc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bad0:	2e13      	cmp	r6, #19
 800bad2:	ee10 8a10 	vmov	r8, s0
 800bad6:	460c      	mov	r4, r1
 800bad8:	ee10 5a10 	vmov	r5, s0
 800badc:	dc35      	bgt.n	800bb4a <floor+0x8a>
 800bade:	2e00      	cmp	r6, #0
 800bae0:	da17      	bge.n	800bb12 <floor+0x52>
 800bae2:	a335      	add	r3, pc, #212	; (adr r3, 800bbb8 <floor+0xf8>)
 800bae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae8:	f7f6 fec0 	bl	800286c <__adddf3>
 800baec:	2200      	movs	r2, #0
 800baee:	2300      	movs	r3, #0
 800baf0:	f7f7 fafe 	bl	80030f0 <__aeabi_dcmpgt>
 800baf4:	b150      	cbz	r0, 800bb0c <floor+0x4c>
 800baf6:	2c00      	cmp	r4, #0
 800baf8:	da5a      	bge.n	800bbb0 <floor+0xf0>
 800bafa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bafe:	ea53 0308 	orrs.w	r3, r3, r8
 800bb02:	4b2f      	ldr	r3, [pc, #188]	; (800bbc0 <floor+0x100>)
 800bb04:	f04f 0500 	mov.w	r5, #0
 800bb08:	bf18      	it	ne
 800bb0a:	461c      	movne	r4, r3
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	4628      	mov	r0, r5
 800bb10:	e025      	b.n	800bb5e <floor+0x9e>
 800bb12:	4f2c      	ldr	r7, [pc, #176]	; (800bbc4 <floor+0x104>)
 800bb14:	4137      	asrs	r7, r6
 800bb16:	ea01 0307 	and.w	r3, r1, r7
 800bb1a:	4303      	orrs	r3, r0
 800bb1c:	d01f      	beq.n	800bb5e <floor+0x9e>
 800bb1e:	a326      	add	r3, pc, #152	; (adr r3, 800bbb8 <floor+0xf8>)
 800bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb24:	f7f6 fea2 	bl	800286c <__adddf3>
 800bb28:	2200      	movs	r2, #0
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f7f7 fae0 	bl	80030f0 <__aeabi_dcmpgt>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	d0eb      	beq.n	800bb0c <floor+0x4c>
 800bb34:	2c00      	cmp	r4, #0
 800bb36:	bfbe      	ittt	lt
 800bb38:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bb3c:	fa43 f606 	asrlt.w	r6, r3, r6
 800bb40:	19a4      	addlt	r4, r4, r6
 800bb42:	ea24 0407 	bic.w	r4, r4, r7
 800bb46:	2500      	movs	r5, #0
 800bb48:	e7e0      	b.n	800bb0c <floor+0x4c>
 800bb4a:	2e33      	cmp	r6, #51	; 0x33
 800bb4c:	dd0b      	ble.n	800bb66 <floor+0xa6>
 800bb4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bb52:	d104      	bne.n	800bb5e <floor+0x9e>
 800bb54:	ee10 2a10 	vmov	r2, s0
 800bb58:	460b      	mov	r3, r1
 800bb5a:	f7f6 fe87 	bl	800286c <__adddf3>
 800bb5e:	ec41 0b10 	vmov	d0, r0, r1
 800bb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb66:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bb6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb6e:	fa23 f707 	lsr.w	r7, r3, r7
 800bb72:	4238      	tst	r0, r7
 800bb74:	d0f3      	beq.n	800bb5e <floor+0x9e>
 800bb76:	a310      	add	r3, pc, #64	; (adr r3, 800bbb8 <floor+0xf8>)
 800bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7c:	f7f6 fe76 	bl	800286c <__adddf3>
 800bb80:	2200      	movs	r2, #0
 800bb82:	2300      	movs	r3, #0
 800bb84:	f7f7 fab4 	bl	80030f0 <__aeabi_dcmpgt>
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	d0bf      	beq.n	800bb0c <floor+0x4c>
 800bb8c:	2c00      	cmp	r4, #0
 800bb8e:	da02      	bge.n	800bb96 <floor+0xd6>
 800bb90:	2e14      	cmp	r6, #20
 800bb92:	d103      	bne.n	800bb9c <floor+0xdc>
 800bb94:	3401      	adds	r4, #1
 800bb96:	ea25 0507 	bic.w	r5, r5, r7
 800bb9a:	e7b7      	b.n	800bb0c <floor+0x4c>
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bba2:	fa03 f606 	lsl.w	r6, r3, r6
 800bba6:	4435      	add	r5, r6
 800bba8:	45a8      	cmp	r8, r5
 800bbaa:	bf88      	it	hi
 800bbac:	18e4      	addhi	r4, r4, r3
 800bbae:	e7f2      	b.n	800bb96 <floor+0xd6>
 800bbb0:	2500      	movs	r5, #0
 800bbb2:	462c      	mov	r4, r5
 800bbb4:	e7aa      	b.n	800bb0c <floor+0x4c>
 800bbb6:	bf00      	nop
 800bbb8:	8800759c 	.word	0x8800759c
 800bbbc:	7e37e43c 	.word	0x7e37e43c
 800bbc0:	bff00000 	.word	0xbff00000
 800bbc4:	000fffff 	.word	0x000fffff

0800bbc8 <tanhf>:
 800bbc8:	b510      	push	{r4, lr}
 800bbca:	ee10 4a10 	vmov	r4, s0
 800bbce:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bbd2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bbd6:	ed2d 8b02 	vpush	{d8}
 800bbda:	eef0 7a40 	vmov.f32	s15, s0
 800bbde:	db0c      	blt.n	800bbfa <tanhf+0x32>
 800bbe0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bbe4:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800bbe8:	2c00      	cmp	r4, #0
 800bbea:	bfac      	ite	ge
 800bbec:	ee37 0a00 	vaddge.f32	s0, s14, s0
 800bbf0:	ee37 0a40 	vsublt.f32	s0, s14, s0
 800bbf4:	ecbd 8b02 	vpop	{d8}
 800bbf8:	bd10      	pop	{r4, pc}
 800bbfa:	4a1b      	ldr	r2, [pc, #108]	; (800bc68 <tanhf+0xa0>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	dc30      	bgt.n	800bc62 <tanhf+0x9a>
 800bc00:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800bc04:	da06      	bge.n	800bc14 <tanhf+0x4c>
 800bc06:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bc0a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bc0e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bc12:	e7ef      	b.n	800bbf4 <tanhf+0x2c>
 800bc14:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800bc18:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800bc1c:	db12      	blt.n	800bc44 <tanhf+0x7c>
 800bc1e:	f002 f935 	bl	800de8c <fabsf>
 800bc22:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc26:	f002 f805 	bl	800dc34 <expm1f>
 800bc2a:	ee30 0a08 	vadd.f32	s0, s0, s16
 800bc2e:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800bc32:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bc36:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bc3a:	2c00      	cmp	r4, #0
 800bc3c:	bfb8      	it	lt
 800bc3e:	eeb1 0a40 	vneglt.f32	s0, s0
 800bc42:	e7d7      	b.n	800bbf4 <tanhf+0x2c>
 800bc44:	f002 f922 	bl	800de8c <fabsf>
 800bc48:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800bc4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bc50:	f001 fff0 	bl	800dc34 <expm1f>
 800bc54:	ee70 7a08 	vadd.f32	s15, s0, s16
 800bc58:	eeb1 7a40 	vneg.f32	s14, s0
 800bc5c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800bc60:	e7eb      	b.n	800bc3a <tanhf+0x72>
 800bc62:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bc66:	e7e8      	b.n	800bc3a <tanhf+0x72>
 800bc68:	41afffff 	.word	0x41afffff

0800bc6c <log10>:
 800bc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc6e:	ed2d 8b02 	vpush	{d8}
 800bc72:	b08b      	sub	sp, #44	; 0x2c
 800bc74:	ec55 4b10 	vmov	r4, r5, d0
 800bc78:	f000 fc92 	bl	800c5a0 <__ieee754_log10>
 800bc7c:	4b36      	ldr	r3, [pc, #216]	; (800bd58 <log10+0xec>)
 800bc7e:	eeb0 8a40 	vmov.f32	s16, s0
 800bc82:	eef0 8a60 	vmov.f32	s17, s1
 800bc86:	f993 6000 	ldrsb.w	r6, [r3]
 800bc8a:	1c73      	adds	r3, r6, #1
 800bc8c:	d05c      	beq.n	800bd48 <log10+0xdc>
 800bc8e:	4622      	mov	r2, r4
 800bc90:	462b      	mov	r3, r5
 800bc92:	4620      	mov	r0, r4
 800bc94:	4629      	mov	r1, r5
 800bc96:	f7f7 fa35 	bl	8003104 <__aeabi_dcmpun>
 800bc9a:	4607      	mov	r7, r0
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d153      	bne.n	800bd48 <log10+0xdc>
 800bca0:	2200      	movs	r2, #0
 800bca2:	2300      	movs	r3, #0
 800bca4:	4620      	mov	r0, r4
 800bca6:	4629      	mov	r1, r5
 800bca8:	f7f7 fa0e 	bl	80030c8 <__aeabi_dcmple>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d04b      	beq.n	800bd48 <log10+0xdc>
 800bcb0:	4b2a      	ldr	r3, [pc, #168]	; (800bd5c <log10+0xf0>)
 800bcb2:	9301      	str	r3, [sp, #4]
 800bcb4:	9708      	str	r7, [sp, #32]
 800bcb6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bcba:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800bcbe:	b9a6      	cbnz	r6, 800bcea <log10+0x7e>
 800bcc0:	4b27      	ldr	r3, [pc, #156]	; (800bd60 <log10+0xf4>)
 800bcc2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bcc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bcca:	4620      	mov	r0, r4
 800bccc:	2200      	movs	r2, #0
 800bcce:	2300      	movs	r3, #0
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	f7f7 f9e5 	bl	80030a0 <__aeabi_dcmpeq>
 800bcd6:	bb40      	cbnz	r0, 800bd2a <log10+0xbe>
 800bcd8:	2301      	movs	r3, #1
 800bcda:	2e02      	cmp	r6, #2
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	d119      	bne.n	800bd14 <log10+0xa8>
 800bce0:	f7fd fa78 	bl	80091d4 <__errno>
 800bce4:	2321      	movs	r3, #33	; 0x21
 800bce6:	6003      	str	r3, [r0, #0]
 800bce8:	e019      	b.n	800bd1e <log10+0xb2>
 800bcea:	4b1e      	ldr	r3, [pc, #120]	; (800bd64 <log10+0xf8>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	f7f7 f9d1 	bl	80030a0 <__aeabi_dcmpeq>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d0ea      	beq.n	800bcd8 <log10+0x6c>
 800bd02:	2302      	movs	r3, #2
 800bd04:	429e      	cmp	r6, r3
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	d111      	bne.n	800bd2e <log10+0xc2>
 800bd0a:	f7fd fa63 	bl	80091d4 <__errno>
 800bd0e:	2322      	movs	r3, #34	; 0x22
 800bd10:	6003      	str	r3, [r0, #0]
 800bd12:	e011      	b.n	800bd38 <log10+0xcc>
 800bd14:	4668      	mov	r0, sp
 800bd16:	f001 fe81 	bl	800da1c <matherr>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d0e0      	beq.n	800bce0 <log10+0x74>
 800bd1e:	4812      	ldr	r0, [pc, #72]	; (800bd68 <log10+0xfc>)
 800bd20:	f001 fe7e 	bl	800da20 <nan>
 800bd24:	ed8d 0b06 	vstr	d0, [sp, #24]
 800bd28:	e006      	b.n	800bd38 <log10+0xcc>
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	9300      	str	r3, [sp, #0]
 800bd2e:	4668      	mov	r0, sp
 800bd30:	f001 fe74 	bl	800da1c <matherr>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d0e8      	beq.n	800bd0a <log10+0x9e>
 800bd38:	9b08      	ldr	r3, [sp, #32]
 800bd3a:	b11b      	cbz	r3, 800bd44 <log10+0xd8>
 800bd3c:	f7fd fa4a 	bl	80091d4 <__errno>
 800bd40:	9b08      	ldr	r3, [sp, #32]
 800bd42:	6003      	str	r3, [r0, #0]
 800bd44:	ed9d 8b06 	vldr	d8, [sp, #24]
 800bd48:	eeb0 0a48 	vmov.f32	s0, s16
 800bd4c:	eef0 0a68 	vmov.f32	s1, s17
 800bd50:	b00b      	add	sp, #44	; 0x2c
 800bd52:	ecbd 8b02 	vpop	{d8}
 800bd56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd58:	20000884 	.word	0x20000884
 800bd5c:	0803c3b8 	.word	0x0803c3b8
 800bd60:	c7efffff 	.word	0xc7efffff
 800bd64:	fff00000 	.word	0xfff00000
 800bd68:	08028453 	.word	0x08028453

0800bd6c <pow>:
 800bd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd70:	ed2d 8b04 	vpush	{d8-d9}
 800bd74:	b08d      	sub	sp, #52	; 0x34
 800bd76:	ec57 6b10 	vmov	r6, r7, d0
 800bd7a:	ec55 4b11 	vmov	r4, r5, d1
 800bd7e:	f000 fc9f 	bl	800c6c0 <__ieee754_pow>
 800bd82:	4bae      	ldr	r3, [pc, #696]	; (800c03c <pow+0x2d0>)
 800bd84:	eeb0 8a40 	vmov.f32	s16, s0
 800bd88:	eef0 8a60 	vmov.f32	s17, s1
 800bd8c:	f993 9000 	ldrsb.w	r9, [r3]
 800bd90:	f1b9 3fff 	cmp.w	r9, #4294967295
 800bd94:	4698      	mov	r8, r3
 800bd96:	d05f      	beq.n	800be58 <pow+0xec>
 800bd98:	4622      	mov	r2, r4
 800bd9a:	462b      	mov	r3, r5
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	4629      	mov	r1, r5
 800bda0:	f7f7 f9b0 	bl	8003104 <__aeabi_dcmpun>
 800bda4:	4683      	mov	fp, r0
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d156      	bne.n	800be58 <pow+0xec>
 800bdaa:	4632      	mov	r2, r6
 800bdac:	463b      	mov	r3, r7
 800bdae:	4630      	mov	r0, r6
 800bdb0:	4639      	mov	r1, r7
 800bdb2:	f7f7 f9a7 	bl	8003104 <__aeabi_dcmpun>
 800bdb6:	9001      	str	r0, [sp, #4]
 800bdb8:	b1e8      	cbz	r0, 800bdf6 <pow+0x8a>
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	f7f7 f96d 	bl	80030a0 <__aeabi_dcmpeq>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d046      	beq.n	800be58 <pow+0xec>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	9302      	str	r3, [sp, #8]
 800bdce:	4b9c      	ldr	r3, [pc, #624]	; (800c040 <pow+0x2d4>)
 800bdd0:	9303      	str	r3, [sp, #12]
 800bdd2:	4b9c      	ldr	r3, [pc, #624]	; (800c044 <pow+0x2d8>)
 800bdd4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f1b9 0f02 	cmp.w	r9, #2
 800bdde:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bde2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800bde6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bdea:	d033      	beq.n	800be54 <pow+0xe8>
 800bdec:	a802      	add	r0, sp, #8
 800bdee:	f001 fe15 	bl	800da1c <matherr>
 800bdf2:	bb48      	cbnz	r0, 800be48 <pow+0xdc>
 800bdf4:	e05e      	b.n	800beb4 <pow+0x148>
 800bdf6:	f04f 0a00 	mov.w	sl, #0
 800bdfa:	f04f 0b00 	mov.w	fp, #0
 800bdfe:	4652      	mov	r2, sl
 800be00:	465b      	mov	r3, fp
 800be02:	4630      	mov	r0, r6
 800be04:	4639      	mov	r1, r7
 800be06:	f7f7 f94b 	bl	80030a0 <__aeabi_dcmpeq>
 800be0a:	ec4b ab19 	vmov	d9, sl, fp
 800be0e:	2800      	cmp	r0, #0
 800be10:	d055      	beq.n	800bebe <pow+0x152>
 800be12:	4652      	mov	r2, sl
 800be14:	465b      	mov	r3, fp
 800be16:	4620      	mov	r0, r4
 800be18:	4629      	mov	r1, r5
 800be1a:	f7f7 f941 	bl	80030a0 <__aeabi_dcmpeq>
 800be1e:	4680      	mov	r8, r0
 800be20:	b318      	cbz	r0, 800be6a <pow+0xfe>
 800be22:	2301      	movs	r3, #1
 800be24:	9302      	str	r3, [sp, #8]
 800be26:	4b86      	ldr	r3, [pc, #536]	; (800c040 <pow+0x2d4>)
 800be28:	9303      	str	r3, [sp, #12]
 800be2a:	9b01      	ldr	r3, [sp, #4]
 800be2c:	930a      	str	r3, [sp, #40]	; 0x28
 800be2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800be32:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800be36:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800be3a:	f1b9 0f00 	cmp.w	r9, #0
 800be3e:	d0d5      	beq.n	800bdec <pow+0x80>
 800be40:	4b80      	ldr	r3, [pc, #512]	; (800c044 <pow+0x2d8>)
 800be42:	2200      	movs	r2, #0
 800be44:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800be48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be4a:	b11b      	cbz	r3, 800be54 <pow+0xe8>
 800be4c:	f7fd f9c2 	bl	80091d4 <__errno>
 800be50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be52:	6003      	str	r3, [r0, #0]
 800be54:	ed9d 8b08 	vldr	d8, [sp, #32]
 800be58:	eeb0 0a48 	vmov.f32	s0, s16
 800be5c:	eef0 0a68 	vmov.f32	s1, s17
 800be60:	b00d      	add	sp, #52	; 0x34
 800be62:	ecbd 8b04 	vpop	{d8-d9}
 800be66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6a:	ec45 4b10 	vmov	d0, r4, r5
 800be6e:	f001 fdcd 	bl	800da0c <finite>
 800be72:	2800      	cmp	r0, #0
 800be74:	d0f0      	beq.n	800be58 <pow+0xec>
 800be76:	4652      	mov	r2, sl
 800be78:	465b      	mov	r3, fp
 800be7a:	4620      	mov	r0, r4
 800be7c:	4629      	mov	r1, r5
 800be7e:	f7f7 f919 	bl	80030b4 <__aeabi_dcmplt>
 800be82:	2800      	cmp	r0, #0
 800be84:	d0e8      	beq.n	800be58 <pow+0xec>
 800be86:	2301      	movs	r3, #1
 800be88:	9302      	str	r3, [sp, #8]
 800be8a:	4b6d      	ldr	r3, [pc, #436]	; (800c040 <pow+0x2d4>)
 800be8c:	9303      	str	r3, [sp, #12]
 800be8e:	4b6b      	ldr	r3, [pc, #428]	; (800c03c <pow+0x2d0>)
 800be90:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800be94:	f993 3000 	ldrsb.w	r3, [r3]
 800be98:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800be9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800bea0:	b913      	cbnz	r3, 800bea8 <pow+0x13c>
 800bea2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800bea6:	e7a1      	b.n	800bdec <pow+0x80>
 800bea8:	4967      	ldr	r1, [pc, #412]	; (800c048 <pow+0x2dc>)
 800beaa:	2000      	movs	r0, #0
 800beac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	d19b      	bne.n	800bdec <pow+0x80>
 800beb4:	f7fd f98e 	bl	80091d4 <__errno>
 800beb8:	2321      	movs	r3, #33	; 0x21
 800beba:	6003      	str	r3, [r0, #0]
 800bebc:	e7c4      	b.n	800be48 <pow+0xdc>
 800bebe:	eeb0 0a48 	vmov.f32	s0, s16
 800bec2:	eef0 0a68 	vmov.f32	s1, s17
 800bec6:	f001 fda1 	bl	800da0c <finite>
 800beca:	9001      	str	r0, [sp, #4]
 800becc:	2800      	cmp	r0, #0
 800bece:	f040 808a 	bne.w	800bfe6 <pow+0x27a>
 800bed2:	ec47 6b10 	vmov	d0, r6, r7
 800bed6:	f001 fd99 	bl	800da0c <finite>
 800beda:	2800      	cmp	r0, #0
 800bedc:	f000 8083 	beq.w	800bfe6 <pow+0x27a>
 800bee0:	ec45 4b10 	vmov	d0, r4, r5
 800bee4:	f001 fd92 	bl	800da0c <finite>
 800bee8:	2800      	cmp	r0, #0
 800beea:	d07c      	beq.n	800bfe6 <pow+0x27a>
 800beec:	ec53 2b18 	vmov	r2, r3, d8
 800bef0:	ee18 0a10 	vmov	r0, s16
 800bef4:	4619      	mov	r1, r3
 800bef6:	f7f7 f905 	bl	8003104 <__aeabi_dcmpun>
 800befa:	f998 9000 	ldrsb.w	r9, [r8]
 800befe:	4b50      	ldr	r3, [pc, #320]	; (800c040 <pow+0x2d4>)
 800bf00:	b1b0      	cbz	r0, 800bf30 <pow+0x1c4>
 800bf02:	2201      	movs	r2, #1
 800bf04:	9303      	str	r3, [sp, #12]
 800bf06:	9b01      	ldr	r3, [sp, #4]
 800bf08:	9202      	str	r2, [sp, #8]
 800bf0a:	930a      	str	r3, [sp, #40]	; 0x28
 800bf0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bf10:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800bf14:	f1b9 0f00 	cmp.w	r9, #0
 800bf18:	d0c3      	beq.n	800bea2 <pow+0x136>
 800bf1a:	4652      	mov	r2, sl
 800bf1c:	465b      	mov	r3, fp
 800bf1e:	4650      	mov	r0, sl
 800bf20:	4659      	mov	r1, fp
 800bf22:	f7f6 ff7f 	bl	8002e24 <__aeabi_ddiv>
 800bf26:	f1b9 0f02 	cmp.w	r9, #2
 800bf2a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf2e:	e7c0      	b.n	800beb2 <pow+0x146>
 800bf30:	2203      	movs	r2, #3
 800bf32:	9202      	str	r2, [sp, #8]
 800bf34:	9303      	str	r3, [sp, #12]
 800bf36:	900a      	str	r0, [sp, #40]	; 0x28
 800bf38:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bf3c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800bf40:	f1b9 0f00 	cmp.w	r9, #0
 800bf44:	d12c      	bne.n	800bfa0 <pow+0x234>
 800bf46:	4b41      	ldr	r3, [pc, #260]	; (800c04c <pow+0x2e0>)
 800bf48:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bf4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf50:	4630      	mov	r0, r6
 800bf52:	4652      	mov	r2, sl
 800bf54:	465b      	mov	r3, fp
 800bf56:	4639      	mov	r1, r7
 800bf58:	f7f7 f8ac 	bl	80030b4 <__aeabi_dcmplt>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d066      	beq.n	800c02e <pow+0x2c2>
 800bf60:	2200      	movs	r2, #0
 800bf62:	4b3b      	ldr	r3, [pc, #236]	; (800c050 <pow+0x2e4>)
 800bf64:	4620      	mov	r0, r4
 800bf66:	4629      	mov	r1, r5
 800bf68:	f7f6 fe32 	bl	8002bd0 <__aeabi_dmul>
 800bf6c:	4604      	mov	r4, r0
 800bf6e:	460d      	mov	r5, r1
 800bf70:	ec45 4b10 	vmov	d0, r4, r5
 800bf74:	f001 fd5c 	bl	800da30 <rint>
 800bf78:	4620      	mov	r0, r4
 800bf7a:	ec53 2b10 	vmov	r2, r3, d0
 800bf7e:	4629      	mov	r1, r5
 800bf80:	f7f7 f88e 	bl	80030a0 <__aeabi_dcmpeq>
 800bf84:	b920      	cbnz	r0, 800bf90 <pow+0x224>
 800bf86:	4b33      	ldr	r3, [pc, #204]	; (800c054 <pow+0x2e8>)
 800bf88:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bf8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf90:	f998 3000 	ldrsb.w	r3, [r8]
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	d14a      	bne.n	800c02e <pow+0x2c2>
 800bf98:	f7fd f91c 	bl	80091d4 <__errno>
 800bf9c:	2322      	movs	r3, #34	; 0x22
 800bf9e:	e78c      	b.n	800beba <pow+0x14e>
 800bfa0:	4b2d      	ldr	r3, [pc, #180]	; (800c058 <pow+0x2ec>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	4652      	mov	r2, sl
 800bfac:	465b      	mov	r3, fp
 800bfae:	4639      	mov	r1, r7
 800bfb0:	f7f7 f880 	bl	80030b4 <__aeabi_dcmplt>
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	d0eb      	beq.n	800bf90 <pow+0x224>
 800bfb8:	2200      	movs	r2, #0
 800bfba:	4b25      	ldr	r3, [pc, #148]	; (800c050 <pow+0x2e4>)
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	f7f6 fe06 	bl	8002bd0 <__aeabi_dmul>
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	460d      	mov	r5, r1
 800bfc8:	ec45 4b10 	vmov	d0, r4, r5
 800bfcc:	f001 fd30 	bl	800da30 <rint>
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	ec53 2b10 	vmov	r2, r3, d0
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	f7f7 f862 	bl	80030a0 <__aeabi_dcmpeq>
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	d1d7      	bne.n	800bf90 <pow+0x224>
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	4b19      	ldr	r3, [pc, #100]	; (800c048 <pow+0x2dc>)
 800bfe4:	e7d2      	b.n	800bf8c <pow+0x220>
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	2300      	movs	r3, #0
 800bfea:	ec51 0b18 	vmov	r0, r1, d8
 800bfee:	f7f7 f857 	bl	80030a0 <__aeabi_dcmpeq>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	f43f af30 	beq.w	800be58 <pow+0xec>
 800bff8:	ec47 6b10 	vmov	d0, r6, r7
 800bffc:	f001 fd06 	bl	800da0c <finite>
 800c000:	2800      	cmp	r0, #0
 800c002:	f43f af29 	beq.w	800be58 <pow+0xec>
 800c006:	ec45 4b10 	vmov	d0, r4, r5
 800c00a:	f001 fcff 	bl	800da0c <finite>
 800c00e:	2800      	cmp	r0, #0
 800c010:	f43f af22 	beq.w	800be58 <pow+0xec>
 800c014:	2304      	movs	r3, #4
 800c016:	9302      	str	r3, [sp, #8]
 800c018:	4b09      	ldr	r3, [pc, #36]	; (800c040 <pow+0x2d4>)
 800c01a:	9303      	str	r3, [sp, #12]
 800c01c:	2300      	movs	r3, #0
 800c01e:	930a      	str	r3, [sp, #40]	; 0x28
 800c020:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c024:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c028:	ed8d 9b08 	vstr	d9, [sp, #32]
 800c02c:	e7b0      	b.n	800bf90 <pow+0x224>
 800c02e:	a802      	add	r0, sp, #8
 800c030:	f001 fcf4 	bl	800da1c <matherr>
 800c034:	2800      	cmp	r0, #0
 800c036:	f47f af07 	bne.w	800be48 <pow+0xdc>
 800c03a:	e7ad      	b.n	800bf98 <pow+0x22c>
 800c03c:	20000884 	.word	0x20000884
 800c040:	0803c3be 	.word	0x0803c3be
 800c044:	3ff00000 	.word	0x3ff00000
 800c048:	fff00000 	.word	0xfff00000
 800c04c:	47efffff 	.word	0x47efffff
 800c050:	3fe00000 	.word	0x3fe00000
 800c054:	c7efffff 	.word	0xc7efffff
 800c058:	7ff00000 	.word	0x7ff00000

0800c05c <sqrt>:
 800c05c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c060:	ed2d 8b02 	vpush	{d8}
 800c064:	b08b      	sub	sp, #44	; 0x2c
 800c066:	ec55 4b10 	vmov	r4, r5, d0
 800c06a:	f001 f83b 	bl	800d0e4 <__ieee754_sqrt>
 800c06e:	4b26      	ldr	r3, [pc, #152]	; (800c108 <sqrt+0xac>)
 800c070:	eeb0 8a40 	vmov.f32	s16, s0
 800c074:	eef0 8a60 	vmov.f32	s17, s1
 800c078:	f993 6000 	ldrsb.w	r6, [r3]
 800c07c:	1c73      	adds	r3, r6, #1
 800c07e:	d02a      	beq.n	800c0d6 <sqrt+0x7a>
 800c080:	4622      	mov	r2, r4
 800c082:	462b      	mov	r3, r5
 800c084:	4620      	mov	r0, r4
 800c086:	4629      	mov	r1, r5
 800c088:	f7f7 f83c 	bl	8003104 <__aeabi_dcmpun>
 800c08c:	4607      	mov	r7, r0
 800c08e:	bb10      	cbnz	r0, 800c0d6 <sqrt+0x7a>
 800c090:	f04f 0800 	mov.w	r8, #0
 800c094:	f04f 0900 	mov.w	r9, #0
 800c098:	4642      	mov	r2, r8
 800c09a:	464b      	mov	r3, r9
 800c09c:	4620      	mov	r0, r4
 800c09e:	4629      	mov	r1, r5
 800c0a0:	f7f7 f808 	bl	80030b4 <__aeabi_dcmplt>
 800c0a4:	b1b8      	cbz	r0, 800c0d6 <sqrt+0x7a>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	9300      	str	r3, [sp, #0]
 800c0aa:	4b18      	ldr	r3, [pc, #96]	; (800c10c <sqrt+0xb0>)
 800c0ac:	9301      	str	r3, [sp, #4]
 800c0ae:	9708      	str	r7, [sp, #32]
 800c0b0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c0b4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c0b8:	b9b6      	cbnz	r6, 800c0e8 <sqrt+0x8c>
 800c0ba:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c0be:	4668      	mov	r0, sp
 800c0c0:	f001 fcac 	bl	800da1c <matherr>
 800c0c4:	b1d0      	cbz	r0, 800c0fc <sqrt+0xa0>
 800c0c6:	9b08      	ldr	r3, [sp, #32]
 800c0c8:	b11b      	cbz	r3, 800c0d2 <sqrt+0x76>
 800c0ca:	f7fd f883 	bl	80091d4 <__errno>
 800c0ce:	9b08      	ldr	r3, [sp, #32]
 800c0d0:	6003      	str	r3, [r0, #0]
 800c0d2:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c0d6:	eeb0 0a48 	vmov.f32	s0, s16
 800c0da:	eef0 0a68 	vmov.f32	s1, s17
 800c0de:	b00b      	add	sp, #44	; 0x2c
 800c0e0:	ecbd 8b02 	vpop	{d8}
 800c0e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0e8:	4642      	mov	r2, r8
 800c0ea:	464b      	mov	r3, r9
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	4649      	mov	r1, r9
 800c0f0:	f7f6 fe98 	bl	8002e24 <__aeabi_ddiv>
 800c0f4:	2e02      	cmp	r6, #2
 800c0f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c0fa:	d1e0      	bne.n	800c0be <sqrt+0x62>
 800c0fc:	f7fd f86a 	bl	80091d4 <__errno>
 800c100:	2321      	movs	r3, #33	; 0x21
 800c102:	6003      	str	r3, [r0, #0]
 800c104:	e7df      	b.n	800c0c6 <sqrt+0x6a>
 800c106:	bf00      	nop
 800c108:	20000884 	.word	0x20000884
 800c10c:	0803c3c2 	.word	0x0803c3c2

0800c110 <expf>:
 800c110:	b530      	push	{r4, r5, lr}
 800c112:	ed2d 8b02 	vpush	{d8}
 800c116:	4d35      	ldr	r5, [pc, #212]	; (800c1ec <expf+0xdc>)
 800c118:	b08b      	sub	sp, #44	; 0x2c
 800c11a:	eeb0 8a40 	vmov.f32	s16, s0
 800c11e:	f001 f891 	bl	800d244 <__ieee754_expf>
 800c122:	f995 3000 	ldrsb.w	r3, [r5]
 800c126:	3301      	adds	r3, #1
 800c128:	ee10 4a10 	vmov	r4, s0
 800c12c:	d030      	beq.n	800c190 <expf+0x80>
 800c12e:	eeb0 0a48 	vmov.f32	s0, s16
 800c132:	f001 feb2 	bl	800de9a <finitef>
 800c136:	b358      	cbz	r0, 800c190 <expf+0x80>
 800c138:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800c1f0 <expf+0xe0>
 800c13c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c144:	dd35      	ble.n	800c1b2 <expf+0xa2>
 800c146:	2303      	movs	r3, #3
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	4b2a      	ldr	r3, [pc, #168]	; (800c1f4 <expf+0xe4>)
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	ee18 0a10 	vmov	r0, s16
 800c152:	2300      	movs	r3, #0
 800c154:	9308      	str	r3, [sp, #32]
 800c156:	f7f6 fce7 	bl	8002b28 <__aeabi_f2d>
 800c15a:	f995 3000 	ldrsb.w	r3, [r5]
 800c15e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c162:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c166:	b9cb      	cbnz	r3, 800c19c <expf+0x8c>
 800c168:	4b23      	ldr	r3, [pc, #140]	; (800c1f8 <expf+0xe8>)
 800c16a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c16e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c172:	4668      	mov	r0, sp
 800c174:	f001 fc52 	bl	800da1c <matherr>
 800c178:	b1b0      	cbz	r0, 800c1a8 <expf+0x98>
 800c17a:	9b08      	ldr	r3, [sp, #32]
 800c17c:	b11b      	cbz	r3, 800c186 <expf+0x76>
 800c17e:	f7fd f829 	bl	80091d4 <__errno>
 800c182:	9b08      	ldr	r3, [sp, #32]
 800c184:	6003      	str	r3, [r0, #0]
 800c186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c18a:	f7f6 fff9 	bl	8003180 <__aeabi_d2f>
 800c18e:	4604      	mov	r4, r0
 800c190:	ee00 4a10 	vmov	s0, r4
 800c194:	b00b      	add	sp, #44	; 0x2c
 800c196:	ecbd 8b02 	vpop	{d8}
 800c19a:	bd30      	pop	{r4, r5, pc}
 800c19c:	4917      	ldr	r1, [pc, #92]	; (800c1fc <expf+0xec>)
 800c19e:	2000      	movs	r0, #0
 800c1a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c1a4:	2b02      	cmp	r3, #2
 800c1a6:	d1e4      	bne.n	800c172 <expf+0x62>
 800c1a8:	f7fd f814 	bl	80091d4 <__errno>
 800c1ac:	2322      	movs	r3, #34	; 0x22
 800c1ae:	6003      	str	r3, [r0, #0]
 800c1b0:	e7e3      	b.n	800c17a <expf+0x6a>
 800c1b2:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c200 <expf+0xf0>
 800c1b6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1be:	d5e7      	bpl.n	800c190 <expf+0x80>
 800c1c0:	2304      	movs	r3, #4
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	4b0b      	ldr	r3, [pc, #44]	; (800c1f4 <expf+0xe4>)
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	ee18 0a10 	vmov	r0, s16
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	9308      	str	r3, [sp, #32]
 800c1d0:	f7f6 fcaa 	bl	8002b28 <__aeabi_f2d>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c1dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1e4:	f995 3000 	ldrsb.w	r3, [r5]
 800c1e8:	e7dc      	b.n	800c1a4 <expf+0x94>
 800c1ea:	bf00      	nop
 800c1ec:	20000884 	.word	0x20000884
 800c1f0:	42b17180 	.word	0x42b17180
 800c1f4:	0803c3c7 	.word	0x0803c3c7
 800c1f8:	47efffff 	.word	0x47efffff
 800c1fc:	7ff00000 	.word	0x7ff00000
 800c200:	c2cff1b5 	.word	0xc2cff1b5

0800c204 <powf>:
 800c204:	b570      	push	{r4, r5, r6, lr}
 800c206:	ed2d 8b04 	vpush	{d8-d9}
 800c20a:	4cb5      	ldr	r4, [pc, #724]	; (800c4e0 <powf+0x2dc>)
 800c20c:	b08a      	sub	sp, #40	; 0x28
 800c20e:	eef0 8a40 	vmov.f32	s17, s0
 800c212:	eeb0 8a60 	vmov.f32	s16, s1
 800c216:	f001 f8e9 	bl	800d3ec <__ieee754_powf>
 800c21a:	f994 5000 	ldrsb.w	r5, [r4]
 800c21e:	1c6b      	adds	r3, r5, #1
 800c220:	eeb0 9a40 	vmov.f32	s18, s0
 800c224:	4626      	mov	r6, r4
 800c226:	d05d      	beq.n	800c2e4 <powf+0xe0>
 800c228:	eeb4 8a48 	vcmp.f32	s16, s16
 800c22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c230:	d658      	bvs.n	800c2e4 <powf+0xe0>
 800c232:	eef4 8a68 	vcmp.f32	s17, s17
 800c236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c23a:	d721      	bvc.n	800c280 <powf+0x7c>
 800c23c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c244:	d14e      	bne.n	800c2e4 <powf+0xe0>
 800c246:	2301      	movs	r3, #1
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	4ba6      	ldr	r3, [pc, #664]	; (800c4e4 <powf+0x2e0>)
 800c24c:	9301      	str	r3, [sp, #4]
 800c24e:	ee18 0a90 	vmov	r0, s17
 800c252:	2300      	movs	r3, #0
 800c254:	9308      	str	r3, [sp, #32]
 800c256:	f7f6 fc67 	bl	8002b28 <__aeabi_f2d>
 800c25a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c25e:	ee18 0a10 	vmov	r0, s16
 800c262:	f7f6 fc61 	bl	8002b28 <__aeabi_f2d>
 800c266:	4ba0      	ldr	r3, [pc, #640]	; (800c4e8 <powf+0x2e4>)
 800c268:	2200      	movs	r2, #0
 800c26a:	2d02      	cmp	r5, #2
 800c26c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c270:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c274:	d030      	beq.n	800c2d8 <powf+0xd4>
 800c276:	4668      	mov	r0, sp
 800c278:	f001 fbd0 	bl	800da1c <matherr>
 800c27c:	bb30      	cbnz	r0, 800c2cc <powf+0xc8>
 800c27e:	e062      	b.n	800c346 <powf+0x142>
 800c280:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c288:	d162      	bne.n	800c350 <powf+0x14c>
 800c28a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c292:	d12d      	bne.n	800c2f0 <powf+0xec>
 800c294:	2301      	movs	r3, #1
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	4b92      	ldr	r3, [pc, #584]	; (800c4e4 <powf+0x2e0>)
 800c29a:	9301      	str	r3, [sp, #4]
 800c29c:	ee18 0a90 	vmov	r0, s17
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	9308      	str	r3, [sp, #32]
 800c2a4:	f7f6 fc40 	bl	8002b28 <__aeabi_f2d>
 800c2a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2ac:	ee18 0a10 	vmov	r0, s16
 800c2b0:	f7f6 fc3a 	bl	8002b28 <__aeabi_f2d>
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c2c0:	2d00      	cmp	r5, #0
 800c2c2:	d0d8      	beq.n	800c276 <powf+0x72>
 800c2c4:	4b88      	ldr	r3, [pc, #544]	; (800c4e8 <powf+0x2e4>)
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c2cc:	9b08      	ldr	r3, [sp, #32]
 800c2ce:	b11b      	cbz	r3, 800c2d8 <powf+0xd4>
 800c2d0:	f7fc ff80 	bl	80091d4 <__errno>
 800c2d4:	9b08      	ldr	r3, [sp, #32]
 800c2d6:	6003      	str	r3, [r0, #0]
 800c2d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2dc:	f7f6 ff50 	bl	8003180 <__aeabi_d2f>
 800c2e0:	ee09 0a10 	vmov	s18, r0
 800c2e4:	eeb0 0a49 	vmov.f32	s0, s18
 800c2e8:	b00a      	add	sp, #40	; 0x28
 800c2ea:	ecbd 8b04 	vpop	{d8-d9}
 800c2ee:	bd70      	pop	{r4, r5, r6, pc}
 800c2f0:	eeb0 0a48 	vmov.f32	s0, s16
 800c2f4:	f001 fdd1 	bl	800de9a <finitef>
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d0f3      	beq.n	800c2e4 <powf+0xe0>
 800c2fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c304:	d5ee      	bpl.n	800c2e4 <powf+0xe0>
 800c306:	2301      	movs	r3, #1
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	4b76      	ldr	r3, [pc, #472]	; (800c4e4 <powf+0x2e0>)
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	ee18 0a90 	vmov	r0, s17
 800c312:	2300      	movs	r3, #0
 800c314:	9308      	str	r3, [sp, #32]
 800c316:	f7f6 fc07 	bl	8002b28 <__aeabi_f2d>
 800c31a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c31e:	ee18 0a10 	vmov	r0, s16
 800c322:	f7f6 fc01 	bl	8002b28 <__aeabi_f2d>
 800c326:	f994 3000 	ldrsb.w	r3, [r4]
 800c32a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c32e:	b923      	cbnz	r3, 800c33a <powf+0x136>
 800c330:	2200      	movs	r2, #0
 800c332:	2300      	movs	r3, #0
 800c334:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c338:	e79d      	b.n	800c276 <powf+0x72>
 800c33a:	496c      	ldr	r1, [pc, #432]	; (800c4ec <powf+0x2e8>)
 800c33c:	2000      	movs	r0, #0
 800c33e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c342:	2b02      	cmp	r3, #2
 800c344:	d197      	bne.n	800c276 <powf+0x72>
 800c346:	f7fc ff45 	bl	80091d4 <__errno>
 800c34a:	2321      	movs	r3, #33	; 0x21
 800c34c:	6003      	str	r3, [r0, #0]
 800c34e:	e7bd      	b.n	800c2cc <powf+0xc8>
 800c350:	f001 fda3 	bl	800de9a <finitef>
 800c354:	4605      	mov	r5, r0
 800c356:	2800      	cmp	r0, #0
 800c358:	f040 8091 	bne.w	800c47e <powf+0x27a>
 800c35c:	eeb0 0a68 	vmov.f32	s0, s17
 800c360:	f001 fd9b 	bl	800de9a <finitef>
 800c364:	2800      	cmp	r0, #0
 800c366:	f000 808a 	beq.w	800c47e <powf+0x27a>
 800c36a:	eeb0 0a48 	vmov.f32	s0, s16
 800c36e:	f001 fd94 	bl	800de9a <finitef>
 800c372:	2800      	cmp	r0, #0
 800c374:	f000 8083 	beq.w	800c47e <powf+0x27a>
 800c378:	eeb4 9a49 	vcmp.f32	s18, s18
 800c37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c380:	f994 4000 	ldrsb.w	r4, [r4]
 800c384:	4b57      	ldr	r3, [pc, #348]	; (800c4e4 <powf+0x2e0>)
 800c386:	d71b      	bvc.n	800c3c0 <powf+0x1bc>
 800c388:	2201      	movs	r2, #1
 800c38a:	ee18 0a90 	vmov	r0, s17
 800c38e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c392:	9508      	str	r5, [sp, #32]
 800c394:	f7f6 fbc8 	bl	8002b28 <__aeabi_f2d>
 800c398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c39c:	ee18 0a10 	vmov	r0, s16
 800c3a0:	f7f6 fbc2 	bl	8002b28 <__aeabi_f2d>
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2c00      	cmp	r4, #0
 800c3ae:	d0c1      	beq.n	800c334 <powf+0x130>
 800c3b0:	4610      	mov	r0, r2
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	f7f6 fd36 	bl	8002e24 <__aeabi_ddiv>
 800c3b8:	2c02      	cmp	r4, #2
 800c3ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c3be:	e7c1      	b.n	800c344 <powf+0x140>
 800c3c0:	2203      	movs	r2, #3
 800c3c2:	ee18 0a90 	vmov	r0, s17
 800c3c6:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c3ca:	9508      	str	r5, [sp, #32]
 800c3cc:	f7f6 fbac 	bl	8002b28 <__aeabi_f2d>
 800c3d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3d4:	ee18 0a10 	vmov	r0, s16
 800c3d8:	f7f6 fba6 	bl	8002b28 <__aeabi_f2d>
 800c3dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3e0:	bb5c      	cbnz	r4, 800c43a <powf+0x236>
 800c3e2:	4b43      	ldr	r3, [pc, #268]	; (800c4f0 <powf+0x2ec>)
 800c3e4:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c3e8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3f4:	d56c      	bpl.n	800c4d0 <powf+0x2cc>
 800c3f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c3fa:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c3fe:	ee17 0a90 	vmov	r0, s15
 800c402:	f7f6 fb91 	bl	8002b28 <__aeabi_f2d>
 800c406:	4604      	mov	r4, r0
 800c408:	460d      	mov	r5, r1
 800c40a:	ec45 4b10 	vmov	d0, r4, r5
 800c40e:	f001 fb0f 	bl	800da30 <rint>
 800c412:	4620      	mov	r0, r4
 800c414:	ec53 2b10 	vmov	r2, r3, d0
 800c418:	4629      	mov	r1, r5
 800c41a:	f7f6 fe41 	bl	80030a0 <__aeabi_dcmpeq>
 800c41e:	b920      	cbnz	r0, 800c42a <powf+0x226>
 800c420:	4b34      	ldr	r3, [pc, #208]	; (800c4f4 <powf+0x2f0>)
 800c422:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c426:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c42a:	f996 3000 	ldrsb.w	r3, [r6]
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d14e      	bne.n	800c4d0 <powf+0x2cc>
 800c432:	f7fc fecf 	bl	80091d4 <__errno>
 800c436:	2322      	movs	r3, #34	; 0x22
 800c438:	e788      	b.n	800c34c <powf+0x148>
 800c43a:	4b2f      	ldr	r3, [pc, #188]	; (800c4f8 <powf+0x2f4>)
 800c43c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c440:	2200      	movs	r2, #0
 800c442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c446:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c44a:	d5ee      	bpl.n	800c42a <powf+0x226>
 800c44c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c450:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c454:	ee17 0a90 	vmov	r0, s15
 800c458:	f7f6 fb66 	bl	8002b28 <__aeabi_f2d>
 800c45c:	4604      	mov	r4, r0
 800c45e:	460d      	mov	r5, r1
 800c460:	ec45 4b10 	vmov	d0, r4, r5
 800c464:	f001 fae4 	bl	800da30 <rint>
 800c468:	4620      	mov	r0, r4
 800c46a:	ec53 2b10 	vmov	r2, r3, d0
 800c46e:	4629      	mov	r1, r5
 800c470:	f7f6 fe16 	bl	80030a0 <__aeabi_dcmpeq>
 800c474:	2800      	cmp	r0, #0
 800c476:	d1d8      	bne.n	800c42a <powf+0x226>
 800c478:	2200      	movs	r2, #0
 800c47a:	4b1c      	ldr	r3, [pc, #112]	; (800c4ec <powf+0x2e8>)
 800c47c:	e7d3      	b.n	800c426 <powf+0x222>
 800c47e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c486:	f47f af2d 	bne.w	800c2e4 <powf+0xe0>
 800c48a:	eeb0 0a68 	vmov.f32	s0, s17
 800c48e:	f001 fd04 	bl	800de9a <finitef>
 800c492:	2800      	cmp	r0, #0
 800c494:	f43f af26 	beq.w	800c2e4 <powf+0xe0>
 800c498:	eeb0 0a48 	vmov.f32	s0, s16
 800c49c:	f001 fcfd 	bl	800de9a <finitef>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	f43f af1f 	beq.w	800c2e4 <powf+0xe0>
 800c4a6:	2304      	movs	r3, #4
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	4b0e      	ldr	r3, [pc, #56]	; (800c4e4 <powf+0x2e0>)
 800c4ac:	9301      	str	r3, [sp, #4]
 800c4ae:	ee18 0a90 	vmov	r0, s17
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	9308      	str	r3, [sp, #32]
 800c4b6:	f7f6 fb37 	bl	8002b28 <__aeabi_f2d>
 800c4ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4be:	ee18 0a10 	vmov	r0, s16
 800c4c2:	f7f6 fb31 	bl	8002b28 <__aeabi_f2d>
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	e7aa      	b.n	800c426 <powf+0x222>
 800c4d0:	4668      	mov	r0, sp
 800c4d2:	f001 faa3 	bl	800da1c <matherr>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	f47f aef8 	bne.w	800c2cc <powf+0xc8>
 800c4dc:	e7a9      	b.n	800c432 <powf+0x22e>
 800c4de:	bf00      	nop
 800c4e0:	20000884 	.word	0x20000884
 800c4e4:	0803c3cc 	.word	0x0803c3cc
 800c4e8:	3ff00000 	.word	0x3ff00000
 800c4ec:	fff00000 	.word	0xfff00000
 800c4f0:	47efffff 	.word	0x47efffff
 800c4f4:	c7efffff 	.word	0xc7efffff
 800c4f8:	7ff00000 	.word	0x7ff00000

0800c4fc <sqrtf>:
 800c4fc:	b510      	push	{r4, lr}
 800c4fe:	ed2d 8b02 	vpush	{d8}
 800c502:	b08a      	sub	sp, #40	; 0x28
 800c504:	eeb0 8a40 	vmov.f32	s16, s0
 800c508:	f001 fa32 	bl	800d970 <__ieee754_sqrtf>
 800c50c:	4b21      	ldr	r3, [pc, #132]	; (800c594 <sqrtf+0x98>)
 800c50e:	f993 4000 	ldrsb.w	r4, [r3]
 800c512:	1c63      	adds	r3, r4, #1
 800c514:	d02c      	beq.n	800c570 <sqrtf+0x74>
 800c516:	eeb4 8a48 	vcmp.f32	s16, s16
 800c51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51e:	d627      	bvs.n	800c570 <sqrtf+0x74>
 800c520:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c528:	d522      	bpl.n	800c570 <sqrtf+0x74>
 800c52a:	2301      	movs	r3, #1
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	4b1a      	ldr	r3, [pc, #104]	; (800c598 <sqrtf+0x9c>)
 800c530:	9301      	str	r3, [sp, #4]
 800c532:	ee18 0a10 	vmov	r0, s16
 800c536:	2300      	movs	r3, #0
 800c538:	9308      	str	r3, [sp, #32]
 800c53a:	f7f6 faf5 	bl	8002b28 <__aeabi_f2d>
 800c53e:	2200      	movs	r2, #0
 800c540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c548:	2300      	movs	r3, #0
 800c54a:	b9ac      	cbnz	r4, 800c578 <sqrtf+0x7c>
 800c54c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c550:	4668      	mov	r0, sp
 800c552:	f001 fa63 	bl	800da1c <matherr>
 800c556:	b1b8      	cbz	r0, 800c588 <sqrtf+0x8c>
 800c558:	9b08      	ldr	r3, [sp, #32]
 800c55a:	b11b      	cbz	r3, 800c564 <sqrtf+0x68>
 800c55c:	f7fc fe3a 	bl	80091d4 <__errno>
 800c560:	9b08      	ldr	r3, [sp, #32]
 800c562:	6003      	str	r3, [r0, #0]
 800c564:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c568:	f7f6 fe0a 	bl	8003180 <__aeabi_d2f>
 800c56c:	ee00 0a10 	vmov	s0, r0
 800c570:	b00a      	add	sp, #40	; 0x28
 800c572:	ecbd 8b02 	vpop	{d8}
 800c576:	bd10      	pop	{r4, pc}
 800c578:	4610      	mov	r0, r2
 800c57a:	4619      	mov	r1, r3
 800c57c:	f7f6 fc52 	bl	8002e24 <__aeabi_ddiv>
 800c580:	2c02      	cmp	r4, #2
 800c582:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c586:	d1e3      	bne.n	800c550 <sqrtf+0x54>
 800c588:	f7fc fe24 	bl	80091d4 <__errno>
 800c58c:	2321      	movs	r3, #33	; 0x21
 800c58e:	6003      	str	r3, [r0, #0]
 800c590:	e7e2      	b.n	800c558 <sqrtf+0x5c>
 800c592:	bf00      	nop
 800c594:	20000884 	.word	0x20000884
 800c598:	0803c3d1 	.word	0x0803c3d1
 800c59c:	00000000 	.word	0x00000000

0800c5a0 <__ieee754_log10>:
 800c5a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5a4:	ec55 4b10 	vmov	r4, r5, d0
 800c5a8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800c5ac:	ee10 2a10 	vmov	r2, s0
 800c5b0:	462b      	mov	r3, r5
 800c5b2:	da30      	bge.n	800c616 <__ieee754_log10+0x76>
 800c5b4:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 800c5b8:	430a      	orrs	r2, r1
 800c5ba:	d10a      	bne.n	800c5d2 <__ieee754_log10+0x32>
 800c5bc:	493c      	ldr	r1, [pc, #240]	; (800c6b0 <__ieee754_log10+0x110>)
 800c5be:	2200      	movs	r2, #0
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	f7f6 fc2e 	bl	8002e24 <__aeabi_ddiv>
 800c5c8:	ec41 0b10 	vmov	d0, r0, r1
 800c5cc:	b003      	add	sp, #12
 800c5ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5d2:	2d00      	cmp	r5, #0
 800c5d4:	da09      	bge.n	800c5ea <__ieee754_log10+0x4a>
 800c5d6:	ee10 2a10 	vmov	r2, s0
 800c5da:	462b      	mov	r3, r5
 800c5dc:	4620      	mov	r0, r4
 800c5de:	4629      	mov	r1, r5
 800c5e0:	f7f6 f942 	bl	8002868 <__aeabi_dsub>
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	e7ec      	b.n	800c5c4 <__ieee754_log10+0x24>
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	4b31      	ldr	r3, [pc, #196]	; (800c6b4 <__ieee754_log10+0x114>)
 800c5ee:	4629      	mov	r1, r5
 800c5f0:	ee10 0a10 	vmov	r0, s0
 800c5f4:	f7f6 faec 	bl	8002bd0 <__aeabi_dmul>
 800c5f8:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	460d      	mov	r5, r1
 800c600:	460b      	mov	r3, r1
 800c602:	492d      	ldr	r1, [pc, #180]	; (800c6b8 <__ieee754_log10+0x118>)
 800c604:	428b      	cmp	r3, r1
 800c606:	dd08      	ble.n	800c61a <__ieee754_log10+0x7a>
 800c608:	4622      	mov	r2, r4
 800c60a:	462b      	mov	r3, r5
 800c60c:	4620      	mov	r0, r4
 800c60e:	4629      	mov	r1, r5
 800c610:	f7f6 f92c 	bl	800286c <__adddf3>
 800c614:	e7d8      	b.n	800c5c8 <__ieee754_log10+0x28>
 800c616:	2200      	movs	r2, #0
 800c618:	e7f3      	b.n	800c602 <__ieee754_log10+0x62>
 800c61a:	1518      	asrs	r0, r3, #20
 800c61c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800c620:	4410      	add	r0, r2
 800c622:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800c626:	4448      	add	r0, r9
 800c628:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800c62c:	f7f6 fa6a 	bl	8002b04 <__aeabi_i2d>
 800c630:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800c634:	3303      	adds	r3, #3
 800c636:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800c63a:	ec45 4b10 	vmov	d0, r4, r5
 800c63e:	4606      	mov	r6, r0
 800c640:	460f      	mov	r7, r1
 800c642:	f001 fc9d 	bl	800df80 <__ieee754_log>
 800c646:	a314      	add	r3, pc, #80	; (adr r3, 800c698 <__ieee754_log10+0xf8>)
 800c648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64c:	4630      	mov	r0, r6
 800c64e:	4639      	mov	r1, r7
 800c650:	ed8d 0b00 	vstr	d0, [sp]
 800c654:	f7f6 fabc 	bl	8002bd0 <__aeabi_dmul>
 800c658:	ed9d 0b00 	vldr	d0, [sp]
 800c65c:	4604      	mov	r4, r0
 800c65e:	460d      	mov	r5, r1
 800c660:	a30f      	add	r3, pc, #60	; (adr r3, 800c6a0 <__ieee754_log10+0x100>)
 800c662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c666:	ec51 0b10 	vmov	r0, r1, d0
 800c66a:	f7f6 fab1 	bl	8002bd0 <__aeabi_dmul>
 800c66e:	4602      	mov	r2, r0
 800c670:	460b      	mov	r3, r1
 800c672:	4620      	mov	r0, r4
 800c674:	4629      	mov	r1, r5
 800c676:	f7f6 f8f9 	bl	800286c <__adddf3>
 800c67a:	a30b      	add	r3, pc, #44	; (adr r3, 800c6a8 <__ieee754_log10+0x108>)
 800c67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c680:	4604      	mov	r4, r0
 800c682:	460d      	mov	r5, r1
 800c684:	4630      	mov	r0, r6
 800c686:	4639      	mov	r1, r7
 800c688:	f7f6 faa2 	bl	8002bd0 <__aeabi_dmul>
 800c68c:	4602      	mov	r2, r0
 800c68e:	460b      	mov	r3, r1
 800c690:	4620      	mov	r0, r4
 800c692:	4629      	mov	r1, r5
 800c694:	e7bc      	b.n	800c610 <__ieee754_log10+0x70>
 800c696:	bf00      	nop
 800c698:	11f12b36 	.word	0x11f12b36
 800c69c:	3d59fef3 	.word	0x3d59fef3
 800c6a0:	1526e50e 	.word	0x1526e50e
 800c6a4:	3fdbcb7b 	.word	0x3fdbcb7b
 800c6a8:	509f6000 	.word	0x509f6000
 800c6ac:	3fd34413 	.word	0x3fd34413
 800c6b0:	c3500000 	.word	0xc3500000
 800c6b4:	43500000 	.word	0x43500000
 800c6b8:	7fefffff 	.word	0x7fefffff
 800c6bc:	00000000 	.word	0x00000000

0800c6c0 <__ieee754_pow>:
 800c6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c4:	b091      	sub	sp, #68	; 0x44
 800c6c6:	ed8d 1b00 	vstr	d1, [sp]
 800c6ca:	e89d 0204 	ldmia.w	sp, {r2, r9}
 800c6ce:	ec57 6b10 	vmov	r6, r7, d0
 800c6d2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c6d6:	ea58 0302 	orrs.w	r3, r8, r2
 800c6da:	ee10 aa10 	vmov	sl, s0
 800c6de:	463d      	mov	r5, r7
 800c6e0:	f000 84bd 	beq.w	800d05e <__ieee754_pow+0x99e>
 800c6e4:	4b78      	ldr	r3, [pc, #480]	; (800c8c8 <__ieee754_pow+0x208>)
 800c6e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c6ea:	429c      	cmp	r4, r3
 800c6ec:	dc09      	bgt.n	800c702 <__ieee754_pow+0x42>
 800c6ee:	d103      	bne.n	800c6f8 <__ieee754_pow+0x38>
 800c6f0:	b93e      	cbnz	r6, 800c702 <__ieee754_pow+0x42>
 800c6f2:	45a0      	cmp	r8, r4
 800c6f4:	dc0d      	bgt.n	800c712 <__ieee754_pow+0x52>
 800c6f6:	e001      	b.n	800c6fc <__ieee754_pow+0x3c>
 800c6f8:	4598      	cmp	r8, r3
 800c6fa:	dc02      	bgt.n	800c702 <__ieee754_pow+0x42>
 800c6fc:	4598      	cmp	r8, r3
 800c6fe:	d10e      	bne.n	800c71e <__ieee754_pow+0x5e>
 800c700:	b16a      	cbz	r2, 800c71e <__ieee754_pow+0x5e>
 800c702:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c706:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c70a:	ea54 030a 	orrs.w	r3, r4, sl
 800c70e:	f000 84a6 	beq.w	800d05e <__ieee754_pow+0x99e>
 800c712:	486e      	ldr	r0, [pc, #440]	; (800c8cc <__ieee754_pow+0x20c>)
 800c714:	b011      	add	sp, #68	; 0x44
 800c716:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71a:	f001 b981 	b.w	800da20 <nan>
 800c71e:	2d00      	cmp	r5, #0
 800c720:	da53      	bge.n	800c7ca <__ieee754_pow+0x10a>
 800c722:	4b6b      	ldr	r3, [pc, #428]	; (800c8d0 <__ieee754_pow+0x210>)
 800c724:	4598      	cmp	r8, r3
 800c726:	dc4d      	bgt.n	800c7c4 <__ieee754_pow+0x104>
 800c728:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c72c:	4598      	cmp	r8, r3
 800c72e:	dd4c      	ble.n	800c7ca <__ieee754_pow+0x10a>
 800c730:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c734:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c738:	2b14      	cmp	r3, #20
 800c73a:	dd26      	ble.n	800c78a <__ieee754_pow+0xca>
 800c73c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c740:	fa22 f103 	lsr.w	r1, r2, r3
 800c744:	fa01 f303 	lsl.w	r3, r1, r3
 800c748:	429a      	cmp	r2, r3
 800c74a:	d13e      	bne.n	800c7ca <__ieee754_pow+0x10a>
 800c74c:	f001 0101 	and.w	r1, r1, #1
 800c750:	f1c1 0b02 	rsb	fp, r1, #2
 800c754:	2a00      	cmp	r2, #0
 800c756:	d15b      	bne.n	800c810 <__ieee754_pow+0x150>
 800c758:	4b5b      	ldr	r3, [pc, #364]	; (800c8c8 <__ieee754_pow+0x208>)
 800c75a:	4598      	cmp	r8, r3
 800c75c:	d124      	bne.n	800c7a8 <__ieee754_pow+0xe8>
 800c75e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c762:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c766:	ea53 030a 	orrs.w	r3, r3, sl
 800c76a:	f000 8478 	beq.w	800d05e <__ieee754_pow+0x99e>
 800c76e:	4b59      	ldr	r3, [pc, #356]	; (800c8d4 <__ieee754_pow+0x214>)
 800c770:	429c      	cmp	r4, r3
 800c772:	dd2d      	ble.n	800c7d0 <__ieee754_pow+0x110>
 800c774:	f1b9 0f00 	cmp.w	r9, #0
 800c778:	f280 8475 	bge.w	800d066 <__ieee754_pow+0x9a6>
 800c77c:	2000      	movs	r0, #0
 800c77e:	2100      	movs	r1, #0
 800c780:	ec41 0b10 	vmov	d0, r0, r1
 800c784:	b011      	add	sp, #68	; 0x44
 800c786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c78a:	2a00      	cmp	r2, #0
 800c78c:	d13e      	bne.n	800c80c <__ieee754_pow+0x14c>
 800c78e:	f1c3 0314 	rsb	r3, r3, #20
 800c792:	fa48 f103 	asr.w	r1, r8, r3
 800c796:	fa01 f303 	lsl.w	r3, r1, r3
 800c79a:	4598      	cmp	r8, r3
 800c79c:	f040 846b 	bne.w	800d076 <__ieee754_pow+0x9b6>
 800c7a0:	f001 0101 	and.w	r1, r1, #1
 800c7a4:	f1c1 0b02 	rsb	fp, r1, #2
 800c7a8:	4b4b      	ldr	r3, [pc, #300]	; (800c8d8 <__ieee754_pow+0x218>)
 800c7aa:	4598      	cmp	r8, r3
 800c7ac:	d118      	bne.n	800c7e0 <__ieee754_pow+0x120>
 800c7ae:	f1b9 0f00 	cmp.w	r9, #0
 800c7b2:	f280 845c 	bge.w	800d06e <__ieee754_pow+0x9ae>
 800c7b6:	4948      	ldr	r1, [pc, #288]	; (800c8d8 <__ieee754_pow+0x218>)
 800c7b8:	4632      	mov	r2, r6
 800c7ba:	463b      	mov	r3, r7
 800c7bc:	2000      	movs	r0, #0
 800c7be:	f7f6 fb31 	bl	8002e24 <__aeabi_ddiv>
 800c7c2:	e7dd      	b.n	800c780 <__ieee754_pow+0xc0>
 800c7c4:	f04f 0b02 	mov.w	fp, #2
 800c7c8:	e7c4      	b.n	800c754 <__ieee754_pow+0x94>
 800c7ca:	f04f 0b00 	mov.w	fp, #0
 800c7ce:	e7c1      	b.n	800c754 <__ieee754_pow+0x94>
 800c7d0:	f1b9 0f00 	cmp.w	r9, #0
 800c7d4:	dad2      	bge.n	800c77c <__ieee754_pow+0xbc>
 800c7d6:	e89d 0009 	ldmia.w	sp, {r0, r3}
 800c7da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c7de:	e7cf      	b.n	800c780 <__ieee754_pow+0xc0>
 800c7e0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c7e4:	d106      	bne.n	800c7f4 <__ieee754_pow+0x134>
 800c7e6:	4632      	mov	r2, r6
 800c7e8:	463b      	mov	r3, r7
 800c7ea:	4610      	mov	r0, r2
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	f7f6 f9ef 	bl	8002bd0 <__aeabi_dmul>
 800c7f2:	e7c5      	b.n	800c780 <__ieee754_pow+0xc0>
 800c7f4:	4b39      	ldr	r3, [pc, #228]	; (800c8dc <__ieee754_pow+0x21c>)
 800c7f6:	4599      	cmp	r9, r3
 800c7f8:	d10a      	bne.n	800c810 <__ieee754_pow+0x150>
 800c7fa:	2d00      	cmp	r5, #0
 800c7fc:	db08      	blt.n	800c810 <__ieee754_pow+0x150>
 800c7fe:	ec47 6b10 	vmov	d0, r6, r7
 800c802:	b011      	add	sp, #68	; 0x44
 800c804:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c808:	f000 bc6c 	b.w	800d0e4 <__ieee754_sqrt>
 800c80c:	f04f 0b00 	mov.w	fp, #0
 800c810:	ec47 6b10 	vmov	d0, r6, r7
 800c814:	f001 f8f3 	bl	800d9fe <fabs>
 800c818:	ec51 0b10 	vmov	r0, r1, d0
 800c81c:	f1ba 0f00 	cmp.w	sl, #0
 800c820:	d127      	bne.n	800c872 <__ieee754_pow+0x1b2>
 800c822:	b124      	cbz	r4, 800c82e <__ieee754_pow+0x16e>
 800c824:	4b2c      	ldr	r3, [pc, #176]	; (800c8d8 <__ieee754_pow+0x218>)
 800c826:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d121      	bne.n	800c872 <__ieee754_pow+0x1b2>
 800c82e:	f1b9 0f00 	cmp.w	r9, #0
 800c832:	da05      	bge.n	800c840 <__ieee754_pow+0x180>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	2000      	movs	r0, #0
 800c83a:	4927      	ldr	r1, [pc, #156]	; (800c8d8 <__ieee754_pow+0x218>)
 800c83c:	f7f6 faf2 	bl	8002e24 <__aeabi_ddiv>
 800c840:	2d00      	cmp	r5, #0
 800c842:	da9d      	bge.n	800c780 <__ieee754_pow+0xc0>
 800c844:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c848:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c84c:	ea54 030b 	orrs.w	r3, r4, fp
 800c850:	d108      	bne.n	800c864 <__ieee754_pow+0x1a4>
 800c852:	4602      	mov	r2, r0
 800c854:	460b      	mov	r3, r1
 800c856:	4610      	mov	r0, r2
 800c858:	4619      	mov	r1, r3
 800c85a:	f7f6 f805 	bl	8002868 <__aeabi_dsub>
 800c85e:	4602      	mov	r2, r0
 800c860:	460b      	mov	r3, r1
 800c862:	e7ac      	b.n	800c7be <__ieee754_pow+0xfe>
 800c864:	f1bb 0f01 	cmp.w	fp, #1
 800c868:	d18a      	bne.n	800c780 <__ieee754_pow+0xc0>
 800c86a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c86e:	4619      	mov	r1, r3
 800c870:	e786      	b.n	800c780 <__ieee754_pow+0xc0>
 800c872:	0fed      	lsrs	r5, r5, #31
 800c874:	1e6b      	subs	r3, r5, #1
 800c876:	930d      	str	r3, [sp, #52]	; 0x34
 800c878:	ea5b 0303 	orrs.w	r3, fp, r3
 800c87c:	d102      	bne.n	800c884 <__ieee754_pow+0x1c4>
 800c87e:	4632      	mov	r2, r6
 800c880:	463b      	mov	r3, r7
 800c882:	e7e8      	b.n	800c856 <__ieee754_pow+0x196>
 800c884:	4b16      	ldr	r3, [pc, #88]	; (800c8e0 <__ieee754_pow+0x220>)
 800c886:	4598      	cmp	r8, r3
 800c888:	f340 80fe 	ble.w	800ca88 <__ieee754_pow+0x3c8>
 800c88c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c890:	4598      	cmp	r8, r3
 800c892:	dd0a      	ble.n	800c8aa <__ieee754_pow+0x1ea>
 800c894:	4b0f      	ldr	r3, [pc, #60]	; (800c8d4 <__ieee754_pow+0x214>)
 800c896:	429c      	cmp	r4, r3
 800c898:	dc0d      	bgt.n	800c8b6 <__ieee754_pow+0x1f6>
 800c89a:	f1b9 0f00 	cmp.w	r9, #0
 800c89e:	f6bf af6d 	bge.w	800c77c <__ieee754_pow+0xbc>
 800c8a2:	a307      	add	r3, pc, #28	; (adr r3, 800c8c0 <__ieee754_pow+0x200>)
 800c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a8:	e79f      	b.n	800c7ea <__ieee754_pow+0x12a>
 800c8aa:	4b0e      	ldr	r3, [pc, #56]	; (800c8e4 <__ieee754_pow+0x224>)
 800c8ac:	429c      	cmp	r4, r3
 800c8ae:	ddf4      	ble.n	800c89a <__ieee754_pow+0x1da>
 800c8b0:	4b09      	ldr	r3, [pc, #36]	; (800c8d8 <__ieee754_pow+0x218>)
 800c8b2:	429c      	cmp	r4, r3
 800c8b4:	dd18      	ble.n	800c8e8 <__ieee754_pow+0x228>
 800c8b6:	f1b9 0f00 	cmp.w	r9, #0
 800c8ba:	dcf2      	bgt.n	800c8a2 <__ieee754_pow+0x1e2>
 800c8bc:	e75e      	b.n	800c77c <__ieee754_pow+0xbc>
 800c8be:	bf00      	nop
 800c8c0:	8800759c 	.word	0x8800759c
 800c8c4:	7e37e43c 	.word	0x7e37e43c
 800c8c8:	7ff00000 	.word	0x7ff00000
 800c8cc:	08028453 	.word	0x08028453
 800c8d0:	433fffff 	.word	0x433fffff
 800c8d4:	3fefffff 	.word	0x3fefffff
 800c8d8:	3ff00000 	.word	0x3ff00000
 800c8dc:	3fe00000 	.word	0x3fe00000
 800c8e0:	41e00000 	.word	0x41e00000
 800c8e4:	3feffffe 	.word	0x3feffffe
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	4b63      	ldr	r3, [pc, #396]	; (800ca78 <__ieee754_pow+0x3b8>)
 800c8ec:	f7f5 ffbc 	bl	8002868 <__aeabi_dsub>
 800c8f0:	a355      	add	r3, pc, #340	; (adr r3, 800ca48 <__ieee754_pow+0x388>)
 800c8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	460d      	mov	r5, r1
 800c8fa:	f7f6 f969 	bl	8002bd0 <__aeabi_dmul>
 800c8fe:	a354      	add	r3, pc, #336	; (adr r3, 800ca50 <__ieee754_pow+0x390>)
 800c900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c904:	4606      	mov	r6, r0
 800c906:	460f      	mov	r7, r1
 800c908:	4620      	mov	r0, r4
 800c90a:	4629      	mov	r1, r5
 800c90c:	f7f6 f960 	bl	8002bd0 <__aeabi_dmul>
 800c910:	2200      	movs	r2, #0
 800c912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c916:	4b59      	ldr	r3, [pc, #356]	; (800ca7c <__ieee754_pow+0x3bc>)
 800c918:	4620      	mov	r0, r4
 800c91a:	4629      	mov	r1, r5
 800c91c:	f7f6 f958 	bl	8002bd0 <__aeabi_dmul>
 800c920:	4602      	mov	r2, r0
 800c922:	460b      	mov	r3, r1
 800c924:	a14c      	add	r1, pc, #304	; (adr r1, 800ca58 <__ieee754_pow+0x398>)
 800c926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c92a:	f7f5 ff9d 	bl	8002868 <__aeabi_dsub>
 800c92e:	4622      	mov	r2, r4
 800c930:	462b      	mov	r3, r5
 800c932:	f7f6 f94d 	bl	8002bd0 <__aeabi_dmul>
 800c936:	4602      	mov	r2, r0
 800c938:	460b      	mov	r3, r1
 800c93a:	2000      	movs	r0, #0
 800c93c:	4950      	ldr	r1, [pc, #320]	; (800ca80 <__ieee754_pow+0x3c0>)
 800c93e:	f7f5 ff93 	bl	8002868 <__aeabi_dsub>
 800c942:	4622      	mov	r2, r4
 800c944:	462b      	mov	r3, r5
 800c946:	4680      	mov	r8, r0
 800c948:	4689      	mov	r9, r1
 800c94a:	4620      	mov	r0, r4
 800c94c:	4629      	mov	r1, r5
 800c94e:	f7f6 f93f 	bl	8002bd0 <__aeabi_dmul>
 800c952:	4602      	mov	r2, r0
 800c954:	460b      	mov	r3, r1
 800c956:	4640      	mov	r0, r8
 800c958:	4649      	mov	r1, r9
 800c95a:	f7f6 f939 	bl	8002bd0 <__aeabi_dmul>
 800c95e:	a340      	add	r3, pc, #256	; (adr r3, 800ca60 <__ieee754_pow+0x3a0>)
 800c960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c964:	f7f6 f934 	bl	8002bd0 <__aeabi_dmul>
 800c968:	4602      	mov	r2, r0
 800c96a:	460b      	mov	r3, r1
 800c96c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c970:	f7f5 ff7a 	bl	8002868 <__aeabi_dsub>
 800c974:	4602      	mov	r2, r0
 800c976:	460b      	mov	r3, r1
 800c978:	4604      	mov	r4, r0
 800c97a:	460d      	mov	r5, r1
 800c97c:	4630      	mov	r0, r6
 800c97e:	4639      	mov	r1, r7
 800c980:	f7f5 ff74 	bl	800286c <__adddf3>
 800c984:	2000      	movs	r0, #0
 800c986:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c98a:	4632      	mov	r2, r6
 800c98c:	463b      	mov	r3, r7
 800c98e:	f7f5 ff6b 	bl	8002868 <__aeabi_dsub>
 800c992:	4602      	mov	r2, r0
 800c994:	460b      	mov	r3, r1
 800c996:	4620      	mov	r0, r4
 800c998:	4629      	mov	r1, r5
 800c99a:	f7f5 ff65 	bl	8002868 <__aeabi_dsub>
 800c99e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9a0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460f      	mov	r7, r1
 800c9aa:	f040 81eb 	bne.w	800cd84 <__ieee754_pow+0x6c4>
 800c9ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800ca68 <__ieee754_pow+0x3a8>
 800c9b2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800c9b6:	2400      	movs	r4, #0
 800c9b8:	4622      	mov	r2, r4
 800c9ba:	462b      	mov	r3, r5
 800c9bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c9c4:	f7f5 ff50 	bl	8002868 <__aeabi_dsub>
 800c9c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9cc:	f7f6 f900 	bl	8002bd0 <__aeabi_dmul>
 800c9d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9d4:	4680      	mov	r8, r0
 800c9d6:	4689      	mov	r9, r1
 800c9d8:	4630      	mov	r0, r6
 800c9da:	4639      	mov	r1, r7
 800c9dc:	f7f6 f8f8 	bl	8002bd0 <__aeabi_dmul>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	4640      	mov	r0, r8
 800c9e6:	4649      	mov	r1, r9
 800c9e8:	f7f5 ff40 	bl	800286c <__adddf3>
 800c9ec:	4622      	mov	r2, r4
 800c9ee:	462b      	mov	r3, r5
 800c9f0:	4680      	mov	r8, r0
 800c9f2:	4689      	mov	r9, r1
 800c9f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9f8:	f7f6 f8ea 	bl	8002bd0 <__aeabi_dmul>
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	4604      	mov	r4, r0
 800ca00:	460d      	mov	r5, r1
 800ca02:	4602      	mov	r2, r0
 800ca04:	4649      	mov	r1, r9
 800ca06:	4640      	mov	r0, r8
 800ca08:	e9cd 4500 	strd	r4, r5, [sp]
 800ca0c:	f7f5 ff2e 	bl	800286c <__adddf3>
 800ca10:	4b1c      	ldr	r3, [pc, #112]	; (800ca84 <__ieee754_pow+0x3c4>)
 800ca12:	4299      	cmp	r1, r3
 800ca14:	4606      	mov	r6, r0
 800ca16:	460f      	mov	r7, r1
 800ca18:	468b      	mov	fp, r1
 800ca1a:	f340 82f7 	ble.w	800d00c <__ieee754_pow+0x94c>
 800ca1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ca22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ca26:	4303      	orrs	r3, r0
 800ca28:	f000 81ea 	beq.w	800ce00 <__ieee754_pow+0x740>
 800ca2c:	a310      	add	r3, pc, #64	; (adr r3, 800ca70 <__ieee754_pow+0x3b0>)
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca36:	f7f6 f8cb 	bl	8002bd0 <__aeabi_dmul>
 800ca3a:	a30d      	add	r3, pc, #52	; (adr r3, 800ca70 <__ieee754_pow+0x3b0>)
 800ca3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca40:	e6d5      	b.n	800c7ee <__ieee754_pow+0x12e>
 800ca42:	bf00      	nop
 800ca44:	f3af 8000 	nop.w
 800ca48:	60000000 	.word	0x60000000
 800ca4c:	3ff71547 	.word	0x3ff71547
 800ca50:	f85ddf44 	.word	0xf85ddf44
 800ca54:	3e54ae0b 	.word	0x3e54ae0b
 800ca58:	55555555 	.word	0x55555555
 800ca5c:	3fd55555 	.word	0x3fd55555
 800ca60:	652b82fe 	.word	0x652b82fe
 800ca64:	3ff71547 	.word	0x3ff71547
 800ca68:	00000000 	.word	0x00000000
 800ca6c:	bff00000 	.word	0xbff00000
 800ca70:	8800759c 	.word	0x8800759c
 800ca74:	7e37e43c 	.word	0x7e37e43c
 800ca78:	3ff00000 	.word	0x3ff00000
 800ca7c:	3fd00000 	.word	0x3fd00000
 800ca80:	3fe00000 	.word	0x3fe00000
 800ca84:	408fffff 	.word	0x408fffff
 800ca88:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ca8c:	f04f 0200 	mov.w	r2, #0
 800ca90:	da05      	bge.n	800ca9e <__ieee754_pow+0x3de>
 800ca92:	4bd3      	ldr	r3, [pc, #844]	; (800cde0 <__ieee754_pow+0x720>)
 800ca94:	f7f6 f89c 	bl	8002bd0 <__aeabi_dmul>
 800ca98:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ca9c:	460c      	mov	r4, r1
 800ca9e:	1523      	asrs	r3, r4, #20
 800caa0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800caa4:	4413      	add	r3, r2
 800caa6:	9307      	str	r3, [sp, #28]
 800caa8:	4bce      	ldr	r3, [pc, #824]	; (800cde4 <__ieee754_pow+0x724>)
 800caaa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800caae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cab2:	429c      	cmp	r4, r3
 800cab4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cab8:	dd08      	ble.n	800cacc <__ieee754_pow+0x40c>
 800caba:	4bcb      	ldr	r3, [pc, #812]	; (800cde8 <__ieee754_pow+0x728>)
 800cabc:	429c      	cmp	r4, r3
 800cabe:	f340 815e 	ble.w	800cd7e <__ieee754_pow+0x6be>
 800cac2:	9b07      	ldr	r3, [sp, #28]
 800cac4:	3301      	adds	r3, #1
 800cac6:	9307      	str	r3, [sp, #28]
 800cac8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cacc:	f04f 0a00 	mov.w	sl, #0
 800cad0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800cad4:	930c      	str	r3, [sp, #48]	; 0x30
 800cad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cad8:	4bc4      	ldr	r3, [pc, #784]	; (800cdec <__ieee754_pow+0x72c>)
 800cada:	4413      	add	r3, r2
 800cadc:	ed93 7b00 	vldr	d7, [r3]
 800cae0:	4629      	mov	r1, r5
 800cae2:	ec53 2b17 	vmov	r2, r3, d7
 800cae6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800caea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800caee:	f7f5 febb 	bl	8002868 <__aeabi_dsub>
 800caf2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800caf6:	4606      	mov	r6, r0
 800caf8:	460f      	mov	r7, r1
 800cafa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cafe:	f7f5 feb5 	bl	800286c <__adddf3>
 800cb02:	4602      	mov	r2, r0
 800cb04:	460b      	mov	r3, r1
 800cb06:	2000      	movs	r0, #0
 800cb08:	49b9      	ldr	r1, [pc, #740]	; (800cdf0 <__ieee754_pow+0x730>)
 800cb0a:	f7f6 f98b 	bl	8002e24 <__aeabi_ddiv>
 800cb0e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800cb12:	4602      	mov	r2, r0
 800cb14:	460b      	mov	r3, r1
 800cb16:	4630      	mov	r0, r6
 800cb18:	4639      	mov	r1, r7
 800cb1a:	f7f6 f859 	bl	8002bd0 <__aeabi_dmul>
 800cb1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb22:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cb26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	9302      	str	r3, [sp, #8]
 800cb2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cb32:	106d      	asrs	r5, r5, #1
 800cb34:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cb38:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800cb42:	4640      	mov	r0, r8
 800cb44:	4649      	mov	r1, r9
 800cb46:	4614      	mov	r4, r2
 800cb48:	461d      	mov	r5, r3
 800cb4a:	f7f6 f841 	bl	8002bd0 <__aeabi_dmul>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	460b      	mov	r3, r1
 800cb52:	4630      	mov	r0, r6
 800cb54:	4639      	mov	r1, r7
 800cb56:	f7f5 fe87 	bl	8002868 <__aeabi_dsub>
 800cb5a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cb5e:	4606      	mov	r6, r0
 800cb60:	460f      	mov	r7, r1
 800cb62:	4620      	mov	r0, r4
 800cb64:	4629      	mov	r1, r5
 800cb66:	f7f5 fe7f 	bl	8002868 <__aeabi_dsub>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb72:	f7f5 fe79 	bl	8002868 <__aeabi_dsub>
 800cb76:	4642      	mov	r2, r8
 800cb78:	464b      	mov	r3, r9
 800cb7a:	f7f6 f829 	bl	8002bd0 <__aeabi_dmul>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	460b      	mov	r3, r1
 800cb82:	4630      	mov	r0, r6
 800cb84:	4639      	mov	r1, r7
 800cb86:	f7f5 fe6f 	bl	8002868 <__aeabi_dsub>
 800cb8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cb8e:	f7f6 f81f 	bl	8002bd0 <__aeabi_dmul>
 800cb92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cb9a:	4610      	mov	r0, r2
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	f7f6 f817 	bl	8002bd0 <__aeabi_dmul>
 800cba2:	a37b      	add	r3, pc, #492	; (adr r3, 800cd90 <__ieee754_pow+0x6d0>)
 800cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba8:	4604      	mov	r4, r0
 800cbaa:	460d      	mov	r5, r1
 800cbac:	f7f6 f810 	bl	8002bd0 <__aeabi_dmul>
 800cbb0:	a379      	add	r3, pc, #484	; (adr r3, 800cd98 <__ieee754_pow+0x6d8>)
 800cbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb6:	f7f5 fe59 	bl	800286c <__adddf3>
 800cbba:	4622      	mov	r2, r4
 800cbbc:	462b      	mov	r3, r5
 800cbbe:	f7f6 f807 	bl	8002bd0 <__aeabi_dmul>
 800cbc2:	a377      	add	r3, pc, #476	; (adr r3, 800cda0 <__ieee754_pow+0x6e0>)
 800cbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc8:	f7f5 fe50 	bl	800286c <__adddf3>
 800cbcc:	4622      	mov	r2, r4
 800cbce:	462b      	mov	r3, r5
 800cbd0:	f7f5 fffe 	bl	8002bd0 <__aeabi_dmul>
 800cbd4:	a374      	add	r3, pc, #464	; (adr r3, 800cda8 <__ieee754_pow+0x6e8>)
 800cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbda:	f7f5 fe47 	bl	800286c <__adddf3>
 800cbde:	4622      	mov	r2, r4
 800cbe0:	462b      	mov	r3, r5
 800cbe2:	f7f5 fff5 	bl	8002bd0 <__aeabi_dmul>
 800cbe6:	a372      	add	r3, pc, #456	; (adr r3, 800cdb0 <__ieee754_pow+0x6f0>)
 800cbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbec:	f7f5 fe3e 	bl	800286c <__adddf3>
 800cbf0:	4622      	mov	r2, r4
 800cbf2:	462b      	mov	r3, r5
 800cbf4:	f7f5 ffec 	bl	8002bd0 <__aeabi_dmul>
 800cbf8:	a36f      	add	r3, pc, #444	; (adr r3, 800cdb8 <__ieee754_pow+0x6f8>)
 800cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfe:	f7f5 fe35 	bl	800286c <__adddf3>
 800cc02:	4622      	mov	r2, r4
 800cc04:	4606      	mov	r6, r0
 800cc06:	460f      	mov	r7, r1
 800cc08:	462b      	mov	r3, r5
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	f7f5 ffdf 	bl	8002bd0 <__aeabi_dmul>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	4630      	mov	r0, r6
 800cc18:	4639      	mov	r1, r7
 800cc1a:	f7f5 ffd9 	bl	8002bd0 <__aeabi_dmul>
 800cc1e:	4642      	mov	r2, r8
 800cc20:	4604      	mov	r4, r0
 800cc22:	460d      	mov	r5, r1
 800cc24:	464b      	mov	r3, r9
 800cc26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc2a:	f7f5 fe1f 	bl	800286c <__adddf3>
 800cc2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cc32:	f7f5 ffcd 	bl	8002bd0 <__aeabi_dmul>
 800cc36:	4622      	mov	r2, r4
 800cc38:	462b      	mov	r3, r5
 800cc3a:	f7f5 fe17 	bl	800286c <__adddf3>
 800cc3e:	4642      	mov	r2, r8
 800cc40:	4606      	mov	r6, r0
 800cc42:	460f      	mov	r7, r1
 800cc44:	464b      	mov	r3, r9
 800cc46:	4640      	mov	r0, r8
 800cc48:	4649      	mov	r1, r9
 800cc4a:	f7f5 ffc1 	bl	8002bd0 <__aeabi_dmul>
 800cc4e:	2200      	movs	r2, #0
 800cc50:	4b68      	ldr	r3, [pc, #416]	; (800cdf4 <__ieee754_pow+0x734>)
 800cc52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cc56:	f7f5 fe09 	bl	800286c <__adddf3>
 800cc5a:	4632      	mov	r2, r6
 800cc5c:	463b      	mov	r3, r7
 800cc5e:	f7f5 fe05 	bl	800286c <__adddf3>
 800cc62:	9802      	ldr	r0, [sp, #8]
 800cc64:	460d      	mov	r5, r1
 800cc66:	4604      	mov	r4, r0
 800cc68:	4602      	mov	r2, r0
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	4640      	mov	r0, r8
 800cc6e:	4649      	mov	r1, r9
 800cc70:	f7f5 ffae 	bl	8002bd0 <__aeabi_dmul>
 800cc74:	2200      	movs	r2, #0
 800cc76:	4680      	mov	r8, r0
 800cc78:	4689      	mov	r9, r1
 800cc7a:	4b5e      	ldr	r3, [pc, #376]	; (800cdf4 <__ieee754_pow+0x734>)
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	4629      	mov	r1, r5
 800cc80:	f7f5 fdf2 	bl	8002868 <__aeabi_dsub>
 800cc84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cc88:	f7f5 fdee 	bl	8002868 <__aeabi_dsub>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	4630      	mov	r0, r6
 800cc92:	4639      	mov	r1, r7
 800cc94:	f7f5 fde8 	bl	8002868 <__aeabi_dsub>
 800cc98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc9c:	f7f5 ff98 	bl	8002bd0 <__aeabi_dmul>
 800cca0:	4622      	mov	r2, r4
 800cca2:	4606      	mov	r6, r0
 800cca4:	460f      	mov	r7, r1
 800cca6:	462b      	mov	r3, r5
 800cca8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ccac:	f7f5 ff90 	bl	8002bd0 <__aeabi_dmul>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	4639      	mov	r1, r7
 800ccb8:	f7f5 fdd8 	bl	800286c <__adddf3>
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	460f      	mov	r7, r1
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	4640      	mov	r0, r8
 800ccc6:	4649      	mov	r1, r9
 800ccc8:	f7f5 fdd0 	bl	800286c <__adddf3>
 800cccc:	9802      	ldr	r0, [sp, #8]
 800ccce:	a33c      	add	r3, pc, #240	; (adr r3, 800cdc0 <__ieee754_pow+0x700>)
 800ccd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	460d      	mov	r5, r1
 800ccd8:	f7f5 ff7a 	bl	8002bd0 <__aeabi_dmul>
 800ccdc:	4642      	mov	r2, r8
 800ccde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cce2:	464b      	mov	r3, r9
 800cce4:	4620      	mov	r0, r4
 800cce6:	4629      	mov	r1, r5
 800cce8:	f7f5 fdbe 	bl	8002868 <__aeabi_dsub>
 800ccec:	4602      	mov	r2, r0
 800ccee:	460b      	mov	r3, r1
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	4639      	mov	r1, r7
 800ccf4:	f7f5 fdb8 	bl	8002868 <__aeabi_dsub>
 800ccf8:	a333      	add	r3, pc, #204	; (adr r3, 800cdc8 <__ieee754_pow+0x708>)
 800ccfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfe:	f7f5 ff67 	bl	8002bd0 <__aeabi_dmul>
 800cd02:	a333      	add	r3, pc, #204	; (adr r3, 800cdd0 <__ieee754_pow+0x710>)
 800cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd08:	4606      	mov	r6, r0
 800cd0a:	460f      	mov	r7, r1
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	4629      	mov	r1, r5
 800cd10:	f7f5 ff5e 	bl	8002bd0 <__aeabi_dmul>
 800cd14:	4602      	mov	r2, r0
 800cd16:	460b      	mov	r3, r1
 800cd18:	4630      	mov	r0, r6
 800cd1a:	4639      	mov	r1, r7
 800cd1c:	f7f5 fda6 	bl	800286c <__adddf3>
 800cd20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd22:	4b35      	ldr	r3, [pc, #212]	; (800cdf8 <__ieee754_pow+0x738>)
 800cd24:	4413      	add	r3, r2
 800cd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2a:	f7f5 fd9f 	bl	800286c <__adddf3>
 800cd2e:	4604      	mov	r4, r0
 800cd30:	9807      	ldr	r0, [sp, #28]
 800cd32:	460d      	mov	r5, r1
 800cd34:	f7f5 fee6 	bl	8002b04 <__aeabi_i2d>
 800cd38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd3a:	4b30      	ldr	r3, [pc, #192]	; (800cdfc <__ieee754_pow+0x73c>)
 800cd3c:	4413      	add	r3, r2
 800cd3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd42:	4606      	mov	r6, r0
 800cd44:	460f      	mov	r7, r1
 800cd46:	4622      	mov	r2, r4
 800cd48:	462b      	mov	r3, r5
 800cd4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cd4e:	f7f5 fd8d 	bl	800286c <__adddf3>
 800cd52:	4642      	mov	r2, r8
 800cd54:	464b      	mov	r3, r9
 800cd56:	f7f5 fd89 	bl	800286c <__adddf3>
 800cd5a:	4632      	mov	r2, r6
 800cd5c:	463b      	mov	r3, r7
 800cd5e:	f7f5 fd85 	bl	800286c <__adddf3>
 800cd62:	9802      	ldr	r0, [sp, #8]
 800cd64:	4632      	mov	r2, r6
 800cd66:	463b      	mov	r3, r7
 800cd68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd6c:	f7f5 fd7c 	bl	8002868 <__aeabi_dsub>
 800cd70:	4642      	mov	r2, r8
 800cd72:	464b      	mov	r3, r9
 800cd74:	f7f5 fd78 	bl	8002868 <__aeabi_dsub>
 800cd78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cd7c:	e607      	b.n	800c98e <__ieee754_pow+0x2ce>
 800cd7e:	f04f 0a01 	mov.w	sl, #1
 800cd82:	e6a5      	b.n	800cad0 <__ieee754_pow+0x410>
 800cd84:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800cdd8 <__ieee754_pow+0x718>
 800cd88:	e613      	b.n	800c9b2 <__ieee754_pow+0x2f2>
 800cd8a:	bf00      	nop
 800cd8c:	f3af 8000 	nop.w
 800cd90:	4a454eef 	.word	0x4a454eef
 800cd94:	3fca7e28 	.word	0x3fca7e28
 800cd98:	93c9db65 	.word	0x93c9db65
 800cd9c:	3fcd864a 	.word	0x3fcd864a
 800cda0:	a91d4101 	.word	0xa91d4101
 800cda4:	3fd17460 	.word	0x3fd17460
 800cda8:	518f264d 	.word	0x518f264d
 800cdac:	3fd55555 	.word	0x3fd55555
 800cdb0:	db6fabff 	.word	0xdb6fabff
 800cdb4:	3fdb6db6 	.word	0x3fdb6db6
 800cdb8:	33333303 	.word	0x33333303
 800cdbc:	3fe33333 	.word	0x3fe33333
 800cdc0:	e0000000 	.word	0xe0000000
 800cdc4:	3feec709 	.word	0x3feec709
 800cdc8:	dc3a03fd 	.word	0xdc3a03fd
 800cdcc:	3feec709 	.word	0x3feec709
 800cdd0:	145b01f5 	.word	0x145b01f5
 800cdd4:	be3e2fe0 	.word	0xbe3e2fe0
 800cdd8:	00000000 	.word	0x00000000
 800cddc:	3ff00000 	.word	0x3ff00000
 800cde0:	43400000 	.word	0x43400000
 800cde4:	0003988e 	.word	0x0003988e
 800cde8:	000bb679 	.word	0x000bb679
 800cdec:	0803c3d8 	.word	0x0803c3d8
 800cdf0:	3ff00000 	.word	0x3ff00000
 800cdf4:	40080000 	.word	0x40080000
 800cdf8:	0803c3f8 	.word	0x0803c3f8
 800cdfc:	0803c3e8 	.word	0x0803c3e8
 800ce00:	a3b6      	add	r3, pc, #728	; (adr r3, 800d0dc <__ieee754_pow+0xa1c>)
 800ce02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce06:	4640      	mov	r0, r8
 800ce08:	4649      	mov	r1, r9
 800ce0a:	f7f5 fd2f 	bl	800286c <__adddf3>
 800ce0e:	4622      	mov	r2, r4
 800ce10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce14:	462b      	mov	r3, r5
 800ce16:	4630      	mov	r0, r6
 800ce18:	4639      	mov	r1, r7
 800ce1a:	f7f5 fd25 	bl	8002868 <__aeabi_dsub>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	460b      	mov	r3, r1
 800ce22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce26:	f7f6 f963 	bl	80030f0 <__aeabi_dcmpgt>
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	f47f adfe 	bne.w	800ca2c <__ieee754_pow+0x36c>
 800ce30:	4aa5      	ldr	r2, [pc, #660]	; (800d0c8 <__ieee754_pow+0xa08>)
 800ce32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce36:	4293      	cmp	r3, r2
 800ce38:	f340 810c 	ble.w	800d054 <__ieee754_pow+0x994>
 800ce3c:	151b      	asrs	r3, r3, #20
 800ce3e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ce42:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ce46:	fa4a f303 	asr.w	r3, sl, r3
 800ce4a:	445b      	add	r3, fp
 800ce4c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ce50:	4e9e      	ldr	r6, [pc, #632]	; (800d0cc <__ieee754_pow+0xa0c>)
 800ce52:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ce56:	4116      	asrs	r6, r2
 800ce58:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	ea23 0106 	bic.w	r1, r3, r6
 800ce62:	f1c2 0214 	rsb	r2, r2, #20
 800ce66:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ce6a:	fa4a fa02 	asr.w	sl, sl, r2
 800ce6e:	f1bb 0f00 	cmp.w	fp, #0
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	4620      	mov	r0, r4
 800ce78:	4629      	mov	r1, r5
 800ce7a:	bfb8      	it	lt
 800ce7c:	f1ca 0a00 	rsblt	sl, sl, #0
 800ce80:	f7f5 fcf2 	bl	8002868 <__aeabi_dsub>
 800ce84:	e9cd 0100 	strd	r0, r1, [sp]
 800ce88:	4642      	mov	r2, r8
 800ce8a:	464b      	mov	r3, r9
 800ce8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce90:	f7f5 fcec 	bl	800286c <__adddf3>
 800ce94:	2000      	movs	r0, #0
 800ce96:	a37a      	add	r3, pc, #488	; (adr r3, 800d080 <__ieee754_pow+0x9c0>)
 800ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	460d      	mov	r5, r1
 800cea0:	f7f5 fe96 	bl	8002bd0 <__aeabi_dmul>
 800cea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cea8:	4606      	mov	r6, r0
 800ceaa:	460f      	mov	r7, r1
 800ceac:	4620      	mov	r0, r4
 800ceae:	4629      	mov	r1, r5
 800ceb0:	f7f5 fcda 	bl	8002868 <__aeabi_dsub>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	4640      	mov	r0, r8
 800ceba:	4649      	mov	r1, r9
 800cebc:	f7f5 fcd4 	bl	8002868 <__aeabi_dsub>
 800cec0:	a371      	add	r3, pc, #452	; (adr r3, 800d088 <__ieee754_pow+0x9c8>)
 800cec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec6:	f7f5 fe83 	bl	8002bd0 <__aeabi_dmul>
 800ceca:	a371      	add	r3, pc, #452	; (adr r3, 800d090 <__ieee754_pow+0x9d0>)
 800cecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced0:	4680      	mov	r8, r0
 800ced2:	4689      	mov	r9, r1
 800ced4:	4620      	mov	r0, r4
 800ced6:	4629      	mov	r1, r5
 800ced8:	f7f5 fe7a 	bl	8002bd0 <__aeabi_dmul>
 800cedc:	4602      	mov	r2, r0
 800cede:	460b      	mov	r3, r1
 800cee0:	4640      	mov	r0, r8
 800cee2:	4649      	mov	r1, r9
 800cee4:	f7f5 fcc2 	bl	800286c <__adddf3>
 800cee8:	4604      	mov	r4, r0
 800ceea:	460d      	mov	r5, r1
 800ceec:	4602      	mov	r2, r0
 800ceee:	460b      	mov	r3, r1
 800cef0:	4630      	mov	r0, r6
 800cef2:	4639      	mov	r1, r7
 800cef4:	f7f5 fcba 	bl	800286c <__adddf3>
 800cef8:	4632      	mov	r2, r6
 800cefa:	463b      	mov	r3, r7
 800cefc:	4680      	mov	r8, r0
 800cefe:	4689      	mov	r9, r1
 800cf00:	f7f5 fcb2 	bl	8002868 <__aeabi_dsub>
 800cf04:	4602      	mov	r2, r0
 800cf06:	460b      	mov	r3, r1
 800cf08:	4620      	mov	r0, r4
 800cf0a:	4629      	mov	r1, r5
 800cf0c:	f7f5 fcac 	bl	8002868 <__aeabi_dsub>
 800cf10:	4642      	mov	r2, r8
 800cf12:	4606      	mov	r6, r0
 800cf14:	460f      	mov	r7, r1
 800cf16:	464b      	mov	r3, r9
 800cf18:	4640      	mov	r0, r8
 800cf1a:	4649      	mov	r1, r9
 800cf1c:	f7f5 fe58 	bl	8002bd0 <__aeabi_dmul>
 800cf20:	a35d      	add	r3, pc, #372	; (adr r3, 800d098 <__ieee754_pow+0x9d8>)
 800cf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf26:	4604      	mov	r4, r0
 800cf28:	460d      	mov	r5, r1
 800cf2a:	f7f5 fe51 	bl	8002bd0 <__aeabi_dmul>
 800cf2e:	a35c      	add	r3, pc, #368	; (adr r3, 800d0a0 <__ieee754_pow+0x9e0>)
 800cf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf34:	f7f5 fc98 	bl	8002868 <__aeabi_dsub>
 800cf38:	4622      	mov	r2, r4
 800cf3a:	462b      	mov	r3, r5
 800cf3c:	f7f5 fe48 	bl	8002bd0 <__aeabi_dmul>
 800cf40:	a359      	add	r3, pc, #356	; (adr r3, 800d0a8 <__ieee754_pow+0x9e8>)
 800cf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf46:	f7f5 fc91 	bl	800286c <__adddf3>
 800cf4a:	4622      	mov	r2, r4
 800cf4c:	462b      	mov	r3, r5
 800cf4e:	f7f5 fe3f 	bl	8002bd0 <__aeabi_dmul>
 800cf52:	a357      	add	r3, pc, #348	; (adr r3, 800d0b0 <__ieee754_pow+0x9f0>)
 800cf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf58:	f7f5 fc86 	bl	8002868 <__aeabi_dsub>
 800cf5c:	4622      	mov	r2, r4
 800cf5e:	462b      	mov	r3, r5
 800cf60:	f7f5 fe36 	bl	8002bd0 <__aeabi_dmul>
 800cf64:	a354      	add	r3, pc, #336	; (adr r3, 800d0b8 <__ieee754_pow+0x9f8>)
 800cf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6a:	f7f5 fc7f 	bl	800286c <__adddf3>
 800cf6e:	4622      	mov	r2, r4
 800cf70:	462b      	mov	r3, r5
 800cf72:	f7f5 fe2d 	bl	8002bd0 <__aeabi_dmul>
 800cf76:	4602      	mov	r2, r0
 800cf78:	460b      	mov	r3, r1
 800cf7a:	4640      	mov	r0, r8
 800cf7c:	4649      	mov	r1, r9
 800cf7e:	f7f5 fc73 	bl	8002868 <__aeabi_dsub>
 800cf82:	4604      	mov	r4, r0
 800cf84:	460d      	mov	r5, r1
 800cf86:	4602      	mov	r2, r0
 800cf88:	460b      	mov	r3, r1
 800cf8a:	4640      	mov	r0, r8
 800cf8c:	4649      	mov	r1, r9
 800cf8e:	f7f5 fe1f 	bl	8002bd0 <__aeabi_dmul>
 800cf92:	2200      	movs	r2, #0
 800cf94:	e9cd 0100 	strd	r0, r1, [sp]
 800cf98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	4629      	mov	r1, r5
 800cfa0:	f7f5 fc62 	bl	8002868 <__aeabi_dsub>
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfac:	f7f5 ff3a 	bl	8002e24 <__aeabi_ddiv>
 800cfb0:	4632      	mov	r2, r6
 800cfb2:	4604      	mov	r4, r0
 800cfb4:	460d      	mov	r5, r1
 800cfb6:	463b      	mov	r3, r7
 800cfb8:	4640      	mov	r0, r8
 800cfba:	4649      	mov	r1, r9
 800cfbc:	f7f5 fe08 	bl	8002bd0 <__aeabi_dmul>
 800cfc0:	4632      	mov	r2, r6
 800cfc2:	463b      	mov	r3, r7
 800cfc4:	f7f5 fc52 	bl	800286c <__adddf3>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4620      	mov	r0, r4
 800cfce:	4629      	mov	r1, r5
 800cfd0:	f7f5 fc4a 	bl	8002868 <__aeabi_dsub>
 800cfd4:	4642      	mov	r2, r8
 800cfd6:	464b      	mov	r3, r9
 800cfd8:	f7f5 fc46 	bl	8002868 <__aeabi_dsub>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	493b      	ldr	r1, [pc, #236]	; (800d0d0 <__ieee754_pow+0xa10>)
 800cfe4:	f7f5 fc40 	bl	8002868 <__aeabi_dsub>
 800cfe8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800cfec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800cff0:	4602      	mov	r2, r0
 800cff2:	460b      	mov	r3, r1
 800cff4:	da31      	bge.n	800d05a <__ieee754_pow+0x99a>
 800cff6:	4650      	mov	r0, sl
 800cff8:	ec43 2b10 	vmov	d0, r2, r3
 800cffc:	f000 fda0 	bl	800db40 <scalbn>
 800d000:	ec51 0b10 	vmov	r0, r1, d0
 800d004:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d008:	f7ff bbf1 	b.w	800c7ee <__ieee754_pow+0x12e>
 800d00c:	4b31      	ldr	r3, [pc, #196]	; (800d0d4 <__ieee754_pow+0xa14>)
 800d00e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d012:	429e      	cmp	r6, r3
 800d014:	f77f af0c 	ble.w	800ce30 <__ieee754_pow+0x770>
 800d018:	4b2f      	ldr	r3, [pc, #188]	; (800d0d8 <__ieee754_pow+0xa18>)
 800d01a:	440b      	add	r3, r1
 800d01c:	4303      	orrs	r3, r0
 800d01e:	d00b      	beq.n	800d038 <__ieee754_pow+0x978>
 800d020:	a327      	add	r3, pc, #156	; (adr r3, 800d0c0 <__ieee754_pow+0xa00>)
 800d022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d02a:	f7f5 fdd1 	bl	8002bd0 <__aeabi_dmul>
 800d02e:	a324      	add	r3, pc, #144	; (adr r3, 800d0c0 <__ieee754_pow+0xa00>)
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	f7ff bbdb 	b.w	800c7ee <__ieee754_pow+0x12e>
 800d038:	4622      	mov	r2, r4
 800d03a:	462b      	mov	r3, r5
 800d03c:	f7f5 fc14 	bl	8002868 <__aeabi_dsub>
 800d040:	4602      	mov	r2, r0
 800d042:	460b      	mov	r3, r1
 800d044:	4640      	mov	r0, r8
 800d046:	4649      	mov	r1, r9
 800d048:	f7f6 f83e 	bl	80030c8 <__aeabi_dcmple>
 800d04c:	2800      	cmp	r0, #0
 800d04e:	f43f aeef 	beq.w	800ce30 <__ieee754_pow+0x770>
 800d052:	e7e5      	b.n	800d020 <__ieee754_pow+0x960>
 800d054:	f04f 0a00 	mov.w	sl, #0
 800d058:	e716      	b.n	800ce88 <__ieee754_pow+0x7c8>
 800d05a:	4621      	mov	r1, r4
 800d05c:	e7d2      	b.n	800d004 <__ieee754_pow+0x944>
 800d05e:	2000      	movs	r0, #0
 800d060:	491b      	ldr	r1, [pc, #108]	; (800d0d0 <__ieee754_pow+0xa10>)
 800d062:	f7ff bb8d 	b.w	800c780 <__ieee754_pow+0xc0>
 800d066:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d06a:	f7ff bb89 	b.w	800c780 <__ieee754_pow+0xc0>
 800d06e:	4630      	mov	r0, r6
 800d070:	4639      	mov	r1, r7
 800d072:	f7ff bb85 	b.w	800c780 <__ieee754_pow+0xc0>
 800d076:	4693      	mov	fp, r2
 800d078:	f7ff bb96 	b.w	800c7a8 <__ieee754_pow+0xe8>
 800d07c:	f3af 8000 	nop.w
 800d080:	00000000 	.word	0x00000000
 800d084:	3fe62e43 	.word	0x3fe62e43
 800d088:	fefa39ef 	.word	0xfefa39ef
 800d08c:	3fe62e42 	.word	0x3fe62e42
 800d090:	0ca86c39 	.word	0x0ca86c39
 800d094:	be205c61 	.word	0xbe205c61
 800d098:	72bea4d0 	.word	0x72bea4d0
 800d09c:	3e663769 	.word	0x3e663769
 800d0a0:	c5d26bf1 	.word	0xc5d26bf1
 800d0a4:	3ebbbd41 	.word	0x3ebbbd41
 800d0a8:	af25de2c 	.word	0xaf25de2c
 800d0ac:	3f11566a 	.word	0x3f11566a
 800d0b0:	16bebd93 	.word	0x16bebd93
 800d0b4:	3f66c16c 	.word	0x3f66c16c
 800d0b8:	5555553e 	.word	0x5555553e
 800d0bc:	3fc55555 	.word	0x3fc55555
 800d0c0:	c2f8f359 	.word	0xc2f8f359
 800d0c4:	01a56e1f 	.word	0x01a56e1f
 800d0c8:	3fe00000 	.word	0x3fe00000
 800d0cc:	000fffff 	.word	0x000fffff
 800d0d0:	3ff00000 	.word	0x3ff00000
 800d0d4:	4090cbff 	.word	0x4090cbff
 800d0d8:	3f6f3400 	.word	0x3f6f3400
 800d0dc:	652b82fe 	.word	0x652b82fe
 800d0e0:	3c971547 	.word	0x3c971547

0800d0e4 <__ieee754_sqrt>:
 800d0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e8:	ec55 4b10 	vmov	r4, r5, d0
 800d0ec:	4e54      	ldr	r6, [pc, #336]	; (800d240 <__ieee754_sqrt+0x15c>)
 800d0ee:	43ae      	bics	r6, r5
 800d0f0:	ee10 0a10 	vmov	r0, s0
 800d0f4:	462b      	mov	r3, r5
 800d0f6:	462a      	mov	r2, r5
 800d0f8:	4621      	mov	r1, r4
 800d0fa:	d113      	bne.n	800d124 <__ieee754_sqrt+0x40>
 800d0fc:	ee10 2a10 	vmov	r2, s0
 800d100:	462b      	mov	r3, r5
 800d102:	ee10 0a10 	vmov	r0, s0
 800d106:	4629      	mov	r1, r5
 800d108:	f7f5 fd62 	bl	8002bd0 <__aeabi_dmul>
 800d10c:	4602      	mov	r2, r0
 800d10e:	460b      	mov	r3, r1
 800d110:	4620      	mov	r0, r4
 800d112:	4629      	mov	r1, r5
 800d114:	f7f5 fbaa 	bl	800286c <__adddf3>
 800d118:	4604      	mov	r4, r0
 800d11a:	460d      	mov	r5, r1
 800d11c:	ec45 4b10 	vmov	d0, r4, r5
 800d120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d124:	2d00      	cmp	r5, #0
 800d126:	dc10      	bgt.n	800d14a <__ieee754_sqrt+0x66>
 800d128:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d12c:	4330      	orrs	r0, r6
 800d12e:	d0f5      	beq.n	800d11c <__ieee754_sqrt+0x38>
 800d130:	b15d      	cbz	r5, 800d14a <__ieee754_sqrt+0x66>
 800d132:	ee10 2a10 	vmov	r2, s0
 800d136:	462b      	mov	r3, r5
 800d138:	4620      	mov	r0, r4
 800d13a:	4629      	mov	r1, r5
 800d13c:	f7f5 fb94 	bl	8002868 <__aeabi_dsub>
 800d140:	4602      	mov	r2, r0
 800d142:	460b      	mov	r3, r1
 800d144:	f7f5 fe6e 	bl	8002e24 <__aeabi_ddiv>
 800d148:	e7e6      	b.n	800d118 <__ieee754_sqrt+0x34>
 800d14a:	151b      	asrs	r3, r3, #20
 800d14c:	d10c      	bne.n	800d168 <__ieee754_sqrt+0x84>
 800d14e:	2a00      	cmp	r2, #0
 800d150:	d06d      	beq.n	800d22e <__ieee754_sqrt+0x14a>
 800d152:	2000      	movs	r0, #0
 800d154:	02d6      	lsls	r6, r2, #11
 800d156:	d56e      	bpl.n	800d236 <__ieee754_sqrt+0x152>
 800d158:	1e44      	subs	r4, r0, #1
 800d15a:	1b1b      	subs	r3, r3, r4
 800d15c:	f1c0 0420 	rsb	r4, r0, #32
 800d160:	fa21 f404 	lsr.w	r4, r1, r4
 800d164:	4322      	orrs	r2, r4
 800d166:	4081      	lsls	r1, r0
 800d168:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d16c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d170:	07dd      	lsls	r5, r3, #31
 800d172:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d176:	bf42      	ittt	mi
 800d178:	0052      	lslmi	r2, r2, #1
 800d17a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800d17e:	0049      	lslmi	r1, r1, #1
 800d180:	1058      	asrs	r0, r3, #1
 800d182:	2500      	movs	r5, #0
 800d184:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 800d188:	441a      	add	r2, r3
 800d18a:	0049      	lsls	r1, r1, #1
 800d18c:	2316      	movs	r3, #22
 800d18e:	462c      	mov	r4, r5
 800d190:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d194:	19a7      	adds	r7, r4, r6
 800d196:	4297      	cmp	r7, r2
 800d198:	bfde      	ittt	le
 800d19a:	1bd2      	suble	r2, r2, r7
 800d19c:	19bc      	addle	r4, r7, r6
 800d19e:	19ad      	addle	r5, r5, r6
 800d1a0:	0052      	lsls	r2, r2, #1
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d1a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d1ac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d1b0:	d1f0      	bne.n	800d194 <__ieee754_sqrt+0xb0>
 800d1b2:	f04f 0e20 	mov.w	lr, #32
 800d1b6:	469c      	mov	ip, r3
 800d1b8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d1bc:	42a2      	cmp	r2, r4
 800d1be:	eb06 070c 	add.w	r7, r6, ip
 800d1c2:	dc02      	bgt.n	800d1ca <__ieee754_sqrt+0xe6>
 800d1c4:	d112      	bne.n	800d1ec <__ieee754_sqrt+0x108>
 800d1c6:	428f      	cmp	r7, r1
 800d1c8:	d810      	bhi.n	800d1ec <__ieee754_sqrt+0x108>
 800d1ca:	2f00      	cmp	r7, #0
 800d1cc:	eb07 0c06 	add.w	ip, r7, r6
 800d1d0:	da34      	bge.n	800d23c <__ieee754_sqrt+0x158>
 800d1d2:	f1bc 0f00 	cmp.w	ip, #0
 800d1d6:	db31      	blt.n	800d23c <__ieee754_sqrt+0x158>
 800d1d8:	f104 0801 	add.w	r8, r4, #1
 800d1dc:	1b12      	subs	r2, r2, r4
 800d1de:	428f      	cmp	r7, r1
 800d1e0:	bf88      	it	hi
 800d1e2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d1e6:	1bc9      	subs	r1, r1, r7
 800d1e8:	4433      	add	r3, r6
 800d1ea:	4644      	mov	r4, r8
 800d1ec:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800d1f0:	f1be 0e01 	subs.w	lr, lr, #1
 800d1f4:	443a      	add	r2, r7
 800d1f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d1fa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d1fe:	d1dd      	bne.n	800d1bc <__ieee754_sqrt+0xd8>
 800d200:	430a      	orrs	r2, r1
 800d202:	d006      	beq.n	800d212 <__ieee754_sqrt+0x12e>
 800d204:	1c5c      	adds	r4, r3, #1
 800d206:	bf13      	iteet	ne
 800d208:	3301      	addne	r3, #1
 800d20a:	3501      	addeq	r5, #1
 800d20c:	4673      	moveq	r3, lr
 800d20e:	f023 0301 	bicne.w	r3, r3, #1
 800d212:	106a      	asrs	r2, r5, #1
 800d214:	085b      	lsrs	r3, r3, #1
 800d216:	07e9      	lsls	r1, r5, #31
 800d218:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d21c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d220:	bf48      	it	mi
 800d222:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d226:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d22a:	461c      	mov	r4, r3
 800d22c:	e776      	b.n	800d11c <__ieee754_sqrt+0x38>
 800d22e:	0aca      	lsrs	r2, r1, #11
 800d230:	3b15      	subs	r3, #21
 800d232:	0549      	lsls	r1, r1, #21
 800d234:	e78b      	b.n	800d14e <__ieee754_sqrt+0x6a>
 800d236:	0052      	lsls	r2, r2, #1
 800d238:	3001      	adds	r0, #1
 800d23a:	e78b      	b.n	800d154 <__ieee754_sqrt+0x70>
 800d23c:	46a0      	mov	r8, r4
 800d23e:	e7cd      	b.n	800d1dc <__ieee754_sqrt+0xf8>
 800d240:	7ff00000 	.word	0x7ff00000

0800d244 <__ieee754_expf>:
 800d244:	ee10 2a10 	vmov	r2, s0
 800d248:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800d24c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d250:	d902      	bls.n	800d258 <__ieee754_expf+0x14>
 800d252:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d256:	4770      	bx	lr
 800d258:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800d25c:	d106      	bne.n	800d26c <__ieee754_expf+0x28>
 800d25e:	eddf 7a51 	vldr	s15, [pc, #324]	; 800d3a4 <__ieee754_expf+0x160>
 800d262:	2b00      	cmp	r3, #0
 800d264:	bf18      	it	ne
 800d266:	eeb0 0a67 	vmovne.f32	s0, s15
 800d26a:	4770      	bx	lr
 800d26c:	484e      	ldr	r0, [pc, #312]	; (800d3a8 <__ieee754_expf+0x164>)
 800d26e:	4282      	cmp	r2, r0
 800d270:	dd04      	ble.n	800d27c <__ieee754_expf+0x38>
 800d272:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800d3ac <__ieee754_expf+0x168>
 800d276:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d27a:	4770      	bx	lr
 800d27c:	2a00      	cmp	r2, #0
 800d27e:	da03      	bge.n	800d288 <__ieee754_expf+0x44>
 800d280:	4a4b      	ldr	r2, [pc, #300]	; (800d3b0 <__ieee754_expf+0x16c>)
 800d282:	4291      	cmp	r1, r2
 800d284:	f200 808a 	bhi.w	800d39c <__ieee754_expf+0x158>
 800d288:	4a4a      	ldr	r2, [pc, #296]	; (800d3b4 <__ieee754_expf+0x170>)
 800d28a:	4291      	cmp	r1, r2
 800d28c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d290:	d954      	bls.n	800d33c <__ieee754_expf+0xf8>
 800d292:	4a49      	ldr	r2, [pc, #292]	; (800d3b8 <__ieee754_expf+0x174>)
 800d294:	4291      	cmp	r1, r2
 800d296:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800d29a:	d836      	bhi.n	800d30a <__ieee754_expf+0xc6>
 800d29c:	4947      	ldr	r1, [pc, #284]	; (800d3bc <__ieee754_expf+0x178>)
 800d29e:	4411      	add	r1, r2
 800d2a0:	ed91 7a00 	vldr	s14, [r1]
 800d2a4:	4946      	ldr	r1, [pc, #280]	; (800d3c0 <__ieee754_expf+0x17c>)
 800d2a6:	440a      	add	r2, r1
 800d2a8:	edd2 7a00 	vldr	s15, [r2]
 800d2ac:	ee30 7a47 	vsub.f32	s14, s0, s14
 800d2b0:	f1c3 0201 	rsb	r2, r3, #1
 800d2b4:	1ad2      	subs	r2, r2, r3
 800d2b6:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d2ba:	ee60 6a00 	vmul.f32	s13, s0, s0
 800d2be:	eddf 5a41 	vldr	s11, [pc, #260]	; 800d3c4 <__ieee754_expf+0x180>
 800d2c2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800d3c8 <__ieee754_expf+0x184>
 800d2c6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800d2ca:	eddf 5a40 	vldr	s11, [pc, #256]	; 800d3cc <__ieee754_expf+0x188>
 800d2ce:	eee6 5a85 	vfma.f32	s11, s13, s10
 800d2d2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800d3d0 <__ieee754_expf+0x18c>
 800d2d6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800d2da:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800d3d4 <__ieee754_expf+0x190>
 800d2de:	eee6 5a85 	vfma.f32	s11, s13, s10
 800d2e2:	eeb0 5a40 	vmov.f32	s10, s0
 800d2e6:	eea6 5ae5 	vfms.f32	s10, s13, s11
 800d2ea:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d2ee:	eef0 6a45 	vmov.f32	s13, s10
 800d2f2:	ee20 5a05 	vmul.f32	s10, s0, s10
 800d2f6:	bb92      	cbnz	r2, 800d35e <__ieee754_expf+0x11a>
 800d2f8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800d2fc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800d300:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d304:	ee36 0a40 	vsub.f32	s0, s12, s0
 800d308:	4770      	bx	lr
 800d30a:	4b33      	ldr	r3, [pc, #204]	; (800d3d8 <__ieee754_expf+0x194>)
 800d30c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800d3dc <__ieee754_expf+0x198>
 800d310:	4413      	add	r3, r2
 800d312:	edd3 7a00 	vldr	s15, [r3]
 800d316:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d31a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d3e0 <__ieee754_expf+0x19c>
 800d31e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d322:	ee17 2a90 	vmov	r2, s15
 800d326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d32a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d32e:	eeb0 7a40 	vmov.f32	s14, s0
 800d332:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800d3e4 <__ieee754_expf+0x1a0>
 800d336:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d33a:	e7bc      	b.n	800d2b6 <__ieee754_expf+0x72>
 800d33c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800d340:	d20b      	bcs.n	800d35a <__ieee754_expf+0x116>
 800d342:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800d3ac <__ieee754_expf+0x168>
 800d346:	ee70 6a26 	vadd.f32	s13, s0, s13
 800d34a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d352:	dd02      	ble.n	800d35a <__ieee754_expf+0x116>
 800d354:	ee30 0a06 	vadd.f32	s0, s0, s12
 800d358:	4770      	bx	lr
 800d35a:	2200      	movs	r2, #0
 800d35c:	e7ad      	b.n	800d2ba <__ieee754_expf+0x76>
 800d35e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800d362:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800d366:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800d36a:	bfb8      	it	lt
 800d36c:	3264      	addlt	r2, #100	; 0x64
 800d36e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d372:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d376:	ee76 7a40 	vsub.f32	s15, s12, s0
 800d37a:	ee17 3a90 	vmov	r3, s15
 800d37e:	bfab      	itete	ge
 800d380:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800d384:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800d388:	ee00 3a10 	vmovge	s0, r3
 800d38c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800d3e8 <__ieee754_expf+0x1a4>
 800d390:	bfbc      	itt	lt
 800d392:	ee00 3a10 	vmovlt	s0, r3
 800d396:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800d39a:	4770      	bx	lr
 800d39c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d3a4 <__ieee754_expf+0x160>
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop
 800d3a4:	00000000 	.word	0x00000000
 800d3a8:	42b17217 	.word	0x42b17217
 800d3ac:	7149f2ca 	.word	0x7149f2ca
 800d3b0:	42cff1b5 	.word	0x42cff1b5
 800d3b4:	3eb17218 	.word	0x3eb17218
 800d3b8:	3f851591 	.word	0x3f851591
 800d3bc:	0803c410 	.word	0x0803c410
 800d3c0:	0803c418 	.word	0x0803c418
 800d3c4:	3331bb4c 	.word	0x3331bb4c
 800d3c8:	b5ddea0e 	.word	0xb5ddea0e
 800d3cc:	388ab355 	.word	0x388ab355
 800d3d0:	bb360b61 	.word	0xbb360b61
 800d3d4:	3e2aaaab 	.word	0x3e2aaaab
 800d3d8:	0803c408 	.word	0x0803c408
 800d3dc:	3fb8aa3b 	.word	0x3fb8aa3b
 800d3e0:	3f317180 	.word	0x3f317180
 800d3e4:	3717f7d1 	.word	0x3717f7d1
 800d3e8:	0d800000 	.word	0x0d800000

0800d3ec <__ieee754_powf>:
 800d3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f0:	ee10 5a90 	vmov	r5, s1
 800d3f4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800d3f8:	ed2d 8b02 	vpush	{d8}
 800d3fc:	eeb0 8a40 	vmov.f32	s16, s0
 800d400:	eef0 8a60 	vmov.f32	s17, s1
 800d404:	f000 8295 	beq.w	800d932 <__ieee754_powf+0x546>
 800d408:	ee10 8a10 	vmov	r8, s0
 800d40c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800d410:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d414:	dc06      	bgt.n	800d424 <__ieee754_powf+0x38>
 800d416:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800d41a:	dd0a      	ble.n	800d432 <__ieee754_powf+0x46>
 800d41c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d420:	f000 8287 	beq.w	800d932 <__ieee754_powf+0x546>
 800d424:	ecbd 8b02 	vpop	{d8}
 800d428:	48d9      	ldr	r0, [pc, #868]	; (800d790 <__ieee754_powf+0x3a4>)
 800d42a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d42e:	f000 bd3f 	b.w	800deb0 <nanf>
 800d432:	f1b8 0f00 	cmp.w	r8, #0
 800d436:	da1d      	bge.n	800d474 <__ieee754_powf+0x88>
 800d438:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800d43c:	da2c      	bge.n	800d498 <__ieee754_powf+0xac>
 800d43e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800d442:	db30      	blt.n	800d4a6 <__ieee754_powf+0xba>
 800d444:	15fb      	asrs	r3, r7, #23
 800d446:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800d44a:	fa47 f603 	asr.w	r6, r7, r3
 800d44e:	fa06 f303 	lsl.w	r3, r6, r3
 800d452:	429f      	cmp	r7, r3
 800d454:	d127      	bne.n	800d4a6 <__ieee754_powf+0xba>
 800d456:	f006 0601 	and.w	r6, r6, #1
 800d45a:	f1c6 0602 	rsb	r6, r6, #2
 800d45e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800d462:	d122      	bne.n	800d4aa <__ieee754_powf+0xbe>
 800d464:	2d00      	cmp	r5, #0
 800d466:	f280 826a 	bge.w	800d93e <__ieee754_powf+0x552>
 800d46a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d46e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800d472:	e00d      	b.n	800d490 <__ieee754_powf+0xa4>
 800d474:	2600      	movs	r6, #0
 800d476:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800d47a:	d1f0      	bne.n	800d45e <__ieee754_powf+0x72>
 800d47c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d480:	f000 8257 	beq.w	800d932 <__ieee754_powf+0x546>
 800d484:	dd0a      	ble.n	800d49c <__ieee754_powf+0xb0>
 800d486:	2d00      	cmp	r5, #0
 800d488:	f280 8256 	bge.w	800d938 <__ieee754_powf+0x54c>
 800d48c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800d794 <__ieee754_powf+0x3a8>
 800d490:	ecbd 8b02 	vpop	{d8}
 800d494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d498:	2602      	movs	r6, #2
 800d49a:	e7ec      	b.n	800d476 <__ieee754_powf+0x8a>
 800d49c:	2d00      	cmp	r5, #0
 800d49e:	daf5      	bge.n	800d48c <__ieee754_powf+0xa0>
 800d4a0:	eeb1 0a68 	vneg.f32	s0, s17
 800d4a4:	e7f4      	b.n	800d490 <__ieee754_powf+0xa4>
 800d4a6:	2600      	movs	r6, #0
 800d4a8:	e7d9      	b.n	800d45e <__ieee754_powf+0x72>
 800d4aa:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800d4ae:	d102      	bne.n	800d4b6 <__ieee754_powf+0xca>
 800d4b0:	ee28 0a08 	vmul.f32	s0, s16, s16
 800d4b4:	e7ec      	b.n	800d490 <__ieee754_powf+0xa4>
 800d4b6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800d4ba:	eeb0 0a48 	vmov.f32	s0, s16
 800d4be:	d108      	bne.n	800d4d2 <__ieee754_powf+0xe6>
 800d4c0:	f1b8 0f00 	cmp.w	r8, #0
 800d4c4:	db05      	blt.n	800d4d2 <__ieee754_powf+0xe6>
 800d4c6:	ecbd 8b02 	vpop	{d8}
 800d4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ce:	f000 ba4f 	b.w	800d970 <__ieee754_sqrtf>
 800d4d2:	f000 fcdb 	bl	800de8c <fabsf>
 800d4d6:	b124      	cbz	r4, 800d4e2 <__ieee754_powf+0xf6>
 800d4d8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800d4dc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d4e0:	d117      	bne.n	800d512 <__ieee754_powf+0x126>
 800d4e2:	2d00      	cmp	r5, #0
 800d4e4:	bfbc      	itt	lt
 800d4e6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800d4ea:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d4ee:	f1b8 0f00 	cmp.w	r8, #0
 800d4f2:	dacd      	bge.n	800d490 <__ieee754_powf+0xa4>
 800d4f4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800d4f8:	ea54 0306 	orrs.w	r3, r4, r6
 800d4fc:	d104      	bne.n	800d508 <__ieee754_powf+0x11c>
 800d4fe:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d502:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d506:	e7c3      	b.n	800d490 <__ieee754_powf+0xa4>
 800d508:	2e01      	cmp	r6, #1
 800d50a:	d1c1      	bne.n	800d490 <__ieee754_powf+0xa4>
 800d50c:	eeb1 0a40 	vneg.f32	s0, s0
 800d510:	e7be      	b.n	800d490 <__ieee754_powf+0xa4>
 800d512:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800d516:	3801      	subs	r0, #1
 800d518:	ea56 0300 	orrs.w	r3, r6, r0
 800d51c:	d104      	bne.n	800d528 <__ieee754_powf+0x13c>
 800d51e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d522:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d526:	e7b3      	b.n	800d490 <__ieee754_powf+0xa4>
 800d528:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800d52c:	dd6d      	ble.n	800d60a <__ieee754_powf+0x21e>
 800d52e:	4b9a      	ldr	r3, [pc, #616]	; (800d798 <__ieee754_powf+0x3ac>)
 800d530:	429c      	cmp	r4, r3
 800d532:	dc06      	bgt.n	800d542 <__ieee754_powf+0x156>
 800d534:	2d00      	cmp	r5, #0
 800d536:	daa9      	bge.n	800d48c <__ieee754_powf+0xa0>
 800d538:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800d79c <__ieee754_powf+0x3b0>
 800d53c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d540:	e7a6      	b.n	800d490 <__ieee754_powf+0xa4>
 800d542:	4b97      	ldr	r3, [pc, #604]	; (800d7a0 <__ieee754_powf+0x3b4>)
 800d544:	429c      	cmp	r4, r3
 800d546:	dd02      	ble.n	800d54e <__ieee754_powf+0x162>
 800d548:	2d00      	cmp	r5, #0
 800d54a:	dcf5      	bgt.n	800d538 <__ieee754_powf+0x14c>
 800d54c:	e79e      	b.n	800d48c <__ieee754_powf+0xa0>
 800d54e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d552:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d556:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800d7a4 <__ieee754_powf+0x3b8>
 800d55a:	ed9f 6a93 	vldr	s12, [pc, #588]	; 800d7a8 <__ieee754_powf+0x3bc>
 800d55e:	eef1 6a40 	vneg.f32	s13, s0
 800d562:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800d566:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d56a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d56e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d572:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d576:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d57a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800d7ac <__ieee754_powf+0x3c0>
 800d57e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800d582:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800d7b0 <__ieee754_powf+0x3c4>
 800d586:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d58a:	eeb0 7a67 	vmov.f32	s14, s15
 800d58e:	eea0 7a06 	vfma.f32	s14, s0, s12
 800d592:	ee17 3a10 	vmov	r3, s14
 800d596:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d59a:	f023 030f 	bic.w	r3, r3, #15
 800d59e:	ee07 3a10 	vmov	s14, r3
 800d5a2:	eea6 7a86 	vfma.f32	s14, s13, s12
 800d5a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5aa:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800d5ae:	f025 050f 	bic.w	r5, r5, #15
 800d5b2:	ee07 5a10 	vmov	s14, r5
 800d5b6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800d5ba:	ee78 8ac7 	vsub.f32	s17, s17, s14
 800d5be:	ee07 3a10 	vmov	s14, r3
 800d5c2:	ee06 5a90 	vmov	s13, r5
 800d5c6:	eee7 7a28 	vfma.f32	s15, s14, s17
 800d5ca:	3e01      	subs	r6, #1
 800d5cc:	ea56 0200 	orrs.w	r2, r6, r0
 800d5d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d5d4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d5d8:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d5dc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d5e0:	ee16 4a90 	vmov	r4, s13
 800d5e4:	bf08      	it	eq
 800d5e6:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d5ea:	2c00      	cmp	r4, #0
 800d5ec:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d5f0:	f340 8186 	ble.w	800d900 <__ieee754_powf+0x514>
 800d5f4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d5f8:	f340 80fc 	ble.w	800d7f4 <__ieee754_powf+0x408>
 800d5fc:	eddf 7a67 	vldr	s15, [pc, #412]	; 800d79c <__ieee754_powf+0x3b0>
 800d600:	ee28 0a27 	vmul.f32	s0, s16, s15
 800d604:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d608:	e742      	b.n	800d490 <__ieee754_powf+0xa4>
 800d60a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800d60e:	bfbf      	itttt	lt
 800d610:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800d7b4 <__ieee754_powf+0x3c8>
 800d614:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d618:	f06f 0217 	mvnlt.w	r2, #23
 800d61c:	ee17 4a90 	vmovlt	r4, s15
 800d620:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800d624:	bfa8      	it	ge
 800d626:	2200      	movge	r2, #0
 800d628:	3b7f      	subs	r3, #127	; 0x7f
 800d62a:	4413      	add	r3, r2
 800d62c:	4a62      	ldr	r2, [pc, #392]	; (800d7b8 <__ieee754_powf+0x3cc>)
 800d62e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800d632:	4294      	cmp	r4, r2
 800d634:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800d638:	dd06      	ble.n	800d648 <__ieee754_powf+0x25c>
 800d63a:	4a60      	ldr	r2, [pc, #384]	; (800d7bc <__ieee754_powf+0x3d0>)
 800d63c:	4294      	cmp	r4, r2
 800d63e:	f340 80a5 	ble.w	800d78c <__ieee754_powf+0x3a0>
 800d642:	3301      	adds	r3, #1
 800d644:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d648:	2400      	movs	r4, #0
 800d64a:	4a5d      	ldr	r2, [pc, #372]	; (800d7c0 <__ieee754_powf+0x3d4>)
 800d64c:	00a7      	lsls	r7, r4, #2
 800d64e:	443a      	add	r2, r7
 800d650:	ee07 1a90 	vmov	s15, r1
 800d654:	ed92 7a00 	vldr	s14, [r2]
 800d658:	4a5a      	ldr	r2, [pc, #360]	; (800d7c4 <__ieee754_powf+0x3d8>)
 800d65a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d65e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d662:	ee85 5aa6 	vdiv.f32	s10, s11, s13
 800d666:	1049      	asrs	r1, r1, #1
 800d668:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d66c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d670:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800d674:	ee37 6ac7 	vsub.f32	s12, s15, s14
 800d678:	ee06 1a90 	vmov	s13, r1
 800d67c:	ee66 4a05 	vmul.f32	s9, s12, s10
 800d680:	ee14 ea90 	vmov	lr, s9
 800d684:	ea02 0e0e 	and.w	lr, r2, lr
 800d688:	ee05 ea90 	vmov	s11, lr
 800d68c:	eeb1 4a65 	vneg.f32	s8, s11
 800d690:	eea4 6a26 	vfma.f32	s12, s8, s13
 800d694:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d698:	ee35 7aa4 	vadd.f32	s14, s11, s9
 800d69c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800d6a0:	eddf 7a49 	vldr	s15, [pc, #292]	; 800d7c8 <__ieee754_powf+0x3dc>
 800d6a4:	eea4 6a26 	vfma.f32	s12, s8, s13
 800d6a8:	ee66 6a05 	vmul.f32	s13, s12, s10
 800d6ac:	ee24 6aa4 	vmul.f32	s12, s9, s9
 800d6b0:	ed9f 5a46 	vldr	s10, [pc, #280]	; 800d7cc <__ieee754_powf+0x3e0>
 800d6b4:	eee6 7a05 	vfma.f32	s15, s12, s10
 800d6b8:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800d7d0 <__ieee754_powf+0x3e4>
 800d6bc:	eea6 5a27 	vfma.f32	s10, s12, s15
 800d6c0:	eddf 7a38 	vldr	s15, [pc, #224]	; 800d7a4 <__ieee754_powf+0x3b8>
 800d6c4:	eee6 7a05 	vfma.f32	s15, s12, s10
 800d6c8:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800d7d4 <__ieee754_powf+0x3e8>
 800d6cc:	eea6 5a27 	vfma.f32	s10, s12, s15
 800d6d0:	eddf 7a41 	vldr	s15, [pc, #260]	; 800d7d8 <__ieee754_powf+0x3ec>
 800d6d4:	eee6 7a05 	vfma.f32	s15, s12, s10
 800d6d8:	ee66 3a06 	vmul.f32	s7, s12, s12
 800d6dc:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800d6e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d6e4:	eeb0 6a45 	vmov.f32	s12, s10
 800d6e8:	eea3 7aa7 	vfma.f32	s14, s7, s15
 800d6ec:	eea5 6aa5 	vfma.f32	s12, s11, s11
 800d6f0:	ee36 6a07 	vadd.f32	s12, s12, s14
 800d6f4:	ee16 1a10 	vmov	r1, s12
 800d6f8:	4011      	ands	r1, r2
 800d6fa:	ee06 1a10 	vmov	s12, r1
 800d6fe:	ee76 7a45 	vsub.f32	s15, s12, s10
 800d702:	ed9f 5a36 	vldr	s10, [pc, #216]	; 800d7dc <__ieee754_powf+0x3f0>
 800d706:	eee4 7a25 	vfma.f32	s15, s8, s11
 800d70a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d70e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800d712:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d716:	eeb0 7a67 	vmov.f32	s14, s15
 800d71a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d71e:	ee17 1a10 	vmov	r1, s14
 800d722:	4011      	ands	r1, r2
 800d724:	ee07 1a10 	vmov	s14, r1
 800d728:	eea4 7a06 	vfma.f32	s14, s8, s12
 800d72c:	ee05 1a90 	vmov	s11, r1
 800d730:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d734:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d7e0 <__ieee754_powf+0x3f4>
 800d738:	492a      	ldr	r1, [pc, #168]	; (800d7e4 <__ieee754_powf+0x3f8>)
 800d73a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d73e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d7e8 <__ieee754_powf+0x3fc>
 800d742:	eee5 7a87 	vfma.f32	s15, s11, s14
 800d746:	4439      	add	r1, r7
 800d748:	ed91 7a00 	vldr	s14, [r1]
 800d74c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d750:	ee07 3a90 	vmov	s15, r3
 800d754:	eeb0 6a47 	vmov.f32	s12, s14
 800d758:	4b24      	ldr	r3, [pc, #144]	; (800d7ec <__ieee754_powf+0x400>)
 800d75a:	eea5 6a85 	vfma.f32	s12, s11, s10
 800d75e:	443b      	add	r3, r7
 800d760:	edd3 4a00 	vldr	s9, [r3]
 800d764:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d768:	ee36 6a24 	vadd.f32	s12, s12, s9
 800d76c:	ee76 7a26 	vadd.f32	s15, s12, s13
 800d770:	ee17 3a90 	vmov	r3, s15
 800d774:	4013      	ands	r3, r2
 800d776:	ee07 3a90 	vmov	s15, r3
 800d77a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d77e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800d782:	eee5 7ac5 	vfms.f32	s15, s11, s10
 800d786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d78a:	e70e      	b.n	800d5aa <__ieee754_powf+0x1be>
 800d78c:	2401      	movs	r4, #1
 800d78e:	e75c      	b.n	800d64a <__ieee754_powf+0x25e>
 800d790:	08028453 	.word	0x08028453
 800d794:	00000000 	.word	0x00000000
 800d798:	3f7ffff7 	.word	0x3f7ffff7
 800d79c:	7149f2ca 	.word	0x7149f2ca
 800d7a0:	3f800007 	.word	0x3f800007
 800d7a4:	3eaaaaab 	.word	0x3eaaaaab
 800d7a8:	3fb8aa00 	.word	0x3fb8aa00
 800d7ac:	3fb8aa3b 	.word	0x3fb8aa3b
 800d7b0:	36eca570 	.word	0x36eca570
 800d7b4:	4b800000 	.word	0x4b800000
 800d7b8:	001cc471 	.word	0x001cc471
 800d7bc:	005db3d6 	.word	0x005db3d6
 800d7c0:	0803c420 	.word	0x0803c420
 800d7c4:	fffff000 	.word	0xfffff000
 800d7c8:	3e6c3255 	.word	0x3e6c3255
 800d7cc:	3e53f142 	.word	0x3e53f142
 800d7d0:	3e8ba305 	.word	0x3e8ba305
 800d7d4:	3edb6db7 	.word	0x3edb6db7
 800d7d8:	3f19999a 	.word	0x3f19999a
 800d7dc:	3f763800 	.word	0x3f763800
 800d7e0:	3f76384f 	.word	0x3f76384f
 800d7e4:	0803c430 	.word	0x0803c430
 800d7e8:	369dc3a0 	.word	0x369dc3a0
 800d7ec:	0803c428 	.word	0x0803c428
 800d7f0:	3338aa3c 	.word	0x3338aa3c
 800d7f4:	f040 8094 	bne.w	800d920 <__ieee754_powf+0x534>
 800d7f8:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 800d7f0 <__ieee754_powf+0x404>
 800d7fc:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d800:	ee37 6a86 	vadd.f32	s12, s15, s12
 800d804:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800d808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d80c:	f73f aef6 	bgt.w	800d5fc <__ieee754_powf+0x210>
 800d810:	15db      	asrs	r3, r3, #23
 800d812:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d816:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d81a:	4103      	asrs	r3, r0
 800d81c:	4423      	add	r3, r4
 800d81e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d822:	4948      	ldr	r1, [pc, #288]	; (800d944 <__ieee754_powf+0x558>)
 800d824:	3a7f      	subs	r2, #127	; 0x7f
 800d826:	4111      	asrs	r1, r2
 800d828:	ea23 0101 	bic.w	r1, r3, r1
 800d82c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d830:	ee06 1a90 	vmov	s13, r1
 800d834:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d838:	f1c2 0217 	rsb	r2, r2, #23
 800d83c:	4110      	asrs	r0, r2
 800d83e:	2c00      	cmp	r4, #0
 800d840:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d844:	bfb8      	it	lt
 800d846:	4240      	neglt	r0, r0
 800d848:	ee77 6a27 	vadd.f32	s13, s14, s15
 800d84c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800d948 <__ieee754_powf+0x55c>
 800d850:	ee16 3a90 	vmov	r3, s13
 800d854:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d858:	f023 030f 	bic.w	r3, r3, #15
 800d85c:	ee06 3a90 	vmov	s13, r3
 800d860:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d864:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d868:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d94c <__ieee754_powf+0x560>
 800d86c:	ee26 7a87 	vmul.f32	s14, s13, s14
 800d870:	eea7 7a86 	vfma.f32	s14, s15, s12
 800d874:	eef0 7a47 	vmov.f32	s15, s14
 800d878:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800d950 <__ieee754_powf+0x564>
 800d87c:	eeb0 0a67 	vmov.f32	s0, s15
 800d880:	eea6 0a87 	vfma.f32	s0, s13, s14
 800d884:	eeb0 6a40 	vmov.f32	s12, s0
 800d888:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d88c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d890:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d894:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800d954 <__ieee754_powf+0x568>
 800d898:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800d958 <__ieee754_powf+0x56c>
 800d89c:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d8a0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800d95c <__ieee754_powf+0x570>
 800d8a4:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d8a8:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800d960 <__ieee754_powf+0x574>
 800d8ac:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d8b0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800d964 <__ieee754_powf+0x578>
 800d8b4:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d8b8:	eeb0 6a40 	vmov.f32	s12, s0
 800d8bc:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d8c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d8c4:	eeb0 7a46 	vmov.f32	s14, s12
 800d8c8:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d8cc:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d8d0:	eee0 7a27 	vfma.f32	s15, s0, s15
 800d8d4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d8d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d8e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d8e4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d8e8:	ee10 3a10 	vmov	r3, s0
 800d8ec:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d8f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d8f4:	da1a      	bge.n	800d92c <__ieee754_powf+0x540>
 800d8f6:	f000 fae1 	bl	800debc <scalbnf>
 800d8fa:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d8fe:	e5c7      	b.n	800d490 <__ieee754_powf+0xa4>
 800d900:	4a19      	ldr	r2, [pc, #100]	; (800d968 <__ieee754_powf+0x57c>)
 800d902:	4293      	cmp	r3, r2
 800d904:	dd02      	ble.n	800d90c <__ieee754_powf+0x520>
 800d906:	eddf 7a19 	vldr	s15, [pc, #100]	; 800d96c <__ieee754_powf+0x580>
 800d90a:	e679      	b.n	800d600 <__ieee754_powf+0x214>
 800d90c:	d108      	bne.n	800d920 <__ieee754_powf+0x534>
 800d90e:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d912:	eef4 7ae6 	vcmpe.f32	s15, s13
 800d916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d91a:	f63f af79 	bhi.w	800d810 <__ieee754_powf+0x424>
 800d91e:	e7f2      	b.n	800d906 <__ieee754_powf+0x51a>
 800d920:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d924:	f73f af74 	bgt.w	800d810 <__ieee754_powf+0x424>
 800d928:	2000      	movs	r0, #0
 800d92a:	e78d      	b.n	800d848 <__ieee754_powf+0x45c>
 800d92c:	ee00 3a10 	vmov	s0, r3
 800d930:	e7e3      	b.n	800d8fa <__ieee754_powf+0x50e>
 800d932:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d936:	e5ab      	b.n	800d490 <__ieee754_powf+0xa4>
 800d938:	eeb0 0a68 	vmov.f32	s0, s17
 800d93c:	e5a8      	b.n	800d490 <__ieee754_powf+0xa4>
 800d93e:	eeb0 0a48 	vmov.f32	s0, s16
 800d942:	e5a5      	b.n	800d490 <__ieee754_powf+0xa4>
 800d944:	007fffff 	.word	0x007fffff
 800d948:	3f317218 	.word	0x3f317218
 800d94c:	35bfbe8c 	.word	0x35bfbe8c
 800d950:	3f317200 	.word	0x3f317200
 800d954:	3331bb4c 	.word	0x3331bb4c
 800d958:	b5ddea0e 	.word	0xb5ddea0e
 800d95c:	388ab355 	.word	0x388ab355
 800d960:	bb360b61 	.word	0xbb360b61
 800d964:	3e2aaaab 	.word	0x3e2aaaab
 800d968:	43160000 	.word	0x43160000
 800d96c:	0da24260 	.word	0x0da24260

0800d970 <__ieee754_sqrtf>:
 800d970:	ee10 2a10 	vmov	r2, s0
 800d974:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800d978:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d97c:	b570      	push	{r4, r5, r6, lr}
 800d97e:	d302      	bcc.n	800d986 <__ieee754_sqrtf+0x16>
 800d980:	eea0 0a00 	vfma.f32	s0, s0, s0
 800d984:	bd70      	pop	{r4, r5, r6, pc}
 800d986:	b3b1      	cbz	r1, 800d9f6 <__ieee754_sqrtf+0x86>
 800d988:	2a00      	cmp	r2, #0
 800d98a:	da04      	bge.n	800d996 <__ieee754_sqrtf+0x26>
 800d98c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d990:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d994:	bd70      	pop	{r4, r5, r6, pc}
 800d996:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800d99a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800d99e:	d204      	bcs.n	800d9aa <__ieee754_sqrtf+0x3a>
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	0210      	lsls	r0, r2, #8
 800d9a4:	d528      	bpl.n	800d9f8 <__ieee754_sqrtf+0x88>
 800d9a6:	3901      	subs	r1, #1
 800d9a8:	1a5b      	subs	r3, r3, r1
 800d9aa:	3b7f      	subs	r3, #127	; 0x7f
 800d9ac:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800d9b0:	07d9      	lsls	r1, r3, #31
 800d9b2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d9b6:	bf48      	it	mi
 800d9b8:	0052      	lslmi	r2, r2, #1
 800d9ba:	1059      	asrs	r1, r3, #1
 800d9bc:	2300      	movs	r3, #0
 800d9be:	0052      	lsls	r2, r2, #1
 800d9c0:	2419      	movs	r4, #25
 800d9c2:	461e      	mov	r6, r3
 800d9c4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800d9c8:	1835      	adds	r5, r6, r0
 800d9ca:	4295      	cmp	r5, r2
 800d9cc:	bfde      	ittt	le
 800d9ce:	182e      	addle	r6, r5, r0
 800d9d0:	1b52      	suble	r2, r2, r5
 800d9d2:	181b      	addle	r3, r3, r0
 800d9d4:	3c01      	subs	r4, #1
 800d9d6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d9da:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800d9de:	d1f3      	bne.n	800d9c8 <__ieee754_sqrtf+0x58>
 800d9e0:	b112      	cbz	r2, 800d9e8 <__ieee754_sqrtf+0x78>
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	f023 0301 	bic.w	r3, r3, #1
 800d9e8:	105b      	asrs	r3, r3, #1
 800d9ea:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 800d9ee:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 800d9f2:	ee00 3a10 	vmov	s0, r3
 800d9f6:	bd70      	pop	{r4, r5, r6, pc}
 800d9f8:	0052      	lsls	r2, r2, #1
 800d9fa:	3101      	adds	r1, #1
 800d9fc:	e7d1      	b.n	800d9a2 <__ieee754_sqrtf+0x32>

0800d9fe <fabs>:
 800d9fe:	ec53 2b10 	vmov	r2, r3, d0
 800da02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da06:	ec43 2b10 	vmov	d0, r2, r3
 800da0a:	4770      	bx	lr

0800da0c <finite>:
 800da0c:	ee10 3a90 	vmov	r3, s1
 800da10:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800da14:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800da18:	0fc0      	lsrs	r0, r0, #31
 800da1a:	4770      	bx	lr

0800da1c <matherr>:
 800da1c:	2000      	movs	r0, #0
 800da1e:	4770      	bx	lr

0800da20 <nan>:
 800da20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800da28 <nan+0x8>
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	00000000 	.word	0x00000000
 800da2c:	7ff80000 	.word	0x7ff80000

0800da30 <rint>:
 800da30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da32:	ec51 0b10 	vmov	r0, r1, d0
 800da36:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800da3a:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800da3e:	2e13      	cmp	r6, #19
 800da40:	ee10 7a10 	vmov	r7, s0
 800da44:	460b      	mov	r3, r1
 800da46:	4602      	mov	r2, r0
 800da48:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800da4c:	dc58      	bgt.n	800db00 <rint+0xd0>
 800da4e:	2e00      	cmp	r6, #0
 800da50:	da2b      	bge.n	800daaa <rint+0x7a>
 800da52:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800da56:	4302      	orrs	r2, r0
 800da58:	d023      	beq.n	800daa2 <rint+0x72>
 800da5a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800da5e:	4302      	orrs	r2, r0
 800da60:	4251      	negs	r1, r2
 800da62:	4311      	orrs	r1, r2
 800da64:	0b09      	lsrs	r1, r1, #12
 800da66:	0c5b      	lsrs	r3, r3, #17
 800da68:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800da6c:	045b      	lsls	r3, r3, #17
 800da6e:	ea41 0703 	orr.w	r7, r1, r3
 800da72:	4b31      	ldr	r3, [pc, #196]	; (800db38 <rint+0x108>)
 800da74:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800da78:	4639      	mov	r1, r7
 800da7a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800da7e:	ee10 0a10 	vmov	r0, s0
 800da82:	4632      	mov	r2, r6
 800da84:	463b      	mov	r3, r7
 800da86:	f7f4 fef1 	bl	800286c <__adddf3>
 800da8a:	e9cd 0100 	strd	r0, r1, [sp]
 800da8e:	463b      	mov	r3, r7
 800da90:	4632      	mov	r2, r6
 800da92:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da96:	f7f4 fee7 	bl	8002868 <__aeabi_dsub>
 800da9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da9e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800daa2:	ec41 0b10 	vmov	d0, r0, r1
 800daa6:	b003      	add	sp, #12
 800daa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daaa:	4c24      	ldr	r4, [pc, #144]	; (800db3c <rint+0x10c>)
 800daac:	4134      	asrs	r4, r6
 800daae:	ea01 0704 	and.w	r7, r1, r4
 800dab2:	4307      	orrs	r7, r0
 800dab4:	d0f5      	beq.n	800daa2 <rint+0x72>
 800dab6:	0861      	lsrs	r1, r4, #1
 800dab8:	ea03 0001 	and.w	r0, r3, r1
 800dabc:	4302      	orrs	r2, r0
 800dabe:	d00b      	beq.n	800dad8 <rint+0xa8>
 800dac0:	ea23 0101 	bic.w	r1, r3, r1
 800dac4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dac8:	2e13      	cmp	r6, #19
 800daca:	fa43 f306 	asr.w	r3, r3, r6
 800dace:	bf0c      	ite	eq
 800dad0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800dad4:	2200      	movne	r2, #0
 800dad6:	430b      	orrs	r3, r1
 800dad8:	4619      	mov	r1, r3
 800dada:	4b17      	ldr	r3, [pc, #92]	; (800db38 <rint+0x108>)
 800dadc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dae0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dae4:	4610      	mov	r0, r2
 800dae6:	462b      	mov	r3, r5
 800dae8:	4622      	mov	r2, r4
 800daea:	f7f4 febf 	bl	800286c <__adddf3>
 800daee:	e9cd 0100 	strd	r0, r1, [sp]
 800daf2:	4622      	mov	r2, r4
 800daf4:	462b      	mov	r3, r5
 800daf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dafa:	f7f4 feb5 	bl	8002868 <__aeabi_dsub>
 800dafe:	e7d0      	b.n	800daa2 <rint+0x72>
 800db00:	2e33      	cmp	r6, #51	; 0x33
 800db02:	dd08      	ble.n	800db16 <rint+0xe6>
 800db04:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800db08:	d1cb      	bne.n	800daa2 <rint+0x72>
 800db0a:	ee10 2a10 	vmov	r2, s0
 800db0e:	460b      	mov	r3, r1
 800db10:	f7f4 feac 	bl	800286c <__adddf3>
 800db14:	e7c5      	b.n	800daa2 <rint+0x72>
 800db16:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800db1a:	f04f 34ff 	mov.w	r4, #4294967295
 800db1e:	40f4      	lsrs	r4, r6
 800db20:	4220      	tst	r0, r4
 800db22:	d0be      	beq.n	800daa2 <rint+0x72>
 800db24:	0861      	lsrs	r1, r4, #1
 800db26:	420f      	tst	r7, r1
 800db28:	bf1f      	itttt	ne
 800db2a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800db2e:	ea27 0101 	bicne.w	r1, r7, r1
 800db32:	4132      	asrne	r2, r6
 800db34:	430a      	orrne	r2, r1
 800db36:	e7cf      	b.n	800dad8 <rint+0xa8>
 800db38:	0803c438 	.word	0x0803c438
 800db3c:	000fffff 	.word	0x000fffff

0800db40 <scalbn>:
 800db40:	b570      	push	{r4, r5, r6, lr}
 800db42:	ec55 4b10 	vmov	r4, r5, d0
 800db46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800db4a:	4606      	mov	r6, r0
 800db4c:	462b      	mov	r3, r5
 800db4e:	b9b2      	cbnz	r2, 800db7e <scalbn+0x3e>
 800db50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800db54:	4323      	orrs	r3, r4
 800db56:	d03c      	beq.n	800dbd2 <scalbn+0x92>
 800db58:	2200      	movs	r2, #0
 800db5a:	4b33      	ldr	r3, [pc, #204]	; (800dc28 <scalbn+0xe8>)
 800db5c:	4629      	mov	r1, r5
 800db5e:	ee10 0a10 	vmov	r0, s0
 800db62:	f7f5 f835 	bl	8002bd0 <__aeabi_dmul>
 800db66:	4a31      	ldr	r2, [pc, #196]	; (800dc2c <scalbn+0xec>)
 800db68:	4296      	cmp	r6, r2
 800db6a:	4604      	mov	r4, r0
 800db6c:	460d      	mov	r5, r1
 800db6e:	460b      	mov	r3, r1
 800db70:	da13      	bge.n	800db9a <scalbn+0x5a>
 800db72:	a329      	add	r3, pc, #164	; (adr r3, 800dc18 <scalbn+0xd8>)
 800db74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db78:	f7f5 f82a 	bl	8002bd0 <__aeabi_dmul>
 800db7c:	e00a      	b.n	800db94 <scalbn+0x54>
 800db7e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800db82:	428a      	cmp	r2, r1
 800db84:	d10c      	bne.n	800dba0 <scalbn+0x60>
 800db86:	ee10 2a10 	vmov	r2, s0
 800db8a:	462b      	mov	r3, r5
 800db8c:	4620      	mov	r0, r4
 800db8e:	4629      	mov	r1, r5
 800db90:	f7f4 fe6c 	bl	800286c <__adddf3>
 800db94:	4604      	mov	r4, r0
 800db96:	460d      	mov	r5, r1
 800db98:	e01b      	b.n	800dbd2 <scalbn+0x92>
 800db9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800db9e:	3a36      	subs	r2, #54	; 0x36
 800dba0:	4432      	add	r2, r6
 800dba2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dba6:	428a      	cmp	r2, r1
 800dba8:	dd0b      	ble.n	800dbc2 <scalbn+0x82>
 800dbaa:	ec45 4b11 	vmov	d1, r4, r5
 800dbae:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800dc20 <scalbn+0xe0>
 800dbb2:	f000 fbbd 	bl	800e330 <copysign>
 800dbb6:	a31a      	add	r3, pc, #104	; (adr r3, 800dc20 <scalbn+0xe0>)
 800dbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbc:	ec51 0b10 	vmov	r0, r1, d0
 800dbc0:	e7da      	b.n	800db78 <scalbn+0x38>
 800dbc2:	2a00      	cmp	r2, #0
 800dbc4:	dd08      	ble.n	800dbd8 <scalbn+0x98>
 800dbc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dbca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dbce:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dbd2:	ec45 4b10 	vmov	d0, r4, r5
 800dbd6:	bd70      	pop	{r4, r5, r6, pc}
 800dbd8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dbdc:	da0d      	bge.n	800dbfa <scalbn+0xba>
 800dbde:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dbe2:	429e      	cmp	r6, r3
 800dbe4:	ec45 4b11 	vmov	d1, r4, r5
 800dbe8:	dce1      	bgt.n	800dbae <scalbn+0x6e>
 800dbea:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800dc18 <scalbn+0xd8>
 800dbee:	f000 fb9f 	bl	800e330 <copysign>
 800dbf2:	a309      	add	r3, pc, #36	; (adr r3, 800dc18 <scalbn+0xd8>)
 800dbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf8:	e7e0      	b.n	800dbbc <scalbn+0x7c>
 800dbfa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dbfe:	3236      	adds	r2, #54	; 0x36
 800dc00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dc04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dc08:	4620      	mov	r0, r4
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	4b08      	ldr	r3, [pc, #32]	; (800dc30 <scalbn+0xf0>)
 800dc10:	e7b2      	b.n	800db78 <scalbn+0x38>
 800dc12:	bf00      	nop
 800dc14:	f3af 8000 	nop.w
 800dc18:	c2f8f359 	.word	0xc2f8f359
 800dc1c:	01a56e1f 	.word	0x01a56e1f
 800dc20:	8800759c 	.word	0x8800759c
 800dc24:	7e37e43c 	.word	0x7e37e43c
 800dc28:	43500000 	.word	0x43500000
 800dc2c:	ffff3cb0 	.word	0xffff3cb0
 800dc30:	3c900000 	.word	0x3c900000

0800dc34 <expm1f>:
 800dc34:	ee10 2a10 	vmov	r2, s0
 800dc38:	4985      	ldr	r1, [pc, #532]	; (800de50 <expm1f+0x21c>)
 800dc3a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800dc3e:	428b      	cmp	r3, r1
 800dc40:	d924      	bls.n	800dc8c <expm1f+0x58>
 800dc42:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dc46:	d902      	bls.n	800dc4e <expm1f+0x1a>
 800dc48:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dc4c:	4770      	bx	lr
 800dc4e:	d106      	bne.n	800dc5e <expm1f+0x2a>
 800dc50:	2a00      	cmp	r2, #0
 800dc52:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800dc56:	bfb8      	it	lt
 800dc58:	eeb0 0a67 	vmovlt.f32	s0, s15
 800dc5c:	4770      	bx	lr
 800dc5e:	2a00      	cmp	r2, #0
 800dc60:	db07      	blt.n	800dc72 <expm1f+0x3e>
 800dc62:	497c      	ldr	r1, [pc, #496]	; (800de54 <expm1f+0x220>)
 800dc64:	428b      	cmp	r3, r1
 800dc66:	d963      	bls.n	800dd30 <expm1f+0xfc>
 800dc68:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800de58 <expm1f+0x224>
 800dc6c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800dc70:	4770      	bx	lr
 800dc72:	eddf 7a7a 	vldr	s15, [pc, #488]	; 800de5c <expm1f+0x228>
 800dc76:	ee70 7a27 	vadd.f32	s15, s0, s15
 800dc7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc82:	f140 80dd 	bpl.w	800de40 <expm1f+0x20c>
 800dc86:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800dc8a:	4770      	bx	lr
 800dc8c:	4974      	ldr	r1, [pc, #464]	; (800de60 <expm1f+0x22c>)
 800dc8e:	428b      	cmp	r3, r1
 800dc90:	d96d      	bls.n	800dd6e <expm1f+0x13a>
 800dc92:	4974      	ldr	r1, [pc, #464]	; (800de64 <expm1f+0x230>)
 800dc94:	428b      	cmp	r3, r1
 800dc96:	d84b      	bhi.n	800dd30 <expm1f+0xfc>
 800dc98:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800de68 <expm1f+0x234>
 800dc9c:	2a00      	cmp	r2, #0
 800dc9e:	bfa7      	ittee	ge
 800dca0:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800dca4:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800de6c <expm1f+0x238>
 800dca8:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800de70 <expm1f+0x23c>
 800dcac:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800dcb0:	bfac      	ite	ge
 800dcb2:	2301      	movge	r3, #1
 800dcb4:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcb8:	ee37 0a67 	vsub.f32	s0, s14, s15
 800dcbc:	ee37 7a40 	vsub.f32	s14, s14, s0
 800dcc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dcc4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800dcc8:	ee20 5a25 	vmul.f32	s10, s0, s11
 800dccc:	eddf 6a69 	vldr	s13, [pc, #420]	; 800de74 <expm1f+0x240>
 800dcd0:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800de78 <expm1f+0x244>
 800dcd4:	ee20 7a05 	vmul.f32	s14, s0, s10
 800dcd8:	eea7 6a26 	vfma.f32	s12, s14, s13
 800dcdc:	eddf 6a67 	vldr	s13, [pc, #412]	; 800de7c <expm1f+0x248>
 800dce0:	eee7 6a06 	vfma.f32	s13, s14, s12
 800dce4:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800de80 <expm1f+0x24c>
 800dce8:	eea7 6a26 	vfma.f32	s12, s14, s13
 800dcec:	eddf 6a65 	vldr	s13, [pc, #404]	; 800de84 <expm1f+0x250>
 800dcf0:	eee7 6a06 	vfma.f32	s13, s14, s12
 800dcf4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800dcf8:	eef0 4a46 	vmov.f32	s9, s12
 800dcfc:	eee7 4a26 	vfma.f32	s9, s14, s13
 800dd00:	eef0 6a64 	vmov.f32	s13, s9
 800dd04:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800dd08:	eee5 4a66 	vfms.f32	s9, s10, s13
 800dd0c:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800dd10:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800dd14:	eee0 6a64 	vfms.f32	s13, s0, s9
 800dd18:	eef0 4a66 	vmov.f32	s9, s13
 800dd1c:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800dd20:	ee66 6a87 	vmul.f32	s13, s13, s14
 800dd24:	bb8b      	cbnz	r3, 800dd8a <expm1f+0x156>
 800dd26:	eef0 7a47 	vmov.f32	s15, s14
 800dd2a:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800dd2e:	e027      	b.n	800dd80 <expm1f+0x14c>
 800dd30:	eddf 7a55 	vldr	s15, [pc, #340]	; 800de88 <expm1f+0x254>
 800dd34:	2a00      	cmp	r2, #0
 800dd36:	ee20 7a27 	vmul.f32	s14, s0, s15
 800dd3a:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800dd3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dd42:	bfb8      	it	lt
 800dd44:	eef0 7a66 	vmovlt.f32	s15, s13
 800dd48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd4c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800de68 <expm1f+0x234>
 800dd50:	eddf 6a46 	vldr	s13, [pc, #280]	; 800de6c <expm1f+0x238>
 800dd54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd58:	ee17 3a90 	vmov	r3, s15
 800dd5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd60:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800dd64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dd68:	eeb0 7a40 	vmov.f32	s14, s0
 800dd6c:	e7a4      	b.n	800dcb8 <expm1f+0x84>
 800dd6e:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800dd72:	d208      	bcs.n	800dd86 <expm1f+0x152>
 800dd74:	eddf 7a38 	vldr	s15, [pc, #224]	; 800de58 <expm1f+0x224>
 800dd78:	ee70 7a27 	vadd.f32	s15, s0, s15
 800dd7c:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800dd80:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dd84:	4770      	bx	lr
 800dd86:	2300      	movs	r3, #0
 800dd88:	e79c      	b.n	800dcc4 <expm1f+0x90>
 800dd8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800dd8e:	1c5a      	adds	r2, r3, #1
 800dd90:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800dd94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd98:	d106      	bne.n	800dda8 <expm1f+0x174>
 800dd9a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800dd9e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800dda2:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800dda6:	4770      	bx	lr
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d118      	bne.n	800ddde <expm1f+0x1aa>
 800ddac:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800ddb0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ddb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb8:	bf41      	itttt	mi
 800ddba:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800ddbe:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800ddc2:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800ddc6:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800ddca:	bf5f      	itttt	pl
 800ddcc:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800ddd0:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800ddd4:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800ddd8:	eeb0 0a46 	vmovpl.f32	s0, s12
 800dddc:	4770      	bx	lr
 800ddde:	1c5a      	adds	r2, r3, #1
 800dde0:	2a39      	cmp	r2, #57	; 0x39
 800dde2:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800dde6:	d90b      	bls.n	800de00 <expm1f+0x1cc>
 800dde8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ddec:	ee36 0a40 	vsub.f32	s0, s12, s0
 800ddf0:	ee10 3a10 	vmov	r3, s0
 800ddf4:	440b      	add	r3, r1
 800ddf6:	ee00 3a10 	vmov	s0, r3
 800ddfa:	ee30 0a46 	vsub.f32	s0, s0, s12
 800ddfe:	4770      	bx	lr
 800de00:	2b16      	cmp	r3, #22
 800de02:	dc11      	bgt.n	800de28 <expm1f+0x1f4>
 800de04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800de08:	fa42 f303 	asr.w	r3, r2, r3
 800de0c:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800de10:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800de14:	ee07 3a90 	vmov	s15, r3
 800de18:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800de1c:	ee10 3a10 	vmov	r3, s0
 800de20:	440b      	add	r3, r1
 800de22:	ee00 3a10 	vmov	s0, r3
 800de26:	4770      	bx	lr
 800de28:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800de2c:	05db      	lsls	r3, r3, #23
 800de2e:	ee07 3a10 	vmov	s14, r3
 800de32:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de36:	ee30 0a67 	vsub.f32	s0, s0, s15
 800de3a:	ee30 0a06 	vadd.f32	s0, s0, s12
 800de3e:	e7ed      	b.n	800de1c <expm1f+0x1e8>
 800de40:	eddf 7a11 	vldr	s15, [pc, #68]	; 800de88 <expm1f+0x254>
 800de44:	ee20 7a27 	vmul.f32	s14, s0, s15
 800de48:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800de4c:	e77c      	b.n	800dd48 <expm1f+0x114>
 800de4e:	bf00      	nop
 800de50:	4195b843 	.word	0x4195b843
 800de54:	42b17217 	.word	0x42b17217
 800de58:	7149f2ca 	.word	0x7149f2ca
 800de5c:	0da24260 	.word	0x0da24260
 800de60:	3eb17218 	.word	0x3eb17218
 800de64:	3f851591 	.word	0x3f851591
 800de68:	3f317180 	.word	0x3f317180
 800de6c:	3717f7d1 	.word	0x3717f7d1
 800de70:	b717f7d1 	.word	0xb717f7d1
 800de74:	b457edbb 	.word	0xb457edbb
 800de78:	36867e54 	.word	0x36867e54
 800de7c:	b8a670cd 	.word	0xb8a670cd
 800de80:	3ad00d01 	.word	0x3ad00d01
 800de84:	bd088889 	.word	0xbd088889
 800de88:	3fb8aa3b 	.word	0x3fb8aa3b

0800de8c <fabsf>:
 800de8c:	ee10 3a10 	vmov	r3, s0
 800de90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de94:	ee00 3a10 	vmov	s0, r3
 800de98:	4770      	bx	lr

0800de9a <finitef>:
 800de9a:	ee10 3a10 	vmov	r3, s0
 800de9e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800dea2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800dea6:	bfac      	ite	ge
 800dea8:	2000      	movge	r0, #0
 800deaa:	2001      	movlt	r0, #1
 800deac:	4770      	bx	lr
	...

0800deb0 <nanf>:
 800deb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800deb8 <nanf+0x8>
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	7fc00000 	.word	0x7fc00000

0800debc <scalbnf>:
 800debc:	b508      	push	{r3, lr}
 800debe:	ee10 2a10 	vmov	r2, s0
 800dec2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800dec6:	ed2d 8b02 	vpush	{d8}
 800deca:	eef0 0a40 	vmov.f32	s1, s0
 800dece:	d004      	beq.n	800deda <scalbnf+0x1e>
 800ded0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ded4:	d306      	bcc.n	800dee4 <scalbnf+0x28>
 800ded6:	ee70 0a00 	vadd.f32	s1, s0, s0
 800deda:	ecbd 8b02 	vpop	{d8}
 800dede:	eeb0 0a60 	vmov.f32	s0, s1
 800dee2:	bd08      	pop	{r3, pc}
 800dee4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dee8:	d21c      	bcs.n	800df24 <scalbnf+0x68>
 800deea:	4b1f      	ldr	r3, [pc, #124]	; (800df68 <scalbnf+0xac>)
 800deec:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800df6c <scalbnf+0xb0>
 800def0:	4298      	cmp	r0, r3
 800def2:	ee60 0a27 	vmul.f32	s1, s0, s15
 800def6:	db10      	blt.n	800df1a <scalbnf+0x5e>
 800def8:	ee10 2a90 	vmov	r2, s1
 800defc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800df00:	3b19      	subs	r3, #25
 800df02:	4403      	add	r3, r0
 800df04:	2bfe      	cmp	r3, #254	; 0xfe
 800df06:	dd0f      	ble.n	800df28 <scalbnf+0x6c>
 800df08:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800df70 <scalbnf+0xb4>
 800df0c:	eeb0 0a48 	vmov.f32	s0, s16
 800df10:	f000 fa1b 	bl	800e34a <copysignf>
 800df14:	ee60 0a08 	vmul.f32	s1, s0, s16
 800df18:	e7df      	b.n	800deda <scalbnf+0x1e>
 800df1a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800df74 <scalbnf+0xb8>
 800df1e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800df22:	e7da      	b.n	800deda <scalbnf+0x1e>
 800df24:	0ddb      	lsrs	r3, r3, #23
 800df26:	e7ec      	b.n	800df02 <scalbnf+0x46>
 800df28:	2b00      	cmp	r3, #0
 800df2a:	dd06      	ble.n	800df3a <scalbnf+0x7e>
 800df2c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800df30:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800df34:	ee00 3a90 	vmov	s1, r3
 800df38:	e7cf      	b.n	800deda <scalbnf+0x1e>
 800df3a:	f113 0f16 	cmn.w	r3, #22
 800df3e:	da06      	bge.n	800df4e <scalbnf+0x92>
 800df40:	f24c 3350 	movw	r3, #50000	; 0xc350
 800df44:	4298      	cmp	r0, r3
 800df46:	dcdf      	bgt.n	800df08 <scalbnf+0x4c>
 800df48:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800df74 <scalbnf+0xb8>
 800df4c:	e7de      	b.n	800df0c <scalbnf+0x50>
 800df4e:	3319      	adds	r3, #25
 800df50:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800df54:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800df58:	eddf 7a07 	vldr	s15, [pc, #28]	; 800df78 <scalbnf+0xbc>
 800df5c:	ee07 3a10 	vmov	s14, r3
 800df60:	ee67 0a27 	vmul.f32	s1, s14, s15
 800df64:	e7b9      	b.n	800deda <scalbnf+0x1e>
 800df66:	bf00      	nop
 800df68:	ffff3cb0 	.word	0xffff3cb0
 800df6c:	4c000000 	.word	0x4c000000
 800df70:	7149f2ca 	.word	0x7149f2ca
 800df74:	0da24260 	.word	0x0da24260
 800df78:	33000000 	.word	0x33000000
 800df7c:	00000000 	.word	0x00000000

0800df80 <__ieee754_log>:
 800df80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df84:	ec51 0b10 	vmov	r0, r1, d0
 800df88:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800df8c:	b087      	sub	sp, #28
 800df8e:	ee10 3a10 	vmov	r3, s0
 800df92:	460d      	mov	r5, r1
 800df94:	da27      	bge.n	800dfe6 <__ieee754_log+0x66>
 800df96:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800df9a:	4313      	orrs	r3, r2
 800df9c:	d10a      	bne.n	800dfb4 <__ieee754_log+0x34>
 800df9e:	49cc      	ldr	r1, [pc, #816]	; (800e2d0 <__ieee754_log+0x350>)
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	f7f4 ff3d 	bl	8002e24 <__aeabi_ddiv>
 800dfaa:	ec41 0b10 	vmov	d0, r0, r1
 800dfae:	b007      	add	sp, #28
 800dfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb4:	2900      	cmp	r1, #0
 800dfb6:	da07      	bge.n	800dfc8 <__ieee754_log+0x48>
 800dfb8:	ee10 2a10 	vmov	r2, s0
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	f7f4 fc53 	bl	8002868 <__aeabi_dsub>
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	e7ee      	b.n	800dfa6 <__ieee754_log+0x26>
 800dfc8:	4bc2      	ldr	r3, [pc, #776]	; (800e2d4 <__ieee754_log+0x354>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f7f4 fe00 	bl	8002bd0 <__aeabi_dmul>
 800dfd0:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800dfd4:	460d      	mov	r5, r1
 800dfd6:	4ac0      	ldr	r2, [pc, #768]	; (800e2d8 <__ieee754_log+0x358>)
 800dfd8:	4295      	cmp	r5, r2
 800dfda:	dd06      	ble.n	800dfea <__ieee754_log+0x6a>
 800dfdc:	4602      	mov	r2, r0
 800dfde:	460b      	mov	r3, r1
 800dfe0:	f7f4 fc44 	bl	800286c <__adddf3>
 800dfe4:	e7e1      	b.n	800dfaa <__ieee754_log+0x2a>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	e7f5      	b.n	800dfd6 <__ieee754_log+0x56>
 800dfea:	152c      	asrs	r4, r5, #20
 800dfec:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800dff0:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dff4:	441c      	add	r4, r3
 800dff6:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800dffa:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800dffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e002:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800e006:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800e00a:	ea42 0105 	orr.w	r1, r2, r5
 800e00e:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e012:	2200      	movs	r2, #0
 800e014:	4bb1      	ldr	r3, [pc, #708]	; (800e2dc <__ieee754_log+0x35c>)
 800e016:	f7f4 fc27 	bl	8002868 <__aeabi_dsub>
 800e01a:	1cab      	adds	r3, r5, #2
 800e01c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e020:	2b02      	cmp	r3, #2
 800e022:	4682      	mov	sl, r0
 800e024:	468b      	mov	fp, r1
 800e026:	f04f 0200 	mov.w	r2, #0
 800e02a:	dc5b      	bgt.n	800e0e4 <__ieee754_log+0x164>
 800e02c:	2300      	movs	r3, #0
 800e02e:	f7f5 f837 	bl	80030a0 <__aeabi_dcmpeq>
 800e032:	b1d0      	cbz	r0, 800e06a <__ieee754_log+0xea>
 800e034:	2c00      	cmp	r4, #0
 800e036:	f000 8170 	beq.w	800e31a <__ieee754_log+0x39a>
 800e03a:	4620      	mov	r0, r4
 800e03c:	f7f4 fd62 	bl	8002b04 <__aeabi_i2d>
 800e040:	a38f      	add	r3, pc, #572	; (adr r3, 800e280 <__ieee754_log+0x300>)
 800e042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e046:	4606      	mov	r6, r0
 800e048:	460f      	mov	r7, r1
 800e04a:	f7f4 fdc1 	bl	8002bd0 <__aeabi_dmul>
 800e04e:	a38e      	add	r3, pc, #568	; (adr r3, 800e288 <__ieee754_log+0x308>)
 800e050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e054:	4604      	mov	r4, r0
 800e056:	460d      	mov	r5, r1
 800e058:	4630      	mov	r0, r6
 800e05a:	4639      	mov	r1, r7
 800e05c:	f7f4 fdb8 	bl	8002bd0 <__aeabi_dmul>
 800e060:	4602      	mov	r2, r0
 800e062:	460b      	mov	r3, r1
 800e064:	4620      	mov	r0, r4
 800e066:	4629      	mov	r1, r5
 800e068:	e7ba      	b.n	800dfe0 <__ieee754_log+0x60>
 800e06a:	a389      	add	r3, pc, #548	; (adr r3, 800e290 <__ieee754_log+0x310>)
 800e06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e070:	4650      	mov	r0, sl
 800e072:	4659      	mov	r1, fp
 800e074:	f7f4 fdac 	bl	8002bd0 <__aeabi_dmul>
 800e078:	4602      	mov	r2, r0
 800e07a:	460b      	mov	r3, r1
 800e07c:	2000      	movs	r0, #0
 800e07e:	4998      	ldr	r1, [pc, #608]	; (800e2e0 <__ieee754_log+0x360>)
 800e080:	f7f4 fbf2 	bl	8002868 <__aeabi_dsub>
 800e084:	4652      	mov	r2, sl
 800e086:	4606      	mov	r6, r0
 800e088:	460f      	mov	r7, r1
 800e08a:	465b      	mov	r3, fp
 800e08c:	4650      	mov	r0, sl
 800e08e:	4659      	mov	r1, fp
 800e090:	f7f4 fd9e 	bl	8002bd0 <__aeabi_dmul>
 800e094:	4602      	mov	r2, r0
 800e096:	460b      	mov	r3, r1
 800e098:	4630      	mov	r0, r6
 800e09a:	4639      	mov	r1, r7
 800e09c:	f7f4 fd98 	bl	8002bd0 <__aeabi_dmul>
 800e0a0:	4606      	mov	r6, r0
 800e0a2:	460f      	mov	r7, r1
 800e0a4:	b934      	cbnz	r4, 800e0b4 <__ieee754_log+0x134>
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	4650      	mov	r0, sl
 800e0ac:	4659      	mov	r1, fp
 800e0ae:	f7f4 fbdb 	bl	8002868 <__aeabi_dsub>
 800e0b2:	e77a      	b.n	800dfaa <__ieee754_log+0x2a>
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f7f4 fd25 	bl	8002b04 <__aeabi_i2d>
 800e0ba:	a371      	add	r3, pc, #452	; (adr r3, 800e280 <__ieee754_log+0x300>)
 800e0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c0:	4680      	mov	r8, r0
 800e0c2:	4689      	mov	r9, r1
 800e0c4:	f7f4 fd84 	bl	8002bd0 <__aeabi_dmul>
 800e0c8:	a36f      	add	r3, pc, #444	; (adr r3, 800e288 <__ieee754_log+0x308>)
 800e0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	460d      	mov	r5, r1
 800e0d2:	4640      	mov	r0, r8
 800e0d4:	4649      	mov	r1, r9
 800e0d6:	f7f4 fd7b 	bl	8002bd0 <__aeabi_dmul>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	460b      	mov	r3, r1
 800e0de:	4630      	mov	r0, r6
 800e0e0:	4639      	mov	r1, r7
 800e0e2:	e0b2      	b.n	800e24a <__ieee754_log+0x2ca>
 800e0e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e0e8:	f7f4 fbc0 	bl	800286c <__adddf3>
 800e0ec:	4602      	mov	r2, r0
 800e0ee:	460b      	mov	r3, r1
 800e0f0:	4650      	mov	r0, sl
 800e0f2:	4659      	mov	r1, fp
 800e0f4:	f7f4 fe96 	bl	8002e24 <__aeabi_ddiv>
 800e0f8:	e9cd 0100 	strd	r0, r1, [sp]
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	f7f4 fd01 	bl	8002b04 <__aeabi_i2d>
 800e102:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e10a:	4610      	mov	r0, r2
 800e10c:	4619      	mov	r1, r3
 800e10e:	f7f4 fd5f 	bl	8002bd0 <__aeabi_dmul>
 800e112:	4602      	mov	r2, r0
 800e114:	460b      	mov	r3, r1
 800e116:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e11a:	f7f4 fd59 	bl	8002bd0 <__aeabi_dmul>
 800e11e:	a35e      	add	r3, pc, #376	; (adr r3, 800e298 <__ieee754_log+0x318>)
 800e120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e124:	4606      	mov	r6, r0
 800e126:	460f      	mov	r7, r1
 800e128:	f7f4 fd52 	bl	8002bd0 <__aeabi_dmul>
 800e12c:	a35c      	add	r3, pc, #368	; (adr r3, 800e2a0 <__ieee754_log+0x320>)
 800e12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e132:	f7f4 fb9b 	bl	800286c <__adddf3>
 800e136:	4632      	mov	r2, r6
 800e138:	463b      	mov	r3, r7
 800e13a:	f7f4 fd49 	bl	8002bd0 <__aeabi_dmul>
 800e13e:	a35a      	add	r3, pc, #360	; (adr r3, 800e2a8 <__ieee754_log+0x328>)
 800e140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e144:	f7f4 fb92 	bl	800286c <__adddf3>
 800e148:	4632      	mov	r2, r6
 800e14a:	463b      	mov	r3, r7
 800e14c:	f7f4 fd40 	bl	8002bd0 <__aeabi_dmul>
 800e150:	a357      	add	r3, pc, #348	; (adr r3, 800e2b0 <__ieee754_log+0x330>)
 800e152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e156:	f7f4 fb89 	bl	800286c <__adddf3>
 800e15a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e15e:	f7f4 fd37 	bl	8002bd0 <__aeabi_dmul>
 800e162:	a355      	add	r3, pc, #340	; (adr r3, 800e2b8 <__ieee754_log+0x338>)
 800e164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e168:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e16c:	4630      	mov	r0, r6
 800e16e:	4639      	mov	r1, r7
 800e170:	f7f4 fd2e 	bl	8002bd0 <__aeabi_dmul>
 800e174:	a352      	add	r3, pc, #328	; (adr r3, 800e2c0 <__ieee754_log+0x340>)
 800e176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17a:	f7f4 fb77 	bl	800286c <__adddf3>
 800e17e:	4632      	mov	r2, r6
 800e180:	463b      	mov	r3, r7
 800e182:	f7f4 fd25 	bl	8002bd0 <__aeabi_dmul>
 800e186:	a350      	add	r3, pc, #320	; (adr r3, 800e2c8 <__ieee754_log+0x348>)
 800e188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18c:	f7f4 fb6e 	bl	800286c <__adddf3>
 800e190:	4632      	mov	r2, r6
 800e192:	463b      	mov	r3, r7
 800e194:	f7f4 fd1c 	bl	8002bd0 <__aeabi_dmul>
 800e198:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 800e19c:	4602      	mov	r2, r0
 800e19e:	460b      	mov	r3, r1
 800e1a0:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800e1a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1a8:	f7f4 fb60 	bl	800286c <__adddf3>
 800e1ac:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 800e1b0:	3551      	adds	r5, #81	; 0x51
 800e1b2:	ea45 0508 	orr.w	r5, r5, r8
 800e1b6:	2d00      	cmp	r5, #0
 800e1b8:	4606      	mov	r6, r0
 800e1ba:	460f      	mov	r7, r1
 800e1bc:	dd50      	ble.n	800e260 <__ieee754_log+0x2e0>
 800e1be:	2200      	movs	r2, #0
 800e1c0:	4b47      	ldr	r3, [pc, #284]	; (800e2e0 <__ieee754_log+0x360>)
 800e1c2:	4650      	mov	r0, sl
 800e1c4:	4659      	mov	r1, fp
 800e1c6:	f7f4 fd03 	bl	8002bd0 <__aeabi_dmul>
 800e1ca:	4652      	mov	r2, sl
 800e1cc:	465b      	mov	r3, fp
 800e1ce:	f7f4 fcff 	bl	8002bd0 <__aeabi_dmul>
 800e1d2:	4680      	mov	r8, r0
 800e1d4:	4689      	mov	r9, r1
 800e1d6:	b994      	cbnz	r4, 800e1fe <__ieee754_log+0x27e>
 800e1d8:	4602      	mov	r2, r0
 800e1da:	460b      	mov	r3, r1
 800e1dc:	4630      	mov	r0, r6
 800e1de:	4639      	mov	r1, r7
 800e1e0:	f7f4 fb44 	bl	800286c <__adddf3>
 800e1e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1e8:	f7f4 fcf2 	bl	8002bd0 <__aeabi_dmul>
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	4640      	mov	r0, r8
 800e1f2:	4649      	mov	r1, r9
 800e1f4:	f7f4 fb38 	bl	8002868 <__aeabi_dsub>
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	e755      	b.n	800e0aa <__ieee754_log+0x12a>
 800e1fe:	a320      	add	r3, pc, #128	; (adr r3, 800e280 <__ieee754_log+0x300>)
 800e200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e208:	f7f4 fce2 	bl	8002bd0 <__aeabi_dmul>
 800e20c:	4642      	mov	r2, r8
 800e20e:	464b      	mov	r3, r9
 800e210:	4604      	mov	r4, r0
 800e212:	460d      	mov	r5, r1
 800e214:	4630      	mov	r0, r6
 800e216:	4639      	mov	r1, r7
 800e218:	f7f4 fb28 	bl	800286c <__adddf3>
 800e21c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e220:	f7f4 fcd6 	bl	8002bd0 <__aeabi_dmul>
 800e224:	a318      	add	r3, pc, #96	; (adr r3, 800e288 <__ieee754_log+0x308>)
 800e226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22a:	4606      	mov	r6, r0
 800e22c:	460f      	mov	r7, r1
 800e22e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e232:	f7f4 fccd 	bl	8002bd0 <__aeabi_dmul>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	4630      	mov	r0, r6
 800e23c:	4639      	mov	r1, r7
 800e23e:	f7f4 fb15 	bl	800286c <__adddf3>
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	4640      	mov	r0, r8
 800e248:	4649      	mov	r1, r9
 800e24a:	f7f4 fb0d 	bl	8002868 <__aeabi_dsub>
 800e24e:	4652      	mov	r2, sl
 800e250:	465b      	mov	r3, fp
 800e252:	f7f4 fb09 	bl	8002868 <__aeabi_dsub>
 800e256:	4602      	mov	r2, r0
 800e258:	460b      	mov	r3, r1
 800e25a:	4620      	mov	r0, r4
 800e25c:	4629      	mov	r1, r5
 800e25e:	e726      	b.n	800e0ae <__ieee754_log+0x12e>
 800e260:	2c00      	cmp	r4, #0
 800e262:	d13f      	bne.n	800e2e4 <__ieee754_log+0x364>
 800e264:	4602      	mov	r2, r0
 800e266:	460b      	mov	r3, r1
 800e268:	4650      	mov	r0, sl
 800e26a:	4659      	mov	r1, fp
 800e26c:	f7f4 fafc 	bl	8002868 <__aeabi_dsub>
 800e270:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e274:	f7f4 fcac 	bl	8002bd0 <__aeabi_dmul>
 800e278:	e7be      	b.n	800e1f8 <__ieee754_log+0x278>
 800e27a:	bf00      	nop
 800e27c:	f3af 8000 	nop.w
 800e280:	fee00000 	.word	0xfee00000
 800e284:	3fe62e42 	.word	0x3fe62e42
 800e288:	35793c76 	.word	0x35793c76
 800e28c:	3dea39ef 	.word	0x3dea39ef
 800e290:	55555555 	.word	0x55555555
 800e294:	3fd55555 	.word	0x3fd55555
 800e298:	df3e5244 	.word	0xdf3e5244
 800e29c:	3fc2f112 	.word	0x3fc2f112
 800e2a0:	96cb03de 	.word	0x96cb03de
 800e2a4:	3fc74664 	.word	0x3fc74664
 800e2a8:	94229359 	.word	0x94229359
 800e2ac:	3fd24924 	.word	0x3fd24924
 800e2b0:	55555593 	.word	0x55555593
 800e2b4:	3fe55555 	.word	0x3fe55555
 800e2b8:	d078c69f 	.word	0xd078c69f
 800e2bc:	3fc39a09 	.word	0x3fc39a09
 800e2c0:	1d8e78af 	.word	0x1d8e78af
 800e2c4:	3fcc71c5 	.word	0x3fcc71c5
 800e2c8:	9997fa04 	.word	0x9997fa04
 800e2cc:	3fd99999 	.word	0x3fd99999
 800e2d0:	c3500000 	.word	0xc3500000
 800e2d4:	43500000 	.word	0x43500000
 800e2d8:	7fefffff 	.word	0x7fefffff
 800e2dc:	3ff00000 	.word	0x3ff00000
 800e2e0:	3fe00000 	.word	0x3fe00000
 800e2e4:	a30e      	add	r3, pc, #56	; (adr r3, 800e320 <__ieee754_log+0x3a0>)
 800e2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2ee:	f7f4 fc6f 	bl	8002bd0 <__aeabi_dmul>
 800e2f2:	4632      	mov	r2, r6
 800e2f4:	463b      	mov	r3, r7
 800e2f6:	4604      	mov	r4, r0
 800e2f8:	460d      	mov	r5, r1
 800e2fa:	4650      	mov	r0, sl
 800e2fc:	4659      	mov	r1, fp
 800e2fe:	f7f4 fab3 	bl	8002868 <__aeabi_dsub>
 800e302:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e306:	f7f4 fc63 	bl	8002bd0 <__aeabi_dmul>
 800e30a:	a307      	add	r3, pc, #28	; (adr r3, 800e328 <__ieee754_log+0x3a8>)
 800e30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e310:	4606      	mov	r6, r0
 800e312:	460f      	mov	r7, r1
 800e314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e318:	e6dd      	b.n	800e0d6 <__ieee754_log+0x156>
 800e31a:	2000      	movs	r0, #0
 800e31c:	2100      	movs	r1, #0
 800e31e:	e644      	b.n	800dfaa <__ieee754_log+0x2a>
 800e320:	fee00000 	.word	0xfee00000
 800e324:	3fe62e42 	.word	0x3fe62e42
 800e328:	35793c76 	.word	0x35793c76
 800e32c:	3dea39ef 	.word	0x3dea39ef

0800e330 <copysign>:
 800e330:	ec53 2b10 	vmov	r2, r3, d0
 800e334:	ee11 0a90 	vmov	r0, s3
 800e338:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e33c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e340:	ea41 0300 	orr.w	r3, r1, r0
 800e344:	ec43 2b10 	vmov	d0, r2, r3
 800e348:	4770      	bx	lr

0800e34a <copysignf>:
 800e34a:	ee10 3a10 	vmov	r3, s0
 800e34e:	ee10 2a90 	vmov	r2, s1
 800e352:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e356:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e35a:	4313      	orrs	r3, r2
 800e35c:	ee00 3a10 	vmov	s0, r3
 800e360:	4770      	bx	lr
	...

0800e364 <_init>:
 800e364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e366:	bf00      	nop
 800e368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e36a:	bc08      	pop	{r3}
 800e36c:	469e      	mov	lr, r3
 800e36e:	4770      	bx	lr

0800e370 <_fini>:
 800e370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e372:	bf00      	nop
 800e374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e376:	bc08      	pop	{r3}
 800e378:	469e      	mov	lr, r3
 800e37a:	4770      	bx	lr
