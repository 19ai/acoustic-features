
acoustic_event_detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a454  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013fd0  0800a5e8  0800a5e8  0001a5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e5b8  0801e5b8  0002e5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e5c0  0801e5c0  0002e5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e5c4  0801e5c4  0002e5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  20000000  0801e5c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00012e50  200001ec  0801e7b4  000301ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2001303c  0801e7b4  0003303c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cb3c  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000047d5  00000000  00000000  0004cd58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00010a6e  00000000  00000000  0005152d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000012b8  00000000  00000000  00061fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001578  00000000  00000000  00063258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b096  00000000  00000000  000647d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000073a4  00000000  00000000  0006f866  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  00076c0a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000456c  00000000  00000000  00076cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  0007b260  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  0007b2e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a5cc 	.word	0x0800a5cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800a5cc 	.word	0x0800a5cc

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800047e:	f1a4 0401 	sub.w	r4, r4, #1
 8000482:	d1e9      	bne.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f092 0f00 	teq	r2, #0
 800062a:	bf14      	ite	ne
 800062c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000638:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800063c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000640:	e720      	b.n	8000484 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_ul2d>:
 8000644:	ea50 0201 	orrs.w	r2, r0, r1
 8000648:	bf08      	it	eq
 800064a:	4770      	bxeq	lr
 800064c:	b530      	push	{r4, r5, lr}
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	e00a      	b.n	800066a <__aeabi_l2d+0x16>

08000654 <__aeabi_l2d>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	b530      	push	{r4, r5, lr}
 800065e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000662:	d502      	bpl.n	800066a <__aeabi_l2d+0x16>
 8000664:	4240      	negs	r0, r0
 8000666:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800066a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800066e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000672:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000676:	f43f aedc 	beq.w	8000432 <__adddf3+0xe6>
 800067a:	f04f 0203 	mov.w	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	fa00 fc03 	lsl.w	ip, r0, r3
 800069a:	fa20 f002 	lsr.w	r0, r0, r2
 800069e:	fa01 fe03 	lsl.w	lr, r1, r3
 80006a2:	ea40 000e 	orr.w	r0, r0, lr
 80006a6:	fa21 f102 	lsr.w	r1, r1, r2
 80006aa:	4414      	add	r4, r2
 80006ac:	e6c1      	b.n	8000432 <__adddf3+0xe6>
 80006ae:	bf00      	nop

080006b0 <__aeabi_dmul>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006be:	bf1d      	ittte	ne
 80006c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006c4:	ea94 0f0c 	teqne	r4, ip
 80006c8:	ea95 0f0c 	teqne	r5, ip
 80006cc:	f000 f8de 	bleq	800088c <__aeabi_dmul+0x1dc>
 80006d0:	442c      	add	r4, r5
 80006d2:	ea81 0603 	eor.w	r6, r1, r3
 80006d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006e2:	bf18      	it	ne
 80006e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f0:	d038      	beq.n	8000764 <__aeabi_dmul+0xb4>
 80006f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000702:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000706:	f04f 0600 	mov.w	r6, #0
 800070a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800070e:	f09c 0f00 	teq	ip, #0
 8000712:	bf18      	it	ne
 8000714:	f04e 0e01 	orrne.w	lr, lr, #1
 8000718:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800071c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000720:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000724:	d204      	bcs.n	8000730 <__aeabi_dmul+0x80>
 8000726:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800072a:	416d      	adcs	r5, r5
 800072c:	eb46 0606 	adc.w	r6, r6, r6
 8000730:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000734:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000738:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800073c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000740:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000744:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000748:	bf88      	it	hi
 800074a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800074e:	d81e      	bhi.n	800078e <__aeabi_dmul+0xde>
 8000750:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000754:	bf08      	it	eq
 8000756:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800075a:	f150 0000 	adcs.w	r0, r0, #0
 800075e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000768:	ea46 0101 	orr.w	r1, r6, r1
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000778:	bfc2      	ittt	gt
 800077a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800077e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000782:	bd70      	popgt	{r4, r5, r6, pc}
 8000784:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000788:	f04f 0e00 	mov.w	lr, #0
 800078c:	3c01      	subs	r4, #1
 800078e:	f300 80ab 	bgt.w	80008e8 <__aeabi_dmul+0x238>
 8000792:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000796:	bfde      	ittt	le
 8000798:	2000      	movle	r0, #0
 800079a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800079e:	bd70      	pople	{r4, r5, r6, pc}
 80007a0:	f1c4 0400 	rsb	r4, r4, #0
 80007a4:	3c20      	subs	r4, #32
 80007a6:	da35      	bge.n	8000814 <__aeabi_dmul+0x164>
 80007a8:	340c      	adds	r4, #12
 80007aa:	dc1b      	bgt.n	80007e4 <__aeabi_dmul+0x134>
 80007ac:	f104 0414 	add.w	r4, r4, #20
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f305 	lsl.w	r3, r0, r5
 80007b8:	fa20 f004 	lsr.w	r0, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea40 0002 	orr.w	r0, r0, r2
 80007c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d0:	fa21 f604 	lsr.w	r6, r1, r4
 80007d4:	eb42 0106 	adc.w	r1, r2, r6
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f1c4 040c 	rsb	r4, r4, #12
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f304 	lsl.w	r3, r0, r4
 80007f0:	fa20 f005 	lsr.w	r0, r0, r5
 80007f4:	fa01 f204 	lsl.w	r2, r1, r4
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000804:	f141 0100 	adc.w	r1, r1, #0
 8000808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800080c:	bf08      	it	eq
 800080e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f1c4 0520 	rsb	r5, r4, #32
 8000818:	fa00 f205 	lsl.w	r2, r0, r5
 800081c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000820:	fa20 f304 	lsr.w	r3, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea43 0302 	orr.w	r3, r3, r2
 800082c:	fa21 f004 	lsr.w	r0, r1, r4
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	fa21 f204 	lsr.w	r2, r1, r4
 8000838:	ea20 0002 	bic.w	r0, r0, r2
 800083c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f094 0f00 	teq	r4, #0
 8000850:	d10f      	bne.n	8000872 <__aeabi_dmul+0x1c2>
 8000852:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000856:	0040      	lsls	r0, r0, #1
 8000858:	eb41 0101 	adc.w	r1, r1, r1
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	bf08      	it	eq
 8000862:	3c01      	subeq	r4, #1
 8000864:	d0f7      	beq.n	8000856 <__aeabi_dmul+0x1a6>
 8000866:	ea41 0106 	orr.w	r1, r1, r6
 800086a:	f095 0f00 	teq	r5, #0
 800086e:	bf18      	it	ne
 8000870:	4770      	bxne	lr
 8000872:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000876:	0052      	lsls	r2, r2, #1
 8000878:	eb43 0303 	adc.w	r3, r3, r3
 800087c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000880:	bf08      	it	eq
 8000882:	3d01      	subeq	r5, #1
 8000884:	d0f7      	beq.n	8000876 <__aeabi_dmul+0x1c6>
 8000886:	ea43 0306 	orr.w	r3, r3, r6
 800088a:	4770      	bx	lr
 800088c:	ea94 0f0c 	teq	r4, ip
 8000890:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000894:	bf18      	it	ne
 8000896:	ea95 0f0c 	teqne	r5, ip
 800089a:	d00c      	beq.n	80008b6 <__aeabi_dmul+0x206>
 800089c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008a6:	d1d1      	bne.n	800084c <__aeabi_dmul+0x19c>
 80008a8:	ea81 0103 	eor.w	r1, r1, r3
 80008ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b0:	f04f 0000 	mov.w	r0, #0
 80008b4:	bd70      	pop	{r4, r5, r6, pc}
 80008b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008ba:	bf06      	itte	eq
 80008bc:	4610      	moveq	r0, r2
 80008be:	4619      	moveq	r1, r3
 80008c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008c4:	d019      	beq.n	80008fa <__aeabi_dmul+0x24a>
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	d102      	bne.n	80008d2 <__aeabi_dmul+0x222>
 80008cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d0:	d113      	bne.n	80008fa <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	d105      	bne.n	80008e4 <__aeabi_dmul+0x234>
 80008d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008dc:	bf1c      	itt	ne
 80008de:	4610      	movne	r0, r2
 80008e0:	4619      	movne	r1, r3
 80008e2:	d10a      	bne.n	80008fa <__aeabi_dmul+0x24a>
 80008e4:	ea81 0103 	eor.w	r1, r1, r3
 80008e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008f4:	f04f 0000 	mov.w	r0, #0
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
 80008fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000902:	bd70      	pop	{r4, r5, r6, pc}

08000904 <__aeabi_ddiv>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800090a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800090e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000912:	bf1d      	ittte	ne
 8000914:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000918:	ea94 0f0c 	teqne	r4, ip
 800091c:	ea95 0f0c 	teqne	r5, ip
 8000920:	f000 f8a7 	bleq	8000a72 <__aeabi_ddiv+0x16e>
 8000924:	eba4 0405 	sub.w	r4, r4, r5
 8000928:	ea81 0e03 	eor.w	lr, r1, r3
 800092c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000930:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000934:	f000 8088 	beq.w	8000a48 <__aeabi_ddiv+0x144>
 8000938:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800093c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000940:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000944:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000948:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800094c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000950:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000954:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000958:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800095c:	429d      	cmp	r5, r3
 800095e:	bf08      	it	eq
 8000960:	4296      	cmpeq	r6, r2
 8000962:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000966:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800096a:	d202      	bcs.n	8000972 <__aeabi_ddiv+0x6e>
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	1ab6      	subs	r6, r6, r2
 8000974:	eb65 0503 	sbc.w	r5, r5, r3
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000982:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 000c 	orrcs.w	r0, r0, ip
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009e4:	d018      	beq.n	8000a18 <__aeabi_ddiv+0x114>
 80009e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a02:	d1c0      	bne.n	8000986 <__aeabi_ddiv+0x82>
 8000a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a08:	d10b      	bne.n	8000a22 <__aeabi_ddiv+0x11e>
 8000a0a:	ea41 0100 	orr.w	r1, r1, r0
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a16:	e7b6      	b.n	8000986 <__aeabi_ddiv+0x82>
 8000a18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a1c:	bf04      	itt	eq
 8000a1e:	4301      	orreq	r1, r0
 8000a20:	2000      	moveq	r0, #0
 8000a22:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a26:	bf88      	it	hi
 8000a28:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a2c:	f63f aeaf 	bhi.w	800078e <__aeabi_dmul+0xde>
 8000a30:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a34:	bf04      	itt	eq
 8000a36:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a3e:	f150 0000 	adcs.w	r0, r0, #0
 8000a42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a4c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a50:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a54:	bfc2      	ittt	gt
 8000a56:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a5e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a64:	f04f 0e00 	mov.w	lr, #0
 8000a68:	3c01      	subs	r4, #1
 8000a6a:	e690      	b.n	800078e <__aeabi_dmul+0xde>
 8000a6c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a70:	e68d      	b.n	800078e <__aeabi_dmul+0xde>
 8000a72:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a76:	ea94 0f0c 	teq	r4, ip
 8000a7a:	bf08      	it	eq
 8000a7c:	ea95 0f0c 	teqeq	r5, ip
 8000a80:	f43f af3b 	beq.w	80008fa <__aeabi_dmul+0x24a>
 8000a84:	ea94 0f0c 	teq	r4, ip
 8000a88:	d10a      	bne.n	8000aa0 <__aeabi_ddiv+0x19c>
 8000a8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a8e:	f47f af34 	bne.w	80008fa <__aeabi_dmul+0x24a>
 8000a92:	ea95 0f0c 	teq	r5, ip
 8000a96:	f47f af25 	bne.w	80008e4 <__aeabi_dmul+0x234>
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	e72c      	b.n	80008fa <__aeabi_dmul+0x24a>
 8000aa0:	ea95 0f0c 	teq	r5, ip
 8000aa4:	d106      	bne.n	8000ab4 <__aeabi_ddiv+0x1b0>
 8000aa6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aaa:	f43f aefd 	beq.w	80008a8 <__aeabi_dmul+0x1f8>
 8000aae:	4610      	mov	r0, r2
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	e722      	b.n	80008fa <__aeabi_dmul+0x24a>
 8000ab4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab8:	bf18      	it	ne
 8000aba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000abe:	f47f aec5 	bne.w	800084c <__aeabi_dmul+0x19c>
 8000ac2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ac6:	f47f af0d 	bne.w	80008e4 <__aeabi_dmul+0x234>
 8000aca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ace:	f47f aeeb 	bne.w	80008a8 <__aeabi_dmul+0x1f8>
 8000ad2:	e712      	b.n	80008fa <__aeabi_dmul+0x24a>

08000ad4 <__gedf2>:
 8000ad4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad8:	e006      	b.n	8000ae8 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__ledf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	e002      	b.n	8000ae8 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__cmpdf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	bf18      	it	ne
 8000afa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000afe:	d01b      	beq.n	8000b38 <__cmpdf2+0x54>
 8000b00:	b001      	add	sp, #4
 8000b02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b06:	bf0c      	ite	eq
 8000b08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b0c:	ea91 0f03 	teqne	r1, r3
 8000b10:	bf02      	ittt	eq
 8000b12:	ea90 0f02 	teqeq	r0, r2
 8000b16:	2000      	moveq	r0, #0
 8000b18:	4770      	bxeq	lr
 8000b1a:	f110 0f00 	cmn.w	r0, #0
 8000b1e:	ea91 0f03 	teq	r1, r3
 8000b22:	bf58      	it	pl
 8000b24:	4299      	cmppl	r1, r3
 8000b26:	bf08      	it	eq
 8000b28:	4290      	cmpeq	r0, r2
 8000b2a:	bf2c      	ite	cs
 8000b2c:	17d8      	asrcs	r0, r3, #31
 8000b2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b32:	f040 0001 	orr.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b40:	d102      	bne.n	8000b48 <__cmpdf2+0x64>
 8000b42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b46:	d107      	bne.n	8000b58 <__cmpdf2+0x74>
 8000b48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b50:	d1d6      	bne.n	8000b00 <__cmpdf2+0x1c>
 8000b52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b56:	d0d3      	beq.n	8000b00 <__cmpdf2+0x1c>
 8000b58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_cdrcmple>:
 8000b60:	4684      	mov	ip, r0
 8000b62:	4610      	mov	r0, r2
 8000b64:	4662      	mov	r2, ip
 8000b66:	468c      	mov	ip, r1
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4663      	mov	r3, ip
 8000b6c:	e000      	b.n	8000b70 <__aeabi_cdcmpeq>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_cdcmpeq>:
 8000b70:	b501      	push	{r0, lr}
 8000b72:	f7ff ffb7 	bl	8000ae4 <__cmpdf2>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	bf48      	it	mi
 8000b7a:	f110 0f00 	cmnmi.w	r0, #0
 8000b7e:	bd01      	pop	{r0, pc}

08000b80 <__aeabi_dcmpeq>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff fff4 	bl	8000b70 <__aeabi_cdcmpeq>
 8000b88:	bf0c      	ite	eq
 8000b8a:	2001      	moveq	r0, #1
 8000b8c:	2000      	movne	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_dcmplt>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff ffea 	bl	8000b70 <__aeabi_cdcmpeq>
 8000b9c:	bf34      	ite	cc
 8000b9e:	2001      	movcc	r0, #1
 8000ba0:	2000      	movcs	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_dcmple>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff ffe0 	bl	8000b70 <__aeabi_cdcmpeq>
 8000bb0:	bf94      	ite	ls
 8000bb2:	2001      	movls	r0, #1
 8000bb4:	2000      	movhi	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmpge>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffce 	bl	8000b60 <__aeabi_cdrcmple>
 8000bc4:	bf94      	ite	ls
 8000bc6:	2001      	movls	r0, #1
 8000bc8:	2000      	movhi	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmpgt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffc4 	bl	8000b60 <__aeabi_cdrcmple>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpun>:
 8000be4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bec:	d102      	bne.n	8000bf4 <__aeabi_dcmpun+0x10>
 8000bee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bf2:	d10a      	bne.n	8000c0a <__aeabi_dcmpun+0x26>
 8000bf4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bfc:	d102      	bne.n	8000c04 <__aeabi_dcmpun+0x20>
 8000bfe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_dcmpun+0x26>
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0001 	mov.w	r0, #1
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2iz>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c18:	d215      	bcs.n	8000c46 <__aeabi_d2iz+0x36>
 8000c1a:	d511      	bpl.n	8000c40 <__aeabi_d2iz+0x30>
 8000c1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c24:	d912      	bls.n	8000c4c <__aeabi_d2iz+0x3c>
 8000c26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c36:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d105      	bne.n	8000c58 <__aeabi_d2iz+0x48>
 8000c4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	bf08      	it	eq
 8000c52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c56:	4770      	bx	lr
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <__aeabi_d2f>:
 8000c60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c68:	bf24      	itt	cs
 8000c6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c72:	d90d      	bls.n	8000c90 <__aeabi_d2f+0x30>
 8000c74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c88:	bf08      	it	eq
 8000c8a:	f020 0001 	biceq.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c94:	d121      	bne.n	8000cda <__aeabi_d2f+0x7a>
 8000c96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c9a:	bfbc      	itt	lt
 8000c9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ca0:	4770      	bxlt	lr
 8000ca2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ca6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000caa:	f1c2 0218 	rsb	r2, r2, #24
 8000cae:	f1c2 0c20 	rsb	ip, r2, #32
 8000cb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000cba:	bf18      	it	ne
 8000cbc:	f040 0001 	orrne.w	r0, r0, #1
 8000cc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ccc:	ea40 000c 	orr.w	r0, r0, ip
 8000cd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000cd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd8:	e7cc      	b.n	8000c74 <__aeabi_d2f+0x14>
 8000cda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cde:	d107      	bne.n	8000cf0 <__aeabi_d2f+0x90>
 8000ce0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ce4:	bf1e      	ittt	ne
 8000ce6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cee:	4770      	bxne	lr
 8000cf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <__aeabi_uldivmod>:
 8000d00:	b953      	cbnz	r3, 8000d18 <__aeabi_uldivmod+0x18>
 8000d02:	b94a      	cbnz	r2, 8000d18 <__aeabi_uldivmod+0x18>
 8000d04:	2900      	cmp	r1, #0
 8000d06:	bf08      	it	eq
 8000d08:	2800      	cmpeq	r0, #0
 8000d0a:	bf1c      	itt	ne
 8000d0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d10:	f04f 30ff 	movne.w	r0, #4294967295
 8000d14:	f000 b97a 	b.w	800100c <__aeabi_idiv0>
 8000d18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d20:	f000 f806 	bl	8000d30 <__udivmoddi4>
 8000d24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2c:	b004      	add	sp, #16
 8000d2e:	4770      	bx	lr

08000d30 <__udivmoddi4>:
 8000d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d34:	468c      	mov	ip, r1
 8000d36:	460d      	mov	r5, r1
 8000d38:	4604      	mov	r4, r0
 8000d3a:	9e08      	ldr	r6, [sp, #32]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d151      	bne.n	8000de4 <__udivmoddi4+0xb4>
 8000d40:	428a      	cmp	r2, r1
 8000d42:	4617      	mov	r7, r2
 8000d44:	d96d      	bls.n	8000e22 <__udivmoddi4+0xf2>
 8000d46:	fab2 fe82 	clz	lr, r2
 8000d4a:	f1be 0f00 	cmp.w	lr, #0
 8000d4e:	d00b      	beq.n	8000d68 <__udivmoddi4+0x38>
 8000d50:	f1ce 0c20 	rsb	ip, lr, #32
 8000d54:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d58:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d5c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d60:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d64:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d68:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d6c:	0c25      	lsrs	r5, r4, #16
 8000d6e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d72:	fa1f f987 	uxth.w	r9, r7
 8000d76:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d7a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d7e:	fb08 f309 	mul.w	r3, r8, r9
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x6c>
 8000d86:	19ed      	adds	r5, r5, r7
 8000d88:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d8c:	f080 8123 	bcs.w	8000fd6 <__udivmoddi4+0x2a6>
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	f240 8120 	bls.w	8000fd6 <__udivmoddi4+0x2a6>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	443d      	add	r5, r7
 8000d9c:	1aed      	subs	r5, r5, r3
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000da4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000da8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dac:	fb00 f909 	mul.w	r9, r0, r9
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x98>
 8000db4:	19e4      	adds	r4, r4, r7
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	f080 810a 	bcs.w	8000fd2 <__udivmoddi4+0x2a2>
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	f240 8107 	bls.w	8000fd2 <__udivmoddi4+0x2a2>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 0409 	sub.w	r4, r4, r9
 8000dcc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d061      	beq.n	8000e9a <__udivmoddi4+0x16a>
 8000dd6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000dda:	2300      	movs	r3, #0
 8000ddc:	6034      	str	r4, [r6, #0]
 8000dde:	6073      	str	r3, [r6, #4]
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0xc8>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d054      	beq.n	8000e96 <__udivmoddi4+0x166>
 8000dec:	2100      	movs	r1, #0
 8000dee:	e886 0021 	stmia.w	r6, {r0, r5}
 8000df2:	4608      	mov	r0, r1
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	fab3 f183 	clz	r1, r3
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	f040 808e 	bne.w	8000f1e <__udivmoddi4+0x1ee>
 8000e02:	42ab      	cmp	r3, r5
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xdc>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 80fa 	bhi.w	8001000 <__udivmoddi4+0x2d0>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb65 0503 	sbc.w	r5, r5, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	46ac      	mov	ip, r5
 8000e16:	2e00      	cmp	r6, #0
 8000e18:	d03f      	beq.n	8000e9a <__udivmoddi4+0x16a>
 8000e1a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	b912      	cbnz	r2, 8000e2a <__udivmoddi4+0xfa>
 8000e24:	2701      	movs	r7, #1
 8000e26:	fbb7 f7f2 	udiv	r7, r7, r2
 8000e2a:	fab7 fe87 	clz	lr, r7
 8000e2e:	f1be 0f00 	cmp.w	lr, #0
 8000e32:	d134      	bne.n	8000e9e <__udivmoddi4+0x16e>
 8000e34:	1beb      	subs	r3, r5, r7
 8000e36:	0c3a      	lsrs	r2, r7, #16
 8000e38:	fa1f fc87 	uxth.w	ip, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000e42:	0c25      	lsrs	r5, r4, #16
 8000e44:	fb02 3318 	mls	r3, r2, r8, r3
 8000e48:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e4c:	fb0c f308 	mul.w	r3, ip, r8
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x134>
 8000e54:	19ed      	adds	r5, r5, r7
 8000e56:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x132>
 8000e5c:	42ab      	cmp	r3, r5
 8000e5e:	f200 80d1 	bhi.w	8001004 <__udivmoddi4+0x2d4>
 8000e62:	4680      	mov	r8, r0
 8000e64:	1aed      	subs	r5, r5, r3
 8000e66:	b2a3      	uxth	r3, r4
 8000e68:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e6c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e70:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e74:	fb0c fc00 	mul.w	ip, ip, r0
 8000e78:	45a4      	cmp	ip, r4
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x15c>
 8000e7c:	19e4      	adds	r4, r4, r7
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x15a>
 8000e84:	45a4      	cmp	ip, r4
 8000e86:	f200 80b8 	bhi.w	8000ffa <__udivmoddi4+0x2ca>
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	eba4 040c 	sub.w	r4, r4, ip
 8000e90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e94:	e79d      	b.n	8000dd2 <__udivmoddi4+0xa2>
 8000e96:	4631      	mov	r1, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	f1ce 0420 	rsb	r4, lr, #32
 8000ea2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000ea6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000eaa:	fa20 f804 	lsr.w	r8, r0, r4
 8000eae:	0c3a      	lsrs	r2, r7, #16
 8000eb0:	fa25 f404 	lsr.w	r4, r5, r4
 8000eb4:	ea48 0803 	orr.w	r8, r8, r3
 8000eb8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000ebc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ec0:	fb02 4411 	mls	r4, r2, r1, r4
 8000ec4:	fa1f fc87 	uxth.w	ip, r7
 8000ec8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000ecc:	fb01 f30c 	mul.w	r3, r1, ip
 8000ed0:	42ab      	cmp	r3, r5
 8000ed2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ed6:	d909      	bls.n	8000eec <__udivmoddi4+0x1bc>
 8000ed8:	19ed      	adds	r5, r5, r7
 8000eda:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ede:	f080 808a 	bcs.w	8000ff6 <__udivmoddi4+0x2c6>
 8000ee2:	42ab      	cmp	r3, r5
 8000ee4:	f240 8087 	bls.w	8000ff6 <__udivmoddi4+0x2c6>
 8000ee8:	3902      	subs	r1, #2
 8000eea:	443d      	add	r5, r7
 8000eec:	1aeb      	subs	r3, r5, r3
 8000eee:	fa1f f588 	uxth.w	r5, r8
 8000ef2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ef6:	fb02 3310 	mls	r3, r2, r0, r3
 8000efa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000efe:	fb00 f30c 	mul.w	r3, r0, ip
 8000f02:	42ab      	cmp	r3, r5
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1e6>
 8000f06:	19ed      	adds	r5, r5, r7
 8000f08:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0c:	d26f      	bcs.n	8000fee <__udivmoddi4+0x2be>
 8000f0e:	42ab      	cmp	r3, r5
 8000f10:	d96d      	bls.n	8000fee <__udivmoddi4+0x2be>
 8000f12:	3802      	subs	r0, #2
 8000f14:	443d      	add	r5, r7
 8000f16:	1aeb      	subs	r3, r5, r3
 8000f18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f1c:	e78f      	b.n	8000e3e <__udivmoddi4+0x10e>
 8000f1e:	f1c1 0720 	rsb	r7, r1, #32
 8000f22:	fa22 f807 	lsr.w	r8, r2, r7
 8000f26:	408b      	lsls	r3, r1
 8000f28:	fa05 f401 	lsl.w	r4, r5, r1
 8000f2c:	ea48 0303 	orr.w	r3, r8, r3
 8000f30:	fa20 fe07 	lsr.w	lr, r0, r7
 8000f34:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000f38:	40fd      	lsrs	r5, r7
 8000f3a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000f3e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000f42:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000f46:	fb0c 5519 	mls	r5, ip, r9, r5
 8000f4a:	fa1f f883 	uxth.w	r8, r3
 8000f4e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f52:	fb09 f408 	mul.w	r4, r9, r8
 8000f56:	42ac      	cmp	r4, r5
 8000f58:	fa02 f201 	lsl.w	r2, r2, r1
 8000f5c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x244>
 8000f62:	18ed      	adds	r5, r5, r3
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d243      	bcs.n	8000ff2 <__udivmoddi4+0x2c2>
 8000f6a:	42ac      	cmp	r4, r5
 8000f6c:	d941      	bls.n	8000ff2 <__udivmoddi4+0x2c2>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	441d      	add	r5, r3
 8000f74:	1b2d      	subs	r5, r5, r4
 8000f76:	fa1f fe8e 	uxth.w	lr, lr
 8000f7a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f7e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f82:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45a0      	cmp	r8, r4
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x26e>
 8000f8e:	18e4      	adds	r4, r4, r3
 8000f90:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f94:	d229      	bcs.n	8000fea <__udivmoddi4+0x2ba>
 8000f96:	45a0      	cmp	r8, r4
 8000f98:	d927      	bls.n	8000fea <__udivmoddi4+0x2ba>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	441c      	add	r4, r3
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba4 0408 	sub.w	r4, r4, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454c      	cmp	r4, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	464d      	mov	r5, r9
 8000fb0:	d315      	bcc.n	8000fde <__udivmoddi4+0x2ae>
 8000fb2:	d012      	beq.n	8000fda <__udivmoddi4+0x2aa>
 8000fb4:	b156      	cbz	r6, 8000fcc <__udivmoddi4+0x29c>
 8000fb6:	ebba 030e 	subs.w	r3, sl, lr
 8000fba:	eb64 0405 	sbc.w	r4, r4, r5
 8000fbe:	fa04 f707 	lsl.w	r7, r4, r7
 8000fc2:	40cb      	lsrs	r3, r1
 8000fc4:	431f      	orrs	r7, r3
 8000fc6:	40cc      	lsrs	r4, r1
 8000fc8:	6037      	str	r7, [r6, #0]
 8000fca:	6074      	str	r4, [r6, #4]
 8000fcc:	2100      	movs	r1, #0
 8000fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	e6f8      	b.n	8000dc8 <__udivmoddi4+0x98>
 8000fd6:	4690      	mov	r8, r2
 8000fd8:	e6e0      	b.n	8000d9c <__udivmoddi4+0x6c>
 8000fda:	45c2      	cmp	sl, r8
 8000fdc:	d2ea      	bcs.n	8000fb4 <__udivmoddi4+0x284>
 8000fde:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fe2:	eb69 0503 	sbc.w	r5, r9, r3
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7e4      	b.n	8000fb4 <__udivmoddi4+0x284>
 8000fea:	4628      	mov	r0, r5
 8000fec:	e7d7      	b.n	8000f9e <__udivmoddi4+0x26e>
 8000fee:	4640      	mov	r0, r8
 8000ff0:	e791      	b.n	8000f16 <__udivmoddi4+0x1e6>
 8000ff2:	4681      	mov	r9, r0
 8000ff4:	e7be      	b.n	8000f74 <__udivmoddi4+0x244>
 8000ff6:	4601      	mov	r1, r0
 8000ff8:	e778      	b.n	8000eec <__udivmoddi4+0x1bc>
 8000ffa:	3802      	subs	r0, #2
 8000ffc:	443c      	add	r4, r7
 8000ffe:	e745      	b.n	8000e8c <__udivmoddi4+0x15c>
 8001000:	4608      	mov	r0, r1
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xe6>
 8001004:	f1a8 0802 	sub.w	r8, r8, #2
 8001008:	443d      	add	r5, r7
 800100a:	e72b      	b.n	8000e64 <__udivmoddi4+0x134>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_InitTick+0x2c>)
{
 8001014:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001020:	f000 f892 	bl	8001148 <HAL_SYSTICK_Config>
 8001024:	4604      	mov	r4, r0
 8001026:	b938      	cbnz	r0, 8001038 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001028:	4602      	mov	r2, r0
 800102a:	4629      	mov	r1, r5
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f84a 	bl	80010c8 <HAL_NVIC_SetPriority>
 8001034:	4620      	mov	r0, r4
 8001036:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8001038:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800103a:	bd38      	pop	{r3, r4, r5, pc}
 800103c:	20000014 	.word	0x20000014

08001040 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4a09      	ldr	r2, [pc, #36]	; (8001068 <HAL_Init+0x28>)
 8001042:	6813      	ldr	r3, [r2, #0]
 8001044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001048:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104e:	f000 f829 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff ffdc 	bl	8001010 <HAL_InitTick>
 8001058:	4604      	mov	r4, r0
 800105a:	b918      	cbnz	r0, 8001064 <HAL_Init+0x24>
    HAL_MspInit();
 800105c:	f003 fbd2 	bl	8004804 <HAL_MspInit>
}
 8001060:	4620      	mov	r0, r4
 8001062:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001064:	2401      	movs	r4, #1
 8001066:	e7fb      	b.n	8001060 <HAL_Init+0x20>
 8001068:	40022000 	.word	0x40022000

0800106c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800106c:	4a02      	ldr	r2, [pc, #8]	; (8001078 <HAL_IncTick+0xc>)
 800106e:	6813      	ldr	r3, [r2, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20012ca8 	.word	0x20012ca8

0800107c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800107c:	4b01      	ldr	r3, [pc, #4]	; (8001084 <HAL_GetTick+0x8>)
 800107e:	6818      	ldr	r0, [r3, #0]
}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20012ca8 	.word	0x20012ca8

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b538      	push	{r3, r4, r5, lr}
 800108a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff fff6 	bl	800107c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001090:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001092:	4605      	mov	r5, r0
  {
    wait++;
 8001094:	bf18      	it	ne
 8001096:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001098:	f7ff fff0 	bl	800107c <HAL_GetTick>
 800109c:	1b40      	subs	r0, r0, r5
 800109e:	4284      	cmp	r4, r0
 80010a0:	d8fa      	bhi.n	8001098 <HAL_Delay+0x10>
  {
  }
}
 80010a2:	bd38      	pop	{r3, r4, r5, pc}

080010a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80010a6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010ac:	041b      	lsls	r3, r3, #16
 80010ae:	0c1b      	lsrs	r3, r3, #16
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010b4:	0200      	lsls	r0, r0, #8
 80010b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80010be:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80010c0:	60d3      	str	r3, [r2, #12]
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ca:	b530      	push	{r4, r5, lr}
 80010cc:	68dc      	ldr	r4, [r3, #12]
 80010ce:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	2b04      	cmp	r3, #4
 80010da:	bf28      	it	cs
 80010dc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 0501 	mov.w	r5, #1
 80010e4:	fa05 f303 	lsl.w	r3, r5, r3
 80010e8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ec:	bf8c      	ite	hi
 80010ee:	3c03      	subhi	r4, #3
 80010f0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f2:	4019      	ands	r1, r3
 80010f4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f6:	fa05 f404 	lsl.w	r4, r5, r4
 80010fa:	3c01      	subs	r4, #1
 80010fc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80010fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	ea42 0201 	orr.w	r2, r2, r1
 8001104:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	bfaf      	iteee	ge
 800110a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	f000 000f 	andlt.w	r0, r0, #15
 8001112:	4b06      	ldrlt	r3, [pc, #24]	; (800112c <HAL_NVIC_SetPriority+0x64>)
 8001114:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	bfa5      	ittet	ge
 8001118:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800111c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001124:	bd30      	pop	{r4, r5, pc}
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00
 800112c:	e000ed14 	.word	0xe000ed14

08001130 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001130:	0942      	lsrs	r2, r0, #5
 8001132:	2301      	movs	r3, #1
 8001134:	f000 001f 	and.w	r0, r0, #31
 8001138:	fa03 f000 	lsl.w	r0, r3, r0
 800113c:	4b01      	ldr	r3, [pc, #4]	; (8001144 <HAL_NVIC_EnableIRQ+0x14>)
 800113e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100

08001148 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	3801      	subs	r0, #1
 800114a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800114e:	d20a      	bcs.n	8001166 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001154:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	21f0      	movs	r1, #240	; 0xf0
 8001158:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001174:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8001176:	4604      	mov	r4, r0
 8001178:	b168      	cbz	r0, 8001196 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 800117a:	7903      	ldrb	r3, [r0, #4]
 800117c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001180:	b913      	cbnz	r3, 8001188 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001182:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001184:	f002 f958 	bl	8003438 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001188:	2302      	movs	r3, #2
 800118a:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800118c:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800118e:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001190:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001192:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8001194:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8001196:	2001      	movs	r0, #1
}
 8001198:	bd10      	pop	{r4, pc}

0800119a <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800119a:	7943      	ldrb	r3, [r0, #5]
 800119c:	2b01      	cmp	r3, #1
{
 800119e:	b530      	push	{r4, r5, lr}
 80011a0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 80011a4:	d017      	beq.n	80011d6 <HAL_DAC_Start+0x3c>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011a6:	7103      	strb	r3, [r0, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80011a8:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 80011aa:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 80011ac:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 80011ae:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 80011b0:	f001 0510 	and.w	r5, r1, #16
 80011b4:	40aa      	lsls	r2, r5
 80011b6:	4322      	orrs	r2, r4
 80011b8:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80011ba:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 80011bc:	b969      	cbnz	r1, 80011da <HAL_DAC_Start+0x40>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80011be:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 80011c2:	2a04      	cmp	r2, #4
 80011c4:	d103      	bne.n	80011ce <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80011cc:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011ce:	2301      	movs	r3, #1
 80011d0:	7103      	strb	r3, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011d2:	2300      	movs	r3, #0
 80011d4:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80011d6:	4618      	mov	r0, r3

  /* Return function status */
  return HAL_OK;
}
 80011d8:	bd30      	pop	{r4, r5, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80011da:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 80011de:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80011e2:	d1f4      	bne.n	80011ce <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	f042 0202 	orr.w	r2, r2, #2
 80011ea:	e7ef      	b.n	80011cc <HAL_DAC_Start+0x32>

080011ec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80011ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ee:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011f0:	7940      	ldrb	r0, [r0, #5]
 80011f2:	2801      	cmp	r0, #1
{
 80011f4:	460e      	mov	r6, r1
 80011f6:	f04f 0002 	mov.w	r0, #2
 80011fa:	4611      	mov	r1, r2
 80011fc:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdac);
 80011fe:	d054      	beq.n	80012aa <HAL_DAC_Start_DMA+0xbe>
 8001200:	2401      	movs	r4, #1
 8001202:	716c      	strb	r4, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001204:	7128      	strb	r0, [r5, #4]
 8001206:	682c      	ldr	r4, [r5, #0]

  if(Channel == DAC_CHANNEL_1)
 8001208:	b9e6      	cbnz	r6, 8001244 <HAL_DAC_Start_DMA+0x58>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800120a:	68a8      	ldr	r0, [r5, #8]
 800120c:	4f27      	ldr	r7, [pc, #156]	; (80012ac <HAL_DAC_Start_DMA+0xc0>)
 800120e:	62c7      	str	r7, [r0, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001210:	4f27      	ldr	r7, [pc, #156]	; (80012b0 <HAL_DAC_Start_DMA+0xc4>)
 8001212:	6307      	str	r7, [r0, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001214:	4f27      	ldr	r7, [pc, #156]	; (80012b4 <HAL_DAC_Start_DMA+0xc8>)
 8001216:	6347      	str	r7, [r0, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001218:	6827      	ldr	r7, [r4, #0]

    /* Case of use of channel 1 */
    switch(Alignment)
 800121a:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800121c:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 8001220:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 8001222:	d009      	beq.n	8001238 <HAL_DAC_Start_DMA+0x4c>
 8001224:	2a08      	cmp	r2, #8
 8001226:	d00a      	beq.n	800123e <HAL_DAC_Start_DMA+0x52>
 8001228:	2a00      	cmp	r2, #0
 800122a:	d13c      	bne.n	80012a6 <HAL_DAC_Start_DMA+0xba>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800122c:	f104 0208 	add.w	r2, r4, #8

  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001230:	6827      	ldr	r7, [r4, #0]
 8001232:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8001236:	e01a      	b.n	800126e <HAL_DAC_Start_DMA+0x82>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001238:	f104 020c 	add.w	r2, r4, #12
        break;
 800123c:	e7f8      	b.n	8001230 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800123e:	f104 0210 	add.w	r2, r4, #16
        break;
 8001242:	e7f5      	b.n	8001230 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001244:	68e8      	ldr	r0, [r5, #12]
 8001246:	4f1c      	ldr	r7, [pc, #112]	; (80012b8 <HAL_DAC_Start_DMA+0xcc>)
 8001248:	62c7      	str	r7, [r0, #44]	; 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800124a:	4f1c      	ldr	r7, [pc, #112]	; (80012bc <HAL_DAC_Start_DMA+0xd0>)
 800124c:	6307      	str	r7, [r0, #48]	; 0x30
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800124e:	4f1c      	ldr	r7, [pc, #112]	; (80012c0 <HAL_DAC_Start_DMA+0xd4>)
 8001250:	6347      	str	r7, [r0, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001252:	6827      	ldr	r7, [r4, #0]
    switch(Alignment)
 8001254:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001256:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800125a:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 800125c:	d016      	beq.n	800128c <HAL_DAC_Start_DMA+0xa0>
 800125e:	2a08      	cmp	r2, #8
 8001260:	d017      	beq.n	8001292 <HAL_DAC_Start_DMA+0xa6>
 8001262:	b9f2      	cbnz	r2, 80012a2 <HAL_DAC_Start_DMA+0xb6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001264:	f104 0214 	add.w	r2, r4, #20
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001268:	6827      	ldr	r7, [r4, #0]
 800126a:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800126e:	6027      	str	r7, [r4, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001270:	f000 faf8 	bl	8001864 <HAL_DMA_Start_IT>
    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001274:	2300      	movs	r3, #0
 8001276:	716b      	strb	r3, [r5, #5]

  if (status == HAL_OK)
 8001278:	b970      	cbnz	r0, 8001298 <HAL_DAC_Start_DMA+0xac>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800127a:	682b      	ldr	r3, [r5, #0]
 800127c:	f006 0110 	and.w	r1, r6, #16
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	2601      	movs	r6, #1
 8001284:	408e      	lsls	r6, r1
 8001286:	4316      	orrs	r6, r2
 8001288:	601e      	str	r6, [r3, #0]
 800128a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800128c:	f104 0218 	add.w	r2, r4, #24
        break;
 8001290:	e7ea      	b.n	8001268 <HAL_DAC_Start_DMA+0x7c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001292:	f104 021c 	add.w	r2, r4, #28
        break;
 8001296:	e7e7      	b.n	8001268 <HAL_DAC_Start_DMA+0x7c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001298:	692b      	ldr	r3, [r5, #16]
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	612b      	str	r3, [r5, #16]
 80012a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpreg = 0U;
 80012a2:	2200      	movs	r2, #0
 80012a4:	e7e0      	b.n	8001268 <HAL_DAC_Start_DMA+0x7c>
 80012a6:	4632      	mov	r2, r6
 80012a8:	e7c2      	b.n	8001230 <HAL_DAC_Start_DMA+0x44>
  }

  /* Return function status */
  return status;
}
 80012aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ac:	080012c7 	.word	0x080012c7
 80012b0:	080012d9 	.word	0x080012d9
 80012b4:	080012e5 	.word	0x080012e5
 80012b8:	08001415 	.word	0x08001415
 80012bc:	08001425 	.word	0x08001425
 80012c0:	0800142f 	.word	0x0800142f

080012c4 <HAL_DAC_ConvCpltCallbackCh1>:
 80012c4:	4770      	bx	lr

080012c6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80012c6:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012c8:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80012ca:	4620      	mov	r0, r4
 80012cc:	f7ff fffa 	bl	80012c4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80012d0:	2301      	movs	r3, #1
 80012d2:	7123      	strb	r3, [r4, #4]
 80012d4:	bd10      	pop	{r4, pc}

080012d6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 80012d6:	4770      	bx	lr

080012d8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80012d8:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80012da:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80012dc:	f7ff fffb 	bl	80012d6 <HAL_DAC_ConvHalfCpltCallbackCh1>
 80012e0:	bd08      	pop	{r3, pc}

080012e2 <HAL_DAC_ErrorCallbackCh1>:
 80012e2:	4770      	bx	lr

080012e4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80012e4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012e6:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80012e8:	6923      	ldr	r3, [r4, #16]
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80012f0:	4620      	mov	r0, r4
 80012f2:	f7ff fff6 	bl	80012e2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80012f6:	2301      	movs	r3, #1
 80012f8:	7123      	strb	r3, [r4, #4]
 80012fa:	bd10      	pop	{r4, pc}

080012fc <HAL_DAC_ConfigChannel>:
{
 80012fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdac);
 80012fe:	7943      	ldrb	r3, [r0, #5]
 8001300:	2b01      	cmp	r3, #1
{
 8001302:	4604      	mov	r4, r0
 8001304:	460d      	mov	r5, r1
 8001306:	4616      	mov	r6, r2
 8001308:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 800130c:	d063      	beq.n	80013d6 <HAL_DAC_ConfigChannel+0xda>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800130e:	680b      	ldr	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001310:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 8001312:	2201      	movs	r2, #1
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001314:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 8001316:	7162      	strb	r2, [r4, #5]
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001318:	d125      	bne.n	8001366 <HAL_DAC_ConfigChannel+0x6a>
    if (Channel == DAC_CHANNEL_1)
 800131a:	2e00      	cmp	r6, #0
 800131c:	d16c      	bne.n	80013f8 <HAL_DAC_ConfigChannel+0xfc>
      tickstart = HAL_GetTick();
 800131e:	f7ff fead 	bl	800107c <HAL_GetTick>
 8001322:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001328:	041b      	lsls	r3, r3, #16
 800132a:	d455      	bmi.n	80013d8 <HAL_DAC_ConfigChannel+0xdc>
      HAL_Delay(1);
 800132c:	2001      	movs	r0, #1
 800132e:	f7ff feab 	bl	8001088 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	69aa      	ldr	r2, [r5, #24]
 8001336:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001338:	6821      	ldr	r1, [r4, #0]
 800133a:	f006 0010 	and.w	r0, r6, #16
 800133e:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8001340:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001344:	4083      	lsls	r3, r0
 8001346:	ea22 0203 	bic.w	r2, r2, r3
 800134a:	69eb      	ldr	r3, [r5, #28]
 800134c:	4083      	lsls	r3, r0
 800134e:	431a      	orrs	r2, r3
 8001350:	648a      	str	r2, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001352:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001354:	22ff      	movs	r2, #255	; 0xff
 8001356:	4082      	lsls	r2, r0
 8001358:	ea23 0302 	bic.w	r3, r3, r2
 800135c:	6a2a      	ldr	r2, [r5, #32]
 800135e:	fa02 f000 	lsl.w	r0, r2, r0
 8001362:	4303      	orrs	r3, r0
 8001364:	64cb      	str	r3, [r1, #76]	; 0x4c
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001366:	692b      	ldr	r3, [r5, #16]
 8001368:	2b01      	cmp	r3, #1
 800136a:	f006 0210 	and.w	r2, r6, #16
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	d108      	bne.n	8001384 <HAL_DAC_ConfigChannel+0x88>
  tmpreg1 = hdac->Instance->CCR;
 8001372:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001374:	201f      	movs	r0, #31
 8001376:	4090      	lsls	r0, r2
 8001378:	ea21 0000 	bic.w	r0, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800137c:	6969      	ldr	r1, [r5, #20]
 800137e:	4091      	lsls	r1, r2
 8001380:	4301      	orrs	r1, r0
  hdac->Instance->CCR = tmpreg1;
 8001382:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg1 = hdac->Instance->MCR;
 8001384:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001386:	68ae      	ldr	r6, [r5, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001388:	2007      	movs	r0, #7
 800138a:	4090      	lsls	r0, r2
 800138c:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001390:	6829      	ldr	r1, [r5, #0]
 8001392:	4331      	orrs	r1, r6
 8001394:	68ee      	ldr	r6, [r5, #12]
 8001396:	4331      	orrs	r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001398:	4091      	lsls	r1, r2
 800139a:	4301      	orrs	r1, r0
  hdac->Instance->MCR = tmpreg1;
 800139c:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800139e:	6819      	ldr	r1, [r3, #0]
 80013a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013a4:	4090      	lsls	r0, r2
 80013a6:	ea21 0100 	bic.w	r1, r1, r0
 80013aa:	6019      	str	r1, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 80013ac:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80013ae:	f640 70fc 	movw	r0, #4092	; 0xffc
 80013b2:	4090      	lsls	r0, r2
 80013b4:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013b8:	6869      	ldr	r1, [r5, #4]
 80013ba:	4091      	lsls	r1, r2
 80013bc:	4301      	orrs	r1, r0
  hdac->Instance->CR = tmpreg1;
 80013be:	6019      	str	r1, [r3, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80013c0:	6819      	ldr	r1, [r3, #0]
 80013c2:	20c0      	movs	r0, #192	; 0xc0
 80013c4:	fa00 f202 	lsl.w	r2, r0, r2
 80013c8:	ea21 0202 	bic.w	r2, r1, r2
 80013cc:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hdac);
 80013ce:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80013d0:	2301      	movs	r3, #1
 80013d2:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 80013d4:	7160      	strb	r0, [r4, #5]
}
 80013d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80013d8:	f7ff fe50 	bl	800107c <HAL_GetTick>
 80013dc:	1bc0      	subs	r0, r0, r7
 80013de:	2801      	cmp	r0, #1
 80013e0:	d9a0      	bls.n	8001324 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80013e2:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80013e4:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80013e6:	f043 0308 	orr.w	r3, r3, #8
 80013ea:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80013ec:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80013ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80013f0:	f7ff fe44 	bl	800107c <HAL_GetTick>
 80013f4:	2801      	cmp	r0, #1
 80013f6:	d8f4      	bhi.n	80013e2 <HAL_DAC_ConfigChannel+0xe6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	dbf7      	blt.n	80013f0 <HAL_DAC_ConfigChannel+0xf4>
      HAL_Delay(1);
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff fe41 	bl	8001088 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001406:	6823      	ldr	r3, [r4, #0]
 8001408:	69aa      	ldr	r2, [r5, #24]
 800140a:	645a      	str	r2, [r3, #68]	; 0x44
 800140c:	e794      	b.n	8001338 <HAL_DAC_ConfigChannel+0x3c>

0800140e <HAL_DACEx_ConvCpltCallbackCh2>:
 800140e:	4770      	bx	lr

08001410 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8001410:	4770      	bx	lr

08001412 <HAL_DACEx_ErrorCallbackCh2>:
 8001412:	4770      	bx	lr

08001414 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001414:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001416:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001418:	4620      	mov	r0, r4
 800141a:	f7ff fff8 	bl	800140e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 800141e:	2301      	movs	r3, #1
 8001420:	7123      	strb	r3, [r4, #4]
 8001422:	bd10      	pop	{r4, pc}

08001424 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001424:	b508      	push	{r3, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001426:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001428:	f7ff fff2 	bl	8001410 <HAL_DACEx_ConvHalfCpltCallbackCh2>
 800142c:	bd08      	pop	{r3, pc}

0800142e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800142e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001430:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001432:	6923      	ldr	r3, [r4, #16]
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800143a:	4620      	mov	r0, r4
 800143c:	f7ff ffe9 	bl	8001412 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 8001440:	2301      	movs	r3, #1
 8001442:	7123      	strb	r3, [r4, #4]
 8001444:	bd10      	pop	{r4, pc}

08001446 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001446:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001448:	6803      	ldr	r3, [r0, #0]
 800144a:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 800144e:	b93a      	cbnz	r2, 8001460 <DFSDM_RegConvStart+0x1a>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001456:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001458:	2901      	cmp	r1, #1
 800145a:	d11c      	bne.n	8001496 <DFSDM_RegConvStart+0x50>
 800145c:	2302      	movs	r3, #2
 800145e:	e01b      	b.n	8001498 <DFSDM_RegConvStart+0x52>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800146e:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001470:	681a      	ldr	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001472:	2903      	cmp	r1, #3
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001474:	f042 0201 	orr.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800147a:	d1ed      	bne.n	8001458 <DFSDM_RegConvStart+0x12>
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800147c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800147e:	b91a      	cbnz	r2, 8001488 <DFSDM_RegConvStart+0x42>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	f042 0202 	orr.w	r2, r2, #2
 8001486:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001488:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800148c:	2b01      	cmp	r3, #1
 800148e:	bf0c      	ite	eq
 8001490:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 8001492:	2301      	movne	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001494:	6483      	str	r3, [r0, #72]	; 0x48
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001496:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001498:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 800149c:	4770      	bx	lr
	...

080014a0 <DFSDM_GetChannelFromInstance>:
  if (Instance == DFSDM1_Channel0)
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <DFSDM_GetChannelFromInstance+0x54>)
 80014a2:	4298      	cmp	r0, r3
 80014a4:	d017      	beq.n	80014d6 <DFSDM_GetChannelFromInstance+0x36>
  else if (Instance == DFSDM1_Channel1)
 80014a6:	3320      	adds	r3, #32
 80014a8:	4298      	cmp	r0, r3
 80014aa:	d016      	beq.n	80014da <DFSDM_GetChannelFromInstance+0x3a>
  else if (Instance == DFSDM1_Channel2)
 80014ac:	3320      	adds	r3, #32
 80014ae:	4298      	cmp	r0, r3
 80014b0:	d015      	beq.n	80014de <DFSDM_GetChannelFromInstance+0x3e>
  else if (Instance == DFSDM1_Channel3)
 80014b2:	3320      	adds	r3, #32
 80014b4:	4298      	cmp	r0, r3
 80014b6:	d014      	beq.n	80014e2 <DFSDM_GetChannelFromInstance+0x42>
  else if (Instance == DFSDM1_Channel4)
 80014b8:	3320      	adds	r3, #32
 80014ba:	4298      	cmp	r0, r3
 80014bc:	d013      	beq.n	80014e6 <DFSDM_GetChannelFromInstance+0x46>
  else if (Instance == DFSDM1_Channel5)
 80014be:	3320      	adds	r3, #32
 80014c0:	4298      	cmp	r0, r3
 80014c2:	d012      	beq.n	80014ea <DFSDM_GetChannelFromInstance+0x4a>
  else if (Instance == DFSDM1_Channel6)
 80014c4:	3320      	adds	r3, #32
 80014c6:	4298      	cmp	r0, r3
 80014c8:	d011      	beq.n	80014ee <DFSDM_GetChannelFromInstance+0x4e>
    channel = 7;
 80014ca:	3320      	adds	r3, #32
 80014cc:	4298      	cmp	r0, r3
 80014ce:	bf0c      	ite	eq
 80014d0:	2007      	moveq	r0, #7
 80014d2:	2000      	movne	r0, #0
 80014d4:	4770      	bx	lr
    channel = 0;
 80014d6:	2000      	movs	r0, #0
 80014d8:	4770      	bx	lr
    channel = 1;
 80014da:	2001      	movs	r0, #1
 80014dc:	4770      	bx	lr
    channel = 2;
 80014de:	2002      	movs	r0, #2
 80014e0:	4770      	bx	lr
    channel = 3;
 80014e2:	2003      	movs	r0, #3
 80014e4:	4770      	bx	lr
    channel = 4;
 80014e6:	2004      	movs	r0, #4
 80014e8:	4770      	bx	lr
    channel = 5;
 80014ea:	2005      	movs	r0, #5
 80014ec:	4770      	bx	lr
    channel = 6;
 80014ee:	2006      	movs	r0, #6
}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40016000 	.word	0x40016000

080014f8 <HAL_DFSDM_ChannelInit>:
{
 80014f8:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 80014fa:	4604      	mov	r4, r0
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d067      	beq.n	80015d0 <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001500:	6800      	ldr	r0, [r0, #0]
 8001502:	4d34      	ldr	r5, [pc, #208]	; (80015d4 <HAL_DFSDM_ChannelInit+0xdc>)
 8001504:	f7ff ffcc 	bl	80014a0 <DFSDM_GetChannelFromInstance>
 8001508:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d15f      	bne.n	80015d0 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001510:	4620      	mov	r0, r4
 8001512:	f002 f909 	bl	8003728 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8001516:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <HAL_DFSDM_ChannelInit+0xe0>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	3201      	adds	r2, #1
 800151c:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d119      	bne.n	8001558 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001524:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <HAL_DFSDM_ChannelInit+0xe4>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800152c:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68a1      	ldr	r1, [r4, #8]
 8001532:	430a      	orrs	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800153c:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800153e:	7922      	ldrb	r2, [r4, #4]
 8001540:	2a01      	cmp	r2, #1
 8001542:	d105      	bne.n	8001550 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001544:	68e1      	ldr	r1, [r4, #12]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	3901      	subs	r1, #1
 800154a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800154e:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001556:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001558:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800155a:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800155c:	6803      	ldr	r3, [r0, #0]
 800155e:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8001562:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001564:	6923      	ldr	r3, [r4, #16]
 8001566:	6802      	ldr	r2, [r0, #0]
 8001568:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 800156a:	69a1      	ldr	r1, [r4, #24]
 800156c:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800156e:	4313      	orrs	r3, r2
 8001570:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001572:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001574:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001576:	f023 030f 	bic.w	r3, r3, #15
 800157a:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800157c:	69e3      	ldr	r3, [r4, #28]
 800157e:	6802      	ldr	r2, [r0, #0]
 8001580:	430b      	orrs	r3, r1
 8001582:	4313      	orrs	r3, r2
 8001584:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001586:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001588:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800158a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800158c:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8001590:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001592:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001594:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001596:	430b      	orrs	r3, r1
 8001598:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800159c:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800159e:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80015a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80015a8:	6843      	ldr	r3, [r0, #4]
 80015aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015b4:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80015b6:	6803      	ldr	r3, [r0, #0]
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80015be:	2301      	movs	r3, #1
 80015c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80015c4:	f7ff ff6c 	bl	80014a0 <DFSDM_GetChannelFromInstance>
 80015c8:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 80015cc:	2000      	movs	r0, #0
 80015ce:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80015d0:	2001      	movs	r0, #1
}
 80015d2:	bd38      	pop	{r3, r4, r5, pc}
 80015d4:	20000208 	.word	0x20000208
 80015d8:	20000228 	.word	0x20000228
 80015dc:	40016000 	.word	0x40016000

080015e0 <HAL_DFSDM_FilterInit>:
{
 80015e0:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_filter == NULL)
 80015e2:	4604      	mov	r4, r0
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d069      	beq.n	80016bc <HAL_DFSDM_FilterInit+0xdc>
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80015e8:	6802      	ldr	r2, [r0, #0]
 80015ea:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <HAL_DFSDM_FilterInit+0xe0>)
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d105      	bne.n	80015fc <HAL_DFSDM_FilterInit+0x1c>
 80015f0:	6840      	ldr	r0, [r0, #4]
 80015f2:	2801      	cmp	r0, #1
 80015f4:	d063      	beq.n	80016be <HAL_DFSDM_FilterInit+0xde>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80015f6:	68e0      	ldr	r0, [r4, #12]
 80015f8:	2801      	cmp	r0, #1
 80015fa:	d060      	beq.n	80016be <HAL_DFSDM_FilterInit+0xde>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80015fc:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80015fe:	2201      	movs	r2, #1
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001600:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001602:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001604:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001606:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001608:	4620      	mov	r0, r4
 800160a:	f002 f807 	bl	800361c <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800160e:	6823      	ldr	r3, [r4, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001610:	7c20      	ldrb	r0, [r4, #16]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001618:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800161a:	7a22      	ldrb	r2, [r4, #8]
 800161c:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	bf0c      	ite	eq
 8001622:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001626:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 800162a:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800162c:	7a62      	ldrb	r2, [r4, #9]
 800162e:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	bf0c      	ite	eq
 8001634:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001638:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 800163c:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800163e:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001640:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001642:	f422 42ce 	bic.w	r2, r2, #26368	; 0x6700
 8001646:	f022 0208 	bic.w	r2, r2, #8
 800164a:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800164c:	2d02      	cmp	r5, #2
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800164e:	bf01      	itttt	eq
 8001650:	681a      	ldreq	r2, [r3, #0]
 8001652:	6961      	ldreq	r1, [r4, #20]
 8001654:	430a      	orreq	r2, r1
 8001656:	601a      	streq	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001658:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800165a:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800165c:	bf0c      	ite	eq
 800165e:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001662:	f022 0210 	bicne.w	r2, r2, #16
 8001666:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001668:	7c62      	ldrb	r2, [r4, #17]
 800166a:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	bf0c      	ite	eq
 8001670:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001674:	f022 0220 	bicne.w	r2, r2, #32
 8001678:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 8001680:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001684:	615a      	str	r2, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001686:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001688:	6959      	ldr	r1, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 800168a:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800168c:	430a      	orrs	r2, r1
 800168e:	69e1      	ldr	r1, [r4, #28]
 8001690:	430a      	orrs	r2, r1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001692:	6a21      	ldr	r1, [r4, #32]
 8001694:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001696:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800169a:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800169c:	6862      	ldr	r2, [r4, #4]
 800169e:	6362      	str	r2, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80016a0:	69a2      	ldr	r2, [r4, #24]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80016a2:	63a5      	str	r5, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80016a4:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80016a6:	681a      	ldr	r2, [r3, #0]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80016a8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 80016b8:	2000      	movs	r0, #0
 80016ba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80016bc:	2001      	movs	r0, #1
}
 80016be:	bd38      	pop	{r3, r4, r5, pc}
 80016c0:	40016100 	.word	0x40016100

080016c4 <HAL_DFSDM_FilterConfigRegChannel>:
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80016c4:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2bfd      	cmp	r3, #253	; 0xfd
{
 80016ce:	b510      	push	{r4, lr}
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80016d0:	d813      	bhi.n	80016fa <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80016d2:	6803      	ldr	r3, [r0, #0]
 80016d4:	681c      	ldr	r4, [r3, #0]
 80016d6:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 80016da:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80016de:	601c      	str	r4, [r3, #0]
 80016e0:	0209      	lsls	r1, r1, #8
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80016e2:	681c      	ldr	r4, [r3, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80016e4:	2a01      	cmp	r2, #1
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80016e6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 80016ea:	bf08      	it	eq
 80016ec:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80016f0:	4321      	orrs	r1, r4
 80016f2:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80016f4:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80016f6:	2000      	movs	r0, #0
 80016f8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80016fa:	2001      	movs	r0, #1
}
 80016fc:	bd10      	pop	{r4, pc}
	...

08001700 <HAL_DFSDM_FilterRegularStart_DMA>:
{
 8001700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001702:	4613      	mov	r3, r2
 8001704:	4605      	mov	r5, r0
  if ((pData == NULL) || (Length == 0U))
 8001706:	460a      	mov	r2, r1
 8001708:	b351      	cbz	r1, 8001760 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
 800170a:	b34b      	cbz	r3, 8001760 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800170c:	6807      	ldr	r7, [r0, #0]
 800170e:	6839      	ldr	r1, [r7, #0]
 8001710:	0289      	lsls	r1, r1, #10
 8001712:	d525      	bpl.n	8001760 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001714:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001716:	b949      	cbnz	r1, 800172c <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
 8001718:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800171a:	b939      	cbnz	r1, 800172c <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800171c:	6a81      	ldr	r1, [r0, #40]	; 0x28
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800171e:	69c8      	ldr	r0, [r1, #28]
 8001720:	b908      	cbnz	r0, 8001726 <HAL_DFSDM_FilterRegularStart_DMA+0x26>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001722:	2b01      	cmp	r3, #1
 8001724:	d11c      	bne.n	8001760 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001726:	69c9      	ldr	r1, [r1, #28]
 8001728:	2920      	cmp	r1, #32
 800172a:	d019      	beq.n	8001760 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800172c:	f895 604c 	ldrb.w	r6, [r5, #76]	; 0x4c
 8001730:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
 8001734:	2e01      	cmp	r6, #1
 8001736:	d113      	bne.n	8001760 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001738:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800173a:	490d      	ldr	r1, [pc, #52]	; (8001770 <HAL_DFSDM_FilterRegularStart_DMA+0x70>)
 800173c:	62c1      	str	r1, [r0, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800173e:	490d      	ldr	r1, [pc, #52]	; (8001774 <HAL_DFSDM_FilterRegularStart_DMA+0x74>)
 8001740:	6341      	str	r1, [r0, #52]	; 0x34
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001742:	69c1      	ldr	r1, [r0, #28]
 8001744:	4c0c      	ldr	r4, [pc, #48]	; (8001778 <HAL_DFSDM_FilterRegularStart_DMA+0x78>)
 8001746:	2920      	cmp	r1, #32
 8001748:	bf18      	it	ne
 800174a:	2400      	movne	r4, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800174c:	6304      	str	r4, [r0, #48]	; 0x30
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800174e:	f107 011c 	add.w	r1, r7, #28
 8001752:	f000 f887 	bl	8001864 <HAL_DMA_Start_IT>
 8001756:	4604      	mov	r4, r0
 8001758:	b120      	cbz	r0, 8001764 <HAL_DFSDM_FilterRegularStart_DMA+0x64>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800175a:	23ff      	movs	r3, #255	; 0xff
 800175c:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
    status = HAL_ERROR;
 8001760:	2401      	movs	r4, #1
 8001762:	e002      	b.n	800176a <HAL_DFSDM_FilterRegularStart_DMA+0x6a>
      DFSDM_RegConvStart(hdfsdm_filter);
 8001764:	4628      	mov	r0, r5
 8001766:	f7ff fe6e 	bl	8001446 <DFSDM_RegConvStart>
}
 800176a:	4620      	mov	r0, r4
 800176c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800176e:	bf00      	nop
 8001770:	0800177d 	.word	0x0800177d
 8001774:	08001793 	.word	0x08001793
 8001778:	08001787 	.word	0x08001787

0800177c <DFSDM_DMARegularConvCplt>:
{
 800177c:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800177e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001780:	f002 ffd8 	bl	8004734 <HAL_DFSDM_FilterRegConvCpltCallback>
 8001784:	bd08      	pop	{r3, pc}

08001786 <DFSDM_DMARegularHalfConvCplt>:
{
 8001786:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001788:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800178a:	f002 ffc1 	bl	8004710 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
 800178e:	bd08      	pop	{r3, pc}

08001790 <HAL_DFSDM_FilterErrorCallback>:
{
 8001790:	4770      	bx	lr

08001792 <DFSDM_DMAError>:
{
 8001792:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001794:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001796:	2303      	movs	r3, #3
 8001798:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800179a:	f7ff fff9 	bl	8001790 <HAL_DFSDM_FilterErrorCallback>
 800179e:	bd08      	pop	{r3, pc}

080017a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017a0:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d04e      	beq.n	8001844 <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017a6:	6801      	ldr	r1, [r0, #0]
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_DMA_Init+0xa8>)
 80017aa:	4299      	cmp	r1, r3
 80017ac:	f04f 0414 	mov.w	r4, #20
 80017b0:	d840      	bhi.n	8001834 <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017b2:	4a26      	ldr	r2, [pc, #152]	; (800184c <HAL_DMA_Init+0xac>)
 80017b4:	440a      	add	r2, r1
 80017b6:	fbb2 f2f4 	udiv	r2, r2, r4
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80017be:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80017c2:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017c4:	2302      	movs	r3, #2
 80017c6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017ca:	6884      	ldr	r4, [r0, #8]
 80017cc:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ce:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80017d0:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80017d2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d4:	432b      	orrs	r3, r5
 80017d6:	6945      	ldr	r5, [r0, #20]
 80017d8:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017da:	6985      	ldr	r5, [r0, #24]
 80017dc:	432b      	orrs	r3, r5
 80017de:	69c5      	ldr	r5, [r0, #28]
 80017e0:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e2:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017e4:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80017e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ec:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80017ee:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017f0:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 80017f4:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017f6:	d014      	beq.n	8001822 <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80017f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_DMA_Init+0xb0>)
 80017fc:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017fe:	bf0c      	ite	eq
 8001800:	4914      	ldreq	r1, [pc, #80]	; (8001854 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001802:	4915      	ldrne	r1, [pc, #84]	; (8001858 <HAL_DMA_Init+0xb8>)
 8001804:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001806:	680a      	ldr	r2, [r1, #0]
 8001808:	f003 031c 	and.w	r3, r3, #28
 800180c:	240f      	movs	r4, #15
 800180e:	409c      	lsls	r4, r3
 8001810:	ea22 0204 	bic.w	r2, r2, r4
 8001814:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001816:	6842      	ldr	r2, [r0, #4]
 8001818:	680c      	ldr	r4, [r1, #0]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	4323      	orrs	r3, r4
 8001820:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001822:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001824:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001826:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001828:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 800182c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8001830:	4618      	mov	r0, r3
 8001832:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_DMA_Init+0xbc>)
 8001836:	440b      	add	r3, r1
 8001838:	fbb3 f3f4 	udiv	r3, r3, r4
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <HAL_DMA_Init+0xc0>)
 8001842:	e7be      	b.n	80017c2 <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 8001844:	2001      	movs	r0, #1
}
 8001846:	bd30      	pop	{r4, r5, pc}
 8001848:	40020407 	.word	0x40020407
 800184c:	bffdfff8 	.word	0xbffdfff8
 8001850:	40020000 	.word	0x40020000
 8001854:	400200a8 	.word	0x400200a8
 8001858:	400204a8 	.word	0x400204a8
 800185c:	bffdfbf8 	.word	0xbffdfbf8
 8001860:	40020400 	.word	0x40020400

08001864 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001864:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001866:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800186a:	2c01      	cmp	r4, #1
 800186c:	d038      	beq.n	80018e0 <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 800186e:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8001872:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001874:	b2ed      	uxtb	r5, r5
 8001876:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8001878:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 800187c:	f04f 0600 	mov.w	r6, #0
 8001880:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8001884:	d12a      	bne.n	80018dc <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001886:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800188a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800188c:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800188e:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001890:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001892:	f026 0601 	bic.w	r6, r6, #1
 8001896:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001898:	6c46      	ldr	r6, [r0, #68]	; 0x44
 800189a:	f006 061c 	and.w	r6, r6, #28
 800189e:	40b5      	lsls	r5, r6
 80018a0:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018a2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018a4:	6883      	ldr	r3, [r0, #8]
 80018a6:	6805      	ldr	r5, [r0, #0]
 80018a8:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80018aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018ac:	bf0b      	itete	eq
 80018ae:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80018b0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80018b2:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80018b4:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80018b6:	b14b      	cbz	r3, 80018cc <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018be:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80018c0:	682b      	ldr	r3, [r5, #0]
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018c8:	2000      	movs	r0, #0
 80018ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	f023 0304 	bic.w	r3, r3, #4
 80018d2:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018d4:	6823      	ldr	r3, [r4, #0]
 80018d6:	f043 030a 	orr.w	r3, r3, #10
 80018da:	e7f0      	b.n	80018be <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 80018dc:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 80018e0:	2002      	movs	r0, #2
}
 80018e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018e4 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018e4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80018e8:	2a02      	cmp	r2, #2
{
 80018ea:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018ec:	d003      	beq.n	80018f6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ee:	2204      	movs	r2, #4
 80018f0:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80018f2:	2001      	movs	r0, #1
 80018f4:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f6:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018f8:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018fa:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 80018fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018fe:	f021 010e 	bic.w	r1, r1, #14
 8001902:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001904:	6811      	ldr	r1, [r2, #0]
 8001906:	f021 0101 	bic.w	r1, r1, #1
 800190a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800190c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800190e:	2101      	movs	r1, #1
 8001910:	f002 021c 	and.w	r2, r2, #28
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800191a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800191c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001920:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001924:	b113      	cbz	r3, 800192c <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8001926:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001928:	4620      	mov	r0, r4
 800192a:	bd10      	pop	{r4, pc}
 800192c:	4618      	mov	r0, r3
}
 800192e:	bd10      	pop	{r4, pc}

08001930 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001930:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001932:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001934:	6803      	ldr	r3, [r0, #0]
{
 8001936:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001938:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800193c:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800193e:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001940:	2404      	movs	r4, #4
 8001942:	4094      	lsls	r4, r2
 8001944:	4226      	tst	r6, r4
 8001946:	d00e      	beq.n	8001966 <HAL_DMA_IRQHandler+0x36>
 8001948:	f015 0f04 	tst.w	r5, #4
 800194c:	d00b      	beq.n	8001966 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001952:	bf5e      	ittt	pl
 8001954:	681a      	ldrpl	r2, [r3, #0]
 8001956:	f022 0204 	bicpl.w	r2, r2, #4
 800195a:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 800195c:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800195e:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001960:	b373      	cbz	r3, 80019c0 <HAL_DMA_IRQHandler+0x90>
}
 8001962:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001964:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001966:	2402      	movs	r4, #2
 8001968:	4094      	lsls	r4, r2
 800196a:	4226      	tst	r6, r4
 800196c:	d012      	beq.n	8001994 <HAL_DMA_IRQHandler+0x64>
 800196e:	f015 0f02 	tst.w	r5, #2
 8001972:	d00f      	beq.n	8001994 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	0695      	lsls	r5, r2, #26
 8001978:	d406      	bmi.n	8001988 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	f022 020a 	bic.w	r2, r2, #10
 8001980:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001982:	2301      	movs	r3, #1
 8001984:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001988:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800198a:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 800198c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001990:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001992:	e7e5      	b.n	8001960 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001994:	2408      	movs	r4, #8
 8001996:	4094      	lsls	r4, r2
 8001998:	4234      	tst	r4, r6
 800199a:	d011      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x90>
 800199c:	072c      	lsls	r4, r5, #28
 800199e:	d50f      	bpl.n	80019c0 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a0:	681c      	ldr	r4, [r3, #0]
 80019a2:	f024 040e 	bic.w	r4, r4, #14
 80019a6:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80019a8:	2301      	movs	r3, #1
 80019aa:	fa03 f202 	lsl.w	r2, r3, r2
 80019ae:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019b0:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80019b2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80019b6:	2300      	movs	r3, #0
 80019b8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80019bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80019be:	e7cf      	b.n	8001960 <HAL_DMA_IRQHandler+0x30>
}
 80019c0:	bc70      	pop	{r4, r5, r6}
 80019c2:	4770      	bx	lr

080019c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019c8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ca:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001b78 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019d0:	4c67      	ldr	r4, [pc, #412]	; (8001b70 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d2:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 80019d4:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d6:	9a01      	ldr	r2, [sp, #4]
 80019d8:	40da      	lsrs	r2, r3
 80019da:	d102      	bne.n	80019e2 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 80019dc:	b005      	add	sp, #20
 80019de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e2:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 80019e4:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e6:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 80019e8:	ea12 0e06 	ands.w	lr, r2, r6
 80019ec:	f000 80b1 	beq.w	8001b52 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f0:	684a      	ldr	r2, [r1, #4]
 80019f2:	f022 0710 	bic.w	r7, r2, #16
 80019f6:	2f02      	cmp	r7, #2
 80019f8:	d116      	bne.n	8001a28 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80019fa:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80019fe:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a02:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001a06:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a0a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001a0e:	f04f 0c0f 	mov.w	ip, #15
 8001a12:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001a16:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a1a:	690d      	ldr	r5, [r1, #16]
 8001a1c:	fa05 f50a 	lsl.w	r5, r5, sl
 8001a20:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001a24:	f8c9 5020 	str.w	r5, [r9, #32]
 8001a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a2c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001a2e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a32:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a36:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a38:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a3c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a40:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a44:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a46:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a4a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001a4c:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a50:	d811      	bhi.n	8001a76 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001a52:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a54:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a58:	68cf      	ldr	r7, [r1, #12]
 8001a5a:	fa07 f70c 	lsl.w	r7, r7, ip
 8001a5e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001a62:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a64:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a66:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a6a:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001a6e:	409f      	lsls	r7, r3
 8001a70:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001a74:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a76:	f1ba 0f03 	cmp.w	sl, #3
 8001a7a:	d107      	bne.n	8001a8c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001a7c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a7e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a82:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001a86:	409f      	lsls	r7, r3
 8001a88:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8001a8a:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001a8c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a8e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a90:	688e      	ldr	r6, [r1, #8]
 8001a92:	fa06 f60c 	lsl.w	r6, r6, ip
 8001a96:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001a98:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a9a:	00d5      	lsls	r5, r2, #3
 8001a9c:	d559      	bpl.n	8001b52 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001aa2:	f045 0501 	orr.w	r5, r5, #1
 8001aa6:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001aaa:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001aae:	f023 0603 	bic.w	r6, r3, #3
 8001ab2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001ab6:	f005 0501 	and.w	r5, r5, #1
 8001aba:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001abe:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ac0:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac4:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ac6:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ac8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001acc:	270f      	movs	r7, #15
 8001ace:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ad6:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ada:	d03c      	beq.n	8001b56 <HAL_GPIO_Init+0x192>
 8001adc:	4d25      	ldr	r5, [pc, #148]	; (8001b74 <HAL_GPIO_Init+0x1b0>)
 8001ade:	42a8      	cmp	r0, r5
 8001ae0:	d03b      	beq.n	8001b5a <HAL_GPIO_Init+0x196>
 8001ae2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ae6:	42a8      	cmp	r0, r5
 8001ae8:	d039      	beq.n	8001b5e <HAL_GPIO_Init+0x19a>
 8001aea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aee:	42a8      	cmp	r0, r5
 8001af0:	d037      	beq.n	8001b62 <HAL_GPIO_Init+0x19e>
 8001af2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	d035      	beq.n	8001b66 <HAL_GPIO_Init+0x1a2>
 8001afa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001afe:	42a8      	cmp	r0, r5
 8001b00:	d033      	beq.n	8001b6a <HAL_GPIO_Init+0x1a6>
 8001b02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b06:	42a8      	cmp	r0, r5
 8001b08:	bf14      	ite	ne
 8001b0a:	2507      	movne	r5, #7
 8001b0c:	2506      	moveq	r5, #6
 8001b0e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001b12:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b14:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001b16:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001b18:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1c:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001b1e:	bf54      	ite	pl
 8001b20:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001b22:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001b26:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001b28:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b2a:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001b2c:	bf54      	ite	pl
 8001b2e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001b30:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001b34:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001b36:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b38:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001b3a:	bf54      	ite	pl
 8001b3c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001b3e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8001b42:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001b44:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b46:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001b48:	bf54      	ite	pl
 8001b4a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001b4c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001b50:	60e5      	str	r5, [r4, #12]
    position++;
 8001b52:	3301      	adds	r3, #1
 8001b54:	e73f      	b.n	80019d6 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b56:	2500      	movs	r5, #0
 8001b58:	e7d9      	b.n	8001b0e <HAL_GPIO_Init+0x14a>
 8001b5a:	2501      	movs	r5, #1
 8001b5c:	e7d7      	b.n	8001b0e <HAL_GPIO_Init+0x14a>
 8001b5e:	2502      	movs	r5, #2
 8001b60:	e7d5      	b.n	8001b0e <HAL_GPIO_Init+0x14a>
 8001b62:	2503      	movs	r5, #3
 8001b64:	e7d3      	b.n	8001b0e <HAL_GPIO_Init+0x14a>
 8001b66:	2504      	movs	r5, #4
 8001b68:	e7d1      	b.n	8001b0e <HAL_GPIO_Init+0x14a>
 8001b6a:	2505      	movs	r5, #5
 8001b6c:	e7cf      	b.n	8001b0e <HAL_GPIO_Init+0x14a>
 8001b6e:	bf00      	nop
 8001b70:	40010400 	.word	0x40010400
 8001b74:	48000400 	.word	0x48000400
 8001b78:	40021000 	.word	0x40021000

08001b7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001b80:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001b84:	6959      	ldr	r1, [r3, #20]
 8001b86:	4201      	tst	r1, r0
 8001b88:	d002      	beq.n	8001b90 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b8a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b8c:	f7ff fff6 	bl	8001b7c <HAL_GPIO_EXTI_Callback>
 8001b90:	bd08      	pop	{r3, pc}
 8001b92:	bf00      	nop
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b98:	4b02      	ldr	r3, [pc, #8]	; (8001ba4 <HAL_PWREx_GetVoltageRange+0xc>)
 8001b9a:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001b9c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40007000 	.word	0x40007000

08001ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001baa:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb0:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001bba:	d015      	beq.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bc8:	4a10      	ldr	r2, [pc, #64]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001bca:	6811      	ldr	r1, [r2, #0]
 8001bcc:	2232      	movs	r2, #50	; 0x32
 8001bce:	434a      	muls	r2, r1
 8001bd0:	490f      	ldr	r1, [pc, #60]	; (8001c10 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001bd2:	fbb2 f2f1 	udiv	r2, r2, r1
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bda:	6958      	ldr	r0, [r3, #20]
 8001bdc:	0540      	lsls	r0, r0, #21
 8001bde:	d500      	bpl.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001be0:	b922      	cbnz	r2, 8001bec <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001be2:	694b      	ldr	r3, [r1, #20]
 8001be4:	055b      	lsls	r3, r3, #21
 8001be6:	d40d      	bmi.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001be8:	2000      	movs	r0, #0
 8001bea:	4770      	bx	lr
        wait_loop_index--;
 8001bec:	3a01      	subs	r2, #1
 8001bee:	e7f4      	b.n	8001bda <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bf0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bf4:	bf1f      	itttt	ne
 8001bf6:	681a      	ldrne	r2, [r3, #0]
 8001bf8:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001bfc:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001c00:	601a      	strne	r2, [r3, #0]
 8001c02:	e7f1      	b.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001c04:	2003      	movs	r0, #3
}
 8001c06:	4770      	bx	lr
 8001c08:	40007000 	.word	0x40007000
 8001c0c:	20000014 	.word	0x20000014
 8001c10:	000f4240 	.word	0x000f4240

08001c14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c16:	4d1e      	ldr	r5, [pc, #120]	; (8001c90 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001c18:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c1a:	00da      	lsls	r2, r3, #3
{
 8001c1c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c1e:	d518      	bpl.n	8001c52 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c20:	f7ff ffba 	bl	8001b98 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c24:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001c28:	d123      	bne.n	8001c72 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c2a:	2c80      	cmp	r4, #128	; 0x80
 8001c2c:	d929      	bls.n	8001c82 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c2e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c30:	bf8c      	ite	hi
 8001c32:	2002      	movhi	r0, #2
 8001c34:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c36:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	f023 0307 	bic.w	r3, r3, #7
 8001c3e:	4303      	orrs	r3, r0
 8001c40:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c42:	6813      	ldr	r3, [r2, #0]
 8001c44:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001c48:	1a18      	subs	r0, r3, r0
 8001c4a:	bf18      	it	ne
 8001c4c:	2001      	movne	r0, #1
 8001c4e:	b003      	add	sp, #12
 8001c50:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	65ab      	str	r3, [r5, #88]	; 0x58
 8001c5a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001c64:	f7ff ff98 	bl	8001b98 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c68:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	65ab      	str	r3, [r5, #88]	; 0x58
 8001c70:	e7d8      	b.n	8001c24 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001c72:	2c80      	cmp	r4, #128	; 0x80
 8001c74:	d807      	bhi.n	8001c86 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001c76:	d008      	beq.n	8001c8a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001c78:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001c7c:	4258      	negs	r0, r3
 8001c7e:	4158      	adcs	r0, r3
 8001c80:	e7d9      	b.n	8001c36 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c82:	2000      	movs	r0, #0
 8001c84:	e7d7      	b.n	8001c36 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c86:	2003      	movs	r0, #3
 8001c88:	e7d5      	b.n	8001c36 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c8a:	2002      	movs	r0, #2
 8001c8c:	e7d3      	b.n	8001c36 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40022000 	.word	0x40022000

08001c98 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c9a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c9c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c9e:	f012 020c 	ands.w	r2, r2, #12
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x18>
 8001ca4:	2a0c      	cmp	r2, #12
 8001ca6:	d115      	bne.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca8:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cac:	2901      	cmp	r1, #1
 8001cae:	d118      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cb0:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001cb2:	4820      	ldr	r0, [pc, #128]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cb4:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cb6:	bf55      	itete	pl
 8001cb8:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cbc:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cbe:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cc2:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001cc6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cca:	b382      	cbz	r2, 8001d2e <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ccc:	2a0c      	cmp	r2, #12
 8001cce:	d009      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x4c>
 8001cd0:	2000      	movs	r0, #0
  return sysclockfreq;
 8001cd2:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cd4:	2a04      	cmp	r2, #4
 8001cd6:	d029      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x94>
 8001cd8:	2a08      	cmp	r2, #8
 8001cda:	4817      	ldr	r0, [pc, #92]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cdc:	bf18      	it	ne
 8001cde:	2000      	movne	r0, #0
 8001ce0:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ce2:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ce4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce6:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ce8:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cec:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8001cf0:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cf2:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x6c>
 8001cf8:	2903      	cmp	r1, #3
 8001cfa:	d012      	beq.n	8001d22 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cfc:	68d9      	ldr	r1, [r3, #12]
 8001cfe:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001d02:	e003      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d04:	68d9      	ldr	r1, [r3, #12]
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d08:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d0c:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d0e:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d12:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001d16:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d18:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d1a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001d1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d20:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d22:	68d9      	ldr	r1, [r3, #12]
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d26:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001d2a:	e7ef      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001d2e:	4770      	bx	lr
 8001d30:	40021000 	.word	0x40021000
 8001d34:	0800a61c 	.word	0x0800a61c
 8001d38:	007a1200 	.word	0x007a1200
 8001d3c:	00f42400 	.word	0x00f42400

08001d40 <HAL_RCC_OscConfig>:
{
 8001d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001d44:	4605      	mov	r5, r0
 8001d46:	b918      	cbnz	r0, 8001d50 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001d48:	2001      	movs	r0, #1
}
 8001d4a:	b003      	add	sp, #12
 8001d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d50:	4ca5      	ldr	r4, [pc, #660]	; (8001fe8 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d52:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d54:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d56:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d58:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5a:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d5e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d62:	d53c      	bpl.n	8001dde <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d64:	b11e      	cbz	r6, 8001d6e <HAL_RCC_OscConfig+0x2e>
 8001d66:	2e0c      	cmp	r6, #12
 8001d68:	d163      	bne.n	8001e32 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d6a:	2f01      	cmp	r7, #1
 8001d6c:	d161      	bne.n	8001e32 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	0798      	lsls	r0, r3, #30
 8001d72:	d502      	bpl.n	8001d7a <HAL_RCC_OscConfig+0x3a>
 8001d74:	69ab      	ldr	r3, [r5, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0e6      	beq.n	8001d48 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	6a28      	ldr	r0, [r5, #32]
 8001d7e:	0719      	lsls	r1, r3, #28
 8001d80:	bf56      	itet	pl
 8001d82:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001d86:	6823      	ldrmi	r3, [r4, #0]
 8001d88:	091b      	lsrpl	r3, r3, #4
 8001d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d8e:	4283      	cmp	r3, r0
 8001d90:	d23a      	bcs.n	8001e08 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d92:	f7ff ff3f 	bl	8001c14 <RCC_SetFlashLatencyFromMSIRange>
 8001d96:	2800      	cmp	r0, #0
 8001d98:	d1d6      	bne.n	8001d48 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	f043 0308 	orr.w	r3, r3, #8
 8001da0:	6023      	str	r3, [r4, #0]
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	6a2a      	ldr	r2, [r5, #32]
 8001da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001daa:	4313      	orrs	r3, r2
 8001dac:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dae:	6863      	ldr	r3, [r4, #4]
 8001db0:	69ea      	ldr	r2, [r5, #28]
 8001db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001db6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001dba:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dbc:	f7ff ff6c 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001dc0:	68a3      	ldr	r3, [r4, #8]
 8001dc2:	4a8a      	ldr	r2, [pc, #552]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001dc8:	5cd3      	ldrb	r3, [r2, r3]
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	40d8      	lsrs	r0, r3
 8001dd0:	4b87      	ldr	r3, [pc, #540]	; (8001ff0 <HAL_RCC_OscConfig+0x2b0>)
 8001dd2:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff f91b 	bl	8001010 <HAL_InitTick>
        if(status != HAL_OK)
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d1b5      	bne.n	8001d4a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	682b      	ldr	r3, [r5, #0]
 8001de0:	07d8      	lsls	r0, r3, #31
 8001de2:	d45d      	bmi.n	8001ea0 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de4:	682b      	ldr	r3, [r5, #0]
 8001de6:	0799      	lsls	r1, r3, #30
 8001de8:	f100 809c 	bmi.w	8001f24 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dec:	682b      	ldr	r3, [r5, #0]
 8001dee:	0718      	lsls	r0, r3, #28
 8001df0:	f100 80d0 	bmi.w	8001f94 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df4:	682b      	ldr	r3, [r5, #0]
 8001df6:	0759      	lsls	r1, r3, #29
 8001df8:	f100 80fc 	bmi.w	8001ff4 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dfc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f040 8165 	bne.w	80020ce <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8001e04:	2000      	movs	r0, #0
 8001e06:	e7a0      	b.n	8001d4a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	6023      	str	r3, [r4, #0]
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e16:	4303      	orrs	r3, r0
 8001e18:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e1a:	6863      	ldr	r3, [r4, #4]
 8001e1c:	69ea      	ldr	r2, [r5, #28]
 8001e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e26:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e28:	f7ff fef4 	bl	8001c14 <RCC_SetFlashLatencyFromMSIRange>
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d0c5      	beq.n	8001dbc <HAL_RCC_OscConfig+0x7c>
 8001e30:	e78a      	b.n	8001d48 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e32:	69ab      	ldr	r3, [r5, #24]
 8001e34:	b31b      	cbz	r3, 8001e7e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f91d 	bl	800107c <HAL_GetTick>
 8001e42:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	079a      	lsls	r2, r3, #30
 8001e48:	d511      	bpl.n	8001e6e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	f043 0308 	orr.w	r3, r3, #8
 8001e50:	6023      	str	r3, [r4, #0]
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	6a2a      	ldr	r2, [r5, #32]
 8001e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e5e:	6863      	ldr	r3, [r4, #4]
 8001e60:	69ea      	ldr	r2, [r5, #28]
 8001e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e6a:	6063      	str	r3, [r4, #4]
 8001e6c:	e7b7      	b.n	8001dde <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e6e:	f7ff f905 	bl	800107c <HAL_GetTick>
 8001e72:	eba0 0008 	sub.w	r0, r0, r8
 8001e76:	2802      	cmp	r0, #2
 8001e78:	d9e4      	bls.n	8001e44 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8001e7a:	2003      	movs	r0, #3
 8001e7c:	e765      	b.n	8001d4a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e86:	f7ff f8f9 	bl	800107c <HAL_GetTick>
 8001e8a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	079b      	lsls	r3, r3, #30
 8001e90:	d5a5      	bpl.n	8001dde <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e92:	f7ff f8f3 	bl	800107c <HAL_GetTick>
 8001e96:	eba0 0008 	sub.w	r0, r0, r8
 8001e9a:	2802      	cmp	r0, #2
 8001e9c:	d9f6      	bls.n	8001e8c <HAL_RCC_OscConfig+0x14c>
 8001e9e:	e7ec      	b.n	8001e7a <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ea0:	2e08      	cmp	r6, #8
 8001ea2:	d003      	beq.n	8001eac <HAL_RCC_OscConfig+0x16c>
 8001ea4:	2e0c      	cmp	r6, #12
 8001ea6:	d108      	bne.n	8001eba <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8001ea8:	2f03      	cmp	r7, #3
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	039a      	lsls	r2, r3, #14
 8001eb0:	d598      	bpl.n	8001de4 <HAL_RCC_OscConfig+0xa4>
 8001eb2:	686b      	ldr	r3, [r5, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d195      	bne.n	8001de4 <HAL_RCC_OscConfig+0xa4>
 8001eb8:	e746      	b.n	8001d48 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eba:	686b      	ldr	r3, [r5, #4]
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec0:	d110      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x1a4>
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001eca:	f7ff f8d7 	bl	800107c <HAL_GetTick>
 8001ece:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	039b      	lsls	r3, r3, #14
 8001ed4:	d486      	bmi.n	8001de4 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed6:	f7ff f8d1 	bl	800107c <HAL_GetTick>
 8001eda:	eba0 0008 	sub.w	r0, r0, r8
 8001ede:	2864      	cmp	r0, #100	; 0x64
 8001ee0:	d9f6      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x190>
 8001ee2:	e7ca      	b.n	8001e7a <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee8:	d104      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x1b4>
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef0:	6023      	str	r3, [r4, #0]
 8001ef2:	e7e6      	b.n	8001ec2 <HAL_RCC_OscConfig+0x182>
 8001ef4:	6822      	ldr	r2, [r4, #0]
 8001ef6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001efa:	6022      	str	r2, [r4, #0]
 8001efc:	6822      	ldr	r2, [r4, #0]
 8001efe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f02:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e0      	bne.n	8001eca <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8001f08:	f7ff f8b8 	bl	800107c <HAL_GetTick>
 8001f0c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	0398      	lsls	r0, r3, #14
 8001f12:	f57f af67 	bpl.w	8001de4 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f16:	f7ff f8b1 	bl	800107c <HAL_GetTick>
 8001f1a:	eba0 0008 	sub.w	r0, r0, r8
 8001f1e:	2864      	cmp	r0, #100	; 0x64
 8001f20:	d9f5      	bls.n	8001f0e <HAL_RCC_OscConfig+0x1ce>
 8001f22:	e7aa      	b.n	8001e7a <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f24:	2e04      	cmp	r6, #4
 8001f26:	d003      	beq.n	8001f30 <HAL_RCC_OscConfig+0x1f0>
 8001f28:	2e0c      	cmp	r6, #12
 8001f2a:	d110      	bne.n	8001f4e <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001f2c:	2f02      	cmp	r7, #2
 8001f2e:	d10e      	bne.n	8001f4e <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	0559      	lsls	r1, r3, #21
 8001f34:	d503      	bpl.n	8001f3e <HAL_RCC_OscConfig+0x1fe>
 8001f36:	68eb      	ldr	r3, [r5, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f43f af05 	beq.w	8001d48 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	6863      	ldr	r3, [r4, #4]
 8001f40:	692a      	ldr	r2, [r5, #16]
 8001f42:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001f46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f4a:	6063      	str	r3, [r4, #4]
 8001f4c:	e74e      	b.n	8001dec <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f4e:	68eb      	ldr	r3, [r5, #12]
 8001f50:	b17b      	cbz	r3, 8001f72 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f58:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f88f 	bl	800107c <HAL_GetTick>
 8001f5e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	055a      	lsls	r2, r3, #21
 8001f64:	d4eb      	bmi.n	8001f3e <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f66:	f7ff f889 	bl	800107c <HAL_GetTick>
 8001f6a:	1bc0      	subs	r0, r0, r7
 8001f6c:	2802      	cmp	r0, #2
 8001f6e:	d9f7      	bls.n	8001f60 <HAL_RCC_OscConfig+0x220>
 8001f70:	e783      	b.n	8001e7a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f78:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f7a:	f7ff f87f 	bl	800107c <HAL_GetTick>
 8001f7e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	055b      	lsls	r3, r3, #21
 8001f84:	f57f af32 	bpl.w	8001dec <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f88:	f7ff f878 	bl	800107c <HAL_GetTick>
 8001f8c:	1bc0      	subs	r0, r0, r7
 8001f8e:	2802      	cmp	r0, #2
 8001f90:	d9f6      	bls.n	8001f80 <HAL_RCC_OscConfig+0x240>
 8001f92:	e772      	b.n	8001e7a <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f94:	696b      	ldr	r3, [r5, #20]
 8001f96:	b19b      	cbz	r3, 8001fc0 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001f98:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001fa4:	f7ff f86a 	bl	800107c <HAL_GetTick>
 8001fa8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001faa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001fae:	079a      	lsls	r2, r3, #30
 8001fb0:	f53f af20 	bmi.w	8001df4 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb4:	f7ff f862 	bl	800107c <HAL_GetTick>
 8001fb8:	1bc0      	subs	r0, r0, r7
 8001fba:	2802      	cmp	r0, #2
 8001fbc:	d9f5      	bls.n	8001faa <HAL_RCC_OscConfig+0x26a>
 8001fbe:	e75c      	b.n	8001e7a <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8001fc0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001fcc:	f7ff f856 	bl	800107c <HAL_GetTick>
 8001fd0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fd2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001fd6:	079b      	lsls	r3, r3, #30
 8001fd8:	f57f af0c 	bpl.w	8001df4 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fdc:	f7ff f84e 	bl	800107c <HAL_GetTick>
 8001fe0:	1bc0      	subs	r0, r0, r7
 8001fe2:	2802      	cmp	r0, #2
 8001fe4:	d9f5      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x292>
 8001fe6:	e748      	b.n	8001e7a <HAL_RCC_OscConfig+0x13a>
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	0800a602 	.word	0x0800a602
 8001ff0:	20000014 	.word	0x20000014
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ff4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ff6:	00d8      	lsls	r0, r3, #3
 8001ff8:	d429      	bmi.n	800204e <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002000:	65a3      	str	r3, [r4, #88]	; 0x58
 8002002:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800200c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002010:	4f5d      	ldr	r7, [pc, #372]	; (8002188 <HAL_RCC_OscConfig+0x448>)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	05d9      	lsls	r1, r3, #23
 8002016:	d51d      	bpl.n	8002054 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002018:	68ab      	ldr	r3, [r5, #8]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d12b      	bne.n	8002076 <HAL_RCC_OscConfig+0x336>
 800201e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800202a:	f7ff f827 	bl	800107c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002032:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002034:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002038:	079b      	lsls	r3, r3, #30
 800203a:	d542      	bpl.n	80020c2 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 800203c:	f1b8 0f00 	cmp.w	r8, #0
 8002040:	f43f aedc 	beq.w	8001dfc <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002044:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204a:	65a3      	str	r3, [r4, #88]	; 0x58
 800204c:	e6d6      	b.n	8001dfc <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 800204e:	f04f 0800 	mov.w	r8, #0
 8002052:	e7dd      	b.n	8002010 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800205c:	f7ff f80e 	bl	800107c <HAL_GetTick>
 8002060:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	05da      	lsls	r2, r3, #23
 8002066:	d4d7      	bmi.n	8002018 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002068:	f7ff f808 	bl	800107c <HAL_GetTick>
 800206c:	eba0 0009 	sub.w	r0, r0, r9
 8002070:	2802      	cmp	r0, #2
 8002072:	d9f6      	bls.n	8002062 <HAL_RCC_OscConfig+0x322>
 8002074:	e701      	b.n	8001e7a <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002076:	2b05      	cmp	r3, #5
 8002078:	d106      	bne.n	8002088 <HAL_RCC_OscConfig+0x348>
 800207a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800207e:	f043 0304 	orr.w	r3, r3, #4
 8002082:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002086:	e7ca      	b.n	800201e <HAL_RCC_OscConfig+0x2de>
 8002088:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002094:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002098:	f022 0204 	bic.w	r2, r2, #4
 800209c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1c2      	bne.n	800202a <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 80020a4:	f7fe ffea 	bl	800107c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80020ac:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80020b2:	0798      	lsls	r0, r3, #30
 80020b4:	d5c2      	bpl.n	800203c <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7fe ffe1 	bl	800107c <HAL_GetTick>
 80020ba:	1bc0      	subs	r0, r0, r7
 80020bc:	4548      	cmp	r0, r9
 80020be:	d9f6      	bls.n	80020ae <HAL_RCC_OscConfig+0x36e>
 80020c0:	e6db      	b.n	8001e7a <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7fe ffdb 	bl	800107c <HAL_GetTick>
 80020c6:	1bc0      	subs	r0, r0, r7
 80020c8:	4548      	cmp	r0, r9
 80020ca:	d9b3      	bls.n	8002034 <HAL_RCC_OscConfig+0x2f4>
 80020cc:	e6d5      	b.n	8001e7a <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ce:	2e0c      	cmp	r6, #12
 80020d0:	f43f ae3a 	beq.w	8001d48 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020d4:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020dc:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020de:	d137      	bne.n	8002150 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 80020e0:	f7fe ffcc 	bl	800107c <HAL_GetTick>
 80020e4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	0199      	lsls	r1, r3, #6
 80020ea:	d42b      	bmi.n	8002144 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80020ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80020f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80020f4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80020f6:	3a01      	subs	r2, #1
 80020f8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80020fc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80020fe:	0912      	lsrs	r2, r2, #4
 8002100:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002104:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002106:	0852      	lsrs	r2, r2, #1
 8002108:	3a01      	subs	r2, #1
 800210a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800210e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002110:	0852      	lsrs	r2, r2, #1
 8002112:	3a01      	subs	r2, #1
 8002114:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002118:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002120:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002122:	68e3      	ldr	r3, [r4, #12]
 8002124:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002128:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800212a:	f7fe ffa7 	bl	800107c <HAL_GetTick>
 800212e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	019a      	lsls	r2, r3, #6
 8002134:	f53f ae66 	bmi.w	8001e04 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe ffa0 	bl	800107c <HAL_GetTick>
 800213c:	1b40      	subs	r0, r0, r5
 800213e:	2802      	cmp	r0, #2
 8002140:	d9f6      	bls.n	8002130 <HAL_RCC_OscConfig+0x3f0>
 8002142:	e69a      	b.n	8001e7a <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7fe ff9a 	bl	800107c <HAL_GetTick>
 8002148:	1b80      	subs	r0, r0, r6
 800214a:	2802      	cmp	r0, #2
 800214c:	d9cb      	bls.n	80020e6 <HAL_RCC_OscConfig+0x3a6>
 800214e:	e694      	b.n	8001e7a <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002156:	bf02      	ittt	eq
 8002158:	68e3      	ldreq	r3, [r4, #12]
 800215a:	f023 0303 	biceq.w	r3, r3, #3
 800215e:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002160:	68e3      	ldr	r3, [r4, #12]
 8002162:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800216c:	f7fe ff86 	bl	800107c <HAL_GetTick>
 8002170:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	019b      	lsls	r3, r3, #6
 8002176:	f57f ae45 	bpl.w	8001e04 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217a:	f7fe ff7f 	bl	800107c <HAL_GetTick>
 800217e:	1b40      	subs	r0, r0, r5
 8002180:	2802      	cmp	r0, #2
 8002182:	d9f6      	bls.n	8002172 <HAL_RCC_OscConfig+0x432>
 8002184:	e679      	b.n	8001e7a <HAL_RCC_OscConfig+0x13a>
 8002186:	bf00      	nop
 8002188:	40007000 	.word	0x40007000

0800218c <HAL_RCC_ClockConfig>:
{
 800218c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002190:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002192:	4604      	mov	r4, r0
 8002194:	b910      	cbnz	r0, 800219c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002196:	2001      	movs	r0, #1
 8002198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800219c:	4a40      	ldr	r2, [pc, #256]	; (80022a0 <HAL_RCC_ClockConfig+0x114>)
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	428b      	cmp	r3, r1
 80021a6:	d329      	bcc.n	80021fc <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	07d9      	lsls	r1, r3, #31
 80021ac:	d431      	bmi.n	8002212 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ae:	6821      	ldr	r1, [r4, #0]
 80021b0:	078a      	lsls	r2, r1, #30
 80021b2:	d45b      	bmi.n	800226c <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b4:	4a3a      	ldr	r2, [pc, #232]	; (80022a0 <HAL_RCC_ClockConfig+0x114>)
 80021b6:	6813      	ldr	r3, [r2, #0]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	429e      	cmp	r6, r3
 80021be:	d35d      	bcc.n	800227c <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	f011 0f04 	tst.w	r1, #4
 80021c4:	4d37      	ldr	r5, [pc, #220]	; (80022a4 <HAL_RCC_ClockConfig+0x118>)
 80021c6:	d164      	bne.n	8002292 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c8:	070b      	lsls	r3, r1, #28
 80021ca:	d506      	bpl.n	80021da <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021cc:	68ab      	ldr	r3, [r5, #8]
 80021ce:	6922      	ldr	r2, [r4, #16]
 80021d0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021d8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021da:	f7ff fd5d 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 80021de:	68ab      	ldr	r3, [r5, #8]
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <HAL_RCC_ClockConfig+0x11c>)
 80021e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80021e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	40d8      	lsrs	r0, r3
 80021f2:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <HAL_RCC_ClockConfig+0x120>)
 80021f4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7fe bf0a 	b.w	8001010 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fc:	6813      	ldr	r3, [r2, #0]
 80021fe:	f023 0307 	bic.w	r3, r3, #7
 8002202:	430b      	orrs	r3, r1
 8002204:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	6813      	ldr	r3, [r2, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	4299      	cmp	r1, r3
 800220e:	d1c2      	bne.n	8002196 <HAL_RCC_ClockConfig+0xa>
 8002210:	e7ca      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002212:	6862      	ldr	r2, [r4, #4]
 8002214:	4d23      	ldr	r5, [pc, #140]	; (80022a4 <HAL_RCC_ClockConfig+0x118>)
 8002216:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002218:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221a:	d11b      	bne.n	8002254 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002220:	d0b9      	beq.n	8002196 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002222:	68ab      	ldr	r3, [r5, #8]
 8002224:	f023 0303 	bic.w	r3, r3, #3
 8002228:	4313      	orrs	r3, r2
 800222a:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800222c:	f7fe ff26 	bl	800107c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002230:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002234:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	68ab      	ldr	r3, [r5, #8]
 8002238:	6862      	ldr	r2, [r4, #4]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002242:	d0b4      	beq.n	80021ae <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002244:	f7fe ff1a 	bl	800107c <HAL_GetTick>
 8002248:	1bc0      	subs	r0, r0, r7
 800224a:	4540      	cmp	r0, r8
 800224c:	d9f3      	bls.n	8002236 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 800224e:	2003      	movs	r0, #3
}
 8002250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002254:	2a02      	cmp	r2, #2
 8002256:	d102      	bne.n	800225e <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002258:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800225c:	e7e0      	b.n	8002220 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800225e:	b912      	cbnz	r2, 8002266 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002260:	f013 0f02 	tst.w	r3, #2
 8002264:	e7dc      	b.n	8002220 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002266:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800226a:	e7d9      	b.n	8002220 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <HAL_RCC_ClockConfig+0x118>)
 800226e:	68a0      	ldr	r0, [r4, #8]
 8002270:	6893      	ldr	r3, [r2, #8]
 8002272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002276:	4303      	orrs	r3, r0
 8002278:	6093      	str	r3, [r2, #8]
 800227a:	e79b      	b.n	80021b4 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227c:	6813      	ldr	r3, [r2, #0]
 800227e:	f023 0307 	bic.w	r3, r3, #7
 8002282:	4333      	orrs	r3, r6
 8002284:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	6813      	ldr	r3, [r2, #0]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	429e      	cmp	r6, r3
 800228e:	d182      	bne.n	8002196 <HAL_RCC_ClockConfig+0xa>
 8002290:	e796      	b.n	80021c0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002292:	68ab      	ldr	r3, [r5, #8]
 8002294:	68e2      	ldr	r2, [r4, #12]
 8002296:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800229a:	4313      	orrs	r3, r2
 800229c:	60ab      	str	r3, [r5, #8]
 800229e:	e793      	b.n	80021c8 <HAL_RCC_ClockConfig+0x3c>
 80022a0:	40022000 	.word	0x40022000
 80022a4:	40021000 	.word	0x40021000
 80022a8:	0800a602 	.word	0x0800a602
 80022ac:	20000014 	.word	0x20000014

080022b0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80022b2:	4a06      	ldr	r2, [pc, #24]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022be:	6810      	ldr	r0, [r2, #0]
 80022c0:	f003 031f 	and.w	r3, r3, #31
}
 80022c4:	40d8      	lsrs	r0, r3
 80022c6:	4770      	bx	lr
 80022c8:	40021000 	.word	0x40021000
 80022cc:	0800a612 	.word	0x0800a612
 80022d0:	20000014 	.word	0x20000014

080022d4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80022d6:	4a06      	ldr	r2, [pc, #24]	; (80022f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e2:	6810      	ldr	r0, [r2, #0]
 80022e4:	f003 031f 	and.w	r3, r3, #31
}
 80022e8:	40d8      	lsrs	r0, r3
 80022ea:	4770      	bx	lr
 80022ec:	40021000 	.word	0x40021000
 80022f0:	0800a612 	.word	0x0800a612
 80022f4:	20000014 	.word	0x20000014

080022f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022fa:	4b45      	ldr	r3, [pc, #276]	; (8002410 <RCCEx_PLLSAI1_Config+0x118>)
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	f012 0f03 	tst.w	r2, #3
{
 8002302:	4605      	mov	r5, r0
 8002304:	460e      	mov	r6, r1
 8002306:	461c      	mov	r4, r3
 8002308:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800230a:	d02a      	beq.n	8002362 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	f002 0203 	and.w	r2, r2, #3
 8002312:	4282      	cmp	r2, r0
 8002314:	d13c      	bne.n	8002390 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8002316:	2a00      	cmp	r2, #0
 8002318:	d03a      	beq.n	8002390 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800231a:	68db      	ldr	r3, [r3, #12]
       ||
 800231c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800231e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002322:	3301      	adds	r3, #1
       ||
 8002324:	4293      	cmp	r3, r2
 8002326:	d133      	bne.n	8002390 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800232e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002330:	f7fe fea4 	bl	800107c <HAL_GetTick>
 8002334:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	011a      	lsls	r2, r3, #4
 800233a:	d432      	bmi.n	80023a2 <RCCEx_PLLSAI1_Config+0xaa>
 800233c:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800233e:	2e00      	cmp	r6, #0
 8002340:	d036      	beq.n	80023b0 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002342:	2e01      	cmp	r6, #1
 8002344:	d150      	bne.n	80023e8 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002346:	6922      	ldr	r2, [r4, #16]
 8002348:	6928      	ldr	r0, [r5, #16]
 800234a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800234e:	0840      	lsrs	r0, r0, #1
 8002350:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002354:	3801      	subs	r0, #1
 8002356:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800235a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800235e:	6122      	str	r2, [r4, #16]
 8002360:	e032      	b.n	80023c8 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8002362:	2802      	cmp	r0, #2
 8002364:	d010      	beq.n	8002388 <RCCEx_PLLSAI1_Config+0x90>
 8002366:	2803      	cmp	r0, #3
 8002368:	d014      	beq.n	8002394 <RCCEx_PLLSAI1_Config+0x9c>
 800236a:	2801      	cmp	r0, #1
 800236c:	d110      	bne.n	8002390 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	079f      	lsls	r7, r3, #30
 8002372:	d538      	bpl.n	80023e6 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002374:	68e3      	ldr	r3, [r4, #12]
 8002376:	686a      	ldr	r2, [r5, #4]
 8002378:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800237c:	3a01      	subs	r2, #1
 800237e:	4318      	orrs	r0, r3
 8002380:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002384:	60e0      	str	r0, [r4, #12]
 8002386:	e7cf      	b.n	8002328 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800238e:	d1f1      	bne.n	8002374 <RCCEx_PLLSAI1_Config+0x7c>
 8002390:	2001      	movs	r0, #1
 8002392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	0391      	lsls	r1, r2, #14
 8002398:	d4ec      	bmi.n	8002374 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80023a0:	e7f5      	b.n	800238e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023a2:	f7fe fe6b 	bl	800107c <HAL_GetTick>
 80023a6:	1bc0      	subs	r0, r0, r7
 80023a8:	2802      	cmp	r0, #2
 80023aa:	d9c4      	bls.n	8002336 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80023ac:	2003      	movs	r0, #3
 80023ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023b0:	6921      	ldr	r1, [r4, #16]
 80023b2:	68eb      	ldr	r3, [r5, #12]
 80023b4:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 80023b8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80023bc:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 80023c6:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023ce:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7fe fe54 	bl	800107c <HAL_GetTick>
 80023d4:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023d6:	6823      	ldr	r3, [r4, #0]
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	d513      	bpl.n	8002404 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023dc:	6923      	ldr	r3, [r4, #16]
 80023de:	69aa      	ldr	r2, [r5, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	6123      	str	r3, [r4, #16]
 80023e4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80023e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023e8:	6923      	ldr	r3, [r4, #16]
 80023ea:	6968      	ldr	r0, [r5, #20]
 80023ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023f0:	0840      	lsrs	r0, r0, #1
 80023f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023f6:	3801      	subs	r0, #1
 80023f8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80023fc:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002400:	6123      	str	r3, [r4, #16]
 8002402:	e7e1      	b.n	80023c8 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002404:	f7fe fe3a 	bl	800107c <HAL_GetTick>
 8002408:	1b80      	subs	r0, r0, r6
 800240a:	2802      	cmp	r0, #2
 800240c:	d9e3      	bls.n	80023d6 <RCCEx_PLLSAI1_Config+0xde>
 800240e:	e7cd      	b.n	80023ac <RCCEx_PLLSAI1_Config+0xb4>
 8002410:	40021000 	.word	0x40021000

08002414 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002416:	4b3d      	ldr	r3, [pc, #244]	; (800250c <RCCEx_PLLSAI2_Config+0xf8>)
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	f012 0f03 	tst.w	r2, #3
{
 800241e:	4605      	mov	r5, r0
 8002420:	460e      	mov	r6, r1
 8002422:	461c      	mov	r4, r3
 8002424:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002426:	d028      	beq.n	800247a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	f002 0203 	and.w	r2, r2, #3
 800242e:	4282      	cmp	r2, r0
 8002430:	d13a      	bne.n	80024a8 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8002432:	2a00      	cmp	r2, #0
 8002434:	d038      	beq.n	80024a8 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002436:	68db      	ldr	r3, [r3, #12]
       ||
 8002438:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800243a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800243e:	3301      	adds	r3, #1
       ||
 8002440:	4293      	cmp	r3, r2
 8002442:	d131      	bne.n	80024a8 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800244c:	f7fe fe16 	bl	800107c <HAL_GetTick>
 8002450:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	009a      	lsls	r2, r3, #2
 8002456:	d430      	bmi.n	80024ba <RCCEx_PLLSAI2_Config+0xa6>
 8002458:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800245a:	2e00      	cmp	r6, #0
 800245c:	d034      	beq.n	80024c8 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800245e:	6963      	ldr	r3, [r4, #20]
 8002460:	6929      	ldr	r1, [r5, #16]
 8002462:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002466:	0849      	lsrs	r1, r1, #1
 8002468:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800246c:	3901      	subs	r1, #1
 800246e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002472:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002476:	6163      	str	r3, [r4, #20]
 8002478:	e032      	b.n	80024e0 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800247a:	2802      	cmp	r0, #2
 800247c:	d010      	beq.n	80024a0 <RCCEx_PLLSAI2_Config+0x8c>
 800247e:	2803      	cmp	r0, #3
 8002480:	d014      	beq.n	80024ac <RCCEx_PLLSAI2_Config+0x98>
 8002482:	2801      	cmp	r0, #1
 8002484:	d110      	bne.n	80024a8 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	079f      	lsls	r7, r3, #30
 800248a:	d538      	bpl.n	80024fe <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800248c:	68e3      	ldr	r3, [r4, #12]
 800248e:	686a      	ldr	r2, [r5, #4]
 8002490:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002494:	3a01      	subs	r2, #1
 8002496:	4318      	orrs	r0, r3
 8002498:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800249c:	60e0      	str	r0, [r4, #12]
 800249e:	e7d1      	b.n	8002444 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024a6:	d1f1      	bne.n	800248c <RCCEx_PLLSAI2_Config+0x78>
 80024a8:	2001      	movs	r0, #1
 80024aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	0391      	lsls	r1, r2, #14
 80024b0:	d4ec      	bmi.n	800248c <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80024b8:	e7f5      	b.n	80024a6 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024ba:	f7fe fddf 	bl	800107c <HAL_GetTick>
 80024be:	1bc0      	subs	r0, r0, r7
 80024c0:	2802      	cmp	r0, #2
 80024c2:	d9c6      	bls.n	8002452 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 80024c4:	2003      	movs	r0, #3
 80024c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024c8:	6962      	ldr	r2, [r4, #20]
 80024ca:	68eb      	ldr	r3, [r5, #12]
 80024cc:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80024d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80024d4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 80024de:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e6:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7fe fdc8 	bl	800107c <HAL_GetTick>
 80024ec:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	d505      	bpl.n	8002500 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80024f4:	6963      	ldr	r3, [r4, #20]
 80024f6:	696a      	ldr	r2, [r5, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	6163      	str	r3, [r4, #20]
 80024fc:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80024fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002500:	f7fe fdbc 	bl	800107c <HAL_GetTick>
 8002504:	1b80      	subs	r0, r0, r6
 8002506:	2802      	cmp	r0, #2
 8002508:	d9f1      	bls.n	80024ee <RCCEx_PLLSAI2_Config+0xda>
 800250a:	e7db      	b.n	80024c4 <RCCEx_PLLSAI2_Config+0xb0>
 800250c:	40021000 	.word	0x40021000

08002510 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002510:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002514:	6806      	ldr	r6, [r0, #0]
 8002516:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800251a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800251c:	d024      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800251e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002520:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002524:	d02c      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002526:	d802      	bhi.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002528:	b1c1      	cbz	r1, 800255c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800252a:	2601      	movs	r6, #1
 800252c:	e01c      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800252e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002532:	d00d      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002534:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002538:	d1f7      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800253a:	4a4d      	ldr	r2, [pc, #308]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800253e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002542:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002546:	430b      	orrs	r3, r1
 8002548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800254c:	2600      	movs	r6, #0
 800254e:	e00b      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002550:	4a47      	ldr	r2, [pc, #284]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	68d3      	ldr	r3, [r2, #12]
 8002554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002558:	60d3      	str	r3, [r2, #12]
      break;
 800255a:	e7ee      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800255c:	3004      	adds	r0, #4
 800255e:	f7ff fecb 	bl	80022f8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002562:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002564:	2800      	cmp	r0, #0
 8002566:	d0e8      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	04d8      	lsls	r0, r3, #19
 800256c:	d506      	bpl.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800256e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002570:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002574:	d074      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002576:	d808      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002578:	b1a9      	cbz	r1, 80025a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800257a:	2601      	movs	r6, #1
 800257c:	4635      	mov	r5, r6
 800257e:	e021      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002580:	2100      	movs	r1, #0
 8002582:	3020      	adds	r0, #32
 8002584:	f7ff ff46 	bl	8002414 <RCCEx_PLLSAI2_Config>
 8002588:	e7eb      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800258a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800258e:	d004      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002590:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002594:	d1f1      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002596:	4635      	mov	r5, r6
 8002598:	e009      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800259a:	4a35      	ldr	r2, [pc, #212]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259c:	68d3      	ldr	r3, [r2, #12]
 800259e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a2:	60d3      	str	r3, [r2, #12]
 80025a4:	e7f7      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025a6:	1d20      	adds	r0, r4, #4
 80025a8:	f7ff fea6 	bl	80022f8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025ac:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80025ae:	2d00      	cmp	r5, #0
 80025b0:	d15c      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025b2:	4a2f      	ldr	r2, [pc, #188]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80025b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025ba:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80025be:	430b      	orrs	r3, r1
 80025c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	0399      	lsls	r1, r3, #14
 80025c8:	f140 814f 	bpl.w	800286a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025cc:	4f28      	ldr	r7, [pc, #160]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025d0:	00da      	lsls	r2, r3, #3
 80025d2:	f140 8176 	bpl.w	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 80025d6:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025da:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002674 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80025de:	f8d9 3000 	ldr.w	r3, [r9]
 80025e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e6:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80025ea:	f7fe fd47 	bl	800107c <HAL_GetTick>
 80025ee:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025f0:	f8d9 3000 	ldr.w	r3, [r9]
 80025f4:	05db      	lsls	r3, r3, #23
 80025f6:	d53f      	bpl.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 80025f8:	2d00      	cmp	r5, #0
 80025fa:	d144      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002600:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002604:	d015      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002606:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800260a:	4293      	cmp	r3, r2
 800260c:	d011      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800260e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002612:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002616:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800261a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800261e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002626:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800262a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800262e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002632:	07d8      	lsls	r0, r3, #31
 8002634:	d509      	bpl.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8002636:	f7fe fd21 	bl	800107c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800263e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002640:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002644:	0799      	lsls	r1, r3, #30
 8002646:	f140 8109 	bpl.w	800285c <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800264a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800264e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800265c:	4635      	mov	r5, r6
 800265e:	e012      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002660:	2100      	movs	r1, #0
 8002662:	f104 0020 	add.w	r0, r4, #32
 8002666:	f7ff fed5 	bl	8002414 <RCCEx_PLLSAI2_Config>
 800266a:	e79f      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800266c:	462e      	mov	r6, r5
 800266e:	e7a9      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002670:	40021000 	.word	0x40021000
 8002674:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002678:	f7fe fd00 	bl	800107c <HAL_GetTick>
 800267c:	eba0 000a 	sub.w	r0, r0, sl
 8002680:	2802      	cmp	r0, #2
 8002682:	d9b5      	bls.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002684:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002686:	f1b8 0f00 	cmp.w	r8, #0
 800268a:	d003      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 800268c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800268e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002692:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	07da      	lsls	r2, r3, #31
 8002698:	d508      	bpl.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800269a:	4990      	ldr	r1, [pc, #576]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800269c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800269e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026a2:	f022 0203 	bic.w	r2, r2, #3
 80026a6:	4302      	orrs	r2, r0
 80026a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026ac:	079f      	lsls	r7, r3, #30
 80026ae:	d508      	bpl.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026b0:	498a      	ldr	r1, [pc, #552]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80026b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026b8:	f022 020c 	bic.w	r2, r2, #12
 80026bc:	4302      	orrs	r2, r0
 80026be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026c2:	075e      	lsls	r6, r3, #29
 80026c4:	d508      	bpl.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026c6:	4985      	ldr	r1, [pc, #532]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026c8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80026ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026ce:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80026d2:	4302      	orrs	r2, r0
 80026d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026d8:	0718      	lsls	r0, r3, #28
 80026da:	d508      	bpl.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026dc:	497f      	ldr	r1, [pc, #508]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026de:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80026e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026e4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80026e8:	4302      	orrs	r2, r0
 80026ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026ee:	06d9      	lsls	r1, r3, #27
 80026f0:	d508      	bpl.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026f2:	497a      	ldr	r1, [pc, #488]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80026f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026fe:	4302      	orrs	r2, r0
 8002700:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002704:	069a      	lsls	r2, r3, #26
 8002706:	d508      	bpl.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002708:	4974      	ldr	r1, [pc, #464]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800270a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800270c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002710:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002714:	4302      	orrs	r2, r0
 8002716:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800271a:	059f      	lsls	r7, r3, #22
 800271c:	d508      	bpl.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800271e:	496f      	ldr	r1, [pc, #444]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002720:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002722:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002726:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800272a:	4302      	orrs	r2, r0
 800272c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002730:	055e      	lsls	r6, r3, #21
 8002732:	d508      	bpl.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002734:	4969      	ldr	r1, [pc, #420]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002736:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002738:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800273c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002740:	4302      	orrs	r2, r0
 8002742:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002746:	0658      	lsls	r0, r3, #25
 8002748:	d508      	bpl.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800274a:	4964      	ldr	r1, [pc, #400]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800274c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800274e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002752:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002756:	4302      	orrs	r2, r0
 8002758:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800275c:	0619      	lsls	r1, r3, #24
 800275e:	d508      	bpl.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002760:	495e      	ldr	r1, [pc, #376]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002762:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002764:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002768:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800276c:	4302      	orrs	r2, r0
 800276e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002772:	05da      	lsls	r2, r3, #23
 8002774:	d508      	bpl.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002776:	4959      	ldr	r1, [pc, #356]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800277a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800277e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002782:	4302      	orrs	r2, r0
 8002784:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002788:	049b      	lsls	r3, r3, #18
 800278a:	d50f      	bpl.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800278c:	4a53      	ldr	r2, [pc, #332]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800278e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002790:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002794:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002798:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800279a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800279e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027a2:	d164      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027a4:	68d3      	ldr	r3, [r2, #12]
 80027a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027aa:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	031f      	lsls	r7, r3, #12
 80027b0:	d50f      	bpl.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027b2:	4a4a      	ldr	r2, [pc, #296]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80027b4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80027b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027ba:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80027be:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027c0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027c8:	d15c      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ca:	68d3      	ldr	r3, [r2, #12]
 80027cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	035e      	lsls	r6, r3, #13
 80027d6:	d50f      	bpl.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027d8:	4a40      	ldr	r2, [pc, #256]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80027da:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80027dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027e0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80027e4:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027e6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027ee:	d154      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f0:	68d3      	ldr	r3, [r2, #12]
 80027f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027f6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	0458      	lsls	r0, r3, #17
 80027fc:	d512      	bpl.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027fe:	4937      	ldr	r1, [pc, #220]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002800:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002802:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002806:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800280a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800280c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002814:	d14c      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002816:	2102      	movs	r1, #2
 8002818:	1d20      	adds	r0, r4, #4
 800281a:	f7ff fd6d 	bl	80022f8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800281e:	2800      	cmp	r0, #0
 8002820:	bf18      	it	ne
 8002822:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002824:	6822      	ldr	r2, [r4, #0]
 8002826:	0411      	lsls	r1, r2, #16
 8002828:	d508      	bpl.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800282a:	492c      	ldr	r1, [pc, #176]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800282c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800282e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002832:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002836:	4303      	orrs	r3, r0
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800283c:	03d3      	lsls	r3, r2, #15
 800283e:	d509      	bpl.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002840:	4a26      	ldr	r2, [pc, #152]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002842:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002846:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800284a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800284e:	430b      	orrs	r3, r1
 8002850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002854:	4628      	mov	r0, r5
 8002856:	b002      	add	sp, #8
 8002858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fe fc0e 	bl	800107c <HAL_GetTick>
 8002860:	1b40      	subs	r0, r0, r5
 8002862:	4548      	cmp	r0, r9
 8002864:	f67f aeec 	bls.w	8002640 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002868:	e70c      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800286a:	4635      	mov	r5, r6
 800286c:	e712      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800286e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002872:	d19b      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002874:	2101      	movs	r1, #1
 8002876:	1d20      	adds	r0, r4, #4
 8002878:	f7ff fd3e 	bl	80022f8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800287c:	2800      	cmp	r0, #0
 800287e:	bf18      	it	ne
 8002880:	4605      	movne	r5, r0
 8002882:	e793      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002884:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002888:	d1a3      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800288a:	2101      	movs	r1, #1
 800288c:	1d20      	adds	r0, r4, #4
 800288e:	f7ff fd33 	bl	80022f8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002892:	2800      	cmp	r0, #0
 8002894:	bf18      	it	ne
 8002896:	4605      	movne	r5, r0
 8002898:	e79b      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800289a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800289e:	d1ab      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028a0:	2101      	movs	r1, #1
 80028a2:	1d20      	adds	r0, r4, #4
 80028a4:	f7ff fd28 	bl	80022f8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80028a8:	2800      	cmp	r0, #0
 80028aa:	bf18      	it	ne
 80028ac:	4605      	movne	r5, r0
 80028ae:	e7a3      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028b0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80028b4:	d1b6      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028b6:	2102      	movs	r1, #2
 80028b8:	f104 0020 	add.w	r0, r4, #32
 80028bc:	f7ff fdaa 	bl	8002414 <RCCEx_PLLSAI2_Config>
 80028c0:	e7ad      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80028ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80028d4:	f04f 0801 	mov.w	r8, #1
 80028d8:	e67f      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xca>
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000

080028e0 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	2302      	movs	r3, #2
{
 80028e2:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80028e8:	6803      	ldr	r3, [r0, #0]
 80028ea:	4c09      	ldr	r4, [pc, #36]	; (8002910 <HAL_TIM_Base_Start+0x30>)
 80028ec:	6899      	ldr	r1, [r3, #8]
 80028ee:	4021      	ands	r1, r4
 80028f0:	2906      	cmp	r1, #6
 80028f2:	d008      	beq.n	8002906 <HAL_TIM_Base_Start+0x26>
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	4022      	ands	r2, r4
 80028f8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 80028fc:	bf1e      	ittt	ne
 80028fe:	681a      	ldrne	r2, [r3, #0]
 8002900:	f042 0201 	orrne.w	r2, r2, #1
 8002904:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002906:	2301      	movs	r3, #1
 8002908:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 800290c:	2000      	movs	r0, #0
 800290e:	bd10      	pop	{r4, pc}
 8002910:	00010007 	.word	0x00010007

08002914 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002914:	4a30      	ldr	r2, [pc, #192]	; (80029d8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002916:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002918:	4290      	cmp	r0, r2
 800291a:	d012      	beq.n	8002942 <TIM_Base_SetConfig+0x2e>
 800291c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002920:	d00f      	beq.n	8002942 <TIM_Base_SetConfig+0x2e>
 8002922:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002926:	4290      	cmp	r0, r2
 8002928:	d00b      	beq.n	8002942 <TIM_Base_SetConfig+0x2e>
 800292a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800292e:	4290      	cmp	r0, r2
 8002930:	d007      	beq.n	8002942 <TIM_Base_SetConfig+0x2e>
 8002932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002936:	4290      	cmp	r0, r2
 8002938:	d003      	beq.n	8002942 <TIM_Base_SetConfig+0x2e>
 800293a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800293e:	4290      	cmp	r0, r2
 8002940:	d119      	bne.n	8002976 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002942:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002948:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800294a:	4a23      	ldr	r2, [pc, #140]	; (80029d8 <TIM_Base_SetConfig+0xc4>)
 800294c:	4290      	cmp	r0, r2
 800294e:	d01d      	beq.n	800298c <TIM_Base_SetConfig+0x78>
 8002950:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002954:	d01a      	beq.n	800298c <TIM_Base_SetConfig+0x78>
 8002956:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800295a:	4290      	cmp	r0, r2
 800295c:	d016      	beq.n	800298c <TIM_Base_SetConfig+0x78>
 800295e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002962:	4290      	cmp	r0, r2
 8002964:	d012      	beq.n	800298c <TIM_Base_SetConfig+0x78>
 8002966:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800296a:	4290      	cmp	r0, r2
 800296c:	d00e      	beq.n	800298c <TIM_Base_SetConfig+0x78>
 800296e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002972:	4290      	cmp	r0, r2
 8002974:	d00a      	beq.n	800298c <TIM_Base_SetConfig+0x78>
 8002976:	4a19      	ldr	r2, [pc, #100]	; (80029dc <TIM_Base_SetConfig+0xc8>)
 8002978:	4290      	cmp	r0, r2
 800297a:	d007      	beq.n	800298c <TIM_Base_SetConfig+0x78>
 800297c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002980:	4290      	cmp	r0, r2
 8002982:	d003      	beq.n	800298c <TIM_Base_SetConfig+0x78>
 8002984:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002988:	4290      	cmp	r0, r2
 800298a:	d103      	bne.n	8002994 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800298c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800298e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002992:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002994:	694a      	ldr	r2, [r1, #20]
 8002996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800299a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800299c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800299e:	688b      	ldr	r3, [r1, #8]
 80029a0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a2:	680b      	ldr	r3, [r1, #0]
 80029a4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <TIM_Base_SetConfig+0xc4>)
 80029a8:	4298      	cmp	r0, r3
 80029aa:	d00f      	beq.n	80029cc <TIM_Base_SetConfig+0xb8>
 80029ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b0:	4298      	cmp	r0, r3
 80029b2:	d00b      	beq.n	80029cc <TIM_Base_SetConfig+0xb8>
 80029b4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80029b8:	4298      	cmp	r0, r3
 80029ba:	d007      	beq.n	80029cc <TIM_Base_SetConfig+0xb8>
 80029bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029c0:	4298      	cmp	r0, r3
 80029c2:	d003      	beq.n	80029cc <TIM_Base_SetConfig+0xb8>
 80029c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029c8:	4298      	cmp	r0, r3
 80029ca:	d101      	bne.n	80029d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029cc:	690b      	ldr	r3, [r1, #16]
 80029ce:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d0:	2301      	movs	r3, #1
 80029d2:	6143      	str	r3, [r0, #20]
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40014000 	.word	0x40014000

080029e0 <HAL_TIM_Base_Init>:
{
 80029e0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80029e2:	4604      	mov	r4, r0
 80029e4:	b1a0      	cbz	r0, 8002a10 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80029e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029ee:	b91b      	cbnz	r3, 80029f8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80029f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80029f4:	f001 ff92 	bl	800491c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	2302      	movs	r3, #2
 80029fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fe:	6820      	ldr	r0, [r4, #0]
 8002a00:	1d21      	adds	r1, r4, #4
 8002a02:	f7ff ff87 	bl	8002914 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a10:	2001      	movs	r0, #1
}
 8002a12:	bd10      	pop	{r4, pc}

08002a14 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a18:	2b01      	cmp	r3, #1
{
 8002a1a:	b530      	push	{r4, r5, lr}
 8002a1c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002a20:	d01f      	beq.n	8002a62 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a22:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a24:	4d10      	ldr	r5, [pc, #64]	; (8002a68 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002a26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a2a:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8002a2c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002a2e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a30:	d003      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8002a32:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002a36:	42aa      	cmp	r2, r5
 8002a38:	d103      	bne.n	8002a42 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a3a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a40:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a42:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a44:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a4a:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002a4c:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a50:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a52:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8002a56:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002a58:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002a62:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002a64:	bd30      	pop	{r4, r5, pc}
 8002a66:	bf00      	nop
 8002a68:	40012c00 	.word	0x40012c00

08002a6c <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a6c:	6803      	ldr	r3, [r0, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a74:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a7e:	2320      	movs	r3, #32
 8002a80:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	6603      	str	r3, [r0, #96]	; 0x60
 8002a88:	4770      	bx	lr
	...

08002a8c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a8c:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d149      	bne.n	8002b28 <HAL_UART_Receive_IT+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8002a94:	2900      	cmp	r1, #0
 8002a96:	d045      	beq.n	8002b24 <HAL_UART_Receive_IT+0x98>
 8002a98:	2a00      	cmp	r2, #0
 8002a9a:	d043      	beq.n	8002b24 <HAL_UART_Receive_IT+0x98>
    __HAL_LOCK(huart);
 8002a9c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d041      	beq.n	8002b28 <HAL_UART_Receive_IT+0x9c>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxISR       = NULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8002aae:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 8002ab0:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8002ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize  = Size;
 8002ab6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8002aba:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002abe:	d121      	bne.n	8002b04 <HAL_UART_Receive_IT+0x78>
 8002ac0:	6902      	ldr	r2, [r0, #16]
 8002ac2:	b9ea      	cbnz	r2, 8002b00 <HAL_UART_Receive_IT+0x74>
 8002ac4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002ac8:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002acc:	2200      	movs	r2, #0
 8002ace:	6742      	str	r2, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ad0:	2222      	movs	r2, #34	; 0x22
 8002ad2:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad6:	6802      	ldr	r2, [r0, #0]
 8002ad8:	6891      	ldr	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ade:	f041 0101 	orr.w	r1, r1, #1
 8002ae2:	6091      	str	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae4:	d11c      	bne.n	8002b20 <HAL_UART_Receive_IT+0x94>
 8002ae6:	6903      	ldr	r3, [r0, #16]
 8002ae8:	b9d3      	cbnz	r3, 8002b20 <HAL_UART_Receive_IT+0x94>
        huart->RxISR = UART_RxISR_16BIT;
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_UART_Receive_IT+0xa0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002aec:	6811      	ldr	r1, [r2, #0]
        huart->RxISR = UART_RxISR_8BIT;
 8002aee:	6603      	str	r3, [r0, #96]	; 0x60
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002af0:	f441 7190 	orr.w	r1, r1, #288	; 0x120
      __HAL_UNLOCK(huart);
 8002af4:	2300      	movs	r3, #0
 8002af6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002afa:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002afc:	4618      	mov	r0, r3
 8002afe:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002b00:	22ff      	movs	r2, #255	; 0xff
 8002b02:	e7e1      	b.n	8002ac8 <HAL_UART_Receive_IT+0x3c>
 8002b04:	b923      	cbnz	r3, 8002b10 <HAL_UART_Receive_IT+0x84>
 8002b06:	6902      	ldr	r2, [r0, #16]
 8002b08:	2a00      	cmp	r2, #0
 8002b0a:	d0f9      	beq.n	8002b00 <HAL_UART_Receive_IT+0x74>
 8002b0c:	227f      	movs	r2, #127	; 0x7f
 8002b0e:	e7db      	b.n	8002ac8 <HAL_UART_Receive_IT+0x3c>
 8002b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b14:	d1da      	bne.n	8002acc <HAL_UART_Receive_IT+0x40>
 8002b16:	6902      	ldr	r2, [r0, #16]
 8002b18:	2a00      	cmp	r2, #0
 8002b1a:	d0f7      	beq.n	8002b0c <HAL_UART_Receive_IT+0x80>
 8002b1c:	223f      	movs	r2, #63	; 0x3f
 8002b1e:	e7d3      	b.n	8002ac8 <HAL_UART_Receive_IT+0x3c>
        huart->RxISR = UART_RxISR_8BIT;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_UART_Receive_IT+0xa4>)
 8002b22:	e7e3      	b.n	8002aec <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 8002b24:	2001      	movs	r0, #1
 8002b26:	4770      	bx	lr
    return HAL_BUSY;
 8002b28:	2002      	movs	r0, #2
}
 8002b2a:	4770      	bx	lr
 8002b2c:	08002c3f 	.word	0x08002c3f
 8002b30:	08002be9 	.word	0x08002be9

08002b34 <HAL_UART_Transmit_DMA>:
{
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	4604      	mov	r4, r0
 8002b38:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002b3a:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
 8002b3e:	2a20      	cmp	r2, #32
 8002b40:	d12b      	bne.n	8002b9a <HAL_UART_Transmit_DMA+0x66>
    if ((pData == NULL) || (Size == 0U))
 8002b42:	b341      	cbz	r1, 8002b96 <HAL_UART_Transmit_DMA+0x62>
 8002b44:	b33b      	cbz	r3, 8002b96 <HAL_UART_Transmit_DMA+0x62>
    __HAL_LOCK(huart);
 8002b46:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8002b4a:	2a01      	cmp	r2, #1
 8002b4c:	d025      	beq.n	8002b9a <HAL_UART_Transmit_DMA+0x66>
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b54:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferCount = Size;
 8002b56:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5a:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b5c:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5e:	6765      	str	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b60:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b64:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize  = Size;
 8002b66:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr  = pData;
 8002b6a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b6c:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002b6e:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <HAL_UART_Transmit_DMA+0x70>)
 8002b70:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b72:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <HAL_UART_Transmit_DMA+0x74>)
 8002b74:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8002b76:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8002b78:	6385      	str	r5, [r0, #56]	; 0x38
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8002b7a:	3228      	adds	r2, #40	; 0x28
 8002b7c:	f7fe fe72 	bl	8001864 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	2240      	movs	r2, #64	; 0x40
 8002b84:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b86:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8002b88:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b90:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8002b92:	4628      	mov	r0, r5
 8002b94:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002b96:	2001      	movs	r0, #1
 8002b98:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002b9a:	2002      	movs	r0, #2
}
 8002b9c:	bd38      	pop	{r3, r4, r5, pc}
 8002b9e:	bf00      	nop
 8002ba0:	08002baf 	.word	0x08002baf
 8002ba4:	08002bdf 	.word	0x08002bdf
 8002ba8:	08002c95 	.word	0x08002c95

08002bac <HAL_UART_TxCpltCallback>:
 8002bac:	4770      	bx	lr

08002bae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002bae:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002bb0:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002bb2:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f013 0320 	ands.w	r3, r3, #32
 8002bba:	d10b      	bne.n	8002bd4 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 8002bbc:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bc0:	6813      	ldr	r3, [r2, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bc8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	bd08      	pop	{r3, pc}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	f7ff ffe9 	bl	8002bac <HAL_UART_TxCpltCallback>
 8002bda:	bd08      	pop	{r3, pc}

08002bdc <HAL_UART_TxHalfCpltCallback>:
 8002bdc:	4770      	bx	lr

08002bde <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002bde:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002be0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002be2:	f7ff fffb 	bl	8002bdc <HAL_UART_TxHalfCpltCallback>
 8002be6:	bd08      	pop	{r3, pc}

08002be8 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002be8:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8002bec:	2a22      	cmp	r2, #34	; 0x22
{
 8002bee:	b538      	push	{r3, r4, r5, lr}
 8002bf0:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bf2:	d11e      	bne.n	8002c32 <UART_RxISR_8BIT+0x4a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002bf4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002bf6:	6d44      	ldr	r4, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 8002bf8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002bfc:	1c65      	adds	r5, r4, #1
 8002bfe:	400a      	ands	r2, r1
 8002c00:	6545      	str	r5, [r0, #84]	; 0x54
 8002c02:	7022      	strb	r2, [r4, #0]

    if (--huart->RxXferCount == 0)
 8002c04:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8002c08:	3a01      	subs	r2, #1
 8002c0a:	b292      	uxth	r2, r2
 8002c0c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 8002c10:	b9a2      	cbnz	r2, 8002c3c <UART_RxISR_8BIT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c12:	6801      	ldr	r1, [r0, #0]
 8002c14:	680c      	ldr	r4, [r1, #0]
 8002c16:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8002c1a:	600c      	str	r4, [r1, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1c:	688c      	ldr	r4, [r1, #8]
 8002c1e:	f024 0401 	bic.w	r4, r4, #1
 8002c22:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c24:	2120      	movs	r1, #32
 8002c26:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002c2a:	6602      	str	r2, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002c2c:	f001 fda0 	bl	8004770 <HAL_UART_RxCpltCallback>
 8002c30:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c32:	8b13      	ldrh	r3, [r2, #24]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	f043 0308 	orr.w	r3, r3, #8
 8002c3a:	8313      	strh	r3, [r2, #24]
 8002c3c:	bd38      	pop	{r3, r4, r5, pc}

08002c3e <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c3e:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8002c42:	2a22      	cmp	r2, #34	; 0x22
{
 8002c44:	b510      	push	{r4, lr}
 8002c46:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c48:	d11d      	bne.n	8002c86 <UART_RxISR_16BIT+0x48>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c4a:	8c94      	ldrh	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8002c4c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8002c50:	400c      	ands	r4, r1
 8002c52:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8002c54:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2;
 8002c58:	6541      	str	r1, [r0, #84]	; 0x54

    if (--huart->RxXferCount == 0)
 8002c5a:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
 8002c5e:	3901      	subs	r1, #1
 8002c60:	b289      	uxth	r1, r1
 8002c62:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
 8002c66:	b999      	cbnz	r1, 8002c90 <UART_RxISR_16BIT+0x52>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c68:	6814      	ldr	r4, [r2, #0]
 8002c6a:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8002c6e:	6014      	str	r4, [r2, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c70:	6894      	ldr	r4, [r2, #8]
 8002c72:	f024 0401 	bic.w	r4, r4, #1
 8002c76:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002c7e:	6601      	str	r1, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002c80:	f001 fd76 	bl	8004770 <HAL_UART_RxCpltCallback>
 8002c84:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c86:	8b13      	ldrh	r3, [r2, #24]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f043 0308 	orr.w	r3, r3, #8
 8002c8e:	8313      	strh	r3, [r2, #24]
 8002c90:	bd10      	pop	{r4, pc}

08002c92 <HAL_UART_ErrorCallback>:
 8002c92:	4770      	bx	lr

08002c94 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c94:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
 8002c96:	b508      	push	{r3, lr}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c98:	f891 3071 	ldrb.w	r3, [r1, #113]	; 0x71
 8002c9c:	2b21      	cmp	r3, #33	; 0x21
 8002c9e:	d10d      	bne.n	8002cbc <UART_DMAError+0x28>
      && (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 8002ca0:	680b      	ldr	r3, [r1, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	0612      	lsls	r2, r2, #24
 8002ca6:	d509      	bpl.n	8002cbc <UART_DMAError+0x28>
    huart->TxXferCount = 0U;
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002cb4:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	f881 3071 	strb.w	r3, [r1, #113]	; 0x71
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cbc:	f891 3072 	ldrb.w	r3, [r1, #114]	; 0x72
 8002cc0:	2b22      	cmp	r3, #34	; 0x22
 8002cc2:	d109      	bne.n	8002cd8 <UART_DMAError+0x44>
      && (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002cc4:	680b      	ldr	r3, [r1, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	065b      	lsls	r3, r3, #25
 8002cca:	d505      	bpl.n	8002cd8 <UART_DMAError+0x44>
    huart->RxXferCount = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8002cd2:	4608      	mov	r0, r1
 8002cd4:	f7ff feca 	bl	8002a6c <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002cd8:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8002cda:	f043 0310 	orr.w	r3, r3, #16
 8002cde:	674b      	str	r3, [r1, #116]	; 0x74
  HAL_UART_ErrorCallback(huart);
 8002ce0:	4608      	mov	r0, r1
 8002ce2:	f7ff ffd6 	bl	8002c92 <HAL_UART_ErrorCallback>
 8002ce6:	bd08      	pop	{r3, pc}

08002ce8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ce8:	6803      	ldr	r3, [r0, #0]
 8002cea:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cec:	6819      	ldr	r1, [r3, #0]
{
 8002cee:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002cf0:	0716      	lsls	r6, r2, #28
{
 8002cf2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cf4:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8002cf6:	d10a      	bne.n	8002d0e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 8002cf8:	0696      	lsls	r6, r2, #26
 8002cfa:	d564      	bpl.n	8002dc6 <HAL_UART_IRQHandler+0xde>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cfc:	068e      	lsls	r6, r1, #26
 8002cfe:	d562      	bpl.n	8002dc6 <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8002d00:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8083 	beq.w	8002e0e <HAL_UART_IRQHandler+0x126>
}
 8002d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8002d0c:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != RESET)
 8002d0e:	f015 0001 	ands.w	r0, r5, #1
 8002d12:	d102      	bne.n	8002d1a <HAL_UART_IRQHandler+0x32>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d14:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002d18:	d055      	beq.n	8002dc6 <HAL_UART_IRQHandler+0xde>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d1a:	07d5      	lsls	r5, r2, #31
 8002d1c:	d507      	bpl.n	8002d2e <HAL_UART_IRQHandler+0x46>
 8002d1e:	05ce      	lsls	r6, r1, #23
 8002d20:	d505      	bpl.n	8002d2e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d22:	2501      	movs	r5, #1
 8002d24:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d26:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002d28:	f045 0501 	orr.w	r5, r5, #1
 8002d2c:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d2e:	0795      	lsls	r5, r2, #30
 8002d30:	d506      	bpl.n	8002d40 <HAL_UART_IRQHandler+0x58>
 8002d32:	b128      	cbz	r0, 8002d40 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d34:	2502      	movs	r5, #2
 8002d36:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d38:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002d3a:	f045 0504 	orr.w	r5, r5, #4
 8002d3e:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d40:	0756      	lsls	r6, r2, #29
 8002d42:	d506      	bpl.n	8002d52 <HAL_UART_IRQHandler+0x6a>
 8002d44:	b128      	cbz	r0, 8002d52 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d46:	2504      	movs	r5, #4
 8002d48:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002d4c:	f045 0502 	orr.w	r5, r5, #2
 8002d50:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 8002d52:	0715      	lsls	r5, r2, #28
 8002d54:	d507      	bpl.n	8002d66 <HAL_UART_IRQHandler+0x7e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8002d56:	068e      	lsls	r6, r1, #26
 8002d58:	d400      	bmi.n	8002d5c <HAL_UART_IRQHandler+0x74>
 8002d5a:	b120      	cbz	r0, 8002d66 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d5c:	2008      	movs	r0, #8
 8002d5e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d60:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002d62:	4303      	orrs	r3, r0
 8002d64:	6763      	str	r3, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d66:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d050      	beq.n	8002e0e <HAL_UART_IRQHandler+0x126>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8002d6c:	0695      	lsls	r5, r2, #26
 8002d6e:	d505      	bpl.n	8002d7c <HAL_UART_IRQHandler+0x94>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d70:	0688      	lsls	r0, r1, #26
 8002d72:	d503      	bpl.n	8002d7c <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL)
 8002d74:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002d76:	b10b      	cbz	r3, 8002d7c <HAL_UART_IRQHandler+0x94>
          huart->RxISR(huart);
 8002d78:	4620      	mov	r0, r4
 8002d7a:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002d7c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002d7e:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8002d80:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002d82:	d404      	bmi.n	8002d8e <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002d88:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002d8c:	d017      	beq.n	8002dbe <HAL_UART_IRQHandler+0xd6>
        UART_EndRxTransfer(huart);
 8002d8e:	f7ff fe6d 	bl	8002a6c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	0652      	lsls	r2, r2, #25
 8002d98:	d50d      	bpl.n	8002db6 <HAL_UART_IRQHandler+0xce>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d9a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002d9c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da2:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002da4:	b138      	cbz	r0, 8002db6 <HAL_UART_IRQHandler+0xce>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_UART_IRQHandler+0x128>)
 8002da8:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002daa:	f7fe fd9b 	bl	80018e4 <HAL_DMA_Abort_IT>
 8002dae:	b370      	cbz	r0, 8002e0e <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002db0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002db2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002db4:	e7a8      	b.n	8002d08 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8002db6:	4620      	mov	r0, r4
 8002db8:	f7ff ff6b 	bl	8002c92 <HAL_UART_ErrorCallback>
 8002dbc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002dbe:	f7ff ff68 	bl	8002c92 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc2:	6765      	str	r5, [r4, #116]	; 0x74
 8002dc4:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002dc6:	02d6      	lsls	r6, r2, #11
 8002dc8:	d509      	bpl.n	8002dde <HAL_UART_IRQHandler+0xf6>
 8002dca:	0268      	lsls	r0, r5, #9
 8002dcc:	d507      	bpl.n	8002dde <HAL_UART_IRQHandler+0xf6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002dce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8002dd2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002dd4:	621a      	str	r2, [r3, #32]
}
 8002dd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002dda:	f000 bafd 	b.w	80033d8 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != RESET)
 8002dde:	0616      	lsls	r6, r2, #24
 8002de0:	d505      	bpl.n	8002dee <HAL_UART_IRQHandler+0x106>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002de2:	060d      	lsls	r5, r1, #24
 8002de4:	d503      	bpl.n	8002dee <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 8002de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002de8:	b18b      	cbz	r3, 8002e0e <HAL_UART_IRQHandler+0x126>
      huart->TxISR(huart);
 8002dea:	4620      	mov	r0, r4
 8002dec:	e78c      	b.n	8002d08 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dee:	0650      	lsls	r0, r2, #25
 8002df0:	d50d      	bpl.n	8002e0e <HAL_UART_IRQHandler+0x126>
 8002df2:	064a      	lsls	r2, r1, #25
 8002df4:	d50b      	bpl.n	8002e0e <HAL_UART_IRQHandler+0x126>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dfc:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->TxISR = NULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f7ff fecf 	bl	8002bac <HAL_UART_TxCpltCallback>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	08002e15 	.word	0x08002e15

08002e14 <UART_DMAAbortOnError>:
{
 8002e14:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e16:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002e1e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002e22:	f7ff ff36 	bl	8002c92 <HAL_UART_ErrorCallback>
 8002e26:	bd08      	pop	{r3, pc}

08002e28 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e28:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e2a:	69c1      	ldr	r1, [r0, #28]
{
 8002e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e30:	6883      	ldr	r3, [r0, #8]
 8002e32:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e34:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e36:	4303      	orrs	r3, r0
 8002e38:	6960      	ldr	r0, [r4, #20]
 8002e3a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e3c:	48ba      	ldr	r0, [pc, #744]	; (8003128 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e3e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e40:	4028      	ands	r0, r5
 8002e42:	4303      	orrs	r3, r0
 8002e44:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e46:	6853      	ldr	r3, [r2, #4]
 8002e48:	68e0      	ldr	r0, [r4, #12]
 8002e4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e4e:	4303      	orrs	r3, r0
 8002e50:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e52:	4bb6      	ldr	r3, [pc, #728]	; (800312c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e54:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e56:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8002e58:	bf1c      	itt	ne
 8002e5a:	6a23      	ldrne	r3, [r4, #32]
 8002e5c:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e5e:	6893      	ldr	r3, [r2, #8]
 8002e60:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e64:	4303      	orrs	r3, r0
 8002e66:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e68:	4bb1      	ldr	r3, [pc, #708]	; (8003130 <UART_SetConfig+0x308>)
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d119      	bne.n	8002ea2 <UART_SetConfig+0x7a>
 8002e6e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002e72:	4ab0      	ldr	r2, [pc, #704]	; (8003134 <UART_SetConfig+0x30c>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e7c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002e80:	5cd3      	ldrb	r3, [r2, r3]
 8002e82:	f040 8138 	bne.w	80030f6 <UART_SetConfig+0x2ce>
    switch (clocksource)
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	f200 808f 	bhi.w	8002faa <UART_SetConfig+0x182>
 8002e8c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002e90:	00ca011a 	.word	0x00ca011a
 8002e94:	008d00f9 	.word	0x008d00f9
 8002e98:	008d0114 	.word	0x008d0114
 8002e9c:	008d008d 	.word	0x008d008d
 8002ea0:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ea2:	4ba5      	ldr	r3, [pc, #660]	; (8003138 <UART_SetConfig+0x310>)
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d107      	bne.n	8002eb8 <UART_SetConfig+0x90>
 8002ea8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002eac:	4aa3      	ldr	r2, [pc, #652]	; (800313c <UART_SetConfig+0x314>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	e7e1      	b.n	8002e7c <UART_SetConfig+0x54>
 8002eb8:	4ba1      	ldr	r3, [pc, #644]	; (8003140 <UART_SetConfig+0x318>)
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d123      	bne.n	8002f06 <UART_SetConfig+0xde>
 8002ebe:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002eca:	2b10      	cmp	r3, #16
 8002ecc:	f000 80f1 	beq.w	80030b2 <UART_SetConfig+0x28a>
 8002ed0:	d80b      	bhi.n	8002eea <UART_SetConfig+0xc2>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80f3 	beq.w	80030be <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ed8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        ret = HAL_ERROR;
 8002edc:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002ee0:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ee4:	f000 80f8 	beq.w	80030d8 <UART_SetConfig+0x2b0>
 8002ee8:	e0a8      	b.n	800303c <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	f000 80c6 	beq.w	800307c <UART_SetConfig+0x254>
 8002ef0:	2b30      	cmp	r3, #48	; 0x30
 8002ef2:	d1f1      	bne.n	8002ed8 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ef4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002ef8:	f040 80b8 	bne.w	800306c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002efc:	6860      	ldr	r0, [r4, #4]
 8002efe:	0843      	lsrs	r3, r0, #1
 8002f00:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002f04:	e0c3      	b.n	800308e <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f06:	4b8f      	ldr	r3, [pc, #572]	; (8003144 <UART_SetConfig+0x31c>)
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d11e      	bne.n	8002f4a <UART_SetConfig+0x122>
 8002f0c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	f000 80bb 	beq.w	8003094 <UART_SetConfig+0x26c>
 8002f1e:	d80a      	bhi.n	8002f36 <UART_SetConfig+0x10e>
 8002f20:	b97b      	cbnz	r3, 8002f42 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f22:	4b82      	ldr	r3, [pc, #520]	; (800312c <UART_SetConfig+0x304>)
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 80ca 	bne.w	80030be <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002f2a:	f7ff f9c1 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
        break;
 8002f2e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002f30:	bbb0      	cbnz	r0, 8002fa0 <UART_SetConfig+0x178>
 8002f32:	4602      	mov	r2, r0
 8002f34:	e03a      	b.n	8002fac <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	f000 809d 	beq.w	8003076 <UART_SetConfig+0x24e>
 8002f3c:	2bc0      	cmp	r3, #192	; 0xc0
 8002f3e:	f000 80b0 	beq.w	80030a2 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f42:	4b7a      	ldr	r3, [pc, #488]	; (800312c <UART_SetConfig+0x304>)
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d1c7      	bne.n	8002ed8 <UART_SetConfig+0xb0>
 8002f48:	e02f      	b.n	8002faa <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f4a:	4b7f      	ldr	r3, [pc, #508]	; (8003148 <UART_SetConfig+0x320>)
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d111      	bne.n	8002f74 <UART_SetConfig+0x14c>
 8002f50:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f60:	f000 8098 	beq.w	8003094 <UART_SetConfig+0x26c>
 8002f64:	d9dc      	bls.n	8002f20 <UART_SetConfig+0xf8>
 8002f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f6a:	f000 8084 	beq.w	8003076 <UART_SetConfig+0x24e>
 8002f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f72:	e7e4      	b.n	8002f3e <UART_SetConfig+0x116>
 8002f74:	4b6d      	ldr	r3, [pc, #436]	; (800312c <UART_SetConfig+0x304>)
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d1ae      	bne.n	8002ed8 <UART_SetConfig+0xb0>
 8002f7a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8a:	f000 8083 	beq.w	8003094 <UART_SetConfig+0x26c>
 8002f8e:	d9c7      	bls.n	8002f20 <UART_SetConfig+0xf8>
 8002f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f94:	d06f      	beq.n	8003076 <UART_SetConfig+0x24e>
 8002f96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f9a:	e7d0      	b.n	8002f3e <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002f9c:	486b      	ldr	r0, [pc, #428]	; (800314c <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f9e:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002fa0:	6862      	ldr	r2, [r4, #4]
 8002fa2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002fa6:	4281      	cmp	r1, r0
 8002fa8:	d905      	bls.n	8002fb6 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8002faa:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002fb0:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002fb6:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002fba:	d8f6      	bhi.n	8002faa <UART_SetConfig+0x182>
        switch (clocksource)
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d82e      	bhi.n	800301e <UART_SetConfig+0x1f6>
 8002fc0:	e8df f003 	tbb	[pc, r3]
 8002fc4:	2d1c2d05 	.word	0x2d1c2d05
 8002fc8:	2d2d2d24 	.word	0x2d2d2d24
 8002fcc:	27          	.byte	0x27
 8002fcd:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002fce:	f7ff f96f 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002fd2:	6862      	ldr	r2, [r4, #4]
 8002fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fd8:	0856      	lsrs	r6, r2, #1
 8002fda:	2700      	movs	r7, #0
 8002fdc:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002fe6:	f7fd fe8b 	bl	8000d00 <__aeabi_uldivmod>
            break;
 8002fea:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fec:	4b58      	ldr	r3, [pc, #352]	; (8003150 <UART_SetConfig+0x328>)
 8002fee:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002ff2:	4299      	cmp	r1, r3
 8002ff4:	d8d9      	bhi.n	8002faa <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	60d8      	str	r0, [r3, #12]
 8002ffa:	e7d7      	b.n	8002fac <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002ffc:	4855      	ldr	r0, [pc, #340]	; (8003154 <UART_SetConfig+0x32c>)
 8002ffe:	0855      	lsrs	r5, r2, #1
 8003000:	2300      	movs	r3, #0
 8003002:	2100      	movs	r1, #0
 8003004:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003006:	f141 0100 	adc.w	r1, r1, #0
 800300a:	e7ec      	b.n	8002fe6 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800300c:	f7fe fe44 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8003010:	e7df      	b.n	8002fd2 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003012:	0850      	lsrs	r0, r2, #1
 8003014:	2100      	movs	r1, #0
 8003016:	2300      	movs	r3, #0
 8003018:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800301c:	e7f3      	b.n	8003006 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 800301e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003020:	2000      	movs	r0, #0
 8003022:	e7e3      	b.n	8002fec <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003024:	f7ff f956 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 8003028:	e04e      	b.n	80030c8 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800302a:	f7ff f941 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800302e:	6862      	ldr	r2, [r4, #4]
 8003030:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003034:	fbb3 f3f2 	udiv	r3, r3, r2
 8003038:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800303a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303c:	f1a3 0010 	sub.w	r0, r3, #16
 8003040:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003044:	4288      	cmp	r0, r1
 8003046:	d8b0      	bhi.n	8002faa <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8003048:	6821      	ldr	r1, [r4, #0]
 800304a:	60cb      	str	r3, [r1, #12]
 800304c:	e7ae      	b.n	8002fac <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800304e:	f7ff f941 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 8003052:	e7ec      	b.n	800302e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003054:	6860      	ldr	r0, [r4, #4]
 8003056:	0843      	lsrs	r3, r0, #1
 8003058:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800305c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003060:	fbb3 f3f0 	udiv	r3, r3, r0
 8003064:	e7e8      	b.n	8003038 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003066:	f7fe fe17 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 800306a:	e7e0      	b.n	800302e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800306c:	6860      	ldr	r0, [r4, #4]
 800306e:	0843      	lsrs	r3, r0, #1
 8003070:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003074:	e7f4      	b.n	8003060 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003076:	4b2d      	ldr	r3, [pc, #180]	; (800312c <UART_SetConfig+0x304>)
 8003078:	429a      	cmp	r2, r3
 800307a:	d08f      	beq.n	8002f9c <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800307c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003080:	d1e8      	bne.n	8003054 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003082:	6860      	ldr	r0, [r4, #4]
 8003084:	0843      	lsrs	r3, r0, #1
 8003086:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800308a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800308e:	fbb3 f3f0 	udiv	r3, r3, r0
 8003092:	e01f      	b.n	80030d4 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003094:	4b25      	ldr	r3, [pc, #148]	; (800312c <UART_SetConfig+0x304>)
 8003096:	429a      	cmp	r2, r3
 8003098:	d10b      	bne.n	80030b2 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800309a:	f7fe fdfd 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
        break;
 800309e:	2304      	movs	r3, #4
 80030a0:	e746      	b.n	8002f30 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 80030a2:	4b22      	ldr	r3, [pc, #136]	; (800312c <UART_SetConfig+0x304>)
 80030a4:	429a      	cmp	r2, r3
 80030a6:	f47f af25 	bne.w	8002ef4 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80030aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 80030ae:	2308      	movs	r3, #8
 80030b0:	e776      	b.n	8002fa0 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030b2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80030b6:	d1d6      	bne.n	8003066 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030b8:	f7fe fdee 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 80030bc:	e004      	b.n	80030c8 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030be:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80030c2:	d1b2      	bne.n	800302a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80030c4:	f7ff f8f4 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030c8:	6861      	ldr	r1, [r4, #4]
 80030ca:	084a      	lsrs	r2, r1, #1
 80030cc:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80030d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80030d4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80030d6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d8:	f1a3 0010 	sub.w	r0, r3, #16
 80030dc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80030e0:	4288      	cmp	r0, r1
 80030e2:	f63f af62 	bhi.w	8002faa <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 80030e6:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80030ea:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ec:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80030f0:	430b      	orrs	r3, r1
 80030f2:	60c3      	str	r3, [r0, #12]
 80030f4:	e75a      	b.n	8002fac <UART_SetConfig+0x184>
    switch (clocksource)
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	f63f af57 	bhi.w	8002faa <UART_SetConfig+0x182>
 80030fc:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <UART_SetConfig+0x2dc>)
 80030fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003102:	bf00      	nop
 8003104:	0800302b 	.word	0x0800302b
 8003108:	0800304f 	.word	0x0800304f
 800310c:	08003055 	.word	0x08003055
 8003110:	08002fab 	.word	0x08002fab
 8003114:	08003067 	.word	0x08003067
 8003118:	08002fab 	.word	0x08002fab
 800311c:	08002fab 	.word	0x08002fab
 8003120:	08002fab 	.word	0x08002fab
 8003124:	0800306d 	.word	0x0800306d
 8003128:	efff69f3 	.word	0xefff69f3
 800312c:	40008000 	.word	0x40008000
 8003130:	40013800 	.word	0x40013800
 8003134:	0800a5e8 	.word	0x0800a5e8
 8003138:	40004400 	.word	0x40004400
 800313c:	0800a5ec 	.word	0x0800a5ec
 8003140:	40004800 	.word	0x40004800
 8003144:	40004c00 	.word	0x40004c00
 8003148:	40005000 	.word	0x40005000
 800314c:	00f42400 	.word	0x00f42400
 8003150:	000ffcff 	.word	0x000ffcff
 8003154:	f4240000 	.word	0xf4240000

08003158 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003158:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800315a:	07da      	lsls	r2, r3, #31
{
 800315c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800315e:	d506      	bpl.n	800316e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003160:	6801      	ldr	r1, [r0, #0]
 8003162:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003164:	684a      	ldr	r2, [r1, #4]
 8003166:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800316a:	4322      	orrs	r2, r4
 800316c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800316e:	079c      	lsls	r4, r3, #30
 8003170:	d506      	bpl.n	8003180 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003172:	6801      	ldr	r1, [r0, #0]
 8003174:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003176:	684a      	ldr	r2, [r1, #4]
 8003178:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800317c:	4322      	orrs	r2, r4
 800317e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003180:	0759      	lsls	r1, r3, #29
 8003182:	d506      	bpl.n	8003192 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003184:	6801      	ldr	r1, [r0, #0]
 8003186:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003188:	684a      	ldr	r2, [r1, #4]
 800318a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800318e:	4322      	orrs	r2, r4
 8003190:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003192:	071a      	lsls	r2, r3, #28
 8003194:	d506      	bpl.n	80031a4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003196:	6801      	ldr	r1, [r0, #0]
 8003198:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800319a:	684a      	ldr	r2, [r1, #4]
 800319c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031a0:	4322      	orrs	r2, r4
 80031a2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031a4:	06dc      	lsls	r4, r3, #27
 80031a6:	d506      	bpl.n	80031b6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031a8:	6801      	ldr	r1, [r0, #0]
 80031aa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80031ac:	688a      	ldr	r2, [r1, #8]
 80031ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031b2:	4322      	orrs	r2, r4
 80031b4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031b6:	0699      	lsls	r1, r3, #26
 80031b8:	d506      	bpl.n	80031c8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031ba:	6801      	ldr	r1, [r0, #0]
 80031bc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80031be:	688a      	ldr	r2, [r1, #8]
 80031c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031c4:	4322      	orrs	r2, r4
 80031c6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031c8:	065a      	lsls	r2, r3, #25
 80031ca:	d50f      	bpl.n	80031ec <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031cc:	6801      	ldr	r1, [r0, #0]
 80031ce:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80031d0:	684a      	ldr	r2, [r1, #4]
 80031d2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80031d6:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031d8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031dc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031de:	d105      	bne.n	80031ec <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031e0:	684a      	ldr	r2, [r1, #4]
 80031e2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80031e4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80031e8:	4322      	orrs	r2, r4
 80031ea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	d506      	bpl.n	80031fe <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031f0:	6802      	ldr	r2, [r0, #0]
 80031f2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80031f4:	6853      	ldr	r3, [r2, #4]
 80031f6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80031fa:	430b      	orrs	r3, r1
 80031fc:	6053      	str	r3, [r2, #4]
 80031fe:	bd10      	pop	{r4, pc}

08003200 <UART_WaitOnFlagUntilTimeout>:
{
 8003200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003204:	9d06      	ldr	r5, [sp, #24]
 8003206:	4604      	mov	r4, r0
 8003208:	460f      	mov	r7, r1
 800320a:	4616      	mov	r6, r2
 800320c:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320e:	6821      	ldr	r1, [r4, #0]
 8003210:	69ca      	ldr	r2, [r1, #28]
 8003212:	ea37 0302 	bics.w	r3, r7, r2
 8003216:	bf0c      	ite	eq
 8003218:	2201      	moveq	r2, #1
 800321a:	2200      	movne	r2, #0
 800321c:	42b2      	cmp	r2, r6
 800321e:	d002      	beq.n	8003226 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003220:	2000      	movs	r0, #0
}
 8003222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003226:	1c6b      	adds	r3, r5, #1
 8003228:	d0f2      	beq.n	8003210 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800322a:	b99d      	cbnz	r5, 8003254 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003234:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800323e:	2320      	movs	r3, #32
 8003240:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8003244:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8003248:	2300      	movs	r3, #0
 800324a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800324e:	2003      	movs	r0, #3
 8003250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003254:	f7fd ff12 	bl	800107c <HAL_GetTick>
 8003258:	eba0 0008 	sub.w	r0, r0, r8
 800325c:	4285      	cmp	r5, r0
 800325e:	d2d6      	bcs.n	800320e <UART_WaitOnFlagUntilTimeout+0xe>
 8003260:	e7e4      	b.n	800322c <UART_WaitOnFlagUntilTimeout+0x2c>

08003262 <HAL_UART_Transmit>:
{
 8003262:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003266:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003268:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800326c:	2b20      	cmp	r3, #32
{
 800326e:	4604      	mov	r4, r0
 8003270:	460d      	mov	r5, r1
 8003272:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003274:	d14a      	bne.n	800330c <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8003276:	2900      	cmp	r1, #0
 8003278:	d046      	beq.n	8003308 <HAL_UART_Transmit+0xa6>
 800327a:	2a00      	cmp	r2, #0
 800327c:	d044      	beq.n	8003308 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800327e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8003282:	2b01      	cmp	r3, #1
 8003284:	d042      	beq.n	800330c <HAL_UART_Transmit+0xaa>
 8003286:	2301      	movs	r3, #1
 8003288:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328c:	2300      	movs	r3, #0
 800328e:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003290:	2321      	movs	r3, #33	; 0x21
 8003292:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8003296:	f7fd fef1 	bl	800107c <HAL_GetTick>
    huart->TxXferSize  = Size;
 800329a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800329e:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80032a0:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032a4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032a8:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 80032aa:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ac:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 80032ae:	b952      	cbnz	r2, 80032c6 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b0:	2140      	movs	r1, #64	; 0x40
 80032b2:	4620      	mov	r0, r4
 80032b4:	f7ff ffa4 	bl	8003200 <UART_WaitOnFlagUntilTimeout>
 80032b8:	b958      	cbnz	r0, 80032d2 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 80032ba:	2320      	movs	r3, #32
 80032bc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 80032c0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 80032c4:	e006      	b.n	80032d4 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c6:	2200      	movs	r2, #0
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	4620      	mov	r0, r4
 80032cc:	f7ff ff98 	bl	8003200 <UART_WaitOnFlagUntilTimeout>
 80032d0:	b118      	cbz	r0, 80032da <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 80032d2:	2003      	movs	r0, #3
}
 80032d4:	b002      	add	sp, #8
 80032d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032da:	68a3      	ldr	r3, [r4, #8]
 80032dc:	6822      	ldr	r2, [r4, #0]
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	d10d      	bne.n	8003300 <HAL_UART_Transmit+0x9e>
 80032e4:	6923      	ldr	r3, [r4, #16]
 80032e6:	b95b      	cbnz	r3, 8003300 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80032e8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80032ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f0:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80032f2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80032fe:	e7d1      	b.n	80032a4 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003300:	782b      	ldrb	r3, [r5, #0]
 8003302:	8513      	strh	r3, [r2, #40]	; 0x28
 8003304:	3501      	adds	r5, #1
 8003306:	e7f4      	b.n	80032f2 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8003308:	2001      	movs	r0, #1
 800330a:	e7e3      	b.n	80032d4 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 800330c:	2002      	movs	r0, #2
 800330e:	e7e1      	b.n	80032d4 <HAL_UART_Transmit+0x72>

08003310 <UART_CheckIdleState>:
{
 8003310:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003312:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003314:	2600      	movs	r6, #0
 8003316:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8003318:	f7fd feb0 	bl	800107c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003322:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003324:	d417      	bmi.n	8003356 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	075b      	lsls	r3, r3, #29
 800332c:	d50a      	bpl.n	8003344 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800332e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2200      	movs	r2, #0
 8003336:	462b      	mov	r3, r5
 8003338:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800333c:	4620      	mov	r0, r4
 800333e:	f7ff ff5f 	bl	8003200 <UART_WaitOnFlagUntilTimeout>
 8003342:	b9a0      	cbnz	r0, 800336e <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8003344:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003346:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003348:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800334c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8003350:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8003354:	e00c      	b.n	8003370 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003356:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	4632      	mov	r2, r6
 800335e:	4603      	mov	r3, r0
 8003360:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003364:	4620      	mov	r0, r4
 8003366:	f7ff ff4b 	bl	8003200 <UART_WaitOnFlagUntilTimeout>
 800336a:	2800      	cmp	r0, #0
 800336c:	d0db      	beq.n	8003326 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800336e:	2003      	movs	r0, #3
}
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}

08003374 <HAL_UART_Init>:
{
 8003374:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003376:	4604      	mov	r4, r0
 8003378:	b360      	cbz	r0, 80033d4 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800337a:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800337e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003382:	b91b      	cbnz	r3, 800338c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003384:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003388:	f001 fafa 	bl	8004980 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800338c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800338e:	2324      	movs	r3, #36	; 0x24
 8003390:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8003394:	6813      	ldr	r3, [r2, #0]
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800339c:	4620      	mov	r0, r4
 800339e:	f7ff fd43 	bl	8002e28 <UART_SetConfig>
 80033a2:	2801      	cmp	r0, #1
 80033a4:	d016      	beq.n	80033d4 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033a8:	b113      	cbz	r3, 80033b0 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80033aa:	4620      	mov	r0, r4
 80033ac:	f7ff fed4 	bl	8003158 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033c0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80033c8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80033ca:	601a      	str	r2, [r3, #0]
}
 80033cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80033d0:	f7ff bf9e 	b.w	8003310 <UART_CheckIdleState>
}
 80033d4:	2001      	movs	r0, #1
 80033d6:	bd10      	pop	{r4, pc}

080033d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80033d8:	4770      	bx	lr
	...

080033dc <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80033dc:	b510      	push	{r4, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
  DAC_ChannelConfTypeDef sConfig = {0};
 80033e0:	2224      	movs	r2, #36	; 0x24
 80033e2:	2100      	movs	r1, #0
 80033e4:	a801      	add	r0, sp, #4
 80033e6:	f003 f953 	bl	8006690 <memset>

  /**DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80033ea:	4811      	ldr	r0, [pc, #68]	; (8003430 <MX_DAC1_Init+0x54>)
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <MX_DAC1_Init+0x58>)
 80033ee:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80033f0:	f7fd fec0 	bl	8001174 <HAL_DAC_Init>
 80033f4:	b108      	cbz	r0, 80033fa <MX_DAC1_Init+0x1e>
  {
    Error_Handler();
 80033f6:	f001 fa03 	bl	8004800 <Error_Handler>
  }
  /**DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80033fa:	2400      	movs	r4, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80033fc:	2304      	movs	r3, #4
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80033fe:	4622      	mov	r2, r4
 8003400:	eb0d 0103 	add.w	r1, sp, r3
 8003404:	480a      	ldr	r0, [pc, #40]	; (8003430 <MX_DAC1_Init+0x54>)
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003406:	9401      	str	r4, [sp, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8003408:	9302      	str	r3, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800340a:	9403      	str	r4, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800340c:	9404      	str	r4, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800340e:	9405      	str	r4, [sp, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003410:	f7fd ff74 	bl	80012fc <HAL_DAC_ConfigChannel>
 8003414:	b108      	cbz	r0, 800341a <MX_DAC1_Init+0x3e>
  {
    Error_Handler();
 8003416:	f001 f9f3 	bl	8004800 <Error_Handler>
  }
  /**DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800341a:	2210      	movs	r2, #16
 800341c:	a901      	add	r1, sp, #4
 800341e:	4804      	ldr	r0, [pc, #16]	; (8003430 <MX_DAC1_Init+0x54>)
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003420:	9404      	str	r4, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003422:	f7fd ff6b 	bl	80012fc <HAL_DAC_ConfigChannel>
 8003426:	b108      	cbz	r0, 800342c <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8003428:	f001 f9ea 	bl	8004800 <Error_Handler>
  }

}
 800342c:	b00a      	add	sp, #40	; 0x28
 800342e:	bd10      	pop	{r4, pc}
 8003430:	20012cac 	.word	0x20012cac
 8003434:	40007400 	.word	0x40007400

08003438 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003438:	b530      	push	{r4, r5, lr}
 800343a:	4605      	mov	r5, r0
 800343c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343e:	2214      	movs	r2, #20
 8003440:	2100      	movs	r1, #0
 8003442:	a803      	add	r0, sp, #12
 8003444:	f003 f924 	bl	8006690 <memset>
  if(dacHandle->Instance==DAC1)
 8003448:	682a      	ldr	r2, [r5, #0]
 800344a:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <HAL_DAC_MspInit+0xcc>)
 800344c:	429a      	cmp	r2, r3
 800344e:	d156      	bne.n	80034fe <HAL_DAC_MspInit+0xc6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003450:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8003454:	4c2c      	ldr	r4, [pc, #176]	; (8003508 <HAL_DAC_MspInit+0xd0>)
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003456:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003458:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800345c:	659a      	str	r2, [r3, #88]	; 0x58
 800345e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003460:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003464:	9201      	str	r2, [sp, #4]
 8003466:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003468:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	9302      	str	r3, [sp, #8]
 8003478:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800347a:	2330      	movs	r3, #48	; 0x30
 800347c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003482:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003484:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003486:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003488:	f7fe fa9c 	bl	80019c4 <HAL_GPIO_Init>
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800348c:	2280      	movs	r2, #128	; 0x80
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800348e:	4b1f      	ldr	r3, [pc, #124]	; (800350c <HAL_DAC_MspInit+0xd4>)
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003490:	6122      	str	r2, [r4, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003492:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003496:	f04f 0c06 	mov.w	ip, #6
 800349a:	f04f 0e10 	mov.w	lr, #16
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800349e:	6162      	str	r2, [r4, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034a4:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034a8:	61a2      	str	r2, [r4, #24]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034aa:	2300      	movs	r3, #0
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80034ac:	2220      	movs	r2, #32
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80034ae:	4620      	mov	r0, r4
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034b0:	60e3      	str	r3, [r4, #12]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80034b2:	61e2      	str	r2, [r4, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80034b4:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80034b6:	f7fe f973 	bl	80017a0 <HAL_DMA_Init>
 80034ba:	b108      	cbz	r0, 80034c0 <HAL_DAC_MspInit+0x88>
    {
      Error_Handler();
 80034bc:	f001 f9a0 	bl	8004800 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 80034c0:	60ac      	str	r4, [r5, #8]
 80034c2:	62a5      	str	r5, [r4, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel5;
 80034c4:	4c12      	ldr	r4, [pc, #72]	; (8003510 <HAL_DAC_MspInit+0xd8>)
    hdma_dac_ch2.Init.Request = DMA_REQUEST_3;
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_DAC_MspInit+0xdc>)
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	6122      	str	r2, [r4, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034cc:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034d0:	f04f 0c03 	mov.w	ip, #3
 80034d4:	f04f 0e10 	mov.w	lr, #16
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034d8:	6162      	str	r2, [r4, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034da:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034de:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034e2:	61a2      	str	r2, [r4, #24]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e4:	2300      	movs	r3, #0
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 80034e6:	2220      	movs	r2, #32
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80034e8:	4620      	mov	r0, r4
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ea:	60e3      	str	r3, [r4, #12]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 80034ec:	61e2      	str	r2, [r4, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80034ee:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80034f0:	f7fe f956 	bl	80017a0 <HAL_DMA_Init>
 80034f4:	b108      	cbz	r0, 80034fa <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 80034f6:	f001 f983 	bl	8004800 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 80034fa:	60ec      	str	r4, [r5, #12]
 80034fc:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80034fe:	b009      	add	sp, #36	; 0x24
 8003500:	bd30      	pop	{r4, r5, pc}
 8003502:	bf00      	nop
 8003504:	40007400 	.word	0x40007400
 8003508:	20012cc0 	.word	0x20012cc0
 800350c:	40020030 	.word	0x40020030
 8003510:	20012d08 	.word	0x20012d08
 8003514:	40020458 	.word	0x40020458

08003518 <MX_DFSDM1_Init>:

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8003518:	4836      	ldr	r0, [pc, #216]	; (80035f4 <MX_DFSDM1_Init+0xdc>)
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800351a:	4937      	ldr	r1, [pc, #220]	; (80035f8 <MX_DFSDM1_Init+0xe0>)
{
 800351c:	b508      	push	{r3, lr}
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800351e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8003522:	2300      	movs	r3, #0
 8003524:	e880 000a 	stmia.w	r0, {r1, r3}
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8003528:	61c2      	str	r2, [r0, #28]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800352a:	2301      	movs	r3, #1
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 128;
 800352c:	2280      	movs	r2, #128	; 0x80
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800352e:	7203      	strb	r3, [r0, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8003530:	7243      	strb	r3, [r0, #9]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 128;
 8003532:	6202      	str	r2, [r0, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8003534:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8003536:	f7fe f853 	bl	80015e0 <HAL_DFSDM_FilterInit>
 800353a:	b108      	cbz	r0, 8003540 <MX_DFSDM1_Init+0x28>
  {
    Error_Handler();
 800353c:	f001 f960 	bl	8004800 <Error_Handler>
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8003540:	482e      	ldr	r0, [pc, #184]	; (80035fc <MX_DFSDM1_Init+0xe4>)
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8003542:	4a2f      	ldr	r2, [pc, #188]	; (8003600 <MX_DFSDM1_Init+0xe8>)
 8003544:	2300      	movs	r3, #0
 8003546:	e880 000c 	stmia.w	r0, {r2, r3}
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800354a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 800354e:	2301      	movs	r3, #1
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8003550:	61c2      	str	r2, [r0, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 128;
 8003552:	2280      	movs	r2, #128	; 0x80
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8003554:	7203      	strb	r3, [r0, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8003556:	7243      	strb	r3, [r0, #9]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 128;
 8003558:	6202      	str	r2, [r0, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 800355a:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 800355c:	f7fe f840 	bl	80015e0 <HAL_DFSDM_FilterInit>
 8003560:	b108      	cbz	r0, 8003566 <MX_DFSDM1_Init+0x4e>
  {
    Error_Handler();
 8003562:	f001 f94d 	bl	8004800 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8003566:	4827      	ldr	r0, [pc, #156]	; (8003604 <MX_DFSDM1_Init+0xec>)
 8003568:	4b27      	ldr	r3, [pc, #156]	; (8003608 <MX_DFSDM1_Init+0xf0>)
 800356a:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel2.Init.OutputClock.Divider = 32;
 800356c:	2120      	movs	r1, #32
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800356e:	2300      	movs	r3, #0
  hdfsdm1_channel2.Init.OutputClock.Divider = 32;
 8003570:	60c1      	str	r1, [r0, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8003572:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8003576:	2201      	movs	r2, #1
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8003578:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800357a:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800357c:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800357e:	6181      	str	r1, [r0, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8003580:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8003582:	2104      	movs	r1, #4
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8003584:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
  hdfsdm1_channel2.Init.Offset = 0;
 8003586:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x06;
 8003588:	2306      	movs	r3, #6
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800358a:	7102      	strb	r2, [r0, #4]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800358c:	6201      	str	r1, [r0, #32]
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800358e:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel2.Init.RightBitShift = 0x06;
 8003590:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8003592:	f7fd ffb1 	bl	80014f8 <HAL_DFSDM_ChannelInit>
 8003596:	b108      	cbz	r0, 800359c <MX_DFSDM1_Init+0x84>
  {
    Error_Handler();
 8003598:	f001 f932 	bl	8004800 <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 800359c:	481b      	ldr	r0, [pc, #108]	; (800360c <MX_DFSDM1_Init+0xf4>)
 800359e:	4b1c      	ldr	r3, [pc, #112]	; (8003610 <MX_DFSDM1_Init+0xf8>)
 80035a0:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 32;
 80035a2:	2120      	movs	r1, #32
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80035a4:	2300      	movs	r3, #0
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 80035a6:	2201      	movs	r2, #1
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80035a8:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 32;
 80035aa:	60c1      	str	r1, [r0, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80035ac:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80035ae:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80035b0:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80035b2:	2104      	movs	r1, #4
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80035b4:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
  hdfsdm1_channel3.Init.Offset = 0;
 80035b6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x06;
 80035b8:	2306      	movs	r3, #6
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 80035ba:	7102      	strb	r2, [r0, #4]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 80035bc:	61c2      	str	r2, [r0, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80035be:	6201      	str	r1, [r0, #32]
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 80035c0:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel3.Init.RightBitShift = 0x06;
 80035c2:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 80035c4:	f7fd ff98 	bl	80014f8 <HAL_DFSDM_ChannelInit>
 80035c8:	b108      	cbz	r0, 80035ce <MX_DFSDM1_Init+0xb6>
  {
    Error_Handler();
 80035ca:	f001 f919 	bl	8004800 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80035ce:	2201      	movs	r2, #1
 80035d0:	4910      	ldr	r1, [pc, #64]	; (8003614 <MX_DFSDM1_Init+0xfc>)
 80035d2:	4808      	ldr	r0, [pc, #32]	; (80035f4 <MX_DFSDM1_Init+0xdc>)
 80035d4:	f7fe f876 	bl	80016c4 <HAL_DFSDM_FilterConfigRegChannel>
 80035d8:	b108      	cbz	r0, 80035de <MX_DFSDM1_Init+0xc6>
  {
    Error_Handler();
 80035da:	f001 f911 	bl	8004800 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80035de:	2201      	movs	r2, #1
 80035e0:	490d      	ldr	r1, [pc, #52]	; (8003618 <MX_DFSDM1_Init+0x100>)
 80035e2:	4806      	ldr	r0, [pc, #24]	; (80035fc <MX_DFSDM1_Init+0xe4>)
 80035e4:	f7fe f86e 	bl	80016c4 <HAL_DFSDM_FilterConfigRegChannel>
 80035e8:	b118      	cbz	r0, 80035f2 <MX_DFSDM1_Init+0xda>
  {
    Error_Handler();
  }

}
 80035ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80035ee:	f001 b907 	b.w	8004800 <Error_Handler>
 80035f2:	bd08      	pop	{r3, pc}
 80035f4:	20012d50 	.word	0x20012d50
 80035f8:	40016100 	.word	0x40016100
 80035fc:	20012e6c 	.word	0x20012e6c
 8003600:	40016180 	.word	0x40016180
 8003604:	20012ec0 	.word	0x20012ec0
 8003608:	40016040 	.word	0x40016040
 800360c:	20012da4 	.word	0x20012da4
 8003610:	40016060 	.word	0x40016060
 8003614:	00020004 	.word	0x00020004
 8003618:	00030008 	.word	0x00030008

0800361c <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 800361c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 800361e:	4c3a      	ldr	r4, [pc, #232]	; (8003708 <HAL_DFSDM_FilterMspInit+0xec>)
{
 8003620:	b089      	sub	sp, #36	; 0x24
 8003622:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	2214      	movs	r2, #20
 8003626:	2100      	movs	r1, #0
 8003628:	a803      	add	r0, sp, #12
 800362a:	f003 f831 	bl	8006690 <memset>
  if(DFSDM1_Init == 0)
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	bb2b      	cbnz	r3, 800367e <HAL_DFSDM_FilterMspInit+0x62>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003632:	4a36      	ldr	r2, [pc, #216]	; (800370c <HAL_DFSDM_FilterMspInit+0xf0>)
 8003634:	6813      	ldr	r3, [r2, #0]
 8003636:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003638:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	4b34      	ldr	r3, [pc, #208]	; (8003710 <HAL_DFSDM_FilterMspInit+0xf4>)
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800363e:	d108      	bne.n	8003652 <HAL_DFSDM_FilterMspInit+0x36>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003640:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003642:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003646:	661a      	str	r2, [r3, #96]	; 0x60
 8003648:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800364a:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 800364e:	9201      	str	r2, [sp, #4]
 8003650:	9a01      	ldr	r2, [sp, #4]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003654:	482f      	ldr	r0, [pc, #188]	; (8003714 <HAL_DFSDM_FilterMspInit+0xf8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003656:	f042 0204 	orr.w	r2, r2, #4
 800365a:	64da      	str	r2, [r3, #76]	; 0x4c
 800365c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	9302      	str	r3, [sp, #8]
 8003664:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 8003666:	2384      	movs	r3, #132	; 0x84
 8003668:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366a:	2302      	movs	r3, #2
 800366c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800366e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003670:	2306      	movs	r3, #6
 8003672:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003674:	f7fe f9a6 	bl	80019c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	3301      	adds	r3, #1
 800367c:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800367e:	682a      	ldr	r2, [r5, #0]
 8003680:	4b25      	ldr	r3, [pc, #148]	; (8003718 <HAL_DFSDM_FilterMspInit+0xfc>)
 8003682:	429a      	cmp	r2, r3
 8003684:	d11c      	bne.n	80036c0 <HAL_DFSDM_FilterMspInit+0xa4>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003686:	4c25      	ldr	r4, [pc, #148]	; (800371c <HAL_DFSDM_FilterMspInit+0x100>)
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003688:	2280      	movs	r2, #128	; 0x80
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 800368a:	f503 431f 	add.w	r3, r3, #40704	; 0x9f00
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800368e:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003690:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003694:	3344      	adds	r3, #68	; 0x44
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003696:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003698:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 800369c:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800369e:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80036a0:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80036a2:	2220      	movs	r2, #32
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80036a4:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80036a6:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036a8:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80036aa:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80036ac:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80036ae:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80036b0:	f7fe f876 	bl	80017a0 <HAL_DMA_Init>
 80036b4:	b108      	cbz	r0, 80036ba <HAL_DFSDM_FilterMspInit+0x9e>
    {
      Error_Handler();
 80036b6:	f001 f8a3 	bl	8004800 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 80036ba:	62a5      	str	r5, [r4, #40]	; 0x28
 80036bc:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 80036be:	62ac      	str	r4, [r5, #40]	; 0x28
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 80036c0:	682a      	ldr	r2, [r5, #0]
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <HAL_DFSDM_FilterMspInit+0x104>)
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d11c      	bne.n	8003702 <HAL_DFSDM_FilterMspInit+0xe6>
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 80036c8:	4c16      	ldr	r4, [pc, #88]	; (8003724 <HAL_DFSDM_FilterMspInit+0x108>)
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80036ca:	2280      	movs	r2, #128	; 0x80
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 80036cc:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80036d0:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036d2:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 80036d6:	33d8      	adds	r3, #216	; 0xd8
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036d8:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036da:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 80036de:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036e0:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 80036e2:	2300      	movs	r3, #0
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80036e4:	2220      	movs	r2, #32
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80036e6:	4620      	mov	r0, r4
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 80036e8:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036ea:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ec:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80036ee:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_LOW;
 80036f0:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80036f2:	f7fe f855 	bl	80017a0 <HAL_DMA_Init>
 80036f6:	b108      	cbz	r0, 80036fc <HAL_DFSDM_FilterMspInit+0xe0>
    {
      Error_Handler();
 80036f8:	f001 f882 	bl	8004800 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 80036fc:	62a5      	str	r5, [r4, #40]	; 0x28
 80036fe:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8003700:	62ac      	str	r4, [r5, #40]	; 0x28
  }

}
 8003702:	b009      	add	sp, #36	; 0x24
 8003704:	bd30      	pop	{r4, r5, pc}
 8003706:	bf00      	nop
 8003708:	2000022c 	.word	0x2000022c
 800370c:	20000230 	.word	0x20000230
 8003710:	40021000 	.word	0x40021000
 8003714:	48000800 	.word	0x48000800
 8003718:	40016100 	.word	0x40016100
 800371c:	20012e24 	.word	0x20012e24
 8003720:	40016180 	.word	0x40016180
 8003724:	20012ddc 	.word	0x20012ddc

08003728 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8003728:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 800372a:	4c18      	ldr	r4, [pc, #96]	; (800378c <HAL_DFSDM_ChannelMspInit+0x64>)
{
 800372c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372e:	2214      	movs	r2, #20
 8003730:	2100      	movs	r1, #0
 8003732:	a803      	add	r0, sp, #12
 8003734:	f002 ffac 	bl	8006690 <memset>
  if(DFSDM1_Init == 0)
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	bb2b      	cbnz	r3, 8003788 <HAL_DFSDM_ChannelMspInit+0x60>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800373c:	4a14      	ldr	r2, [pc, #80]	; (8003790 <HAL_DFSDM_ChannelMspInit+0x68>)
 800373e:	6813      	ldr	r3, [r2, #0]
 8003740:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003742:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <HAL_DFSDM_ChannelMspInit+0x6c>)
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003748:	d108      	bne.n	800375c <HAL_DFSDM_ChannelMspInit+0x34>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800374a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800374c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003750:	661a      	str	r2, [r3, #96]	; 0x60
 8003752:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003754:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8003758:	9201      	str	r2, [sp, #4]
 800375a:	9a01      	ldr	r2, [sp, #4]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800375c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800375e:	480e      	ldr	r0, [pc, #56]	; (8003798 <HAL_DFSDM_ChannelMspInit+0x70>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003760:	f042 0204 	orr.w	r2, r2, #4
 8003764:	64da      	str	r2, [r3, #76]	; 0x4c
 8003766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	9302      	str	r3, [sp, #8]
 800376e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 8003770:	2384      	movs	r3, #132	; 0x84
 8003772:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003774:	2302      	movs	r3, #2
 8003776:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003778:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800377a:	2306      	movs	r3, #6
 800377c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800377e:	f7fe f921 	bl	80019c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	6023      	str	r3, [r4, #0]
  }
}
 8003788:	b008      	add	sp, #32
 800378a:	bd10      	pop	{r4, pc}
 800378c:	2000022c 	.word	0x2000022c
 8003790:	20000230 	.word	0x20000230
 8003794:	40021000 	.word	0x40021000
 8003798:	48000800 	.word	0x48000800

0800379c <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800379c:	4b1f      	ldr	r3, [pc, #124]	; (800381c <MX_DMA_Init+0x80>)
{
 800379e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	649a      	str	r2, [r3, #72]	; 0x48
 80037a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037aa:	f002 0201 	and.w	r2, r2, #1
 80037ae:	9200      	str	r2, [sp, #0]
 80037b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037b4:	f042 0202 	orr.w	r2, r2, #2
 80037b8:	649a      	str	r2, [r3, #72]	; 0x48
 80037ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80037bc:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037be:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80037c2:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037c4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80037c6:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037c8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80037ca:	f7fd fc7d 	bl	80010c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80037ce:	200d      	movs	r0, #13
 80037d0:	f7fd fcae 	bl	8001130 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80037d4:	2200      	movs	r2, #0
 80037d6:	4611      	mov	r1, r2
 80037d8:	200e      	movs	r0, #14
 80037da:	f7fd fc75 	bl	80010c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80037de:	200e      	movs	r0, #14
 80037e0:	f7fd fca6 	bl	8001130 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80037e4:	2200      	movs	r2, #0
 80037e6:	4611      	mov	r1, r2
 80037e8:	200f      	movs	r0, #15
 80037ea:	f7fd fc6d 	bl	80010c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80037ee:	200f      	movs	r0, #15
 80037f0:	f7fd fc9e 	bl	8001130 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80037f4:	2200      	movs	r2, #0
 80037f6:	4611      	mov	r1, r2
 80037f8:	2011      	movs	r0, #17
 80037fa:	f7fd fc65 	bl	80010c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80037fe:	2011      	movs	r0, #17
 8003800:	f7fd fc96 	bl	8001130 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8003804:	2200      	movs	r2, #0
 8003806:	4611      	mov	r1, r2
 8003808:	203c      	movs	r0, #60	; 0x3c
 800380a:	f7fd fc5d 	bl	80010c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800380e:	203c      	movs	r0, #60	; 0x3c
 8003810:	f7fd fc8e 	bl	8001130 <HAL_NVIC_EnableIRQ>

}
 8003814:	b003      	add	sp, #12
 8003816:	f85d fb04 	ldr.w	pc, [sp], #4
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000

08003820 <hann>:

// Half sample shifter
float32_t half_sample_shifter[NUM_FILTERS_MEL * 2] = { 0.0f };

// hann window generation
void hann(int num) {
 8003820:	b570      	push	{r4, r5, r6, lr}
  arm_fill_f32(0.0f, hann_window, NN);
 8003822:	f44f 7100 	mov.w	r1, #512	; 0x200
void hann(int num) {
 8003826:	ed2d 8b02 	vpush	{d8}
 800382a:	4605      	mov	r5, r0
  arm_fill_f32(0.0f, hann_window, NN);
 800382c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8003878 <hann+0x58>
 8003830:	4812      	ldr	r0, [pc, #72]	; (800387c <hann+0x5c>)
 8003832:	4e12      	ldr	r6, [pc, #72]	; (800387c <hann+0x5c>)
 8003834:	f001 f922 	bl	8004a7c <arm_fill_f32>
  float32_t scale = 2.0f * PI / (float32_t) num;
 8003838:	ee07 5a90 	vmov	s15, r5
 800383c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003880 <hann+0x60>
 8003840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int n = 0; n < num; n++) {
 8003844:	2400      	movs	r4, #0
  float32_t scale = 2.0f * PI / (float32_t) num;
 8003846:	eec7 8a27 	vdiv.f32	s17, s14, s15
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 800384a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
  for (int n = 0; n < num; n++) {
 800384e:	42ac      	cmp	r4, r5
 8003850:	db02      	blt.n	8003858 <hann+0x38>
  }
}
 8003852:	ecbd 8b02 	vpop	{d8}
 8003856:	bd70      	pop	{r4, r5, r6, pc}
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 8003858:	ee07 4a90 	vmov	s15, r4
 800385c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  for (int n = 0; n < num; n++) {
 8003860:	3401      	adds	r4, #1
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 8003862:	ee20 0a28 	vmul.f32	s0, s0, s17
 8003866:	f002 fac5 	bl	8005df4 <arm_cos_f32>
 800386a:	eef0 7a48 	vmov.f32	s15, s16
 800386e:	eee0 7a48 	vfms.f32	s15, s0, s16
 8003872:	ece6 7a01 	vstmia	r6!, {s15}
 8003876:	e7ea      	b.n	800384e <hann+0x2e>
 8003878:	00000000 	.word	0x00000000
 800387c:	20010478 	.word	0x20010478
 8003880:	40c90fdb 	.word	0x40c90fdb
 8003884:	00000000 	.word	0x00000000

08003888 <log10_approx>:
 *
 *  reference: https://community.arm.com/tools/f/discussions/4292/cmsis-dsp-new-functionality-proposal
 */
const float32_t C[4] = {1.23149591368684f, -4.11852516267426f, 6.02197014179219f, -3.13396450166353f};
const float32_t LOG10_2 = log10(2.0f);
float32_t log10_approx(float32_t x) {
 8003888:	b500      	push	{lr}
 800388a:	ed2d 8b02 	vpush	{d8}
 800388e:	b083      	sub	sp, #12
  float32_t f, l;
  int e;
  f = frexpf(fabsf(x), &e);
 8003890:	a801      	add	r0, sp, #4
 8003892:	eeb0 0ac0 	vabs.f32	s0, s0
 8003896:	f003 fb87 	bl	8006fa8 <frexpf>
  l = LOG10_2 * (C[0]*f*f*f + C[1]*f*f + C[2]*f + C[3] + e);
 800389a:	ed9f 8a1d 	vldr	s16, [pc, #116]	; 8003910 <log10_approx+0x88>
 800389e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8003914 <log10_approx+0x8c>
 80038a2:	ee20 8a08 	vmul.f32	s16, s0, s16
 80038a6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80038aa:	ee28 8a00 	vmul.f32	s16, s16, s0
 80038ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 80038b2:	eea0 8a27 	vfma.f32	s16, s0, s15
 80038b6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003918 <log10_approx+0x90>
 80038ba:	eea0 8a27 	vfma.f32	s16, s0, s15
 80038be:	eddd 7a01 	vldr	s15, [sp, #4]
 80038c2:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800391c <log10_approx+0x94>
 80038c6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80038ca:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80038ce:	ee38 8a00 	vadd.f32	s16, s16, s0
 80038d2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003920 <log10_approx+0x98>
 80038d6:	ee28 8a00 	vmul.f32	s16, s16, s0
  return (l > 0.000001) ? l : 0.000001;  // for numerical stability
 80038da:	ee18 0a10 	vmov	r0, s16
 80038de:	f7fc fe93 	bl	8000608 <__aeabi_f2d>
 80038e2:	a309      	add	r3, pc, #36	; (adr r3, 8003908 <log10_approx+0x80>)
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f7fd f972 	bl	8000bd0 <__aeabi_dcmpgt>
}
 80038ec:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8003924 <log10_approx+0x9c>
  return (l > 0.000001) ? l : 0.000001;  // for numerical stability
 80038f0:	2800      	cmp	r0, #0
}
 80038f2:	bf18      	it	ne
 80038f4:	eeb0 0a48 	vmovne.f32	s0, s16
 80038f8:	b003      	add	sp, #12
 80038fa:	ecbd 8b02 	vpop	{d8}
 80038fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003902:	bf00      	nop
 8003904:	f3af 8000 	nop.w
 8003908:	a0b5ed8d 	.word	0xa0b5ed8d
 800390c:	3eb0c6f7 	.word	0x3eb0c6f7
 8003910:	c083caf5 	.word	0xc083caf5
 8003914:	3f9da1a8 	.word	0x3f9da1a8
 8003918:	40c0b3fb 	.word	0x40c0b3fb
 800391c:	404892e0 	.word	0x404892e0
 8003920:	3e9a209b 	.word	0x3e9a209b
 8003924:	358637bd 	.word	0x358637bd

08003928 <hz2mel>:

// Frequency in Hz to Mel-scale
float32_t hz2mel(float32_t hz) {
  return 2595.0f * log10(hz/700.0f + 1.0f);
 8003928:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003970 <hz2mel+0x48>
 800392c:	ee80 0a27 	vdiv.f32	s0, s0, s15
float32_t hz2mel(float32_t hz) {
 8003930:	b508      	push	{r3, lr}
  return 2595.0f * log10(hz/700.0f + 1.0f);
 8003932:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003936:	ee70 7a27 	vadd.f32	s15, s0, s15
 800393a:	ee17 0a90 	vmov	r0, s15
 800393e:	f7fc fe63 	bl	8000608 <__aeabi_f2d>
 8003942:	ec41 0b10 	vmov	d0, r0, r1
 8003946:	f005 fa1f 	bl	8008d88 <log10>
 800394a:	a307      	add	r3, pc, #28	; (adr r3, 8003968 <hz2mel+0x40>)
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	ec51 0b10 	vmov	r0, r1, d0
 8003954:	f7fc feac 	bl	80006b0 <__aeabi_dmul>
 8003958:	f7fd f982 	bl	8000c60 <__aeabi_d2f>
}
 800395c:	ee00 0a10 	vmov	s0, r0
 8003960:	bd08      	pop	{r3, pc}
 8003962:	bf00      	nop
 8003964:	f3af 8000 	nop.w
 8003968:	00000000 	.word	0x00000000
 800396c:	40a44600 	.word	0x40a44600
 8003970:	442f0000 	.word	0x442f0000
 8003974:	00000000 	.word	0x00000000

08003978 <mel2hz>:

// Mel-scale to Frequency in Hz
float32_t mel2hz(float32_t mel) {
  return 700.0 * (pow(10.0, (mel/2595.0f)) - 1.0f);
 8003978:	eddf 7a11 	vldr	s15, [pc, #68]	; 80039c0 <mel2hz+0x48>
 800397c:	ee80 7a27 	vdiv.f32	s14, s0, s15
float32_t mel2hz(float32_t mel) {
 8003980:	b508      	push	{r3, lr}
  return 700.0 * (pow(10.0, (mel/2595.0f)) - 1.0f);
 8003982:	ee17 0a10 	vmov	r0, s14
 8003986:	f7fc fe3f 	bl	8000608 <__aeabi_f2d>
 800398a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80039b8 <mel2hz+0x40>
 800398e:	ec41 0b11 	vmov	d1, r0, r1
 8003992:	f005 fa79 	bl	8008e88 <pow>
 8003996:	2200      	movs	r2, #0
 8003998:	ec51 0b10 	vmov	r0, r1, d0
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <mel2hz+0x4c>)
 800399e:	f7fc fcd3 	bl	8000348 <__aeabi_dsub>
 80039a2:	2200      	movs	r2, #0
 80039a4:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <mel2hz+0x50>)
 80039a6:	f7fc fe83 	bl	80006b0 <__aeabi_dmul>
 80039aa:	f7fd f959 	bl	8000c60 <__aeabi_d2f>
}
 80039ae:	ee00 0a10 	vmov	s0, r0
 80039b2:	bd08      	pop	{r3, pc}
 80039b4:	f3af 8000 	nop.w
 80039b8:	00000000 	.word	0x00000000
 80039bc:	40240000 	.word	0x40240000
 80039c0:	45223000 	.word	0x45223000
 80039c4:	3ff00000 	.word	0x3ff00000
 80039c8:	4085e000 	.word	0x4085e000

080039cc <n2hz>:

float32_t n2hz(uint32_t n) {
  return (float32_t)n/(float32_t)NN * nyq_fs;
 80039cc:	ee00 0a10 	vmov	s0, r0
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <n2hz+0x14>)
 80039d2:	eebb 0aeb 	vcvt.f32.u32	s0, s0, #9
 80039d6:	edd3 7a00 	vldr	s15, [r3]
}
 80039da:	ee20 0a27 	vmul.f32	s0, s0, s15
 80039de:	4770      	bx	lr
 80039e0:	20011480 	.word	0x20011480

080039e4 <clear_filterbank>:

void clear_filterbank(void) {
 80039e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int m = 0; m < NUM_FILTERS_SPEC + 2; m++) {
 80039e6:	2300      	movs	r3, #0
 80039e8:	480b      	ldr	r0, [pc, #44]	; (8003a18 <clear_filterbank+0x34>)
 80039ea:	4d0c      	ldr	r5, [pc, #48]	; (8003a1c <clear_filterbank+0x38>)
    for (int n = 0; n < NN/8; n++) {
      filterbank[m][n] = 0.0f;
    }
    hz_freqs[m] = 0.0f;
    hz_freqs_n[m] = 0;
 80039ec:	4e0c      	ldr	r6, [pc, #48]	; (8003a20 <clear_filterbank+0x3c>)
      filterbank[m][n] = 0.0f;
 80039ee:	2400      	movs	r4, #0
    hz_freqs_n[m] = 0;
 80039f0:	461f      	mov	r7, r3
  for (int m = 0; m < NUM_FILTERS_SPEC + 2; m++) {
 80039f2:	f240 1e01 	movw	lr, #257	; 0x101
 80039f6:	eb05 2103 	add.w	r1, r5, r3, lsl #8
void clear_filterbank(void) {
 80039fa:	2200      	movs	r2, #0
    for (int n = 0; n < NN/8; n++) {
 80039fc:	3201      	adds	r2, #1
 80039fe:	2a40      	cmp	r2, #64	; 0x40
      filterbank[m][n] = 0.0f;
 8003a00:	f841 4b04 	str.w	r4, [r1], #4
    for (int n = 0; n < NN/8; n++) {
 8003a04:	d1fa      	bne.n	80039fc <clear_filterbank+0x18>
    hz_freqs_n[m] = 0;
 8003a06:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
  for (int m = 0; m < NUM_FILTERS_SPEC + 2; m++) {
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	4573      	cmp	r3, lr
    hz_freqs[m] = 0.0f;
 8003a0e:	f840 4b04 	str.w	r4, [r0], #4
  for (int m = 0; m < NUM_FILTERS_SPEC + 2; m++) {
 8003a12:	d1f0      	bne.n	80039f6 <clear_filterbank+0x12>
 8003a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20010c78 	.word	0x20010c78
 8003a1c:	20000234 	.word	0x20000234
 8003a20:	2001107c 	.word	0x2001107c

08003a24 <generate_mel_scale_filters>:
}

/*
 * Filter bank: Mel scale
 */
void generate_mel_scale_filters(void) {
 8003a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a28:	ed2d 8b04 	vpush	{d8-d9}
  float32_t mel_freq_high;
  float32_t mel_delta;
  float32_t divider;

  clear_filterbank();
  mel_freq_high = hz2mel(nyq_fs);
 8003a2c:	4d49      	ldr	r5, [pc, #292]	; (8003b54 <generate_mel_scale_filters+0x130>)
 8003a2e:	4e4a      	ldr	r6, [pc, #296]	; (8003b58 <generate_mel_scale_filters+0x134>)
  mel_delta = mel_freq_high/(float32_t)(NUM_FILTERS_MEL + 2);

  for (int m = 0; m < NUM_FILTERS_MEL + 2; m++) {
    hz_freqs[m] = mel2hz(mel_delta * m);
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / nyq_fs * NN / 2);
 8003a30:	4f4a      	ldr	r7, [pc, #296]	; (8003b5c <generate_mel_scale_filters+0x138>)
 8003a32:	eddf 8a4b 	vldr	s17, [pc, #300]	; 8003b60 <generate_mel_scale_filters+0x13c>
void generate_mel_scale_filters(void) {
 8003a36:	b083      	sub	sp, #12
  clear_filterbank();
 8003a38:	f7ff ffd4 	bl	80039e4 <clear_filterbank>
  mel_freq_high = hz2mel(nyq_fs);
 8003a3c:	ed95 0a00 	vldr	s0, [r5]
 8003a40:	f7ff ff72 	bl	8003928 <hz2mel>
  mel_delta = mel_freq_high/(float32_t)(NUM_FILTERS_MEL + 2);
 8003a44:	eddf 7a47 	vldr	s15, [pc, #284]	; 8003b64 <generate_mel_scale_filters+0x140>
 8003a48:	ee80 9a27 	vdiv.f32	s18, s0, s15
  for (int m = 0; m < NUM_FILTERS_MEL + 2; m++) {
 8003a4c:	2400      	movs	r4, #0
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / nyq_fs * NN / 2);
 8003a4e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    hz_freqs[m] = mel2hz(mel_delta * m);
 8003a52:	ee07 4a90 	vmov	s15, r4
 8003a56:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003a5a:	ee20 0a09 	vmul.f32	s0, s0, s18
 8003a5e:	f7ff ff8b 	bl	8003978 <mel2hz>
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / nyq_fs * NN / 2);
 8003a62:	ed95 7a00 	vldr	s14, [r5]
    hz_freqs[m] = mel2hz(mel_delta * m);
 8003a66:	eca6 0a01 	vstmia	r6!, {s0}
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / nyq_fs * NN / 2);
 8003a6a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8003a6e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8003a72:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a7a:	ee17 3a90 	vmov	r3, s15
 8003a7e:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
  for (int m = 0; m < NUM_FILTERS_MEL + 2; m++) {
 8003a82:	3401      	adds	r4, #1
 8003a84:	2c2a      	cmp	r4, #42	; 0x2a
 8003a86:	d1e4      	bne.n	8003a52 <generate_mel_scale_filters+0x2e>
 8003a88:	4e37      	ldr	r6, [pc, #220]	; (8003b68 <generate_mel_scale_filters+0x144>)
 8003a8a:	4c34      	ldr	r4, [pc, #208]	; (8003b5c <generate_mel_scale_filters+0x138>)
 8003a8c:	f04f 0901 	mov.w	r9, #1
 8003a90:	4637      	mov	r7, r6

    for (int n = left_n; n < center_n; n++) {
      filterbank[m][n - left_n] = (n2hz(n) - freq_m_minus_1)/(freq_m - freq_m_minus_1)/divider;
    }

    filterbank[m][center_n - left_n] = 1.0f/divider;
 8003a92:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8003a96:	f06f 0803 	mvn.w	r8, #3
    left_n = hz_freqs_n[m-1];
 8003a9a:	6821      	ldr	r1, [r4, #0]
    center_n = hz_freqs_n[m];
 8003a9c:	f854 2f04 	ldr.w	r2, [r4, #4]!
    freq_m_minus_1 = n2hz(left_n);
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	f7ff ff93 	bl	80039cc <n2hz>
    freq_m = n2hz(center_n);
 8003aa6:	4610      	mov	r0, r2
    right_n = hz_freqs_n[m+1];
 8003aa8:	6865      	ldr	r5, [r4, #4]
    freq_m_minus_1 = n2hz(left_n);
 8003aaa:	eef0 5a40 	vmov.f32	s11, s0
    freq_m = n2hz(center_n);
 8003aae:	f7ff ff8d 	bl	80039cc <n2hz>
    freq_m_plus_1 = n2hz(right_n);
 8003ab2:	4628      	mov	r0, r5
    freq_m = n2hz(center_n);
 8003ab4:	eef0 6a40 	vmov.f32	s13, s0
    freq_m_plus_1 = n2hz(right_n);
 8003ab8:	f7ff ff88 	bl	80039cc <n2hz>
    divider = (float32_t)(right_n - left_n) / ADJUST_MEL_FILTERBANK;
 8003abc:	1a6b      	subs	r3, r5, r1
 8003abe:	ee07 3a10 	vmov	s14, r3
 8003ac2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003ac6:	ea4f 2a09 	mov.w	sl, r9, lsl #8
 8003aca:	ee27 7a08 	vmul.f32	s14, s14, s16
    freq_m_plus_1 = n2hz(right_n);
 8003ace:	eeb0 6a40 	vmov.f32	s12, s0
 8003ad2:	eb06 030a 	add.w	r3, r6, sl
    for (int n = left_n; n < center_n; n++) {
 8003ad6:	468b      	mov	fp, r1
 8003ad8:	4593      	cmp	fp, r2
 8003ada:	db17      	blt.n	8003b0c <generate_mel_scale_filters+0xe8>
    filterbank[m][center_n - left_n] = 1.0f/divider;
 8003adc:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8003ae0:	1a53      	subs	r3, r2, r1
 8003ae2:	eb03 1389 	add.w	r3, r3, r9, lsl #6
 8003ae6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003aea:	fb08 a101 	mla	r1, r8, r1, sl
 8003aee:	edc3 7a00 	vstr	s15, [r3]
 8003af2:	3201      	adds	r2, #1

    for (int n= center_n + 1; n <= right_n; n++) {
 8003af4:	4295      	cmp	r5, r2
 8003af6:	da1b      	bge.n	8003b30 <generate_mel_scale_filters+0x10c>
 8003af8:	f109 0901 	add.w	r9, r9, #1
  for (int m = 1; m < NUM_FILTERS_MEL + 1; m++) {
 8003afc:	f1b9 0f29 	cmp.w	r9, #41	; 0x29
 8003b00:	d1cb      	bne.n	8003a9a <generate_mel_scale_filters+0x76>
      filterbank[m][n - left_n] = (freq_m_plus_1 - n2hz(n))/(freq_m_plus_1 - freq_m)/divider;
    }
  }
}
 8003b02:	b003      	add	sp, #12
 8003b04:	ecbd 8b04 	vpop	{d8-d9}
 8003b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      filterbank[m][n - left_n] = (n2hz(n) - freq_m_minus_1)/(freq_m - freq_m_minus_1)/divider;
 8003b0c:	4658      	mov	r0, fp
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	f7ff ff5c 	bl	80039cc <n2hz>
 8003b14:	ee76 7ae5 	vsub.f32	s15, s13, s11
 8003b18:	ee30 0a65 	vsub.f32	s0, s0, s11
 8003b1c:	9b01      	ldr	r3, [sp, #4]
 8003b1e:	eec0 4a27 	vdiv.f32	s9, s0, s15
    for (int n = left_n; n < center_n; n++) {
 8003b22:	f10b 0b01 	add.w	fp, fp, #1
      filterbank[m][n - left_n] = (n2hz(n) - freq_m_minus_1)/(freq_m - freq_m_minus_1)/divider;
 8003b26:	eec4 7a87 	vdiv.f32	s15, s9, s14
 8003b2a:	ece3 7a01 	vstmia	r3!, {s15}
 8003b2e:	e7d3      	b.n	8003ad8 <generate_mel_scale_filters+0xb4>
      filterbank[m][n - left_n] = (freq_m_plus_1 - n2hz(n))/(freq_m_plus_1 - freq_m)/divider;
 8003b30:	4610      	mov	r0, r2
 8003b32:	f7ff ff4b 	bl	80039cc <n2hz>
 8003b36:	ee76 7a66 	vsub.f32	s15, s12, s13
 8003b3a:	ee36 0a40 	vsub.f32	s0, s12, s0
 8003b3e:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003b42:	eec0 5a27 	vdiv.f32	s11, s0, s15
 8003b46:	443b      	add	r3, r7
 8003b48:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8003b4c:	edc3 7a00 	vstr	s15, [r3]
 8003b50:	e7cf      	b.n	8003af2 <generate_mel_scale_filters+0xce>
 8003b52:	bf00      	nop
 8003b54:	20011480 	.word	0x20011480
 8003b58:	20010c78 	.word	0x20010c78
 8003b5c:	2001107c 	.word	0x2001107c
 8003b60:	44000000 	.word	0x44000000
 8003b64:	42280000 	.word	0x42280000
 8003b68:	20000234 	.word	0x20000234

08003b6c <generate_linear_scale_filters>:

/*
 * Filter bank: linear scale
 */
void generate_linear_scale_filters(void) {
 8003b6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int left_n, center_n, right_n;
  float32_t freq_m_minus_1, freq_m, freq_m_plus_1;
  float32_t freq_high;
  float32_t delta;

  clear_filterbank();
 8003b70:	f7ff ff38 	bl	80039e4 <clear_filterbank>
  freq_high = (float32_t)fs/2.0;
 8003b74:	4b41      	ldr	r3, [pc, #260]	; (8003c7c <generate_linear_scale_filters+0x110>)
  delta = freq_high/(float32_t)(NUM_FILTERS_SPEC + 2);
 8003b76:	eddf 6a42 	vldr	s13, [pc, #264]	; 8003c80 <generate_linear_scale_filters+0x114>
  freq_high = (float32_t)fs/2.0;
 8003b7a:	ed93 7a00 	vldr	s14, [r3]

  for (int m = 0; m < NUM_FILTERS_SPEC + 2; m++) {
    hz_freqs[m] = delta * m;
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / nyq_fs * NN / 2);
 8003b7e:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <generate_linear_scale_filters+0x118>)
 8003b80:	4a41      	ldr	r2, [pc, #260]	; (8003c88 <generate_linear_scale_filters+0x11c>)
 8003b82:	4842      	ldr	r0, [pc, #264]	; (8003c8c <generate_linear_scale_filters+0x120>)
 8003b84:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8003c90 <generate_linear_scale_filters+0x124>
 8003b88:	edd3 5a00 	vldr	s11, [r3]
  freq_high = (float32_t)fs/2.0;
 8003b8c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003b90:	ee27 7a27 	vmul.f32	s14, s14, s15
  for (int m = 0; m < NUM_FILTERS_SPEC + 2; m++) {
 8003b94:	2300      	movs	r3, #0
  delta = freq_high/(float32_t)(NUM_FILTERS_SPEC + 2);
 8003b96:	ee87 5a26 	vdiv.f32	s10, s14, s13
  for (int m = 0; m < NUM_FILTERS_SPEC + 2; m++) {
 8003b9a:	f240 1101 	movw	r1, #257	; 0x101
 8003b9e:	eeb0 7a67 	vmov.f32	s14, s15
    hz_freqs[m] = delta * m;
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003baa:	ee66 6a85 	vmul.f32	s13, s13, s10
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / nyq_fs * NN / 2);
 8003bae:	eec6 7aa5 	vdiv.f32	s15, s13, s11
    hz_freqs[m] = delta * m;
 8003bb2:	ece2 6a01 	vstmia	r2!, {s13}
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / nyq_fs * NN / 2);
 8003bb6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc2:	ee17 4a90 	vmov	r4, s15
 8003bc6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for (int m = 0; m < NUM_FILTERS_SPEC + 2; m++) {
 8003bca:	3301      	adds	r3, #1
 8003bcc:	428b      	cmp	r3, r1
 8003bce:	d1e8      	bne.n	8003ba2 <generate_linear_scale_filters+0x36>
 8003bd0:	4d30      	ldr	r5, [pc, #192]	; (8003c94 <generate_linear_scale_filters+0x128>)
 8003bd2:	4c2e      	ldr	r4, [pc, #184]	; (8003c8c <generate_linear_scale_filters+0x120>)
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	462e      	mov	r6, r5

    for (int n = left_n; n < center_n; n++) {
      filterbank[m][n - left_n] = (n2hz(n) - freq_m_minus_1)/(freq_m - freq_m_minus_1);
    }

    filterbank[m][center_n - left_n] = 1.0f;
 8003bd8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003bdc:	f06f 0803 	mvn.w	r8, #3
    left_n = hz_freqs_n[m-1];
 8003be0:	f8d4 a000 	ldr.w	sl, [r4]
    center_n = hz_freqs_n[m];
 8003be4:	f854 2f04 	ldr.w	r2, [r4, #4]!
    freq_m_minus_1 = n2hz(left_n);
 8003be8:	4650      	mov	r0, sl
 8003bea:	f7ff feef 	bl	80039cc <n2hz>
    freq_m = n2hz(center_n);
 8003bee:	4610      	mov	r0, r2
    freq_m_minus_1 = n2hz(left_n);
 8003bf0:	eeb0 6a40 	vmov.f32	s12, s0
    right_n = hz_freqs_n[m+1];
 8003bf4:	6867      	ldr	r7, [r4, #4]
    freq_m = n2hz(center_n);
 8003bf6:	f7ff fee9 	bl	80039cc <n2hz>
    freq_m_plus_1 = n2hz(right_n);
 8003bfa:	4638      	mov	r0, r7
    freq_m = n2hz(center_n);
 8003bfc:	eeb0 7a40 	vmov.f32	s14, s0
    freq_m_plus_1 = n2hz(right_n);
 8003c00:	f7ff fee4 	bl	80039cc <n2hz>
 8003c04:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8003c08:	eef0 6a40 	vmov.f32	s13, s0
 8003c0c:	eb05 0309 	add.w	r3, r5, r9
    for (int n = left_n; n < center_n; n++) {
 8003c10:	46d3      	mov	fp, sl
 8003c12:	4593      	cmp	fp, r2
 8003c14:	db13      	blt.n	8003c3e <generate_linear_scale_filters+0xd2>
    filterbank[m][center_n - left_n] = 1.0f;
 8003c16:	eba2 030a 	sub.w	r3, r2, sl
 8003c1a:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 8003c1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003c22:	edc3 5a00 	vstr	s11, [r3]
 8003c26:	fb08 990a 	mla	r9, r8, sl, r9
 8003c2a:	3201      	adds	r2, #1

    for (int n= center_n + 1; n <= right_n; n++) {
 8003c2c:	4297      	cmp	r7, r2
 8003c2e:	da16      	bge.n	8003c5e <generate_linear_scale_filters+0xf2>
 8003c30:	3101      	adds	r1, #1
  for (int m = 1; m < NUM_FILTERS_SPEC + 1; m++) {
 8003c32:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003c36:	d1d3      	bne.n	8003be0 <generate_linear_scale_filters+0x74>
      filterbank[m][n - left_n] = (freq_m_plus_1 - n2hz(n))/(freq_m_plus_1 - freq_m);
    }
  }
}
 8003c38:	b003      	add	sp, #12
 8003c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      filterbank[m][n - left_n] = (n2hz(n) - freq_m_minus_1)/(freq_m - freq_m_minus_1);
 8003c3e:	4658      	mov	r0, fp
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	f7ff fec3 	bl	80039cc <n2hz>
 8003c46:	ee30 0a46 	vsub.f32	s0, s0, s12
 8003c4a:	ee37 5a46 	vsub.f32	s10, s14, s12
 8003c4e:	9b01      	ldr	r3, [sp, #4]
 8003c50:	eec0 7a05 	vdiv.f32	s15, s0, s10
    for (int n = left_n; n < center_n; n++) {
 8003c54:	f10b 0b01 	add.w	fp, fp, #1
      filterbank[m][n - left_n] = (n2hz(n) - freq_m_minus_1)/(freq_m - freq_m_minus_1);
 8003c58:	ece3 7a01 	vstmia	r3!, {s15}
 8003c5c:	e7d9      	b.n	8003c12 <generate_linear_scale_filters+0xa6>
      filterbank[m][n - left_n] = (freq_m_plus_1 - n2hz(n))/(freq_m_plus_1 - freq_m);
 8003c5e:	4610      	mov	r0, r2
 8003c60:	f7ff feb4 	bl	80039cc <n2hz>
 8003c64:	ee36 0ac0 	vsub.f32	s0, s13, s0
 8003c68:	ee36 6ac7 	vsub.f32	s12, s13, s14
 8003c6c:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8003c70:	eec0 7a06 	vdiv.f32	s15, s0, s12
 8003c74:	4433      	add	r3, r6
 8003c76:	edc3 7a00 	vstr	s15, [r3]
 8003c7a:	e7d6      	b.n	8003c2a <generate_linear_scale_filters+0xbe>
 8003c7c:	20010334 	.word	0x20010334
 8003c80:	43808000 	.word	0x43808000
 8003c84:	20011480 	.word	0x20011480
 8003c88:	20010c78 	.word	0x20010c78
 8003c8c:	2001107c 	.word	0x2001107c
 8003c90:	44000000 	.word	0x44000000
 8003c94:	20000234 	.word	0x20000234

08003c98 <generate_filters>:

void generate_filters(mode mode) {
  if (mode == MEL_SPECTROGRAM) {
 8003c98:	2803      	cmp	r0, #3
 8003c9a:	d101      	bne.n	8003ca0 <generate_filters+0x8>
    generate_mel_scale_filters();
 8003c9c:	f7ff bec2 	b.w	8003a24 <generate_mel_scale_filters>
  } else if (mode == SPECTROGRAM) {
 8003ca0:	2806      	cmp	r0, #6
 8003ca2:	d101      	bne.n	8003ca8 <generate_filters+0x10>
    generate_linear_scale_filters();
 8003ca4:	f7ff bf62 	b.w	8003b6c <generate_linear_scale_filters>
 8003ca8:	4770      	bx	lr
 8003caa:	0000      	movs	r0, r0
 8003cac:	0000      	movs	r0, r0
	...

08003cb0 <generate_half_sample_shifter>:
  }
}

void generate_half_sample_shifter(void) {
 8003cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int re, im;
  float32_t num_filters_2 = (float32_t)NUM_FILTERS_MEL * 2;
  for (int k = 0; k < NUM_FILTERS_MEL; k ++) {
    re = k * 2;
    im = re + 1;
    half_sample_shifter[re] = arm_cos_f32(-1.0*PI*(float32_t)k/num_filters_2);
 8003cb4:	f20f 0970 	addw	r9, pc, #112	; 0x70
 8003cb8:	e9d9 8900 	ldrd	r8, r9, [r9]
void generate_half_sample_shifter(void) {
 8003cbc:	ed2d 8b02 	vpush	{d8}
 8003cc0:	4d17      	ldr	r5, [pc, #92]	; (8003d20 <generate_half_sample_shifter+0x70>)
    half_sample_shifter[re] = arm_cos_f32(-1.0*PI*(float32_t)k/num_filters_2);
 8003cc2:	4f18      	ldr	r7, [pc, #96]	; (8003d24 <generate_half_sample_shifter+0x74>)
  for (int k = 0; k < NUM_FILTERS_MEL; k ++) {
 8003cc4:	2400      	movs	r4, #0
    half_sample_shifter[re] = arm_cos_f32(-1.0*PI*(float32_t)k/num_filters_2);
 8003cc6:	2600      	movs	r6, #0
 8003cc8:	ee07 4a90 	vmov	s15, r4
 8003ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int k = 0; k < NUM_FILTERS_MEL; k ++) {
 8003cd0:	3401      	adds	r4, #1
    half_sample_shifter[re] = arm_cos_f32(-1.0*PI*(float32_t)k/num_filters_2);
 8003cd2:	ee17 0a90 	vmov	r0, s15
 8003cd6:	f7fc fc97 	bl	8000608 <__aeabi_f2d>
 8003cda:	4642      	mov	r2, r8
 8003cdc:	464b      	mov	r3, r9
 8003cde:	f7fc fce7 	bl	80006b0 <__aeabi_dmul>
 8003ce2:	463b      	mov	r3, r7
 8003ce4:	4632      	mov	r2, r6
 8003ce6:	f7fc fe0d 	bl	8000904 <__aeabi_ddiv>
 8003cea:	f7fc ffb9 	bl	8000c60 <__aeabi_d2f>
 8003cee:	ee00 0a10 	vmov	s0, r0
 8003cf2:	ee08 0a10 	vmov	s16, r0
 8003cf6:	f002 f87d 	bl	8005df4 <arm_cos_f32>
 8003cfa:	ed05 0a01 	vstr	s0, [r5, #-4]
    half_sample_shifter[im] = arm_sin_f32(-1.0*PI*(float32_t)k/num_filters_2);
 8003cfe:	eeb0 0a48 	vmov.f32	s0, s16
 8003d02:	f002 f829 	bl	8005d58 <arm_sin_f32>
 8003d06:	462b      	mov	r3, r5
  for (int k = 0; k < NUM_FILTERS_MEL; k ++) {
 8003d08:	2c28      	cmp	r4, #40	; 0x28
    half_sample_shifter[im] = arm_sin_f32(-1.0*PI*(float32_t)k/num_filters_2);
 8003d0a:	f105 0508 	add.w	r5, r5, #8
 8003d0e:	ed83 0a00 	vstr	s0, [r3]
  for (int k = 0; k < NUM_FILTERS_MEL; k ++) {
 8003d12:	d1d9      	bne.n	8003cc8 <generate_half_sample_shifter+0x18>
  }
}
 8003d14:	ecbd 8b02 	vpop	{d8}
 8003d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d1c:	f3af 8000 	nop.w
 8003d20:	2001033c 	.word	0x2001033c
 8003d24:	40540000 	.word	0x40540000
 8003d28:	60000000 	.word	0x60000000
 8003d2c:	c00921fb 	.word	0xc00921fb

08003d30 <init_dsp>:

/*
 * dsp initialization
 */
void init_dsp(float32_t f_s) {
 8003d30:	b500      	push	{lr}
 8003d32:	ed2d 8b02 	vpush	{d8}
  // Generate Hanning window
  hann(NN);
 8003d36:	f44f 7000 	mov.w	r0, #512	; 0x200
void init_dsp(float32_t f_s) {
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	eeb0 8a40 	vmov.f32	s16, s0
  hann(NN);
 8003d40:	f7ff fd6e 	bl	8003820 <hann>
  fs = f_s;
 8003d44:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <init_dsp+0x60>)
  nyq_fs = f_s/2.0;
  arm_rfft_fast_init_f32(&S, NN);
 8003d46:	4813      	ldr	r0, [pc, #76]	; (8003d94 <init_dsp+0x64>)
  fs = f_s;
 8003d48:	ed83 8a00 	vstr	s16, [r3]
  nyq_fs = f_s/2.0;
 8003d4c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003d50:	ee28 8a00 	vmul.f32	s16, s16, s0
 8003d54:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <init_dsp+0x68>)
  arm_rfft_fast_init_f32(&S, NN);
 8003d56:	f44f 7100 	mov.w	r1, #512	; 0x200
  nyq_fs = f_s/2.0;
 8003d5a:	ed83 8a00 	vstr	s16, [r3]
  arm_rfft_fast_init_f32(&S, NN);
 8003d5e:	f000 ff0f 	bl	8004b80 <arm_rfft_fast_init_f32>
  arm_rfft_fast_init_f32(&S_DCT, NUM_FILTERS_MEL*2);
 8003d62:	2150      	movs	r1, #80	; 0x50
 8003d64:	480d      	ldr	r0, [pc, #52]	; (8003d9c <init_dsp+0x6c>)
 8003d66:	f000 ff0b 	bl	8004b80 <arm_rfft_fast_init_f32>
  arm_fir_init_f32(&S_PRE, 2, fir_coefficients, state_buf, NN+1);
 8003d6a:	f240 2301 	movw	r3, #513	; 0x201
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	4a0b      	ldr	r2, [pc, #44]	; (8003da0 <init_dsp+0x70>)
 8003d72:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <init_dsp+0x74>)
 8003d74:	480c      	ldr	r0, [pc, #48]	; (8003da8 <init_dsp+0x78>)
 8003d76:	2102      	movs	r1, #2
 8003d78:	f001 fbf0 	bl	800555c <arm_fir_init_f32>
  generate_mel_scale_filters();
 8003d7c:	f7ff fe52 	bl	8003a24 <generate_mel_scale_filters>
  //generate_linear_scale_filters();
  generate_half_sample_shifter();
}
 8003d80:	b003      	add	sp, #12
 8003d82:	ecbd 8b02 	vpop	{d8}
 8003d86:	f85d eb04 	ldr.w	lr, [sp], #4
  generate_half_sample_shifter();
 8003d8a:	f7ff bf91 	b.w	8003cb0 <generate_half_sample_shifter>
 8003d8e:	bf00      	nop
 8003d90:	20010334 	.word	0x20010334
 8003d94:	20012f10 	.word	0x20012f10
 8003d98:	20011480 	.word	0x20011480
 8003d9c:	20012ef8 	.word	0x20012ef8
 8003da0:	20000000 	.word	0x20000000
 8003da4:	20011c84 	.word	0x20011c84
 8003da8:	20012f28 	.word	0x20012f28

08003dac <apply_pre_emphasis>:

//--- DSP pipeline functions -----------------------------//

void apply_pre_emphasis(float32_t *inout) {
 8003dac:	4602      	mov	r2, r0
  arm_fir_f32(&S_PRE, inout, inout, NN);
 8003dae:	4601      	mov	r1, r0
 8003db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003db4:	4801      	ldr	r0, [pc, #4]	; (8003dbc <apply_pre_emphasis+0x10>)
 8003db6:	f001 bbe3 	b.w	8005580 <arm_fir_f32>
 8003dba:	bf00      	nop
 8003dbc:	20012f28 	.word	0x20012f28

08003dc0 <apply_ac_coupling>:
}

void apply_ac_coupling(float32_t *inout) {
 8003dc0:	b513      	push	{r0, r1, r4, lr}
  float32_t mean;
  arm_mean_f32(inout, NN, &mean);
 8003dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dc6:	aa01      	add	r2, sp, #4
void apply_ac_coupling(float32_t *inout) {
 8003dc8:	4604      	mov	r4, r0
  arm_mean_f32(inout, NN, &mean);
 8003dca:	f000 fea5 	bl	8004b18 <arm_mean_f32>
  arm_offset_f32(inout, -mean, inout, NN);
 8003dce:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	eeb1 0a40 	vneg.f32	s0, s0
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f002 f87f 	bl	8005ee0 <arm_offset_f32>
}
 8003de2:	b002      	add	sp, #8
 8003de4:	bd10      	pop	{r4, pc}
	...

08003de8 <apply_hann>:

void apply_hann(float32_t *inout) {
  arm_mult_f32(inout, hann_window, inout, NN);
 8003de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dec:	4602      	mov	r2, r0
 8003dee:	4901      	ldr	r1, [pc, #4]	; (8003df4 <apply_hann+0xc>)
 8003df0:	f002 b8ac 	b.w	8005f4c <arm_mult_f32>
 8003df4:	20010478 	.word	0x20010478

08003df8 <apply_fft>:
}

void apply_fft(float32_t *inout) {
 8003df8:	b538      	push	{r3, r4, r5, lr}
  arm_rfft_fast_f32(&S, inout, signal_buf, 0);
 8003dfa:	4c08      	ldr	r4, [pc, #32]	; (8003e1c <apply_fft+0x24>)
void apply_fft(float32_t *inout) {
 8003dfc:	4605      	mov	r5, r0
  arm_rfft_fast_f32(&S, inout, signal_buf, 0);
 8003dfe:	4622      	mov	r2, r4
 8003e00:	4601      	mov	r1, r0
 8003e02:	2300      	movs	r3, #0
 8003e04:	4806      	ldr	r0, [pc, #24]	; (8003e20 <apply_fft+0x28>)
 8003e06:	f000 ff3d 	bl	8004c84 <arm_rfft_fast_f32>
  arm_copy_f32(signal_buf, inout, NN);
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
}
 8003e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  arm_copy_f32(signal_buf, inout, NN);
 8003e16:	f000 be4f 	b.w	8004ab8 <arm_copy_f32>
 8003e1a:	bf00      	nop
 8003e1c:	20011484 	.word	0x20011484
 8003e20:	20012f10 	.word	0x20012f10

08003e24 <apply_filterbank>:

void apply_filterbank(float32_t *inout, mode mode) {
 8003e24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  float32_t sum = 0.0f;
 8003e28:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8003e9c <apply_filterbank+0x78>
 8003e2c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003ea0 <apply_filterbank+0x7c>
    num_filters = NUM_FILTERS_MEL;
  }

  arm_fill_f32(0.0f, signal_buf, NN/2);
  for (int m = 1; m < num_filters + 1; m++) {
    left_n = hz_freqs_n[m-1];
 8003e30:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8003ea4 <apply_filterbank+0x80>
    right_n = hz_freqs_n[m+1];
    len = right_n - left_n + 1;
    arm_dot_prod_f32(&inout[left_n], filterbank[m], len, &sum);
 8003e34:	f8df a070 	ldr.w	sl, [pc, #112]	; 8003ea8 <apply_filterbank+0x84>
    num_filters = NUM_FILTERS_MEL;
 8003e38:	2906      	cmp	r1, #6
void apply_filterbank(float32_t *inout, mode mode) {
 8003e3a:	4606      	mov	r6, r0
  float32_t sum = 0.0f;
 8003e3c:	ad02      	add	r5, sp, #8
  arm_fill_f32(0.0f, signal_buf, NN/2);
 8003e3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e42:	4817      	ldr	r0, [pc, #92]	; (8003ea0 <apply_filterbank+0x7c>)
  float32_t sum = 0.0f;
 8003e44:	ed25 0a01 	vstmdb	r5!, {s0}
    num_filters = NUM_FILTERS_MEL;
 8003e48:	bf0c      	ite	eq
 8003e4a:	27ff      	moveq	r7, #255	; 0xff
 8003e4c:	2728      	movne	r7, #40	; 0x28
  arm_fill_f32(0.0f, signal_buf, NN/2);
 8003e4e:	f000 fe15 	bl	8004a7c <arm_fill_f32>
  for (int m = 1; m < num_filters + 1; m++) {
 8003e52:	2401      	movs	r4, #1
 8003e54:	00a3      	lsls	r3, r4, #2
    left_n = hz_freqs_n[m-1];
 8003e56:	eb09 0203 	add.w	r2, r9, r3
    right_n = hz_freqs_n[m+1];
 8003e5a:	3304      	adds	r3, #4
    left_n = hz_freqs_n[m-1];
 8003e5c:	f852 0c04 	ldr.w	r0, [r2, #-4]
    len = right_n - left_n + 1;
 8003e60:	f853 2009 	ldr.w	r2, [r3, r9]
    right_n = hz_freqs_n[m+1];
 8003e64:	3401      	adds	r4, #1
    arm_dot_prod_f32(&inout[left_n], filterbank[m], len, &sum);
 8003e66:	f104 11ff 	add.w	r1, r4, #16711935	; 0xff00ff
    len = right_n - left_n + 1;
 8003e6a:	1a12      	subs	r2, r2, r0
    arm_dot_prod_f32(&inout[left_n], filterbank[m], len, &sum);
 8003e6c:	f501 417f 	add.w	r1, r1, #65280	; 0xff00
 8003e70:	462b      	mov	r3, r5
 8003e72:	3201      	adds	r2, #1
 8003e74:	eb0a 2101 	add.w	r1, sl, r1, lsl #8
 8003e78:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8003e7c:	f002 f8ac 	bl	8005fd8 <arm_dot_prod_f32>
    signal_buf[m-1] = sum;
 8003e80:	9b01      	ldr	r3, [sp, #4]
 8003e82:	f848 3b04 	str.w	r3, [r8], #4
  for (int m = 1; m < num_filters + 1; m++) {
 8003e86:	42a7      	cmp	r7, r4
 8003e88:	dae4      	bge.n	8003e54 <apply_filterbank+0x30>
  }
  arm_copy_f32(signal_buf, inout, num_filters);
 8003e8a:	463a      	mov	r2, r7
 8003e8c:	4631      	mov	r1, r6
 8003e8e:	4804      	ldr	r0, [pc, #16]	; (8003ea0 <apply_filterbank+0x7c>)
 8003e90:	f000 fe12 	bl	8004ab8 <arm_copy_f32>
}
 8003e94:	b002      	add	sp, #8
 8003e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e9a:	bf00      	nop
 8003e9c:	00000000 	.word	0x00000000
 8003ea0:	20011484 	.word	0x20011484
 8003ea4:	2001107c 	.word	0x2001107c
 8003ea8:	20000234 	.word	0x20000234

08003eac <apply_psd_logscale>:

void apply_psd_logscale(float32_t *inout) {
 8003eac:	b570      	push	{r4, r5, r6, lr}
  arm_cmplx_mag_f32(inout, signal_buf, NN / 2);
 8003eae:	f44f 7280 	mov.w	r2, #256	; 0x100
void apply_psd_logscale(float32_t *inout) {
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	ed2d 8b02 	vpush	{d8}
  arm_cmplx_mag_f32(inout, signal_buf, NN / 2);
 8003eb8:	490e      	ldr	r1, [pc, #56]	; (8003ef4 <apply_psd_logscale+0x48>)
 8003eba:	4d0e      	ldr	r5, [pc, #56]	; (8003ef4 <apply_psd_logscale+0x48>)
 8003ebc:	f001 fe64 	bl	8005b88 <arm_cmplx_mag_f32>
  arm_scale_f32(inout, RECIPROCAL_NN, inout, NN / 2);
 8003ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003ef8 <apply_psd_logscale+0x4c>
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f001 ffd2 	bl	8005e74 <arm_scale_f32>
 8003ed0:	f504 6680 	add.w	r6, r4, #1024	; 0x400
  for (int n = 0; n < NN / 2; n++) {
    inout[n] = 20.0 * log10_approx(signal_buf[n]);
 8003ed4:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
 8003ed8:	ecb5 0a01 	vldmia	r5!, {s0}
 8003edc:	f7ff fcd4 	bl	8003888 <log10_approx>
 8003ee0:	ee20 0a08 	vmul.f32	s0, s0, s16
 8003ee4:	eca4 0a01 	vstmia	r4!, {s0}
  for (int n = 0; n < NN / 2; n++) {
 8003ee8:	42b4      	cmp	r4, r6
 8003eea:	d1f5      	bne.n	8003ed8 <apply_psd_logscale+0x2c>
  }
}
 8003eec:	ecbd 8b02 	vpop	{d8}
 8003ef0:	bd70      	pop	{r4, r5, r6, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20011484 	.word	0x20011484
 8003ef8:	3b000000 	.word	0x3b000000

08003efc <apply_dct2>:

void apply_dct2(float32_t *inout) {
 8003efc:	b530      	push	{r4, r5, lr}
 8003efe:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 8003f02:	4605      	mov	r5, r0
  float32_t in[NUM_FILTERS_MEL*2] = { 0.0f };
 8003f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f08:	2100      	movs	r1, #0
 8003f0a:	4668      	mov	r0, sp
  float32_t out[NUM_FILTERS_MEL*2] = { 0.0f };
 8003f0c:	ac50      	add	r4, sp, #320	; 0x140
  float32_t in[NUM_FILTERS_MEL*2] = { 0.0f };
 8003f0e:	f002 fbbf 	bl	8006690 <memset>
  float32_t out[NUM_FILTERS_MEL*2] = { 0.0f };
 8003f12:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f16:	2100      	movs	r1, #0
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f002 fbb9 	bl	8006690 <memset>
  arm_copy_f32(inout, in, NUM_FILTERS_MEL);
 8003f1e:	2228      	movs	r2, #40	; 0x28
 8003f20:	4669      	mov	r1, sp
 8003f22:	4628      	mov	r0, r5
 8003f24:	f000 fdc8 	bl	8004ab8 <arm_copy_f32>
 8003f28:	aa28      	add	r2, sp, #160	; 0xa0
 8003f2a:	4613      	mov	r3, r2
  for (int n = 0; n < NUM_FILTERS_MEL; n++) {
    in[n+NUM_FILTERS_MEL] = in[NUM_FILTERS_MEL-n-1];
 8003f2c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003f30:	f843 1b04 	str.w	r1, [r3], #4
  for (int n = 0; n < NUM_FILTERS_MEL; n++) {
 8003f34:	42a3      	cmp	r3, r4
 8003f36:	d1f9      	bne.n	8003f2c <apply_dct2+0x30>
  }
  arm_rfft_fast_f32(&S_DCT, in, out, 0);
 8003f38:	2300      	movs	r3, #0
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	4669      	mov	r1, sp
 8003f3e:	480e      	ldr	r0, [pc, #56]	; (8003f78 <apply_dct2+0x7c>)
 8003f40:	f000 fea0 	bl	8004c84 <arm_rfft_fast_f32>
  arm_scale_f32 (out, 2.0, out, NUM_FILTERS_MEL*2);
 8003f44:	2250      	movs	r2, #80	; 0x50
 8003f46:	4621      	mov	r1, r4
 8003f48:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f001 ff91 	bl	8005e74 <arm_scale_f32>
  arm_cmplx_mult_cmplx_f32(out, half_sample_shifter, out, NUM_FILTERS_MEL);
 8003f52:	2328      	movs	r3, #40	; 0x28
 8003f54:	4622      	mov	r2, r4
 8003f56:	4909      	ldr	r1, [pc, #36]	; (8003f7c <apply_dct2+0x80>)
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f001 fd75 	bl	8005a48 <arm_cmplx_mult_cmplx_f32>
 8003f5e:	2300      	movs	r3, #0
  for (int n = 0; n < NUM_FILTERS_MEL; n++) {
    inout[n] = out[n*2];
 8003f60:	18e2      	adds	r2, r4, r3
 8003f62:	3308      	adds	r3, #8
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	f845 2b04 	str.w	r2, [r5], #4
  for (int n = 0; n < NUM_FILTERS_MEL; n++) {
 8003f6a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f6e:	d1f7      	bne.n	8003f60 <apply_dct2+0x64>
  }
}
 8003f70:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 8003f74:	bd30      	pop	{r4, r5, pc}
 8003f76:	bf00      	nop
 8003f78:	20012ef8 	.word	0x20012ef8
 8003f7c:	20010338 	.word	0x20010338

08003f80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003f80:	b500      	push	{lr}
 8003f82:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	2214      	movs	r2, #20
 8003f86:	2100      	movs	r1, #0
 8003f88:	a803      	add	r0, sp, #12
 8003f8a:	f002 fb81 	bl	8006690 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f8e:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <MX_GPIO_Init+0x70>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f90:	4818      	ldr	r0, [pc, #96]	; (8003ff4 <MX_GPIO_Init+0x74>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f94:	f042 0204 	orr.w	r2, r2, #4
 8003f98:	64da      	str	r2, [r3, #76]	; 0x4c
 8003f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f9c:	f002 0204 	and.w	r2, r2, #4
 8003fa0:	9200      	str	r2, [sp, #0]
 8003fa2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	64da      	str	r2, [r3, #76]	; 0x4c
 8003fac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fae:	f002 0201 	and.w	r2, r2, #1
 8003fb2:	9201      	str	r2, [sp, #4]
 8003fb4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fb8:	f042 0202 	orr.w	r2, r2, #2
 8003fbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8003fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	9302      	str	r3, [sp, #8]
 8003fc6:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = B1_Pin;
 8003fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fcc:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003fce:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <MX_GPIO_Init+0x78>)
 8003fd2:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003fd4:	f7fd fcf6 	bl	80019c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4611      	mov	r1, r2
 8003fdc:	2028      	movs	r0, #40	; 0x28
 8003fde:	f7fd f873 	bl	80010c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003fe2:	2028      	movs	r0, #40	; 0x28
 8003fe4:	f7fd f8a4 	bl	8001130 <HAL_NVIC_EnableIRQ>

}
 8003fe8:	b009      	add	sp, #36	; 0x24
 8003fea:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fee:	bf00      	nop
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	48000800 	.word	0x48000800
 8003ff8:	10210000 	.word	0x10210000

08003ffc <uart_tx>:
  static int length = 0;
  static int idx = 0;

  static char uart_buf[NN * 4] = { 0.0f };

  if (cnt == 0) {
 8003ffc:	4b42      	ldr	r3, [pc, #264]	; (8004108 <uart_tx+0x10c>)
bool uart_tx(float32_t *in, mode mode, bool dma_start) {
 8003ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (cnt == 0) {
 8004002:	681c      	ldr	r4, [r3, #0]
 8004004:	4d41      	ldr	r5, [pc, #260]	; (800410c <uart_tx+0x110>)
bool uart_tx(float32_t *in, mode mode, bool dma_start) {
 8004006:	4616      	mov	r6, r2
 8004008:	4a41      	ldr	r2, [pc, #260]	; (8004110 <uart_tx+0x114>)
  if (cnt == 0) {
 800400a:	2c00      	cmp	r4, #0
 800400c:	d14b      	bne.n	80040a6 <uart_tx+0xaa>
    idx = 0;
 800400e:	602c      	str	r4, [r5, #0]

    switch (mode) {
 8004010:	2906      	cmp	r1, #6
 8004012:	d846      	bhi.n	80040a2 <uart_tx+0xa6>
 8004014:	e8df f001 	tbb	[pc, r1]
 8004018:	43452904 	.word	0x43452904
 800401c:	4543      	.short	0x4543
 800401e:	3f          	.byte	0x3f
 800401f:	00          	.byte	0x00

    case RAW_WAVE:
      length = NN;
 8004020:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004024:	6011      	str	r1, [r2, #0]
      cnt = 1;
 8004026:	2101      	movs	r1, #1
 8004028:	6019      	str	r1, [r3, #0]
 800402a:	682c      	ldr	r4, [r5, #0]
 800402c:	4939      	ldr	r1, [pc, #228]	; (8004114 <uart_tx+0x118>)
    }
  }

  // Quantization: convert float into int
  if (mode == RAW_WAVE) {  // 16bit quantization
    for (int n = 0; n < length; n++) {
 800402e:	6817      	ldr	r7, [r2, #0]
 8004030:	f04f 0c00 	mov.w	ip, #0
 8004034:	4662      	mov	r2, ip
 8004036:	eb01 0e04 	add.w	lr, r1, r4
 800403a:	42ba      	cmp	r2, r7
 800403c:	db36      	blt.n	80040ac <uart_tx+0xb0>
 800403e:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8004042:	eb04 0447 	add.w	r4, r4, r7, lsl #1
 8004046:	f1bc 0f00 	cmp.w	ip, #0
 800404a:	d000      	beq.n	800404e <uart_tx+0x52>
 800404c:	602c      	str	r4, [r5, #0]
      uart_buf[idx++] = (int8_t) in[n];
    }
  }

  // memory-to-peripheral DMA to UART
  if (--cnt == 0) {
 800404e:	681c      	ldr	r4, [r3, #0]
 8004050:	3c01      	subs	r4, #1
 8004052:	601c      	str	r4, [r3, #0]
 8004054:	2c00      	cmp	r4, #0
 8004056:	d14c      	bne.n	80040f2 <uart_tx+0xf6>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, idx);
 8004058:	882a      	ldrh	r2, [r5, #0]
 800405a:	492e      	ldr	r1, [pc, #184]	; (8004114 <uart_tx+0x118>)
 800405c:	482e      	ldr	r0, [pc, #184]	; (8004118 <uart_tx+0x11c>)
 800405e:	f7fe fd69 	bl	8002b34 <HAL_UART_Transmit_DMA>
    printing = false;
 8004062:	4626      	mov	r6, r4
  } else {
    printing = true;
  }

  return printing;
}
 8004064:	4630      	mov	r0, r6
 8004066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      length = NN / 2;
 800406a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800406e:	6011      	str	r1, [r2, #0]
      cnt = 1;
 8004070:	2101      	movs	r1, #1
      cnt = 200;
 8004072:	6019      	str	r1, [r3, #0]
    for (int n = 0; n < length; n++) {
 8004074:	f8d2 e000 	ldr.w	lr, [r2]
      uart_buf[idx++] = (int8_t) in[n];
 8004078:	4f26      	ldr	r7, [pc, #152]	; (8004114 <uart_tx+0x118>)
 800407a:	682a      	ldr	r2, [r5, #0]
    for (int n = 0; n < length; n++) {
 800407c:	2400      	movs	r4, #0
 800407e:	4621      	mov	r1, r4
      uart_buf[idx++] = (int8_t) in[n];
 8004080:	4417      	add	r7, r2
    for (int n = 0; n < length; n++) {
 8004082:	4571      	cmp	r1, lr
 8004084:	db2b      	blt.n	80040de <uart_tx+0xe2>
 8004086:	f1be 0f00 	cmp.w	lr, #0
 800408a:	bfa8      	it	ge
 800408c:	4472      	addge	r2, lr
 800408e:	2c00      	cmp	r4, #0
 8004090:	d0dd      	beq.n	800404e <uart_tx+0x52>
 8004092:	602a      	str	r2, [r5, #0]
 8004094:	e7db      	b.n	800404e <uart_tx+0x52>
      length = NUM_FILTERS_SPEC;
 8004096:	21ff      	movs	r1, #255	; 0xff
      length = NUM_FILTERS_MEL;
 8004098:	6011      	str	r1, [r2, #0]
      cnt = 200;
 800409a:	21c8      	movs	r1, #200	; 0xc8
 800409c:	e7e9      	b.n	8004072 <uart_tx+0x76>
      length = NUM_FILTERS_MEL;
 800409e:	2128      	movs	r1, #40	; 0x28
 80040a0:	e7fa      	b.n	8004098 <uart_tx+0x9c>
      length = 0;
 80040a2:	2400      	movs	r4, #0
 80040a4:	6014      	str	r4, [r2, #0]
  if (mode == RAW_WAVE) {  // 16bit quantization
 80040a6:	2900      	cmp	r1, #0
 80040a8:	d0bf      	beq.n	800402a <uart_tx+0x2e>
 80040aa:	e7e3      	b.n	8004074 <uart_tx+0x78>
 80040ac:	4680      	mov	r8, r0
      uart_buf[idx++] = (uint8_t) (((int16_t)in[n]) >> 8);
 80040ae:	ecf0 7a01 	vldmia	r0!, {s15}
 80040b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      uart_buf[idx++] = (uint8_t) (((int16_t)in[n] & 0x00ff));
 80040b6:	eb0e 0c42 	add.w	ip, lr, r2, lsl #1
      uart_buf[idx++] = (uint8_t) (((int16_t)in[n]) >> 8);
 80040ba:	ee17 1a90 	vmov	r1, s15
 80040be:	f341 2107 	sbfx	r1, r1, #8, #8
 80040c2:	f80e 1012 	strb.w	r1, [lr, r2, lsl #1]
      uart_buf[idx++] = (uint8_t) (((int16_t)in[n] & 0x00ff));
 80040c6:	edd8 7a00 	vldr	s15, [r8]
 80040ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    for (int n = 0; n < length; n++) {
 80040ce:	3201      	adds	r2, #1
      uart_buf[idx++] = (uint8_t) (((int16_t)in[n] & 0x00ff));
 80040d0:	ee17 1a90 	vmov	r1, s15
 80040d4:	f88c 1001 	strb.w	r1, [ip, #1]
 80040d8:	f04f 0c01 	mov.w	ip, #1
 80040dc:	e7ad      	b.n	800403a <uart_tx+0x3e>
      uart_buf[idx++] = (int8_t) in[n];
 80040de:	ecf0 7a01 	vldmia	r0!, {s15}
 80040e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040e6:	ee17 4a90 	vmov	r4, s15
 80040ea:	547c      	strb	r4, [r7, r1]
    for (int n = 0; n < length; n++) {
 80040ec:	3101      	adds	r1, #1
 80040ee:	2401      	movs	r4, #1
 80040f0:	e7c7      	b.n	8004082 <uart_tx+0x86>
  } else if (dma_start) {
 80040f2:	b13e      	cbz	r6, 8004104 <uart_tx+0x108>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, idx);
 80040f4:	882a      	ldrh	r2, [r5, #0]
 80040f6:	4907      	ldr	r1, [pc, #28]	; (8004114 <uart_tx+0x118>)
 80040f8:	4807      	ldr	r0, [pc, #28]	; (8004118 <uart_tx+0x11c>)
 80040fa:	f7fe fd1b 	bl	8002b34 <HAL_UART_Transmit_DMA>
    idx = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	602b      	str	r3, [r5, #0]
 8004102:	e7af      	b.n	8004064 <uart_tx+0x68>
    printing = true;
 8004104:	2601      	movs	r6, #1
 8004106:	e7ad      	b.n	8004064 <uart_tx+0x68>
 8004108:	20012488 	.word	0x20012488
 800410c:	2001248c 	.word	0x2001248c
 8004110:	20012490 	.word	0x20012490
 8004114:	2001249a 	.word	0x2001249a
 8004118:	20012fc0 	.word	0x20012fc0

0800411c <dsp>:

/*
 * DSP pipeline
 */
void dsp(float32_t *s1, mode mode) {
 800411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
//static bool p = true;
  static bool p = false;
  uint32_t start = 0;
  uint32_t end = 0;
  if (p)
 8004120:	4e25      	ldr	r6, [pc, #148]	; (80041b8 <dsp+0x9c>)
 8004122:	7837      	ldrb	r7, [r6, #0]
void dsp(float32_t *s1, mode mode) {
 8004124:	4605      	mov	r5, r0
 8004126:	460c      	mov	r4, r1
  if (p)
 8004128:	b117      	cbz	r7, 8004130 <dsp+0x14>
    start = HAL_GetTick();
 800412a:	f7fc ffa7 	bl	800107c <HAL_GetTick>
 800412e:	4607      	mov	r7, r0

  apply_ac_coupling(s1);  // remove DC
 8004130:	4628      	mov	r0, r5
 8004132:	f7ff fe45 	bl	8003dc0 <apply_ac_coupling>
 8004136:	2c06      	cmp	r4, #6
 8004138:	d828      	bhi.n	800418c <dsp+0x70>
 800413a:	2301      	movs	r3, #1
 800413c:	40a3      	lsls	r3, r4
 800413e:	f013 0f5a 	tst.w	r3, #90	; 0x5a
 8004142:	d023      	beq.n	800418c <dsp+0x70>

  case MFCC:
  case MEL_SPECTROGRAM:
  case SPECTROGRAM:
  case FFT:
    if (enable_pre_emphasis) {
 8004144:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <dsp+0xa0>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	b113      	cbz	r3, 8004150 <dsp+0x34>
      apply_pre_emphasis(s1);
 800414a:	4628      	mov	r0, r5
 800414c:	f7ff fe2e 	bl	8003dac <apply_pre_emphasis>
    }
    apply_hann(s1);
 8004150:	4628      	mov	r0, r5
 8004152:	f7ff fe49 	bl	8003de8 <apply_hann>
    apply_fft(s1);
 8004156:	4628      	mov	r0, r5
 8004158:	f7ff fe4e 	bl	8003df8 <apply_fft>
    apply_psd_logscale(s1);
 800415c:	4628      	mov	r0, r5
 800415e:	f7ff fea5 	bl	8003eac <apply_psd_logscale>
    switch (mode) {
 8004162:	2c04      	cmp	r4, #4
 8004164:	d01f      	beq.n	80041a6 <dsp+0x8a>
 8004166:	2c06      	cmp	r4, #6
 8004168:	d001      	beq.n	800416e <dsp+0x52>
 800416a:	2c03      	cmp	r4, #3
 800416c:	d10e      	bne.n	800418c <dsp+0x70>
    case FFT:
      break;
    case MEL_SPECTROGRAM:
    case SPECTROGRAM:
      if (filter_type != mode) {
 800416e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80041c4 <dsp+0xa8>
 8004172:	f898 3000 	ldrb.w	r3, [r8]
 8004176:	42a3      	cmp	r3, r4
 8004178:	d004      	beq.n	8004184 <dsp+0x68>
        generate_filters(mode);
 800417a:	4620      	mov	r0, r4
 800417c:	f7ff fd8c 	bl	8003c98 <generate_filters>
        filter_type = mode;
 8004180:	f888 4000 	strb.w	r4, [r8]
      }
      apply_filterbank(s1, mode);
 8004184:	4621      	mov	r1, r4
 8004186:	4628      	mov	r0, r5
 8004188:	f7ff fe4c 	bl	8003e24 <apply_filterbank>
      break;
    }
  default:
    break;
  }
  if (p) {
 800418c:	7833      	ldrb	r3, [r6, #0]
 800418e:	b143      	cbz	r3, 80041a2 <dsp+0x86>
    end = HAL_GetTick();
 8004190:	f7fc ff74 	bl	800107c <HAL_GetTick>
    printf("%lu %lu\n", start, end);
 8004194:	4639      	mov	r1, r7
 8004196:	4602      	mov	r2, r0
 8004198:	4809      	ldr	r0, [pc, #36]	; (80041c0 <dsp+0xa4>)
 800419a:	f002 feed 	bl	8006f78 <iprintf>
    p = false;
 800419e:	2300      	movs	r3, #0
 80041a0:	7033      	strb	r3, [r6, #0]
 80041a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      apply_filterbank(s1, mode);
 80041a6:	4628      	mov	r0, r5
 80041a8:	4621      	mov	r1, r4
 80041aa:	f7ff fe3b 	bl	8003e24 <apply_filterbank>
      apply_dct2(s1);
 80041ae:	4628      	mov	r0, r5
 80041b0:	f7ff fea4 	bl	8003efc <apply_dct2>
      break;
 80041b4:	e7ea      	b.n	800418c <dsp+0x70>
 80041b6:	bf00      	nop
 80041b8:	20012498 	.word	0x20012498
 80041bc:	20000010 	.word	0x20000010
 80041c0:	0800a5f9 	.word	0x0800a5f9
 80041c4:	20000011 	.word	0x20000011

080041c8 <overlap_dsp>:
 *       [a1|b0]      b(1/2) ... 13.2msec
 *          [b0|b1]   b(2/2) ... 13.2msec
 * --- overlap dsp -------------
 *             :
 */
void overlap_dsp(float32_t *buf, float32_t *sig, mode mode) {
 80041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ca:	460d      	mov	r5, r1
 80041cc:	4616      	mov	r6, r2
  arm_copy_f32(buf, sig, NN);
  dsp(sig, mode);  // (1/2)
  if (printing) {
 80041ce:	4c13      	ldr	r4, [pc, #76]	; (800421c <overlap_dsp+0x54>)
  arm_copy_f32(buf, sig, NN);
 80041d0:	f44f 7200 	mov.w	r2, #512	; 0x200
void overlap_dsp(float32_t *buf, float32_t *sig, mode mode) {
 80041d4:	4607      	mov	r7, r0
  arm_copy_f32(buf, sig, NN);
 80041d6:	f000 fc6f 	bl	8004ab8 <arm_copy_f32>
  dsp(sig, mode);  // (1/2)
 80041da:	4631      	mov	r1, r6
 80041dc:	4628      	mov	r0, r5
 80041de:	f7ff ff9d 	bl	800411c <dsp>
  if (printing) {
 80041e2:	7823      	ldrb	r3, [r4, #0]
 80041e4:	b12b      	cbz	r3, 80041f2 <overlap_dsp+0x2a>
    printing = uart_tx(sig, mode, false);  // false: UART output pending
 80041e6:	2200      	movs	r2, #0
 80041e8:	4631      	mov	r1, r6
 80041ea:	4628      	mov	r0, r5
 80041ec:	f7ff ff06 	bl	8003ffc <uart_tx>
 80041f0:	7020      	strb	r0, [r4, #0]
  }
  arm_copy_f32(buf + NN_HALF, sig, NN);
 80041f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f6:	4629      	mov	r1, r5
 80041f8:	f507 6080 	add.w	r0, r7, #1024	; 0x400
 80041fc:	f000 fc5c 	bl	8004ab8 <arm_copy_f32>
  dsp(sig, mode);  // (2/2)
 8004200:	4631      	mov	r1, r6
 8004202:	4628      	mov	r0, r5
 8004204:	f7ff ff8a 	bl	800411c <dsp>
  if (printing) {
 8004208:	7823      	ldrb	r3, [r4, #0]
 800420a:	b12b      	cbz	r3, 8004218 <overlap_dsp+0x50>
    printing = uart_tx(sig, mode, true);  // true: UART output
 800420c:	2201      	movs	r2, #1
 800420e:	4631      	mov	r1, r6
 8004210:	4628      	mov	r0, r5
 8004212:	f7ff fef3 	bl	8003ffc <uart_tx>
 8004216:	7020      	strb	r0, [r4, #0]
 8004218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800421a:	bf00      	nop
 800421c:	20012499 	.word	0x20012499

08004220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004220:	b500      	push	{lr}
 8004222:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004224:	2244      	movs	r2, #68	; 0x44
 8004226:	2100      	movs	r1, #0
 8004228:	a805      	add	r0, sp, #20
 800422a:	f002 fa31 	bl	8006690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800422e:	2214      	movs	r2, #20
 8004230:	2100      	movs	r1, #0
 8004232:	4668      	mov	r0, sp
 8004234:	f002 fa2c 	bl	8006690 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004238:	2288      	movs	r2, #136	; 0x88
 800423a:	2100      	movs	r1, #0
 800423c:	a816      	add	r0, sp, #88	; 0x58
 800423e:	f002 fa27 	bl	8006690 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004246:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004248:	2210      	movs	r2, #16
 800424a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 800424c:	2201      	movs	r2, #1
 800424e:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004250:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004252:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004254:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004256:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004258:	2207      	movs	r2, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800425a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800425c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800425e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004260:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004262:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004264:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004266:	f7fd fd6b 	bl	8001d40 <HAL_RCC_OscConfig>
 800426a:	b100      	cbz	r0, 800426e <SystemClock_Config+0x4e>
 800426c:	e7fe      	b.n	800426c <SystemClock_Config+0x4c>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800426e:	220f      	movs	r2, #15
 8004270:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004272:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004274:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004276:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004278:	2104      	movs	r1, #4
 800427a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800427c:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004280:	f7fd ff84 	bl	800218c <HAL_RCC_ClockConfig>
 8004284:	b100      	cbz	r0, 8004288 <SystemClock_Config+0x68>
 8004286:	e7fe      	b.n	8004286 <SystemClock_Config+0x66>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_DFSDM1;
 8004288:	4b08      	ldr	r3, [pc, #32]	; (80042ac <SystemClock_Config+0x8c>)
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800428a:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800428c:	9036      	str	r0, [sp, #216]	; 0xd8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800428e:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_DFSDM1;
 8004290:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004292:	f7fe f93d 	bl	8002510 <HAL_RCCEx_PeriphCLKConfig>
 8004296:	b100      	cbz	r0, 800429a <SystemClock_Config+0x7a>
 8004298:	e7fe      	b.n	8004298 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800429a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800429e:	f7fd fc83 	bl	8001ba8 <HAL_PWREx_ControlVoltageScaling>
 80042a2:	b100      	cbz	r0, 80042a6 <SystemClock_Config+0x86>
 80042a4:	e7fe      	b.n	80042a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
  }
}
 80042a6:	b039      	add	sp, #228	; 0xe4
 80042a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80042ac:	00010002 	.word	0x00010002

080042b0 <main>:
{
 80042b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b4:	f5ad 4d88 	sub.w	sp, sp, #17408	; 0x4400
 80042b8:	b08d      	sub	sp, #52	; 0x34
  int32_t input_buf_r[NN * 2 + 5] = { 0 };
 80042ba:	f50d 5310 	add.w	r3, sp, #9216	; 0x2400
 80042be:	3330      	adds	r3, #48	; 0x30
 80042c0:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
 80042c4:	f241 0214 	movw	r2, #4116	; 0x1014
 80042c8:	2100      	movs	r1, #0
 80042ca:	4620      	mov	r0, r4
 80042cc:	f002 f9e0 	bl	8006690 <memset>
  int32_t input_buf_l[NN * 2 + 5] = { 0 };
 80042d0:	f50d 5350 	add.w	r3, sp, #13312	; 0x3400
 80042d4:	3330      	adds	r3, #48	; 0x30
 80042d6:	f1a3 0514 	sub.w	r5, r3, #20
 80042da:	f241 0214 	movw	r2, #4116	; 0x1014
 80042de:	2100      	movs	r1, #0
  volatile uint16_t dac_out_buf_a[NN * 2] = { 0 };
 80042e0:	ae02      	add	r6, sp, #8
  int32_t input_buf_l[NN * 2 + 5] = { 0 };
 80042e2:	4628      	mov	r0, r5
 80042e4:	f002 f9d4 	bl	8006690 <memset>
  volatile uint16_t dac_out_buf_b[NN * 2] = { 0 };
 80042e8:	f60d 0808 	addw	r8, sp, #2056	; 0x808
  volatile uint16_t dac_out_buf_a[NN * 2] = { 0 };
 80042ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042f0:	2100      	movs	r1, #0
 80042f2:	4630      	mov	r0, r6
 80042f4:	f002 f9cc 	bl	8006690 <memset>
  volatile uint16_t dac_out_buf_b[NN * 2] = { 0 };
 80042f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042fc:	2100      	movs	r1, #0
 80042fe:	4640      	mov	r0, r8
 8004300:	f002 f9c6 	bl	8006690 <memset>
  float32_t signal[NN] = { 0.0f };
 8004304:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 8004308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800430c:	2100      	movs	r1, #0
 800430e:	3008      	adds	r0, #8
 8004310:	f002 f9be 	bl	8006690 <memset>
  float32_t signal_buf[NN + NN / 2] = { 0.0f };  // NN/2 overlap
 8004314:	f50d 50c0 	add.w	r0, sp, #6144	; 0x1800
 8004318:	2100      	movs	r1, #0
 800431a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800431e:	3008      	adds	r0, #8
 8004320:	f002 f9b6 	bl	8006690 <memset>
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 8004324:	4fd9      	ldr	r7, [pc, #868]	; (800468c <main+0x3dc>)
  HAL_Init();
 8004326:	f7fc fe8b 	bl	8001040 <HAL_Init>
  SystemClock_Config();
 800432a:	f7ff ff79 	bl	8004220 <SystemClock_Config>
  MX_GPIO_Init();
 800432e:	f7ff fe27 	bl	8003f80 <MX_GPIO_Init>
  MX_DMA_Init();
 8004332:	f7ff fa33 	bl	800379c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004336:	f000 fb05 	bl	8004944 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 800433a:	f7ff f84f 	bl	80033dc <MX_DAC1_Init>
  MX_TIM6_Init();
 800433e:	f000 fac9 	bl	80048d4 <MX_TIM6_Init>
  MX_DFSDM1_Init();
 8004342:	f7ff f8e9 	bl	8003518 <MX_DFSDM1_Init>
      / hdfsdm1_channel2.Init.OutputClock.Divider
 8004346:	4bd2      	ldr	r3, [pc, #840]	; (8004690 <main+0x3e0>)
 8004348:	4ad2      	ldr	r2, [pc, #840]	; (8004694 <main+0x3e4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68d2      	ldr	r2, [r2, #12]
 800434e:	fbb3 f3f2 	udiv	r3, r3, r2
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 8004352:	6a3a      	ldr	r2, [r7, #32]
 8004354:	fbb3 f3f2 	udiv	r3, r3, r2
      / hdfsdm1_filter0.Init.FilterParam.IntOversampling;
 8004358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435a:	fbb3 f3f2 	udiv	r3, r3, r2
 800435e:	ee00 3a10 	vmov	s0, r3
  init_dsp(f_s);
 8004362:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8004366:	f7ff fce3 	bl	8003d30 <init_dsp>
  HAL_TIM_Base_Start(&htim6);
 800436a:	48cb      	ldr	r0, [pc, #812]	; (8004698 <main+0x3e8>)
 800436c:	f7fe fab8 	bl	80028e0 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) dac_out_buf_a, NN * 2,
 8004370:	f04f 0900 	mov.w	r9, #0
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8004374:	2100      	movs	r1, #0
 8004376:	48c9      	ldr	r0, [pc, #804]	; (800469c <main+0x3ec>)
 8004378:	f7fc ff0f 	bl	800119a <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) dac_out_buf_a, NN * 2,
 800437c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004380:	4632      	mov	r2, r6
 8004382:	4649      	mov	r1, r9
 8004384:	f8cd 9000 	str.w	r9, [sp]
 8004388:	48c4      	ldr	r0, [pc, #784]	; (800469c <main+0x3ec>)
 800438a:	f7fc ff2f 	bl	80011ec <HAL_DAC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800438e:	2110      	movs	r1, #16
 8004390:	48c2      	ldr	r0, [pc, #776]	; (800469c <main+0x3ec>)
 8004392:	f7fc ff02 	bl	800119a <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*) dac_out_buf_b, NN * 2,
 8004396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800439a:	4642      	mov	r2, r8
 800439c:	2110      	movs	r1, #16
 800439e:	f8cd 9000 	str.w	r9, [sp]
 80043a2:	48be      	ldr	r0, [pc, #760]	; (800469c <main+0x3ec>)
 80043a4:	f7fc ff22 	bl	80011ec <HAL_DAC_Start_DMA>
  HAL_Delay(1);
 80043a8:	2001      	movs	r0, #1
 80043aa:	f7fc fe6d 	bl	8001088 <HAL_Delay>
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, input_buf_r + 5, NN * 2)
 80043ae:	f50d 5310 	add.w	r3, sp, #9216	; 0x2400
 80043b2:	3330      	adds	r3, #48	; 0x30
 80043b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043b8:	f1a3 0114 	sub.w	r1, r3, #20
 80043bc:	4638      	mov	r0, r7
 80043be:	f7fd f99f 	bl	8001700 <HAL_DFSDM_FilterRegularStart_DMA>
 80043c2:	b100      	cbz	r0, 80043c6 <main+0x116>
 80043c4:	e7fe      	b.n	80043c4 <main+0x114>
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, input_buf_l + 5, NN * 2)
 80043c6:	f50d 5150 	add.w	r1, sp, #13312	; 0x3400
 80043ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043ce:	3130      	adds	r1, #48	; 0x30
 80043d0:	48b3      	ldr	r0, [pc, #716]	; (80046a0 <main+0x3f0>)
 80043d2:	f7fd f995 	bl	8001700 <HAL_DFSDM_FilterRegularStart_DMA>
 80043d6:	b100      	cbz	r0, 80043da <main+0x12a>
 80043d8:	e7fe      	b.n	80043d8 <main+0x128>
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 80043da:	2201      	movs	r2, #1
 80043dc:	49b1      	ldr	r1, [pc, #708]	; (80046a4 <main+0x3f4>)
 80043de:	48b2      	ldr	r0, [pc, #712]	; (80046a8 <main+0x3f8>)
    if (new_pcm_data_l_a) {  // 1st half of the buffer
 80043e0:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 80046b8 <main+0x408>
      if (beam_forming_mode == BROADSIDE) {
 80043e4:	4fb1      	ldr	r7, [pc, #708]	; (80046ac <main+0x3fc>)
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 80043e6:	f7fe fb51 	bl	8002a8c <HAL_UART_Receive_IT>
 80043ea:	46d3      	mov	fp, sl
    if (new_pcm_data_l_a) {  // 1st half of the buffer
 80043ec:	f89a 3000 	ldrb.w	r3, [sl]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d05a      	beq.n	80044aa <main+0x1fa>
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 80043f4:	f50d 53c1 	add.w	r3, sp, #6176	; 0x1820
 80043f8:	3310      	adds	r3, #16
 80043fa:	f50d 51c0 	add.w	r1, sp, #6144	; 0x1800
 80043fe:	f503 60fb 	add.w	r0, r3, #2008	; 0x7d8
 8004402:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004406:	3108      	adds	r1, #8
 8004408:	f000 fb56 	bl	8004ab8 <arm_copy_f32>
      if (beam_forming_mode == BROADSIDE) {
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f040 80bd 	bne.w	800458e <main+0x2de>
 8004414:	f50d 5210 	add.w	r2, sp, #9216	; 0x2400
 8004418:	3230      	adds	r2, #48	; 0x30
 800441a:	f1a2 0024 	sub.w	r0, r2, #36	; 0x24
 800441e:	f50d 52c1 	add.w	r2, sp, #6176	; 0x1820
 8004422:	3210      	adds	r2, #16
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + beam_forming] >> 9) + (float32_t) (input_buf_r[n + 2] >> 9);
 8004424:	f8df e28c 	ldr.w	lr, [pc, #652]	; 80046b4 <main+0x404>
 8004428:	f502 7176 	add.w	r1, r2, #984	; 0x3d8
 800442c:	f8de 2000 	ldr.w	r2, [lr]
 8004430:	441a      	add	r2, r3
        for (uint32_t n = 0; n < NN; n++) {
 8004432:	3301      	adds	r3, #1
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + beam_forming] >> 9) + (float32_t) (input_buf_r[n + 2] >> 9);
 8004434:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8004438:	1252      	asrs	r2, r2, #9
 800443a:	ee07 2a90 	vmov	s15, r2
 800443e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004442:	1252      	asrs	r2, r2, #9
 8004444:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004448:	ee07 2a90 	vmov	s15, r2
 800444c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        for (uint32_t n = 0; n < NN; n++) {
 8004450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + beam_forming] >> 9) + (float32_t) (input_buf_r[n + 2] >> 9);
 8004454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004458:	ece1 7a01 	vstmia	r1!, {s15}
        for (uint32_t n = 0; n < NN; n++) {
 800445c:	d1e6      	bne.n	800442c <main+0x17c>
      overlap_dsp(signal_buf, signal, output_mode);
 800445e:	4b94      	ldr	r3, [pc, #592]	; (80046b0 <main+0x400>)
 8004460:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 8004464:	f50d 50c0 	add.w	r0, sp, #6144	; 0x1800
 8004468:	781a      	ldrb	r2, [r3, #0]
 800446a:	3108      	adds	r1, #8
 800446c:	3008      	adds	r0, #8
 800446e:	f7ff feab 	bl	80041c8 <overlap_dsp>
 8004472:	f50d 51c0 	add.w	r1, sp, #6144	; 0x1800
 8004476:	3108      	adds	r1, #8
      for (uint32_t n = 0; n < NN; n++) {
 8004478:	2200      	movs	r2, #0
        dac_out_buf_a[n] = (uint16_t) (((int32_t)signal_buf[n] >> 4) + 2048);  // 12bit quantization
 800447a:	ecf1 7a01 	vldmia	r1!, {s15}
 800447e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004482:	ee17 3a90 	vmov	r3, s15
 8004486:	111b      	asrs	r3, r3, #4
 8004488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448c:	b29b      	uxth	r3, r3
 800448e:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
        dac_out_buf_b[n] = dac_out_buf_a[n];
 8004492:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f828 3012 	strh.w	r3, [r8, r2, lsl #1]
      for (uint32_t n = 0; n < NN; n++) {
 800449c:	3201      	adds	r2, #1
 800449e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80044a2:	d1ea      	bne.n	800447a <main+0x1ca>
      new_pcm_data_l_a = false;
 80044a4:	2300      	movs	r3, #0
 80044a6:	f88b 3000 	strb.w	r3, [fp]
    if (new_pcm_data_l_b) {  // 2nd half of the buffer
 80044aa:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80046bc <main+0x40c>
 80044ae:	f899 3000 	ldrb.w	r3, [r9]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d09a      	beq.n	80043ec <main+0x13c>
 80044b6:	2300      	movs	r3, #0
 80044b8:	009a      	lsls	r2, r3, #2
        input_buf_l[n] = input_buf_l[NN_DOUBLE + n];
 80044ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044be:	58a9      	ldr	r1, [r5, r2]
        input_buf_r[n] = input_buf_r[NN_DOUBLE + n];
 80044c0:	58a2      	ldr	r2, [r4, r2]
        input_buf_l[n] = input_buf_l[NN_DOUBLE + n];
 80044c2:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
        input_buf_r[n] = input_buf_r[NN_DOUBLE + n];
 80044c6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
      for (int n = 0; n < 5; n++) {
 80044ca:	3301      	adds	r3, #1
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d1f3      	bne.n	80044b8 <main+0x208>
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 80044d0:	f50d 53c1 	add.w	r3, sp, #6176	; 0x1820
 80044d4:	3310      	adds	r3, #16
 80044d6:	f50d 51c0 	add.w	r1, sp, #6144	; 0x1800
 80044da:	f503 60fb 	add.w	r0, r3, #2008	; 0x7d8
 80044de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044e2:	3108      	adds	r1, #8
 80044e4:	f000 fae8 	bl	8004ab8 <arm_copy_f32>
      if (beam_forming_mode == BROADSIDE) {
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f040 80a1 	bne.w	8004632 <main+0x382>
 80044f0:	f50d 5210 	add.w	r2, sp, #9216	; 0x2400
 80044f4:	3230      	adds	r2, #48	; 0x30
 80044f6:	f202 70dc 	addw	r0, r2, #2012	; 0x7dc
 80044fa:	f50d 52c1 	add.w	r2, sp, #6176	; 0x1820
 80044fe:	3210      	adds	r2, #16
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + NN + beam_forming] >> 9) + (float32_t) (input_buf_r[n + NN + 2] >> 9);
 8004500:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 80046b4 <main+0x404>
 8004504:	f502 7176 	add.w	r1, r2, #984	; 0x3d8
 8004508:	f8de 2000 	ldr.w	r2, [lr]
 800450c:	441a      	add	r2, r3
 800450e:	f502 7200 	add.w	r2, r2, #512	; 0x200
        for (uint32_t n = 0; n < NN; n++) {
 8004512:	3301      	adds	r3, #1
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + NN + beam_forming] >> 9) + (float32_t) (input_buf_r[n + NN + 2] >> 9);
 8004514:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8004518:	1252      	asrs	r2, r2, #9
 800451a:	ee07 2a90 	vmov	s15, r2
 800451e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004522:	1252      	asrs	r2, r2, #9
 8004524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004528:	ee07 2a90 	vmov	s15, r2
 800452c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        for (uint32_t n = 0; n < NN; n++) {
 8004530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + NN + beam_forming] >> 9) + (float32_t) (input_buf_r[n + NN + 2] >> 9);
 8004534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004538:	ece1 7a01 	vstmia	r1!, {s15}
        for (uint32_t n = 0; n < NN; n++) {
 800453c:	d1e4      	bne.n	8004508 <main+0x258>
      overlap_dsp(signal_buf, signal, output_mode);
 800453e:	4b5c      	ldr	r3, [pc, #368]	; (80046b0 <main+0x400>)
 8004540:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 8004544:	f50d 50c0 	add.w	r0, sp, #6144	; 0x1800
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	3108      	adds	r1, #8
 800454c:	3008      	adds	r0, #8
 800454e:	f7ff fe3b 	bl	80041c8 <overlap_dsp>
 8004552:	f50d 51c0 	add.w	r1, sp, #6144	; 0x1800
 8004556:	3108      	adds	r1, #8
 8004558:	f44f 7200 	mov.w	r2, #512	; 0x200
        dac_out_buf_a[n_nn] = (uint16_t) (((int32_t)signal_buf[n] >> 4) + 2048);  // 12bit quantization
 800455c:	ecf1 7a01 	vldmia	r1!, {s15}
 8004560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004564:	ee17 3a90 	vmov	r3, s15
 8004568:	111b      	asrs	r3, r3, #4
 800456a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456e:	b29b      	uxth	r3, r3
 8004570:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
        dac_out_buf_b[n_nn] = dac_out_buf_a[n_nn];
 8004574:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f828 3012 	strh.w	r3, [r8, r2, lsl #1]
 800457e:	3201      	adds	r2, #1
      for (uint32_t n = 0; n < NN; n++) {
 8004580:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004584:	d1ea      	bne.n	800455c <main+0x2ac>
      new_pcm_data_l_b = false;
 8004586:	2300      	movs	r3, #0
 8004588:	f889 3000 	strb.w	r3, [r9]
 800458c:	e72e      	b.n	80043ec <main+0x13c>
      } else if (beam_forming_mode == ENDFIRE && beam_forming != 2) {
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d129      	bne.n	80045e8 <main+0x338>
 8004594:	4947      	ldr	r1, [pc, #284]	; (80046b4 <main+0x404>)
 8004596:	680b      	ldr	r3, [r1, #0]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d025      	beq.n	80045e8 <main+0x338>
 800459c:	f50d 5350 	add.w	r3, sp, #13312	; 0x3400
 80045a0:	3330      	adds	r3, #48	; 0x30
 80045a2:	f1a3 0e10 	sub.w	lr, r3, #16
 80045a6:	f50d 53c1 	add.w	r3, sp, #6176	; 0x1820
 80045aa:	3310      	adds	r3, #16
 80045ac:	f503 7076 	add.w	r0, r3, #984	; 0x3d8
 80045b0:	2200      	movs	r2, #0
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + 2] >> 9) - (float32_t) (input_buf_r[n + beam_forming] >> 9);
 80045b2:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 80045b6:	f8d1 c000 	ldr.w	ip, [r1]
 80045ba:	125b      	asrs	r3, r3, #9
 80045bc:	ee07 3a90 	vmov	s15, r3
 80045c0:	eb0c 0302 	add.w	r3, ip, r2
 80045c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045c8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80045cc:	125b      	asrs	r3, r3, #9
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        for (uint32_t n = 0; n < NN; n++) {
 80045d6:	3201      	adds	r2, #1
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + 2] >> 9) - (float32_t) (input_buf_r[n + beam_forming] >> 9);
 80045d8:	ee77 7a67 	vsub.f32	s15, s14, s15
        for (uint32_t n = 0; n < NN; n++) {
 80045dc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + 2] >> 9) - (float32_t) (input_buf_r[n + beam_forming] >> 9);
 80045e0:	ece0 7a01 	vstmia	r0!, {s15}
        for (uint32_t n = 0; n < NN; n++) {
 80045e4:	d1e5      	bne.n	80045b2 <main+0x302>
 80045e6:	e73a      	b.n	800445e <main+0x1ae>
      } else if (beam_forming_mode == ENDFIRE && beam_forming == 2) {
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	f47f af37 	bne.w	800445e <main+0x1ae>
 80045f0:	4b30      	ldr	r3, [pc, #192]	; (80046b4 <main+0x404>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	f47f af32 	bne.w	800445e <main+0x1ae>
 80045fa:	f50d 53c1 	add.w	r3, sp, #6176	; 0x1820
 80045fe:	3310      	adds	r3, #16
 8004600:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8004604:	2208      	movs	r2, #8
        for (uint32_t n = 0; n < NN; n++) {
 8004606:	f640 0008 	movw	r0, #2056	; 0x808
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + 2] >> 9) + (float32_t) (input_buf_r[n + 2] >> 9);
 800460a:	58ab      	ldr	r3, [r5, r2]
 800460c:	125b      	asrs	r3, r3, #9
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	58a3      	ldr	r3, [r4, r2]
 8004614:	125b      	asrs	r3, r3, #9
 8004616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004622:	3204      	adds	r2, #4
 8004624:	ee77 7a27 	vadd.f32	s15, s14, s15
        for (uint32_t n = 0; n < NN; n++) {
 8004628:	4282      	cmp	r2, r0
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + 2] >> 9) + (float32_t) (input_buf_r[n + 2] >> 9);
 800462a:	ece1 7a01 	vstmia	r1!, {s15}
        for (uint32_t n = 0; n < NN; n++) {
 800462e:	d1ec      	bne.n	800460a <main+0x35a>
 8004630:	e715      	b.n	800445e <main+0x1ae>
      } else if (beam_forming_mode == ENDFIRE && beam_forming != 2) {
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d143      	bne.n	80046c0 <main+0x410>
 8004638:	481e      	ldr	r0, [pc, #120]	; (80046b4 <main+0x404>)
 800463a:	6803      	ldr	r3, [r0, #0]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d03f      	beq.n	80046c0 <main+0x410>
 8004640:	f50d 5350 	add.w	r3, sp, #13312	; 0x3400
 8004644:	3330      	adds	r3, #48	; 0x30
 8004646:	f503 6cfe 	add.w	ip, r3, #2032	; 0x7f0
 800464a:	f50d 53c1 	add.w	r3, sp, #6176	; 0x1820
 800464e:	3310      	adds	r3, #16
 8004650:	f503 7e76 	add.w	lr, r3, #984	; 0x3d8
 8004654:	2100      	movs	r1, #0
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + NN + 2] >> 9) - (float32_t) (input_buf_r[n + NN + beam_forming] >> 9);
 8004656:	6802      	ldr	r2, [r0, #0]
 8004658:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 800465c:	440a      	add	r2, r1
 800465e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8004662:	125b      	asrs	r3, r3, #9
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 800466c:	125b      	asrs	r3, r3, #9
 800466e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        for (uint32_t n = 0; n < NN; n++) {
 800467a:	3101      	adds	r1, #1
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + NN + 2] >> 9) - (float32_t) (input_buf_r[n + NN + beam_forming] >> 9);
 800467c:	ee77 7a67 	vsub.f32	s15, s14, s15
        for (uint32_t n = 0; n < NN; n++) {
 8004680:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + NN + 2] >> 9) - (float32_t) (input_buf_r[n + NN + beam_forming] >> 9);
 8004684:	ecee 7a01 	vstmia	lr!, {s15}
        for (uint32_t n = 0; n < NN; n++) {
 8004688:	d1e5      	bne.n	8004656 <main+0x3a6>
 800468a:	e758      	b.n	800453e <main+0x28e>
 800468c:	20012d50 	.word	0x20012d50
 8004690:	20000014 	.word	0x20000014
 8004694:	20012ec0 	.word	0x20012ec0
 8004698:	20012f38 	.word	0x20012f38
 800469c:	20012cac 	.word	0x20012cac
 80046a0:	20012e6c 	.word	0x20012e6c
 80046a4:	20012f34 	.word	0x20012f34
 80046a8:	20012fc0 	.word	0x20012fc0
 80046ac:	2000000c 	.word	0x2000000c
 80046b0:	20000012 	.word	0x20000012
 80046b4:	20000008 	.word	0x20000008
 80046b8:	20012494 	.word	0x20012494
 80046bc:	20012495 	.word	0x20012495
      } else if (beam_forming_mode == ENDFIRE && beam_forming == 2) {
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	f47f af3b 	bne.w	800453e <main+0x28e>
 80046c8:	4b10      	ldr	r3, [pc, #64]	; (800470c <main+0x45c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	f47f af36 	bne.w	800453e <main+0x28e>
 80046d2:	f50d 53c1 	add.w	r3, sp, #6176	; 0x1820
 80046d6:	3310      	adds	r3, #16
 80046d8:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 80046dc:	f640 0208 	movw	r2, #2056	; 0x808
        for (uint32_t n = 0; n < NN; n++) {
 80046e0:	f241 0008 	movw	r0, #4104	; 0x1008
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + NN + 2] >> 9) + (float32_t) (input_buf_r[n + NN + 2] >> 9);
 80046e4:	58ab      	ldr	r3, [r5, r2]
 80046e6:	125b      	asrs	r3, r3, #9
 80046e8:	ee07 3a90 	vmov	s15, r3
 80046ec:	58a3      	ldr	r3, [r4, r2]
 80046ee:	125b      	asrs	r3, r3, #9
 80046f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046f4:	ee07 3a90 	vmov	s15, r3
 80046f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046fc:	3204      	adds	r2, #4
 80046fe:	ee77 7a27 	vadd.f32	s15, s14, s15
        for (uint32_t n = 0; n < NN; n++) {
 8004702:	4282      	cmp	r2, r0
          signal_buf[n + NN_HALF] = (float32_t) (input_buf_l[n + NN + 2] >> 9) + (float32_t) (input_buf_r[n + NN + 2] >> 9);
 8004704:	ece1 7a01 	vstmia	r1!, {s15}
        for (uint32_t n = 0; n < NN; n++) {
 8004708:	d1ec      	bne.n	80046e4 <main+0x434>
 800470a:	e718      	b.n	800453e <main+0x28e>
 800470c:	20000008 	.word	0x20000008

08004710 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
 * @param  hdfsdm_filter DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
  if (!new_pcm_data_l_a && (hdfsdm_filter == &hdfsdm1_filter0)) {
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>)
 8004712:	781a      	ldrb	r2, [r3, #0]
 8004714:	b922      	cbnz	r2, 8004720 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x10>
 8004716:	4a05      	ldr	r2, [pc, #20]	; (800472c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8004718:	4290      	cmp	r0, r2
    new_pcm_data_l_a = true;  // ready for 1st half of the buffer
 800471a:	bf04      	itt	eq
 800471c:	2201      	moveq	r2, #1
 800471e:	701a      	strbeq	r2, [r3, #0]
  }
  if (!new_pcm_data_r_a && (hdfsdm_filter == &hdfsdm1_filter1)) {
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x20>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20012494 	.word	0x20012494
 800472c:	20012d50 	.word	0x20012d50
 8004730:	20012496 	.word	0x20012496

08004734 <HAL_DFSDM_FilterRegConvCpltCallback>:
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
  if (!new_pcm_data_l_b && (hdfsdm_filter == &hdfsdm1_filter0)) {
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_DFSDM_FilterRegConvCpltCallback+0x18>)
 8004736:	781a      	ldrb	r2, [r3, #0]
 8004738:	b922      	cbnz	r2, 8004744 <HAL_DFSDM_FilterRegConvCpltCallback+0x10>
 800473a:	4a05      	ldr	r2, [pc, #20]	; (8004750 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 800473c:	4290      	cmp	r0, r2
    new_pcm_data_l_b = true;  // ready for 2nd half of the buffer
 800473e:	bf04      	itt	eq
 8004740:	2201      	moveq	r2, #1
 8004742:	701a      	strbeq	r2, [r3, #0]
  }
  if (!new_pcm_data_r_b && (hdfsdm_filter == &hdfsdm1_filter1)) {
 8004744:	4b03      	ldr	r3, [pc, #12]	; (8004754 <HAL_DFSDM_FilterRegConvCpltCallback+0x20>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20012495 	.word	0x20012495
 8004750:	20012d50 	.word	0x20012d50
 8004754:	20012497 	.word	0x20012497

08004758 <_write>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
int _write(int file, char *ptr, int len) {
 8004758:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 800475a:	f04f 33ff 	mov.w	r3, #4294967295
int _write(int file, char *ptr, int len) {
 800475e:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 8004760:	4802      	ldr	r0, [pc, #8]	; (800476c <_write+0x14>)
 8004762:	b292      	uxth	r2, r2
 8004764:	f7fe fd7d 	bl	8003262 <HAL_UART_Transmit>
  return len;
}
 8004768:	4620      	mov	r0, r4
 800476a:	bd10      	pop	{r4, pc}
 800476c:	20012fc0 	.word	0x20012fc0

08004770 <HAL_UART_RxCpltCallback>:
 * One-byte command reception from an application processor
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
  char cmd;

  cmd = rxbuf[0];
 8004770:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <HAL_UART_RxCpltCallback+0x74>)
 8004772:	781b      	ldrb	r3, [r3, #0]

  switch(cmd) {
 8004774:	2b63      	cmp	r3, #99	; 0x63
 8004776:	d030      	beq.n	80047da <HAL_UART_RxCpltCallback+0x6a>
 8004778:	d812      	bhi.n	80047a0 <HAL_UART_RxCpltCallback+0x30>
 800477a:	2b50      	cmp	r3, #80	; 0x50
 800477c:	d01d      	beq.n	80047ba <HAL_UART_RxCpltCallback+0x4a>
 800477e:	d808      	bhi.n	8004792 <HAL_UART_RxCpltCallback+0x22>
 8004780:	2b4c      	cmp	r3, #76	; 0x4c
 8004782:	d020      	beq.n	80047c6 <HAL_UART_RxCpltCallback+0x56>
    beam_forming_mode = ENDFIRE;
    break;

    // The others
  default:
    output_mode = (mode) (cmd - 0x30);
 8004784:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <HAL_UART_RxCpltCallback+0x78>)
 8004786:	3b30      	subs	r3, #48	; 0x30
 8004788:	b2db      	uxtb	r3, r3
 800478a:	7013      	strb	r3, [r2, #0]
    printing = true;
 800478c:	2201      	movs	r2, #1
 800478e:	4b17      	ldr	r3, [pc, #92]	; (80047ec <HAL_UART_RxCpltCallback+0x7c>)
 8004790:	e015      	b.n	80047be <HAL_UART_RxCpltCallback+0x4e>
  switch(cmd) {
 8004792:	2b52      	cmp	r3, #82	; 0x52
 8004794:	d023      	beq.n	80047de <HAL_UART_RxCpltCallback+0x6e>
 8004796:	2b62      	cmp	r3, #98	; 0x62
 8004798:	d1f4      	bne.n	8004784 <HAL_UART_RxCpltCallback+0x14>
    beam_forming_mode = BROADSIDE;
 800479a:	2200      	movs	r2, #0
    beam_forming_mode = ENDFIRE;
 800479c:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <HAL_UART_RxCpltCallback+0x80>)
 800479e:	e014      	b.n	80047ca <HAL_UART_RxCpltCallback+0x5a>
  switch(cmd) {
 80047a0:	2b6c      	cmp	r3, #108	; 0x6c
 80047a2:	d018      	beq.n	80047d6 <HAL_UART_RxCpltCallback+0x66>
 80047a4:	d803      	bhi.n	80047ae <HAL_UART_RxCpltCallback+0x3e>
 80047a6:	2b65      	cmp	r3, #101	; 0x65
 80047a8:	d1ec      	bne.n	8004784 <HAL_UART_RxCpltCallback+0x14>
    beam_forming_mode = ENDFIRE;
 80047aa:	2201      	movs	r2, #1
 80047ac:	e7f6      	b.n	800479c <HAL_UART_RxCpltCallback+0x2c>
  switch(cmd) {
 80047ae:	2b70      	cmp	r3, #112	; 0x70
 80047b0:	d007      	beq.n	80047c2 <HAL_UART_RxCpltCallback+0x52>
 80047b2:	2b72      	cmp	r3, #114	; 0x72
 80047b4:	d1e6      	bne.n	8004784 <HAL_UART_RxCpltCallback+0x14>
  beam_forming = 3;
 80047b6:	2203      	movs	r2, #3
 80047b8:	e006      	b.n	80047c8 <HAL_UART_RxCpltCallback+0x58>
    enable_pre_emphasis = true;
 80047ba:	2201      	movs	r2, #1
    enable_pre_emphasis = false;
 80047bc:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <HAL_UART_RxCpltCallback+0x84>)
    printing = true;
 80047be:	701a      	strb	r2, [r3, #0]
    break;
 80047c0:	e004      	b.n	80047cc <HAL_UART_RxCpltCallback+0x5c>
    enable_pre_emphasis = false;
 80047c2:	2200      	movs	r2, #0
 80047c4:	e7fa      	b.n	80047bc <HAL_UART_RxCpltCallback+0x4c>
    beam_forming = 0;
 80047c6:	2200      	movs	r2, #0
  beam_forming = 4;
 80047c8:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <HAL_UART_RxCpltCallback+0x88>)
    beam_forming_mode = ENDFIRE;
 80047ca:	601a      	str	r2, [r3, #0]
  }

  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 80047cc:	2201      	movs	r2, #1
 80047ce:	4905      	ldr	r1, [pc, #20]	; (80047e4 <HAL_UART_RxCpltCallback+0x74>)
 80047d0:	480a      	ldr	r0, [pc, #40]	; (80047fc <HAL_UART_RxCpltCallback+0x8c>)
 80047d2:	f7fe b95b 	b.w	8002a8c <HAL_UART_Receive_IT>
    beam_forming = 1;
 80047d6:	2201      	movs	r2, #1
 80047d8:	e7f6      	b.n	80047c8 <HAL_UART_RxCpltCallback+0x58>
  beam_forming = 2;
 80047da:	2202      	movs	r2, #2
 80047dc:	e7f4      	b.n	80047c8 <HAL_UART_RxCpltCallback+0x58>
  beam_forming = 4;
 80047de:	2204      	movs	r2, #4
 80047e0:	e7f2      	b.n	80047c8 <HAL_UART_RxCpltCallback+0x58>
 80047e2:	bf00      	nop
 80047e4:	20012f34 	.word	0x20012f34
 80047e8:	20000012 	.word	0x20000012
 80047ec:	20012499 	.word	0x20012499
 80047f0:	2000000c 	.word	0x2000000c
 80047f4:	20000010 	.word	0x20000010
 80047f8:	20000008 	.word	0x20000008
 80047fc:	20012fc0 	.word	0x20012fc0

08004800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004800:	e7fe      	b.n	8004800 <Error_Handler>
	...

08004804 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004804:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_MspInit+0x2c>)
 8004806:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004808:	f042 0201 	orr.w	r2, r2, #1
 800480c:	661a      	str	r2, [r3, #96]	; 0x60
 800480e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8004810:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004812:	f002 0201 	and.w	r2, r2, #1
 8004816:	9200      	str	r2, [sp, #0]
 8004818:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800481a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800481c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004820:	659a      	str	r2, [r3, #88]	; 0x58
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800482c:	b002      	add	sp, #8
 800482e:	4770      	bx	lr
 8004830:	40021000 	.word	0x40021000

08004834 <SVC_Handler>:
 8004834:	4770      	bx	lr

08004836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004836:	4770      	bx	lr

08004838 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004838:	f7fc bc18 	b.w	800106c <HAL_IncTick>

0800483c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800483c:	4801      	ldr	r0, [pc, #4]	; (8004844 <DMA1_Channel3_IRQHandler+0x8>)
 800483e:	f7fd b877 	b.w	8001930 <HAL_DMA_IRQHandler>
 8004842:	bf00      	nop
 8004844:	20012cc0 	.word	0x20012cc0

08004848 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8004848:	4801      	ldr	r0, [pc, #4]	; (8004850 <DMA1_Channel4_IRQHandler+0x8>)
 800484a:	f7fd b871 	b.w	8001930 <HAL_DMA_IRQHandler>
 800484e:	bf00      	nop
 8004850:	20012e24 	.word	0x20012e24

08004854 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8004854:	4801      	ldr	r0, [pc, #4]	; (800485c <DMA1_Channel5_IRQHandler+0x8>)
 8004856:	f7fd b86b 	b.w	8001930 <HAL_DMA_IRQHandler>
 800485a:	bf00      	nop
 800485c:	20012ddc 	.word	0x20012ddc

08004860 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004860:	4801      	ldr	r0, [pc, #4]	; (8004868 <DMA1_Channel7_IRQHandler+0x8>)
 8004862:	f7fd b865 	b.w	8001930 <HAL_DMA_IRQHandler>
 8004866:	bf00      	nop
 8004868:	20012f78 	.word	0x20012f78

0800486c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800486c:	4801      	ldr	r0, [pc, #4]	; (8004874 <USART2_IRQHandler+0x8>)
 800486e:	f7fe ba3b 	b.w	8002ce8 <HAL_UART_IRQHandler>
 8004872:	bf00      	nop
 8004874:	20012fc0 	.word	0x20012fc0

08004878 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004878:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800487c:	f7fd b980 	b.w	8001b80 <HAL_GPIO_EXTI_IRQHandler>

08004880 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8004880:	4801      	ldr	r0, [pc, #4]	; (8004888 <DMA2_Channel5_IRQHandler+0x8>)
 8004882:	f7fd b855 	b.w	8001930 <HAL_DMA_IRQHandler>
 8004886:	bf00      	nop
 8004888:	20012d08 	.word	0x20012d08

0800488c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800488c:	490f      	ldr	r1, [pc, #60]	; (80048cc <SystemInit+0x40>)
 800488e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004892:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800489a:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <SystemInit+0x44>)
 800489c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800489e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80048a6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80048ae:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80048b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80048b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048c0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80048c2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80048c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048c8:	608b      	str	r3, [r1, #8]
 80048ca:	4770      	bx	lr
 80048cc:	e000ed00 	.word	0xe000ed00
 80048d0:	40021000 	.word	0x40021000

080048d4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80048d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
 80048d6:	480f      	ldr	r0, [pc, #60]	; (8004914 <MX_TIM6_Init+0x40>)
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <MX_TIM6_Init+0x44>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048da:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 0;
 80048dc:	e880 0018 	stmia.w	r0, {r3, r4}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 4095;
 80048e0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80048e4:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048e6:	2380      	movs	r3, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048e8:	9401      	str	r4, [sp, #4]
 80048ea:	9402      	str	r4, [sp, #8]
 80048ec:	9403      	str	r4, [sp, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048ee:	6084      	str	r4, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048f0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80048f2:	f7fe f875 	bl	80029e0 <HAL_TIM_Base_Init>
 80048f6:	b108      	cbz	r0, 80048fc <MX_TIM6_Init+0x28>
  {
    Error_Handler();
 80048f8:	f7ff ff82 	bl	8004800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80048fc:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80048fe:	a901      	add	r1, sp, #4
 8004900:	4804      	ldr	r0, [pc, #16]	; (8004914 <MX_TIM6_Init+0x40>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004902:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004904:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004906:	f7fe f885 	bl	8002a14 <HAL_TIMEx_MasterConfigSynchronization>
 800490a:	b108      	cbz	r0, 8004910 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 800490c:	f7ff ff78 	bl	8004800 <Error_Handler>
  }

}
 8004910:	b004      	add	sp, #16
 8004912:	bd10      	pop	{r4, pc}
 8004914:	20012f38 	.word	0x20012f38
 8004918:	40001000 	.word	0x40001000

0800491c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 800491c:	6802      	ldr	r2, [r0, #0]
 800491e:	4b08      	ldr	r3, [pc, #32]	; (8004940 <HAL_TIM_Base_MspInit+0x24>)
 8004920:	429a      	cmp	r2, r3
{
 8004922:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM6)
 8004924:	d10a      	bne.n	800493c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004926:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800492a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800492c:	f042 0210 	orr.w	r2, r2, #16
 8004930:	659a      	str	r2, [r3, #88]	; 0x58
 8004932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800493c:	b002      	add	sp, #8
 800493e:	4770      	bx	lr
 8004940:	40001000 	.word	0x40001000

08004944 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004944:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8004946:	480c      	ldr	r0, [pc, #48]	; (8004978 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 460800;
 8004948:	4b0c      	ldr	r3, [pc, #48]	; (800497c <MX_USART2_UART_Init+0x38>)
 800494a:	f44f 2ee1 	mov.w	lr, #460800	; 0x70800
 800494e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004952:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004954:	2300      	movs	r3, #0
 8004956:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004958:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800495a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800495c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800495e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004960:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004962:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004964:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004966:	f7fe fd05 	bl	8003374 <HAL_UART_Init>
 800496a:	b118      	cbz	r0, 8004974 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 800496c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004970:	f7ff bf46 	b.w	8004800 <Error_Handler>
 8004974:	bd08      	pop	{r3, pc}
 8004976:	bf00      	nop
 8004978:	20012fc0 	.word	0x20012fc0
 800497c:	40004400 	.word	0x40004400

08004980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	4605      	mov	r5, r0
 8004984:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004986:	2214      	movs	r2, #20
 8004988:	2100      	movs	r1, #0
 800498a:	a803      	add	r0, sp, #12
 800498c:	f001 fe80 	bl	8006690 <memset>
  if(uartHandle->Instance==USART2)
 8004990:	682a      	ldr	r2, [r5, #0]
 8004992:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <HAL_UART_MspInit+0x9c>)
 8004994:	429a      	cmp	r2, r3
 8004996:	d13e      	bne.n	8004a16 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004998:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499c:	2602      	movs	r6, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 800499e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80049a0:	4c1f      	ldr	r4, [pc, #124]	; (8004a20 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80049a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80049a6:	659a      	str	r2, [r3, #88]	; 0x58
 80049a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80049aa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80049ae:	9201      	str	r2, [sp, #4]
 80049b0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049b4:	f042 0201 	orr.w	r2, r2, #1
 80049b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80049ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049bc:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	9302      	str	r3, [sp, #8]
 80049c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80049c6:	230c      	movs	r3, #12
 80049c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ca:	2303      	movs	r3, #3
 80049cc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049d2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049d6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d8:	f7fc fff4 	bl	80019c4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80049dc:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <HAL_UART_MspInit+0xa4>)
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80049de:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049e2:	2310      	movs	r3, #16
 80049e4:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049e6:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049e8:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80049ea:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049ec:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049ee:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049f0:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049f2:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80049f4:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80049f6:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80049f8:	f7fc fed2 	bl	80017a0 <HAL_DMA_Init>
 80049fc:	b108      	cbz	r0, 8004a02 <HAL_UART_MspInit+0x82>
    {
      Error_Handler();
 80049fe:	f7ff feff 	bl	8004800 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004a02:	2200      	movs	r2, #0
 8004a04:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004a06:	66ac      	str	r4, [r5, #104]	; 0x68
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004a08:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004a0a:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004a0c:	f7fc fb5c 	bl	80010c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a10:	2026      	movs	r0, #38	; 0x26
 8004a12:	f7fc fb8d 	bl	8001130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004a16:	b008      	add	sp, #32
 8004a18:	bd70      	pop	{r4, r5, r6, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40004400 	.word	0x40004400
 8004a20:	20012f78 	.word	0x20012f78
 8004a24:	40020080 	.word	0x40020080

08004a28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a60 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004a2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004a2e:	e003      	b.n	8004a38 <LoopCopyDataInit>

08004a30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004a32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004a34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004a36:	3104      	adds	r1, #4

08004a38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004a38:	480b      	ldr	r0, [pc, #44]	; (8004a68 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <LoopForever+0xe>)
	adds	r2, r0, r1
 8004a3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004a3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004a40:	d3f6      	bcc.n	8004a30 <CopyDataInit>
	ldr	r2, =_sbss
 8004a42:	4a0b      	ldr	r2, [pc, #44]	; (8004a70 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004a44:	e002      	b.n	8004a4c <LoopFillZerobss>

08004a46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004a46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004a48:	f842 3b04 	str.w	r3, [r2], #4

08004a4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004a4c:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <LoopForever+0x16>)
	cmp	r2, r3
 8004a4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004a50:	d3f9      	bcc.n	8004a46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a52:	f7ff ff1b 	bl	800488c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a56:	f001 fdf7 	bl	8006648 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a5a:	f7ff fc29 	bl	80042b0 <main>

08004a5e <LoopForever>:

LoopForever:
    b LoopForever
 8004a5e:	e7fe      	b.n	8004a5e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a60:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004a64:	0801e5c8 	.word	0x0801e5c8
	ldr	r0, =_sdata
 8004a68:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004a6c:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 8004a70:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 8004a74:	2001303c 	.word	0x2001303c

08004a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a78:	e7fe      	b.n	8004a78 <ADC1_2_IRQHandler>
	...

08004a7c <arm_fill_f32>:
 8004a7c:	b410      	push	{r4}
 8004a7e:	088c      	lsrs	r4, r1, #2
 8004a80:	d010      	beq.n	8004aa4 <arm_fill_f32+0x28>
 8004a82:	f100 0310 	add.w	r3, r0, #16
 8004a86:	4622      	mov	r2, r4
 8004a88:	3a01      	subs	r2, #1
 8004a8a:	ed03 0a04 	vstr	s0, [r3, #-16]
 8004a8e:	ed03 0a03 	vstr	s0, [r3, #-12]
 8004a92:	ed03 0a02 	vstr	s0, [r3, #-8]
 8004a96:	ed03 0a01 	vstr	s0, [r3, #-4]
 8004a9a:	f103 0310 	add.w	r3, r3, #16
 8004a9e:	d1f3      	bne.n	8004a88 <arm_fill_f32+0xc>
 8004aa0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8004aa4:	f011 0103 	ands.w	r1, r1, #3
 8004aa8:	d003      	beq.n	8004ab2 <arm_fill_f32+0x36>
 8004aaa:	3901      	subs	r1, #1
 8004aac:	eca0 0a01 	vstmia	r0!, {s0}
 8004ab0:	d1fb      	bne.n	8004aaa <arm_fill_f32+0x2e>
 8004ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <arm_copy_f32>:
 8004ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004abc:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8004ac0:	d01e      	beq.n	8004b00 <arm_copy_f32+0x48>
 8004ac2:	f100 0410 	add.w	r4, r0, #16
 8004ac6:	f101 0310 	add.w	r3, r1, #16
 8004aca:	4645      	mov	r5, r8
 8004acc:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8004ad0:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 8004ad4:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8004ad8:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8004adc:	f843 6c04 	str.w	r6, [r3, #-4]
 8004ae0:	3d01      	subs	r5, #1
 8004ae2:	f843 cc10 	str.w	ip, [r3, #-16]
 8004ae6:	f843 ec0c 	str.w	lr, [r3, #-12]
 8004aea:	f843 7c08 	str.w	r7, [r3, #-8]
 8004aee:	f104 0410 	add.w	r4, r4, #16
 8004af2:	f103 0310 	add.w	r3, r3, #16
 8004af6:	d1e9      	bne.n	8004acc <arm_copy_f32+0x14>
 8004af8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004afc:	4440      	add	r0, r8
 8004afe:	4441      	add	r1, r8
 8004b00:	f012 0203 	ands.w	r2, r2, #3
 8004b04:	d005      	beq.n	8004b12 <arm_copy_f32+0x5a>
 8004b06:	f850 3b04 	ldr.w	r3, [r0], #4
 8004b0a:	f841 3b04 	str.w	r3, [r1], #4
 8004b0e:	3a01      	subs	r2, #1
 8004b10:	d1f9      	bne.n	8004b06 <arm_copy_f32+0x4e>
 8004b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b16:	bf00      	nop

08004b18 <arm_mean_f32>:
 8004b18:	b430      	push	{r4, r5}
 8004b1a:	088d      	lsrs	r5, r1, #2
 8004b1c:	eddf 7a17 	vldr	s15, [pc, #92]	; 8004b7c <arm_mean_f32+0x64>
 8004b20:	d018      	beq.n	8004b54 <arm_mean_f32+0x3c>
 8004b22:	f100 0310 	add.w	r3, r0, #16
 8004b26:	462c      	mov	r4, r5
 8004b28:	ed13 7a04 	vldr	s14, [r3, #-16]
 8004b2c:	ed53 5a03 	vldr	s11, [r3, #-12]
 8004b30:	ed13 6a02 	vldr	s12, [r3, #-8]
 8004b34:	ed53 6a01 	vldr	s13, [r3, #-4]
 8004b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b3c:	3c01      	subs	r4, #1
 8004b3e:	ee77 7a25 	vadd.f32	s15, s14, s11
 8004b42:	f103 0310 	add.w	r3, r3, #16
 8004b46:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4e:	d1eb      	bne.n	8004b28 <arm_mean_f32+0x10>
 8004b50:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8004b54:	f011 0303 	ands.w	r3, r1, #3
 8004b58:	d005      	beq.n	8004b66 <arm_mean_f32+0x4e>
 8004b5a:	ecb0 7a01 	vldmia	r0!, {s14}
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b64:	d1f9      	bne.n	8004b5a <arm_mean_f32+0x42>
 8004b66:	ee07 1a10 	vmov	s14, r1
 8004b6a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b6e:	bc30      	pop	{r4, r5}
 8004b70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b74:	edc2 6a00 	vstr	s13, [r2]
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	00000000 	.word	0x00000000

08004b80 <arm_rfft_fast_init_f32>:
 8004b80:	084b      	lsrs	r3, r1, #1
 8004b82:	2b80      	cmp	r3, #128	; 0x80
 8004b84:	b410      	push	{r4}
 8004b86:	8201      	strh	r1, [r0, #16]
 8004b88:	8003      	strh	r3, [r0, #0]
 8004b8a:	d046      	beq.n	8004c1a <arm_rfft_fast_init_f32+0x9a>
 8004b8c:	d916      	bls.n	8004bbc <arm_rfft_fast_init_f32+0x3c>
 8004b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b92:	d03c      	beq.n	8004c0e <arm_rfft_fast_init_f32+0x8e>
 8004b94:	d928      	bls.n	8004be8 <arm_rfft_fast_init_f32+0x68>
 8004b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9a:	d01f      	beq.n	8004bdc <arm_rfft_fast_init_f32+0x5c>
 8004b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba0:	d112      	bne.n	8004bc8 <arm_rfft_fast_init_f32+0x48>
 8004ba2:	4920      	ldr	r1, [pc, #128]	; (8004c24 <arm_rfft_fast_init_f32+0xa4>)
 8004ba4:	4a20      	ldr	r2, [pc, #128]	; (8004c28 <arm_rfft_fast_init_f32+0xa8>)
 8004ba6:	4b21      	ldr	r3, [pc, #132]	; (8004c2c <arm_rfft_fast_init_f32+0xac>)
 8004ba8:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8004bac:	8184      	strh	r4, [r0, #12]
 8004bae:	6081      	str	r1, [r0, #8]
 8004bb0:	6042      	str	r2, [r0, #4]
 8004bb2:	6143      	str	r3, [r0, #20]
 8004bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bb8:	2000      	movs	r0, #0
 8004bba:	4770      	bx	lr
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d01c      	beq.n	8004bfa <arm_rfft_fast_init_f32+0x7a>
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d006      	beq.n	8004bd2 <arm_rfft_fast_init_f32+0x52>
 8004bc4:	2b10      	cmp	r3, #16
 8004bc6:	d01d      	beq.n	8004c04 <arm_rfft_fast_init_f32+0x84>
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	2438      	movs	r4, #56	; 0x38
 8004bd4:	4916      	ldr	r1, [pc, #88]	; (8004c30 <arm_rfft_fast_init_f32+0xb0>)
 8004bd6:	4a17      	ldr	r2, [pc, #92]	; (8004c34 <arm_rfft_fast_init_f32+0xb4>)
 8004bd8:	4b17      	ldr	r3, [pc, #92]	; (8004c38 <arm_rfft_fast_init_f32+0xb8>)
 8004bda:	e7e7      	b.n	8004bac <arm_rfft_fast_init_f32+0x2c>
 8004bdc:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8004be0:	4916      	ldr	r1, [pc, #88]	; (8004c3c <arm_rfft_fast_init_f32+0xbc>)
 8004be2:	4a17      	ldr	r2, [pc, #92]	; (8004c40 <arm_rfft_fast_init_f32+0xc0>)
 8004be4:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <arm_rfft_fast_init_f32+0xc4>)
 8004be6:	e7e1      	b.n	8004bac <arm_rfft_fast_init_f32+0x2c>
 8004be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bec:	d1ec      	bne.n	8004bc8 <arm_rfft_fast_init_f32+0x48>
 8004bee:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8004bf2:	4915      	ldr	r1, [pc, #84]	; (8004c48 <arm_rfft_fast_init_f32+0xc8>)
 8004bf4:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <arm_rfft_fast_init_f32+0xcc>)
 8004bf6:	4b16      	ldr	r3, [pc, #88]	; (8004c50 <arm_rfft_fast_init_f32+0xd0>)
 8004bf8:	e7d8      	b.n	8004bac <arm_rfft_fast_init_f32+0x2c>
 8004bfa:	2430      	movs	r4, #48	; 0x30
 8004bfc:	4915      	ldr	r1, [pc, #84]	; (8004c54 <arm_rfft_fast_init_f32+0xd4>)
 8004bfe:	4a16      	ldr	r2, [pc, #88]	; (8004c58 <arm_rfft_fast_init_f32+0xd8>)
 8004c00:	4b16      	ldr	r3, [pc, #88]	; (8004c5c <arm_rfft_fast_init_f32+0xdc>)
 8004c02:	e7d3      	b.n	8004bac <arm_rfft_fast_init_f32+0x2c>
 8004c04:	2414      	movs	r4, #20
 8004c06:	4916      	ldr	r1, [pc, #88]	; (8004c60 <arm_rfft_fast_init_f32+0xe0>)
 8004c08:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <arm_rfft_fast_init_f32+0xe4>)
 8004c0a:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <arm_rfft_fast_init_f32+0xe8>)
 8004c0c:	e7ce      	b.n	8004bac <arm_rfft_fast_init_f32+0x2c>
 8004c0e:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8004c12:	4916      	ldr	r1, [pc, #88]	; (8004c6c <arm_rfft_fast_init_f32+0xec>)
 8004c14:	4a16      	ldr	r2, [pc, #88]	; (8004c70 <arm_rfft_fast_init_f32+0xf0>)
 8004c16:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <arm_rfft_fast_init_f32+0xf4>)
 8004c18:	e7c8      	b.n	8004bac <arm_rfft_fast_init_f32+0x2c>
 8004c1a:	24d0      	movs	r4, #208	; 0xd0
 8004c1c:	4916      	ldr	r1, [pc, #88]	; (8004c78 <arm_rfft_fast_init_f32+0xf8>)
 8004c1e:	4a17      	ldr	r2, [pc, #92]	; (8004c7c <arm_rfft_fast_init_f32+0xfc>)
 8004c20:	4b17      	ldr	r3, [pc, #92]	; (8004c80 <arm_rfft_fast_init_f32+0x100>)
 8004c22:	e7c3      	b.n	8004bac <arm_rfft_fast_init_f32+0x2c>
 8004c24:	08019c58 	.word	0x08019c58
 8004c28:	0800a64c 	.word	0x0800a64c
 8004c2c:	080107bc 	.word	0x080107bc
 8004c30:	0800e74c 	.word	0x0800e74c
 8004c34:	0801ba18 	.word	0x0801ba18
 8004c38:	0801df08 	.word	0x0801df08
 8004c3c:	0801713c 	.word	0x0801713c
 8004c40:	0801503c 	.word	0x0801503c
 8004c44:	0800e7bc 	.word	0x0800e7bc
 8004c48:	0801db98 	.word	0x0801db98
 8004c4c:	080147bc 	.word	0x080147bc
 8004c50:	0801bc18 	.word	0x0801bc18
 8004c54:	08017ff4 	.word	0x08017ff4
 8004c58:	0801703c 	.word	0x0801703c
 8004c5c:	0800e64c 	.word	0x0800e64c
 8004c60:	08017f4c 	.word	0x08017f4c
 8004c64:	08014fbc 	.word	0x08014fbc
 8004c68:	08017f74 	.word	0x08017f74
 8004c6c:	0801c418 	.word	0x0801c418
 8004c70:	08018c58 	.word	0x08018c58
 8004c74:	0801c798 	.word	0x0801c798
 8004c78:	0801e108 	.word	0x0801e108
 8004c7c:	08018858 	.word	0x08018858
 8004c80:	0801d798 	.word	0x0801d798

08004c84 <arm_rfft_fast_f32>:
 8004c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c88:	8a06      	ldrh	r6, [r0, #16]
 8004c8a:	0876      	lsrs	r6, r6, #1
 8004c8c:	4607      	mov	r7, r0
 8004c8e:	4615      	mov	r5, r2
 8004c90:	8006      	strh	r6, [r0, #0]
 8004c92:	460c      	mov	r4, r1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d15c      	bne.n	8004d52 <arm_rfft_fast_f32+0xce>
 8004c98:	461a      	mov	r2, r3
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f000 fbe4 	bl	8005468 <arm_cfft_f32>
 8004ca0:	edd4 7a00 	vldr	s15, [r4]
 8004ca4:	ed94 7a01 	vldr	s14, [r4, #4]
 8004ca8:	883e      	ldrh	r6, [r7, #0]
 8004caa:	6978      	ldr	r0, [r7, #20]
 8004cac:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004cb0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004cb4:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 8004cb8:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004cbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cc0:	3e01      	subs	r6, #1
 8004cc2:	ee26 7a83 	vmul.f32	s14, s13, s6
 8004cc6:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004cca:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8004cce:	ed85 7a00 	vstr	s14, [r5]
 8004cd2:	edc5 7a01 	vstr	s15, [r5, #4]
 8004cd6:	3010      	adds	r0, #16
 8004cd8:	f105 0210 	add.w	r2, r5, #16
 8004cdc:	3b08      	subs	r3, #8
 8004cde:	f104 0110 	add.w	r1, r4, #16
 8004ce2:	ed93 7a02 	vldr	s14, [r3, #8]
 8004ce6:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004cea:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004cee:	edd3 3a03 	vldr	s7, [r3, #12]
 8004cf2:	ed11 5a01 	vldr	s10, [r1, #-4]
 8004cf6:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004cfa:	ee77 7a66 	vsub.f32	s15, s14, s13
 8004cfe:	ee77 4a26 	vadd.f32	s9, s14, s13
 8004d02:	ee33 4a85 	vadd.f32	s8, s7, s10
 8004d06:	ee66 6a27 	vmul.f32	s13, s12, s15
 8004d0a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004d0e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8004d12:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004d16:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004d1a:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004d1e:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004d22:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004d26:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8004d2a:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004d2e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8004d32:	3e01      	subs	r6, #1
 8004d34:	ed02 7a02 	vstr	s14, [r2, #-8]
 8004d38:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004d3c:	f1a3 0308 	sub.w	r3, r3, #8
 8004d40:	f101 0108 	add.w	r1, r1, #8
 8004d44:	f100 0008 	add.w	r0, r0, #8
 8004d48:	f102 0208 	add.w	r2, r2, #8
 8004d4c:	d1c9      	bne.n	8004ce2 <arm_rfft_fast_f32+0x5e>
 8004d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d52:	edd1 7a00 	vldr	s15, [r1]
 8004d56:	edd1 6a01 	vldr	s13, [r1, #4]
 8004d5a:	6941      	ldr	r1, [r0, #20]
 8004d5c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004d60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004d64:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004d68:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004d6c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004d70:	3e01      	subs	r6, #1
 8004d72:	ed82 7a00 	vstr	s14, [r2]
 8004d76:	edc2 7a01 	vstr	s15, [r2, #4]
 8004d7a:	00f0      	lsls	r0, r6, #3
 8004d7c:	b3ee      	cbz	r6, 8004dfa <arm_rfft_fast_f32+0x176>
 8004d7e:	3808      	subs	r0, #8
 8004d80:	f101 0e10 	add.w	lr, r1, #16
 8004d84:	4420      	add	r0, r4
 8004d86:	f104 0110 	add.w	r1, r4, #16
 8004d8a:	f102 0c10 	add.w	ip, r2, #16
 8004d8e:	ed90 7a02 	vldr	s14, [r0, #8]
 8004d92:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004d96:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8004d9a:	ed90 4a03 	vldr	s8, [r0, #12]
 8004d9e:	ed11 5a01 	vldr	s10, [r1, #-4]
 8004da2:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8004da6:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8004daa:	ee74 4a05 	vadd.f32	s9, s8, s10
 8004dae:	ee26 3a27 	vmul.f32	s6, s12, s15
 8004db2:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004db6:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004dba:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004dbe:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004dc2:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004dc6:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004dca:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8004dce:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004dd2:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8004dd6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004dda:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004dde:	3e01      	subs	r6, #1
 8004de0:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8004de4:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8004de8:	f1a0 0008 	sub.w	r0, r0, #8
 8004dec:	f101 0108 	add.w	r1, r1, #8
 8004df0:	f10e 0e08 	add.w	lr, lr, #8
 8004df4:	f10c 0c08 	add.w	ip, ip, #8
 8004df8:	d1c9      	bne.n	8004d8e <arm_rfft_fast_f32+0x10a>
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	4638      	mov	r0, r7
 8004e00:	2301      	movs	r3, #1
 8004e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e06:	f000 bb2f 	b.w	8005468 <arm_cfft_f32>
 8004e0a:	bf00      	nop

08004e0c <arm_cfft_radix8by2_f32>:
 8004e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e10:	ed2d 8b08 	vpush	{d8-d11}
 8004e14:	4607      	mov	r7, r0
 8004e16:	4608      	mov	r0, r1
 8004e18:	f8b7 e000 	ldrh.w	lr, [r7]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8004e22:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8004e26:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8004e2a:	f000 80b0 	beq.w	8004f8e <arm_cfft_radix8by2_f32+0x182>
 8004e2e:	008b      	lsls	r3, r1, #2
 8004e30:	3310      	adds	r3, #16
 8004e32:	18c6      	adds	r6, r0, r3
 8004e34:	3210      	adds	r2, #16
 8004e36:	4443      	add	r3, r8
 8004e38:	f100 0510 	add.w	r5, r0, #16
 8004e3c:	f108 0410 	add.w	r4, r8, #16
 8004e40:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004e44:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004e48:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004e4c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8004e50:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004e54:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004e58:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004e5c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004e60:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004e64:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004e68:	ed15 6a03 	vldr	s12, [r5, #-12]
 8004e6c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8004e70:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004e74:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004e78:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004e7c:	ed55 4a02 	vldr	s9, [r5, #-8]
 8004e80:	ee73 ba21 	vadd.f32	s23, s6, s3
 8004e84:	ee36 ba26 	vadd.f32	s22, s12, s13
 8004e88:	ee37 aa27 	vadd.f32	s20, s14, s15
 8004e8c:	ee72 9a04 	vadd.f32	s19, s4, s8
 8004e90:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8004e94:	ee31 8a05 	vadd.f32	s16, s2, s10
 8004e98:	ee74 aa80 	vadd.f32	s21, s9, s0
 8004e9c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8004ea0:	ed45 ba04 	vstr	s23, [r5, #-16]
 8004ea4:	ed05 ba03 	vstr	s22, [r5, #-12]
 8004ea8:	ed45 aa02 	vstr	s21, [r5, #-8]
 8004eac:	ed05 aa01 	vstr	s20, [r5, #-4]
 8004eb0:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004eb4:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004eb8:	ed06 9a03 	vstr	s18, [r6, #-12]
 8004ebc:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004ec0:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004ec4:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004ec8:	ed12 6a03 	vldr	s12, [r2, #-12]
 8004ecc:	ed52 2a04 	vldr	s5, [r2, #-16]
 8004ed0:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004ed4:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004ed8:	ee26 8a86 	vmul.f32	s16, s13, s12
 8004edc:	ee24 2a06 	vmul.f32	s4, s8, s12
 8004ee0:	ee63 1a22 	vmul.f32	s3, s6, s5
 8004ee4:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004ee8:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004eec:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8004ef0:	ee23 6a86 	vmul.f32	s12, s7, s12
 8004ef4:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004ef8:	ee36 6a04 	vadd.f32	s12, s12, s8
 8004efc:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004f00:	ee72 3a63 	vsub.f32	s7, s4, s7
 8004f04:	ee71 2a88 	vadd.f32	s5, s3, s16
 8004f08:	ed44 6a03 	vstr	s13, [r4, #-12]
 8004f0c:	ed44 2a04 	vstr	s5, [r4, #-16]
 8004f10:	ed43 3a04 	vstr	s7, [r3, #-16]
 8004f14:	ed03 6a03 	vstr	s12, [r3, #-12]
 8004f18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f1c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8004f20:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004f24:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004f28:	ee35 6a41 	vsub.f32	s12, s10, s2
 8004f2c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004f30:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004f34:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004f38:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8004f3c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004f40:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004f44:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004f48:	ee26 7a07 	vmul.f32	s14, s12, s14
 8004f4c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004f50:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004f54:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004f58:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004f5c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004f60:	f1be 0e01 	subs.w	lr, lr, #1
 8004f64:	ed44 5a02 	vstr	s11, [r4, #-8]
 8004f68:	f105 0510 	add.w	r5, r5, #16
 8004f6c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004f70:	f106 0610 	add.w	r6, r6, #16
 8004f74:	ed03 6a02 	vstr	s12, [r3, #-8]
 8004f78:	ed03 7a01 	vstr	s14, [r3, #-4]
 8004f7c:	f102 0210 	add.w	r2, r2, #16
 8004f80:	f104 0410 	add.w	r4, r4, #16
 8004f84:	f103 0310 	add.w	r3, r3, #16
 8004f88:	f47f af5a 	bne.w	8004e40 <arm_cfft_radix8by2_f32+0x34>
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	b28c      	uxth	r4, r1
 8004f90:	4621      	mov	r1, r4
 8004f92:	2302      	movs	r3, #2
 8004f94:	f001 f866 	bl	8006064 <arm_radix8_butterfly_f32>
 8004f98:	ecbd 8b08 	vpop	{d8-d11}
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa8:	f001 b85c 	b.w	8006064 <arm_radix8_butterfly_f32>

08004fac <arm_cfft_radix8by4_f32>:
 8004fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb0:	ed2d 8b0a 	vpush	{d8-d12}
 8004fb4:	8802      	ldrh	r2, [r0, #0]
 8004fb6:	ed91 6a00 	vldr	s12, [r1]
 8004fba:	b08f      	sub	sp, #60	; 0x3c
 8004fbc:	460f      	mov	r7, r1
 8004fbe:	0852      	lsrs	r2, r2, #1
 8004fc0:	6841      	ldr	r1, [r0, #4]
 8004fc2:	900c      	str	r0, [sp, #48]	; 0x30
 8004fc4:	0093      	lsls	r3, r2, #2
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	4418      	add	r0, r3
 8004fca:	4606      	mov	r6, r0
 8004fcc:	9009      	str	r0, [sp, #36]	; 0x24
 8004fce:	4418      	add	r0, r3
 8004fd0:	edd0 6a00 	vldr	s13, [r0]
 8004fd4:	ed96 4a00 	vldr	s8, [r6]
 8004fd8:	edd6 2a01 	vldr	s5, [r6, #4]
 8004fdc:	edd0 7a01 	vldr	s15, [r0, #4]
 8004fe0:	900a      	str	r0, [sp, #40]	; 0x28
 8004fe2:	ee76 5a26 	vadd.f32	s11, s12, s13
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	4625      	mov	r5, r4
 8004fea:	441c      	add	r4, r3
 8004fec:	edd4 4a00 	vldr	s9, [r4]
 8004ff0:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ff4:	ed94 3a01 	vldr	s6, [r4, #4]
 8004ff8:	9401      	str	r4, [sp, #4]
 8004ffa:	ee35 5a84 	vadd.f32	s10, s11, s8
 8004ffe:	4630      	mov	r0, r6
 8005000:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005004:	463e      	mov	r6, r7
 8005006:	ee15 ea10 	vmov	lr, s10
 800500a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800500e:	f846 eb08 	str.w	lr, [r6], #8
 8005012:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005016:	ed90 5a01 	vldr	s10, [r0, #4]
 800501a:	9605      	str	r6, [sp, #20]
 800501c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005020:	9e01      	ldr	r6, [sp, #4]
 8005022:	9707      	str	r7, [sp, #28]
 8005024:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8005028:	ed96 2a01 	vldr	s4, [r6, #4]
 800502c:	ee36 7a05 	vadd.f32	s14, s12, s10
 8005030:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8005034:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8005038:	ee77 7a84 	vadd.f32	s15, s15, s8
 800503c:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8005040:	4604      	mov	r4, r0
 8005042:	46a3      	mov	fp, r4
 8005044:	ee37 7a02 	vadd.f32	s14, s14, s4
 8005048:	ee35 5a24 	vadd.f32	s10, s10, s9
 800504c:	ee14 8a10 	vmov	r8, s8
 8005050:	46a4      	mov	ip, r4
 8005052:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8005056:	ed87 7a01 	vstr	s14, [r7, #4]
 800505a:	f84b 8b08 	str.w	r8, [fp], #8
 800505e:	f1ac 0704 	sub.w	r7, ip, #4
 8005062:	ed8c 5a01 	vstr	s10, [ip, #4]
 8005066:	f101 0c08 	add.w	ip, r1, #8
 800506a:	462c      	mov	r4, r5
 800506c:	f8cd c010 	str.w	ip, [sp, #16]
 8005070:	ee15 ca90 	vmov	ip, s11
 8005074:	ee36 6a62 	vsub.f32	s12, s12, s5
 8005078:	f844 cb08 	str.w	ip, [r4], #8
 800507c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005080:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005084:	9406      	str	r4, [sp, #24]
 8005086:	ee76 6a83 	vadd.f32	s13, s13, s6
 800508a:	f101 0410 	add.w	r4, r1, #16
 800508e:	0852      	lsrs	r2, r2, #1
 8005090:	9402      	str	r4, [sp, #8]
 8005092:	ed85 6a01 	vstr	s12, [r5, #4]
 8005096:	462c      	mov	r4, r5
 8005098:	f101 0518 	add.w	r5, r1, #24
 800509c:	920b      	str	r2, [sp, #44]	; 0x2c
 800509e:	46b2      	mov	sl, r6
 80050a0:	9503      	str	r5, [sp, #12]
 80050a2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80050a6:	3a02      	subs	r2, #2
 80050a8:	ee16 5a90 	vmov	r5, s13
 80050ac:	46b6      	mov	lr, r6
 80050ae:	4630      	mov	r0, r6
 80050b0:	0852      	lsrs	r2, r2, #1
 80050b2:	f84a 5b08 	str.w	r5, [sl], #8
 80050b6:	f1a0 0604 	sub.w	r6, r0, #4
 80050ba:	edce 7a01 	vstr	s15, [lr, #4]
 80050be:	9208      	str	r2, [sp, #32]
 80050c0:	f000 8130 	beq.w	8005324 <arm_cfft_radix8by4_f32+0x378>
 80050c4:	4691      	mov	r9, r2
 80050c6:	9a07      	ldr	r2, [sp, #28]
 80050c8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80050cc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80050d0:	3b08      	subs	r3, #8
 80050d2:	f102 0510 	add.w	r5, r2, #16
 80050d6:	f101 0c20 	add.w	ip, r1, #32
 80050da:	f1a4 020c 	sub.w	r2, r4, #12
 80050de:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80050e2:	4433      	add	r3, r6
 80050e4:	3410      	adds	r4, #16
 80050e6:	4650      	mov	r0, sl
 80050e8:	4659      	mov	r1, fp
 80050ea:	ed55 3a02 	vldr	s7, [r5, #-8]
 80050ee:	ed14 5a02 	vldr	s10, [r4, #-8]
 80050f2:	ed91 7a00 	vldr	s14, [r1]
 80050f6:	edd0 7a00 	vldr	s15, [r0]
 80050fa:	ed54 5a01 	vldr	s11, [r4, #-4]
 80050fe:	ed15 4a01 	vldr	s8, [r5, #-4]
 8005102:	edd0 6a01 	vldr	s13, [r0, #4]
 8005106:	ed91 6a01 	vldr	s12, [r1, #4]
 800510a:	ee33 8a85 	vadd.f32	s16, s7, s10
 800510e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8005112:	ee78 4a07 	vadd.f32	s9, s16, s14
 8005116:	ee74 5a65 	vsub.f32	s11, s8, s11
 800511a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800511e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8005122:	ed45 4a02 	vstr	s9, [r5, #-8]
 8005126:	edd1 4a01 	vldr	s9, [r1, #4]
 800512a:	ed90 4a01 	vldr	s8, [r0, #4]
 800512e:	ee70 4a24 	vadd.f32	s9, s0, s9
 8005132:	ee75 aa06 	vadd.f32	s21, s10, s12
 8005136:	ee74 4a84 	vadd.f32	s9, s9, s8
 800513a:	ee35 aac7 	vsub.f32	s20, s11, s14
 800513e:	ed45 4a01 	vstr	s9, [r5, #-4]
 8005142:	edd6 1a00 	vldr	s3, [r6]
 8005146:	edd7 0a00 	vldr	s1, [r7]
 800514a:	ed92 4a02 	vldr	s8, [r2, #8]
 800514e:	edd3 3a02 	vldr	s7, [r3, #8]
 8005152:	ed93 2a01 	vldr	s4, [r3, #4]
 8005156:	ed16 1a01 	vldr	s2, [r6, #-4]
 800515a:	edd2 2a01 	vldr	s5, [r2, #4]
 800515e:	ed57 9a01 	vldr	s19, [r7, #-4]
 8005162:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8005166:	ee39 3a81 	vadd.f32	s6, s19, s2
 800516a:	ee74 8a84 	vadd.f32	s17, s9, s8
 800516e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8005172:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8005176:	ee7a aae6 	vsub.f32	s21, s21, s13
 800517a:	ee18 aa90 	vmov	sl, s17
 800517e:	f847 a908 	str.w	sl, [r7], #-8
 8005182:	edd2 8a01 	vldr	s17, [r2, #4]
 8005186:	ed93 9a01 	vldr	s18, [r3, #4]
 800518a:	ee73 8a28 	vadd.f32	s17, s6, s17
 800518e:	ee3a aa27 	vadd.f32	s20, s20, s15
 8005192:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005196:	ee74 0a63 	vsub.f32	s1, s8, s7
 800519a:	edc7 8a01 	vstr	s17, [r7, #4]
 800519e:	ed18 ba02 	vldr	s22, [r8, #-8]
 80051a2:	ed58 8a01 	vldr	s17, [r8, #-4]
 80051a6:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80051aa:	ee6a ba28 	vmul.f32	s23, s20, s17
 80051ae:	ee2a ca8b 	vmul.f32	s24, s21, s22
 80051b2:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80051b6:	ee31 9a20 	vadd.f32	s18, s2, s1
 80051ba:	ee79 9a82 	vadd.f32	s19, s19, s4
 80051be:	ee3c ca2b 	vadd.f32	s24, s24, s23
 80051c2:	ee6a aaa8 	vmul.f32	s21, s21, s17
 80051c6:	ee69 baa8 	vmul.f32	s23, s19, s17
 80051ca:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80051ce:	ee69 9a8b 	vmul.f32	s19, s19, s22
 80051d2:	ee69 8a28 	vmul.f32	s17, s18, s17
 80051d6:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80051da:	ee1c aa10 	vmov	sl, s24
 80051de:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80051e2:	f841 ab08 	str.w	sl, [r1], #8
 80051e6:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80051ea:	ee3b bacb 	vsub.f32	s22, s23, s22
 80051ee:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80051f2:	ee33 3a62 	vsub.f32	s6, s6, s5
 80051f6:	ed01 aa01 	vstr	s20, [r1, #-4]
 80051fa:	edc2 8a01 	vstr	s17, [r2, #4]
 80051fe:	ed82 ba02 	vstr	s22, [r2, #8]
 8005202:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8005206:	ee74 3a63 	vsub.f32	s7, s8, s7
 800520a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800520e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8005212:	ee30 0a46 	vsub.f32	s0, s0, s12
 8005216:	ee33 3a42 	vsub.f32	s6, s6, s4
 800521a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800521e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005222:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8005226:	ee63 8a04 	vmul.f32	s17, s6, s8
 800522a:	ee28 aa24 	vmul.f32	s20, s16, s9
 800522e:	ee60 9a04 	vmul.f32	s19, s0, s8
 8005232:	ee28 8a04 	vmul.f32	s16, s16, s8
 8005236:	ee20 0a24 	vmul.f32	s0, s0, s9
 800523a:	ee63 3a84 	vmul.f32	s7, s7, s8
 800523e:	ee39 4a68 	vsub.f32	s8, s18, s17
 8005242:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005246:	ee14 aa10 	vmov	sl, s8
 800524a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800524e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8005252:	ed44 9a02 	vstr	s19, [r4, #-8]
 8005256:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800525a:	ed04 0a01 	vstr	s0, [r4, #-4]
 800525e:	f846 a908 	str.w	sl, [r6], #-8
 8005262:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005266:	ee35 7a87 	vadd.f32	s14, s11, s14
 800526a:	edc6 3a01 	vstr	s7, [r6, #4]
 800526e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8005272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005276:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800527a:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800527e:	ee67 5a86 	vmul.f32	s11, s15, s12
 8005282:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005286:	ee72 2a62 	vsub.f32	s5, s4, s5
 800528a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800528e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8005292:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005296:	ee62 0a86 	vmul.f32	s1, s5, s12
 800529a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800529e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052a2:	ee21 6a06 	vmul.f32	s12, s2, s12
 80052a6:	ee62 2a87 	vmul.f32	s5, s5, s14
 80052aa:	ee21 1a07 	vmul.f32	s2, s2, s14
 80052ae:	ee15 aa90 	vmov	sl, s11
 80052b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80052b6:	f840 ab08 	str.w	sl, [r0], #8
 80052ba:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80052be:	ee76 2a22 	vadd.f32	s5, s12, s5
 80052c2:	f1b9 0901 	subs.w	r9, r9, #1
 80052c6:	ed40 7a01 	vstr	s15, [r0, #-4]
 80052ca:	f105 0508 	add.w	r5, r5, #8
 80052ce:	ed83 1a02 	vstr	s2, [r3, #8]
 80052d2:	edc3 2a01 	vstr	s5, [r3, #4]
 80052d6:	f108 0808 	add.w	r8, r8, #8
 80052da:	f1a2 0208 	sub.w	r2, r2, #8
 80052de:	f10c 0c10 	add.w	ip, ip, #16
 80052e2:	f104 0408 	add.w	r4, r4, #8
 80052e6:	f10e 0e18 	add.w	lr, lr, #24
 80052ea:	f1a3 0308 	sub.w	r3, r3, #8
 80052ee:	f47f aefc 	bne.w	80050ea <arm_cfft_radix8by4_f32+0x13e>
 80052f2:	9908      	ldr	r1, [sp, #32]
 80052f4:	9802      	ldr	r0, [sp, #8]
 80052f6:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80052fa:	00cb      	lsls	r3, r1, #3
 80052fc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005300:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005304:	9102      	str	r1, [sp, #8]
 8005306:	9905      	ldr	r1, [sp, #20]
 8005308:	4419      	add	r1, r3
 800530a:	9105      	str	r1, [sp, #20]
 800530c:	9904      	ldr	r1, [sp, #16]
 800530e:	4419      	add	r1, r3
 8005310:	9104      	str	r1, [sp, #16]
 8005312:	9906      	ldr	r1, [sp, #24]
 8005314:	449b      	add	fp, r3
 8005316:	4419      	add	r1, r3
 8005318:	449a      	add	sl, r3
 800531a:	9b03      	ldr	r3, [sp, #12]
 800531c:	9106      	str	r1, [sp, #24]
 800531e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005322:	9303      	str	r3, [sp, #12]
 8005324:	9a05      	ldr	r2, [sp, #20]
 8005326:	9806      	ldr	r0, [sp, #24]
 8005328:	ed92 4a00 	vldr	s8, [r2]
 800532c:	ed90 7a00 	vldr	s14, [r0]
 8005330:	ed9b 3a00 	vldr	s6, [fp]
 8005334:	edda 3a00 	vldr	s7, [sl]
 8005338:	edd2 4a01 	vldr	s9, [r2, #4]
 800533c:	edd0 6a01 	vldr	s13, [r0, #4]
 8005340:	ed9a 2a01 	vldr	s4, [sl, #4]
 8005344:	eddb 7a01 	vldr	s15, [fp, #4]
 8005348:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800534c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800534e:	ee34 6a07 	vadd.f32	s12, s8, s14
 8005352:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8005356:	ee36 5a03 	vadd.f32	s10, s12, s6
 800535a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800535e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005362:	ee34 7a47 	vsub.f32	s14, s8, s14
 8005366:	ed82 5a00 	vstr	s10, [r2]
 800536a:	ed9b 5a01 	vldr	s10, [fp, #4]
 800536e:	edda 4a01 	vldr	s9, [sl, #4]
 8005372:	ee35 5a85 	vadd.f32	s10, s11, s10
 8005376:	ee37 4a27 	vadd.f32	s8, s14, s15
 800537a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800537e:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8005382:	ed82 5a01 	vstr	s10, [r2, #4]
 8005386:	9a04      	ldr	r2, [sp, #16]
 8005388:	ee34 5aa3 	vadd.f32	s10, s9, s7
 800538c:	edd2 1a00 	vldr	s3, [r2]
 8005390:	edd2 2a01 	vldr	s5, [r2, #4]
 8005394:	9a02      	ldr	r2, [sp, #8]
 8005396:	ee34 4a42 	vsub.f32	s8, s8, s4
 800539a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800539e:	ee64 4a21 	vmul.f32	s9, s8, s3
 80053a2:	ee24 4a22 	vmul.f32	s8, s8, s5
 80053a6:	ee65 2a22 	vmul.f32	s5, s10, s5
 80053aa:	ee25 5a21 	vmul.f32	s10, s10, s3
 80053ae:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80053b2:	ee35 5a44 	vsub.f32	s10, s10, s8
 80053b6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80053ba:	edcb 2a00 	vstr	s5, [fp]
 80053be:	ed8b 5a01 	vstr	s10, [fp, #4]
 80053c2:	ed92 4a01 	vldr	s8, [r2, #4]
 80053c6:	ed92 5a00 	vldr	s10, [r2]
 80053ca:	9a03      	ldr	r2, [sp, #12]
 80053cc:	ee36 6a63 	vsub.f32	s12, s12, s7
 80053d0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80053d4:	ee66 4a05 	vmul.f32	s9, s12, s10
 80053d8:	ee25 5a85 	vmul.f32	s10, s11, s10
 80053dc:	ee26 6a04 	vmul.f32	s12, s12, s8
 80053e0:	ee65 5a84 	vmul.f32	s11, s11, s8
 80053e4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80053e8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80053ec:	ee76 6a83 	vadd.f32	s13, s13, s6
 80053f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053f4:	ed80 6a01 	vstr	s12, [r0, #4]
 80053f8:	edc0 5a00 	vstr	s11, [r0]
 80053fc:	edd2 5a01 	vldr	s11, [r2, #4]
 8005400:	9807      	ldr	r0, [sp, #28]
 8005402:	ee77 7a02 	vadd.f32	s15, s14, s4
 8005406:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800540a:	edd2 6a00 	vldr	s13, [r2]
 800540e:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8005412:	ee67 6a26 	vmul.f32	s13, s14, s13
 8005416:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800541a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800541e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005422:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005426:	edca 7a01 	vstr	s15, [sl, #4]
 800542a:	ed8a 7a00 	vstr	s14, [sl]
 800542e:	6872      	ldr	r2, [r6, #4]
 8005430:	4621      	mov	r1, r4
 8005432:	2304      	movs	r3, #4
 8005434:	f000 fe16 	bl	8006064 <arm_radix8_butterfly_f32>
 8005438:	9809      	ldr	r0, [sp, #36]	; 0x24
 800543a:	6872      	ldr	r2, [r6, #4]
 800543c:	4621      	mov	r1, r4
 800543e:	2304      	movs	r3, #4
 8005440:	f000 fe10 	bl	8006064 <arm_radix8_butterfly_f32>
 8005444:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005446:	6872      	ldr	r2, [r6, #4]
 8005448:	4621      	mov	r1, r4
 800544a:	2304      	movs	r3, #4
 800544c:	f000 fe0a 	bl	8006064 <arm_radix8_butterfly_f32>
 8005450:	6872      	ldr	r2, [r6, #4]
 8005452:	9801      	ldr	r0, [sp, #4]
 8005454:	4621      	mov	r1, r4
 8005456:	2304      	movs	r3, #4
 8005458:	b00f      	add	sp, #60	; 0x3c
 800545a:	ecbd 8b0a 	vpop	{d8-d12}
 800545e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005462:	f000 bdff 	b.w	8006064 <arm_radix8_butterfly_f32>
 8005466:	bf00      	nop

08005468 <arm_cfft_f32>:
 8005468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800546c:	2a01      	cmp	r2, #1
 800546e:	4606      	mov	r6, r0
 8005470:	4617      	mov	r7, r2
 8005472:	460c      	mov	r4, r1
 8005474:	4698      	mov	r8, r3
 8005476:	8805      	ldrh	r5, [r0, #0]
 8005478:	d054      	beq.n	8005524 <arm_cfft_f32+0xbc>
 800547a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800547e:	d04c      	beq.n	800551a <arm_cfft_f32+0xb2>
 8005480:	d916      	bls.n	80054b0 <arm_cfft_f32+0x48>
 8005482:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005486:	d01a      	beq.n	80054be <arm_cfft_f32+0x56>
 8005488:	d95c      	bls.n	8005544 <arm_cfft_f32+0xdc>
 800548a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800548e:	d044      	beq.n	800551a <arm_cfft_f32+0xb2>
 8005490:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005494:	d105      	bne.n	80054a2 <arm_cfft_f32+0x3a>
 8005496:	2301      	movs	r3, #1
 8005498:	6872      	ldr	r2, [r6, #4]
 800549a:	4629      	mov	r1, r5
 800549c:	4620      	mov	r0, r4
 800549e:	f000 fde1 	bl	8006064 <arm_radix8_butterfly_f32>
 80054a2:	f1b8 0f00 	cmp.w	r8, #0
 80054a6:	d111      	bne.n	80054cc <arm_cfft_f32+0x64>
 80054a8:	2f01      	cmp	r7, #1
 80054aa:	d016      	beq.n	80054da <arm_cfft_f32+0x72>
 80054ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b0:	2d20      	cmp	r5, #32
 80054b2:	d032      	beq.n	800551a <arm_cfft_f32+0xb2>
 80054b4:	d94a      	bls.n	800554c <arm_cfft_f32+0xe4>
 80054b6:	2d40      	cmp	r5, #64	; 0x40
 80054b8:	d0ed      	beq.n	8005496 <arm_cfft_f32+0x2e>
 80054ba:	2d80      	cmp	r5, #128	; 0x80
 80054bc:	d1f1      	bne.n	80054a2 <arm_cfft_f32+0x3a>
 80054be:	4621      	mov	r1, r4
 80054c0:	4630      	mov	r0, r6
 80054c2:	f7ff fca3 	bl	8004e0c <arm_cfft_radix8by2_f32>
 80054c6:	f1b8 0f00 	cmp.w	r8, #0
 80054ca:	d0ed      	beq.n	80054a8 <arm_cfft_f32+0x40>
 80054cc:	68b2      	ldr	r2, [r6, #8]
 80054ce:	89b1      	ldrh	r1, [r6, #12]
 80054d0:	4620      	mov	r0, r4
 80054d2:	f7fa fe7d 	bl	80001d0 <arm_bitreversal_32>
 80054d6:	2f01      	cmp	r7, #1
 80054d8:	d1e8      	bne.n	80054ac <arm_cfft_f32+0x44>
 80054da:	ee07 5a90 	vmov	s15, r5
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80054ea:	2d00      	cmp	r5, #0
 80054ec:	d0de      	beq.n	80054ac <arm_cfft_f32+0x44>
 80054ee:	f104 0108 	add.w	r1, r4, #8
 80054f2:	2300      	movs	r3, #0
 80054f4:	3301      	adds	r3, #1
 80054f6:	429d      	cmp	r5, r3
 80054f8:	f101 0108 	add.w	r1, r1, #8
 80054fc:	ed11 7a04 	vldr	s14, [r1, #-16]
 8005500:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005504:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005508:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800550c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8005510:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005514:	d1ee      	bne.n	80054f4 <arm_cfft_f32+0x8c>
 8005516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800551a:	4621      	mov	r1, r4
 800551c:	4630      	mov	r0, r6
 800551e:	f7ff fd45 	bl	8004fac <arm_cfft_radix8by4_f32>
 8005522:	e7be      	b.n	80054a2 <arm_cfft_f32+0x3a>
 8005524:	b1ad      	cbz	r5, 8005552 <arm_cfft_f32+0xea>
 8005526:	f101 030c 	add.w	r3, r1, #12
 800552a:	2200      	movs	r2, #0
 800552c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8005530:	3201      	adds	r2, #1
 8005532:	eef1 7a67 	vneg.f32	s15, s15
 8005536:	4295      	cmp	r5, r2
 8005538:	ed43 7a02 	vstr	s15, [r3, #-8]
 800553c:	f103 0308 	add.w	r3, r3, #8
 8005540:	d1f4      	bne.n	800552c <arm_cfft_f32+0xc4>
 8005542:	e79a      	b.n	800547a <arm_cfft_f32+0x12>
 8005544:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8005548:	d0a5      	beq.n	8005496 <arm_cfft_f32+0x2e>
 800554a:	e7aa      	b.n	80054a2 <arm_cfft_f32+0x3a>
 800554c:	2d10      	cmp	r5, #16
 800554e:	d0b6      	beq.n	80054be <arm_cfft_f32+0x56>
 8005550:	e7a7      	b.n	80054a2 <arm_cfft_f32+0x3a>
 8005552:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8005556:	d894      	bhi.n	8005482 <arm_cfft_f32+0x1a>
 8005558:	e7aa      	b.n	80054b0 <arm_cfft_f32+0x48>
 800555a:	bf00      	nop

0800555c <arm_fir_init_f32>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	9c04      	ldr	r4, [sp, #16]
 8005560:	6082      	str	r2, [r0, #8]
 8005562:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005566:	3c01      	subs	r4, #1
 8005568:	4605      	mov	r5, r0
 800556a:	440c      	add	r4, r1
 800556c:	8001      	strh	r1, [r0, #0]
 800556e:	461e      	mov	r6, r3
 8005570:	00a2      	lsls	r2, r4, #2
 8005572:	4618      	mov	r0, r3
 8005574:	2100      	movs	r1, #0
 8005576:	f001 f88b 	bl	8006690 <memset>
 800557a:	606e      	str	r6, [r5, #4]
 800557c:	bd70      	pop	{r4, r5, r6, pc}
 800557e:	bf00      	nop

08005580 <arm_fir_f32>:
 8005580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	ed2d 8b10 	vpush	{d8-d15}
 8005588:	b089      	sub	sp, #36	; 0x24
 800558a:	4605      	mov	r5, r0
 800558c:	9003      	str	r0, [sp, #12]
 800558e:	8800      	ldrh	r0, [r0, #0]
 8005590:	9304      	str	r3, [sp, #16]
 8005592:	461e      	mov	r6, r3
 8005594:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8005598:	9001      	str	r0, [sp, #4]
 800559a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800559e:	3b01      	subs	r3, #1
 80055a0:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 80055a4:	08f3      	lsrs	r3, r6, #3
 80055a6:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80055aa:	9400      	str	r4, [sp, #0]
 80055ac:	9302      	str	r3, [sp, #8]
 80055ae:	f000 81ef 	beq.w	8005990 <arm_fir_f32+0x410>
 80055b2:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 80055b6:	469e      	mov	lr, r3
 80055b8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80055bc:	1f1e      	subs	r6, r3, #4
 80055be:	4625      	mov	r5, r4
 80055c0:	9605      	str	r6, [sp, #20]
 80055c2:	4604      	mov	r4, r0
 80055c4:	eb08 0003 	add.w	r0, r8, r3
 80055c8:	f004 0a07 	and.w	sl, r4, #7
 80055cc:	4613      	mov	r3, r2
 80055ce:	f10c 0420 	add.w	r4, ip, #32
 80055d2:	f8cd c018 	str.w	ip, [sp, #24]
 80055d6:	4684      	mov	ip, r0
 80055d8:	4648      	mov	r0, r9
 80055da:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80055de:	9107      	str	r1, [sp, #28]
 80055e0:	f105 0720 	add.w	r7, r5, #32
 80055e4:	f101 0620 	add.w	r6, r1, #32
 80055e8:	f102 0520 	add.w	r5, r2, #32
 80055ec:	4652      	mov	r2, sl
 80055ee:	469a      	mov	sl, r3
 80055f0:	f856 3c20 	ldr.w	r3, [r6, #-32]
 80055f4:	f847 3c20 	str.w	r3, [r7, #-32]
 80055f8:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 80055fc:	f847 3c1c 	str.w	r3, [r7, #-28]
 8005600:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8005604:	f847 3c18 	str.w	r3, [r7, #-24]
 8005608:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800560c:	f847 3c14 	str.w	r3, [r7, #-20]
 8005610:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8005614:	f847 3c10 	str.w	r3, [r7, #-16]
 8005618:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800561c:	f847 3c0c 	str.w	r3, [r7, #-12]
 8005620:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005624:	f847 3c08 	str.w	r3, [r7, #-8]
 8005628:	eddf 3af1 	vldr	s7, [pc, #964]	; 80059f0 <arm_fir_f32+0x470>
 800562c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005630:	f847 3c04 	str.w	r3, [r7, #-4]
 8005634:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8005638:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800563c:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8005640:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8005644:	ed14 1a04 	vldr	s2, [r4, #-16]
 8005648:	ed54 0a03 	vldr	s1, [r4, #-12]
 800564c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005650:	1f21      	subs	r1, r4, #4
 8005652:	eef0 8a63 	vmov.f32	s17, s7
 8005656:	eef0 9a63 	vmov.f32	s19, s7
 800565a:	eef0 aa63 	vmov.f32	s21, s7
 800565e:	eef0 ba63 	vmov.f32	s23, s7
 8005662:	eeb0 ca63 	vmov.f32	s24, s7
 8005666:	eef0 ca63 	vmov.f32	s25, s7
 800566a:	eeb0 da63 	vmov.f32	s26, s7
 800566e:	2800      	cmp	r0, #0
 8005670:	f000 81e8 	beq.w	8005a44 <arm_fir_f32+0x4c4>
 8005674:	f108 0120 	add.w	r1, r8, #32
 8005678:	f104 031c 	add.w	r3, r4, #28
 800567c:	4683      	mov	fp, r0
 800567e:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8005682:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8005686:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 800568a:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 800568e:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8005692:	ed11 6a04 	vldr	s12, [r1, #-16]
 8005696:	ed51 6a03 	vldr	s13, [r1, #-12]
 800569a:	ed11 7a02 	vldr	s14, [r1, #-8]
 800569e:	ed51 7a01 	vldr	s15, [r1, #-4]
 80056a2:	ee24 fa03 	vmul.f32	s30, s8, s6
 80056a6:	ee64 ea22 	vmul.f32	s29, s8, s5
 80056aa:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 80056ae:	ee24 ea02 	vmul.f32	s28, s8, s4
 80056b2:	ee64 da21 	vmul.f32	s27, s8, s3
 80056b6:	ee24 ba01 	vmul.f32	s22, s8, s2
 80056ba:	ee24 aa20 	vmul.f32	s20, s8, s1
 80056be:	ee24 9a00 	vmul.f32	s18, s8, s0
 80056c2:	ee24 4a08 	vmul.f32	s8, s8, s16
 80056c6:	ee3f da0d 	vadd.f32	s26, s30, s26
 80056ca:	ee74 3a23 	vadd.f32	s7, s8, s7
 80056ce:	ee24 faa2 	vmul.f32	s30, s9, s5
 80056d2:	ee7e caac 	vadd.f32	s25, s29, s25
 80056d6:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 80056da:	ee64 ea82 	vmul.f32	s29, s9, s4
 80056de:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80056e2:	ee7d baab 	vadd.f32	s23, s27, s23
 80056e6:	ee24 eaa1 	vmul.f32	s28, s9, s3
 80056ea:	ee64 da81 	vmul.f32	s27, s9, s2
 80056ee:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80056f2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80056f6:	ee24 baa0 	vmul.f32	s22, s9, s1
 80056fa:	ee24 aa80 	vmul.f32	s20, s9, s0
 80056fe:	ee79 8a28 	vadd.f32	s17, s18, s17
 8005702:	ee28 9a24 	vmul.f32	s18, s16, s9
 8005706:	ee64 4a83 	vmul.f32	s9, s9, s6
 800570a:	ee25 4a02 	vmul.f32	s8, s10, s4
 800570e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005712:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8005716:	ee7e caac 	vadd.f32	s25, s29, s25
 800571a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800571e:	ee65 ea21 	vmul.f32	s29, s10, s3
 8005722:	ee25 ea01 	vmul.f32	s28, s10, s2
 8005726:	ee7d baab 	vadd.f32	s23, s27, s23
 800572a:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800572e:	ee65 da20 	vmul.f32	s27, s10, s1
 8005732:	ee25 ba00 	vmul.f32	s22, s10, s0
 8005736:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800573a:	ee79 8a28 	vadd.f32	s17, s18, s17
 800573e:	ee28 aa05 	vmul.f32	s20, s16, s10
 8005742:	ee23 9a05 	vmul.f32	s18, s6, s10
 8005746:	ee3d da0f 	vadd.f32	s26, s26, s30
 800574a:	ee25 5a22 	vmul.f32	s10, s10, s5
 800574e:	ee65 3aa1 	vmul.f32	s7, s11, s3
 8005752:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005756:	ed53 1a04 	vldr	s3, [r3, #-16]
 800575a:	ee7e caac 	vadd.f32	s25, s29, s25
 800575e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005762:	ee65 ea81 	vmul.f32	s29, s11, s2
 8005766:	ee25 eaa0 	vmul.f32	s28, s11, s1
 800576a:	ee7d baab 	vadd.f32	s23, s27, s23
 800576e:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005772:	ee65 da80 	vmul.f32	s27, s11, s0
 8005776:	ee28 ba25 	vmul.f32	s22, s16, s11
 800577a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800577e:	ee79 8a28 	vadd.f32	s17, s18, s17
 8005782:	ee23 aa25 	vmul.f32	s20, s6, s11
 8005786:	ee22 9aa5 	vmul.f32	s18, s5, s11
 800578a:	ee3d da04 	vadd.f32	s26, s26, s8
 800578e:	ee65 5a82 	vmul.f32	s11, s11, s4
 8005792:	ee66 4a01 	vmul.f32	s9, s12, s2
 8005796:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800579a:	ed13 1a03 	vldr	s2, [r3, #-12]
 800579e:	ee75 5a85 	vadd.f32	s11, s11, s10
 80057a2:	ee3d da23 	vadd.f32	s26, s26, s7
 80057a6:	ee22 5a06 	vmul.f32	s10, s4, s12
 80057aa:	ee7e caac 	vadd.f32	s25, s29, s25
 80057ae:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80057b2:	ee66 ea20 	vmul.f32	s29, s12, s1
 80057b6:	ee26 ea00 	vmul.f32	s28, s12, s0
 80057ba:	ee7d baab 	vadd.f32	s23, s27, s23
 80057be:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80057c2:	ee68 da06 	vmul.f32	s27, s16, s12
 80057c6:	ee23 ba06 	vmul.f32	s22, s6, s12
 80057ca:	ee22 aa86 	vmul.f32	s20, s5, s12
 80057ce:	ee79 8a28 	vadd.f32	s17, s18, s17
 80057d2:	ee26 6a21 	vmul.f32	s12, s12, s3
 80057d6:	ee26 9aa0 	vmul.f32	s18, s13, s1
 80057da:	ee36 6a25 	vadd.f32	s12, s12, s11
 80057de:	ed53 0a02 	vldr	s1, [r3, #-8]
 80057e2:	ee61 5aa6 	vmul.f32	s11, s3, s13
 80057e6:	ee3d da24 	vadd.f32	s26, s26, s9
 80057ea:	ee7e caac 	vadd.f32	s25, s29, s25
 80057ee:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80057f2:	ee66 ea80 	vmul.f32	s29, s13, s0
 80057f6:	ee28 ea26 	vmul.f32	s28, s16, s13
 80057fa:	ee7d baab 	vadd.f32	s23, s27, s23
 80057fe:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005802:	ee63 da26 	vmul.f32	s27, s6, s13
 8005806:	ee22 baa6 	vmul.f32	s22, s5, s13
 800580a:	ee3a aa29 	vadd.f32	s20, s20, s19
 800580e:	ee75 8a28 	vadd.f32	s17, s10, s17
 8005812:	ee62 9a26 	vmul.f32	s19, s4, s13
 8005816:	ee66 6a81 	vmul.f32	s13, s13, s2
 800581a:	ee27 5a00 	vmul.f32	s10, s14, s0
 800581e:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8005822:	ee75 8aa8 	vadd.f32	s17, s11, s17
 8005826:	ee7e caac 	vadd.f32	s25, s29, s25
 800582a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800582e:	ee68 ea07 	vmul.f32	s29, s16, s14
 8005832:	ee23 ea07 	vmul.f32	s28, s6, s14
 8005836:	ee7d baab 	vadd.f32	s23, s27, s23
 800583a:	ee22 ba07 	vmul.f32	s22, s4, s14
 800583e:	ee62 da87 	vmul.f32	s27, s5, s14
 8005842:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8005846:	ee76 6a86 	vadd.f32	s13, s13, s12
 800584a:	ee61 9a87 	vmul.f32	s19, s3, s14
 800584e:	ee67 3a20 	vmul.f32	s7, s14, s1
 8005852:	ed13 0a01 	vldr	s0, [r3, #-4]
 8005856:	ee3d da09 	vadd.f32	s26, s26, s18
 800585a:	ee21 6a07 	vmul.f32	s12, s2, s14
 800585e:	ee3d da05 	vadd.f32	s26, s26, s10
 8005862:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005866:	ee63 5a27 	vmul.f32	s11, s6, s15
 800586a:	ee22 5aa7 	vmul.f32	s10, s5, s15
 800586e:	ee62 4a27 	vmul.f32	s9, s4, s15
 8005872:	ee3b ba2a 	vadd.f32	s22, s22, s21
 8005876:	ee39 aa8a 	vadd.f32	s20, s19, s20
 800587a:	ee61 aaa7 	vmul.f32	s21, s3, s15
 800587e:	ee61 9a27 	vmul.f32	s19, s2, s15
 8005882:	ee36 7a28 	vadd.f32	s14, s12, s17
 8005886:	ee7e caac 	vadd.f32	s25, s29, s25
 800588a:	ee60 8aa7 	vmul.f32	s17, s1, s15
 800588e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8005892:	ee7d baab 	vadd.f32	s23, s27, s23
 8005896:	ee73 3aa6 	vadd.f32	s7, s7, s13
 800589a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800589e:	f1bb 0b01 	subs.w	fp, fp, #1
 80058a2:	f101 0120 	add.w	r1, r1, #32
 80058a6:	ee38 da0d 	vadd.f32	s26, s16, s26
 80058aa:	ee75 caac 	vadd.f32	s25, s11, s25
 80058ae:	ee35 ca0c 	vadd.f32	s24, s10, s24
 80058b2:	ee74 baab 	vadd.f32	s23, s9, s23
 80058b6:	ee7a aa8b 	vadd.f32	s21, s21, s22
 80058ba:	ee79 9a8a 	vadd.f32	s19, s19, s20
 80058be:	ee78 8a87 	vadd.f32	s17, s17, s14
 80058c2:	ee77 3aa3 	vadd.f32	s7, s15, s7
 80058c6:	f103 0320 	add.w	r3, r3, #32
 80058ca:	f47f aed8 	bne.w	800567e <arm_fir_f32+0xfe>
 80058ce:	eb09 0104 	add.w	r1, r9, r4
 80058d2:	46e3      	mov	fp, ip
 80058d4:	b3a2      	cbz	r2, 8005940 <arm_fir_f32+0x3c0>
 80058d6:	4613      	mov	r3, r2
 80058d8:	ecbb 6a01 	vldmia	fp!, {s12}
 80058dc:	ecf1 7a01 	vldmia	r1!, {s15}
 80058e0:	ee26 3a03 	vmul.f32	s6, s12, s6
 80058e4:	ee26 4a22 	vmul.f32	s8, s12, s5
 80058e8:	ee66 4a02 	vmul.f32	s9, s12, s4
 80058ec:	ee26 5a21 	vmul.f32	s10, s12, s3
 80058f0:	ee66 5a01 	vmul.f32	s11, s12, s2
 80058f4:	ee66 6a20 	vmul.f32	s13, s12, s1
 80058f8:	ee26 7a00 	vmul.f32	s14, s12, s0
 80058fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005900:	3b01      	subs	r3, #1
 8005902:	ee3d da03 	vadd.f32	s26, s26, s6
 8005906:	ee7c ca84 	vadd.f32	s25, s25, s8
 800590a:	eeb0 3a62 	vmov.f32	s6, s5
 800590e:	ee3c ca24 	vadd.f32	s24, s24, s9
 8005912:	eef0 2a42 	vmov.f32	s5, s4
 8005916:	ee7b ba85 	vadd.f32	s23, s23, s10
 800591a:	eeb0 2a61 	vmov.f32	s4, s3
 800591e:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8005922:	eef0 1a41 	vmov.f32	s3, s2
 8005926:	ee79 9aa6 	vadd.f32	s19, s19, s13
 800592a:	eeb0 1a60 	vmov.f32	s2, s1
 800592e:	ee78 8a87 	vadd.f32	s17, s17, s14
 8005932:	eef0 0a40 	vmov.f32	s1, s0
 8005936:	ee73 3a86 	vadd.f32	s7, s7, s12
 800593a:	eeb0 0a67 	vmov.f32	s0, s15
 800593e:	d1cb      	bne.n	80058d8 <arm_fir_f32+0x358>
 8005940:	f1be 0e01 	subs.w	lr, lr, #1
 8005944:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8005948:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 800594c:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8005950:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8005954:	ed45 aa04 	vstr	s21, [r5, #-16]
 8005958:	ed45 9a03 	vstr	s19, [r5, #-12]
 800595c:	ed45 8a02 	vstr	s17, [r5, #-8]
 8005960:	ed45 3a01 	vstr	s7, [r5, #-4]
 8005964:	f107 0720 	add.w	r7, r7, #32
 8005968:	f106 0620 	add.w	r6, r6, #32
 800596c:	f104 0420 	add.w	r4, r4, #32
 8005970:	f105 0520 	add.w	r5, r5, #32
 8005974:	f47f ae3c 	bne.w	80055f0 <arm_fir_f32+0x70>
 8005978:	9b02      	ldr	r3, [sp, #8]
 800597a:	9800      	ldr	r0, [sp, #0]
 800597c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005980:	9907      	ldr	r1, [sp, #28]
 8005982:	015b      	lsls	r3, r3, #5
 8005984:	4652      	mov	r2, sl
 8005986:	4418      	add	r0, r3
 8005988:	9000      	str	r0, [sp, #0]
 800598a:	4419      	add	r1, r3
 800598c:	449c      	add	ip, r3
 800598e:	441a      	add	r2, r3
 8005990:	9b04      	ldr	r3, [sp, #16]
 8005992:	f013 0e07 	ands.w	lr, r3, #7
 8005996:	d01f      	beq.n	80059d8 <arm_fir_f32+0x458>
 8005998:	9f00      	ldr	r7, [sp, #0]
 800599a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800599e:	4676      	mov	r6, lr
 80059a0:	4665      	mov	r5, ip
 80059a2:	f851 3b04 	ldr.w	r3, [r1], #4
 80059a6:	eddf 6a12 	vldr	s13, [pc, #72]	; 80059f0 <arm_fir_f32+0x470>
 80059aa:	f847 3b04 	str.w	r3, [r7], #4
 80059ae:	4644      	mov	r4, r8
 80059b0:	464b      	mov	r3, r9
 80059b2:	4628      	mov	r0, r5
 80059b4:	ecb0 7a01 	vldmia	r0!, {s14}
 80059b8:	ecf4 7a01 	vldmia	r4!, {s15}
 80059bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c0:	3b01      	subs	r3, #1
 80059c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80059c6:	d1f5      	bne.n	80059b4 <arm_fir_f32+0x434>
 80059c8:	3e01      	subs	r6, #1
 80059ca:	ece2 6a01 	vstmia	r2!, {s13}
 80059ce:	f105 0504 	add.w	r5, r5, #4
 80059d2:	d1e6      	bne.n	80059a2 <arm_fir_f32+0x422>
 80059d4:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 80059d8:	9b01      	ldr	r3, [sp, #4]
 80059da:	1e59      	subs	r1, r3, #1
 80059dc:	9b03      	ldr	r3, [sp, #12]
 80059de:	088e      	lsrs	r6, r1, #2
 80059e0:	685c      	ldr	r4, [r3, #4]
 80059e2:	d020      	beq.n	8005a26 <arm_fir_f32+0x4a6>
 80059e4:	f104 0210 	add.w	r2, r4, #16
 80059e8:	f10c 0310 	add.w	r3, ip, #16
 80059ec:	4630      	mov	r0, r6
 80059ee:	e001      	b.n	80059f4 <arm_fir_f32+0x474>
 80059f0:	00000000 	.word	0x00000000
 80059f4:	f853 5c10 	ldr.w	r5, [r3, #-16]
 80059f8:	f842 5c10 	str.w	r5, [r2, #-16]
 80059fc:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8005a00:	f842 5c0c 	str.w	r5, [r2, #-12]
 8005a04:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8005a08:	f842 5c08 	str.w	r5, [r2, #-8]
 8005a0c:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8005a10:	f842 5c04 	str.w	r5, [r2, #-4]
 8005a14:	3801      	subs	r0, #1
 8005a16:	f103 0310 	add.w	r3, r3, #16
 8005a1a:	f102 0210 	add.w	r2, r2, #16
 8005a1e:	d1e9      	bne.n	80059f4 <arm_fir_f32+0x474>
 8005a20:	0133      	lsls	r3, r6, #4
 8005a22:	441c      	add	r4, r3
 8005a24:	449c      	add	ip, r3
 8005a26:	f011 0303 	ands.w	r3, r1, #3
 8005a2a:	d006      	beq.n	8005a3a <arm_fir_f32+0x4ba>
 8005a2c:	4622      	mov	r2, r4
 8005a2e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005a32:	f842 1b04 	str.w	r1, [r2], #4
 8005a36:	3b01      	subs	r3, #1
 8005a38:	d1f9      	bne.n	8005a2e <arm_fir_f32+0x4ae>
 8005a3a:	b009      	add	sp, #36	; 0x24
 8005a3c:	ecbd 8b10 	vpop	{d8-d15}
 8005a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a44:	46c3      	mov	fp, r8
 8005a46:	e745      	b.n	80058d4 <arm_fir_f32+0x354>

08005a48 <arm_cmplx_mult_cmplx_f32>:
 8005a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a4a:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8005a4e:	d073      	beq.n	8005b38 <arm_cmplx_mult_cmplx_f32+0xf0>
 8005a50:	f100 0620 	add.w	r6, r0, #32
 8005a54:	f101 0520 	add.w	r5, r1, #32
 8005a58:	f102 0420 	add.w	r4, r2, #32
 8005a5c:	4677      	mov	r7, lr
 8005a5e:	ed16 7a08 	vldr	s14, [r6, #-32]	; 0xffffffe0
 8005a62:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8005a66:	ed16 2a07 	vldr	s4, [r6, #-28]	; 0xffffffe4
 8005a6a:	ed55 2a07 	vldr	s5, [r5, #-28]	; 0xffffffe4
 8005a6e:	ed16 3a05 	vldr	s6, [r6, #-20]	; 0xffffffec
 8005a72:	ed16 6a06 	vldr	s12, [r6, #-24]	; 0xffffffe8
 8005a76:	ed55 7a06 	vldr	s15, [r5, #-24]	; 0xffffffe8
 8005a7a:	ed55 5a05 	vldr	s11, [r5, #-20]	; 0xffffffec
 8005a7e:	ed56 6a04 	vldr	s13, [r6, #-16]
 8005a82:	ed55 3a04 	vldr	s7, [r5, #-16]
 8005a86:	ee67 4a05 	vmul.f32	s9, s14, s10
 8005a8a:	ee22 4a22 	vmul.f32	s8, s4, s5
 8005a8e:	ee25 5a02 	vmul.f32	s10, s10, s4
 8005a92:	ee27 7a22 	vmul.f32	s14, s14, s5
 8005a96:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8005a9a:	ee66 4a27 	vmul.f32	s9, s12, s15
 8005a9e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005aa2:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005aa6:	ee65 5a83 	vmul.f32	s11, s11, s6
 8005aaa:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005aae:	ed04 4a08 	vstr	s8, [r4, #-32]	; 0xffffffe0
 8005ab2:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8005ab6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005aba:	ed16 5a03 	vldr	s10, [r6, #-12]
 8005abe:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 8005ac2:	ed15 7a03 	vldr	s14, [r5, #-12]
 8005ac6:	ed44 5a06 	vstr	s11, [r4, #-24]	; 0xffffffe8
 8005aca:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8005ace:	ed56 7a02 	vldr	s15, [r6, #-8]
 8005ad2:	ed15 6a02 	vldr	s12, [r5, #-8]
 8005ad6:	ed56 5a01 	vldr	s11, [r6, #-4]
 8005ada:	ed15 4a01 	vldr	s8, [r5, #-4]
 8005ade:	ee67 4a86 	vmul.f32	s9, s15, s12
 8005ae2:	ee23 3a85 	vmul.f32	s6, s7, s10
 8005ae6:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005aea:	ee25 5a07 	vmul.f32	s10, s10, s14
 8005aee:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005af2:	ee26 7a87 	vmul.f32	s14, s13, s14
 8005af6:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005afa:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005afe:	ee37 7a03 	vadd.f32	s14, s14, s6
 8005b02:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8005b06:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8005b0a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005b0e:	3f01      	subs	r7, #1
 8005b10:	ed44 6a04 	vstr	s13, [r4, #-16]
 8005b14:	ed04 7a03 	vstr	s14, [r4, #-12]
 8005b18:	ed44 5a02 	vstr	s11, [r4, #-8]
 8005b1c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005b20:	f106 0620 	add.w	r6, r6, #32
 8005b24:	f105 0520 	add.w	r5, r5, #32
 8005b28:	f104 0420 	add.w	r4, r4, #32
 8005b2c:	d197      	bne.n	8005a5e <arm_cmplx_mult_cmplx_f32+0x16>
 8005b2e:	ea4f 144e 	mov.w	r4, lr, lsl #5
 8005b32:	4420      	add	r0, r4
 8005b34:	4421      	add	r1, r4
 8005b36:	4422      	add	r2, r4
 8005b38:	f013 0303 	ands.w	r3, r3, #3
 8005b3c:	d022      	beq.n	8005b84 <arm_cmplx_mult_cmplx_f32+0x13c>
 8005b3e:	3008      	adds	r0, #8
 8005b40:	3108      	adds	r1, #8
 8005b42:	3208      	adds	r2, #8
 8005b44:	ed50 7a02 	vldr	s15, [r0, #-8]
 8005b48:	ed11 7a02 	vldr	s14, [r1, #-8]
 8005b4c:	ed50 6a01 	vldr	s13, [r0, #-4]
 8005b50:	ed51 5a01 	vldr	s11, [r1, #-4]
 8005b54:	ee27 6a87 	vmul.f32	s12, s15, s14
 8005b58:	ee26 7a87 	vmul.f32	s14, s13, s14
 8005b5c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005b60:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005b64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b68:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	ed42 6a02 	vstr	s13, [r2, #-8]
 8005b72:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005b76:	f100 0008 	add.w	r0, r0, #8
 8005b7a:	f101 0108 	add.w	r1, r1, #8
 8005b7e:	f102 0208 	add.w	r2, r2, #8
 8005b82:	d1df      	bne.n	8005b44 <arm_cmplx_mult_cmplx_f32+0xfc>
 8005b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b86:	bf00      	nop

08005b88 <arm_cmplx_mag_f32>:
 8005b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8005b90:	b084      	sub	sp, #16
 8005b92:	d07f      	beq.n	8005c94 <arm_cmplx_mag_f32+0x10c>
 8005b94:	2700      	movs	r7, #0
 8005b96:	f100 0420 	add.w	r4, r0, #32
 8005b9a:	f101 0510 	add.w	r5, r1, #16
 8005b9e:	4646      	mov	r6, r8
 8005ba0:	e05a      	b.n	8005c58 <arm_cmplx_mag_f32+0xd0>
 8005ba2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005ba6:	eeb4 0a40 	vcmp.f32	s0, s0
 8005baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bae:	f040 80a4 	bne.w	8005cfa <arm_cmplx_mag_f32+0x172>
 8005bb2:	ed05 0a04 	vstr	s0, [r5, #-16]
 8005bb6:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8005bba:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8005bbe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005bc2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005bc6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd2:	f2c0 808f 	blt.w	8005cf4 <arm_cmplx_mag_f32+0x16c>
 8005bd6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005bda:	eeb4 0a40 	vcmp.f32	s0, s0
 8005bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be2:	f040 80af 	bne.w	8005d44 <arm_cmplx_mag_f32+0x1bc>
 8005be6:	ed05 0a03 	vstr	s0, [r5, #-12]
 8005bea:	ed54 7a04 	vldr	s15, [r4, #-16]
 8005bee:	ed14 0a03 	vldr	s0, [r4, #-12]
 8005bf2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005bf6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005bfa:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005bfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c06:	db72      	blt.n	8005cee <arm_cmplx_mag_f32+0x166>
 8005c08:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005c0c:	eeb4 0a40 	vcmp.f32	s0, s0
 8005c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c14:	f040 808c 	bne.w	8005d30 <arm_cmplx_mag_f32+0x1a8>
 8005c18:	ed05 0a02 	vstr	s0, [r5, #-8]
 8005c1c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8005c20:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005c24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005c28:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005c2c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005c30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c38:	db20      	blt.n	8005c7c <arm_cmplx_mag_f32+0xf4>
 8005c3a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005c3e:	eeb4 0a40 	vcmp.f32	s0, s0
 8005c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c46:	d169      	bne.n	8005d1c <arm_cmplx_mag_f32+0x194>
 8005c48:	3e01      	subs	r6, #1
 8005c4a:	ed05 0a01 	vstr	s0, [r5, #-4]
 8005c4e:	f104 0420 	add.w	r4, r4, #32
 8005c52:	f105 0510 	add.w	r5, r5, #16
 8005c56:	d019      	beq.n	8005c8c <arm_cmplx_mag_f32+0x104>
 8005c58:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8005c5c:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8005c60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005c64:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005c68:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005c6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c74:	da95      	bge.n	8005ba2 <arm_cmplx_mag_f32+0x1a>
 8005c76:	f845 7c10 	str.w	r7, [r5, #-16]
 8005c7a:	e79c      	b.n	8005bb6 <arm_cmplx_mag_f32+0x2e>
 8005c7c:	3e01      	subs	r6, #1
 8005c7e:	f845 7c04 	str.w	r7, [r5, #-4]
 8005c82:	f104 0420 	add.w	r4, r4, #32
 8005c86:	f105 0510 	add.w	r5, r5, #16
 8005c8a:	d1e5      	bne.n	8005c58 <arm_cmplx_mag_f32+0xd0>
 8005c8c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8005c90:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8005c94:	f012 0503 	ands.w	r5, r2, #3
 8005c98:	d026      	beq.n	8005ce8 <arm_cmplx_mag_f32+0x160>
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	f100 0408 	add.w	r4, r0, #8
 8005ca0:	e00c      	b.n	8005cbc <arm_cmplx_mag_f32+0x134>
 8005ca2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005ca6:	eeb4 0a40 	vcmp.f32	s0, s0
 8005caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cae:	d12e      	bne.n	8005d0e <arm_cmplx_mag_f32+0x186>
 8005cb0:	3d01      	subs	r5, #1
 8005cb2:	ed01 0a01 	vstr	s0, [r1, #-4]
 8005cb6:	f104 0408 	add.w	r4, r4, #8
 8005cba:	d015      	beq.n	8005ce8 <arm_cmplx_mag_f32+0x160>
 8005cbc:	ed54 7a02 	vldr	s15, [r4, #-8]
 8005cc0:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005cc4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005cc8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005ccc:	3104      	adds	r1, #4
 8005cce:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005cd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cda:	dae2      	bge.n	8005ca2 <arm_cmplx_mag_f32+0x11a>
 8005cdc:	3d01      	subs	r5, #1
 8005cde:	f841 6c04 	str.w	r6, [r1, #-4]
 8005ce2:	f104 0408 	add.w	r4, r4, #8
 8005ce6:	d1e9      	bne.n	8005cbc <arm_cmplx_mag_f32+0x134>
 8005ce8:	b004      	add	sp, #16
 8005cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cee:	f845 7c08 	str.w	r7, [r5, #-8]
 8005cf2:	e793      	b.n	8005c1c <arm_cmplx_mag_f32+0x94>
 8005cf4:	f845 7c0c 	str.w	r7, [r5, #-12]
 8005cf8:	e777      	b.n	8005bea <arm_cmplx_mag_f32+0x62>
 8005cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8005cfe:	9203      	str	r2, [sp, #12]
 8005d00:	9102      	str	r1, [sp, #8]
 8005d02:	9001      	str	r0, [sp, #4]
 8005d04:	f003 fa38 	bl	8009178 <sqrtf>
 8005d08:	a801      	add	r0, sp, #4
 8005d0a:	c807      	ldmia	r0, {r0, r1, r2}
 8005d0c:	e751      	b.n	8005bb2 <arm_cmplx_mag_f32+0x2a>
 8005d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8005d12:	9101      	str	r1, [sp, #4]
 8005d14:	f003 fa30 	bl	8009178 <sqrtf>
 8005d18:	9901      	ldr	r1, [sp, #4]
 8005d1a:	e7c9      	b.n	8005cb0 <arm_cmplx_mag_f32+0x128>
 8005d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d20:	9203      	str	r2, [sp, #12]
 8005d22:	9102      	str	r1, [sp, #8]
 8005d24:	9001      	str	r0, [sp, #4]
 8005d26:	f003 fa27 	bl	8009178 <sqrtf>
 8005d2a:	a801      	add	r0, sp, #4
 8005d2c:	c807      	ldmia	r0, {r0, r1, r2}
 8005d2e:	e78b      	b.n	8005c48 <arm_cmplx_mag_f32+0xc0>
 8005d30:	eeb0 0a67 	vmov.f32	s0, s15
 8005d34:	9203      	str	r2, [sp, #12]
 8005d36:	9102      	str	r1, [sp, #8]
 8005d38:	9001      	str	r0, [sp, #4]
 8005d3a:	f003 fa1d 	bl	8009178 <sqrtf>
 8005d3e:	a801      	add	r0, sp, #4
 8005d40:	c807      	ldmia	r0, {r0, r1, r2}
 8005d42:	e769      	b.n	8005c18 <arm_cmplx_mag_f32+0x90>
 8005d44:	eeb0 0a67 	vmov.f32	s0, s15
 8005d48:	9203      	str	r2, [sp, #12]
 8005d4a:	9102      	str	r1, [sp, #8]
 8005d4c:	9001      	str	r0, [sp, #4]
 8005d4e:	f003 fa13 	bl	8009178 <sqrtf>
 8005d52:	a801      	add	r0, sp, #4
 8005d54:	c807      	ldmia	r0, {r0, r1, r2}
 8005d56:	e746      	b.n	8005be6 <arm_cmplx_mag_f32+0x5e>

08005d58 <arm_sin_f32>:
 8005d58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d60:	d42c      	bmi.n	8005dbc <arm_sin_f32+0x64>
 8005d62:	eddf 7a20 	vldr	s15, [pc, #128]	; 8005de4 <arm_sin_f32+0x8c>
 8005d66:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005d6a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005d6e:	d432      	bmi.n	8005dd6 <arm_sin_f32+0x7e>
 8005d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d74:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8005de8 <arm_sin_f32+0x90>
 8005d78:	4a1c      	ldr	r2, [pc, #112]	; (8005dec <arm_sin_f32+0x94>)
 8005d7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d82:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005d86:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005d8a:	ee17 3a90 	vmov	r3, s15
 8005d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005d9e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005da2:	edd1 6a01 	vldr	s13, [r1, #4]
 8005da6:	ed91 0a00 	vldr	s0, [r1]
 8005daa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005dae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005db2:	ee27 0a00 	vmul.f32	s0, s14, s0
 8005db6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005dba:	4770      	bx	lr
 8005dbc:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8005df0 <arm_sin_f32+0x98>
 8005dc0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc8:	da0b      	bge.n	8005de2 <arm_sin_f32+0x8a>
 8005dca:	eddf 7a06 	vldr	s15, [pc, #24]	; 8005de4 <arm_sin_f32+0x8c>
 8005dce:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005dd2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005dd6:	ee17 3a90 	vmov	r3, s15
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	e7c6      	b.n	8005d70 <arm_sin_f32+0x18>
 8005de2:	4770      	bx	lr
 8005de4:	3e22f983 	.word	0x3e22f983
 8005de8:	44000000 	.word	0x44000000
 8005dec:	08018054 	.word	0x08018054
 8005df0:	b44c02cd 	.word	0xb44c02cd

08005df4 <arm_cos_f32>:
 8005df4:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8005e68 <arm_cos_f32+0x74>
 8005df8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005dfc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8005e00:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005e04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e0c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005e10:	d504      	bpl.n	8005e1c <arm_cos_f32+0x28>
 8005e12:	ee17 3a90 	vmov	r3, s15
 8005e16:	3b01      	subs	r3, #1
 8005e18:	ee07 3a90 	vmov	s15, r3
 8005e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e20:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005e6c <arm_cos_f32+0x78>
 8005e24:	4a12      	ldr	r2, [pc, #72]	; (8005e70 <arm_cos_f32+0x7c>)
 8005e26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005e2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e2e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005e32:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005e36:	ee17 3a90 	vmov	r3, s15
 8005e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e46:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005e4a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005e4e:	edd1 6a01 	vldr	s13, [r1, #4]
 8005e52:	ed91 0a00 	vldr	s0, [r1]
 8005e56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005e5e:	ee27 0a00 	vmul.f32	s0, s14, s0
 8005e62:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005e66:	4770      	bx	lr
 8005e68:	3e22f983 	.word	0x3e22f983
 8005e6c:	44000000 	.word	0x44000000
 8005e70:	08018054 	.word	0x08018054

08005e74 <arm_scale_f32>:
 8005e74:	b470      	push	{r4, r5, r6}
 8005e76:	0896      	lsrs	r6, r2, #2
 8005e78:	d025      	beq.n	8005ec6 <arm_scale_f32+0x52>
 8005e7a:	f100 0410 	add.w	r4, r0, #16
 8005e7e:	f101 0310 	add.w	r3, r1, #16
 8005e82:	4635      	mov	r5, r6
 8005e84:	ed14 6a04 	vldr	s12, [r4, #-16]
 8005e88:	ed54 6a03 	vldr	s13, [r4, #-12]
 8005e8c:	ed14 7a02 	vldr	s14, [r4, #-8]
 8005e90:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005e94:	ee26 6a00 	vmul.f32	s12, s12, s0
 8005e98:	ee66 6a80 	vmul.f32	s13, s13, s0
 8005e9c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005ea0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005ea4:	3d01      	subs	r5, #1
 8005ea6:	ed03 6a04 	vstr	s12, [r3, #-16]
 8005eaa:	ed43 6a03 	vstr	s13, [r3, #-12]
 8005eae:	ed03 7a02 	vstr	s14, [r3, #-8]
 8005eb2:	ed43 7a01 	vstr	s15, [r3, #-4]
 8005eb6:	f104 0410 	add.w	r4, r4, #16
 8005eba:	f103 0310 	add.w	r3, r3, #16
 8005ebe:	d1e1      	bne.n	8005e84 <arm_scale_f32+0x10>
 8005ec0:	0136      	lsls	r6, r6, #4
 8005ec2:	4430      	add	r0, r6
 8005ec4:	4431      	add	r1, r6
 8005ec6:	f012 0203 	ands.w	r2, r2, #3
 8005eca:	d007      	beq.n	8005edc <arm_scale_f32+0x68>
 8005ecc:	ecf0 7a01 	vldmia	r0!, {s15}
 8005ed0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005ed4:	3a01      	subs	r2, #1
 8005ed6:	ece1 7a01 	vstmia	r1!, {s15}
 8005eda:	d1f7      	bne.n	8005ecc <arm_scale_f32+0x58>
 8005edc:	bc70      	pop	{r4, r5, r6}
 8005ede:	4770      	bx	lr

08005ee0 <arm_offset_f32>:
 8005ee0:	b470      	push	{r4, r5, r6}
 8005ee2:	0896      	lsrs	r6, r2, #2
 8005ee4:	d025      	beq.n	8005f32 <arm_offset_f32+0x52>
 8005ee6:	f100 0410 	add.w	r4, r0, #16
 8005eea:	f101 0310 	add.w	r3, r1, #16
 8005eee:	4635      	mov	r5, r6
 8005ef0:	ed14 6a04 	vldr	s12, [r4, #-16]
 8005ef4:	ed54 6a03 	vldr	s13, [r4, #-12]
 8005ef8:	ed14 7a02 	vldr	s14, [r4, #-8]
 8005efc:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005f00:	ee36 6a00 	vadd.f32	s12, s12, s0
 8005f04:	ee76 6a80 	vadd.f32	s13, s13, s0
 8005f08:	ee30 7a07 	vadd.f32	s14, s0, s14
 8005f0c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8005f10:	3d01      	subs	r5, #1
 8005f12:	ed03 6a04 	vstr	s12, [r3, #-16]
 8005f16:	ed43 6a03 	vstr	s13, [r3, #-12]
 8005f1a:	ed03 7a02 	vstr	s14, [r3, #-8]
 8005f1e:	ed43 7a01 	vstr	s15, [r3, #-4]
 8005f22:	f104 0410 	add.w	r4, r4, #16
 8005f26:	f103 0310 	add.w	r3, r3, #16
 8005f2a:	d1e1      	bne.n	8005ef0 <arm_offset_f32+0x10>
 8005f2c:	0136      	lsls	r6, r6, #4
 8005f2e:	4430      	add	r0, r6
 8005f30:	4431      	add	r1, r6
 8005f32:	f012 0203 	ands.w	r2, r2, #3
 8005f36:	d007      	beq.n	8005f48 <arm_offset_f32+0x68>
 8005f38:	ecf0 7a01 	vldmia	r0!, {s15}
 8005f3c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005f40:	3a01      	subs	r2, #1
 8005f42:	ece1 7a01 	vstmia	r1!, {s15}
 8005f46:	d1f7      	bne.n	8005f38 <arm_offset_f32+0x58>
 8005f48:	bc70      	pop	{r4, r5, r6}
 8005f4a:	4770      	bx	lr

08005f4c <arm_mult_f32>:
 8005f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8005f52:	d033      	beq.n	8005fbc <arm_mult_f32+0x70>
 8005f54:	f100 0610 	add.w	r6, r0, #16
 8005f58:	f101 0510 	add.w	r5, r1, #16
 8005f5c:	f102 0410 	add.w	r4, r2, #16
 8005f60:	4677      	mov	r7, lr
 8005f62:	ed16 6a04 	vldr	s12, [r6, #-16]
 8005f66:	ed55 4a04 	vldr	s9, [r5, #-16]
 8005f6a:	ed56 6a02 	vldr	s13, [r6, #-8]
 8005f6e:	ed15 5a02 	vldr	s10, [r5, #-8]
 8005f72:	ed16 7a03 	vldr	s14, [r6, #-12]
 8005f76:	ed55 5a03 	vldr	s11, [r5, #-12]
 8005f7a:	ed56 7a01 	vldr	s15, [r6, #-4]
 8005f7e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005f82:	ee66 6a85 	vmul.f32	s13, s13, s10
 8005f86:	ed04 6a04 	vstr	s12, [r4, #-16]
 8005f8a:	ed15 6a01 	vldr	s12, [r5, #-4]
 8005f8e:	ed44 6a02 	vstr	s13, [r4, #-8]
 8005f92:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005f96:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005f9a:	3f01      	subs	r7, #1
 8005f9c:	ed04 7a03 	vstr	s14, [r4, #-12]
 8005fa0:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005fa4:	f106 0610 	add.w	r6, r6, #16
 8005fa8:	f105 0510 	add.w	r5, r5, #16
 8005fac:	f104 0410 	add.w	r4, r4, #16
 8005fb0:	d1d7      	bne.n	8005f62 <arm_mult_f32+0x16>
 8005fb2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8005fb6:	4420      	add	r0, r4
 8005fb8:	4421      	add	r1, r4
 8005fba:	4422      	add	r2, r4
 8005fbc:	f013 0303 	ands.w	r3, r3, #3
 8005fc0:	d009      	beq.n	8005fd6 <arm_mult_f32+0x8a>
 8005fc2:	ecf0 7a01 	vldmia	r0!, {s15}
 8005fc6:	ecb1 7a01 	vldmia	r1!, {s14}
 8005fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	ece2 7a01 	vstmia	r2!, {s15}
 8005fd4:	d1f5      	bne.n	8005fc2 <arm_mult_f32+0x76>
 8005fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fd8 <arm_dot_prod_f32>:
 8005fd8:	b4f0      	push	{r4, r5, r6, r7}
 8005fda:	0897      	lsrs	r7, r2, #2
 8005fdc:	eddf 5a20 	vldr	s11, [pc, #128]	; 8006060 <arm_dot_prod_f32+0x88>
 8005fe0:	d02d      	beq.n	800603e <arm_dot_prod_f32+0x66>
 8005fe2:	f100 0510 	add.w	r5, r0, #16
 8005fe6:	f101 0410 	add.w	r4, r1, #16
 8005fea:	463e      	mov	r6, r7
 8005fec:	ed54 7a04 	vldr	s15, [r4, #-16]
 8005ff0:	ed15 6a04 	vldr	s12, [r5, #-16]
 8005ff4:	ed55 6a03 	vldr	s13, [r5, #-12]
 8005ff8:	ed54 3a03 	vldr	s7, [r4, #-12]
 8005ffc:	ed15 7a02 	vldr	s14, [r5, #-8]
 8006000:	ed14 4a02 	vldr	s8, [r4, #-8]
 8006004:	ed15 5a01 	vldr	s10, [r5, #-4]
 8006008:	ed54 4a01 	vldr	s9, [r4, #-4]
 800600c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006010:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8006014:	ee76 7a25 	vadd.f32	s15, s12, s11
 8006018:	ee27 7a04 	vmul.f32	s14, s14, s8
 800601c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006020:	ee65 5a24 	vmul.f32	s11, s10, s9
 8006024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006028:	3e01      	subs	r6, #1
 800602a:	f105 0510 	add.w	r5, r5, #16
 800602e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006032:	f104 0410 	add.w	r4, r4, #16
 8006036:	d1d9      	bne.n	8005fec <arm_dot_prod_f32+0x14>
 8006038:	013f      	lsls	r7, r7, #4
 800603a:	4438      	add	r0, r7
 800603c:	4439      	add	r1, r7
 800603e:	f012 0203 	ands.w	r2, r2, #3
 8006042:	d009      	beq.n	8006058 <arm_dot_prod_f32+0x80>
 8006044:	ecf0 7a01 	vldmia	r0!, {s15}
 8006048:	ecb1 7a01 	vldmia	r1!, {s14}
 800604c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006050:	3a01      	subs	r2, #1
 8006052:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006056:	d1f5      	bne.n	8006044 <arm_dot_prod_f32+0x6c>
 8006058:	edc3 5a00 	vstr	s11, [r3]
 800605c:	bcf0      	pop	{r4, r5, r6, r7}
 800605e:	4770      	bx	lr
 8006060:	00000000 	.word	0x00000000

08006064 <arm_radix8_butterfly_f32>:
 8006064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006068:	ed2d 8b10 	vpush	{d8-d15}
 800606c:	461c      	mov	r4, r3
 800606e:	b09d      	sub	sp, #116	; 0x74
 8006070:	4603      	mov	r3, r0
 8006072:	3304      	adds	r3, #4
 8006074:	ed9f bac4 	vldr	s22, [pc, #784]	; 8006388 <arm_radix8_butterfly_f32+0x324>
 8006078:	9019      	str	r0, [sp, #100]	; 0x64
 800607a:	921a      	str	r2, [sp, #104]	; 0x68
 800607c:	468b      	mov	fp, r1
 800607e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006080:	468a      	mov	sl, r1
 8006082:	46a1      	mov	r9, r4
 8006084:	4607      	mov	r7, r0
 8006086:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800608a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800608e:	eb03 0508 	add.w	r5, r3, r8
 8006092:	195c      	adds	r4, r3, r5
 8006094:	00de      	lsls	r6, r3, #3
 8006096:	191a      	adds	r2, r3, r4
 8006098:	9600      	str	r6, [sp, #0]
 800609a:	1898      	adds	r0, r3, r2
 800609c:	4619      	mov	r1, r3
 800609e:	9e00      	ldr	r6, [sp, #0]
 80060a0:	9311      	str	r3, [sp, #68]	; 0x44
 80060a2:	4401      	add	r1, r0
 80060a4:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80060a8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80060ac:	19be      	adds	r6, r7, r6
 80060ae:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80060b2:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 80060b6:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 80060ba:	9f00      	ldr	r7, [sp, #0]
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	eb06 0e07 	add.w	lr, r6, r7
 80060c2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80060c4:	9302      	str	r3, [sp, #8]
 80060c6:	3204      	adds	r2, #4
 80060c8:	3104      	adds	r1, #4
 80060ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060ce:	f04f 0c00 	mov.w	ip, #0
 80060d2:	edde 7a00 	vldr	s15, [lr]
 80060d6:	edd6 6a00 	vldr	s13, [r6]
 80060da:	ed95 2a00 	vldr	s4, [r5]
 80060de:	ed17 aa01 	vldr	s20, [r7, #-4]
 80060e2:	edd4 4a00 	vldr	s9, [r4]
 80060e6:	ed90 5a00 	vldr	s10, [r0]
 80060ea:	ed12 7a01 	vldr	s14, [r2, #-4]
 80060ee:	ed51 0a01 	vldr	s1, [r1, #-4]
 80060f2:	ee77 8a85 	vadd.f32	s17, s15, s10
 80060f6:	ee76 3a87 	vadd.f32	s7, s13, s14
 80060fa:	ee32 4a20 	vadd.f32	s8, s4, s1
 80060fe:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8006102:	ee33 6a84 	vadd.f32	s12, s7, s8
 8006106:	ee73 5a28 	vadd.f32	s11, s6, s17
 800610a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800610e:	ee75 6a86 	vadd.f32	s13, s11, s12
 8006112:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8006116:	ed47 6a01 	vstr	s13, [r7, #-4]
 800611a:	edc4 5a00 	vstr	s11, [r4]
 800611e:	ed92 9a00 	vldr	s18, [r2]
 8006122:	ed95 1a01 	vldr	s2, [r5, #4]
 8006126:	edd6 5a01 	vldr	s11, [r6, #4]
 800612a:	ed91 6a00 	vldr	s12, [r1]
 800612e:	edd7 2a00 	vldr	s5, [r7]
 8006132:	edd4 1a01 	vldr	s3, [r4, #4]
 8006136:	edde 6a01 	vldr	s13, [lr, #4]
 800613a:	edd0 9a01 	vldr	s19, [r0, #4]
 800613e:	ee72 0a60 	vsub.f32	s1, s4, s1
 8006142:	ee71 aa46 	vsub.f32	s21, s2, s12
 8006146:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800614a:	ee37 0a60 	vsub.f32	s0, s14, s1
 800614e:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8006152:	ee37 7a20 	vadd.f32	s14, s14, s1
 8006156:	ee32 2a6a 	vsub.f32	s4, s4, s21
 800615a:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800615e:	ee75 5a89 	vadd.f32	s11, s11, s18
 8006162:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8006166:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800616a:	ee31 6a06 	vadd.f32	s12, s2, s12
 800616e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8006172:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8006176:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800617a:	ee72 1ae1 	vsub.f32	s3, s5, s3
 800617e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8006182:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8006186:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800618a:	ee33 3a68 	vsub.f32	s6, s6, s17
 800618e:	ee36 0a88 	vadd.f32	s0, s13, s16
 8006192:	ee75 8a86 	vadd.f32	s17, s11, s12
 8006196:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800619a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800619e:	ee74 6ae0 	vsub.f32	s13, s9, s1
 80061a2:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80061a6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80061aa:	ee75 4a27 	vadd.f32	s9, s10, s15
 80061ae:	ee71 5a49 	vsub.f32	s11, s2, s18
 80061b2:	ee31 2a09 	vadd.f32	s4, s2, s18
 80061b6:	ee75 7a67 	vsub.f32	s15, s10, s15
 80061ba:	ee31 1aa2 	vadd.f32	s2, s3, s5
 80061be:	ee71 2ae2 	vsub.f32	s5, s3, s5
 80061c2:	ee73 0a06 	vadd.f32	s1, s6, s12
 80061c6:	ee75 1ac4 	vsub.f32	s3, s11, s8
 80061ca:	ee36 5a87 	vadd.f32	s10, s13, s14
 80061ce:	ee32 8a28 	vadd.f32	s16, s4, s17
 80061d2:	ee33 6a46 	vsub.f32	s12, s6, s12
 80061d6:	ee34 4a25 	vadd.f32	s8, s8, s11
 80061da:	ee33 3a80 	vadd.f32	s6, s7, s0
 80061de:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80061e2:	ee71 5a64 	vsub.f32	s11, s2, s9
 80061e6:	ee72 6ae7 	vsub.f32	s13, s5, s15
 80061ea:	ee32 2a68 	vsub.f32	s4, s4, s17
 80061ee:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80061f2:	ee74 4a81 	vadd.f32	s9, s9, s2
 80061f6:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80061fa:	44dc      	add	ip, fp
 80061fc:	45e2      	cmp	sl, ip
 80061fe:	ed87 8a00 	vstr	s16, [r7]
 8006202:	ed84 2a01 	vstr	s4, [r4, #4]
 8006206:	441f      	add	r7, r3
 8006208:	edce 0a00 	vstr	s1, [lr]
 800620c:	441c      	add	r4, r3
 800620e:	ed80 6a00 	vstr	s12, [r0]
 8006212:	edce 1a01 	vstr	s3, [lr, #4]
 8006216:	ed80 4a01 	vstr	s8, [r0, #4]
 800621a:	449e      	add	lr, r3
 800621c:	ed86 3a00 	vstr	s6, [r6]
 8006220:	4418      	add	r0, r3
 8006222:	ed41 3a01 	vstr	s7, [r1, #-4]
 8006226:	ed02 5a01 	vstr	s10, [r2, #-4]
 800622a:	ed85 7a00 	vstr	s14, [r5]
 800622e:	edc6 5a01 	vstr	s11, [r6, #4]
 8006232:	edc1 4a00 	vstr	s9, [r1]
 8006236:	441e      	add	r6, r3
 8006238:	edc2 6a00 	vstr	s13, [r2]
 800623c:	4419      	add	r1, r3
 800623e:	edc5 7a01 	vstr	s15, [r5, #4]
 8006242:	441a      	add	r2, r3
 8006244:	441d      	add	r5, r3
 8006246:	f63f af44 	bhi.w	80060d2 <arm_radix8_butterfly_f32+0x6e>
 800624a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800624c:	2a07      	cmp	r2, #7
 800624e:	f240 81f5 	bls.w	800663c <arm_radix8_butterfly_f32+0x5d8>
 8006252:	f108 0101 	add.w	r1, r8, #1
 8006256:	188f      	adds	r7, r1, r2
 8006258:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 800625c:	19d6      	adds	r6, r2, r7
 800625e:	eb08 0c09 	add.w	ip, r8, r9
 8006262:	1994      	adds	r4, r2, r6
 8006264:	eb0c 0e09 	add.w	lr, ip, r9
 8006268:	4610      	mov	r0, r2
 800626a:	9701      	str	r7, [sp, #4]
 800626c:	4420      	add	r0, r4
 800626e:	eb0e 0709 	add.w	r7, lr, r9
 8006272:	1815      	adds	r5, r2, r0
 8006274:	eb07 0209 	add.w	r2, r7, r9
 8006278:	9203      	str	r2, [sp, #12]
 800627a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800627c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006280:	9117      	str	r1, [sp, #92]	; 0x5c
 8006282:	440a      	add	r2, r1
 8006284:	9900      	ldr	r1, [sp, #0]
 8006286:	3108      	adds	r1, #8
 8006288:	9100      	str	r1, [sp, #0]
 800628a:	9902      	ldr	r1, [sp, #8]
 800628c:	3108      	adds	r1, #8
 800628e:	9102      	str	r1, [sp, #8]
 8006290:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006292:	00ff      	lsls	r7, r7, #3
 8006294:	9715      	str	r7, [sp, #84]	; 0x54
 8006296:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800629a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800629e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80062a2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80062a4:	9903      	ldr	r1, [sp, #12]
 80062a6:	19d7      	adds	r7, r2, r7
 80062a8:	00c9      	lsls	r1, r1, #3
 80062aa:	9114      	str	r1, [sp, #80]	; 0x50
 80062ac:	9710      	str	r7, [sp, #64]	; 0x40
 80062ae:	9919      	ldr	r1, [sp, #100]	; 0x64
 80062b0:	9f00      	ldr	r7, [sp, #0]
 80062b2:	19cf      	adds	r7, r1, r7
 80062b4:	970d      	str	r7, [sp, #52]	; 0x34
 80062b6:	9f02      	ldr	r7, [sp, #8]
 80062b8:	19cf      	adds	r7, r1, r7
 80062ba:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80062be:	970c      	str	r7, [sp, #48]	; 0x30
 80062c0:	9f01      	ldr	r7, [sp, #4]
 80062c2:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80062c6:	3504      	adds	r5, #4
 80062c8:	3004      	adds	r0, #4
 80062ca:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 80062ce:	9508      	str	r5, [sp, #32]
 80062d0:	9009      	str	r0, [sp, #36]	; 0x24
 80062d2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80062d4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80062d6:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80062da:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80062de:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 80062e2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80062e4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 80062e8:	1945      	adds	r5, r0, r5
 80062ea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80062ee:	460f      	mov	r7, r1
 80062f0:	3404      	adds	r4, #4
 80062f2:	4641      	mov	r1, r8
 80062f4:	1841      	adds	r1, r0, r1
 80062f6:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80062fa:	940a      	str	r4, [sp, #40]	; 0x28
 80062fc:	eb00 0c06 	add.w	ip, r0, r6
 8006300:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006304:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006306:	9506      	str	r5, [sp, #24]
 8006308:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800630a:	9105      	str	r1, [sp, #20]
 800630c:	4639      	mov	r1, r7
 800630e:	1905      	adds	r5, r0, r4
 8006310:	3108      	adds	r1, #8
 8006312:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8006314:	9507      	str	r5, [sp, #28]
 8006316:	910f      	str	r1, [sp, #60]	; 0x3c
 8006318:	ea4f 1509 	mov.w	r5, r9, lsl #4
 800631c:	2101      	movs	r1, #1
 800631e:	eb00 0e06 	add.w	lr, r0, r6
 8006322:	9518      	str	r5, [sp, #96]	; 0x60
 8006324:	9404      	str	r4, [sp, #16]
 8006326:	9103      	str	r1, [sp, #12]
 8006328:	4620      	mov	r0, r4
 800632a:	4689      	mov	r9, r1
 800632c:	9e06      	ldr	r6, [sp, #24]
 800632e:	ed90 fa00 	vldr	s30, [r0]
 8006332:	edd6 7a01 	vldr	s15, [r6, #4]
 8006336:	edd0 ba01 	vldr	s23, [r0, #4]
 800633a:	edcd 7a00 	vstr	s15, [sp]
 800633e:	a80d      	add	r0, sp, #52	; 0x34
 8006340:	edde 7a01 	vldr	s15, [lr, #4]
 8006344:	9c05      	ldr	r4, [sp, #20]
 8006346:	9d07      	ldr	r5, [sp, #28]
 8006348:	edd2 fa00 	vldr	s31, [r2]
 800634c:	ed92 ca01 	vldr	s24, [r2, #4]
 8006350:	edcd 7a01 	vstr	s15, [sp, #4]
 8006354:	c807      	ldmia	r0, {r0, r1, r2}
 8006356:	eddc 7a01 	vldr	s15, [ip, #4]
 800635a:	edd4 ea00 	vldr	s29, [r4]
 800635e:	ed95 ea00 	vldr	s28, [r5]
 8006362:	edd6 da00 	vldr	s27, [r6]
 8006366:	edd4 aa01 	vldr	s21, [r4, #4]
 800636a:	ed95 aa01 	vldr	s20, [r5, #4]
 800636e:	ed9e da00 	vldr	s26, [lr]
 8006372:	eddc ca00 	vldr	s25, [ip]
 8006376:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800637a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800637c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800637e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006380:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006382:	edcd 7a02 	vstr	s15, [sp, #8]
 8006386:	e001      	b.n	800638c <arm_radix8_butterfly_f32+0x328>
 8006388:	3f3504f3 	.word	0x3f3504f3
 800638c:	ed16 6a01 	vldr	s12, [r6, #-4]
 8006390:	ed91 5a00 	vldr	s10, [r1]
 8006394:	ed57 9a01 	vldr	s19, [r7, #-4]
 8006398:	edd5 7a00 	vldr	s15, [r5]
 800639c:	ed18 7a01 	vldr	s14, [r8, #-4]
 80063a0:	edd2 3a00 	vldr	s7, [r2]
 80063a4:	ed94 3a00 	vldr	s6, [r4]
 80063a8:	ed90 2a00 	vldr	s4, [r0]
 80063ac:	ed92 0a01 	vldr	s0, [r2, #4]
 80063b0:	ee33 8a85 	vadd.f32	s16, s7, s10
 80063b4:	ee32 1a06 	vadd.f32	s2, s4, s12
 80063b8:	ee33 4a29 	vadd.f32	s8, s6, s19
 80063bc:	ee77 4a87 	vadd.f32	s9, s15, s14
 80063c0:	ee78 1a04 	vadd.f32	s3, s16, s8
 80063c4:	ee71 6a24 	vadd.f32	s13, s2, s9
 80063c8:	ee32 2a46 	vsub.f32	s4, s4, s12
 80063cc:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80063d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063d4:	ed82 6a00 	vstr	s12, [r2]
 80063d8:	edd5 8a01 	vldr	s17, [r5, #4]
 80063dc:	ed90 9a01 	vldr	s18, [r0, #4]
 80063e0:	edd6 2a00 	vldr	s5, [r6]
 80063e4:	ed98 7a00 	vldr	s14, [r8]
 80063e8:	edd4 0a01 	vldr	s1, [r4, #4]
 80063ec:	ed91 6a01 	vldr	s12, [r1, #4]
 80063f0:	edd7 5a00 	vldr	s11, [r7]
 80063f4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80063f8:	ee33 3a69 	vsub.f32	s6, s6, s19
 80063fc:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006400:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8006404:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006408:	ee38 7a87 	vadd.f32	s14, s17, s14
 800640c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006410:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006414:	ee75 8a69 	vsub.f32	s17, s10, s19
 8006418:	ee32 9a27 	vadd.f32	s18, s4, s15
 800641c:	ee35 5a29 	vadd.f32	s10, s10, s19
 8006420:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006424:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006428:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800642c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006430:	ee32 9a08 	vadd.f32	s18, s4, s16
 8006434:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006438:	ee32 2a48 	vsub.f32	s4, s4, s16
 800643c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006440:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006444:	ee32 1a87 	vadd.f32	s2, s5, s14
 8006448:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800644c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006450:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006454:	ee73 0a29 	vadd.f32	s1, s6, s19
 8006458:	ee36 0a28 	vadd.f32	s0, s12, s17
 800645c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006460:	ee32 7a64 	vsub.f32	s14, s4, s9
 8006464:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8006468:	ee36 6a68 	vsub.f32	s12, s12, s17
 800646c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006470:	ee75 8a85 	vadd.f32	s17, s11, s10
 8006474:	ee74 3a22 	vadd.f32	s7, s8, s5
 8006478:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800647c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006480:	ee79 1a41 	vsub.f32	s3, s18, s2
 8006484:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8006488:	ee76 5a43 	vsub.f32	s11, s12, s6
 800648c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006490:	ee74 4a82 	vadd.f32	s9, s9, s4
 8006494:	ee30 4a60 	vsub.f32	s8, s0, s1
 8006498:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800649c:	ee30 0a80 	vadd.f32	s0, s1, s0
 80064a0:	ee77 9a85 	vadd.f32	s19, s15, s10
 80064a4:	ee33 6a06 	vadd.f32	s12, s6, s12
 80064a8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80064ac:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80064b0:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80064b4:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80064b8:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80064bc:	ee39 1a01 	vadd.f32	s2, s18, s2
 80064c0:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80064c4:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80064c8:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80064cc:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80064d0:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80064d4:	ee35 3a03 	vadd.f32	s6, s10, s6
 80064d8:	ee72 6a66 	vsub.f32	s13, s4, s13
 80064dc:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80064e0:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80064e4:	ed9d 4a02 	vldr	s8, [sp, #8]
 80064e8:	ed82 1a01 	vstr	s2, [r2, #4]
 80064ec:	ee77 3a63 	vsub.f32	s7, s14, s7
 80064f0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80064f4:	ed9d 7a01 	vldr	s14, [sp, #4]
 80064f8:	ed81 3a00 	vstr	s6, [r1]
 80064fc:	ee30 9a89 	vadd.f32	s18, s1, s18
 8006500:	ee32 2a05 	vadd.f32	s4, s4, s10
 8006504:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8006508:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800650c:	ee67 2a22 	vmul.f32	s5, s14, s5
 8006510:	ee64 1a00 	vmul.f32	s3, s8, s0
 8006514:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006518:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800651c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8006520:	ee64 8a28 	vmul.f32	s17, s8, s17
 8006524:	ed9d 4a00 	vldr	s8, [sp]
 8006528:	edc1 6a01 	vstr	s13, [r1, #4]
 800652c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006530:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8006534:	ee64 9a29 	vmul.f32	s19, s8, s19
 8006538:	ee24 4a25 	vmul.f32	s8, s8, s11
 800653c:	ee30 7a87 	vadd.f32	s14, s1, s14
 8006540:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006544:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8006548:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800654c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8006550:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8006554:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8006558:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800655c:	ee75 1a21 	vadd.f32	s3, s10, s3
 8006560:	ee30 0a68 	vsub.f32	s0, s0, s17
 8006564:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8006568:	ee70 0a84 	vadd.f32	s1, s1, s8
 800656c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006570:	44d9      	add	r9, fp
 8006572:	45ca      	cmp	sl, r9
 8006574:	ed84 9a00 	vstr	s18, [r4]
 8006578:	edc4 3a01 	vstr	s7, [r4, #4]
 800657c:	441a      	add	r2, r3
 800657e:	ed07 7a01 	vstr	s14, [r7, #-4]
 8006582:	edc7 2a00 	vstr	s5, [r7]
 8006586:	4419      	add	r1, r3
 8006588:	ed80 2a00 	vstr	s4, [r0]
 800658c:	ed80 8a01 	vstr	s16, [r0, #4]
 8006590:	441c      	add	r4, r3
 8006592:	ed48 1a01 	vstr	s3, [r8, #-4]
 8006596:	ed88 0a00 	vstr	s0, [r8]
 800659a:	441f      	add	r7, r3
 800659c:	ed46 4a01 	vstr	s9, [r6, #-4]
 80065a0:	4418      	add	r0, r3
 80065a2:	edc6 9a00 	vstr	s19, [r6]
 80065a6:	4498      	add	r8, r3
 80065a8:	edc5 0a00 	vstr	s1, [r5]
 80065ac:	ed85 6a01 	vstr	s12, [r5, #4]
 80065b0:	441e      	add	r6, r3
 80065b2:	441d      	add	r5, r3
 80065b4:	f63f aeea 	bhi.w	800638c <arm_radix8_butterfly_f32+0x328>
 80065b8:	9a03      	ldr	r2, [sp, #12]
 80065ba:	9818      	ldr	r0, [sp, #96]	; 0x60
 80065bc:	3201      	adds	r2, #1
 80065be:	4611      	mov	r1, r2
 80065c0:	9203      	str	r2, [sp, #12]
 80065c2:	9a04      	ldr	r2, [sp, #16]
 80065c4:	4402      	add	r2, r0
 80065c6:	9204      	str	r2, [sp, #16]
 80065c8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80065ca:	9a05      	ldr	r2, [sp, #20]
 80065cc:	4402      	add	r2, r0
 80065ce:	9205      	str	r2, [sp, #20]
 80065d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80065d2:	9a07      	ldr	r2, [sp, #28]
 80065d4:	4402      	add	r2, r0
 80065d6:	9207      	str	r2, [sp, #28]
 80065d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80065da:	9a06      	ldr	r2, [sp, #24]
 80065dc:	4402      	add	r2, r0
 80065de:	9206      	str	r2, [sp, #24]
 80065e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80065e2:	4496      	add	lr, r2
 80065e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80065e6:	4494      	add	ip, r2
 80065e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065ea:	3208      	adds	r2, #8
 80065ec:	920f      	str	r2, [sp, #60]	; 0x3c
 80065ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065f0:	3208      	adds	r2, #8
 80065f2:	920e      	str	r2, [sp, #56]	; 0x38
 80065f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065f6:	3208      	adds	r2, #8
 80065f8:	920d      	str	r2, [sp, #52]	; 0x34
 80065fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065fc:	3208      	adds	r2, #8
 80065fe:	920c      	str	r2, [sp, #48]	; 0x30
 8006600:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006602:	3208      	adds	r2, #8
 8006604:	920b      	str	r2, [sp, #44]	; 0x2c
 8006606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006608:	3208      	adds	r2, #8
 800660a:	920a      	str	r2, [sp, #40]	; 0x28
 800660c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800660e:	3208      	adds	r2, #8
 8006610:	9209      	str	r2, [sp, #36]	; 0x24
 8006612:	9a08      	ldr	r2, [sp, #32]
 8006614:	3208      	adds	r2, #8
 8006616:	9208      	str	r2, [sp, #32]
 8006618:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800661a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800661c:	4288      	cmp	r0, r1
 800661e:	4622      	mov	r2, r4
 8006620:	d007      	beq.n	8006632 <arm_radix8_butterfly_f32+0x5ce>
 8006622:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006624:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006628:	4621      	mov	r1, r4
 800662a:	4401      	add	r1, r0
 800662c:	9110      	str	r1, [sp, #64]	; 0x40
 800662e:	9804      	ldr	r0, [sp, #16]
 8006630:	e67c      	b.n	800632c <arm_radix8_butterfly_f32+0x2c8>
 8006632:	4683      	mov	fp, r0
 8006634:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8006638:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800663a:	e524      	b.n	8006086 <arm_radix8_butterfly_f32+0x22>
 800663c:	b01d      	add	sp, #116	; 0x74
 800663e:	ecbd 8b10 	vpop	{d8-d15}
 8006642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006646:	bf00      	nop

08006648 <__libc_init_array>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	4e0d      	ldr	r6, [pc, #52]	; (8006680 <__libc_init_array+0x38>)
 800664c:	4c0d      	ldr	r4, [pc, #52]	; (8006684 <__libc_init_array+0x3c>)
 800664e:	1ba4      	subs	r4, r4, r6
 8006650:	10a4      	asrs	r4, r4, #2
 8006652:	2500      	movs	r5, #0
 8006654:	42a5      	cmp	r5, r4
 8006656:	d109      	bne.n	800666c <__libc_init_array+0x24>
 8006658:	4e0b      	ldr	r6, [pc, #44]	; (8006688 <__libc_init_array+0x40>)
 800665a:	4c0c      	ldr	r4, [pc, #48]	; (800668c <__libc_init_array+0x44>)
 800665c:	f003 ffb6 	bl	800a5cc <_init>
 8006660:	1ba4      	subs	r4, r4, r6
 8006662:	10a4      	asrs	r4, r4, #2
 8006664:	2500      	movs	r5, #0
 8006666:	42a5      	cmp	r5, r4
 8006668:	d105      	bne.n	8006676 <__libc_init_array+0x2e>
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006670:	4798      	blx	r3
 8006672:	3501      	adds	r5, #1
 8006674:	e7ee      	b.n	8006654 <__libc_init_array+0xc>
 8006676:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800667a:	4798      	blx	r3
 800667c:	3501      	adds	r5, #1
 800667e:	e7f2      	b.n	8006666 <__libc_init_array+0x1e>
 8006680:	0801e5c0 	.word	0x0801e5c0
 8006684:	0801e5c0 	.word	0x0801e5c0
 8006688:	0801e5c0 	.word	0x0801e5c0
 800668c:	0801e5c4 	.word	0x0801e5c4

08006690 <memset>:
 8006690:	4402      	add	r2, r0
 8006692:	4603      	mov	r3, r0
 8006694:	4293      	cmp	r3, r2
 8006696:	d100      	bne.n	800669a <memset+0xa>
 8006698:	4770      	bx	lr
 800669a:	f803 1b01 	strb.w	r1, [r3], #1
 800669e:	e7f9      	b.n	8006694 <memset+0x4>

080066a0 <__cvt>:
 80066a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	ec55 4b10 	vmov	r4, r5, d0
 80066a8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80066aa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80066ae:	2d00      	cmp	r5, #0
 80066b0:	460e      	mov	r6, r1
 80066b2:	4691      	mov	r9, r2
 80066b4:	4619      	mov	r1, r3
 80066b6:	bfb8      	it	lt
 80066b8:	4622      	movlt	r2, r4
 80066ba:	462b      	mov	r3, r5
 80066bc:	f027 0720 	bic.w	r7, r7, #32
 80066c0:	bfbb      	ittet	lt
 80066c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80066c6:	461d      	movlt	r5, r3
 80066c8:	2300      	movge	r3, #0
 80066ca:	232d      	movlt	r3, #45	; 0x2d
 80066cc:	bfb8      	it	lt
 80066ce:	4614      	movlt	r4, r2
 80066d0:	2f46      	cmp	r7, #70	; 0x46
 80066d2:	700b      	strb	r3, [r1, #0]
 80066d4:	d004      	beq.n	80066e0 <__cvt+0x40>
 80066d6:	2f45      	cmp	r7, #69	; 0x45
 80066d8:	d100      	bne.n	80066dc <__cvt+0x3c>
 80066da:	3601      	adds	r6, #1
 80066dc:	2102      	movs	r1, #2
 80066de:	e000      	b.n	80066e2 <__cvt+0x42>
 80066e0:	2103      	movs	r1, #3
 80066e2:	ab03      	add	r3, sp, #12
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	ab02      	add	r3, sp, #8
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	4632      	mov	r2, r6
 80066ec:	4653      	mov	r3, sl
 80066ee:	ec45 4b10 	vmov	d0, r4, r5
 80066f2:	f000 fd11 	bl	8007118 <_dtoa_r>
 80066f6:	2f47      	cmp	r7, #71	; 0x47
 80066f8:	4680      	mov	r8, r0
 80066fa:	d102      	bne.n	8006702 <__cvt+0x62>
 80066fc:	f019 0f01 	tst.w	r9, #1
 8006700:	d026      	beq.n	8006750 <__cvt+0xb0>
 8006702:	2f46      	cmp	r7, #70	; 0x46
 8006704:	eb08 0906 	add.w	r9, r8, r6
 8006708:	d111      	bne.n	800672e <__cvt+0x8e>
 800670a:	f898 3000 	ldrb.w	r3, [r8]
 800670e:	2b30      	cmp	r3, #48	; 0x30
 8006710:	d10a      	bne.n	8006728 <__cvt+0x88>
 8006712:	2200      	movs	r2, #0
 8006714:	2300      	movs	r3, #0
 8006716:	4620      	mov	r0, r4
 8006718:	4629      	mov	r1, r5
 800671a:	f7fa fa31 	bl	8000b80 <__aeabi_dcmpeq>
 800671e:	b918      	cbnz	r0, 8006728 <__cvt+0x88>
 8006720:	f1c6 0601 	rsb	r6, r6, #1
 8006724:	f8ca 6000 	str.w	r6, [sl]
 8006728:	f8da 3000 	ldr.w	r3, [sl]
 800672c:	4499      	add	r9, r3
 800672e:	2200      	movs	r2, #0
 8006730:	2300      	movs	r3, #0
 8006732:	4620      	mov	r0, r4
 8006734:	4629      	mov	r1, r5
 8006736:	f7fa fa23 	bl	8000b80 <__aeabi_dcmpeq>
 800673a:	b938      	cbnz	r0, 800674c <__cvt+0xac>
 800673c:	2230      	movs	r2, #48	; 0x30
 800673e:	9b03      	ldr	r3, [sp, #12]
 8006740:	4599      	cmp	r9, r3
 8006742:	d905      	bls.n	8006750 <__cvt+0xb0>
 8006744:	1c59      	adds	r1, r3, #1
 8006746:	9103      	str	r1, [sp, #12]
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	e7f8      	b.n	800673e <__cvt+0x9e>
 800674c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006750:	9b03      	ldr	r3, [sp, #12]
 8006752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006754:	eba3 0308 	sub.w	r3, r3, r8
 8006758:	4640      	mov	r0, r8
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	b004      	add	sp, #16
 800675e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006762 <__exponent>:
 8006762:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006764:	4603      	mov	r3, r0
 8006766:	2900      	cmp	r1, #0
 8006768:	bfb8      	it	lt
 800676a:	4249      	neglt	r1, r1
 800676c:	f803 2b02 	strb.w	r2, [r3], #2
 8006770:	bfb4      	ite	lt
 8006772:	222d      	movlt	r2, #45	; 0x2d
 8006774:	222b      	movge	r2, #43	; 0x2b
 8006776:	2909      	cmp	r1, #9
 8006778:	7042      	strb	r2, [r0, #1]
 800677a:	dd20      	ble.n	80067be <__exponent+0x5c>
 800677c:	f10d 0207 	add.w	r2, sp, #7
 8006780:	4617      	mov	r7, r2
 8006782:	260a      	movs	r6, #10
 8006784:	fb91 f5f6 	sdiv	r5, r1, r6
 8006788:	fb06 1115 	mls	r1, r6, r5, r1
 800678c:	3130      	adds	r1, #48	; 0x30
 800678e:	2d09      	cmp	r5, #9
 8006790:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006794:	f102 34ff 	add.w	r4, r2, #4294967295
 8006798:	4629      	mov	r1, r5
 800679a:	dc09      	bgt.n	80067b0 <__exponent+0x4e>
 800679c:	3130      	adds	r1, #48	; 0x30
 800679e:	3a02      	subs	r2, #2
 80067a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80067a4:	42ba      	cmp	r2, r7
 80067a6:	461c      	mov	r4, r3
 80067a8:	d304      	bcc.n	80067b4 <__exponent+0x52>
 80067aa:	1a20      	subs	r0, r4, r0
 80067ac:	b003      	add	sp, #12
 80067ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067b0:	4622      	mov	r2, r4
 80067b2:	e7e7      	b.n	8006784 <__exponent+0x22>
 80067b4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80067b8:	f803 1b01 	strb.w	r1, [r3], #1
 80067bc:	e7f2      	b.n	80067a4 <__exponent+0x42>
 80067be:	2230      	movs	r2, #48	; 0x30
 80067c0:	461c      	mov	r4, r3
 80067c2:	4411      	add	r1, r2
 80067c4:	f804 2b02 	strb.w	r2, [r4], #2
 80067c8:	7059      	strb	r1, [r3, #1]
 80067ca:	e7ee      	b.n	80067aa <__exponent+0x48>

080067cc <_printf_float>:
 80067cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d0:	b08d      	sub	sp, #52	; 0x34
 80067d2:	460c      	mov	r4, r1
 80067d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80067d8:	4616      	mov	r6, r2
 80067da:	461f      	mov	r7, r3
 80067dc:	4605      	mov	r5, r0
 80067de:	f001 fb33 	bl	8007e48 <_localeconv_r>
 80067e2:	6803      	ldr	r3, [r0, #0]
 80067e4:	9304      	str	r3, [sp, #16]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7f9 fd52 	bl	8000290 <strlen>
 80067ec:	2300      	movs	r3, #0
 80067ee:	930a      	str	r3, [sp, #40]	; 0x28
 80067f0:	f8d8 3000 	ldr.w	r3, [r8]
 80067f4:	9005      	str	r0, [sp, #20]
 80067f6:	3307      	adds	r3, #7
 80067f8:	f023 0307 	bic.w	r3, r3, #7
 80067fc:	f103 0208 	add.w	r2, r3, #8
 8006800:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006804:	f8d4 b000 	ldr.w	fp, [r4]
 8006808:	f8c8 2000 	str.w	r2, [r8]
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006814:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006818:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800681c:	9307      	str	r3, [sp, #28]
 800681e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006822:	f04f 32ff 	mov.w	r2, #4294967295
 8006826:	4ba5      	ldr	r3, [pc, #660]	; (8006abc <_printf_float+0x2f0>)
 8006828:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800682c:	f7fa f9da 	bl	8000be4 <__aeabi_dcmpun>
 8006830:	2800      	cmp	r0, #0
 8006832:	f040 81fb 	bne.w	8006c2c <_printf_float+0x460>
 8006836:	f04f 32ff 	mov.w	r2, #4294967295
 800683a:	4ba0      	ldr	r3, [pc, #640]	; (8006abc <_printf_float+0x2f0>)
 800683c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006840:	f7fa f9b2 	bl	8000ba8 <__aeabi_dcmple>
 8006844:	2800      	cmp	r0, #0
 8006846:	f040 81f1 	bne.w	8006c2c <_printf_float+0x460>
 800684a:	2200      	movs	r2, #0
 800684c:	2300      	movs	r3, #0
 800684e:	4640      	mov	r0, r8
 8006850:	4649      	mov	r1, r9
 8006852:	f7fa f99f 	bl	8000b94 <__aeabi_dcmplt>
 8006856:	b110      	cbz	r0, 800685e <_printf_float+0x92>
 8006858:	232d      	movs	r3, #45	; 0x2d
 800685a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800685e:	4b98      	ldr	r3, [pc, #608]	; (8006ac0 <_printf_float+0x2f4>)
 8006860:	4a98      	ldr	r2, [pc, #608]	; (8006ac4 <_printf_float+0x2f8>)
 8006862:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006866:	bf8c      	ite	hi
 8006868:	4690      	movhi	r8, r2
 800686a:	4698      	movls	r8, r3
 800686c:	2303      	movs	r3, #3
 800686e:	f02b 0204 	bic.w	r2, fp, #4
 8006872:	6123      	str	r3, [r4, #16]
 8006874:	6022      	str	r2, [r4, #0]
 8006876:	f04f 0900 	mov.w	r9, #0
 800687a:	9700      	str	r7, [sp, #0]
 800687c:	4633      	mov	r3, r6
 800687e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	f000 f9e2 	bl	8006c4c <_printf_common>
 8006888:	3001      	adds	r0, #1
 800688a:	f040 8093 	bne.w	80069b4 <_printf_float+0x1e8>
 800688e:	f04f 30ff 	mov.w	r0, #4294967295
 8006892:	b00d      	add	sp, #52	; 0x34
 8006894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006898:	6861      	ldr	r1, [r4, #4]
 800689a:	1c4b      	adds	r3, r1, #1
 800689c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80068a0:	d13f      	bne.n	8006922 <_printf_float+0x156>
 80068a2:	2306      	movs	r3, #6
 80068a4:	6063      	str	r3, [r4, #4]
 80068a6:	2300      	movs	r3, #0
 80068a8:	9303      	str	r3, [sp, #12]
 80068aa:	ab0a      	add	r3, sp, #40	; 0x28
 80068ac:	9302      	str	r3, [sp, #8]
 80068ae:	ab09      	add	r3, sp, #36	; 0x24
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	ec49 8b10 	vmov	d0, r8, r9
 80068b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80068ba:	6022      	str	r2, [r4, #0]
 80068bc:	f8cd a004 	str.w	sl, [sp, #4]
 80068c0:	6861      	ldr	r1, [r4, #4]
 80068c2:	4628      	mov	r0, r5
 80068c4:	f7ff feec 	bl	80066a0 <__cvt>
 80068c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80068cc:	2b47      	cmp	r3, #71	; 0x47
 80068ce:	4680      	mov	r8, r0
 80068d0:	d109      	bne.n	80068e6 <_printf_float+0x11a>
 80068d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d4:	1cd8      	adds	r0, r3, #3
 80068d6:	db02      	blt.n	80068de <_printf_float+0x112>
 80068d8:	6862      	ldr	r2, [r4, #4]
 80068da:	4293      	cmp	r3, r2
 80068dc:	dd57      	ble.n	800698e <_printf_float+0x1c2>
 80068de:	f1aa 0a02 	sub.w	sl, sl, #2
 80068e2:	fa5f fa8a 	uxtb.w	sl, sl
 80068e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80068ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ec:	d834      	bhi.n	8006958 <_printf_float+0x18c>
 80068ee:	3901      	subs	r1, #1
 80068f0:	4652      	mov	r2, sl
 80068f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80068f6:	9109      	str	r1, [sp, #36]	; 0x24
 80068f8:	f7ff ff33 	bl	8006762 <__exponent>
 80068fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068fe:	1883      	adds	r3, r0, r2
 8006900:	2a01      	cmp	r2, #1
 8006902:	4681      	mov	r9, r0
 8006904:	6123      	str	r3, [r4, #16]
 8006906:	dc02      	bgt.n	800690e <_printf_float+0x142>
 8006908:	6822      	ldr	r2, [r4, #0]
 800690a:	07d1      	lsls	r1, r2, #31
 800690c:	d501      	bpl.n	8006912 <_printf_float+0x146>
 800690e:	3301      	adds	r3, #1
 8006910:	6123      	str	r3, [r4, #16]
 8006912:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0af      	beq.n	800687a <_printf_float+0xae>
 800691a:	232d      	movs	r3, #45	; 0x2d
 800691c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006920:	e7ab      	b.n	800687a <_printf_float+0xae>
 8006922:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006926:	d002      	beq.n	800692e <_printf_float+0x162>
 8006928:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800692c:	d1bb      	bne.n	80068a6 <_printf_float+0xda>
 800692e:	b189      	cbz	r1, 8006954 <_printf_float+0x188>
 8006930:	2300      	movs	r3, #0
 8006932:	9303      	str	r3, [sp, #12]
 8006934:	ab0a      	add	r3, sp, #40	; 0x28
 8006936:	9302      	str	r3, [sp, #8]
 8006938:	ab09      	add	r3, sp, #36	; 0x24
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	ec49 8b10 	vmov	d0, r8, r9
 8006940:	6022      	str	r2, [r4, #0]
 8006942:	f8cd a004 	str.w	sl, [sp, #4]
 8006946:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800694a:	4628      	mov	r0, r5
 800694c:	f7ff fea8 	bl	80066a0 <__cvt>
 8006950:	4680      	mov	r8, r0
 8006952:	e7be      	b.n	80068d2 <_printf_float+0x106>
 8006954:	2301      	movs	r3, #1
 8006956:	e7a5      	b.n	80068a4 <_printf_float+0xd8>
 8006958:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800695c:	d119      	bne.n	8006992 <_printf_float+0x1c6>
 800695e:	2900      	cmp	r1, #0
 8006960:	6863      	ldr	r3, [r4, #4]
 8006962:	dd0c      	ble.n	800697e <_printf_float+0x1b2>
 8006964:	6121      	str	r1, [r4, #16]
 8006966:	b913      	cbnz	r3, 800696e <_printf_float+0x1a2>
 8006968:	6822      	ldr	r2, [r4, #0]
 800696a:	07d2      	lsls	r2, r2, #31
 800696c:	d502      	bpl.n	8006974 <_printf_float+0x1a8>
 800696e:	3301      	adds	r3, #1
 8006970:	440b      	add	r3, r1
 8006972:	6123      	str	r3, [r4, #16]
 8006974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006976:	65a3      	str	r3, [r4, #88]	; 0x58
 8006978:	f04f 0900 	mov.w	r9, #0
 800697c:	e7c9      	b.n	8006912 <_printf_float+0x146>
 800697e:	b913      	cbnz	r3, 8006986 <_printf_float+0x1ba>
 8006980:	6822      	ldr	r2, [r4, #0]
 8006982:	07d0      	lsls	r0, r2, #31
 8006984:	d501      	bpl.n	800698a <_printf_float+0x1be>
 8006986:	3302      	adds	r3, #2
 8006988:	e7f3      	b.n	8006972 <_printf_float+0x1a6>
 800698a:	2301      	movs	r3, #1
 800698c:	e7f1      	b.n	8006972 <_printf_float+0x1a6>
 800698e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006996:	4293      	cmp	r3, r2
 8006998:	db05      	blt.n	80069a6 <_printf_float+0x1da>
 800699a:	6822      	ldr	r2, [r4, #0]
 800699c:	6123      	str	r3, [r4, #16]
 800699e:	07d1      	lsls	r1, r2, #31
 80069a0:	d5e8      	bpl.n	8006974 <_printf_float+0x1a8>
 80069a2:	3301      	adds	r3, #1
 80069a4:	e7e5      	b.n	8006972 <_printf_float+0x1a6>
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bfd4      	ite	le
 80069aa:	f1c3 0302 	rsble	r3, r3, #2
 80069ae:	2301      	movgt	r3, #1
 80069b0:	4413      	add	r3, r2
 80069b2:	e7de      	b.n	8006972 <_printf_float+0x1a6>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	055a      	lsls	r2, r3, #21
 80069b8:	d407      	bmi.n	80069ca <_printf_float+0x1fe>
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	4642      	mov	r2, r8
 80069be:	4631      	mov	r1, r6
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b8      	blx	r7
 80069c4:	3001      	adds	r0, #1
 80069c6:	d12b      	bne.n	8006a20 <_printf_float+0x254>
 80069c8:	e761      	b.n	800688e <_printf_float+0xc2>
 80069ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80069ce:	f240 80e2 	bls.w	8006b96 <_printf_float+0x3ca>
 80069d2:	2200      	movs	r2, #0
 80069d4:	2300      	movs	r3, #0
 80069d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069da:	f7fa f8d1 	bl	8000b80 <__aeabi_dcmpeq>
 80069de:	2800      	cmp	r0, #0
 80069e0:	d03c      	beq.n	8006a5c <_printf_float+0x290>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4a38      	ldr	r2, [pc, #224]	; (8006ac8 <_printf_float+0x2fc>)
 80069e6:	4631      	mov	r1, r6
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b8      	blx	r7
 80069ec:	3001      	adds	r0, #1
 80069ee:	f43f af4e 	beq.w	800688e <_printf_float+0xc2>
 80069f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069f6:	429a      	cmp	r2, r3
 80069f8:	db02      	blt.n	8006a00 <_printf_float+0x234>
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	07d8      	lsls	r0, r3, #31
 80069fe:	d50f      	bpl.n	8006a20 <_printf_float+0x254>
 8006a00:	9b05      	ldr	r3, [sp, #20]
 8006a02:	9a04      	ldr	r2, [sp, #16]
 8006a04:	4631      	mov	r1, r6
 8006a06:	4628      	mov	r0, r5
 8006a08:	47b8      	blx	r7
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	f43f af3f 	beq.w	800688e <_printf_float+0xc2>
 8006a10:	f04f 0800 	mov.w	r8, #0
 8006a14:	f104 091a 	add.w	r9, r4, #26
 8006a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	4598      	cmp	r8, r3
 8006a1e:	db12      	blt.n	8006a46 <_printf_float+0x27a>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	079b      	lsls	r3, r3, #30
 8006a24:	d509      	bpl.n	8006a3a <_printf_float+0x26e>
 8006a26:	f04f 0800 	mov.w	r8, #0
 8006a2a:	f104 0919 	add.w	r9, r4, #25
 8006a2e:	68e3      	ldr	r3, [r4, #12]
 8006a30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a32:	1a9b      	subs	r3, r3, r2
 8006a34:	4598      	cmp	r8, r3
 8006a36:	f2c0 80ee 	blt.w	8006c16 <_printf_float+0x44a>
 8006a3a:	68e0      	ldr	r0, [r4, #12]
 8006a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a3e:	4298      	cmp	r0, r3
 8006a40:	bfb8      	it	lt
 8006a42:	4618      	movlt	r0, r3
 8006a44:	e725      	b.n	8006892 <_printf_float+0xc6>
 8006a46:	2301      	movs	r3, #1
 8006a48:	464a      	mov	r2, r9
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	47b8      	blx	r7
 8006a50:	3001      	adds	r0, #1
 8006a52:	f43f af1c 	beq.w	800688e <_printf_float+0xc2>
 8006a56:	f108 0801 	add.w	r8, r8, #1
 8006a5a:	e7dd      	b.n	8006a18 <_printf_float+0x24c>
 8006a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	dc34      	bgt.n	8006acc <_printf_float+0x300>
 8006a62:	2301      	movs	r3, #1
 8006a64:	4a18      	ldr	r2, [pc, #96]	; (8006ac8 <_printf_float+0x2fc>)
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f43f af0e 	beq.w	800688e <_printf_float+0xc2>
 8006a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a74:	b923      	cbnz	r3, 8006a80 <_printf_float+0x2b4>
 8006a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a78:	b913      	cbnz	r3, 8006a80 <_printf_float+0x2b4>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	07d9      	lsls	r1, r3, #31
 8006a7e:	d5cf      	bpl.n	8006a20 <_printf_float+0x254>
 8006a80:	9b05      	ldr	r3, [sp, #20]
 8006a82:	9a04      	ldr	r2, [sp, #16]
 8006a84:	4631      	mov	r1, r6
 8006a86:	4628      	mov	r0, r5
 8006a88:	47b8      	blx	r7
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	f43f aeff 	beq.w	800688e <_printf_float+0xc2>
 8006a90:	f04f 0900 	mov.w	r9, #0
 8006a94:	f104 0a1a 	add.w	sl, r4, #26
 8006a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a9a:	425b      	negs	r3, r3
 8006a9c:	4599      	cmp	r9, r3
 8006a9e:	db01      	blt.n	8006aa4 <_printf_float+0x2d8>
 8006aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aa2:	e78b      	b.n	80069bc <_printf_float+0x1f0>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	4652      	mov	r2, sl
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	f43f aeed 	beq.w	800688e <_printf_float+0xc2>
 8006ab4:	f109 0901 	add.w	r9, r9, #1
 8006ab8:	e7ee      	b.n	8006a98 <_printf_float+0x2cc>
 8006aba:	bf00      	nop
 8006abc:	7fefffff 	.word	0x7fefffff
 8006ac0:	0801e2a8 	.word	0x0801e2a8
 8006ac4:	0801e2ac 	.word	0x0801e2ac
 8006ac8:	0801e56c 	.word	0x0801e56c
 8006acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ace:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	bfa8      	it	ge
 8006ad4:	461a      	movge	r2, r3
 8006ad6:	2a00      	cmp	r2, #0
 8006ad8:	4691      	mov	r9, r2
 8006ada:	dc38      	bgt.n	8006b4e <_printf_float+0x382>
 8006adc:	f104 031a 	add.w	r3, r4, #26
 8006ae0:	f04f 0b00 	mov.w	fp, #0
 8006ae4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ae8:	9306      	str	r3, [sp, #24]
 8006aea:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006aee:	ebaa 0309 	sub.w	r3, sl, r9
 8006af2:	459b      	cmp	fp, r3
 8006af4:	db33      	blt.n	8006b5e <_printf_float+0x392>
 8006af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006afa:	429a      	cmp	r2, r3
 8006afc:	db3a      	blt.n	8006b74 <_printf_float+0x3a8>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	07da      	lsls	r2, r3, #31
 8006b02:	d437      	bmi.n	8006b74 <_printf_float+0x3a8>
 8006b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b08:	eba3 020a 	sub.w	r2, r3, sl
 8006b0c:	eba3 0901 	sub.w	r9, r3, r1
 8006b10:	4591      	cmp	r9, r2
 8006b12:	bfa8      	it	ge
 8006b14:	4691      	movge	r9, r2
 8006b16:	f1b9 0f00 	cmp.w	r9, #0
 8006b1a:	dc33      	bgt.n	8006b84 <_printf_float+0x3b8>
 8006b1c:	f04f 0800 	mov.w	r8, #0
 8006b20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b24:	f104 0a1a 	add.w	sl, r4, #26
 8006b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b2c:	1a9b      	subs	r3, r3, r2
 8006b2e:	eba3 0309 	sub.w	r3, r3, r9
 8006b32:	4598      	cmp	r8, r3
 8006b34:	f6bf af74 	bge.w	8006a20 <_printf_float+0x254>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4652      	mov	r2, sl
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b8      	blx	r7
 8006b42:	3001      	adds	r0, #1
 8006b44:	f43f aea3 	beq.w	800688e <_printf_float+0xc2>
 8006b48:	f108 0801 	add.w	r8, r8, #1
 8006b4c:	e7ec      	b.n	8006b28 <_printf_float+0x35c>
 8006b4e:	4613      	mov	r3, r2
 8006b50:	4631      	mov	r1, r6
 8006b52:	4642      	mov	r2, r8
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d1bf      	bne.n	8006adc <_printf_float+0x310>
 8006b5c:	e697      	b.n	800688e <_printf_float+0xc2>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	9a06      	ldr	r2, [sp, #24]
 8006b62:	4631      	mov	r1, r6
 8006b64:	4628      	mov	r0, r5
 8006b66:	47b8      	blx	r7
 8006b68:	3001      	adds	r0, #1
 8006b6a:	f43f ae90 	beq.w	800688e <_printf_float+0xc2>
 8006b6e:	f10b 0b01 	add.w	fp, fp, #1
 8006b72:	e7ba      	b.n	8006aea <_printf_float+0x31e>
 8006b74:	9b05      	ldr	r3, [sp, #20]
 8006b76:	9a04      	ldr	r2, [sp, #16]
 8006b78:	4631      	mov	r1, r6
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	47b8      	blx	r7
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d1c0      	bne.n	8006b04 <_printf_float+0x338>
 8006b82:	e684      	b.n	800688e <_printf_float+0xc2>
 8006b84:	464b      	mov	r3, r9
 8006b86:	eb08 020a 	add.w	r2, r8, sl
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	47b8      	blx	r7
 8006b90:	3001      	adds	r0, #1
 8006b92:	d1c3      	bne.n	8006b1c <_printf_float+0x350>
 8006b94:	e67b      	b.n	800688e <_printf_float+0xc2>
 8006b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b98:	2a01      	cmp	r2, #1
 8006b9a:	dc01      	bgt.n	8006ba0 <_printf_float+0x3d4>
 8006b9c:	07db      	lsls	r3, r3, #31
 8006b9e:	d537      	bpl.n	8006c10 <_printf_float+0x444>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	4642      	mov	r2, r8
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	47b8      	blx	r7
 8006baa:	3001      	adds	r0, #1
 8006bac:	f43f ae6f 	beq.w	800688e <_printf_float+0xc2>
 8006bb0:	9b05      	ldr	r3, [sp, #20]
 8006bb2:	9a04      	ldr	r2, [sp, #16]
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	47b8      	blx	r7
 8006bba:	3001      	adds	r0, #1
 8006bbc:	f43f ae67 	beq.w	800688e <_printf_float+0xc2>
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bc8:	f7f9 ffda 	bl	8000b80 <__aeabi_dcmpeq>
 8006bcc:	b158      	cbz	r0, 8006be6 <_printf_float+0x41a>
 8006bce:	f04f 0800 	mov.w	r8, #0
 8006bd2:	f104 0a1a 	add.w	sl, r4, #26
 8006bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	4598      	cmp	r8, r3
 8006bdc:	db0d      	blt.n	8006bfa <_printf_float+0x42e>
 8006bde:	464b      	mov	r3, r9
 8006be0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006be4:	e6eb      	b.n	80069be <_printf_float+0x1f2>
 8006be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be8:	f108 0201 	add.w	r2, r8, #1
 8006bec:	3b01      	subs	r3, #1
 8006bee:	4631      	mov	r1, r6
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	47b8      	blx	r7
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d1f2      	bne.n	8006bde <_printf_float+0x412>
 8006bf8:	e649      	b.n	800688e <_printf_float+0xc2>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4628      	mov	r0, r5
 8006c02:	47b8      	blx	r7
 8006c04:	3001      	adds	r0, #1
 8006c06:	f43f ae42 	beq.w	800688e <_printf_float+0xc2>
 8006c0a:	f108 0801 	add.w	r8, r8, #1
 8006c0e:	e7e2      	b.n	8006bd6 <_printf_float+0x40a>
 8006c10:	2301      	movs	r3, #1
 8006c12:	4642      	mov	r2, r8
 8006c14:	e7eb      	b.n	8006bee <_printf_float+0x422>
 8006c16:	2301      	movs	r3, #1
 8006c18:	464a      	mov	r2, r9
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	47b8      	blx	r7
 8006c20:	3001      	adds	r0, #1
 8006c22:	f43f ae34 	beq.w	800688e <_printf_float+0xc2>
 8006c26:	f108 0801 	add.w	r8, r8, #1
 8006c2a:	e700      	b.n	8006a2e <_printf_float+0x262>
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	464b      	mov	r3, r9
 8006c30:	4640      	mov	r0, r8
 8006c32:	4649      	mov	r1, r9
 8006c34:	f7f9 ffd6 	bl	8000be4 <__aeabi_dcmpun>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	f43f ae2d 	beq.w	8006898 <_printf_float+0xcc>
 8006c3e:	4b01      	ldr	r3, [pc, #4]	; (8006c44 <_printf_float+0x478>)
 8006c40:	4a01      	ldr	r2, [pc, #4]	; (8006c48 <_printf_float+0x47c>)
 8006c42:	e60e      	b.n	8006862 <_printf_float+0x96>
 8006c44:	0801e2b0 	.word	0x0801e2b0
 8006c48:	0801e2b4 	.word	0x0801e2b4

08006c4c <_printf_common>:
 8006c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c50:	4691      	mov	r9, r2
 8006c52:	461f      	mov	r7, r3
 8006c54:	688a      	ldr	r2, [r1, #8]
 8006c56:	690b      	ldr	r3, [r1, #16]
 8006c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	bfb8      	it	lt
 8006c60:	4613      	movlt	r3, r2
 8006c62:	f8c9 3000 	str.w	r3, [r9]
 8006c66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	b112      	cbz	r2, 8006c76 <_printf_common+0x2a>
 8006c70:	3301      	adds	r3, #1
 8006c72:	f8c9 3000 	str.w	r3, [r9]
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	0699      	lsls	r1, r3, #26
 8006c7a:	bf42      	ittt	mi
 8006c7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c80:	3302      	addmi	r3, #2
 8006c82:	f8c9 3000 	strmi.w	r3, [r9]
 8006c86:	6825      	ldr	r5, [r4, #0]
 8006c88:	f015 0506 	ands.w	r5, r5, #6
 8006c8c:	d107      	bne.n	8006c9e <_printf_common+0x52>
 8006c8e:	f104 0a19 	add.w	sl, r4, #25
 8006c92:	68e3      	ldr	r3, [r4, #12]
 8006c94:	f8d9 2000 	ldr.w	r2, [r9]
 8006c98:	1a9b      	subs	r3, r3, r2
 8006c9a:	429d      	cmp	r5, r3
 8006c9c:	db29      	blt.n	8006cf2 <_printf_common+0xa6>
 8006c9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ca2:	6822      	ldr	r2, [r4, #0]
 8006ca4:	3300      	adds	r3, #0
 8006ca6:	bf18      	it	ne
 8006ca8:	2301      	movne	r3, #1
 8006caa:	0692      	lsls	r2, r2, #26
 8006cac:	d42e      	bmi.n	8006d0c <_printf_common+0xc0>
 8006cae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cb2:	4639      	mov	r1, r7
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	47c0      	blx	r8
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d021      	beq.n	8006d00 <_printf_common+0xb4>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	68e5      	ldr	r5, [r4, #12]
 8006cc0:	f8d9 2000 	ldr.w	r2, [r9]
 8006cc4:	f003 0306 	and.w	r3, r3, #6
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	bf08      	it	eq
 8006ccc:	1aad      	subeq	r5, r5, r2
 8006cce:	68a3      	ldr	r3, [r4, #8]
 8006cd0:	6922      	ldr	r2, [r4, #16]
 8006cd2:	bf0c      	ite	eq
 8006cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cd8:	2500      	movne	r5, #0
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	bfc4      	itt	gt
 8006cde:	1a9b      	subgt	r3, r3, r2
 8006ce0:	18ed      	addgt	r5, r5, r3
 8006ce2:	f04f 0900 	mov.w	r9, #0
 8006ce6:	341a      	adds	r4, #26
 8006ce8:	454d      	cmp	r5, r9
 8006cea:	d11b      	bne.n	8006d24 <_printf_common+0xd8>
 8006cec:	2000      	movs	r0, #0
 8006cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	4652      	mov	r2, sl
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	47c0      	blx	r8
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	d103      	bne.n	8006d08 <_printf_common+0xbc>
 8006d00:	f04f 30ff 	mov.w	r0, #4294967295
 8006d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d08:	3501      	adds	r5, #1
 8006d0a:	e7c2      	b.n	8006c92 <_printf_common+0x46>
 8006d0c:	18e1      	adds	r1, r4, r3
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	2030      	movs	r0, #48	; 0x30
 8006d12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d16:	4422      	add	r2, r4
 8006d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d20:	3302      	adds	r3, #2
 8006d22:	e7c4      	b.n	8006cae <_printf_common+0x62>
 8006d24:	2301      	movs	r3, #1
 8006d26:	4622      	mov	r2, r4
 8006d28:	4639      	mov	r1, r7
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	47c0      	blx	r8
 8006d2e:	3001      	adds	r0, #1
 8006d30:	d0e6      	beq.n	8006d00 <_printf_common+0xb4>
 8006d32:	f109 0901 	add.w	r9, r9, #1
 8006d36:	e7d7      	b.n	8006ce8 <_printf_common+0x9c>

08006d38 <_printf_i>:
 8006d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d3c:	4617      	mov	r7, r2
 8006d3e:	7e0a      	ldrb	r2, [r1, #24]
 8006d40:	b085      	sub	sp, #20
 8006d42:	2a6e      	cmp	r2, #110	; 0x6e
 8006d44:	4698      	mov	r8, r3
 8006d46:	4606      	mov	r6, r0
 8006d48:	460c      	mov	r4, r1
 8006d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d4c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006d50:	f000 80bc 	beq.w	8006ecc <_printf_i+0x194>
 8006d54:	d81a      	bhi.n	8006d8c <_printf_i+0x54>
 8006d56:	2a63      	cmp	r2, #99	; 0x63
 8006d58:	d02e      	beq.n	8006db8 <_printf_i+0x80>
 8006d5a:	d80a      	bhi.n	8006d72 <_printf_i+0x3a>
 8006d5c:	2a00      	cmp	r2, #0
 8006d5e:	f000 80c8 	beq.w	8006ef2 <_printf_i+0x1ba>
 8006d62:	2a58      	cmp	r2, #88	; 0x58
 8006d64:	f000 808a 	beq.w	8006e7c <_printf_i+0x144>
 8006d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d6c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006d70:	e02a      	b.n	8006dc8 <_printf_i+0x90>
 8006d72:	2a64      	cmp	r2, #100	; 0x64
 8006d74:	d001      	beq.n	8006d7a <_printf_i+0x42>
 8006d76:	2a69      	cmp	r2, #105	; 0x69
 8006d78:	d1f6      	bne.n	8006d68 <_printf_i+0x30>
 8006d7a:	6821      	ldr	r1, [r4, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006d82:	d023      	beq.n	8006dcc <_printf_i+0x94>
 8006d84:	1d11      	adds	r1, r2, #4
 8006d86:	6019      	str	r1, [r3, #0]
 8006d88:	6813      	ldr	r3, [r2, #0]
 8006d8a:	e027      	b.n	8006ddc <_printf_i+0xa4>
 8006d8c:	2a73      	cmp	r2, #115	; 0x73
 8006d8e:	f000 80b4 	beq.w	8006efa <_printf_i+0x1c2>
 8006d92:	d808      	bhi.n	8006da6 <_printf_i+0x6e>
 8006d94:	2a6f      	cmp	r2, #111	; 0x6f
 8006d96:	d02a      	beq.n	8006dee <_printf_i+0xb6>
 8006d98:	2a70      	cmp	r2, #112	; 0x70
 8006d9a:	d1e5      	bne.n	8006d68 <_printf_i+0x30>
 8006d9c:	680a      	ldr	r2, [r1, #0]
 8006d9e:	f042 0220 	orr.w	r2, r2, #32
 8006da2:	600a      	str	r2, [r1, #0]
 8006da4:	e003      	b.n	8006dae <_printf_i+0x76>
 8006da6:	2a75      	cmp	r2, #117	; 0x75
 8006da8:	d021      	beq.n	8006dee <_printf_i+0xb6>
 8006daa:	2a78      	cmp	r2, #120	; 0x78
 8006dac:	d1dc      	bne.n	8006d68 <_printf_i+0x30>
 8006dae:	2278      	movs	r2, #120	; 0x78
 8006db0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006db4:	496e      	ldr	r1, [pc, #440]	; (8006f70 <_printf_i+0x238>)
 8006db6:	e064      	b.n	8006e82 <_printf_i+0x14a>
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006dbe:	1d11      	adds	r1, r2, #4
 8006dc0:	6019      	str	r1, [r3, #0]
 8006dc2:	6813      	ldr	r3, [r2, #0]
 8006dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e0a3      	b.n	8006f14 <_printf_i+0x1dc>
 8006dcc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006dd0:	f102 0104 	add.w	r1, r2, #4
 8006dd4:	6019      	str	r1, [r3, #0]
 8006dd6:	d0d7      	beq.n	8006d88 <_printf_i+0x50>
 8006dd8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	da03      	bge.n	8006de8 <_printf_i+0xb0>
 8006de0:	222d      	movs	r2, #45	; 0x2d
 8006de2:	425b      	negs	r3, r3
 8006de4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006de8:	4962      	ldr	r1, [pc, #392]	; (8006f74 <_printf_i+0x23c>)
 8006dea:	220a      	movs	r2, #10
 8006dec:	e017      	b.n	8006e1e <_printf_i+0xe6>
 8006dee:	6820      	ldr	r0, [r4, #0]
 8006df0:	6819      	ldr	r1, [r3, #0]
 8006df2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006df6:	d003      	beq.n	8006e00 <_printf_i+0xc8>
 8006df8:	1d08      	adds	r0, r1, #4
 8006dfa:	6018      	str	r0, [r3, #0]
 8006dfc:	680b      	ldr	r3, [r1, #0]
 8006dfe:	e006      	b.n	8006e0e <_printf_i+0xd6>
 8006e00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e04:	f101 0004 	add.w	r0, r1, #4
 8006e08:	6018      	str	r0, [r3, #0]
 8006e0a:	d0f7      	beq.n	8006dfc <_printf_i+0xc4>
 8006e0c:	880b      	ldrh	r3, [r1, #0]
 8006e0e:	4959      	ldr	r1, [pc, #356]	; (8006f74 <_printf_i+0x23c>)
 8006e10:	2a6f      	cmp	r2, #111	; 0x6f
 8006e12:	bf14      	ite	ne
 8006e14:	220a      	movne	r2, #10
 8006e16:	2208      	moveq	r2, #8
 8006e18:	2000      	movs	r0, #0
 8006e1a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006e1e:	6865      	ldr	r5, [r4, #4]
 8006e20:	60a5      	str	r5, [r4, #8]
 8006e22:	2d00      	cmp	r5, #0
 8006e24:	f2c0 809c 	blt.w	8006f60 <_printf_i+0x228>
 8006e28:	6820      	ldr	r0, [r4, #0]
 8006e2a:	f020 0004 	bic.w	r0, r0, #4
 8006e2e:	6020      	str	r0, [r4, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d13f      	bne.n	8006eb4 <_printf_i+0x17c>
 8006e34:	2d00      	cmp	r5, #0
 8006e36:	f040 8095 	bne.w	8006f64 <_printf_i+0x22c>
 8006e3a:	4675      	mov	r5, lr
 8006e3c:	2a08      	cmp	r2, #8
 8006e3e:	d10b      	bne.n	8006e58 <_printf_i+0x120>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	07da      	lsls	r2, r3, #31
 8006e44:	d508      	bpl.n	8006e58 <_printf_i+0x120>
 8006e46:	6923      	ldr	r3, [r4, #16]
 8006e48:	6862      	ldr	r2, [r4, #4]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	bfde      	ittt	le
 8006e4e:	2330      	movle	r3, #48	; 0x30
 8006e50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e58:	ebae 0305 	sub.w	r3, lr, r5
 8006e5c:	6123      	str	r3, [r4, #16]
 8006e5e:	f8cd 8000 	str.w	r8, [sp]
 8006e62:	463b      	mov	r3, r7
 8006e64:	aa03      	add	r2, sp, #12
 8006e66:	4621      	mov	r1, r4
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7ff feef 	bl	8006c4c <_printf_common>
 8006e6e:	3001      	adds	r0, #1
 8006e70:	d155      	bne.n	8006f1e <_printf_i+0x1e6>
 8006e72:	f04f 30ff 	mov.w	r0, #4294967295
 8006e76:	b005      	add	sp, #20
 8006e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e7c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006e80:	493c      	ldr	r1, [pc, #240]	; (8006f74 <_printf_i+0x23c>)
 8006e82:	6822      	ldr	r2, [r4, #0]
 8006e84:	6818      	ldr	r0, [r3, #0]
 8006e86:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006e8a:	f100 0504 	add.w	r5, r0, #4
 8006e8e:	601d      	str	r5, [r3, #0]
 8006e90:	d001      	beq.n	8006e96 <_printf_i+0x15e>
 8006e92:	6803      	ldr	r3, [r0, #0]
 8006e94:	e002      	b.n	8006e9c <_printf_i+0x164>
 8006e96:	0655      	lsls	r5, r2, #25
 8006e98:	d5fb      	bpl.n	8006e92 <_printf_i+0x15a>
 8006e9a:	8803      	ldrh	r3, [r0, #0]
 8006e9c:	07d0      	lsls	r0, r2, #31
 8006e9e:	bf44      	itt	mi
 8006ea0:	f042 0220 	orrmi.w	r2, r2, #32
 8006ea4:	6022      	strmi	r2, [r4, #0]
 8006ea6:	b91b      	cbnz	r3, 8006eb0 <_printf_i+0x178>
 8006ea8:	6822      	ldr	r2, [r4, #0]
 8006eaa:	f022 0220 	bic.w	r2, r2, #32
 8006eae:	6022      	str	r2, [r4, #0]
 8006eb0:	2210      	movs	r2, #16
 8006eb2:	e7b1      	b.n	8006e18 <_printf_i+0xe0>
 8006eb4:	4675      	mov	r5, lr
 8006eb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006eba:	fb02 3310 	mls	r3, r2, r0, r3
 8006ebe:	5ccb      	ldrb	r3, [r1, r3]
 8006ec0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d1f5      	bne.n	8006eb6 <_printf_i+0x17e>
 8006eca:	e7b7      	b.n	8006e3c <_printf_i+0x104>
 8006ecc:	6808      	ldr	r0, [r1, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	6949      	ldr	r1, [r1, #20]
 8006ed2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006ed6:	d004      	beq.n	8006ee2 <_printf_i+0x1aa>
 8006ed8:	1d10      	adds	r0, r2, #4
 8006eda:	6018      	str	r0, [r3, #0]
 8006edc:	6813      	ldr	r3, [r2, #0]
 8006ede:	6019      	str	r1, [r3, #0]
 8006ee0:	e007      	b.n	8006ef2 <_printf_i+0x1ba>
 8006ee2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ee6:	f102 0004 	add.w	r0, r2, #4
 8006eea:	6018      	str	r0, [r3, #0]
 8006eec:	6813      	ldr	r3, [r2, #0]
 8006eee:	d0f6      	beq.n	8006ede <_printf_i+0x1a6>
 8006ef0:	8019      	strh	r1, [r3, #0]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	6123      	str	r3, [r4, #16]
 8006ef6:	4675      	mov	r5, lr
 8006ef8:	e7b1      	b.n	8006e5e <_printf_i+0x126>
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	1d11      	adds	r1, r2, #4
 8006efe:	6019      	str	r1, [r3, #0]
 8006f00:	6815      	ldr	r5, [r2, #0]
 8006f02:	6862      	ldr	r2, [r4, #4]
 8006f04:	2100      	movs	r1, #0
 8006f06:	4628      	mov	r0, r5
 8006f08:	f7f9 f9ca 	bl	80002a0 <memchr>
 8006f0c:	b108      	cbz	r0, 8006f12 <_printf_i+0x1da>
 8006f0e:	1b40      	subs	r0, r0, r5
 8006f10:	6060      	str	r0, [r4, #4]
 8006f12:	6863      	ldr	r3, [r4, #4]
 8006f14:	6123      	str	r3, [r4, #16]
 8006f16:	2300      	movs	r3, #0
 8006f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f1c:	e79f      	b.n	8006e5e <_printf_i+0x126>
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	462a      	mov	r2, r5
 8006f22:	4639      	mov	r1, r7
 8006f24:	4630      	mov	r0, r6
 8006f26:	47c0      	blx	r8
 8006f28:	3001      	adds	r0, #1
 8006f2a:	d0a2      	beq.n	8006e72 <_printf_i+0x13a>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	079b      	lsls	r3, r3, #30
 8006f30:	d507      	bpl.n	8006f42 <_printf_i+0x20a>
 8006f32:	2500      	movs	r5, #0
 8006f34:	f104 0919 	add.w	r9, r4, #25
 8006f38:	68e3      	ldr	r3, [r4, #12]
 8006f3a:	9a03      	ldr	r2, [sp, #12]
 8006f3c:	1a9b      	subs	r3, r3, r2
 8006f3e:	429d      	cmp	r5, r3
 8006f40:	db05      	blt.n	8006f4e <_printf_i+0x216>
 8006f42:	68e0      	ldr	r0, [r4, #12]
 8006f44:	9b03      	ldr	r3, [sp, #12]
 8006f46:	4298      	cmp	r0, r3
 8006f48:	bfb8      	it	lt
 8006f4a:	4618      	movlt	r0, r3
 8006f4c:	e793      	b.n	8006e76 <_printf_i+0x13e>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	464a      	mov	r2, r9
 8006f52:	4639      	mov	r1, r7
 8006f54:	4630      	mov	r0, r6
 8006f56:	47c0      	blx	r8
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d08a      	beq.n	8006e72 <_printf_i+0x13a>
 8006f5c:	3501      	adds	r5, #1
 8006f5e:	e7eb      	b.n	8006f38 <_printf_i+0x200>
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1a7      	bne.n	8006eb4 <_printf_i+0x17c>
 8006f64:	780b      	ldrb	r3, [r1, #0]
 8006f66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f6e:	e765      	b.n	8006e3c <_printf_i+0x104>
 8006f70:	0801e2c9 	.word	0x0801e2c9
 8006f74:	0801e2b8 	.word	0x0801e2b8

08006f78 <iprintf>:
 8006f78:	b40f      	push	{r0, r1, r2, r3}
 8006f7a:	4b0a      	ldr	r3, [pc, #40]	; (8006fa4 <iprintf+0x2c>)
 8006f7c:	b513      	push	{r0, r1, r4, lr}
 8006f7e:	681c      	ldr	r4, [r3, #0]
 8006f80:	b124      	cbz	r4, 8006f8c <iprintf+0x14>
 8006f82:	69a3      	ldr	r3, [r4, #24]
 8006f84:	b913      	cbnz	r3, 8006f8c <iprintf+0x14>
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 fed4 	bl	8007d34 <__sinit>
 8006f8c:	ab05      	add	r3, sp, #20
 8006f8e:	9a04      	ldr	r2, [sp, #16]
 8006f90:	68a1      	ldr	r1, [r4, #8]
 8006f92:	9301      	str	r3, [sp, #4]
 8006f94:	4620      	mov	r0, r4
 8006f96:	f001 fb2d 	bl	80085f4 <_vfiprintf_r>
 8006f9a:	b002      	add	sp, #8
 8006f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa0:	b004      	add	sp, #16
 8006fa2:	4770      	bx	lr
 8006fa4:	20000018 	.word	0x20000018

08006fa8 <frexpf>:
 8006fa8:	ee10 1a10 	vmov	r1, s0
 8006fac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006fb0:	b510      	push	{r4, lr}
 8006fb2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006fb6:	f04f 0400 	mov.w	r4, #0
 8006fba:	ee10 2a10 	vmov	r2, s0
 8006fbe:	6004      	str	r4, [r0, #0]
 8006fc0:	da17      	bge.n	8006ff2 <frexpf+0x4a>
 8006fc2:	b1b3      	cbz	r3, 8006ff2 <frexpf+0x4a>
 8006fc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fc8:	da0a      	bge.n	8006fe0 <frexpf+0x38>
 8006fca:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8006ff8 <frexpf+0x50>
 8006fce:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006fd2:	f06f 0118 	mvn.w	r1, #24
 8006fd6:	ee17 2a90 	vmov	r2, s15
 8006fda:	6001      	str	r1, [r0, #0]
 8006fdc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006fe0:	6801      	ldr	r1, [r0, #0]
 8006fe2:	15db      	asrs	r3, r3, #23
 8006fe4:	3b7e      	subs	r3, #126	; 0x7e
 8006fe6:	440b      	add	r3, r1
 8006fe8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006fec:	6003      	str	r3, [r0, #0]
 8006fee:	f042 517c 	orr.w	r1, r2, #1056964608	; 0x3f000000
 8006ff2:	ee00 1a10 	vmov	s0, r1
 8006ff6:	bd10      	pop	{r4, pc}
 8006ff8:	4c000000 	.word	0x4c000000

08006ffc <quorem>:
 8006ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007000:	6903      	ldr	r3, [r0, #16]
 8007002:	690c      	ldr	r4, [r1, #16]
 8007004:	429c      	cmp	r4, r3
 8007006:	4680      	mov	r8, r0
 8007008:	f300 8082 	bgt.w	8007110 <quorem+0x114>
 800700c:	3c01      	subs	r4, #1
 800700e:	f101 0714 	add.w	r7, r1, #20
 8007012:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007016:	f100 0614 	add.w	r6, r0, #20
 800701a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800701e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007022:	eb06 030e 	add.w	r3, r6, lr
 8007026:	3501      	adds	r5, #1
 8007028:	eb07 090e 	add.w	r9, r7, lr
 800702c:	9301      	str	r3, [sp, #4]
 800702e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007032:	b395      	cbz	r5, 800709a <quorem+0x9e>
 8007034:	f04f 0a00 	mov.w	sl, #0
 8007038:	4638      	mov	r0, r7
 800703a:	46b4      	mov	ip, r6
 800703c:	46d3      	mov	fp, sl
 800703e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007042:	b293      	uxth	r3, r2
 8007044:	fb05 a303 	mla	r3, r5, r3, sl
 8007048:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800704c:	b29b      	uxth	r3, r3
 800704e:	ebab 0303 	sub.w	r3, fp, r3
 8007052:	0c12      	lsrs	r2, r2, #16
 8007054:	f8bc b000 	ldrh.w	fp, [ip]
 8007058:	fb05 a202 	mla	r2, r5, r2, sl
 800705c:	fa13 f38b 	uxtah	r3, r3, fp
 8007060:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007064:	fa1f fb82 	uxth.w	fp, r2
 8007068:	f8dc 2000 	ldr.w	r2, [ip]
 800706c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007074:	b29b      	uxth	r3, r3
 8007076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800707a:	4581      	cmp	r9, r0
 800707c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007080:	f84c 3b04 	str.w	r3, [ip], #4
 8007084:	d2db      	bcs.n	800703e <quorem+0x42>
 8007086:	f856 300e 	ldr.w	r3, [r6, lr]
 800708a:	b933      	cbnz	r3, 800709a <quorem+0x9e>
 800708c:	9b01      	ldr	r3, [sp, #4]
 800708e:	3b04      	subs	r3, #4
 8007090:	429e      	cmp	r6, r3
 8007092:	461a      	mov	r2, r3
 8007094:	d330      	bcc.n	80070f8 <quorem+0xfc>
 8007096:	f8c8 4010 	str.w	r4, [r8, #16]
 800709a:	4640      	mov	r0, r8
 800709c:	f001 f8ff 	bl	800829e <__mcmp>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	db25      	blt.n	80070f0 <quorem+0xf4>
 80070a4:	3501      	adds	r5, #1
 80070a6:	4630      	mov	r0, r6
 80070a8:	f04f 0e00 	mov.w	lr, #0
 80070ac:	f857 2b04 	ldr.w	r2, [r7], #4
 80070b0:	f8d0 c000 	ldr.w	ip, [r0]
 80070b4:	b293      	uxth	r3, r2
 80070b6:	ebae 0303 	sub.w	r3, lr, r3
 80070ba:	0c12      	lsrs	r2, r2, #16
 80070bc:	fa13 f38c 	uxtah	r3, r3, ip
 80070c0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80070c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070ce:	45b9      	cmp	r9, r7
 80070d0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80070d4:	f840 3b04 	str.w	r3, [r0], #4
 80070d8:	d2e8      	bcs.n	80070ac <quorem+0xb0>
 80070da:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80070de:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80070e2:	b92a      	cbnz	r2, 80070f0 <quorem+0xf4>
 80070e4:	3b04      	subs	r3, #4
 80070e6:	429e      	cmp	r6, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	d30b      	bcc.n	8007104 <quorem+0x108>
 80070ec:	f8c8 4010 	str.w	r4, [r8, #16]
 80070f0:	4628      	mov	r0, r5
 80070f2:	b003      	add	sp, #12
 80070f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f8:	6812      	ldr	r2, [r2, #0]
 80070fa:	3b04      	subs	r3, #4
 80070fc:	2a00      	cmp	r2, #0
 80070fe:	d1ca      	bne.n	8007096 <quorem+0x9a>
 8007100:	3c01      	subs	r4, #1
 8007102:	e7c5      	b.n	8007090 <quorem+0x94>
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	3b04      	subs	r3, #4
 8007108:	2a00      	cmp	r2, #0
 800710a:	d1ef      	bne.n	80070ec <quorem+0xf0>
 800710c:	3c01      	subs	r4, #1
 800710e:	e7ea      	b.n	80070e6 <quorem+0xea>
 8007110:	2000      	movs	r0, #0
 8007112:	e7ee      	b.n	80070f2 <quorem+0xf6>
 8007114:	0000      	movs	r0, r0
	...

08007118 <_dtoa_r>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	ec57 6b10 	vmov	r6, r7, d0
 8007120:	b097      	sub	sp, #92	; 0x5c
 8007122:	e9cd 6700 	strd	r6, r7, [sp]
 8007126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007128:	9107      	str	r1, [sp, #28]
 800712a:	4604      	mov	r4, r0
 800712c:	920a      	str	r2, [sp, #40]	; 0x28
 800712e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007130:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007132:	b93e      	cbnz	r6, 8007144 <_dtoa_r+0x2c>
 8007134:	2010      	movs	r0, #16
 8007136:	f000 fe95 	bl	8007e64 <malloc>
 800713a:	6260      	str	r0, [r4, #36]	; 0x24
 800713c:	6046      	str	r6, [r0, #4]
 800713e:	6086      	str	r6, [r0, #8]
 8007140:	6006      	str	r6, [r0, #0]
 8007142:	60c6      	str	r6, [r0, #12]
 8007144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007146:	6819      	ldr	r1, [r3, #0]
 8007148:	b151      	cbz	r1, 8007160 <_dtoa_r+0x48>
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	604a      	str	r2, [r1, #4]
 800714e:	2301      	movs	r3, #1
 8007150:	4093      	lsls	r3, r2
 8007152:	608b      	str	r3, [r1, #8]
 8007154:	4620      	mov	r0, r4
 8007156:	f000 fecc 	bl	8007ef2 <_Bfree>
 800715a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	9b01      	ldr	r3, [sp, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	bfbf      	itttt	lt
 8007166:	2301      	movlt	r3, #1
 8007168:	602b      	strlt	r3, [r5, #0]
 800716a:	9b01      	ldrlt	r3, [sp, #4]
 800716c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007170:	bfb2      	itee	lt
 8007172:	9301      	strlt	r3, [sp, #4]
 8007174:	2300      	movge	r3, #0
 8007176:	602b      	strge	r3, [r5, #0]
 8007178:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800717c:	4ba8      	ldr	r3, [pc, #672]	; (8007420 <_dtoa_r+0x308>)
 800717e:	ea33 0308 	bics.w	r3, r3, r8
 8007182:	d11b      	bne.n	80071bc <_dtoa_r+0xa4>
 8007184:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007186:	f242 730f 	movw	r3, #9999	; 0x270f
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	9b00      	ldr	r3, [sp, #0]
 800718e:	b923      	cbnz	r3, 800719a <_dtoa_r+0x82>
 8007190:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007194:	2800      	cmp	r0, #0
 8007196:	f000 8578 	beq.w	8007c8a <_dtoa_r+0xb72>
 800719a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800719c:	b953      	cbnz	r3, 80071b4 <_dtoa_r+0x9c>
 800719e:	4ba1      	ldr	r3, [pc, #644]	; (8007424 <_dtoa_r+0x30c>)
 80071a0:	e021      	b.n	80071e6 <_dtoa_r+0xce>
 80071a2:	4ba1      	ldr	r3, [pc, #644]	; (8007428 <_dtoa_r+0x310>)
 80071a4:	9302      	str	r3, [sp, #8]
 80071a6:	3308      	adds	r3, #8
 80071a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	9802      	ldr	r0, [sp, #8]
 80071ae:	b017      	add	sp, #92	; 0x5c
 80071b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b4:	4b9b      	ldr	r3, [pc, #620]	; (8007424 <_dtoa_r+0x30c>)
 80071b6:	9302      	str	r3, [sp, #8]
 80071b8:	3303      	adds	r3, #3
 80071ba:	e7f5      	b.n	80071a8 <_dtoa_r+0x90>
 80071bc:	e9dd 6700 	ldrd	r6, r7, [sp]
 80071c0:	2200      	movs	r2, #0
 80071c2:	2300      	movs	r3, #0
 80071c4:	4630      	mov	r0, r6
 80071c6:	4639      	mov	r1, r7
 80071c8:	f7f9 fcda 	bl	8000b80 <__aeabi_dcmpeq>
 80071cc:	4681      	mov	r9, r0
 80071ce:	b160      	cbz	r0, 80071ea <_dtoa_r+0xd2>
 80071d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071d2:	2301      	movs	r3, #1
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 8553 	beq.w	8007c84 <_dtoa_r+0xb6c>
 80071de:	4b93      	ldr	r3, [pc, #588]	; (800742c <_dtoa_r+0x314>)
 80071e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	9302      	str	r3, [sp, #8]
 80071e8:	e7e0      	b.n	80071ac <_dtoa_r+0x94>
 80071ea:	aa14      	add	r2, sp, #80	; 0x50
 80071ec:	a915      	add	r1, sp, #84	; 0x54
 80071ee:	ec47 6b10 	vmov	d0, r6, r7
 80071f2:	4620      	mov	r0, r4
 80071f4:	f001 f8cb 	bl	800838e <__d2b>
 80071f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80071fc:	4682      	mov	sl, r0
 80071fe:	2d00      	cmp	r5, #0
 8007200:	d07e      	beq.n	8007300 <_dtoa_r+0x1e8>
 8007202:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007206:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800720a:	4630      	mov	r0, r6
 800720c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007210:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007214:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8007218:	2200      	movs	r2, #0
 800721a:	4b85      	ldr	r3, [pc, #532]	; (8007430 <_dtoa_r+0x318>)
 800721c:	f7f9 f894 	bl	8000348 <__aeabi_dsub>
 8007220:	a379      	add	r3, pc, #484	; (adr r3, 8007408 <_dtoa_r+0x2f0>)
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	f7f9 fa43 	bl	80006b0 <__aeabi_dmul>
 800722a:	a379      	add	r3, pc, #484	; (adr r3, 8007410 <_dtoa_r+0x2f8>)
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	f7f9 f88c 	bl	800034c <__adddf3>
 8007234:	4606      	mov	r6, r0
 8007236:	4628      	mov	r0, r5
 8007238:	460f      	mov	r7, r1
 800723a:	f7f9 f9d3 	bl	80005e4 <__aeabi_i2d>
 800723e:	a376      	add	r3, pc, #472	; (adr r3, 8007418 <_dtoa_r+0x300>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f7f9 fa34 	bl	80006b0 <__aeabi_dmul>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4630      	mov	r0, r6
 800724e:	4639      	mov	r1, r7
 8007250:	f7f9 f87c 	bl	800034c <__adddf3>
 8007254:	4606      	mov	r6, r0
 8007256:	460f      	mov	r7, r1
 8007258:	f7f9 fcda 	bl	8000c10 <__aeabi_d2iz>
 800725c:	2200      	movs	r2, #0
 800725e:	4683      	mov	fp, r0
 8007260:	2300      	movs	r3, #0
 8007262:	4630      	mov	r0, r6
 8007264:	4639      	mov	r1, r7
 8007266:	f7f9 fc95 	bl	8000b94 <__aeabi_dcmplt>
 800726a:	b158      	cbz	r0, 8007284 <_dtoa_r+0x16c>
 800726c:	4658      	mov	r0, fp
 800726e:	f7f9 f9b9 	bl	80005e4 <__aeabi_i2d>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4630      	mov	r0, r6
 8007278:	4639      	mov	r1, r7
 800727a:	f7f9 fc81 	bl	8000b80 <__aeabi_dcmpeq>
 800727e:	b908      	cbnz	r0, 8007284 <_dtoa_r+0x16c>
 8007280:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007284:	f1bb 0f16 	cmp.w	fp, #22
 8007288:	d859      	bhi.n	800733e <_dtoa_r+0x226>
 800728a:	496a      	ldr	r1, [pc, #424]	; (8007434 <_dtoa_r+0x31c>)
 800728c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007290:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007298:	f7f9 fc9a 	bl	8000bd0 <__aeabi_dcmpgt>
 800729c:	2800      	cmp	r0, #0
 800729e:	d050      	beq.n	8007342 <_dtoa_r+0x22a>
 80072a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072a4:	2300      	movs	r3, #0
 80072a6:	930e      	str	r3, [sp, #56]	; 0x38
 80072a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072aa:	1b5d      	subs	r5, r3, r5
 80072ac:	1e6b      	subs	r3, r5, #1
 80072ae:	9306      	str	r3, [sp, #24]
 80072b0:	bf45      	ittet	mi
 80072b2:	f1c5 0301 	rsbmi	r3, r5, #1
 80072b6:	9305      	strmi	r3, [sp, #20]
 80072b8:	2300      	movpl	r3, #0
 80072ba:	2300      	movmi	r3, #0
 80072bc:	bf4c      	ite	mi
 80072be:	9306      	strmi	r3, [sp, #24]
 80072c0:	9305      	strpl	r3, [sp, #20]
 80072c2:	f1bb 0f00 	cmp.w	fp, #0
 80072c6:	db3e      	blt.n	8007346 <_dtoa_r+0x22e>
 80072c8:	9b06      	ldr	r3, [sp, #24]
 80072ca:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80072ce:	445b      	add	r3, fp
 80072d0:	9306      	str	r3, [sp, #24]
 80072d2:	2300      	movs	r3, #0
 80072d4:	9308      	str	r3, [sp, #32]
 80072d6:	9b07      	ldr	r3, [sp, #28]
 80072d8:	2b09      	cmp	r3, #9
 80072da:	f200 80af 	bhi.w	800743c <_dtoa_r+0x324>
 80072de:	2b05      	cmp	r3, #5
 80072e0:	bfc4      	itt	gt
 80072e2:	3b04      	subgt	r3, #4
 80072e4:	9307      	strgt	r3, [sp, #28]
 80072e6:	9b07      	ldr	r3, [sp, #28]
 80072e8:	f1a3 0302 	sub.w	r3, r3, #2
 80072ec:	bfcc      	ite	gt
 80072ee:	2600      	movgt	r6, #0
 80072f0:	2601      	movle	r6, #1
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	f200 80ae 	bhi.w	8007454 <_dtoa_r+0x33c>
 80072f8:	e8df f003 	tbb	[pc, r3]
 80072fc:	772f8482 	.word	0x772f8482
 8007300:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007302:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007304:	441d      	add	r5, r3
 8007306:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800730a:	2b20      	cmp	r3, #32
 800730c:	dd11      	ble.n	8007332 <_dtoa_r+0x21a>
 800730e:	9a00      	ldr	r2, [sp, #0]
 8007310:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007314:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007318:	fa22 f000 	lsr.w	r0, r2, r0
 800731c:	fa08 f303 	lsl.w	r3, r8, r3
 8007320:	4318      	orrs	r0, r3
 8007322:	f7f9 f94f 	bl	80005c4 <__aeabi_ui2d>
 8007326:	2301      	movs	r3, #1
 8007328:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800732c:	3d01      	subs	r5, #1
 800732e:	9312      	str	r3, [sp, #72]	; 0x48
 8007330:	e772      	b.n	8007218 <_dtoa_r+0x100>
 8007332:	f1c3 0020 	rsb	r0, r3, #32
 8007336:	9b00      	ldr	r3, [sp, #0]
 8007338:	fa03 f000 	lsl.w	r0, r3, r0
 800733c:	e7f1      	b.n	8007322 <_dtoa_r+0x20a>
 800733e:	2301      	movs	r3, #1
 8007340:	e7b1      	b.n	80072a6 <_dtoa_r+0x18e>
 8007342:	900e      	str	r0, [sp, #56]	; 0x38
 8007344:	e7b0      	b.n	80072a8 <_dtoa_r+0x190>
 8007346:	9b05      	ldr	r3, [sp, #20]
 8007348:	eba3 030b 	sub.w	r3, r3, fp
 800734c:	9305      	str	r3, [sp, #20]
 800734e:	f1cb 0300 	rsb	r3, fp, #0
 8007352:	9308      	str	r3, [sp, #32]
 8007354:	2300      	movs	r3, #0
 8007356:	930b      	str	r3, [sp, #44]	; 0x2c
 8007358:	e7bd      	b.n	80072d6 <_dtoa_r+0x1be>
 800735a:	2301      	movs	r3, #1
 800735c:	9309      	str	r3, [sp, #36]	; 0x24
 800735e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007360:	2b00      	cmp	r3, #0
 8007362:	dd7a      	ble.n	800745a <_dtoa_r+0x342>
 8007364:	9304      	str	r3, [sp, #16]
 8007366:	9303      	str	r3, [sp, #12]
 8007368:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800736a:	2200      	movs	r2, #0
 800736c:	606a      	str	r2, [r5, #4]
 800736e:	2104      	movs	r1, #4
 8007370:	f101 0214 	add.w	r2, r1, #20
 8007374:	429a      	cmp	r2, r3
 8007376:	d975      	bls.n	8007464 <_dtoa_r+0x34c>
 8007378:	6869      	ldr	r1, [r5, #4]
 800737a:	4620      	mov	r0, r4
 800737c:	f000 fd85 	bl	8007e8a <_Balloc>
 8007380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007382:	6028      	str	r0, [r5, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	9302      	str	r3, [sp, #8]
 8007388:	9b03      	ldr	r3, [sp, #12]
 800738a:	2b0e      	cmp	r3, #14
 800738c:	f200 80e5 	bhi.w	800755a <_dtoa_r+0x442>
 8007390:	2e00      	cmp	r6, #0
 8007392:	f000 80e2 	beq.w	800755a <_dtoa_r+0x442>
 8007396:	ed9d 7b00 	vldr	d7, [sp]
 800739a:	f1bb 0f00 	cmp.w	fp, #0
 800739e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80073a2:	dd74      	ble.n	800748e <_dtoa_r+0x376>
 80073a4:	4a23      	ldr	r2, [pc, #140]	; (8007434 <_dtoa_r+0x31c>)
 80073a6:	f00b 030f 	and.w	r3, fp, #15
 80073aa:	ea4f 162b 	mov.w	r6, fp, asr #4
 80073ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80073b2:	06f0      	lsls	r0, r6, #27
 80073b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073b8:	d559      	bpl.n	800746e <_dtoa_r+0x356>
 80073ba:	4b1f      	ldr	r3, [pc, #124]	; (8007438 <_dtoa_r+0x320>)
 80073bc:	ec51 0b17 	vmov	r0, r1, d7
 80073c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073c4:	f7f9 fa9e 	bl	8000904 <__aeabi_ddiv>
 80073c8:	e9cd 0100 	strd	r0, r1, [sp]
 80073cc:	f006 060f 	and.w	r6, r6, #15
 80073d0:	2503      	movs	r5, #3
 80073d2:	4f19      	ldr	r7, [pc, #100]	; (8007438 <_dtoa_r+0x320>)
 80073d4:	2e00      	cmp	r6, #0
 80073d6:	d14c      	bne.n	8007472 <_dtoa_r+0x35a>
 80073d8:	4642      	mov	r2, r8
 80073da:	464b      	mov	r3, r9
 80073dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073e0:	f7f9 fa90 	bl	8000904 <__aeabi_ddiv>
 80073e4:	e9cd 0100 	strd	r0, r1, [sp]
 80073e8:	e06a      	b.n	80074c0 <_dtoa_r+0x3a8>
 80073ea:	2301      	movs	r3, #1
 80073ec:	9309      	str	r3, [sp, #36]	; 0x24
 80073ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f0:	445b      	add	r3, fp
 80073f2:	9304      	str	r3, [sp, #16]
 80073f4:	3301      	adds	r3, #1
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	9303      	str	r3, [sp, #12]
 80073fa:	bfb8      	it	lt
 80073fc:	2301      	movlt	r3, #1
 80073fe:	e7b3      	b.n	8007368 <_dtoa_r+0x250>
 8007400:	2300      	movs	r3, #0
 8007402:	e7ab      	b.n	800735c <_dtoa_r+0x244>
 8007404:	2300      	movs	r3, #0
 8007406:	e7f1      	b.n	80073ec <_dtoa_r+0x2d4>
 8007408:	636f4361 	.word	0x636f4361
 800740c:	3fd287a7 	.word	0x3fd287a7
 8007410:	8b60c8b3 	.word	0x8b60c8b3
 8007414:	3fc68a28 	.word	0x3fc68a28
 8007418:	509f79fb 	.word	0x509f79fb
 800741c:	3fd34413 	.word	0x3fd34413
 8007420:	7ff00000 	.word	0x7ff00000
 8007424:	0801e2e3 	.word	0x0801e2e3
 8007428:	0801e2da 	.word	0x0801e2da
 800742c:	0801e56d 	.word	0x0801e56d
 8007430:	3ff80000 	.word	0x3ff80000
 8007434:	0801e378 	.word	0x0801e378
 8007438:	0801e350 	.word	0x0801e350
 800743c:	2601      	movs	r6, #1
 800743e:	2300      	movs	r3, #0
 8007440:	9307      	str	r3, [sp, #28]
 8007442:	9609      	str	r6, [sp, #36]	; 0x24
 8007444:	f04f 33ff 	mov.w	r3, #4294967295
 8007448:	9304      	str	r3, [sp, #16]
 800744a:	9303      	str	r3, [sp, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	2312      	movs	r3, #18
 8007450:	920a      	str	r2, [sp, #40]	; 0x28
 8007452:	e789      	b.n	8007368 <_dtoa_r+0x250>
 8007454:	2301      	movs	r3, #1
 8007456:	9309      	str	r3, [sp, #36]	; 0x24
 8007458:	e7f4      	b.n	8007444 <_dtoa_r+0x32c>
 800745a:	2301      	movs	r3, #1
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	9303      	str	r3, [sp, #12]
 8007460:	461a      	mov	r2, r3
 8007462:	e7f5      	b.n	8007450 <_dtoa_r+0x338>
 8007464:	686a      	ldr	r2, [r5, #4]
 8007466:	3201      	adds	r2, #1
 8007468:	606a      	str	r2, [r5, #4]
 800746a:	0049      	lsls	r1, r1, #1
 800746c:	e780      	b.n	8007370 <_dtoa_r+0x258>
 800746e:	2502      	movs	r5, #2
 8007470:	e7af      	b.n	80073d2 <_dtoa_r+0x2ba>
 8007472:	07f1      	lsls	r1, r6, #31
 8007474:	d508      	bpl.n	8007488 <_dtoa_r+0x370>
 8007476:	4640      	mov	r0, r8
 8007478:	4649      	mov	r1, r9
 800747a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800747e:	f7f9 f917 	bl	80006b0 <__aeabi_dmul>
 8007482:	3501      	adds	r5, #1
 8007484:	4680      	mov	r8, r0
 8007486:	4689      	mov	r9, r1
 8007488:	1076      	asrs	r6, r6, #1
 800748a:	3708      	adds	r7, #8
 800748c:	e7a2      	b.n	80073d4 <_dtoa_r+0x2bc>
 800748e:	f000 809d 	beq.w	80075cc <_dtoa_r+0x4b4>
 8007492:	f1cb 0600 	rsb	r6, fp, #0
 8007496:	4b9f      	ldr	r3, [pc, #636]	; (8007714 <_dtoa_r+0x5fc>)
 8007498:	4f9f      	ldr	r7, [pc, #636]	; (8007718 <_dtoa_r+0x600>)
 800749a:	f006 020f 	and.w	r2, r6, #15
 800749e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074aa:	f7f9 f901 	bl	80006b0 <__aeabi_dmul>
 80074ae:	e9cd 0100 	strd	r0, r1, [sp]
 80074b2:	1136      	asrs	r6, r6, #4
 80074b4:	2300      	movs	r3, #0
 80074b6:	2502      	movs	r5, #2
 80074b8:	2e00      	cmp	r6, #0
 80074ba:	d17c      	bne.n	80075b6 <_dtoa_r+0x49e>
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d191      	bne.n	80073e4 <_dtoa_r+0x2cc>
 80074c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 8084 	beq.w	80075d0 <_dtoa_r+0x4b8>
 80074c8:	e9dd 8900 	ldrd	r8, r9, [sp]
 80074cc:	2200      	movs	r2, #0
 80074ce:	4b93      	ldr	r3, [pc, #588]	; (800771c <_dtoa_r+0x604>)
 80074d0:	4640      	mov	r0, r8
 80074d2:	4649      	mov	r1, r9
 80074d4:	f7f9 fb5e 	bl	8000b94 <__aeabi_dcmplt>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d079      	beq.n	80075d0 <_dtoa_r+0x4b8>
 80074dc:	9b03      	ldr	r3, [sp, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d076      	beq.n	80075d0 <_dtoa_r+0x4b8>
 80074e2:	9b04      	ldr	r3, [sp, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	dd34      	ble.n	8007552 <_dtoa_r+0x43a>
 80074e8:	2200      	movs	r2, #0
 80074ea:	4b8d      	ldr	r3, [pc, #564]	; (8007720 <_dtoa_r+0x608>)
 80074ec:	4640      	mov	r0, r8
 80074ee:	4649      	mov	r1, r9
 80074f0:	f7f9 f8de 	bl	80006b0 <__aeabi_dmul>
 80074f4:	e9cd 0100 	strd	r0, r1, [sp]
 80074f8:	9e04      	ldr	r6, [sp, #16]
 80074fa:	f10b 37ff 	add.w	r7, fp, #4294967295
 80074fe:	3501      	adds	r5, #1
 8007500:	4628      	mov	r0, r5
 8007502:	f7f9 f86f 	bl	80005e4 <__aeabi_i2d>
 8007506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800750a:	f7f9 f8d1 	bl	80006b0 <__aeabi_dmul>
 800750e:	2200      	movs	r2, #0
 8007510:	4b84      	ldr	r3, [pc, #528]	; (8007724 <_dtoa_r+0x60c>)
 8007512:	f7f8 ff1b 	bl	800034c <__adddf3>
 8007516:	4680      	mov	r8, r0
 8007518:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800751c:	2e00      	cmp	r6, #0
 800751e:	d15a      	bne.n	80075d6 <_dtoa_r+0x4be>
 8007520:	2200      	movs	r2, #0
 8007522:	4b81      	ldr	r3, [pc, #516]	; (8007728 <_dtoa_r+0x610>)
 8007524:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007528:	f7f8 ff0e 	bl	8000348 <__aeabi_dsub>
 800752c:	4642      	mov	r2, r8
 800752e:	464b      	mov	r3, r9
 8007530:	e9cd 0100 	strd	r0, r1, [sp]
 8007534:	f7f9 fb4c 	bl	8000bd0 <__aeabi_dcmpgt>
 8007538:	2800      	cmp	r0, #0
 800753a:	f040 829b 	bne.w	8007a74 <_dtoa_r+0x95c>
 800753e:	4642      	mov	r2, r8
 8007540:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007544:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007548:	f7f9 fb24 	bl	8000b94 <__aeabi_dcmplt>
 800754c:	2800      	cmp	r0, #0
 800754e:	f040 828f 	bne.w	8007a70 <_dtoa_r+0x958>
 8007552:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007556:	e9cd 2300 	strd	r2, r3, [sp]
 800755a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800755c:	2b00      	cmp	r3, #0
 800755e:	f2c0 8150 	blt.w	8007802 <_dtoa_r+0x6ea>
 8007562:	f1bb 0f0e 	cmp.w	fp, #14
 8007566:	f300 814c 	bgt.w	8007802 <_dtoa_r+0x6ea>
 800756a:	4b6a      	ldr	r3, [pc, #424]	; (8007714 <_dtoa_r+0x5fc>)
 800756c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007570:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007576:	2b00      	cmp	r3, #0
 8007578:	f280 80da 	bge.w	8007730 <_dtoa_r+0x618>
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	f300 80d6 	bgt.w	8007730 <_dtoa_r+0x618>
 8007584:	f040 8273 	bne.w	8007a6e <_dtoa_r+0x956>
 8007588:	2200      	movs	r2, #0
 800758a:	4b67      	ldr	r3, [pc, #412]	; (8007728 <_dtoa_r+0x610>)
 800758c:	4640      	mov	r0, r8
 800758e:	4649      	mov	r1, r9
 8007590:	f7f9 f88e 	bl	80006b0 <__aeabi_dmul>
 8007594:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007598:	f7f9 fb10 	bl	8000bbc <__aeabi_dcmpge>
 800759c:	9e03      	ldr	r6, [sp, #12]
 800759e:	4637      	mov	r7, r6
 80075a0:	2800      	cmp	r0, #0
 80075a2:	f040 824a 	bne.w	8007a3a <_dtoa_r+0x922>
 80075a6:	9b02      	ldr	r3, [sp, #8]
 80075a8:	9a02      	ldr	r2, [sp, #8]
 80075aa:	1c5d      	adds	r5, r3, #1
 80075ac:	2331      	movs	r3, #49	; 0x31
 80075ae:	7013      	strb	r3, [r2, #0]
 80075b0:	f10b 0b01 	add.w	fp, fp, #1
 80075b4:	e245      	b.n	8007a42 <_dtoa_r+0x92a>
 80075b6:	07f2      	lsls	r2, r6, #31
 80075b8:	d505      	bpl.n	80075c6 <_dtoa_r+0x4ae>
 80075ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075be:	f7f9 f877 	bl	80006b0 <__aeabi_dmul>
 80075c2:	3501      	adds	r5, #1
 80075c4:	2301      	movs	r3, #1
 80075c6:	1076      	asrs	r6, r6, #1
 80075c8:	3708      	adds	r7, #8
 80075ca:	e775      	b.n	80074b8 <_dtoa_r+0x3a0>
 80075cc:	2502      	movs	r5, #2
 80075ce:	e777      	b.n	80074c0 <_dtoa_r+0x3a8>
 80075d0:	465f      	mov	r7, fp
 80075d2:	9e03      	ldr	r6, [sp, #12]
 80075d4:	e794      	b.n	8007500 <_dtoa_r+0x3e8>
 80075d6:	9a02      	ldr	r2, [sp, #8]
 80075d8:	4b4e      	ldr	r3, [pc, #312]	; (8007714 <_dtoa_r+0x5fc>)
 80075da:	4432      	add	r2, r6
 80075dc:	9213      	str	r2, [sp, #76]	; 0x4c
 80075de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075e0:	1e71      	subs	r1, r6, #1
 80075e2:	2a00      	cmp	r2, #0
 80075e4:	d048      	beq.n	8007678 <_dtoa_r+0x560>
 80075e6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	2000      	movs	r0, #0
 80075f0:	494e      	ldr	r1, [pc, #312]	; (800772c <_dtoa_r+0x614>)
 80075f2:	f7f9 f987 	bl	8000904 <__aeabi_ddiv>
 80075f6:	4642      	mov	r2, r8
 80075f8:	464b      	mov	r3, r9
 80075fa:	f7f8 fea5 	bl	8000348 <__aeabi_dsub>
 80075fe:	9d02      	ldr	r5, [sp, #8]
 8007600:	4680      	mov	r8, r0
 8007602:	4689      	mov	r9, r1
 8007604:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007608:	f7f9 fb02 	bl	8000c10 <__aeabi_d2iz>
 800760c:	4606      	mov	r6, r0
 800760e:	f7f8 ffe9 	bl	80005e4 <__aeabi_i2d>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	e9dd 0100 	ldrd	r0, r1, [sp]
 800761a:	f7f8 fe95 	bl	8000348 <__aeabi_dsub>
 800761e:	3630      	adds	r6, #48	; 0x30
 8007620:	f805 6b01 	strb.w	r6, [r5], #1
 8007624:	4642      	mov	r2, r8
 8007626:	464b      	mov	r3, r9
 8007628:	e9cd 0100 	strd	r0, r1, [sp]
 800762c:	f7f9 fab2 	bl	8000b94 <__aeabi_dcmplt>
 8007630:	2800      	cmp	r0, #0
 8007632:	d165      	bne.n	8007700 <_dtoa_r+0x5e8>
 8007634:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007638:	2000      	movs	r0, #0
 800763a:	4938      	ldr	r1, [pc, #224]	; (800771c <_dtoa_r+0x604>)
 800763c:	f7f8 fe84 	bl	8000348 <__aeabi_dsub>
 8007640:	4642      	mov	r2, r8
 8007642:	464b      	mov	r3, r9
 8007644:	f7f9 faa6 	bl	8000b94 <__aeabi_dcmplt>
 8007648:	2800      	cmp	r0, #0
 800764a:	f040 80ba 	bne.w	80077c2 <_dtoa_r+0x6aa>
 800764e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007650:	429d      	cmp	r5, r3
 8007652:	f43f af7e 	beq.w	8007552 <_dtoa_r+0x43a>
 8007656:	2200      	movs	r2, #0
 8007658:	4b31      	ldr	r3, [pc, #196]	; (8007720 <_dtoa_r+0x608>)
 800765a:	4640      	mov	r0, r8
 800765c:	4649      	mov	r1, r9
 800765e:	f7f9 f827 	bl	80006b0 <__aeabi_dmul>
 8007662:	2200      	movs	r2, #0
 8007664:	4680      	mov	r8, r0
 8007666:	4689      	mov	r9, r1
 8007668:	4b2d      	ldr	r3, [pc, #180]	; (8007720 <_dtoa_r+0x608>)
 800766a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800766e:	f7f9 f81f 	bl	80006b0 <__aeabi_dmul>
 8007672:	e9cd 0100 	strd	r0, r1, [sp]
 8007676:	e7c5      	b.n	8007604 <_dtoa_r+0x4ec>
 8007678:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800767c:	4642      	mov	r2, r8
 800767e:	464b      	mov	r3, r9
 8007680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007684:	f7f9 f814 	bl	80006b0 <__aeabi_dmul>
 8007688:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800768c:	9d02      	ldr	r5, [sp, #8]
 800768e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007692:	f7f9 fabd 	bl	8000c10 <__aeabi_d2iz>
 8007696:	4606      	mov	r6, r0
 8007698:	f7f8 ffa4 	bl	80005e4 <__aeabi_i2d>
 800769c:	3630      	adds	r6, #48	; 0x30
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076a6:	f7f8 fe4f 	bl	8000348 <__aeabi_dsub>
 80076aa:	f805 6b01 	strb.w	r6, [r5], #1
 80076ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076b0:	42ab      	cmp	r3, r5
 80076b2:	4680      	mov	r8, r0
 80076b4:	4689      	mov	r9, r1
 80076b6:	f04f 0200 	mov.w	r2, #0
 80076ba:	d125      	bne.n	8007708 <_dtoa_r+0x5f0>
 80076bc:	4b1b      	ldr	r3, [pc, #108]	; (800772c <_dtoa_r+0x614>)
 80076be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076c2:	f7f8 fe43 	bl	800034c <__adddf3>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4640      	mov	r0, r8
 80076cc:	4649      	mov	r1, r9
 80076ce:	f7f9 fa7f 	bl	8000bd0 <__aeabi_dcmpgt>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d175      	bne.n	80077c2 <_dtoa_r+0x6aa>
 80076d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076da:	2000      	movs	r0, #0
 80076dc:	4913      	ldr	r1, [pc, #76]	; (800772c <_dtoa_r+0x614>)
 80076de:	f7f8 fe33 	bl	8000348 <__aeabi_dsub>
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4640      	mov	r0, r8
 80076e8:	4649      	mov	r1, r9
 80076ea:	f7f9 fa53 	bl	8000b94 <__aeabi_dcmplt>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	f43f af2f 	beq.w	8007552 <_dtoa_r+0x43a>
 80076f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076f8:	2b30      	cmp	r3, #48	; 0x30
 80076fa:	f105 32ff 	add.w	r2, r5, #4294967295
 80076fe:	d001      	beq.n	8007704 <_dtoa_r+0x5ec>
 8007700:	46bb      	mov	fp, r7
 8007702:	e04d      	b.n	80077a0 <_dtoa_r+0x688>
 8007704:	4615      	mov	r5, r2
 8007706:	e7f5      	b.n	80076f4 <_dtoa_r+0x5dc>
 8007708:	4b05      	ldr	r3, [pc, #20]	; (8007720 <_dtoa_r+0x608>)
 800770a:	f7f8 ffd1 	bl	80006b0 <__aeabi_dmul>
 800770e:	e9cd 0100 	strd	r0, r1, [sp]
 8007712:	e7bc      	b.n	800768e <_dtoa_r+0x576>
 8007714:	0801e378 	.word	0x0801e378
 8007718:	0801e350 	.word	0x0801e350
 800771c:	3ff00000 	.word	0x3ff00000
 8007720:	40240000 	.word	0x40240000
 8007724:	401c0000 	.word	0x401c0000
 8007728:	40140000 	.word	0x40140000
 800772c:	3fe00000 	.word	0x3fe00000
 8007730:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007734:	9d02      	ldr	r5, [sp, #8]
 8007736:	4642      	mov	r2, r8
 8007738:	464b      	mov	r3, r9
 800773a:	4630      	mov	r0, r6
 800773c:	4639      	mov	r1, r7
 800773e:	f7f9 f8e1 	bl	8000904 <__aeabi_ddiv>
 8007742:	f7f9 fa65 	bl	8000c10 <__aeabi_d2iz>
 8007746:	9000      	str	r0, [sp, #0]
 8007748:	f7f8 ff4c 	bl	80005e4 <__aeabi_i2d>
 800774c:	4642      	mov	r2, r8
 800774e:	464b      	mov	r3, r9
 8007750:	f7f8 ffae 	bl	80006b0 <__aeabi_dmul>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4630      	mov	r0, r6
 800775a:	4639      	mov	r1, r7
 800775c:	f7f8 fdf4 	bl	8000348 <__aeabi_dsub>
 8007760:	9e00      	ldr	r6, [sp, #0]
 8007762:	9f03      	ldr	r7, [sp, #12]
 8007764:	3630      	adds	r6, #48	; 0x30
 8007766:	f805 6b01 	strb.w	r6, [r5], #1
 800776a:	9e02      	ldr	r6, [sp, #8]
 800776c:	1bae      	subs	r6, r5, r6
 800776e:	42b7      	cmp	r7, r6
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	d138      	bne.n	80077e8 <_dtoa_r+0x6d0>
 8007776:	f7f8 fde9 	bl	800034c <__adddf3>
 800777a:	4606      	mov	r6, r0
 800777c:	460f      	mov	r7, r1
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4640      	mov	r0, r8
 8007784:	4649      	mov	r1, r9
 8007786:	f7f9 fa05 	bl	8000b94 <__aeabi_dcmplt>
 800778a:	b9c8      	cbnz	r0, 80077c0 <_dtoa_r+0x6a8>
 800778c:	4632      	mov	r2, r6
 800778e:	463b      	mov	r3, r7
 8007790:	4640      	mov	r0, r8
 8007792:	4649      	mov	r1, r9
 8007794:	f7f9 f9f4 	bl	8000b80 <__aeabi_dcmpeq>
 8007798:	b110      	cbz	r0, 80077a0 <_dtoa_r+0x688>
 800779a:	9b00      	ldr	r3, [sp, #0]
 800779c:	07db      	lsls	r3, r3, #31
 800779e:	d40f      	bmi.n	80077c0 <_dtoa_r+0x6a8>
 80077a0:	4651      	mov	r1, sl
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 fba5 	bl	8007ef2 <_Bfree>
 80077a8:	2300      	movs	r3, #0
 80077aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077ac:	702b      	strb	r3, [r5, #0]
 80077ae:	f10b 0301 	add.w	r3, fp, #1
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f43f acf8 	beq.w	80071ac <_dtoa_r+0x94>
 80077bc:	601d      	str	r5, [r3, #0]
 80077be:	e4f5      	b.n	80071ac <_dtoa_r+0x94>
 80077c0:	465f      	mov	r7, fp
 80077c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077c6:	2a39      	cmp	r2, #57	; 0x39
 80077c8:	f105 33ff 	add.w	r3, r5, #4294967295
 80077cc:	d106      	bne.n	80077dc <_dtoa_r+0x6c4>
 80077ce:	9a02      	ldr	r2, [sp, #8]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d107      	bne.n	80077e4 <_dtoa_r+0x6cc>
 80077d4:	2330      	movs	r3, #48	; 0x30
 80077d6:	7013      	strb	r3, [r2, #0]
 80077d8:	3701      	adds	r7, #1
 80077da:	4613      	mov	r3, r2
 80077dc:	781a      	ldrb	r2, [r3, #0]
 80077de:	3201      	adds	r2, #1
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	e78d      	b.n	8007700 <_dtoa_r+0x5e8>
 80077e4:	461d      	mov	r5, r3
 80077e6:	e7ec      	b.n	80077c2 <_dtoa_r+0x6aa>
 80077e8:	2200      	movs	r2, #0
 80077ea:	4ba4      	ldr	r3, [pc, #656]	; (8007a7c <_dtoa_r+0x964>)
 80077ec:	f7f8 ff60 	bl	80006b0 <__aeabi_dmul>
 80077f0:	2200      	movs	r2, #0
 80077f2:	2300      	movs	r3, #0
 80077f4:	4606      	mov	r6, r0
 80077f6:	460f      	mov	r7, r1
 80077f8:	f7f9 f9c2 	bl	8000b80 <__aeabi_dcmpeq>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d09a      	beq.n	8007736 <_dtoa_r+0x61e>
 8007800:	e7ce      	b.n	80077a0 <_dtoa_r+0x688>
 8007802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007804:	2a00      	cmp	r2, #0
 8007806:	f000 80cd 	beq.w	80079a4 <_dtoa_r+0x88c>
 800780a:	9a07      	ldr	r2, [sp, #28]
 800780c:	2a01      	cmp	r2, #1
 800780e:	f300 80af 	bgt.w	8007970 <_dtoa_r+0x858>
 8007812:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007814:	2a00      	cmp	r2, #0
 8007816:	f000 80a7 	beq.w	8007968 <_dtoa_r+0x850>
 800781a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800781e:	9e08      	ldr	r6, [sp, #32]
 8007820:	9d05      	ldr	r5, [sp, #20]
 8007822:	9a05      	ldr	r2, [sp, #20]
 8007824:	441a      	add	r2, r3
 8007826:	9205      	str	r2, [sp, #20]
 8007828:	9a06      	ldr	r2, [sp, #24]
 800782a:	2101      	movs	r1, #1
 800782c:	441a      	add	r2, r3
 800782e:	4620      	mov	r0, r4
 8007830:	9206      	str	r2, [sp, #24]
 8007832:	f000 fbfe 	bl	8008032 <__i2b>
 8007836:	4607      	mov	r7, r0
 8007838:	2d00      	cmp	r5, #0
 800783a:	dd0c      	ble.n	8007856 <_dtoa_r+0x73e>
 800783c:	9b06      	ldr	r3, [sp, #24]
 800783e:	2b00      	cmp	r3, #0
 8007840:	dd09      	ble.n	8007856 <_dtoa_r+0x73e>
 8007842:	42ab      	cmp	r3, r5
 8007844:	9a05      	ldr	r2, [sp, #20]
 8007846:	bfa8      	it	ge
 8007848:	462b      	movge	r3, r5
 800784a:	1ad2      	subs	r2, r2, r3
 800784c:	9205      	str	r2, [sp, #20]
 800784e:	9a06      	ldr	r2, [sp, #24]
 8007850:	1aed      	subs	r5, r5, r3
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	9306      	str	r3, [sp, #24]
 8007856:	9b08      	ldr	r3, [sp, #32]
 8007858:	b1f3      	cbz	r3, 8007898 <_dtoa_r+0x780>
 800785a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 80a5 	beq.w	80079ac <_dtoa_r+0x894>
 8007862:	2e00      	cmp	r6, #0
 8007864:	dd10      	ble.n	8007888 <_dtoa_r+0x770>
 8007866:	4639      	mov	r1, r7
 8007868:	4632      	mov	r2, r6
 800786a:	4620      	mov	r0, r4
 800786c:	f000 fc78 	bl	8008160 <__pow5mult>
 8007870:	4652      	mov	r2, sl
 8007872:	4601      	mov	r1, r0
 8007874:	4607      	mov	r7, r0
 8007876:	4620      	mov	r0, r4
 8007878:	f000 fbe4 	bl	8008044 <__multiply>
 800787c:	4651      	mov	r1, sl
 800787e:	4680      	mov	r8, r0
 8007880:	4620      	mov	r0, r4
 8007882:	f000 fb36 	bl	8007ef2 <_Bfree>
 8007886:	46c2      	mov	sl, r8
 8007888:	9b08      	ldr	r3, [sp, #32]
 800788a:	1b9a      	subs	r2, r3, r6
 800788c:	d004      	beq.n	8007898 <_dtoa_r+0x780>
 800788e:	4651      	mov	r1, sl
 8007890:	4620      	mov	r0, r4
 8007892:	f000 fc65 	bl	8008160 <__pow5mult>
 8007896:	4682      	mov	sl, r0
 8007898:	2101      	movs	r1, #1
 800789a:	4620      	mov	r0, r4
 800789c:	f000 fbc9 	bl	8008032 <__i2b>
 80078a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	4606      	mov	r6, r0
 80078a6:	f340 8083 	ble.w	80079b0 <_dtoa_r+0x898>
 80078aa:	461a      	mov	r2, r3
 80078ac:	4601      	mov	r1, r0
 80078ae:	4620      	mov	r0, r4
 80078b0:	f000 fc56 	bl	8008160 <__pow5mult>
 80078b4:	9b07      	ldr	r3, [sp, #28]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	4606      	mov	r6, r0
 80078ba:	dd7c      	ble.n	80079b6 <_dtoa_r+0x89e>
 80078bc:	f04f 0800 	mov.w	r8, #0
 80078c0:	6933      	ldr	r3, [r6, #16]
 80078c2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078c6:	6918      	ldr	r0, [r3, #16]
 80078c8:	f000 fb65 	bl	8007f96 <__hi0bits>
 80078cc:	f1c0 0020 	rsb	r0, r0, #32
 80078d0:	9b06      	ldr	r3, [sp, #24]
 80078d2:	4418      	add	r0, r3
 80078d4:	f010 001f 	ands.w	r0, r0, #31
 80078d8:	f000 8096 	beq.w	8007a08 <_dtoa_r+0x8f0>
 80078dc:	f1c0 0320 	rsb	r3, r0, #32
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	f340 8087 	ble.w	80079f4 <_dtoa_r+0x8dc>
 80078e6:	9b05      	ldr	r3, [sp, #20]
 80078e8:	f1c0 001c 	rsb	r0, r0, #28
 80078ec:	4403      	add	r3, r0
 80078ee:	9305      	str	r3, [sp, #20]
 80078f0:	9b06      	ldr	r3, [sp, #24]
 80078f2:	4405      	add	r5, r0
 80078f4:	4403      	add	r3, r0
 80078f6:	9306      	str	r3, [sp, #24]
 80078f8:	9b05      	ldr	r3, [sp, #20]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	dd05      	ble.n	800790a <_dtoa_r+0x7f2>
 80078fe:	4651      	mov	r1, sl
 8007900:	461a      	mov	r2, r3
 8007902:	4620      	mov	r0, r4
 8007904:	f000 fc7a 	bl	80081fc <__lshift>
 8007908:	4682      	mov	sl, r0
 800790a:	9b06      	ldr	r3, [sp, #24]
 800790c:	2b00      	cmp	r3, #0
 800790e:	dd05      	ble.n	800791c <_dtoa_r+0x804>
 8007910:	4631      	mov	r1, r6
 8007912:	461a      	mov	r2, r3
 8007914:	4620      	mov	r0, r4
 8007916:	f000 fc71 	bl	80081fc <__lshift>
 800791a:	4606      	mov	r6, r0
 800791c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800791e:	2b00      	cmp	r3, #0
 8007920:	d074      	beq.n	8007a0c <_dtoa_r+0x8f4>
 8007922:	4631      	mov	r1, r6
 8007924:	4650      	mov	r0, sl
 8007926:	f000 fcba 	bl	800829e <__mcmp>
 800792a:	2800      	cmp	r0, #0
 800792c:	da6e      	bge.n	8007a0c <_dtoa_r+0x8f4>
 800792e:	2300      	movs	r3, #0
 8007930:	4651      	mov	r1, sl
 8007932:	220a      	movs	r2, #10
 8007934:	4620      	mov	r0, r4
 8007936:	f000 faf3 	bl	8007f20 <__multadd>
 800793a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007940:	4682      	mov	sl, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 81a8 	beq.w	8007c98 <_dtoa_r+0xb80>
 8007948:	2300      	movs	r3, #0
 800794a:	4639      	mov	r1, r7
 800794c:	220a      	movs	r2, #10
 800794e:	4620      	mov	r0, r4
 8007950:	f000 fae6 	bl	8007f20 <__multadd>
 8007954:	9b04      	ldr	r3, [sp, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	4607      	mov	r7, r0
 800795a:	f300 80c8 	bgt.w	8007aee <_dtoa_r+0x9d6>
 800795e:	9b07      	ldr	r3, [sp, #28]
 8007960:	2b02      	cmp	r3, #2
 8007962:	f340 80c4 	ble.w	8007aee <_dtoa_r+0x9d6>
 8007966:	e059      	b.n	8007a1c <_dtoa_r+0x904>
 8007968:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800796a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800796e:	e756      	b.n	800781e <_dtoa_r+0x706>
 8007970:	9b03      	ldr	r3, [sp, #12]
 8007972:	1e5e      	subs	r6, r3, #1
 8007974:	9b08      	ldr	r3, [sp, #32]
 8007976:	42b3      	cmp	r3, r6
 8007978:	bfbf      	itttt	lt
 800797a:	9b08      	ldrlt	r3, [sp, #32]
 800797c:	9608      	strlt	r6, [sp, #32]
 800797e:	1af2      	sublt	r2, r6, r3
 8007980:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8007982:	bfb6      	itet	lt
 8007984:	189b      	addlt	r3, r3, r2
 8007986:	1b9e      	subge	r6, r3, r6
 8007988:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800798a:	9b03      	ldr	r3, [sp, #12]
 800798c:	bfb8      	it	lt
 800798e:	2600      	movlt	r6, #0
 8007990:	2b00      	cmp	r3, #0
 8007992:	bfb9      	ittee	lt
 8007994:	9b05      	ldrlt	r3, [sp, #20]
 8007996:	9a03      	ldrlt	r2, [sp, #12]
 8007998:	9d05      	ldrge	r5, [sp, #20]
 800799a:	9b03      	ldrge	r3, [sp, #12]
 800799c:	bfbc      	itt	lt
 800799e:	1a9d      	sublt	r5, r3, r2
 80079a0:	2300      	movlt	r3, #0
 80079a2:	e73e      	b.n	8007822 <_dtoa_r+0x70a>
 80079a4:	9e08      	ldr	r6, [sp, #32]
 80079a6:	9d05      	ldr	r5, [sp, #20]
 80079a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80079aa:	e745      	b.n	8007838 <_dtoa_r+0x720>
 80079ac:	9a08      	ldr	r2, [sp, #32]
 80079ae:	e76e      	b.n	800788e <_dtoa_r+0x776>
 80079b0:	9b07      	ldr	r3, [sp, #28]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	dc19      	bgt.n	80079ea <_dtoa_r+0x8d2>
 80079b6:	9b00      	ldr	r3, [sp, #0]
 80079b8:	b9bb      	cbnz	r3, 80079ea <_dtoa_r+0x8d2>
 80079ba:	9b01      	ldr	r3, [sp, #4]
 80079bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079c0:	b99b      	cbnz	r3, 80079ea <_dtoa_r+0x8d2>
 80079c2:	9b01      	ldr	r3, [sp, #4]
 80079c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079c8:	0d1b      	lsrs	r3, r3, #20
 80079ca:	051b      	lsls	r3, r3, #20
 80079cc:	b183      	cbz	r3, 80079f0 <_dtoa_r+0x8d8>
 80079ce:	9b05      	ldr	r3, [sp, #20]
 80079d0:	3301      	adds	r3, #1
 80079d2:	9305      	str	r3, [sp, #20]
 80079d4:	9b06      	ldr	r3, [sp, #24]
 80079d6:	3301      	adds	r3, #1
 80079d8:	9306      	str	r3, [sp, #24]
 80079da:	f04f 0801 	mov.w	r8, #1
 80079de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f47f af6d 	bne.w	80078c0 <_dtoa_r+0x7a8>
 80079e6:	2001      	movs	r0, #1
 80079e8:	e772      	b.n	80078d0 <_dtoa_r+0x7b8>
 80079ea:	f04f 0800 	mov.w	r8, #0
 80079ee:	e7f6      	b.n	80079de <_dtoa_r+0x8c6>
 80079f0:	4698      	mov	r8, r3
 80079f2:	e7f4      	b.n	80079de <_dtoa_r+0x8c6>
 80079f4:	d080      	beq.n	80078f8 <_dtoa_r+0x7e0>
 80079f6:	9a05      	ldr	r2, [sp, #20]
 80079f8:	331c      	adds	r3, #28
 80079fa:	441a      	add	r2, r3
 80079fc:	9205      	str	r2, [sp, #20]
 80079fe:	9a06      	ldr	r2, [sp, #24]
 8007a00:	441a      	add	r2, r3
 8007a02:	441d      	add	r5, r3
 8007a04:	4613      	mov	r3, r2
 8007a06:	e776      	b.n	80078f6 <_dtoa_r+0x7de>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	e7f4      	b.n	80079f6 <_dtoa_r+0x8de>
 8007a0c:	9b03      	ldr	r3, [sp, #12]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	dc36      	bgt.n	8007a80 <_dtoa_r+0x968>
 8007a12:	9b07      	ldr	r3, [sp, #28]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	dd33      	ble.n	8007a80 <_dtoa_r+0x968>
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	9304      	str	r3, [sp, #16]
 8007a1c:	9b04      	ldr	r3, [sp, #16]
 8007a1e:	b963      	cbnz	r3, 8007a3a <_dtoa_r+0x922>
 8007a20:	4631      	mov	r1, r6
 8007a22:	2205      	movs	r2, #5
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fa7b 	bl	8007f20 <__multadd>
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	4650      	mov	r0, sl
 8007a30:	f000 fc35 	bl	800829e <__mcmp>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	f73f adb6 	bgt.w	80075a6 <_dtoa_r+0x48e>
 8007a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a3c:	9d02      	ldr	r5, [sp, #8]
 8007a3e:	ea6f 0b03 	mvn.w	fp, r3
 8007a42:	2300      	movs	r3, #0
 8007a44:	9303      	str	r3, [sp, #12]
 8007a46:	4631      	mov	r1, r6
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 fa52 	bl	8007ef2 <_Bfree>
 8007a4e:	2f00      	cmp	r7, #0
 8007a50:	f43f aea6 	beq.w	80077a0 <_dtoa_r+0x688>
 8007a54:	9b03      	ldr	r3, [sp, #12]
 8007a56:	b12b      	cbz	r3, 8007a64 <_dtoa_r+0x94c>
 8007a58:	42bb      	cmp	r3, r7
 8007a5a:	d003      	beq.n	8007a64 <_dtoa_r+0x94c>
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f000 fa47 	bl	8007ef2 <_Bfree>
 8007a64:	4639      	mov	r1, r7
 8007a66:	4620      	mov	r0, r4
 8007a68:	f000 fa43 	bl	8007ef2 <_Bfree>
 8007a6c:	e698      	b.n	80077a0 <_dtoa_r+0x688>
 8007a6e:	2600      	movs	r6, #0
 8007a70:	4637      	mov	r7, r6
 8007a72:	e7e2      	b.n	8007a3a <_dtoa_r+0x922>
 8007a74:	46bb      	mov	fp, r7
 8007a76:	4637      	mov	r7, r6
 8007a78:	e595      	b.n	80075a6 <_dtoa_r+0x48e>
 8007a7a:	bf00      	nop
 8007a7c:	40240000 	.word	0x40240000
 8007a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a82:	bb93      	cbnz	r3, 8007aea <_dtoa_r+0x9d2>
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	9304      	str	r3, [sp, #16]
 8007a88:	9d02      	ldr	r5, [sp, #8]
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	4650      	mov	r0, sl
 8007a8e:	f7ff fab5 	bl	8006ffc <quorem>
 8007a92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007a96:	f805 9b01 	strb.w	r9, [r5], #1
 8007a9a:	9b02      	ldr	r3, [sp, #8]
 8007a9c:	9a04      	ldr	r2, [sp, #16]
 8007a9e:	1aeb      	subs	r3, r5, r3
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	f300 80dc 	bgt.w	8007c5e <_dtoa_r+0xb46>
 8007aa6:	9b02      	ldr	r3, [sp, #8]
 8007aa8:	2a01      	cmp	r2, #1
 8007aaa:	bfac      	ite	ge
 8007aac:	189b      	addge	r3, r3, r2
 8007aae:	3301      	addlt	r3, #1
 8007ab0:	4698      	mov	r8, r3
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9303      	str	r3, [sp, #12]
 8007ab6:	4651      	mov	r1, sl
 8007ab8:	2201      	movs	r2, #1
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 fb9e 	bl	80081fc <__lshift>
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4682      	mov	sl, r0
 8007ac4:	f000 fbeb 	bl	800829e <__mcmp>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	f300 808d 	bgt.w	8007be8 <_dtoa_r+0xad0>
 8007ace:	d103      	bne.n	8007ad8 <_dtoa_r+0x9c0>
 8007ad0:	f019 0f01 	tst.w	r9, #1
 8007ad4:	f040 8088 	bne.w	8007be8 <_dtoa_r+0xad0>
 8007ad8:	4645      	mov	r5, r8
 8007ada:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ade:	2b30      	cmp	r3, #48	; 0x30
 8007ae0:	f105 32ff 	add.w	r2, r5, #4294967295
 8007ae4:	d1af      	bne.n	8007a46 <_dtoa_r+0x92e>
 8007ae6:	4615      	mov	r5, r2
 8007ae8:	e7f7      	b.n	8007ada <_dtoa_r+0x9c2>
 8007aea:	9b03      	ldr	r3, [sp, #12]
 8007aec:	9304      	str	r3, [sp, #16]
 8007aee:	2d00      	cmp	r5, #0
 8007af0:	dd05      	ble.n	8007afe <_dtoa_r+0x9e6>
 8007af2:	4639      	mov	r1, r7
 8007af4:	462a      	mov	r2, r5
 8007af6:	4620      	mov	r0, r4
 8007af8:	f000 fb80 	bl	80081fc <__lshift>
 8007afc:	4607      	mov	r7, r0
 8007afe:	f1b8 0f00 	cmp.w	r8, #0
 8007b02:	d04c      	beq.n	8007b9e <_dtoa_r+0xa86>
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 f9bf 	bl	8007e8a <_Balloc>
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	3202      	adds	r2, #2
 8007b10:	4605      	mov	r5, r0
 8007b12:	0092      	lsls	r2, r2, #2
 8007b14:	f107 010c 	add.w	r1, r7, #12
 8007b18:	300c      	adds	r0, #12
 8007b1a:	f000 f9ab 	bl	8007e74 <memcpy>
 8007b1e:	2201      	movs	r2, #1
 8007b20:	4629      	mov	r1, r5
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 fb6a 	bl	80081fc <__lshift>
 8007b28:	9b00      	ldr	r3, [sp, #0]
 8007b2a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007b2e:	9703      	str	r7, [sp, #12]
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	4607      	mov	r7, r0
 8007b36:	9305      	str	r3, [sp, #20]
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	f7ff fa5e 	bl	8006ffc <quorem>
 8007b40:	9903      	ldr	r1, [sp, #12]
 8007b42:	4605      	mov	r5, r0
 8007b44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b48:	4650      	mov	r0, sl
 8007b4a:	f000 fba8 	bl	800829e <__mcmp>
 8007b4e:	463a      	mov	r2, r7
 8007b50:	9000      	str	r0, [sp, #0]
 8007b52:	4631      	mov	r1, r6
 8007b54:	4620      	mov	r0, r4
 8007b56:	f000 fbbc 	bl	80082d2 <__mdiff>
 8007b5a:	68c3      	ldr	r3, [r0, #12]
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	bb03      	cbnz	r3, 8007ba2 <_dtoa_r+0xa8a>
 8007b60:	4601      	mov	r1, r0
 8007b62:	9006      	str	r0, [sp, #24]
 8007b64:	4650      	mov	r0, sl
 8007b66:	f000 fb9a 	bl	800829e <__mcmp>
 8007b6a:	9a06      	ldr	r2, [sp, #24]
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	4611      	mov	r1, r2
 8007b70:	4620      	mov	r0, r4
 8007b72:	9306      	str	r3, [sp, #24]
 8007b74:	f000 f9bd 	bl	8007ef2 <_Bfree>
 8007b78:	9b06      	ldr	r3, [sp, #24]
 8007b7a:	b9a3      	cbnz	r3, 8007ba6 <_dtoa_r+0xa8e>
 8007b7c:	9a07      	ldr	r2, [sp, #28]
 8007b7e:	b992      	cbnz	r2, 8007ba6 <_dtoa_r+0xa8e>
 8007b80:	9a05      	ldr	r2, [sp, #20]
 8007b82:	b982      	cbnz	r2, 8007ba6 <_dtoa_r+0xa8e>
 8007b84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b88:	d029      	beq.n	8007bde <_dtoa_r+0xac6>
 8007b8a:	9b00      	ldr	r3, [sp, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dd01      	ble.n	8007b94 <_dtoa_r+0xa7c>
 8007b90:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8007b94:	f108 0501 	add.w	r5, r8, #1
 8007b98:	f888 9000 	strb.w	r9, [r8]
 8007b9c:	e753      	b.n	8007a46 <_dtoa_r+0x92e>
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	e7c2      	b.n	8007b28 <_dtoa_r+0xa10>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e7e3      	b.n	8007b6e <_dtoa_r+0xa56>
 8007ba6:	9a00      	ldr	r2, [sp, #0]
 8007ba8:	2a00      	cmp	r2, #0
 8007baa:	db04      	blt.n	8007bb6 <_dtoa_r+0xa9e>
 8007bac:	d125      	bne.n	8007bfa <_dtoa_r+0xae2>
 8007bae:	9a07      	ldr	r2, [sp, #28]
 8007bb0:	bb1a      	cbnz	r2, 8007bfa <_dtoa_r+0xae2>
 8007bb2:	9a05      	ldr	r2, [sp, #20]
 8007bb4:	bb0a      	cbnz	r2, 8007bfa <_dtoa_r+0xae2>
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	ddec      	ble.n	8007b94 <_dtoa_r+0xa7c>
 8007bba:	4651      	mov	r1, sl
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f000 fb1c 	bl	80081fc <__lshift>
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4682      	mov	sl, r0
 8007bc8:	f000 fb69 	bl	800829e <__mcmp>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	dc03      	bgt.n	8007bd8 <_dtoa_r+0xac0>
 8007bd0:	d1e0      	bne.n	8007b94 <_dtoa_r+0xa7c>
 8007bd2:	f019 0f01 	tst.w	r9, #1
 8007bd6:	d0dd      	beq.n	8007b94 <_dtoa_r+0xa7c>
 8007bd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bdc:	d1d8      	bne.n	8007b90 <_dtoa_r+0xa78>
 8007bde:	2339      	movs	r3, #57	; 0x39
 8007be0:	f888 3000 	strb.w	r3, [r8]
 8007be4:	f108 0801 	add.w	r8, r8, #1
 8007be8:	4645      	mov	r5, r8
 8007bea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bee:	2b39      	cmp	r3, #57	; 0x39
 8007bf0:	f105 32ff 	add.w	r2, r5, #4294967295
 8007bf4:	d03b      	beq.n	8007c6e <_dtoa_r+0xb56>
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	e040      	b.n	8007c7c <_dtoa_r+0xb64>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f108 0501 	add.w	r5, r8, #1
 8007c00:	dd05      	ble.n	8007c0e <_dtoa_r+0xaf6>
 8007c02:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c06:	d0ea      	beq.n	8007bde <_dtoa_r+0xac6>
 8007c08:	f109 0901 	add.w	r9, r9, #1
 8007c0c:	e7c4      	b.n	8007b98 <_dtoa_r+0xa80>
 8007c0e:	9b02      	ldr	r3, [sp, #8]
 8007c10:	9a04      	ldr	r2, [sp, #16]
 8007c12:	f805 9c01 	strb.w	r9, [r5, #-1]
 8007c16:	1aeb      	subs	r3, r5, r3
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	46a8      	mov	r8, r5
 8007c1c:	f43f af4b 	beq.w	8007ab6 <_dtoa_r+0x99e>
 8007c20:	4651      	mov	r1, sl
 8007c22:	2300      	movs	r3, #0
 8007c24:	220a      	movs	r2, #10
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 f97a 	bl	8007f20 <__multadd>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	9903      	ldr	r1, [sp, #12]
 8007c30:	42bb      	cmp	r3, r7
 8007c32:	4682      	mov	sl, r0
 8007c34:	f04f 0300 	mov.w	r3, #0
 8007c38:	f04f 020a 	mov.w	r2, #10
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	d104      	bne.n	8007c4a <_dtoa_r+0xb32>
 8007c40:	f000 f96e 	bl	8007f20 <__multadd>
 8007c44:	9003      	str	r0, [sp, #12]
 8007c46:	4607      	mov	r7, r0
 8007c48:	e776      	b.n	8007b38 <_dtoa_r+0xa20>
 8007c4a:	f000 f969 	bl	8007f20 <__multadd>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	9003      	str	r0, [sp, #12]
 8007c52:	220a      	movs	r2, #10
 8007c54:	4639      	mov	r1, r7
 8007c56:	4620      	mov	r0, r4
 8007c58:	f000 f962 	bl	8007f20 <__multadd>
 8007c5c:	e7f3      	b.n	8007c46 <_dtoa_r+0xb2e>
 8007c5e:	4651      	mov	r1, sl
 8007c60:	2300      	movs	r3, #0
 8007c62:	220a      	movs	r2, #10
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 f95b 	bl	8007f20 <__multadd>
 8007c6a:	4682      	mov	sl, r0
 8007c6c:	e70d      	b.n	8007a8a <_dtoa_r+0x972>
 8007c6e:	9b02      	ldr	r3, [sp, #8]
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d105      	bne.n	8007c80 <_dtoa_r+0xb68>
 8007c74:	9a02      	ldr	r2, [sp, #8]
 8007c76:	f10b 0b01 	add.w	fp, fp, #1
 8007c7a:	2331      	movs	r3, #49	; 0x31
 8007c7c:	7013      	strb	r3, [r2, #0]
 8007c7e:	e6e2      	b.n	8007a46 <_dtoa_r+0x92e>
 8007c80:	4615      	mov	r5, r2
 8007c82:	e7b2      	b.n	8007bea <_dtoa_r+0xad2>
 8007c84:	4b09      	ldr	r3, [pc, #36]	; (8007cac <_dtoa_r+0xb94>)
 8007c86:	f7ff baae 	b.w	80071e6 <_dtoa_r+0xce>
 8007c8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f47f aa88 	bne.w	80071a2 <_dtoa_r+0x8a>
 8007c92:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <_dtoa_r+0xb98>)
 8007c94:	f7ff baa7 	b.w	80071e6 <_dtoa_r+0xce>
 8007c98:	9b04      	ldr	r3, [sp, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f73f aef4 	bgt.w	8007a88 <_dtoa_r+0x970>
 8007ca0:	9b07      	ldr	r3, [sp, #28]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	f77f aef0 	ble.w	8007a88 <_dtoa_r+0x970>
 8007ca8:	e6b8      	b.n	8007a1c <_dtoa_r+0x904>
 8007caa:	bf00      	nop
 8007cac:	0801e56c 	.word	0x0801e56c
 8007cb0:	0801e2da 	.word	0x0801e2da

08007cb4 <_cleanup_r>:
 8007cb4:	4901      	ldr	r1, [pc, #4]	; (8007cbc <_cleanup_r+0x8>)
 8007cb6:	f000 b8a9 	b.w	8007e0c <_fwalk_reent>
 8007cba:	bf00      	nop
 8007cbc:	08008b9d 	.word	0x08008b9d

08007cc0 <std.isra.0>:
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	6003      	str	r3, [r0, #0]
 8007cc8:	6043      	str	r3, [r0, #4]
 8007cca:	6083      	str	r3, [r0, #8]
 8007ccc:	8181      	strh	r1, [r0, #12]
 8007cce:	6643      	str	r3, [r0, #100]	; 0x64
 8007cd0:	81c2      	strh	r2, [r0, #14]
 8007cd2:	6103      	str	r3, [r0, #16]
 8007cd4:	6143      	str	r3, [r0, #20]
 8007cd6:	6183      	str	r3, [r0, #24]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	2208      	movs	r2, #8
 8007cdc:	305c      	adds	r0, #92	; 0x5c
 8007cde:	f7fe fcd7 	bl	8006690 <memset>
 8007ce2:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <std.isra.0+0x38>)
 8007ce4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ce6:	4b05      	ldr	r3, [pc, #20]	; (8007cfc <std.isra.0+0x3c>)
 8007ce8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cea:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <std.isra.0+0x40>)
 8007cec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cee:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <std.isra.0+0x44>)
 8007cf0:	6224      	str	r4, [r4, #32]
 8007cf2:	6323      	str	r3, [r4, #48]	; 0x30
 8007cf4:	bd10      	pop	{r4, pc}
 8007cf6:	bf00      	nop
 8007cf8:	08008841 	.word	0x08008841
 8007cfc:	08008863 	.word	0x08008863
 8007d00:	0800889b 	.word	0x0800889b
 8007d04:	080088bf 	.word	0x080088bf

08007d08 <__sfmoreglue>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	1e4a      	subs	r2, r1, #1
 8007d0c:	2568      	movs	r5, #104	; 0x68
 8007d0e:	4355      	muls	r5, r2
 8007d10:	460e      	mov	r6, r1
 8007d12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d16:	f000 fbe5 	bl	80084e4 <_malloc_r>
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	b140      	cbz	r0, 8007d30 <__sfmoreglue+0x28>
 8007d1e:	2100      	movs	r1, #0
 8007d20:	e880 0042 	stmia.w	r0, {r1, r6}
 8007d24:	300c      	adds	r0, #12
 8007d26:	60a0      	str	r0, [r4, #8]
 8007d28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d2c:	f7fe fcb0 	bl	8006690 <memset>
 8007d30:	4620      	mov	r0, r4
 8007d32:	bd70      	pop	{r4, r5, r6, pc}

08007d34 <__sinit>:
 8007d34:	6983      	ldr	r3, [r0, #24]
 8007d36:	b510      	push	{r4, lr}
 8007d38:	4604      	mov	r4, r0
 8007d3a:	bb33      	cbnz	r3, 8007d8a <__sinit+0x56>
 8007d3c:	6483      	str	r3, [r0, #72]	; 0x48
 8007d3e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007d40:	6503      	str	r3, [r0, #80]	; 0x50
 8007d42:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <__sinit+0x58>)
 8007d44:	4a12      	ldr	r2, [pc, #72]	; (8007d90 <__sinit+0x5c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6282      	str	r2, [r0, #40]	; 0x28
 8007d4a:	4298      	cmp	r0, r3
 8007d4c:	bf04      	itt	eq
 8007d4e:	2301      	moveq	r3, #1
 8007d50:	6183      	streq	r3, [r0, #24]
 8007d52:	f000 f81f 	bl	8007d94 <__sfp>
 8007d56:	6060      	str	r0, [r4, #4]
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f000 f81b 	bl	8007d94 <__sfp>
 8007d5e:	60a0      	str	r0, [r4, #8]
 8007d60:	4620      	mov	r0, r4
 8007d62:	f000 f817 	bl	8007d94 <__sfp>
 8007d66:	2200      	movs	r2, #0
 8007d68:	60e0      	str	r0, [r4, #12]
 8007d6a:	2104      	movs	r1, #4
 8007d6c:	6860      	ldr	r0, [r4, #4]
 8007d6e:	f7ff ffa7 	bl	8007cc0 <std.isra.0>
 8007d72:	2201      	movs	r2, #1
 8007d74:	2109      	movs	r1, #9
 8007d76:	68a0      	ldr	r0, [r4, #8]
 8007d78:	f7ff ffa2 	bl	8007cc0 <std.isra.0>
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	2112      	movs	r1, #18
 8007d80:	68e0      	ldr	r0, [r4, #12]
 8007d82:	f7ff ff9d 	bl	8007cc0 <std.isra.0>
 8007d86:	2301      	movs	r3, #1
 8007d88:	61a3      	str	r3, [r4, #24]
 8007d8a:	bd10      	pop	{r4, pc}
 8007d8c:	0801e348 	.word	0x0801e348
 8007d90:	08007cb5 	.word	0x08007cb5

08007d94 <__sfp>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	4b1c      	ldr	r3, [pc, #112]	; (8007e08 <__sfp+0x74>)
 8007d98:	681e      	ldr	r6, [r3, #0]
 8007d9a:	69b3      	ldr	r3, [r6, #24]
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	b913      	cbnz	r3, 8007da6 <__sfp+0x12>
 8007da0:	4630      	mov	r0, r6
 8007da2:	f7ff ffc7 	bl	8007d34 <__sinit>
 8007da6:	3648      	adds	r6, #72	; 0x48
 8007da8:	68b4      	ldr	r4, [r6, #8]
 8007daa:	6873      	ldr	r3, [r6, #4]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	d503      	bpl.n	8007db8 <__sfp+0x24>
 8007db0:	6833      	ldr	r3, [r6, #0]
 8007db2:	b133      	cbz	r3, 8007dc2 <__sfp+0x2e>
 8007db4:	6836      	ldr	r6, [r6, #0]
 8007db6:	e7f7      	b.n	8007da8 <__sfp+0x14>
 8007db8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dbc:	b16d      	cbz	r5, 8007dda <__sfp+0x46>
 8007dbe:	3468      	adds	r4, #104	; 0x68
 8007dc0:	e7f4      	b.n	8007dac <__sfp+0x18>
 8007dc2:	2104      	movs	r1, #4
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	f7ff ff9f 	bl	8007d08 <__sfmoreglue>
 8007dca:	6030      	str	r0, [r6, #0]
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d1f1      	bne.n	8007db4 <__sfp+0x20>
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007dde:	81e3      	strh	r3, [r4, #14]
 8007de0:	2301      	movs	r3, #1
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	6665      	str	r5, [r4, #100]	; 0x64
 8007de6:	6025      	str	r5, [r4, #0]
 8007de8:	60a5      	str	r5, [r4, #8]
 8007dea:	6065      	str	r5, [r4, #4]
 8007dec:	6125      	str	r5, [r4, #16]
 8007dee:	6165      	str	r5, [r4, #20]
 8007df0:	61a5      	str	r5, [r4, #24]
 8007df2:	2208      	movs	r2, #8
 8007df4:	4629      	mov	r1, r5
 8007df6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dfa:	f7fe fc49 	bl	8006690 <memset>
 8007dfe:	6365      	str	r5, [r4, #52]	; 0x34
 8007e00:	63a5      	str	r5, [r4, #56]	; 0x38
 8007e02:	64a5      	str	r5, [r4, #72]	; 0x48
 8007e04:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007e06:	e7e6      	b.n	8007dd6 <__sfp+0x42>
 8007e08:	0801e348 	.word	0x0801e348

08007e0c <_fwalk_reent>:
 8007e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e10:	4680      	mov	r8, r0
 8007e12:	4689      	mov	r9, r1
 8007e14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e18:	2600      	movs	r6, #0
 8007e1a:	b914      	cbnz	r4, 8007e22 <_fwalk_reent+0x16>
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e22:	68a5      	ldr	r5, [r4, #8]
 8007e24:	6867      	ldr	r7, [r4, #4]
 8007e26:	3f01      	subs	r7, #1
 8007e28:	d501      	bpl.n	8007e2e <_fwalk_reent+0x22>
 8007e2a:	6824      	ldr	r4, [r4, #0]
 8007e2c:	e7f5      	b.n	8007e1a <_fwalk_reent+0xe>
 8007e2e:	89ab      	ldrh	r3, [r5, #12]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d907      	bls.n	8007e44 <_fwalk_reent+0x38>
 8007e34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	d003      	beq.n	8007e44 <_fwalk_reent+0x38>
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	4640      	mov	r0, r8
 8007e40:	47c8      	blx	r9
 8007e42:	4306      	orrs	r6, r0
 8007e44:	3568      	adds	r5, #104	; 0x68
 8007e46:	e7ee      	b.n	8007e26 <_fwalk_reent+0x1a>

08007e48 <_localeconv_r>:
 8007e48:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <_localeconv_r+0x14>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6a18      	ldr	r0, [r3, #32]
 8007e4e:	4b04      	ldr	r3, [pc, #16]	; (8007e60 <_localeconv_r+0x18>)
 8007e50:	2800      	cmp	r0, #0
 8007e52:	bf08      	it	eq
 8007e54:	4618      	moveq	r0, r3
 8007e56:	30f0      	adds	r0, #240	; 0xf0
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	20000018 	.word	0x20000018
 8007e60:	2000007c 	.word	0x2000007c

08007e64 <malloc>:
 8007e64:	4b02      	ldr	r3, [pc, #8]	; (8007e70 <malloc+0xc>)
 8007e66:	4601      	mov	r1, r0
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	f000 bb3b 	b.w	80084e4 <_malloc_r>
 8007e6e:	bf00      	nop
 8007e70:	20000018 	.word	0x20000018

08007e74 <memcpy>:
 8007e74:	b510      	push	{r4, lr}
 8007e76:	1e43      	subs	r3, r0, #1
 8007e78:	440a      	add	r2, r1
 8007e7a:	4291      	cmp	r1, r2
 8007e7c:	d100      	bne.n	8007e80 <memcpy+0xc>
 8007e7e:	bd10      	pop	{r4, pc}
 8007e80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e88:	e7f7      	b.n	8007e7a <memcpy+0x6>

08007e8a <_Balloc>:
 8007e8a:	b570      	push	{r4, r5, r6, lr}
 8007e8c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e8e:	4604      	mov	r4, r0
 8007e90:	460e      	mov	r6, r1
 8007e92:	b93d      	cbnz	r5, 8007ea4 <_Balloc+0x1a>
 8007e94:	2010      	movs	r0, #16
 8007e96:	f7ff ffe5 	bl	8007e64 <malloc>
 8007e9a:	6260      	str	r0, [r4, #36]	; 0x24
 8007e9c:	6045      	str	r5, [r0, #4]
 8007e9e:	6085      	str	r5, [r0, #8]
 8007ea0:	6005      	str	r5, [r0, #0]
 8007ea2:	60c5      	str	r5, [r0, #12]
 8007ea4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007ea6:	68eb      	ldr	r3, [r5, #12]
 8007ea8:	b183      	cbz	r3, 8007ecc <_Balloc+0x42>
 8007eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007eb2:	b9b8      	cbnz	r0, 8007ee4 <_Balloc+0x5a>
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	fa01 f506 	lsl.w	r5, r1, r6
 8007eba:	1d6a      	adds	r2, r5, #5
 8007ebc:	0092      	lsls	r2, r2, #2
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 fab4 	bl	800842c <_calloc_r>
 8007ec4:	b160      	cbz	r0, 8007ee0 <_Balloc+0x56>
 8007ec6:	6046      	str	r6, [r0, #4]
 8007ec8:	6085      	str	r5, [r0, #8]
 8007eca:	e00e      	b.n	8007eea <_Balloc+0x60>
 8007ecc:	2221      	movs	r2, #33	; 0x21
 8007ece:	2104      	movs	r1, #4
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f000 faab 	bl	800842c <_calloc_r>
 8007ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ed8:	60e8      	str	r0, [r5, #12]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e4      	bne.n	8007eaa <_Balloc+0x20>
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}
 8007ee4:	6802      	ldr	r2, [r0, #0]
 8007ee6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007eea:	2300      	movs	r3, #0
 8007eec:	6103      	str	r3, [r0, #16]
 8007eee:	60c3      	str	r3, [r0, #12]
 8007ef0:	bd70      	pop	{r4, r5, r6, pc}

08007ef2 <_Bfree>:
 8007ef2:	b570      	push	{r4, r5, r6, lr}
 8007ef4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	460d      	mov	r5, r1
 8007efa:	b93c      	cbnz	r4, 8007f0c <_Bfree+0x1a>
 8007efc:	2010      	movs	r0, #16
 8007efe:	f7ff ffb1 	bl	8007e64 <malloc>
 8007f02:	6270      	str	r0, [r6, #36]	; 0x24
 8007f04:	6044      	str	r4, [r0, #4]
 8007f06:	6084      	str	r4, [r0, #8]
 8007f08:	6004      	str	r4, [r0, #0]
 8007f0a:	60c4      	str	r4, [r0, #12]
 8007f0c:	b13d      	cbz	r5, 8007f1e <_Bfree+0x2c>
 8007f0e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007f10:	686a      	ldr	r2, [r5, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f18:	6029      	str	r1, [r5, #0]
 8007f1a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007f1e:	bd70      	pop	{r4, r5, r6, pc}

08007f20 <__multadd>:
 8007f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f24:	690d      	ldr	r5, [r1, #16]
 8007f26:	461f      	mov	r7, r3
 8007f28:	4606      	mov	r6, r0
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	f101 0e14 	add.w	lr, r1, #20
 8007f30:	2300      	movs	r3, #0
 8007f32:	f8de 0000 	ldr.w	r0, [lr]
 8007f36:	b281      	uxth	r1, r0
 8007f38:	fb02 7101 	mla	r1, r2, r1, r7
 8007f3c:	0c0f      	lsrs	r7, r1, #16
 8007f3e:	0c00      	lsrs	r0, r0, #16
 8007f40:	fb02 7000 	mla	r0, r2, r0, r7
 8007f44:	b289      	uxth	r1, r1
 8007f46:	3301      	adds	r3, #1
 8007f48:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007f4c:	429d      	cmp	r5, r3
 8007f4e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007f52:	f84e 1b04 	str.w	r1, [lr], #4
 8007f56:	dcec      	bgt.n	8007f32 <__multadd+0x12>
 8007f58:	b1d7      	cbz	r7, 8007f90 <__multadd+0x70>
 8007f5a:	68a3      	ldr	r3, [r4, #8]
 8007f5c:	429d      	cmp	r5, r3
 8007f5e:	db12      	blt.n	8007f86 <__multadd+0x66>
 8007f60:	6861      	ldr	r1, [r4, #4]
 8007f62:	4630      	mov	r0, r6
 8007f64:	3101      	adds	r1, #1
 8007f66:	f7ff ff90 	bl	8007e8a <_Balloc>
 8007f6a:	6922      	ldr	r2, [r4, #16]
 8007f6c:	3202      	adds	r2, #2
 8007f6e:	f104 010c 	add.w	r1, r4, #12
 8007f72:	4680      	mov	r8, r0
 8007f74:	0092      	lsls	r2, r2, #2
 8007f76:	300c      	adds	r0, #12
 8007f78:	f7ff ff7c 	bl	8007e74 <memcpy>
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	4630      	mov	r0, r6
 8007f80:	f7ff ffb7 	bl	8007ef2 <_Bfree>
 8007f84:	4644      	mov	r4, r8
 8007f86:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f8a:	3501      	adds	r5, #1
 8007f8c:	615f      	str	r7, [r3, #20]
 8007f8e:	6125      	str	r5, [r4, #16]
 8007f90:	4620      	mov	r0, r4
 8007f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007f96 <__hi0bits>:
 8007f96:	0c02      	lsrs	r2, r0, #16
 8007f98:	0412      	lsls	r2, r2, #16
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	b9b2      	cbnz	r2, 8007fcc <__hi0bits+0x36>
 8007f9e:	0403      	lsls	r3, r0, #16
 8007fa0:	2010      	movs	r0, #16
 8007fa2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007fa6:	bf04      	itt	eq
 8007fa8:	021b      	lsleq	r3, r3, #8
 8007faa:	3008      	addeq	r0, #8
 8007fac:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007fb0:	bf04      	itt	eq
 8007fb2:	011b      	lsleq	r3, r3, #4
 8007fb4:	3004      	addeq	r0, #4
 8007fb6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007fba:	bf04      	itt	eq
 8007fbc:	009b      	lsleq	r3, r3, #2
 8007fbe:	3002      	addeq	r0, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	db06      	blt.n	8007fd2 <__hi0bits+0x3c>
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	d503      	bpl.n	8007fd0 <__hi0bits+0x3a>
 8007fc8:	3001      	adds	r0, #1
 8007fca:	4770      	bx	lr
 8007fcc:	2000      	movs	r0, #0
 8007fce:	e7e8      	b.n	8007fa2 <__hi0bits+0xc>
 8007fd0:	2020      	movs	r0, #32
 8007fd2:	4770      	bx	lr

08007fd4 <__lo0bits>:
 8007fd4:	6803      	ldr	r3, [r0, #0]
 8007fd6:	f013 0207 	ands.w	r2, r3, #7
 8007fda:	4601      	mov	r1, r0
 8007fdc:	d00b      	beq.n	8007ff6 <__lo0bits+0x22>
 8007fde:	07da      	lsls	r2, r3, #31
 8007fe0:	d423      	bmi.n	800802a <__lo0bits+0x56>
 8007fe2:	0798      	lsls	r0, r3, #30
 8007fe4:	bf49      	itett	mi
 8007fe6:	085b      	lsrmi	r3, r3, #1
 8007fe8:	089b      	lsrpl	r3, r3, #2
 8007fea:	2001      	movmi	r0, #1
 8007fec:	600b      	strmi	r3, [r1, #0]
 8007fee:	bf5c      	itt	pl
 8007ff0:	600b      	strpl	r3, [r1, #0]
 8007ff2:	2002      	movpl	r0, #2
 8007ff4:	4770      	bx	lr
 8007ff6:	b298      	uxth	r0, r3
 8007ff8:	b9a8      	cbnz	r0, 8008026 <__lo0bits+0x52>
 8007ffa:	0c1b      	lsrs	r3, r3, #16
 8007ffc:	2010      	movs	r0, #16
 8007ffe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008002:	bf04      	itt	eq
 8008004:	0a1b      	lsreq	r3, r3, #8
 8008006:	3008      	addeq	r0, #8
 8008008:	071a      	lsls	r2, r3, #28
 800800a:	bf04      	itt	eq
 800800c:	091b      	lsreq	r3, r3, #4
 800800e:	3004      	addeq	r0, #4
 8008010:	079a      	lsls	r2, r3, #30
 8008012:	bf04      	itt	eq
 8008014:	089b      	lsreq	r3, r3, #2
 8008016:	3002      	addeq	r0, #2
 8008018:	07da      	lsls	r2, r3, #31
 800801a:	d402      	bmi.n	8008022 <__lo0bits+0x4e>
 800801c:	085b      	lsrs	r3, r3, #1
 800801e:	d006      	beq.n	800802e <__lo0bits+0x5a>
 8008020:	3001      	adds	r0, #1
 8008022:	600b      	str	r3, [r1, #0]
 8008024:	4770      	bx	lr
 8008026:	4610      	mov	r0, r2
 8008028:	e7e9      	b.n	8007ffe <__lo0bits+0x2a>
 800802a:	2000      	movs	r0, #0
 800802c:	4770      	bx	lr
 800802e:	2020      	movs	r0, #32
 8008030:	4770      	bx	lr

08008032 <__i2b>:
 8008032:	b510      	push	{r4, lr}
 8008034:	460c      	mov	r4, r1
 8008036:	2101      	movs	r1, #1
 8008038:	f7ff ff27 	bl	8007e8a <_Balloc>
 800803c:	2201      	movs	r2, #1
 800803e:	6144      	str	r4, [r0, #20]
 8008040:	6102      	str	r2, [r0, #16]
 8008042:	bd10      	pop	{r4, pc}

08008044 <__multiply>:
 8008044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008048:	4614      	mov	r4, r2
 800804a:	690a      	ldr	r2, [r1, #16]
 800804c:	6923      	ldr	r3, [r4, #16]
 800804e:	429a      	cmp	r2, r3
 8008050:	bfb8      	it	lt
 8008052:	460b      	movlt	r3, r1
 8008054:	4689      	mov	r9, r1
 8008056:	bfbc      	itt	lt
 8008058:	46a1      	movlt	r9, r4
 800805a:	461c      	movlt	r4, r3
 800805c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008060:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008064:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008068:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800806c:	eb07 060a 	add.w	r6, r7, sl
 8008070:	429e      	cmp	r6, r3
 8008072:	bfc8      	it	gt
 8008074:	3101      	addgt	r1, #1
 8008076:	f7ff ff08 	bl	8007e8a <_Balloc>
 800807a:	f100 0514 	add.w	r5, r0, #20
 800807e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008082:	462b      	mov	r3, r5
 8008084:	2200      	movs	r2, #0
 8008086:	4543      	cmp	r3, r8
 8008088:	d316      	bcc.n	80080b8 <__multiply+0x74>
 800808a:	f104 0214 	add.w	r2, r4, #20
 800808e:	f109 0114 	add.w	r1, r9, #20
 8008092:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8008096:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800809a:	9301      	str	r3, [sp, #4]
 800809c:	9c01      	ldr	r4, [sp, #4]
 800809e:	4294      	cmp	r4, r2
 80080a0:	4613      	mov	r3, r2
 80080a2:	d80c      	bhi.n	80080be <__multiply+0x7a>
 80080a4:	2e00      	cmp	r6, #0
 80080a6:	dd03      	ble.n	80080b0 <__multiply+0x6c>
 80080a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d054      	beq.n	800815a <__multiply+0x116>
 80080b0:	6106      	str	r6, [r0, #16]
 80080b2:	b003      	add	sp, #12
 80080b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b8:	f843 2b04 	str.w	r2, [r3], #4
 80080bc:	e7e3      	b.n	8008086 <__multiply+0x42>
 80080be:	f8b3 a000 	ldrh.w	sl, [r3]
 80080c2:	3204      	adds	r2, #4
 80080c4:	f1ba 0f00 	cmp.w	sl, #0
 80080c8:	d020      	beq.n	800810c <__multiply+0xc8>
 80080ca:	46ae      	mov	lr, r5
 80080cc:	4689      	mov	r9, r1
 80080ce:	f04f 0c00 	mov.w	ip, #0
 80080d2:	f859 4b04 	ldr.w	r4, [r9], #4
 80080d6:	f8be b000 	ldrh.w	fp, [lr]
 80080da:	b2a3      	uxth	r3, r4
 80080dc:	fb0a b303 	mla	r3, sl, r3, fp
 80080e0:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80080e4:	f8de 4000 	ldr.w	r4, [lr]
 80080e8:	4463      	add	r3, ip
 80080ea:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80080ee:	fb0a c40b 	mla	r4, sl, fp, ip
 80080f2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80080fc:	454f      	cmp	r7, r9
 80080fe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008102:	f84e 3b04 	str.w	r3, [lr], #4
 8008106:	d8e4      	bhi.n	80080d2 <__multiply+0x8e>
 8008108:	f8ce c000 	str.w	ip, [lr]
 800810c:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8008110:	f1b9 0f00 	cmp.w	r9, #0
 8008114:	d01f      	beq.n	8008156 <__multiply+0x112>
 8008116:	682b      	ldr	r3, [r5, #0]
 8008118:	46ae      	mov	lr, r5
 800811a:	468c      	mov	ip, r1
 800811c:	f04f 0a00 	mov.w	sl, #0
 8008120:	f8bc 4000 	ldrh.w	r4, [ip]
 8008124:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008128:	fb09 b404 	mla	r4, r9, r4, fp
 800812c:	44a2      	add	sl, r4
 800812e:	b29b      	uxth	r3, r3
 8008130:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8008134:	f84e 3b04 	str.w	r3, [lr], #4
 8008138:	f85c 3b04 	ldr.w	r3, [ip], #4
 800813c:	f8be 4000 	ldrh.w	r4, [lr]
 8008140:	0c1b      	lsrs	r3, r3, #16
 8008142:	fb09 4303 	mla	r3, r9, r3, r4
 8008146:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800814a:	4567      	cmp	r7, ip
 800814c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008150:	d8e6      	bhi.n	8008120 <__multiply+0xdc>
 8008152:	f8ce 3000 	str.w	r3, [lr]
 8008156:	3504      	adds	r5, #4
 8008158:	e7a0      	b.n	800809c <__multiply+0x58>
 800815a:	3e01      	subs	r6, #1
 800815c:	e7a2      	b.n	80080a4 <__multiply+0x60>
	...

08008160 <__pow5mult>:
 8008160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008164:	4615      	mov	r5, r2
 8008166:	f012 0203 	ands.w	r2, r2, #3
 800816a:	4606      	mov	r6, r0
 800816c:	460f      	mov	r7, r1
 800816e:	d007      	beq.n	8008180 <__pow5mult+0x20>
 8008170:	3a01      	subs	r2, #1
 8008172:	4c21      	ldr	r4, [pc, #132]	; (80081f8 <__pow5mult+0x98>)
 8008174:	2300      	movs	r3, #0
 8008176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800817a:	f7ff fed1 	bl	8007f20 <__multadd>
 800817e:	4607      	mov	r7, r0
 8008180:	10ad      	asrs	r5, r5, #2
 8008182:	d035      	beq.n	80081f0 <__pow5mult+0x90>
 8008184:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008186:	b93c      	cbnz	r4, 8008198 <__pow5mult+0x38>
 8008188:	2010      	movs	r0, #16
 800818a:	f7ff fe6b 	bl	8007e64 <malloc>
 800818e:	6270      	str	r0, [r6, #36]	; 0x24
 8008190:	6044      	str	r4, [r0, #4]
 8008192:	6084      	str	r4, [r0, #8]
 8008194:	6004      	str	r4, [r0, #0]
 8008196:	60c4      	str	r4, [r0, #12]
 8008198:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800819c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081a0:	b94c      	cbnz	r4, 80081b6 <__pow5mult+0x56>
 80081a2:	f240 2171 	movw	r1, #625	; 0x271
 80081a6:	4630      	mov	r0, r6
 80081a8:	f7ff ff43 	bl	8008032 <__i2b>
 80081ac:	2300      	movs	r3, #0
 80081ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80081b2:	4604      	mov	r4, r0
 80081b4:	6003      	str	r3, [r0, #0]
 80081b6:	f04f 0800 	mov.w	r8, #0
 80081ba:	07eb      	lsls	r3, r5, #31
 80081bc:	d50a      	bpl.n	80081d4 <__pow5mult+0x74>
 80081be:	4639      	mov	r1, r7
 80081c0:	4622      	mov	r2, r4
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7ff ff3e 	bl	8008044 <__multiply>
 80081c8:	4639      	mov	r1, r7
 80081ca:	4681      	mov	r9, r0
 80081cc:	4630      	mov	r0, r6
 80081ce:	f7ff fe90 	bl	8007ef2 <_Bfree>
 80081d2:	464f      	mov	r7, r9
 80081d4:	106d      	asrs	r5, r5, #1
 80081d6:	d00b      	beq.n	80081f0 <__pow5mult+0x90>
 80081d8:	6820      	ldr	r0, [r4, #0]
 80081da:	b938      	cbnz	r0, 80081ec <__pow5mult+0x8c>
 80081dc:	4622      	mov	r2, r4
 80081de:	4621      	mov	r1, r4
 80081e0:	4630      	mov	r0, r6
 80081e2:	f7ff ff2f 	bl	8008044 <__multiply>
 80081e6:	6020      	str	r0, [r4, #0]
 80081e8:	f8c0 8000 	str.w	r8, [r0]
 80081ec:	4604      	mov	r4, r0
 80081ee:	e7e4      	b.n	80081ba <__pow5mult+0x5a>
 80081f0:	4638      	mov	r0, r7
 80081f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f6:	bf00      	nop
 80081f8:	0801e440 	.word	0x0801e440

080081fc <__lshift>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	460c      	mov	r4, r1
 8008202:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008206:	6923      	ldr	r3, [r4, #16]
 8008208:	6849      	ldr	r1, [r1, #4]
 800820a:	eb0a 0903 	add.w	r9, sl, r3
 800820e:	68a3      	ldr	r3, [r4, #8]
 8008210:	4607      	mov	r7, r0
 8008212:	4616      	mov	r6, r2
 8008214:	f109 0501 	add.w	r5, r9, #1
 8008218:	42ab      	cmp	r3, r5
 800821a:	db31      	blt.n	8008280 <__lshift+0x84>
 800821c:	4638      	mov	r0, r7
 800821e:	f7ff fe34 	bl	8007e8a <_Balloc>
 8008222:	2200      	movs	r2, #0
 8008224:	4680      	mov	r8, r0
 8008226:	f100 0314 	add.w	r3, r0, #20
 800822a:	4611      	mov	r1, r2
 800822c:	4552      	cmp	r2, sl
 800822e:	db2a      	blt.n	8008286 <__lshift+0x8a>
 8008230:	6920      	ldr	r0, [r4, #16]
 8008232:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008236:	f104 0114 	add.w	r1, r4, #20
 800823a:	f016 021f 	ands.w	r2, r6, #31
 800823e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008242:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8008246:	d022      	beq.n	800828e <__lshift+0x92>
 8008248:	f1c2 0c20 	rsb	ip, r2, #32
 800824c:	2000      	movs	r0, #0
 800824e:	680e      	ldr	r6, [r1, #0]
 8008250:	4096      	lsls	r6, r2
 8008252:	4330      	orrs	r0, r6
 8008254:	f843 0b04 	str.w	r0, [r3], #4
 8008258:	f851 0b04 	ldr.w	r0, [r1], #4
 800825c:	458e      	cmp	lr, r1
 800825e:	fa20 f00c 	lsr.w	r0, r0, ip
 8008262:	d8f4      	bhi.n	800824e <__lshift+0x52>
 8008264:	6018      	str	r0, [r3, #0]
 8008266:	b108      	cbz	r0, 800826c <__lshift+0x70>
 8008268:	f109 0502 	add.w	r5, r9, #2
 800826c:	3d01      	subs	r5, #1
 800826e:	4638      	mov	r0, r7
 8008270:	f8c8 5010 	str.w	r5, [r8, #16]
 8008274:	4621      	mov	r1, r4
 8008276:	f7ff fe3c 	bl	8007ef2 <_Bfree>
 800827a:	4640      	mov	r0, r8
 800827c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008280:	3101      	adds	r1, #1
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	e7c8      	b.n	8008218 <__lshift+0x1c>
 8008286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800828a:	3201      	adds	r2, #1
 800828c:	e7ce      	b.n	800822c <__lshift+0x30>
 800828e:	3b04      	subs	r3, #4
 8008290:	f851 2b04 	ldr.w	r2, [r1], #4
 8008294:	f843 2f04 	str.w	r2, [r3, #4]!
 8008298:	458e      	cmp	lr, r1
 800829a:	d8f9      	bhi.n	8008290 <__lshift+0x94>
 800829c:	e7e6      	b.n	800826c <__lshift+0x70>

0800829e <__mcmp>:
 800829e:	6903      	ldr	r3, [r0, #16]
 80082a0:	690a      	ldr	r2, [r1, #16]
 80082a2:	1a9b      	subs	r3, r3, r2
 80082a4:	b530      	push	{r4, r5, lr}
 80082a6:	d10c      	bne.n	80082c2 <__mcmp+0x24>
 80082a8:	0092      	lsls	r2, r2, #2
 80082aa:	3014      	adds	r0, #20
 80082ac:	3114      	adds	r1, #20
 80082ae:	1884      	adds	r4, r0, r2
 80082b0:	4411      	add	r1, r2
 80082b2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80082b6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80082ba:	4295      	cmp	r5, r2
 80082bc:	d003      	beq.n	80082c6 <__mcmp+0x28>
 80082be:	d305      	bcc.n	80082cc <__mcmp+0x2e>
 80082c0:	2301      	movs	r3, #1
 80082c2:	4618      	mov	r0, r3
 80082c4:	bd30      	pop	{r4, r5, pc}
 80082c6:	42a0      	cmp	r0, r4
 80082c8:	d3f3      	bcc.n	80082b2 <__mcmp+0x14>
 80082ca:	e7fa      	b.n	80082c2 <__mcmp+0x24>
 80082cc:	f04f 33ff 	mov.w	r3, #4294967295
 80082d0:	e7f7      	b.n	80082c2 <__mcmp+0x24>

080082d2 <__mdiff>:
 80082d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d6:	460d      	mov	r5, r1
 80082d8:	4607      	mov	r7, r0
 80082da:	4611      	mov	r1, r2
 80082dc:	4628      	mov	r0, r5
 80082de:	4614      	mov	r4, r2
 80082e0:	f7ff ffdd 	bl	800829e <__mcmp>
 80082e4:	1e06      	subs	r6, r0, #0
 80082e6:	d108      	bne.n	80082fa <__mdiff+0x28>
 80082e8:	4631      	mov	r1, r6
 80082ea:	4638      	mov	r0, r7
 80082ec:	f7ff fdcd 	bl	8007e8a <_Balloc>
 80082f0:	2301      	movs	r3, #1
 80082f2:	6103      	str	r3, [r0, #16]
 80082f4:	6146      	str	r6, [r0, #20]
 80082f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082fa:	bfa4      	itt	ge
 80082fc:	4623      	movge	r3, r4
 80082fe:	462c      	movge	r4, r5
 8008300:	4638      	mov	r0, r7
 8008302:	6861      	ldr	r1, [r4, #4]
 8008304:	bfa6      	itte	ge
 8008306:	461d      	movge	r5, r3
 8008308:	2600      	movge	r6, #0
 800830a:	2601      	movlt	r6, #1
 800830c:	f7ff fdbd 	bl	8007e8a <_Balloc>
 8008310:	692b      	ldr	r3, [r5, #16]
 8008312:	60c6      	str	r6, [r0, #12]
 8008314:	6926      	ldr	r6, [r4, #16]
 8008316:	f105 0914 	add.w	r9, r5, #20
 800831a:	f104 0214 	add.w	r2, r4, #20
 800831e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008322:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008326:	f100 0514 	add.w	r5, r0, #20
 800832a:	f04f 0c00 	mov.w	ip, #0
 800832e:	f852 ab04 	ldr.w	sl, [r2], #4
 8008332:	f859 4b04 	ldr.w	r4, [r9], #4
 8008336:	fa1c f18a 	uxtah	r1, ip, sl
 800833a:	b2a3      	uxth	r3, r4
 800833c:	1ac9      	subs	r1, r1, r3
 800833e:	0c23      	lsrs	r3, r4, #16
 8008340:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008344:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008348:	b289      	uxth	r1, r1
 800834a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800834e:	45c8      	cmp	r8, r9
 8008350:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008354:	4696      	mov	lr, r2
 8008356:	f845 3b04 	str.w	r3, [r5], #4
 800835a:	d8e8      	bhi.n	800832e <__mdiff+0x5c>
 800835c:	45be      	cmp	lr, r7
 800835e:	d305      	bcc.n	800836c <__mdiff+0x9a>
 8008360:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008364:	b18b      	cbz	r3, 800838a <__mdiff+0xb8>
 8008366:	6106      	str	r6, [r0, #16]
 8008368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800836c:	f85e 1b04 	ldr.w	r1, [lr], #4
 8008370:	fa1c f381 	uxtah	r3, ip, r1
 8008374:	141a      	asrs	r2, r3, #16
 8008376:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800837a:	b29b      	uxth	r3, r3
 800837c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008380:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008384:	f845 3b04 	str.w	r3, [r5], #4
 8008388:	e7e8      	b.n	800835c <__mdiff+0x8a>
 800838a:	3e01      	subs	r6, #1
 800838c:	e7e8      	b.n	8008360 <__mdiff+0x8e>

0800838e <__d2b>:
 800838e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008392:	460e      	mov	r6, r1
 8008394:	2101      	movs	r1, #1
 8008396:	ec59 8b10 	vmov	r8, r9, d0
 800839a:	4615      	mov	r5, r2
 800839c:	f7ff fd75 	bl	8007e8a <_Balloc>
 80083a0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80083a4:	4607      	mov	r7, r0
 80083a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083aa:	bb34      	cbnz	r4, 80083fa <__d2b+0x6c>
 80083ac:	9301      	str	r3, [sp, #4]
 80083ae:	f1b8 0f00 	cmp.w	r8, #0
 80083b2:	d027      	beq.n	8008404 <__d2b+0x76>
 80083b4:	a802      	add	r0, sp, #8
 80083b6:	f840 8d08 	str.w	r8, [r0, #-8]!
 80083ba:	f7ff fe0b 	bl	8007fd4 <__lo0bits>
 80083be:	9900      	ldr	r1, [sp, #0]
 80083c0:	b1f0      	cbz	r0, 8008400 <__d2b+0x72>
 80083c2:	9a01      	ldr	r2, [sp, #4]
 80083c4:	f1c0 0320 	rsb	r3, r0, #32
 80083c8:	fa02 f303 	lsl.w	r3, r2, r3
 80083cc:	430b      	orrs	r3, r1
 80083ce:	40c2      	lsrs	r2, r0
 80083d0:	617b      	str	r3, [r7, #20]
 80083d2:	9201      	str	r2, [sp, #4]
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	61bb      	str	r3, [r7, #24]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	bf14      	ite	ne
 80083dc:	2102      	movne	r1, #2
 80083de:	2101      	moveq	r1, #1
 80083e0:	6139      	str	r1, [r7, #16]
 80083e2:	b1c4      	cbz	r4, 8008416 <__d2b+0x88>
 80083e4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80083e8:	4404      	add	r4, r0
 80083ea:	6034      	str	r4, [r6, #0]
 80083ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083f0:	6028      	str	r0, [r5, #0]
 80083f2:	4638      	mov	r0, r7
 80083f4:	b003      	add	sp, #12
 80083f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083fe:	e7d5      	b.n	80083ac <__d2b+0x1e>
 8008400:	6179      	str	r1, [r7, #20]
 8008402:	e7e7      	b.n	80083d4 <__d2b+0x46>
 8008404:	a801      	add	r0, sp, #4
 8008406:	f7ff fde5 	bl	8007fd4 <__lo0bits>
 800840a:	9b01      	ldr	r3, [sp, #4]
 800840c:	617b      	str	r3, [r7, #20]
 800840e:	2101      	movs	r1, #1
 8008410:	6139      	str	r1, [r7, #16]
 8008412:	3020      	adds	r0, #32
 8008414:	e7e5      	b.n	80083e2 <__d2b+0x54>
 8008416:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800841a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800841e:	6030      	str	r0, [r6, #0]
 8008420:	6918      	ldr	r0, [r3, #16]
 8008422:	f7ff fdb8 	bl	8007f96 <__hi0bits>
 8008426:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800842a:	e7e1      	b.n	80083f0 <__d2b+0x62>

0800842c <_calloc_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	fb02 f401 	mul.w	r4, r2, r1
 8008432:	4621      	mov	r1, r4
 8008434:	f000 f856 	bl	80084e4 <_malloc_r>
 8008438:	4605      	mov	r5, r0
 800843a:	b118      	cbz	r0, 8008444 <_calloc_r+0x18>
 800843c:	4622      	mov	r2, r4
 800843e:	2100      	movs	r1, #0
 8008440:	f7fe f926 	bl	8006690 <memset>
 8008444:	4628      	mov	r0, r5
 8008446:	bd38      	pop	{r3, r4, r5, pc}

08008448 <_free_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4605      	mov	r5, r0
 800844c:	2900      	cmp	r1, #0
 800844e:	d045      	beq.n	80084dc <_free_r+0x94>
 8008450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008454:	1f0c      	subs	r4, r1, #4
 8008456:	2b00      	cmp	r3, #0
 8008458:	bfb8      	it	lt
 800845a:	18e4      	addlt	r4, r4, r3
 800845c:	f000 fc50 	bl	8008d00 <__malloc_lock>
 8008460:	4a1f      	ldr	r2, [pc, #124]	; (80084e0 <_free_r+0x98>)
 8008462:	6813      	ldr	r3, [r2, #0]
 8008464:	4610      	mov	r0, r2
 8008466:	b933      	cbnz	r3, 8008476 <_free_r+0x2e>
 8008468:	6063      	str	r3, [r4, #4]
 800846a:	6014      	str	r4, [r2, #0]
 800846c:	4628      	mov	r0, r5
 800846e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008472:	f000 bc46 	b.w	8008d02 <__malloc_unlock>
 8008476:	42a3      	cmp	r3, r4
 8008478:	d90c      	bls.n	8008494 <_free_r+0x4c>
 800847a:	6821      	ldr	r1, [r4, #0]
 800847c:	1862      	adds	r2, r4, r1
 800847e:	4293      	cmp	r3, r2
 8008480:	bf04      	itt	eq
 8008482:	681a      	ldreq	r2, [r3, #0]
 8008484:	685b      	ldreq	r3, [r3, #4]
 8008486:	6063      	str	r3, [r4, #4]
 8008488:	bf04      	itt	eq
 800848a:	1852      	addeq	r2, r2, r1
 800848c:	6022      	streq	r2, [r4, #0]
 800848e:	6004      	str	r4, [r0, #0]
 8008490:	e7ec      	b.n	800846c <_free_r+0x24>
 8008492:	4613      	mov	r3, r2
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	b10a      	cbz	r2, 800849c <_free_r+0x54>
 8008498:	42a2      	cmp	r2, r4
 800849a:	d9fa      	bls.n	8008492 <_free_r+0x4a>
 800849c:	6819      	ldr	r1, [r3, #0]
 800849e:	1858      	adds	r0, r3, r1
 80084a0:	42a0      	cmp	r0, r4
 80084a2:	d10b      	bne.n	80084bc <_free_r+0x74>
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	4401      	add	r1, r0
 80084a8:	1858      	adds	r0, r3, r1
 80084aa:	4282      	cmp	r2, r0
 80084ac:	6019      	str	r1, [r3, #0]
 80084ae:	d1dd      	bne.n	800846c <_free_r+0x24>
 80084b0:	6810      	ldr	r0, [r2, #0]
 80084b2:	6852      	ldr	r2, [r2, #4]
 80084b4:	605a      	str	r2, [r3, #4]
 80084b6:	4401      	add	r1, r0
 80084b8:	6019      	str	r1, [r3, #0]
 80084ba:	e7d7      	b.n	800846c <_free_r+0x24>
 80084bc:	d902      	bls.n	80084c4 <_free_r+0x7c>
 80084be:	230c      	movs	r3, #12
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	e7d3      	b.n	800846c <_free_r+0x24>
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	1821      	adds	r1, r4, r0
 80084c8:	428a      	cmp	r2, r1
 80084ca:	bf04      	itt	eq
 80084cc:	6811      	ldreq	r1, [r2, #0]
 80084ce:	6852      	ldreq	r2, [r2, #4]
 80084d0:	6062      	str	r2, [r4, #4]
 80084d2:	bf04      	itt	eq
 80084d4:	1809      	addeq	r1, r1, r0
 80084d6:	6021      	streq	r1, [r4, #0]
 80084d8:	605c      	str	r4, [r3, #4]
 80084da:	e7c7      	b.n	800846c <_free_r+0x24>
 80084dc:	bd38      	pop	{r3, r4, r5, pc}
 80084de:	bf00      	nop
 80084e0:	20012c9c 	.word	0x20012c9c

080084e4 <_malloc_r>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	1ccd      	adds	r5, r1, #3
 80084e8:	f025 0503 	bic.w	r5, r5, #3
 80084ec:	3508      	adds	r5, #8
 80084ee:	2d0c      	cmp	r5, #12
 80084f0:	bf38      	it	cc
 80084f2:	250c      	movcc	r5, #12
 80084f4:	2d00      	cmp	r5, #0
 80084f6:	4606      	mov	r6, r0
 80084f8:	db01      	blt.n	80084fe <_malloc_r+0x1a>
 80084fa:	42a9      	cmp	r1, r5
 80084fc:	d903      	bls.n	8008506 <_malloc_r+0x22>
 80084fe:	230c      	movs	r3, #12
 8008500:	6033      	str	r3, [r6, #0]
 8008502:	2000      	movs	r0, #0
 8008504:	bd70      	pop	{r4, r5, r6, pc}
 8008506:	f000 fbfb 	bl	8008d00 <__malloc_lock>
 800850a:	4a23      	ldr	r2, [pc, #140]	; (8008598 <_malloc_r+0xb4>)
 800850c:	6814      	ldr	r4, [r2, #0]
 800850e:	4621      	mov	r1, r4
 8008510:	b991      	cbnz	r1, 8008538 <_malloc_r+0x54>
 8008512:	4c22      	ldr	r4, [pc, #136]	; (800859c <_malloc_r+0xb8>)
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	b91b      	cbnz	r3, 8008520 <_malloc_r+0x3c>
 8008518:	4630      	mov	r0, r6
 800851a:	f000 f981 	bl	8008820 <_sbrk_r>
 800851e:	6020      	str	r0, [r4, #0]
 8008520:	4629      	mov	r1, r5
 8008522:	4630      	mov	r0, r6
 8008524:	f000 f97c 	bl	8008820 <_sbrk_r>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d126      	bne.n	800857a <_malloc_r+0x96>
 800852c:	230c      	movs	r3, #12
 800852e:	6033      	str	r3, [r6, #0]
 8008530:	4630      	mov	r0, r6
 8008532:	f000 fbe6 	bl	8008d02 <__malloc_unlock>
 8008536:	e7e4      	b.n	8008502 <_malloc_r+0x1e>
 8008538:	680b      	ldr	r3, [r1, #0]
 800853a:	1b5b      	subs	r3, r3, r5
 800853c:	d41a      	bmi.n	8008574 <_malloc_r+0x90>
 800853e:	2b0b      	cmp	r3, #11
 8008540:	d90f      	bls.n	8008562 <_malloc_r+0x7e>
 8008542:	600b      	str	r3, [r1, #0]
 8008544:	50cd      	str	r5, [r1, r3]
 8008546:	18cc      	adds	r4, r1, r3
 8008548:	4630      	mov	r0, r6
 800854a:	f000 fbda 	bl	8008d02 <__malloc_unlock>
 800854e:	f104 000b 	add.w	r0, r4, #11
 8008552:	1d23      	adds	r3, r4, #4
 8008554:	f020 0007 	bic.w	r0, r0, #7
 8008558:	1ac3      	subs	r3, r0, r3
 800855a:	d01b      	beq.n	8008594 <_malloc_r+0xb0>
 800855c:	425a      	negs	r2, r3
 800855e:	50e2      	str	r2, [r4, r3]
 8008560:	bd70      	pop	{r4, r5, r6, pc}
 8008562:	428c      	cmp	r4, r1
 8008564:	bf0d      	iteet	eq
 8008566:	6863      	ldreq	r3, [r4, #4]
 8008568:	684b      	ldrne	r3, [r1, #4]
 800856a:	6063      	strne	r3, [r4, #4]
 800856c:	6013      	streq	r3, [r2, #0]
 800856e:	bf18      	it	ne
 8008570:	460c      	movne	r4, r1
 8008572:	e7e9      	b.n	8008548 <_malloc_r+0x64>
 8008574:	460c      	mov	r4, r1
 8008576:	6849      	ldr	r1, [r1, #4]
 8008578:	e7ca      	b.n	8008510 <_malloc_r+0x2c>
 800857a:	1cc4      	adds	r4, r0, #3
 800857c:	f024 0403 	bic.w	r4, r4, #3
 8008580:	42a0      	cmp	r0, r4
 8008582:	d005      	beq.n	8008590 <_malloc_r+0xac>
 8008584:	1a21      	subs	r1, r4, r0
 8008586:	4630      	mov	r0, r6
 8008588:	f000 f94a 	bl	8008820 <_sbrk_r>
 800858c:	3001      	adds	r0, #1
 800858e:	d0cd      	beq.n	800852c <_malloc_r+0x48>
 8008590:	6025      	str	r5, [r4, #0]
 8008592:	e7d9      	b.n	8008548 <_malloc_r+0x64>
 8008594:	bd70      	pop	{r4, r5, r6, pc}
 8008596:	bf00      	nop
 8008598:	20012c9c 	.word	0x20012c9c
 800859c:	20012ca0 	.word	0x20012ca0

080085a0 <__sfputc_r>:
 80085a0:	6893      	ldr	r3, [r2, #8]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	b410      	push	{r4}
 80085a8:	6093      	str	r3, [r2, #8]
 80085aa:	da09      	bge.n	80085c0 <__sfputc_r+0x20>
 80085ac:	6994      	ldr	r4, [r2, #24]
 80085ae:	42a3      	cmp	r3, r4
 80085b0:	db02      	blt.n	80085b8 <__sfputc_r+0x18>
 80085b2:	b2cb      	uxtb	r3, r1
 80085b4:	2b0a      	cmp	r3, #10
 80085b6:	d103      	bne.n	80085c0 <__sfputc_r+0x20>
 80085b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085bc:	f000 b984 	b.w	80088c8 <__swbuf_r>
 80085c0:	6813      	ldr	r3, [r2, #0]
 80085c2:	1c58      	adds	r0, r3, #1
 80085c4:	6010      	str	r0, [r2, #0]
 80085c6:	7019      	strb	r1, [r3, #0]
 80085c8:	b2c8      	uxtb	r0, r1
 80085ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <__sfputs_r>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	4606      	mov	r6, r0
 80085d4:	460f      	mov	r7, r1
 80085d6:	4614      	mov	r4, r2
 80085d8:	18d5      	adds	r5, r2, r3
 80085da:	42ac      	cmp	r4, r5
 80085dc:	d101      	bne.n	80085e2 <__sfputs_r+0x12>
 80085de:	2000      	movs	r0, #0
 80085e0:	e007      	b.n	80085f2 <__sfputs_r+0x22>
 80085e2:	463a      	mov	r2, r7
 80085e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7ff ffd9 	bl	80085a0 <__sfputc_r>
 80085ee:	1c43      	adds	r3, r0, #1
 80085f0:	d1f3      	bne.n	80085da <__sfputs_r+0xa>
 80085f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085f4 <_vfiprintf_r>:
 80085f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f8:	b09d      	sub	sp, #116	; 0x74
 80085fa:	460c      	mov	r4, r1
 80085fc:	4617      	mov	r7, r2
 80085fe:	9303      	str	r3, [sp, #12]
 8008600:	4606      	mov	r6, r0
 8008602:	b118      	cbz	r0, 800860c <_vfiprintf_r+0x18>
 8008604:	6983      	ldr	r3, [r0, #24]
 8008606:	b90b      	cbnz	r3, 800860c <_vfiprintf_r+0x18>
 8008608:	f7ff fb94 	bl	8007d34 <__sinit>
 800860c:	4b7c      	ldr	r3, [pc, #496]	; (8008800 <_vfiprintf_r+0x20c>)
 800860e:	429c      	cmp	r4, r3
 8008610:	d157      	bne.n	80086c2 <_vfiprintf_r+0xce>
 8008612:	6874      	ldr	r4, [r6, #4]
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	0718      	lsls	r0, r3, #28
 8008618:	d55d      	bpl.n	80086d6 <_vfiprintf_r+0xe2>
 800861a:	6923      	ldr	r3, [r4, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d05a      	beq.n	80086d6 <_vfiprintf_r+0xe2>
 8008620:	2300      	movs	r3, #0
 8008622:	9309      	str	r3, [sp, #36]	; 0x24
 8008624:	2320      	movs	r3, #32
 8008626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800862a:	2330      	movs	r3, #48	; 0x30
 800862c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008630:	f04f 0b01 	mov.w	fp, #1
 8008634:	46b8      	mov	r8, r7
 8008636:	4645      	mov	r5, r8
 8008638:	f815 3b01 	ldrb.w	r3, [r5], #1
 800863c:	2b00      	cmp	r3, #0
 800863e:	d155      	bne.n	80086ec <_vfiprintf_r+0xf8>
 8008640:	ebb8 0a07 	subs.w	sl, r8, r7
 8008644:	d00b      	beq.n	800865e <_vfiprintf_r+0x6a>
 8008646:	4653      	mov	r3, sl
 8008648:	463a      	mov	r2, r7
 800864a:	4621      	mov	r1, r4
 800864c:	4630      	mov	r0, r6
 800864e:	f7ff ffbf 	bl	80085d0 <__sfputs_r>
 8008652:	3001      	adds	r0, #1
 8008654:	f000 80c4 	beq.w	80087e0 <_vfiprintf_r+0x1ec>
 8008658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800865a:	4453      	add	r3, sl
 800865c:	9309      	str	r3, [sp, #36]	; 0x24
 800865e:	f898 3000 	ldrb.w	r3, [r8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	f000 80bc 	beq.w	80087e0 <_vfiprintf_r+0x1ec>
 8008668:	2300      	movs	r3, #0
 800866a:	f04f 32ff 	mov.w	r2, #4294967295
 800866e:	9304      	str	r3, [sp, #16]
 8008670:	9307      	str	r3, [sp, #28]
 8008672:	9205      	str	r2, [sp, #20]
 8008674:	9306      	str	r3, [sp, #24]
 8008676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800867a:	931a      	str	r3, [sp, #104]	; 0x68
 800867c:	2205      	movs	r2, #5
 800867e:	7829      	ldrb	r1, [r5, #0]
 8008680:	4860      	ldr	r0, [pc, #384]	; (8008804 <_vfiprintf_r+0x210>)
 8008682:	f7f7 fe0d 	bl	80002a0 <memchr>
 8008686:	f105 0801 	add.w	r8, r5, #1
 800868a:	9b04      	ldr	r3, [sp, #16]
 800868c:	2800      	cmp	r0, #0
 800868e:	d131      	bne.n	80086f4 <_vfiprintf_r+0x100>
 8008690:	06d9      	lsls	r1, r3, #27
 8008692:	bf44      	itt	mi
 8008694:	2220      	movmi	r2, #32
 8008696:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800869a:	071a      	lsls	r2, r3, #28
 800869c:	bf44      	itt	mi
 800869e:	222b      	movmi	r2, #43	; 0x2b
 80086a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80086a4:	782a      	ldrb	r2, [r5, #0]
 80086a6:	2a2a      	cmp	r2, #42	; 0x2a
 80086a8:	d02c      	beq.n	8008704 <_vfiprintf_r+0x110>
 80086aa:	9a07      	ldr	r2, [sp, #28]
 80086ac:	2100      	movs	r1, #0
 80086ae:	200a      	movs	r0, #10
 80086b0:	46a8      	mov	r8, r5
 80086b2:	3501      	adds	r5, #1
 80086b4:	f898 3000 	ldrb.w	r3, [r8]
 80086b8:	3b30      	subs	r3, #48	; 0x30
 80086ba:	2b09      	cmp	r3, #9
 80086bc:	d96d      	bls.n	800879a <_vfiprintf_r+0x1a6>
 80086be:	b371      	cbz	r1, 800871e <_vfiprintf_r+0x12a>
 80086c0:	e026      	b.n	8008710 <_vfiprintf_r+0x11c>
 80086c2:	4b51      	ldr	r3, [pc, #324]	; (8008808 <_vfiprintf_r+0x214>)
 80086c4:	429c      	cmp	r4, r3
 80086c6:	d101      	bne.n	80086cc <_vfiprintf_r+0xd8>
 80086c8:	68b4      	ldr	r4, [r6, #8]
 80086ca:	e7a3      	b.n	8008614 <_vfiprintf_r+0x20>
 80086cc:	4b4f      	ldr	r3, [pc, #316]	; (800880c <_vfiprintf_r+0x218>)
 80086ce:	429c      	cmp	r4, r3
 80086d0:	bf08      	it	eq
 80086d2:	68f4      	ldreq	r4, [r6, #12]
 80086d4:	e79e      	b.n	8008614 <_vfiprintf_r+0x20>
 80086d6:	4621      	mov	r1, r4
 80086d8:	4630      	mov	r0, r6
 80086da:	f000 f959 	bl	8008990 <__swsetup_r>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d09e      	beq.n	8008620 <_vfiprintf_r+0x2c>
 80086e2:	f04f 30ff 	mov.w	r0, #4294967295
 80086e6:	b01d      	add	sp, #116	; 0x74
 80086e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ec:	2b25      	cmp	r3, #37	; 0x25
 80086ee:	d0a7      	beq.n	8008640 <_vfiprintf_r+0x4c>
 80086f0:	46a8      	mov	r8, r5
 80086f2:	e7a0      	b.n	8008636 <_vfiprintf_r+0x42>
 80086f4:	4a43      	ldr	r2, [pc, #268]	; (8008804 <_vfiprintf_r+0x210>)
 80086f6:	1a80      	subs	r0, r0, r2
 80086f8:	fa0b f000 	lsl.w	r0, fp, r0
 80086fc:	4318      	orrs	r0, r3
 80086fe:	9004      	str	r0, [sp, #16]
 8008700:	4645      	mov	r5, r8
 8008702:	e7bb      	b.n	800867c <_vfiprintf_r+0x88>
 8008704:	9a03      	ldr	r2, [sp, #12]
 8008706:	1d11      	adds	r1, r2, #4
 8008708:	6812      	ldr	r2, [r2, #0]
 800870a:	9103      	str	r1, [sp, #12]
 800870c:	2a00      	cmp	r2, #0
 800870e:	db01      	blt.n	8008714 <_vfiprintf_r+0x120>
 8008710:	9207      	str	r2, [sp, #28]
 8008712:	e004      	b.n	800871e <_vfiprintf_r+0x12a>
 8008714:	4252      	negs	r2, r2
 8008716:	f043 0302 	orr.w	r3, r3, #2
 800871a:	9207      	str	r2, [sp, #28]
 800871c:	9304      	str	r3, [sp, #16]
 800871e:	f898 3000 	ldrb.w	r3, [r8]
 8008722:	2b2e      	cmp	r3, #46	; 0x2e
 8008724:	d110      	bne.n	8008748 <_vfiprintf_r+0x154>
 8008726:	f898 3001 	ldrb.w	r3, [r8, #1]
 800872a:	2b2a      	cmp	r3, #42	; 0x2a
 800872c:	f108 0101 	add.w	r1, r8, #1
 8008730:	d137      	bne.n	80087a2 <_vfiprintf_r+0x1ae>
 8008732:	9b03      	ldr	r3, [sp, #12]
 8008734:	1d1a      	adds	r2, r3, #4
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	9203      	str	r2, [sp, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	bfb8      	it	lt
 800873e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008742:	f108 0802 	add.w	r8, r8, #2
 8008746:	9305      	str	r3, [sp, #20]
 8008748:	4d31      	ldr	r5, [pc, #196]	; (8008810 <_vfiprintf_r+0x21c>)
 800874a:	f898 1000 	ldrb.w	r1, [r8]
 800874e:	2203      	movs	r2, #3
 8008750:	4628      	mov	r0, r5
 8008752:	f7f7 fda5 	bl	80002a0 <memchr>
 8008756:	b140      	cbz	r0, 800876a <_vfiprintf_r+0x176>
 8008758:	2340      	movs	r3, #64	; 0x40
 800875a:	1b40      	subs	r0, r0, r5
 800875c:	fa03 f000 	lsl.w	r0, r3, r0
 8008760:	9b04      	ldr	r3, [sp, #16]
 8008762:	4303      	orrs	r3, r0
 8008764:	9304      	str	r3, [sp, #16]
 8008766:	f108 0801 	add.w	r8, r8, #1
 800876a:	f898 1000 	ldrb.w	r1, [r8]
 800876e:	4829      	ldr	r0, [pc, #164]	; (8008814 <_vfiprintf_r+0x220>)
 8008770:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008774:	2206      	movs	r2, #6
 8008776:	f108 0701 	add.w	r7, r8, #1
 800877a:	f7f7 fd91 	bl	80002a0 <memchr>
 800877e:	2800      	cmp	r0, #0
 8008780:	d034      	beq.n	80087ec <_vfiprintf_r+0x1f8>
 8008782:	4b25      	ldr	r3, [pc, #148]	; (8008818 <_vfiprintf_r+0x224>)
 8008784:	bb03      	cbnz	r3, 80087c8 <_vfiprintf_r+0x1d4>
 8008786:	9b03      	ldr	r3, [sp, #12]
 8008788:	3307      	adds	r3, #7
 800878a:	f023 0307 	bic.w	r3, r3, #7
 800878e:	3308      	adds	r3, #8
 8008790:	9303      	str	r3, [sp, #12]
 8008792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008794:	444b      	add	r3, r9
 8008796:	9309      	str	r3, [sp, #36]	; 0x24
 8008798:	e74c      	b.n	8008634 <_vfiprintf_r+0x40>
 800879a:	fb00 3202 	mla	r2, r0, r2, r3
 800879e:	2101      	movs	r1, #1
 80087a0:	e786      	b.n	80086b0 <_vfiprintf_r+0xbc>
 80087a2:	2300      	movs	r3, #0
 80087a4:	9305      	str	r3, [sp, #20]
 80087a6:	4618      	mov	r0, r3
 80087a8:	250a      	movs	r5, #10
 80087aa:	4688      	mov	r8, r1
 80087ac:	3101      	adds	r1, #1
 80087ae:	f898 2000 	ldrb.w	r2, [r8]
 80087b2:	3a30      	subs	r2, #48	; 0x30
 80087b4:	2a09      	cmp	r2, #9
 80087b6:	d903      	bls.n	80087c0 <_vfiprintf_r+0x1cc>
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0c5      	beq.n	8008748 <_vfiprintf_r+0x154>
 80087bc:	9005      	str	r0, [sp, #20]
 80087be:	e7c3      	b.n	8008748 <_vfiprintf_r+0x154>
 80087c0:	fb05 2000 	mla	r0, r5, r0, r2
 80087c4:	2301      	movs	r3, #1
 80087c6:	e7f0      	b.n	80087aa <_vfiprintf_r+0x1b6>
 80087c8:	ab03      	add	r3, sp, #12
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	4622      	mov	r2, r4
 80087ce:	4b13      	ldr	r3, [pc, #76]	; (800881c <_vfiprintf_r+0x228>)
 80087d0:	a904      	add	r1, sp, #16
 80087d2:	4630      	mov	r0, r6
 80087d4:	f7fd fffa 	bl	80067cc <_printf_float>
 80087d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80087dc:	4681      	mov	r9, r0
 80087de:	d1d8      	bne.n	8008792 <_vfiprintf_r+0x19e>
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	065b      	lsls	r3, r3, #25
 80087e4:	f53f af7d 	bmi.w	80086e2 <_vfiprintf_r+0xee>
 80087e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087ea:	e77c      	b.n	80086e6 <_vfiprintf_r+0xf2>
 80087ec:	ab03      	add	r3, sp, #12
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	4622      	mov	r2, r4
 80087f2:	4b0a      	ldr	r3, [pc, #40]	; (800881c <_vfiprintf_r+0x228>)
 80087f4:	a904      	add	r1, sp, #16
 80087f6:	4630      	mov	r0, r6
 80087f8:	f7fe fa9e 	bl	8006d38 <_printf_i>
 80087fc:	e7ec      	b.n	80087d8 <_vfiprintf_r+0x1e4>
 80087fe:	bf00      	nop
 8008800:	0801e308 	.word	0x0801e308
 8008804:	0801e44c 	.word	0x0801e44c
 8008808:	0801e328 	.word	0x0801e328
 800880c:	0801e2e8 	.word	0x0801e2e8
 8008810:	0801e452 	.word	0x0801e452
 8008814:	0801e456 	.word	0x0801e456
 8008818:	080067cd 	.word	0x080067cd
 800881c:	080085d1 	.word	0x080085d1

08008820 <_sbrk_r>:
 8008820:	b538      	push	{r3, r4, r5, lr}
 8008822:	4c06      	ldr	r4, [pc, #24]	; (800883c <_sbrk_r+0x1c>)
 8008824:	2300      	movs	r3, #0
 8008826:	4605      	mov	r5, r0
 8008828:	4608      	mov	r0, r1
 800882a:	6023      	str	r3, [r4, #0]
 800882c:	f001 fec0 	bl	800a5b0 <_sbrk>
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d102      	bne.n	800883a <_sbrk_r+0x1a>
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	b103      	cbz	r3, 800883a <_sbrk_r+0x1a>
 8008838:	602b      	str	r3, [r5, #0]
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	20013038 	.word	0x20013038

08008840 <__sread>:
 8008840:	b510      	push	{r4, lr}
 8008842:	460c      	mov	r4, r1
 8008844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008848:	f000 fa5c 	bl	8008d04 <_read_r>
 800884c:	2800      	cmp	r0, #0
 800884e:	bfab      	itete	ge
 8008850:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008852:	89a3      	ldrhlt	r3, [r4, #12]
 8008854:	181b      	addge	r3, r3, r0
 8008856:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800885a:	bfac      	ite	ge
 800885c:	6563      	strge	r3, [r4, #84]	; 0x54
 800885e:	81a3      	strhlt	r3, [r4, #12]
 8008860:	bd10      	pop	{r4, pc}

08008862 <__swrite>:
 8008862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008866:	461f      	mov	r7, r3
 8008868:	898b      	ldrh	r3, [r1, #12]
 800886a:	05db      	lsls	r3, r3, #23
 800886c:	4605      	mov	r5, r0
 800886e:	460c      	mov	r4, r1
 8008870:	4616      	mov	r6, r2
 8008872:	d505      	bpl.n	8008880 <__swrite+0x1e>
 8008874:	2302      	movs	r3, #2
 8008876:	2200      	movs	r2, #0
 8008878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887c:	f000 f9b8 	bl	8008bf0 <_lseek_r>
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800888a:	81a3      	strh	r3, [r4, #12]
 800888c:	4632      	mov	r2, r6
 800888e:	463b      	mov	r3, r7
 8008890:	4628      	mov	r0, r5
 8008892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008896:	f000 b869 	b.w	800896c <_write_r>

0800889a <__sseek>:
 800889a:	b510      	push	{r4, lr}
 800889c:	460c      	mov	r4, r1
 800889e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a2:	f000 f9a5 	bl	8008bf0 <_lseek_r>
 80088a6:	1c43      	adds	r3, r0, #1
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	bf15      	itete	ne
 80088ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80088ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088b6:	81a3      	strheq	r3, [r4, #12]
 80088b8:	bf18      	it	ne
 80088ba:	81a3      	strhne	r3, [r4, #12]
 80088bc:	bd10      	pop	{r4, pc}

080088be <__sclose>:
 80088be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c2:	f000 b8d3 	b.w	8008a6c <_close_r>
	...

080088c8 <__swbuf_r>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	460e      	mov	r6, r1
 80088cc:	4614      	mov	r4, r2
 80088ce:	4605      	mov	r5, r0
 80088d0:	b118      	cbz	r0, 80088da <__swbuf_r+0x12>
 80088d2:	6983      	ldr	r3, [r0, #24]
 80088d4:	b90b      	cbnz	r3, 80088da <__swbuf_r+0x12>
 80088d6:	f7ff fa2d 	bl	8007d34 <__sinit>
 80088da:	4b21      	ldr	r3, [pc, #132]	; (8008960 <__swbuf_r+0x98>)
 80088dc:	429c      	cmp	r4, r3
 80088de:	d12a      	bne.n	8008936 <__swbuf_r+0x6e>
 80088e0:	686c      	ldr	r4, [r5, #4]
 80088e2:	69a3      	ldr	r3, [r4, #24]
 80088e4:	60a3      	str	r3, [r4, #8]
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	071a      	lsls	r2, r3, #28
 80088ea:	d52e      	bpl.n	800894a <__swbuf_r+0x82>
 80088ec:	6923      	ldr	r3, [r4, #16]
 80088ee:	b363      	cbz	r3, 800894a <__swbuf_r+0x82>
 80088f0:	6923      	ldr	r3, [r4, #16]
 80088f2:	6820      	ldr	r0, [r4, #0]
 80088f4:	1ac0      	subs	r0, r0, r3
 80088f6:	6963      	ldr	r3, [r4, #20]
 80088f8:	b2f6      	uxtb	r6, r6
 80088fa:	4298      	cmp	r0, r3
 80088fc:	4637      	mov	r7, r6
 80088fe:	db04      	blt.n	800890a <__swbuf_r+0x42>
 8008900:	4621      	mov	r1, r4
 8008902:	4628      	mov	r0, r5
 8008904:	f000 f94a 	bl	8008b9c <_fflush_r>
 8008908:	bb28      	cbnz	r0, 8008956 <__swbuf_r+0x8e>
 800890a:	68a3      	ldr	r3, [r4, #8]
 800890c:	3b01      	subs	r3, #1
 800890e:	60a3      	str	r3, [r4, #8]
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	6022      	str	r2, [r4, #0]
 8008916:	701e      	strb	r6, [r3, #0]
 8008918:	6963      	ldr	r3, [r4, #20]
 800891a:	3001      	adds	r0, #1
 800891c:	4298      	cmp	r0, r3
 800891e:	d004      	beq.n	800892a <__swbuf_r+0x62>
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	07db      	lsls	r3, r3, #31
 8008924:	d519      	bpl.n	800895a <__swbuf_r+0x92>
 8008926:	2e0a      	cmp	r6, #10
 8008928:	d117      	bne.n	800895a <__swbuf_r+0x92>
 800892a:	4621      	mov	r1, r4
 800892c:	4628      	mov	r0, r5
 800892e:	f000 f935 	bl	8008b9c <_fflush_r>
 8008932:	b190      	cbz	r0, 800895a <__swbuf_r+0x92>
 8008934:	e00f      	b.n	8008956 <__swbuf_r+0x8e>
 8008936:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <__swbuf_r+0x9c>)
 8008938:	429c      	cmp	r4, r3
 800893a:	d101      	bne.n	8008940 <__swbuf_r+0x78>
 800893c:	68ac      	ldr	r4, [r5, #8]
 800893e:	e7d0      	b.n	80088e2 <__swbuf_r+0x1a>
 8008940:	4b09      	ldr	r3, [pc, #36]	; (8008968 <__swbuf_r+0xa0>)
 8008942:	429c      	cmp	r4, r3
 8008944:	bf08      	it	eq
 8008946:	68ec      	ldreq	r4, [r5, #12]
 8008948:	e7cb      	b.n	80088e2 <__swbuf_r+0x1a>
 800894a:	4621      	mov	r1, r4
 800894c:	4628      	mov	r0, r5
 800894e:	f000 f81f 	bl	8008990 <__swsetup_r>
 8008952:	2800      	cmp	r0, #0
 8008954:	d0cc      	beq.n	80088f0 <__swbuf_r+0x28>
 8008956:	f04f 37ff 	mov.w	r7, #4294967295
 800895a:	4638      	mov	r0, r7
 800895c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800895e:	bf00      	nop
 8008960:	0801e308 	.word	0x0801e308
 8008964:	0801e328 	.word	0x0801e328
 8008968:	0801e2e8 	.word	0x0801e2e8

0800896c <_write_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4c07      	ldr	r4, [pc, #28]	; (800898c <_write_r+0x20>)
 8008970:	4605      	mov	r5, r0
 8008972:	4608      	mov	r0, r1
 8008974:	4611      	mov	r1, r2
 8008976:	2200      	movs	r2, #0
 8008978:	6022      	str	r2, [r4, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	f7fb feec 	bl	8004758 <_write>
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	d102      	bne.n	800898a <_write_r+0x1e>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	b103      	cbz	r3, 800898a <_write_r+0x1e>
 8008988:	602b      	str	r3, [r5, #0]
 800898a:	bd38      	pop	{r3, r4, r5, pc}
 800898c:	20013038 	.word	0x20013038

08008990 <__swsetup_r>:
 8008990:	4b32      	ldr	r3, [pc, #200]	; (8008a5c <__swsetup_r+0xcc>)
 8008992:	b570      	push	{r4, r5, r6, lr}
 8008994:	681d      	ldr	r5, [r3, #0]
 8008996:	4606      	mov	r6, r0
 8008998:	460c      	mov	r4, r1
 800899a:	b125      	cbz	r5, 80089a6 <__swsetup_r+0x16>
 800899c:	69ab      	ldr	r3, [r5, #24]
 800899e:	b913      	cbnz	r3, 80089a6 <__swsetup_r+0x16>
 80089a0:	4628      	mov	r0, r5
 80089a2:	f7ff f9c7 	bl	8007d34 <__sinit>
 80089a6:	4b2e      	ldr	r3, [pc, #184]	; (8008a60 <__swsetup_r+0xd0>)
 80089a8:	429c      	cmp	r4, r3
 80089aa:	d10f      	bne.n	80089cc <__swsetup_r+0x3c>
 80089ac:	686c      	ldr	r4, [r5, #4]
 80089ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	0715      	lsls	r5, r2, #28
 80089b6:	d42c      	bmi.n	8008a12 <__swsetup_r+0x82>
 80089b8:	06d0      	lsls	r0, r2, #27
 80089ba:	d411      	bmi.n	80089e0 <__swsetup_r+0x50>
 80089bc:	2209      	movs	r2, #9
 80089be:	6032      	str	r2, [r6, #0]
 80089c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ca:	bd70      	pop	{r4, r5, r6, pc}
 80089cc:	4b25      	ldr	r3, [pc, #148]	; (8008a64 <__swsetup_r+0xd4>)
 80089ce:	429c      	cmp	r4, r3
 80089d0:	d101      	bne.n	80089d6 <__swsetup_r+0x46>
 80089d2:	68ac      	ldr	r4, [r5, #8]
 80089d4:	e7eb      	b.n	80089ae <__swsetup_r+0x1e>
 80089d6:	4b24      	ldr	r3, [pc, #144]	; (8008a68 <__swsetup_r+0xd8>)
 80089d8:	429c      	cmp	r4, r3
 80089da:	bf08      	it	eq
 80089dc:	68ec      	ldreq	r4, [r5, #12]
 80089de:	e7e6      	b.n	80089ae <__swsetup_r+0x1e>
 80089e0:	0751      	lsls	r1, r2, #29
 80089e2:	d512      	bpl.n	8008a0a <__swsetup_r+0x7a>
 80089e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089e6:	b141      	cbz	r1, 80089fa <__swsetup_r+0x6a>
 80089e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089ec:	4299      	cmp	r1, r3
 80089ee:	d002      	beq.n	80089f6 <__swsetup_r+0x66>
 80089f0:	4630      	mov	r0, r6
 80089f2:	f7ff fd29 	bl	8008448 <_free_r>
 80089f6:	2300      	movs	r3, #0
 80089f8:	6363      	str	r3, [r4, #52]	; 0x34
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a00:	81a3      	strh	r3, [r4, #12]
 8008a02:	2300      	movs	r3, #0
 8008a04:	6063      	str	r3, [r4, #4]
 8008a06:	6923      	ldr	r3, [r4, #16]
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	89a3      	ldrh	r3, [r4, #12]
 8008a0c:	f043 0308 	orr.w	r3, r3, #8
 8008a10:	81a3      	strh	r3, [r4, #12]
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	b94b      	cbnz	r3, 8008a2a <__swsetup_r+0x9a>
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a20:	d003      	beq.n	8008a2a <__swsetup_r+0x9a>
 8008a22:	4621      	mov	r1, r4
 8008a24:	4630      	mov	r0, r6
 8008a26:	f000 f919 	bl	8008c5c <__smakebuf_r>
 8008a2a:	89a2      	ldrh	r2, [r4, #12]
 8008a2c:	f012 0301 	ands.w	r3, r2, #1
 8008a30:	d00c      	beq.n	8008a4c <__swsetup_r+0xbc>
 8008a32:	2300      	movs	r3, #0
 8008a34:	60a3      	str	r3, [r4, #8]
 8008a36:	6963      	ldr	r3, [r4, #20]
 8008a38:	425b      	negs	r3, r3
 8008a3a:	61a3      	str	r3, [r4, #24]
 8008a3c:	6923      	ldr	r3, [r4, #16]
 8008a3e:	b953      	cbnz	r3, 8008a56 <__swsetup_r+0xc6>
 8008a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a44:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008a48:	d1ba      	bne.n	80089c0 <__swsetup_r+0x30>
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}
 8008a4c:	0792      	lsls	r2, r2, #30
 8008a4e:	bf58      	it	pl
 8008a50:	6963      	ldrpl	r3, [r4, #20]
 8008a52:	60a3      	str	r3, [r4, #8]
 8008a54:	e7f2      	b.n	8008a3c <__swsetup_r+0xac>
 8008a56:	2000      	movs	r0, #0
 8008a58:	e7f7      	b.n	8008a4a <__swsetup_r+0xba>
 8008a5a:	bf00      	nop
 8008a5c:	20000018 	.word	0x20000018
 8008a60:	0801e308 	.word	0x0801e308
 8008a64:	0801e328 	.word	0x0801e328
 8008a68:	0801e2e8 	.word	0x0801e2e8

08008a6c <_close_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4c06      	ldr	r4, [pc, #24]	; (8008a88 <_close_r+0x1c>)
 8008a70:	2300      	movs	r3, #0
 8008a72:	4605      	mov	r5, r0
 8008a74:	4608      	mov	r0, r1
 8008a76:	6023      	str	r3, [r4, #0]
 8008a78:	f001 fd72 	bl	800a560 <_close>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d102      	bne.n	8008a86 <_close_r+0x1a>
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	b103      	cbz	r3, 8008a86 <_close_r+0x1a>
 8008a84:	602b      	str	r3, [r5, #0]
 8008a86:	bd38      	pop	{r3, r4, r5, pc}
 8008a88:	20013038 	.word	0x20013038

08008a8c <__sflush_r>:
 8008a8c:	898a      	ldrh	r2, [r1, #12]
 8008a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a92:	4605      	mov	r5, r0
 8008a94:	0710      	lsls	r0, r2, #28
 8008a96:	460c      	mov	r4, r1
 8008a98:	d45a      	bmi.n	8008b50 <__sflush_r+0xc4>
 8008a9a:	684b      	ldr	r3, [r1, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	dc05      	bgt.n	8008aac <__sflush_r+0x20>
 8008aa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	dc02      	bgt.n	8008aac <__sflush_r+0x20>
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aae:	2e00      	cmp	r6, #0
 8008ab0:	d0f9      	beq.n	8008aa6 <__sflush_r+0x1a>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ab8:	682f      	ldr	r7, [r5, #0]
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	d033      	beq.n	8008b26 <__sflush_r+0x9a>
 8008abe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	075a      	lsls	r2, r3, #29
 8008ac4:	d505      	bpl.n	8008ad2 <__sflush_r+0x46>
 8008ac6:	6863      	ldr	r3, [r4, #4]
 8008ac8:	1ac0      	subs	r0, r0, r3
 8008aca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008acc:	b10b      	cbz	r3, 8008ad2 <__sflush_r+0x46>
 8008ace:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ad0:	1ac0      	subs	r0, r0, r3
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ad8:	6a21      	ldr	r1, [r4, #32]
 8008ada:	4628      	mov	r0, r5
 8008adc:	47b0      	blx	r6
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	d106      	bne.n	8008af2 <__sflush_r+0x66>
 8008ae4:	6829      	ldr	r1, [r5, #0]
 8008ae6:	291d      	cmp	r1, #29
 8008ae8:	d84b      	bhi.n	8008b82 <__sflush_r+0xf6>
 8008aea:	4a2b      	ldr	r2, [pc, #172]	; (8008b98 <__sflush_r+0x10c>)
 8008aec:	40ca      	lsrs	r2, r1
 8008aee:	07d6      	lsls	r6, r2, #31
 8008af0:	d547      	bpl.n	8008b82 <__sflush_r+0xf6>
 8008af2:	2200      	movs	r2, #0
 8008af4:	6062      	str	r2, [r4, #4]
 8008af6:	04d9      	lsls	r1, r3, #19
 8008af8:	6922      	ldr	r2, [r4, #16]
 8008afa:	6022      	str	r2, [r4, #0]
 8008afc:	d504      	bpl.n	8008b08 <__sflush_r+0x7c>
 8008afe:	1c42      	adds	r2, r0, #1
 8008b00:	d101      	bne.n	8008b06 <__sflush_r+0x7a>
 8008b02:	682b      	ldr	r3, [r5, #0]
 8008b04:	b903      	cbnz	r3, 8008b08 <__sflush_r+0x7c>
 8008b06:	6560      	str	r0, [r4, #84]	; 0x54
 8008b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b0a:	602f      	str	r7, [r5, #0]
 8008b0c:	2900      	cmp	r1, #0
 8008b0e:	d0ca      	beq.n	8008aa6 <__sflush_r+0x1a>
 8008b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b14:	4299      	cmp	r1, r3
 8008b16:	d002      	beq.n	8008b1e <__sflush_r+0x92>
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f7ff fc95 	bl	8008448 <_free_r>
 8008b1e:	2000      	movs	r0, #0
 8008b20:	6360      	str	r0, [r4, #52]	; 0x34
 8008b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b26:	6a21      	ldr	r1, [r4, #32]
 8008b28:	2301      	movs	r3, #1
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b0      	blx	r6
 8008b2e:	1c41      	adds	r1, r0, #1
 8008b30:	d1c6      	bne.n	8008ac0 <__sflush_r+0x34>
 8008b32:	682b      	ldr	r3, [r5, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d0c3      	beq.n	8008ac0 <__sflush_r+0x34>
 8008b38:	2b1d      	cmp	r3, #29
 8008b3a:	d001      	beq.n	8008b40 <__sflush_r+0xb4>
 8008b3c:	2b16      	cmp	r3, #22
 8008b3e:	d101      	bne.n	8008b44 <__sflush_r+0xb8>
 8008b40:	602f      	str	r7, [r5, #0]
 8008b42:	e7b0      	b.n	8008aa6 <__sflush_r+0x1a>
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b50:	690f      	ldr	r7, [r1, #16]
 8008b52:	2f00      	cmp	r7, #0
 8008b54:	d0a7      	beq.n	8008aa6 <__sflush_r+0x1a>
 8008b56:	0793      	lsls	r3, r2, #30
 8008b58:	680e      	ldr	r6, [r1, #0]
 8008b5a:	bf08      	it	eq
 8008b5c:	694b      	ldreq	r3, [r1, #20]
 8008b5e:	600f      	str	r7, [r1, #0]
 8008b60:	bf18      	it	ne
 8008b62:	2300      	movne	r3, #0
 8008b64:	eba6 0807 	sub.w	r8, r6, r7
 8008b68:	608b      	str	r3, [r1, #8]
 8008b6a:	f1b8 0f00 	cmp.w	r8, #0
 8008b6e:	dd9a      	ble.n	8008aa6 <__sflush_r+0x1a>
 8008b70:	4643      	mov	r3, r8
 8008b72:	463a      	mov	r2, r7
 8008b74:	6a21      	ldr	r1, [r4, #32]
 8008b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b0      	blx	r6
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	dc07      	bgt.n	8008b90 <__sflush_r+0x104>
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b86:	81a3      	strh	r3, [r4, #12]
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b90:	4407      	add	r7, r0
 8008b92:	eba8 0800 	sub.w	r8, r8, r0
 8008b96:	e7e8      	b.n	8008b6a <__sflush_r+0xde>
 8008b98:	20400001 	.word	0x20400001

08008b9c <_fflush_r>:
 8008b9c:	b538      	push	{r3, r4, r5, lr}
 8008b9e:	690b      	ldr	r3, [r1, #16]
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	b1db      	cbz	r3, 8008bde <_fflush_r+0x42>
 8008ba6:	b118      	cbz	r0, 8008bb0 <_fflush_r+0x14>
 8008ba8:	6983      	ldr	r3, [r0, #24]
 8008baa:	b90b      	cbnz	r3, 8008bb0 <_fflush_r+0x14>
 8008bac:	f7ff f8c2 	bl	8007d34 <__sinit>
 8008bb0:	4b0c      	ldr	r3, [pc, #48]	; (8008be4 <_fflush_r+0x48>)
 8008bb2:	429c      	cmp	r4, r3
 8008bb4:	d109      	bne.n	8008bca <_fflush_r+0x2e>
 8008bb6:	686c      	ldr	r4, [r5, #4]
 8008bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bbc:	b17b      	cbz	r3, 8008bde <_fflush_r+0x42>
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bc6:	f7ff bf61 	b.w	8008a8c <__sflush_r>
 8008bca:	4b07      	ldr	r3, [pc, #28]	; (8008be8 <_fflush_r+0x4c>)
 8008bcc:	429c      	cmp	r4, r3
 8008bce:	d101      	bne.n	8008bd4 <_fflush_r+0x38>
 8008bd0:	68ac      	ldr	r4, [r5, #8]
 8008bd2:	e7f1      	b.n	8008bb8 <_fflush_r+0x1c>
 8008bd4:	4b05      	ldr	r3, [pc, #20]	; (8008bec <_fflush_r+0x50>)
 8008bd6:	429c      	cmp	r4, r3
 8008bd8:	bf08      	it	eq
 8008bda:	68ec      	ldreq	r4, [r5, #12]
 8008bdc:	e7ec      	b.n	8008bb8 <_fflush_r+0x1c>
 8008bde:	2000      	movs	r0, #0
 8008be0:	bd38      	pop	{r3, r4, r5, pc}
 8008be2:	bf00      	nop
 8008be4:	0801e308 	.word	0x0801e308
 8008be8:	0801e328 	.word	0x0801e328
 8008bec:	0801e2e8 	.word	0x0801e2e8

08008bf0 <_lseek_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4c07      	ldr	r4, [pc, #28]	; (8008c10 <_lseek_r+0x20>)
 8008bf4:	4605      	mov	r5, r0
 8008bf6:	4608      	mov	r0, r1
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	6022      	str	r2, [r4, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f001 fcc6 	bl	800a590 <_lseek>
 8008c04:	1c43      	adds	r3, r0, #1
 8008c06:	d102      	bne.n	8008c0e <_lseek_r+0x1e>
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	b103      	cbz	r3, 8008c0e <_lseek_r+0x1e>
 8008c0c:	602b      	str	r3, [r5, #0]
 8008c0e:	bd38      	pop	{r3, r4, r5, pc}
 8008c10:	20013038 	.word	0x20013038

08008c14 <__swhatbuf_r>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	460e      	mov	r6, r1
 8008c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c1c:	2900      	cmp	r1, #0
 8008c1e:	b090      	sub	sp, #64	; 0x40
 8008c20:	4614      	mov	r4, r2
 8008c22:	461d      	mov	r5, r3
 8008c24:	da07      	bge.n	8008c36 <__swhatbuf_r+0x22>
 8008c26:	2300      	movs	r3, #0
 8008c28:	602b      	str	r3, [r5, #0]
 8008c2a:	89b3      	ldrh	r3, [r6, #12]
 8008c2c:	061a      	lsls	r2, r3, #24
 8008c2e:	d410      	bmi.n	8008c52 <__swhatbuf_r+0x3e>
 8008c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c34:	e00e      	b.n	8008c54 <__swhatbuf_r+0x40>
 8008c36:	aa01      	add	r2, sp, #4
 8008c38:	f000 f884 	bl	8008d44 <_fstat_r>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	dbf2      	blt.n	8008c26 <__swhatbuf_r+0x12>
 8008c40:	9a02      	ldr	r2, [sp, #8]
 8008c42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c4a:	425a      	negs	r2, r3
 8008c4c:	415a      	adcs	r2, r3
 8008c4e:	602a      	str	r2, [r5, #0]
 8008c50:	e7ee      	b.n	8008c30 <__swhatbuf_r+0x1c>
 8008c52:	2340      	movs	r3, #64	; 0x40
 8008c54:	2000      	movs	r0, #0
 8008c56:	6023      	str	r3, [r4, #0]
 8008c58:	b010      	add	sp, #64	; 0x40
 8008c5a:	bd70      	pop	{r4, r5, r6, pc}

08008c5c <__smakebuf_r>:
 8008c5c:	898b      	ldrh	r3, [r1, #12]
 8008c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c60:	079d      	lsls	r5, r3, #30
 8008c62:	4606      	mov	r6, r0
 8008c64:	460c      	mov	r4, r1
 8008c66:	d507      	bpl.n	8008c78 <__smakebuf_r+0x1c>
 8008c68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	6123      	str	r3, [r4, #16]
 8008c70:	2301      	movs	r3, #1
 8008c72:	6163      	str	r3, [r4, #20]
 8008c74:	b002      	add	sp, #8
 8008c76:	bd70      	pop	{r4, r5, r6, pc}
 8008c78:	ab01      	add	r3, sp, #4
 8008c7a:	466a      	mov	r2, sp
 8008c7c:	f7ff ffca 	bl	8008c14 <__swhatbuf_r>
 8008c80:	9900      	ldr	r1, [sp, #0]
 8008c82:	4605      	mov	r5, r0
 8008c84:	4630      	mov	r0, r6
 8008c86:	f7ff fc2d 	bl	80084e4 <_malloc_r>
 8008c8a:	b948      	cbnz	r0, 8008ca0 <__smakebuf_r+0x44>
 8008c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c90:	059a      	lsls	r2, r3, #22
 8008c92:	d4ef      	bmi.n	8008c74 <__smakebuf_r+0x18>
 8008c94:	f023 0303 	bic.w	r3, r3, #3
 8008c98:	f043 0302 	orr.w	r3, r3, #2
 8008c9c:	81a3      	strh	r3, [r4, #12]
 8008c9e:	e7e3      	b.n	8008c68 <__smakebuf_r+0xc>
 8008ca0:	4b0d      	ldr	r3, [pc, #52]	; (8008cd8 <__smakebuf_r+0x7c>)
 8008ca2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	6020      	str	r0, [r4, #0]
 8008ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	9b00      	ldr	r3, [sp, #0]
 8008cb0:	6163      	str	r3, [r4, #20]
 8008cb2:	9b01      	ldr	r3, [sp, #4]
 8008cb4:	6120      	str	r0, [r4, #16]
 8008cb6:	b15b      	cbz	r3, 8008cd0 <__smakebuf_r+0x74>
 8008cb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f000 f853 	bl	8008d68 <_isatty_r>
 8008cc2:	b128      	cbz	r0, 8008cd0 <__smakebuf_r+0x74>
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	f023 0303 	bic.w	r3, r3, #3
 8008cca:	f043 0301 	orr.w	r3, r3, #1
 8008cce:	81a3      	strh	r3, [r4, #12]
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	431d      	orrs	r5, r3
 8008cd4:	81a5      	strh	r5, [r4, #12]
 8008cd6:	e7cd      	b.n	8008c74 <__smakebuf_r+0x18>
 8008cd8:	08007cb5 	.word	0x08007cb5

08008cdc <__ascii_mbtowc>:
 8008cdc:	b082      	sub	sp, #8
 8008cde:	b901      	cbnz	r1, 8008ce2 <__ascii_mbtowc+0x6>
 8008ce0:	a901      	add	r1, sp, #4
 8008ce2:	b142      	cbz	r2, 8008cf6 <__ascii_mbtowc+0x1a>
 8008ce4:	b14b      	cbz	r3, 8008cfa <__ascii_mbtowc+0x1e>
 8008ce6:	7813      	ldrb	r3, [r2, #0]
 8008ce8:	600b      	str	r3, [r1, #0]
 8008cea:	7812      	ldrb	r2, [r2, #0]
 8008cec:	1c10      	adds	r0, r2, #0
 8008cee:	bf18      	it	ne
 8008cf0:	2001      	movne	r0, #1
 8008cf2:	b002      	add	sp, #8
 8008cf4:	4770      	bx	lr
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	e7fb      	b.n	8008cf2 <__ascii_mbtowc+0x16>
 8008cfa:	f06f 0001 	mvn.w	r0, #1
 8008cfe:	e7f8      	b.n	8008cf2 <__ascii_mbtowc+0x16>

08008d00 <__malloc_lock>:
 8008d00:	4770      	bx	lr

08008d02 <__malloc_unlock>:
 8008d02:	4770      	bx	lr

08008d04 <_read_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4c07      	ldr	r4, [pc, #28]	; (8008d24 <_read_r+0x20>)
 8008d08:	4605      	mov	r5, r0
 8008d0a:	4608      	mov	r0, r1
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	2200      	movs	r2, #0
 8008d10:	6022      	str	r2, [r4, #0]
 8008d12:	461a      	mov	r2, r3
 8008d14:	f001 fc44 	bl	800a5a0 <_read>
 8008d18:	1c43      	adds	r3, r0, #1
 8008d1a:	d102      	bne.n	8008d22 <_read_r+0x1e>
 8008d1c:	6823      	ldr	r3, [r4, #0]
 8008d1e:	b103      	cbz	r3, 8008d22 <_read_r+0x1e>
 8008d20:	602b      	str	r3, [r5, #0]
 8008d22:	bd38      	pop	{r3, r4, r5, pc}
 8008d24:	20013038 	.word	0x20013038

08008d28 <__ascii_wctomb>:
 8008d28:	b149      	cbz	r1, 8008d3e <__ascii_wctomb+0x16>
 8008d2a:	2aff      	cmp	r2, #255	; 0xff
 8008d2c:	bf85      	ittet	hi
 8008d2e:	238a      	movhi	r3, #138	; 0x8a
 8008d30:	6003      	strhi	r3, [r0, #0]
 8008d32:	700a      	strbls	r2, [r1, #0]
 8008d34:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d38:	bf98      	it	ls
 8008d3a:	2001      	movls	r0, #1
 8008d3c:	4770      	bx	lr
 8008d3e:	4608      	mov	r0, r1
 8008d40:	4770      	bx	lr
	...

08008d44 <_fstat_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4c07      	ldr	r4, [pc, #28]	; (8008d64 <_fstat_r+0x20>)
 8008d48:	2300      	movs	r3, #0
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	4608      	mov	r0, r1
 8008d4e:	4611      	mov	r1, r2
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	f001 fc0d 	bl	800a570 <_fstat>
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	d102      	bne.n	8008d60 <_fstat_r+0x1c>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	b103      	cbz	r3, 8008d60 <_fstat_r+0x1c>
 8008d5e:	602b      	str	r3, [r5, #0]
 8008d60:	bd38      	pop	{r3, r4, r5, pc}
 8008d62:	bf00      	nop
 8008d64:	20013038 	.word	0x20013038

08008d68 <_isatty_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4c06      	ldr	r4, [pc, #24]	; (8008d84 <_isatty_r+0x1c>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4605      	mov	r5, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	6023      	str	r3, [r4, #0]
 8008d74:	f001 fc04 	bl	800a580 <_isatty>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_isatty_r+0x1a>
 8008d7c:	6823      	ldr	r3, [r4, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_isatty_r+0x1a>
 8008d80:	602b      	str	r3, [r5, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	20013038 	.word	0x20013038

08008d88 <log10>:
 8008d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d8a:	ed2d 8b02 	vpush	{d8}
 8008d8e:	b08b      	sub	sp, #44	; 0x2c
 8008d90:	ec55 4b10 	vmov	r4, r5, d0
 8008d94:	f000 fa40 	bl	8009218 <__ieee754_log10>
 8008d98:	4b36      	ldr	r3, [pc, #216]	; (8008e74 <log10+0xec>)
 8008d9a:	eeb0 8a40 	vmov.f32	s16, s0
 8008d9e:	eef0 8a60 	vmov.f32	s17, s1
 8008da2:	f993 6000 	ldrsb.w	r6, [r3]
 8008da6:	1c73      	adds	r3, r6, #1
 8008da8:	d05c      	beq.n	8008e64 <log10+0xdc>
 8008daa:	4622      	mov	r2, r4
 8008dac:	462b      	mov	r3, r5
 8008dae:	4620      	mov	r0, r4
 8008db0:	4629      	mov	r1, r5
 8008db2:	f7f7 ff17 	bl	8000be4 <__aeabi_dcmpun>
 8008db6:	4607      	mov	r7, r0
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d153      	bne.n	8008e64 <log10+0xdc>
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	f7f7 fef0 	bl	8000ba8 <__aeabi_dcmple>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d04b      	beq.n	8008e64 <log10+0xdc>
 8008dcc:	4b2a      	ldr	r3, [pc, #168]	; (8008e78 <log10+0xf0>)
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	9708      	str	r7, [sp, #32]
 8008dd2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008dd6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008dda:	b9a6      	cbnz	r6, 8008e06 <log10+0x7e>
 8008ddc:	4b27      	ldr	r3, [pc, #156]	; (8008e7c <log10+0xf4>)
 8008dde:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008de2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008de6:	4620      	mov	r0, r4
 8008de8:	2200      	movs	r2, #0
 8008dea:	2300      	movs	r3, #0
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7f7 fec7 	bl	8000b80 <__aeabi_dcmpeq>
 8008df2:	bb40      	cbnz	r0, 8008e46 <log10+0xbe>
 8008df4:	2301      	movs	r3, #1
 8008df6:	2e02      	cmp	r6, #2
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	d119      	bne.n	8008e30 <log10+0xa8>
 8008dfc:	f001 fbaa 	bl	800a554 <__errno>
 8008e00:	2321      	movs	r3, #33	; 0x21
 8008e02:	6003      	str	r3, [r0, #0]
 8008e04:	e019      	b.n	8008e3a <log10+0xb2>
 8008e06:	4b1e      	ldr	r3, [pc, #120]	; (8008e80 <log10+0xf8>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e0e:	4620      	mov	r0, r4
 8008e10:	2200      	movs	r2, #0
 8008e12:	2300      	movs	r3, #0
 8008e14:	4629      	mov	r1, r5
 8008e16:	f7f7 feb3 	bl	8000b80 <__aeabi_dcmpeq>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d0ea      	beq.n	8008df4 <log10+0x6c>
 8008e1e:	2302      	movs	r3, #2
 8008e20:	429e      	cmp	r6, r3
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	d111      	bne.n	8008e4a <log10+0xc2>
 8008e26:	f001 fb95 	bl	800a554 <__errno>
 8008e2a:	2322      	movs	r3, #34	; 0x22
 8008e2c:	6003      	str	r3, [r0, #0]
 8008e2e:	e011      	b.n	8008e54 <log10+0xcc>
 8008e30:	4668      	mov	r0, sp
 8008e32:	f001 f899 	bl	8009f68 <matherr>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d0e0      	beq.n	8008dfc <log10+0x74>
 8008e3a:	4812      	ldr	r0, [pc, #72]	; (8008e84 <log10+0xfc>)
 8008e3c:	f001 f898 	bl	8009f70 <nan>
 8008e40:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008e44:	e006      	b.n	8008e54 <log10+0xcc>
 8008e46:	2302      	movs	r3, #2
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	4668      	mov	r0, sp
 8008e4c:	f001 f88c 	bl	8009f68 <matherr>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d0e8      	beq.n	8008e26 <log10+0x9e>
 8008e54:	9b08      	ldr	r3, [sp, #32]
 8008e56:	b11b      	cbz	r3, 8008e60 <log10+0xd8>
 8008e58:	f001 fb7c 	bl	800a554 <__errno>
 8008e5c:	9b08      	ldr	r3, [sp, #32]
 8008e5e:	6003      	str	r3, [r0, #0]
 8008e60:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008e64:	eeb0 0a48 	vmov.f32	s0, s16
 8008e68:	eef0 0a68 	vmov.f32	s1, s17
 8008e6c:	b00b      	add	sp, #44	; 0x2c
 8008e6e:	ecbd 8b02 	vpop	{d8}
 8008e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e74:	200001e8 	.word	0x200001e8
 8008e78:	0801e568 	.word	0x0801e568
 8008e7c:	c7efffff 	.word	0xc7efffff
 8008e80:	fff00000 	.word	0xfff00000
 8008e84:	0800a601 	.word	0x0800a601

08008e88 <pow>:
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	ed2d 8b04 	vpush	{d8-d9}
 8008e90:	b08d      	sub	sp, #52	; 0x34
 8008e92:	ec57 6b10 	vmov	r6, r7, d0
 8008e96:	ec55 4b11 	vmov	r4, r5, d1
 8008e9a:	f000 fa4d 	bl	8009338 <__ieee754_pow>
 8008e9e:	4bae      	ldr	r3, [pc, #696]	; (8009158 <pow+0x2d0>)
 8008ea0:	eeb0 8a40 	vmov.f32	s16, s0
 8008ea4:	eef0 8a60 	vmov.f32	s17, s1
 8008ea8:	f993 9000 	ldrsb.w	r9, [r3]
 8008eac:	f1b9 3fff 	cmp.w	r9, #4294967295
 8008eb0:	4698      	mov	r8, r3
 8008eb2:	d05f      	beq.n	8008f74 <pow+0xec>
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	462b      	mov	r3, r5
 8008eb8:	4620      	mov	r0, r4
 8008eba:	4629      	mov	r1, r5
 8008ebc:	f7f7 fe92 	bl	8000be4 <__aeabi_dcmpun>
 8008ec0:	4683      	mov	fp, r0
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	d156      	bne.n	8008f74 <pow+0xec>
 8008ec6:	4632      	mov	r2, r6
 8008ec8:	463b      	mov	r3, r7
 8008eca:	4630      	mov	r0, r6
 8008ecc:	4639      	mov	r1, r7
 8008ece:	f7f7 fe89 	bl	8000be4 <__aeabi_dcmpun>
 8008ed2:	9001      	str	r0, [sp, #4]
 8008ed4:	b1e8      	cbz	r0, 8008f12 <pow+0x8a>
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	2300      	movs	r3, #0
 8008eda:	4620      	mov	r0, r4
 8008edc:	4629      	mov	r1, r5
 8008ede:	f7f7 fe4f 	bl	8000b80 <__aeabi_dcmpeq>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d046      	beq.n	8008f74 <pow+0xec>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	9302      	str	r3, [sp, #8]
 8008eea:	4b9c      	ldr	r3, [pc, #624]	; (800915c <pow+0x2d4>)
 8008eec:	9303      	str	r3, [sp, #12]
 8008eee:	4b9c      	ldr	r3, [pc, #624]	; (8009160 <pow+0x2d8>)
 8008ef0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f1b9 0f02 	cmp.w	r9, #2
 8008efa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008efe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008f02:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f06:	d033      	beq.n	8008f70 <pow+0xe8>
 8008f08:	a802      	add	r0, sp, #8
 8008f0a:	f001 f82d 	bl	8009f68 <matherr>
 8008f0e:	bb48      	cbnz	r0, 8008f64 <pow+0xdc>
 8008f10:	e05e      	b.n	8008fd0 <pow+0x148>
 8008f12:	f04f 0a00 	mov.w	sl, #0
 8008f16:	f04f 0b00 	mov.w	fp, #0
 8008f1a:	4652      	mov	r2, sl
 8008f1c:	465b      	mov	r3, fp
 8008f1e:	4630      	mov	r0, r6
 8008f20:	4639      	mov	r1, r7
 8008f22:	f7f7 fe2d 	bl	8000b80 <__aeabi_dcmpeq>
 8008f26:	ec4b ab19 	vmov	d9, sl, fp
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d055      	beq.n	8008fda <pow+0x152>
 8008f2e:	4652      	mov	r2, sl
 8008f30:	465b      	mov	r3, fp
 8008f32:	4620      	mov	r0, r4
 8008f34:	4629      	mov	r1, r5
 8008f36:	f7f7 fe23 	bl	8000b80 <__aeabi_dcmpeq>
 8008f3a:	4680      	mov	r8, r0
 8008f3c:	b318      	cbz	r0, 8008f86 <pow+0xfe>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	9302      	str	r3, [sp, #8]
 8008f42:	4b86      	ldr	r3, [pc, #536]	; (800915c <pow+0x2d4>)
 8008f44:	9303      	str	r3, [sp, #12]
 8008f46:	9b01      	ldr	r3, [sp, #4]
 8008f48:	930a      	str	r3, [sp, #40]	; 0x28
 8008f4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008f4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008f52:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008f56:	f1b9 0f00 	cmp.w	r9, #0
 8008f5a:	d0d5      	beq.n	8008f08 <pow+0x80>
 8008f5c:	4b80      	ldr	r3, [pc, #512]	; (8009160 <pow+0x2d8>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f66:	b11b      	cbz	r3, 8008f70 <pow+0xe8>
 8008f68:	f001 faf4 	bl	800a554 <__errno>
 8008f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f6e:	6003      	str	r3, [r0, #0]
 8008f70:	ed9d 8b08 	vldr	d8, [sp, #32]
 8008f74:	eeb0 0a48 	vmov.f32	s0, s16
 8008f78:	eef0 0a68 	vmov.f32	s1, s17
 8008f7c:	b00d      	add	sp, #52	; 0x34
 8008f7e:	ecbd 8b04 	vpop	{d8-d9}
 8008f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f86:	ec45 4b10 	vmov	d0, r4, r5
 8008f8a:	f000 ffe5 	bl	8009f58 <finite>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d0f0      	beq.n	8008f74 <pow+0xec>
 8008f92:	4652      	mov	r2, sl
 8008f94:	465b      	mov	r3, fp
 8008f96:	4620      	mov	r0, r4
 8008f98:	4629      	mov	r1, r5
 8008f9a:	f7f7 fdfb 	bl	8000b94 <__aeabi_dcmplt>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d0e8      	beq.n	8008f74 <pow+0xec>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	9302      	str	r3, [sp, #8]
 8008fa6:	4b6d      	ldr	r3, [pc, #436]	; (800915c <pow+0x2d4>)
 8008fa8:	9303      	str	r3, [sp, #12]
 8008faa:	4b6b      	ldr	r3, [pc, #428]	; (8009158 <pow+0x2d0>)
 8008fac:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008fb0:	f993 3000 	ldrsb.w	r3, [r3]
 8008fb4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008fb8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008fbc:	b913      	cbnz	r3, 8008fc4 <pow+0x13c>
 8008fbe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008fc2:	e7a1      	b.n	8008f08 <pow+0x80>
 8008fc4:	4967      	ldr	r1, [pc, #412]	; (8009164 <pow+0x2dc>)
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d19b      	bne.n	8008f08 <pow+0x80>
 8008fd0:	f001 fac0 	bl	800a554 <__errno>
 8008fd4:	2321      	movs	r3, #33	; 0x21
 8008fd6:	6003      	str	r3, [r0, #0]
 8008fd8:	e7c4      	b.n	8008f64 <pow+0xdc>
 8008fda:	eeb0 0a48 	vmov.f32	s0, s16
 8008fde:	eef0 0a68 	vmov.f32	s1, s17
 8008fe2:	f000 ffb9 	bl	8009f58 <finite>
 8008fe6:	9001      	str	r0, [sp, #4]
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	f040 808a 	bne.w	8009102 <pow+0x27a>
 8008fee:	ec47 6b10 	vmov	d0, r6, r7
 8008ff2:	f000 ffb1 	bl	8009f58 <finite>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f000 8083 	beq.w	8009102 <pow+0x27a>
 8008ffc:	ec45 4b10 	vmov	d0, r4, r5
 8009000:	f000 ffaa 	bl	8009f58 <finite>
 8009004:	2800      	cmp	r0, #0
 8009006:	d07c      	beq.n	8009102 <pow+0x27a>
 8009008:	ec53 2b18 	vmov	r2, r3, d8
 800900c:	ee18 0a10 	vmov	r0, s16
 8009010:	4619      	mov	r1, r3
 8009012:	f7f7 fde7 	bl	8000be4 <__aeabi_dcmpun>
 8009016:	f998 9000 	ldrsb.w	r9, [r8]
 800901a:	4b50      	ldr	r3, [pc, #320]	; (800915c <pow+0x2d4>)
 800901c:	b1b0      	cbz	r0, 800904c <pow+0x1c4>
 800901e:	2201      	movs	r2, #1
 8009020:	9303      	str	r3, [sp, #12]
 8009022:	9b01      	ldr	r3, [sp, #4]
 8009024:	9202      	str	r2, [sp, #8]
 8009026:	930a      	str	r3, [sp, #40]	; 0x28
 8009028:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800902c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009030:	f1b9 0f00 	cmp.w	r9, #0
 8009034:	d0c3      	beq.n	8008fbe <pow+0x136>
 8009036:	4652      	mov	r2, sl
 8009038:	465b      	mov	r3, fp
 800903a:	4650      	mov	r0, sl
 800903c:	4659      	mov	r1, fp
 800903e:	f7f7 fc61 	bl	8000904 <__aeabi_ddiv>
 8009042:	f1b9 0f02 	cmp.w	r9, #2
 8009046:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800904a:	e7c0      	b.n	8008fce <pow+0x146>
 800904c:	2203      	movs	r2, #3
 800904e:	9202      	str	r2, [sp, #8]
 8009050:	9303      	str	r3, [sp, #12]
 8009052:	900a      	str	r0, [sp, #40]	; 0x28
 8009054:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009058:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800905c:	f1b9 0f00 	cmp.w	r9, #0
 8009060:	d12c      	bne.n	80090bc <pow+0x234>
 8009062:	4b41      	ldr	r3, [pc, #260]	; (8009168 <pow+0x2e0>)
 8009064:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009068:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800906c:	4630      	mov	r0, r6
 800906e:	4652      	mov	r2, sl
 8009070:	465b      	mov	r3, fp
 8009072:	4639      	mov	r1, r7
 8009074:	f7f7 fd8e 	bl	8000b94 <__aeabi_dcmplt>
 8009078:	2800      	cmp	r0, #0
 800907a:	d066      	beq.n	800914a <pow+0x2c2>
 800907c:	2200      	movs	r2, #0
 800907e:	4b3b      	ldr	r3, [pc, #236]	; (800916c <pow+0x2e4>)
 8009080:	4620      	mov	r0, r4
 8009082:	4629      	mov	r1, r5
 8009084:	f7f7 fb14 	bl	80006b0 <__aeabi_dmul>
 8009088:	4604      	mov	r4, r0
 800908a:	460d      	mov	r5, r1
 800908c:	ec45 4b10 	vmov	d0, r4, r5
 8009090:	f000 ff76 	bl	8009f80 <rint>
 8009094:	4620      	mov	r0, r4
 8009096:	ec53 2b10 	vmov	r2, r3, d0
 800909a:	4629      	mov	r1, r5
 800909c:	f7f7 fd70 	bl	8000b80 <__aeabi_dcmpeq>
 80090a0:	b920      	cbnz	r0, 80090ac <pow+0x224>
 80090a2:	4b33      	ldr	r3, [pc, #204]	; (8009170 <pow+0x2e8>)
 80090a4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80090a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80090ac:	f998 3000 	ldrsb.w	r3, [r8]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d14a      	bne.n	800914a <pow+0x2c2>
 80090b4:	f001 fa4e 	bl	800a554 <__errno>
 80090b8:	2322      	movs	r3, #34	; 0x22
 80090ba:	e78c      	b.n	8008fd6 <pow+0x14e>
 80090bc:	4b2d      	ldr	r3, [pc, #180]	; (8009174 <pow+0x2ec>)
 80090be:	2200      	movs	r2, #0
 80090c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80090c4:	4630      	mov	r0, r6
 80090c6:	4652      	mov	r2, sl
 80090c8:	465b      	mov	r3, fp
 80090ca:	4639      	mov	r1, r7
 80090cc:	f7f7 fd62 	bl	8000b94 <__aeabi_dcmplt>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d0eb      	beq.n	80090ac <pow+0x224>
 80090d4:	2200      	movs	r2, #0
 80090d6:	4b25      	ldr	r3, [pc, #148]	; (800916c <pow+0x2e4>)
 80090d8:	4620      	mov	r0, r4
 80090da:	4629      	mov	r1, r5
 80090dc:	f7f7 fae8 	bl	80006b0 <__aeabi_dmul>
 80090e0:	4604      	mov	r4, r0
 80090e2:	460d      	mov	r5, r1
 80090e4:	ec45 4b10 	vmov	d0, r4, r5
 80090e8:	f000 ff4a 	bl	8009f80 <rint>
 80090ec:	4620      	mov	r0, r4
 80090ee:	ec53 2b10 	vmov	r2, r3, d0
 80090f2:	4629      	mov	r1, r5
 80090f4:	f7f7 fd44 	bl	8000b80 <__aeabi_dcmpeq>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d1d7      	bne.n	80090ac <pow+0x224>
 80090fc:	2200      	movs	r2, #0
 80090fe:	4b19      	ldr	r3, [pc, #100]	; (8009164 <pow+0x2dc>)
 8009100:	e7d2      	b.n	80090a8 <pow+0x220>
 8009102:	2200      	movs	r2, #0
 8009104:	2300      	movs	r3, #0
 8009106:	ec51 0b18 	vmov	r0, r1, d8
 800910a:	f7f7 fd39 	bl	8000b80 <__aeabi_dcmpeq>
 800910e:	2800      	cmp	r0, #0
 8009110:	f43f af30 	beq.w	8008f74 <pow+0xec>
 8009114:	ec47 6b10 	vmov	d0, r6, r7
 8009118:	f000 ff1e 	bl	8009f58 <finite>
 800911c:	2800      	cmp	r0, #0
 800911e:	f43f af29 	beq.w	8008f74 <pow+0xec>
 8009122:	ec45 4b10 	vmov	d0, r4, r5
 8009126:	f000 ff17 	bl	8009f58 <finite>
 800912a:	2800      	cmp	r0, #0
 800912c:	f43f af22 	beq.w	8008f74 <pow+0xec>
 8009130:	2304      	movs	r3, #4
 8009132:	9302      	str	r3, [sp, #8]
 8009134:	4b09      	ldr	r3, [pc, #36]	; (800915c <pow+0x2d4>)
 8009136:	9303      	str	r3, [sp, #12]
 8009138:	2300      	movs	r3, #0
 800913a:	930a      	str	r3, [sp, #40]	; 0x28
 800913c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009140:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009144:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009148:	e7b0      	b.n	80090ac <pow+0x224>
 800914a:	a802      	add	r0, sp, #8
 800914c:	f000 ff0c 	bl	8009f68 <matherr>
 8009150:	2800      	cmp	r0, #0
 8009152:	f47f af07 	bne.w	8008f64 <pow+0xdc>
 8009156:	e7ad      	b.n	80090b4 <pow+0x22c>
 8009158:	200001e8 	.word	0x200001e8
 800915c:	0801e56e 	.word	0x0801e56e
 8009160:	3ff00000 	.word	0x3ff00000
 8009164:	fff00000 	.word	0xfff00000
 8009168:	47efffff 	.word	0x47efffff
 800916c:	3fe00000 	.word	0x3fe00000
 8009170:	c7efffff 	.word	0xc7efffff
 8009174:	7ff00000 	.word	0x7ff00000

08009178 <sqrtf>:
 8009178:	b510      	push	{r4, lr}
 800917a:	ed2d 8b02 	vpush	{d8}
 800917e:	b08a      	sub	sp, #40	; 0x28
 8009180:	eeb0 8a40 	vmov.f32	s16, s0
 8009184:	f000 fe9a 	bl	8009ebc <__ieee754_sqrtf>
 8009188:	4b21      	ldr	r3, [pc, #132]	; (8009210 <sqrtf+0x98>)
 800918a:	f993 4000 	ldrsb.w	r4, [r3]
 800918e:	1c63      	adds	r3, r4, #1
 8009190:	d02c      	beq.n	80091ec <sqrtf+0x74>
 8009192:	eeb4 8a48 	vcmp.f32	s16, s16
 8009196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919a:	d627      	bvs.n	80091ec <sqrtf+0x74>
 800919c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80091a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a4:	d522      	bpl.n	80091ec <sqrtf+0x74>
 80091a6:	2301      	movs	r3, #1
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	4b1a      	ldr	r3, [pc, #104]	; (8009214 <sqrtf+0x9c>)
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	ee18 0a10 	vmov	r0, s16
 80091b2:	2300      	movs	r3, #0
 80091b4:	9308      	str	r3, [sp, #32]
 80091b6:	f7f7 fa27 	bl	8000608 <__aeabi_f2d>
 80091ba:	2200      	movs	r2, #0
 80091bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091c4:	2300      	movs	r3, #0
 80091c6:	b9ac      	cbnz	r4, 80091f4 <sqrtf+0x7c>
 80091c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80091cc:	4668      	mov	r0, sp
 80091ce:	f000 fecb 	bl	8009f68 <matherr>
 80091d2:	b1b8      	cbz	r0, 8009204 <sqrtf+0x8c>
 80091d4:	9b08      	ldr	r3, [sp, #32]
 80091d6:	b11b      	cbz	r3, 80091e0 <sqrtf+0x68>
 80091d8:	f001 f9bc 	bl	800a554 <__errno>
 80091dc:	9b08      	ldr	r3, [sp, #32]
 80091de:	6003      	str	r3, [r0, #0]
 80091e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091e4:	f7f7 fd3c 	bl	8000c60 <__aeabi_d2f>
 80091e8:	ee00 0a10 	vmov	s0, r0
 80091ec:	b00a      	add	sp, #40	; 0x28
 80091ee:	ecbd 8b02 	vpop	{d8}
 80091f2:	bd10      	pop	{r4, pc}
 80091f4:	4610      	mov	r0, r2
 80091f6:	4619      	mov	r1, r3
 80091f8:	f7f7 fb84 	bl	8000904 <__aeabi_ddiv>
 80091fc:	2c02      	cmp	r4, #2
 80091fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009202:	d1e3      	bne.n	80091cc <sqrtf+0x54>
 8009204:	f001 f9a6 	bl	800a554 <__errno>
 8009208:	2321      	movs	r3, #33	; 0x21
 800920a:	6003      	str	r3, [r0, #0]
 800920c:	e7e2      	b.n	80091d4 <sqrtf+0x5c>
 800920e:	bf00      	nop
 8009210:	200001e8 	.word	0x200001e8
 8009214:	0801e572 	.word	0x0801e572

08009218 <__ieee754_log10>:
 8009218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800921c:	ec55 4b10 	vmov	r4, r5, d0
 8009220:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8009224:	ee10 2a10 	vmov	r2, s0
 8009228:	462b      	mov	r3, r5
 800922a:	da30      	bge.n	800928e <__ieee754_log10+0x76>
 800922c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8009230:	430a      	orrs	r2, r1
 8009232:	d10a      	bne.n	800924a <__ieee754_log10+0x32>
 8009234:	493c      	ldr	r1, [pc, #240]	; (8009328 <__ieee754_log10+0x110>)
 8009236:	2200      	movs	r2, #0
 8009238:	2300      	movs	r3, #0
 800923a:	2000      	movs	r0, #0
 800923c:	f7f7 fb62 	bl	8000904 <__aeabi_ddiv>
 8009240:	ec41 0b10 	vmov	d0, r0, r1
 8009244:	b003      	add	sp, #12
 8009246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800924a:	2d00      	cmp	r5, #0
 800924c:	da09      	bge.n	8009262 <__ieee754_log10+0x4a>
 800924e:	ee10 2a10 	vmov	r2, s0
 8009252:	462b      	mov	r3, r5
 8009254:	4620      	mov	r0, r4
 8009256:	4629      	mov	r1, r5
 8009258:	f7f7 f876 	bl	8000348 <__aeabi_dsub>
 800925c:	2200      	movs	r2, #0
 800925e:	2300      	movs	r3, #0
 8009260:	e7ec      	b.n	800923c <__ieee754_log10+0x24>
 8009262:	2200      	movs	r2, #0
 8009264:	4b31      	ldr	r3, [pc, #196]	; (800932c <__ieee754_log10+0x114>)
 8009266:	4629      	mov	r1, r5
 8009268:	ee10 0a10 	vmov	r0, s0
 800926c:	f7f7 fa20 	bl	80006b0 <__aeabi_dmul>
 8009270:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8009274:	4604      	mov	r4, r0
 8009276:	460d      	mov	r5, r1
 8009278:	460b      	mov	r3, r1
 800927a:	492d      	ldr	r1, [pc, #180]	; (8009330 <__ieee754_log10+0x118>)
 800927c:	428b      	cmp	r3, r1
 800927e:	dd08      	ble.n	8009292 <__ieee754_log10+0x7a>
 8009280:	4622      	mov	r2, r4
 8009282:	462b      	mov	r3, r5
 8009284:	4620      	mov	r0, r4
 8009286:	4629      	mov	r1, r5
 8009288:	f7f7 f860 	bl	800034c <__adddf3>
 800928c:	e7d8      	b.n	8009240 <__ieee754_log10+0x28>
 800928e:	2200      	movs	r2, #0
 8009290:	e7f3      	b.n	800927a <__ieee754_log10+0x62>
 8009292:	1518      	asrs	r0, r3, #20
 8009294:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009298:	4410      	add	r0, r2
 800929a:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800929e:	4448      	add	r0, r9
 80092a0:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80092a4:	f7f7 f99e 	bl	80005e4 <__aeabi_i2d>
 80092a8:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80092ac:	3303      	adds	r3, #3
 80092ae:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80092b2:	ec45 4b10 	vmov	d0, r4, r5
 80092b6:	4606      	mov	r6, r0
 80092b8:	460f      	mov	r7, r1
 80092ba:	f000 ff65 	bl	800a188 <__ieee754_log>
 80092be:	a314      	add	r3, pc, #80	; (adr r3, 8009310 <__ieee754_log10+0xf8>)
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	4630      	mov	r0, r6
 80092c6:	4639      	mov	r1, r7
 80092c8:	ed8d 0b00 	vstr	d0, [sp]
 80092cc:	f7f7 f9f0 	bl	80006b0 <__aeabi_dmul>
 80092d0:	ed9d 0b00 	vldr	d0, [sp]
 80092d4:	4604      	mov	r4, r0
 80092d6:	460d      	mov	r5, r1
 80092d8:	a30f      	add	r3, pc, #60	; (adr r3, 8009318 <__ieee754_log10+0x100>)
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	ec51 0b10 	vmov	r0, r1, d0
 80092e2:	f7f7 f9e5 	bl	80006b0 <__aeabi_dmul>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	4620      	mov	r0, r4
 80092ec:	4629      	mov	r1, r5
 80092ee:	f7f7 f82d 	bl	800034c <__adddf3>
 80092f2:	a30b      	add	r3, pc, #44	; (adr r3, 8009320 <__ieee754_log10+0x108>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	4604      	mov	r4, r0
 80092fa:	460d      	mov	r5, r1
 80092fc:	4630      	mov	r0, r6
 80092fe:	4639      	mov	r1, r7
 8009300:	f7f7 f9d6 	bl	80006b0 <__aeabi_dmul>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4620      	mov	r0, r4
 800930a:	4629      	mov	r1, r5
 800930c:	e7bc      	b.n	8009288 <__ieee754_log10+0x70>
 800930e:	bf00      	nop
 8009310:	11f12b36 	.word	0x11f12b36
 8009314:	3d59fef3 	.word	0x3d59fef3
 8009318:	1526e50e 	.word	0x1526e50e
 800931c:	3fdbcb7b 	.word	0x3fdbcb7b
 8009320:	509f6000 	.word	0x509f6000
 8009324:	3fd34413 	.word	0x3fd34413
 8009328:	c3500000 	.word	0xc3500000
 800932c:	43500000 	.word	0x43500000
 8009330:	7fefffff 	.word	0x7fefffff
 8009334:	00000000 	.word	0x00000000

08009338 <__ieee754_pow>:
 8009338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	b091      	sub	sp, #68	; 0x44
 800933e:	ed8d 1b00 	vstr	d1, [sp]
 8009342:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8009346:	ec57 6b10 	vmov	r6, r7, d0
 800934a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800934e:	ea58 0302 	orrs.w	r3, r8, r2
 8009352:	ee10 aa10 	vmov	sl, s0
 8009356:	463d      	mov	r5, r7
 8009358:	f000 84bd 	beq.w	8009cd6 <__ieee754_pow+0x99e>
 800935c:	4b78      	ldr	r3, [pc, #480]	; (8009540 <__ieee754_pow+0x208>)
 800935e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009362:	429c      	cmp	r4, r3
 8009364:	dc09      	bgt.n	800937a <__ieee754_pow+0x42>
 8009366:	d103      	bne.n	8009370 <__ieee754_pow+0x38>
 8009368:	b93e      	cbnz	r6, 800937a <__ieee754_pow+0x42>
 800936a:	45a0      	cmp	r8, r4
 800936c:	dc0d      	bgt.n	800938a <__ieee754_pow+0x52>
 800936e:	e001      	b.n	8009374 <__ieee754_pow+0x3c>
 8009370:	4598      	cmp	r8, r3
 8009372:	dc02      	bgt.n	800937a <__ieee754_pow+0x42>
 8009374:	4598      	cmp	r8, r3
 8009376:	d10e      	bne.n	8009396 <__ieee754_pow+0x5e>
 8009378:	b16a      	cbz	r2, 8009396 <__ieee754_pow+0x5e>
 800937a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800937e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009382:	ea54 030a 	orrs.w	r3, r4, sl
 8009386:	f000 84a6 	beq.w	8009cd6 <__ieee754_pow+0x99e>
 800938a:	486e      	ldr	r0, [pc, #440]	; (8009544 <__ieee754_pow+0x20c>)
 800938c:	b011      	add	sp, #68	; 0x44
 800938e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009392:	f000 bded 	b.w	8009f70 <nan>
 8009396:	2d00      	cmp	r5, #0
 8009398:	da53      	bge.n	8009442 <__ieee754_pow+0x10a>
 800939a:	4b6b      	ldr	r3, [pc, #428]	; (8009548 <__ieee754_pow+0x210>)
 800939c:	4598      	cmp	r8, r3
 800939e:	dc4d      	bgt.n	800943c <__ieee754_pow+0x104>
 80093a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80093a4:	4598      	cmp	r8, r3
 80093a6:	dd4c      	ble.n	8009442 <__ieee754_pow+0x10a>
 80093a8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80093ac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80093b0:	2b14      	cmp	r3, #20
 80093b2:	dd26      	ble.n	8009402 <__ieee754_pow+0xca>
 80093b4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80093b8:	fa22 f103 	lsr.w	r1, r2, r3
 80093bc:	fa01 f303 	lsl.w	r3, r1, r3
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d13e      	bne.n	8009442 <__ieee754_pow+0x10a>
 80093c4:	f001 0101 	and.w	r1, r1, #1
 80093c8:	f1c1 0b02 	rsb	fp, r1, #2
 80093cc:	2a00      	cmp	r2, #0
 80093ce:	d15b      	bne.n	8009488 <__ieee754_pow+0x150>
 80093d0:	4b5b      	ldr	r3, [pc, #364]	; (8009540 <__ieee754_pow+0x208>)
 80093d2:	4598      	cmp	r8, r3
 80093d4:	d124      	bne.n	8009420 <__ieee754_pow+0xe8>
 80093d6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80093da:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80093de:	ea53 030a 	orrs.w	r3, r3, sl
 80093e2:	f000 8478 	beq.w	8009cd6 <__ieee754_pow+0x99e>
 80093e6:	4b59      	ldr	r3, [pc, #356]	; (800954c <__ieee754_pow+0x214>)
 80093e8:	429c      	cmp	r4, r3
 80093ea:	dd2d      	ble.n	8009448 <__ieee754_pow+0x110>
 80093ec:	f1b9 0f00 	cmp.w	r9, #0
 80093f0:	f280 8475 	bge.w	8009cde <__ieee754_pow+0x9a6>
 80093f4:	2000      	movs	r0, #0
 80093f6:	2100      	movs	r1, #0
 80093f8:	ec41 0b10 	vmov	d0, r0, r1
 80093fc:	b011      	add	sp, #68	; 0x44
 80093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009402:	2a00      	cmp	r2, #0
 8009404:	d13e      	bne.n	8009484 <__ieee754_pow+0x14c>
 8009406:	f1c3 0314 	rsb	r3, r3, #20
 800940a:	fa48 f103 	asr.w	r1, r8, r3
 800940e:	fa01 f303 	lsl.w	r3, r1, r3
 8009412:	4598      	cmp	r8, r3
 8009414:	f040 846b 	bne.w	8009cee <__ieee754_pow+0x9b6>
 8009418:	f001 0101 	and.w	r1, r1, #1
 800941c:	f1c1 0b02 	rsb	fp, r1, #2
 8009420:	4b4b      	ldr	r3, [pc, #300]	; (8009550 <__ieee754_pow+0x218>)
 8009422:	4598      	cmp	r8, r3
 8009424:	d118      	bne.n	8009458 <__ieee754_pow+0x120>
 8009426:	f1b9 0f00 	cmp.w	r9, #0
 800942a:	f280 845c 	bge.w	8009ce6 <__ieee754_pow+0x9ae>
 800942e:	4948      	ldr	r1, [pc, #288]	; (8009550 <__ieee754_pow+0x218>)
 8009430:	4632      	mov	r2, r6
 8009432:	463b      	mov	r3, r7
 8009434:	2000      	movs	r0, #0
 8009436:	f7f7 fa65 	bl	8000904 <__aeabi_ddiv>
 800943a:	e7dd      	b.n	80093f8 <__ieee754_pow+0xc0>
 800943c:	f04f 0b02 	mov.w	fp, #2
 8009440:	e7c4      	b.n	80093cc <__ieee754_pow+0x94>
 8009442:	f04f 0b00 	mov.w	fp, #0
 8009446:	e7c1      	b.n	80093cc <__ieee754_pow+0x94>
 8009448:	f1b9 0f00 	cmp.w	r9, #0
 800944c:	dad2      	bge.n	80093f4 <__ieee754_pow+0xbc>
 800944e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8009452:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009456:	e7cf      	b.n	80093f8 <__ieee754_pow+0xc0>
 8009458:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800945c:	d106      	bne.n	800946c <__ieee754_pow+0x134>
 800945e:	4632      	mov	r2, r6
 8009460:	463b      	mov	r3, r7
 8009462:	4610      	mov	r0, r2
 8009464:	4619      	mov	r1, r3
 8009466:	f7f7 f923 	bl	80006b0 <__aeabi_dmul>
 800946a:	e7c5      	b.n	80093f8 <__ieee754_pow+0xc0>
 800946c:	4b39      	ldr	r3, [pc, #228]	; (8009554 <__ieee754_pow+0x21c>)
 800946e:	4599      	cmp	r9, r3
 8009470:	d10a      	bne.n	8009488 <__ieee754_pow+0x150>
 8009472:	2d00      	cmp	r5, #0
 8009474:	db08      	blt.n	8009488 <__ieee754_pow+0x150>
 8009476:	ec47 6b10 	vmov	d0, r6, r7
 800947a:	b011      	add	sp, #68	; 0x44
 800947c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009480:	f000 bc6c 	b.w	8009d5c <__ieee754_sqrt>
 8009484:	f04f 0b00 	mov.w	fp, #0
 8009488:	ec47 6b10 	vmov	d0, r6, r7
 800948c:	f000 fd5d 	bl	8009f4a <fabs>
 8009490:	ec51 0b10 	vmov	r0, r1, d0
 8009494:	f1ba 0f00 	cmp.w	sl, #0
 8009498:	d127      	bne.n	80094ea <__ieee754_pow+0x1b2>
 800949a:	b124      	cbz	r4, 80094a6 <__ieee754_pow+0x16e>
 800949c:	4b2c      	ldr	r3, [pc, #176]	; (8009550 <__ieee754_pow+0x218>)
 800949e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d121      	bne.n	80094ea <__ieee754_pow+0x1b2>
 80094a6:	f1b9 0f00 	cmp.w	r9, #0
 80094aa:	da05      	bge.n	80094b8 <__ieee754_pow+0x180>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	2000      	movs	r0, #0
 80094b2:	4927      	ldr	r1, [pc, #156]	; (8009550 <__ieee754_pow+0x218>)
 80094b4:	f7f7 fa26 	bl	8000904 <__aeabi_ddiv>
 80094b8:	2d00      	cmp	r5, #0
 80094ba:	da9d      	bge.n	80093f8 <__ieee754_pow+0xc0>
 80094bc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80094c0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80094c4:	ea54 030b 	orrs.w	r3, r4, fp
 80094c8:	d108      	bne.n	80094dc <__ieee754_pow+0x1a4>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	4610      	mov	r0, r2
 80094d0:	4619      	mov	r1, r3
 80094d2:	f7f6 ff39 	bl	8000348 <__aeabi_dsub>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	e7ac      	b.n	8009436 <__ieee754_pow+0xfe>
 80094dc:	f1bb 0f01 	cmp.w	fp, #1
 80094e0:	d18a      	bne.n	80093f8 <__ieee754_pow+0xc0>
 80094e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094e6:	4619      	mov	r1, r3
 80094e8:	e786      	b.n	80093f8 <__ieee754_pow+0xc0>
 80094ea:	0fed      	lsrs	r5, r5, #31
 80094ec:	1e6b      	subs	r3, r5, #1
 80094ee:	930d      	str	r3, [sp, #52]	; 0x34
 80094f0:	ea5b 0303 	orrs.w	r3, fp, r3
 80094f4:	d102      	bne.n	80094fc <__ieee754_pow+0x1c4>
 80094f6:	4632      	mov	r2, r6
 80094f8:	463b      	mov	r3, r7
 80094fa:	e7e8      	b.n	80094ce <__ieee754_pow+0x196>
 80094fc:	4b16      	ldr	r3, [pc, #88]	; (8009558 <__ieee754_pow+0x220>)
 80094fe:	4598      	cmp	r8, r3
 8009500:	f340 80fe 	ble.w	8009700 <__ieee754_pow+0x3c8>
 8009504:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009508:	4598      	cmp	r8, r3
 800950a:	dd0a      	ble.n	8009522 <__ieee754_pow+0x1ea>
 800950c:	4b0f      	ldr	r3, [pc, #60]	; (800954c <__ieee754_pow+0x214>)
 800950e:	429c      	cmp	r4, r3
 8009510:	dc0d      	bgt.n	800952e <__ieee754_pow+0x1f6>
 8009512:	f1b9 0f00 	cmp.w	r9, #0
 8009516:	f6bf af6d 	bge.w	80093f4 <__ieee754_pow+0xbc>
 800951a:	a307      	add	r3, pc, #28	; (adr r3, 8009538 <__ieee754_pow+0x200>)
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	e79f      	b.n	8009462 <__ieee754_pow+0x12a>
 8009522:	4b0e      	ldr	r3, [pc, #56]	; (800955c <__ieee754_pow+0x224>)
 8009524:	429c      	cmp	r4, r3
 8009526:	ddf4      	ble.n	8009512 <__ieee754_pow+0x1da>
 8009528:	4b09      	ldr	r3, [pc, #36]	; (8009550 <__ieee754_pow+0x218>)
 800952a:	429c      	cmp	r4, r3
 800952c:	dd18      	ble.n	8009560 <__ieee754_pow+0x228>
 800952e:	f1b9 0f00 	cmp.w	r9, #0
 8009532:	dcf2      	bgt.n	800951a <__ieee754_pow+0x1e2>
 8009534:	e75e      	b.n	80093f4 <__ieee754_pow+0xbc>
 8009536:	bf00      	nop
 8009538:	8800759c 	.word	0x8800759c
 800953c:	7e37e43c 	.word	0x7e37e43c
 8009540:	7ff00000 	.word	0x7ff00000
 8009544:	0800a601 	.word	0x0800a601
 8009548:	433fffff 	.word	0x433fffff
 800954c:	3fefffff 	.word	0x3fefffff
 8009550:	3ff00000 	.word	0x3ff00000
 8009554:	3fe00000 	.word	0x3fe00000
 8009558:	41e00000 	.word	0x41e00000
 800955c:	3feffffe 	.word	0x3feffffe
 8009560:	2200      	movs	r2, #0
 8009562:	4b63      	ldr	r3, [pc, #396]	; (80096f0 <__ieee754_pow+0x3b8>)
 8009564:	f7f6 fef0 	bl	8000348 <__aeabi_dsub>
 8009568:	a355      	add	r3, pc, #340	; (adr r3, 80096c0 <__ieee754_pow+0x388>)
 800956a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956e:	4604      	mov	r4, r0
 8009570:	460d      	mov	r5, r1
 8009572:	f7f7 f89d 	bl	80006b0 <__aeabi_dmul>
 8009576:	a354      	add	r3, pc, #336	; (adr r3, 80096c8 <__ieee754_pow+0x390>)
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	4606      	mov	r6, r0
 800957e:	460f      	mov	r7, r1
 8009580:	4620      	mov	r0, r4
 8009582:	4629      	mov	r1, r5
 8009584:	f7f7 f894 	bl	80006b0 <__aeabi_dmul>
 8009588:	2200      	movs	r2, #0
 800958a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800958e:	4b59      	ldr	r3, [pc, #356]	; (80096f4 <__ieee754_pow+0x3bc>)
 8009590:	4620      	mov	r0, r4
 8009592:	4629      	mov	r1, r5
 8009594:	f7f7 f88c 	bl	80006b0 <__aeabi_dmul>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	a14c      	add	r1, pc, #304	; (adr r1, 80096d0 <__ieee754_pow+0x398>)
 800959e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095a2:	f7f6 fed1 	bl	8000348 <__aeabi_dsub>
 80095a6:	4622      	mov	r2, r4
 80095a8:	462b      	mov	r3, r5
 80095aa:	f7f7 f881 	bl	80006b0 <__aeabi_dmul>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	2000      	movs	r0, #0
 80095b4:	4950      	ldr	r1, [pc, #320]	; (80096f8 <__ieee754_pow+0x3c0>)
 80095b6:	f7f6 fec7 	bl	8000348 <__aeabi_dsub>
 80095ba:	4622      	mov	r2, r4
 80095bc:	462b      	mov	r3, r5
 80095be:	4680      	mov	r8, r0
 80095c0:	4689      	mov	r9, r1
 80095c2:	4620      	mov	r0, r4
 80095c4:	4629      	mov	r1, r5
 80095c6:	f7f7 f873 	bl	80006b0 <__aeabi_dmul>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	4640      	mov	r0, r8
 80095d0:	4649      	mov	r1, r9
 80095d2:	f7f7 f86d 	bl	80006b0 <__aeabi_dmul>
 80095d6:	a340      	add	r3, pc, #256	; (adr r3, 80096d8 <__ieee754_pow+0x3a0>)
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f7f7 f868 	bl	80006b0 <__aeabi_dmul>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095e8:	f7f6 feae 	bl	8000348 <__aeabi_dsub>
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4604      	mov	r4, r0
 80095f2:	460d      	mov	r5, r1
 80095f4:	4630      	mov	r0, r6
 80095f6:	4639      	mov	r1, r7
 80095f8:	f7f6 fea8 	bl	800034c <__adddf3>
 80095fc:	2000      	movs	r0, #0
 80095fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009602:	4632      	mov	r2, r6
 8009604:	463b      	mov	r3, r7
 8009606:	f7f6 fe9f 	bl	8000348 <__aeabi_dsub>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4620      	mov	r0, r4
 8009610:	4629      	mov	r1, r5
 8009612:	f7f6 fe99 	bl	8000348 <__aeabi_dsub>
 8009616:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009618:	f10b 33ff 	add.w	r3, fp, #4294967295
 800961c:	4313      	orrs	r3, r2
 800961e:	4606      	mov	r6, r0
 8009620:	460f      	mov	r7, r1
 8009622:	f040 81eb 	bne.w	80099fc <__ieee754_pow+0x6c4>
 8009626:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80096e0 <__ieee754_pow+0x3a8>
 800962a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800962e:	2400      	movs	r4, #0
 8009630:	4622      	mov	r2, r4
 8009632:	462b      	mov	r3, r5
 8009634:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009638:	ed8d 7b02 	vstr	d7, [sp, #8]
 800963c:	f7f6 fe84 	bl	8000348 <__aeabi_dsub>
 8009640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009644:	f7f7 f834 	bl	80006b0 <__aeabi_dmul>
 8009648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800964c:	4680      	mov	r8, r0
 800964e:	4689      	mov	r9, r1
 8009650:	4630      	mov	r0, r6
 8009652:	4639      	mov	r1, r7
 8009654:	f7f7 f82c 	bl	80006b0 <__aeabi_dmul>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4640      	mov	r0, r8
 800965e:	4649      	mov	r1, r9
 8009660:	f7f6 fe74 	bl	800034c <__adddf3>
 8009664:	4622      	mov	r2, r4
 8009666:	462b      	mov	r3, r5
 8009668:	4680      	mov	r8, r0
 800966a:	4689      	mov	r9, r1
 800966c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009670:	f7f7 f81e 	bl	80006b0 <__aeabi_dmul>
 8009674:	460b      	mov	r3, r1
 8009676:	4604      	mov	r4, r0
 8009678:	460d      	mov	r5, r1
 800967a:	4602      	mov	r2, r0
 800967c:	4649      	mov	r1, r9
 800967e:	4640      	mov	r0, r8
 8009680:	e9cd 4500 	strd	r4, r5, [sp]
 8009684:	f7f6 fe62 	bl	800034c <__adddf3>
 8009688:	4b1c      	ldr	r3, [pc, #112]	; (80096fc <__ieee754_pow+0x3c4>)
 800968a:	4299      	cmp	r1, r3
 800968c:	4606      	mov	r6, r0
 800968e:	460f      	mov	r7, r1
 8009690:	468b      	mov	fp, r1
 8009692:	f340 82f7 	ble.w	8009c84 <__ieee754_pow+0x94c>
 8009696:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800969a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800969e:	4303      	orrs	r3, r0
 80096a0:	f000 81ea 	beq.w	8009a78 <__ieee754_pow+0x740>
 80096a4:	a310      	add	r3, pc, #64	; (adr r3, 80096e8 <__ieee754_pow+0x3b0>)
 80096a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ae:	f7f6 ffff 	bl	80006b0 <__aeabi_dmul>
 80096b2:	a30d      	add	r3, pc, #52	; (adr r3, 80096e8 <__ieee754_pow+0x3b0>)
 80096b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b8:	e6d5      	b.n	8009466 <__ieee754_pow+0x12e>
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w
 80096c0:	60000000 	.word	0x60000000
 80096c4:	3ff71547 	.word	0x3ff71547
 80096c8:	f85ddf44 	.word	0xf85ddf44
 80096cc:	3e54ae0b 	.word	0x3e54ae0b
 80096d0:	55555555 	.word	0x55555555
 80096d4:	3fd55555 	.word	0x3fd55555
 80096d8:	652b82fe 	.word	0x652b82fe
 80096dc:	3ff71547 	.word	0x3ff71547
 80096e0:	00000000 	.word	0x00000000
 80096e4:	bff00000 	.word	0xbff00000
 80096e8:	8800759c 	.word	0x8800759c
 80096ec:	7e37e43c 	.word	0x7e37e43c
 80096f0:	3ff00000 	.word	0x3ff00000
 80096f4:	3fd00000 	.word	0x3fd00000
 80096f8:	3fe00000 	.word	0x3fe00000
 80096fc:	408fffff 	.word	0x408fffff
 8009700:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009704:	f04f 0200 	mov.w	r2, #0
 8009708:	da05      	bge.n	8009716 <__ieee754_pow+0x3de>
 800970a:	4bd3      	ldr	r3, [pc, #844]	; (8009a58 <__ieee754_pow+0x720>)
 800970c:	f7f6 ffd0 	bl	80006b0 <__aeabi_dmul>
 8009710:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009714:	460c      	mov	r4, r1
 8009716:	1523      	asrs	r3, r4, #20
 8009718:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800971c:	4413      	add	r3, r2
 800971e:	9307      	str	r3, [sp, #28]
 8009720:	4bce      	ldr	r3, [pc, #824]	; (8009a5c <__ieee754_pow+0x724>)
 8009722:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009726:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800972a:	429c      	cmp	r4, r3
 800972c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009730:	dd08      	ble.n	8009744 <__ieee754_pow+0x40c>
 8009732:	4bcb      	ldr	r3, [pc, #812]	; (8009a60 <__ieee754_pow+0x728>)
 8009734:	429c      	cmp	r4, r3
 8009736:	f340 815e 	ble.w	80099f6 <__ieee754_pow+0x6be>
 800973a:	9b07      	ldr	r3, [sp, #28]
 800973c:	3301      	adds	r3, #1
 800973e:	9307      	str	r3, [sp, #28]
 8009740:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009744:	f04f 0a00 	mov.w	sl, #0
 8009748:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800974c:	930c      	str	r3, [sp, #48]	; 0x30
 800974e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009750:	4bc4      	ldr	r3, [pc, #784]	; (8009a64 <__ieee754_pow+0x72c>)
 8009752:	4413      	add	r3, r2
 8009754:	ed93 7b00 	vldr	d7, [r3]
 8009758:	4629      	mov	r1, r5
 800975a:	ec53 2b17 	vmov	r2, r3, d7
 800975e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009762:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009766:	f7f6 fdef 	bl	8000348 <__aeabi_dsub>
 800976a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800976e:	4606      	mov	r6, r0
 8009770:	460f      	mov	r7, r1
 8009772:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009776:	f7f6 fde9 	bl	800034c <__adddf3>
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	2000      	movs	r0, #0
 8009780:	49b9      	ldr	r1, [pc, #740]	; (8009a68 <__ieee754_pow+0x730>)
 8009782:	f7f7 f8bf 	bl	8000904 <__aeabi_ddiv>
 8009786:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	4630      	mov	r0, r6
 8009790:	4639      	mov	r1, r7
 8009792:	f7f6 ff8d 	bl	80006b0 <__aeabi_dmul>
 8009796:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800979a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800979e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80097a2:	2300      	movs	r3, #0
 80097a4:	9302      	str	r3, [sp, #8]
 80097a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80097aa:	106d      	asrs	r5, r5, #1
 80097ac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80097b0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80097b4:	2200      	movs	r2, #0
 80097b6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80097ba:	4640      	mov	r0, r8
 80097bc:	4649      	mov	r1, r9
 80097be:	4614      	mov	r4, r2
 80097c0:	461d      	mov	r5, r3
 80097c2:	f7f6 ff75 	bl	80006b0 <__aeabi_dmul>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	4630      	mov	r0, r6
 80097cc:	4639      	mov	r1, r7
 80097ce:	f7f6 fdbb 	bl	8000348 <__aeabi_dsub>
 80097d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80097d6:	4606      	mov	r6, r0
 80097d8:	460f      	mov	r7, r1
 80097da:	4620      	mov	r0, r4
 80097dc:	4629      	mov	r1, r5
 80097de:	f7f6 fdb3 	bl	8000348 <__aeabi_dsub>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80097ea:	f7f6 fdad 	bl	8000348 <__aeabi_dsub>
 80097ee:	4642      	mov	r2, r8
 80097f0:	464b      	mov	r3, r9
 80097f2:	f7f6 ff5d 	bl	80006b0 <__aeabi_dmul>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	4630      	mov	r0, r6
 80097fc:	4639      	mov	r1, r7
 80097fe:	f7f6 fda3 	bl	8000348 <__aeabi_dsub>
 8009802:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009806:	f7f6 ff53 	bl	80006b0 <__aeabi_dmul>
 800980a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800980e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009812:	4610      	mov	r0, r2
 8009814:	4619      	mov	r1, r3
 8009816:	f7f6 ff4b 	bl	80006b0 <__aeabi_dmul>
 800981a:	a37b      	add	r3, pc, #492	; (adr r3, 8009a08 <__ieee754_pow+0x6d0>)
 800981c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009820:	4604      	mov	r4, r0
 8009822:	460d      	mov	r5, r1
 8009824:	f7f6 ff44 	bl	80006b0 <__aeabi_dmul>
 8009828:	a379      	add	r3, pc, #484	; (adr r3, 8009a10 <__ieee754_pow+0x6d8>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f7f6 fd8d 	bl	800034c <__adddf3>
 8009832:	4622      	mov	r2, r4
 8009834:	462b      	mov	r3, r5
 8009836:	f7f6 ff3b 	bl	80006b0 <__aeabi_dmul>
 800983a:	a377      	add	r3, pc, #476	; (adr r3, 8009a18 <__ieee754_pow+0x6e0>)
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	f7f6 fd84 	bl	800034c <__adddf3>
 8009844:	4622      	mov	r2, r4
 8009846:	462b      	mov	r3, r5
 8009848:	f7f6 ff32 	bl	80006b0 <__aeabi_dmul>
 800984c:	a374      	add	r3, pc, #464	; (adr r3, 8009a20 <__ieee754_pow+0x6e8>)
 800984e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009852:	f7f6 fd7b 	bl	800034c <__adddf3>
 8009856:	4622      	mov	r2, r4
 8009858:	462b      	mov	r3, r5
 800985a:	f7f6 ff29 	bl	80006b0 <__aeabi_dmul>
 800985e:	a372      	add	r3, pc, #456	; (adr r3, 8009a28 <__ieee754_pow+0x6f0>)
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	f7f6 fd72 	bl	800034c <__adddf3>
 8009868:	4622      	mov	r2, r4
 800986a:	462b      	mov	r3, r5
 800986c:	f7f6 ff20 	bl	80006b0 <__aeabi_dmul>
 8009870:	a36f      	add	r3, pc, #444	; (adr r3, 8009a30 <__ieee754_pow+0x6f8>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	f7f6 fd69 	bl	800034c <__adddf3>
 800987a:	4622      	mov	r2, r4
 800987c:	4606      	mov	r6, r0
 800987e:	460f      	mov	r7, r1
 8009880:	462b      	mov	r3, r5
 8009882:	4620      	mov	r0, r4
 8009884:	4629      	mov	r1, r5
 8009886:	f7f6 ff13 	bl	80006b0 <__aeabi_dmul>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	4630      	mov	r0, r6
 8009890:	4639      	mov	r1, r7
 8009892:	f7f6 ff0d 	bl	80006b0 <__aeabi_dmul>
 8009896:	4642      	mov	r2, r8
 8009898:	4604      	mov	r4, r0
 800989a:	460d      	mov	r5, r1
 800989c:	464b      	mov	r3, r9
 800989e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098a2:	f7f6 fd53 	bl	800034c <__adddf3>
 80098a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80098aa:	f7f6 ff01 	bl	80006b0 <__aeabi_dmul>
 80098ae:	4622      	mov	r2, r4
 80098b0:	462b      	mov	r3, r5
 80098b2:	f7f6 fd4b 	bl	800034c <__adddf3>
 80098b6:	4642      	mov	r2, r8
 80098b8:	4606      	mov	r6, r0
 80098ba:	460f      	mov	r7, r1
 80098bc:	464b      	mov	r3, r9
 80098be:	4640      	mov	r0, r8
 80098c0:	4649      	mov	r1, r9
 80098c2:	f7f6 fef5 	bl	80006b0 <__aeabi_dmul>
 80098c6:	2200      	movs	r2, #0
 80098c8:	4b68      	ldr	r3, [pc, #416]	; (8009a6c <__ieee754_pow+0x734>)
 80098ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80098ce:	f7f6 fd3d 	bl	800034c <__adddf3>
 80098d2:	4632      	mov	r2, r6
 80098d4:	463b      	mov	r3, r7
 80098d6:	f7f6 fd39 	bl	800034c <__adddf3>
 80098da:	9802      	ldr	r0, [sp, #8]
 80098dc:	460d      	mov	r5, r1
 80098de:	4604      	mov	r4, r0
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	4640      	mov	r0, r8
 80098e6:	4649      	mov	r1, r9
 80098e8:	f7f6 fee2 	bl	80006b0 <__aeabi_dmul>
 80098ec:	2200      	movs	r2, #0
 80098ee:	4680      	mov	r8, r0
 80098f0:	4689      	mov	r9, r1
 80098f2:	4b5e      	ldr	r3, [pc, #376]	; (8009a6c <__ieee754_pow+0x734>)
 80098f4:	4620      	mov	r0, r4
 80098f6:	4629      	mov	r1, r5
 80098f8:	f7f6 fd26 	bl	8000348 <__aeabi_dsub>
 80098fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009900:	f7f6 fd22 	bl	8000348 <__aeabi_dsub>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4630      	mov	r0, r6
 800990a:	4639      	mov	r1, r7
 800990c:	f7f6 fd1c 	bl	8000348 <__aeabi_dsub>
 8009910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009914:	f7f6 fecc 	bl	80006b0 <__aeabi_dmul>
 8009918:	4622      	mov	r2, r4
 800991a:	4606      	mov	r6, r0
 800991c:	460f      	mov	r7, r1
 800991e:	462b      	mov	r3, r5
 8009920:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009924:	f7f6 fec4 	bl	80006b0 <__aeabi_dmul>
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	4630      	mov	r0, r6
 800992e:	4639      	mov	r1, r7
 8009930:	f7f6 fd0c 	bl	800034c <__adddf3>
 8009934:	4606      	mov	r6, r0
 8009936:	460f      	mov	r7, r1
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	4640      	mov	r0, r8
 800993e:	4649      	mov	r1, r9
 8009940:	f7f6 fd04 	bl	800034c <__adddf3>
 8009944:	9802      	ldr	r0, [sp, #8]
 8009946:	a33c      	add	r3, pc, #240	; (adr r3, 8009a38 <__ieee754_pow+0x700>)
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	4604      	mov	r4, r0
 800994e:	460d      	mov	r5, r1
 8009950:	f7f6 feae 	bl	80006b0 <__aeabi_dmul>
 8009954:	4642      	mov	r2, r8
 8009956:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800995a:	464b      	mov	r3, r9
 800995c:	4620      	mov	r0, r4
 800995e:	4629      	mov	r1, r5
 8009960:	f7f6 fcf2 	bl	8000348 <__aeabi_dsub>
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	4630      	mov	r0, r6
 800996a:	4639      	mov	r1, r7
 800996c:	f7f6 fcec 	bl	8000348 <__aeabi_dsub>
 8009970:	a333      	add	r3, pc, #204	; (adr r3, 8009a40 <__ieee754_pow+0x708>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fe9b 	bl	80006b0 <__aeabi_dmul>
 800997a:	a333      	add	r3, pc, #204	; (adr r3, 8009a48 <__ieee754_pow+0x710>)
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	4606      	mov	r6, r0
 8009982:	460f      	mov	r7, r1
 8009984:	4620      	mov	r0, r4
 8009986:	4629      	mov	r1, r5
 8009988:	f7f6 fe92 	bl	80006b0 <__aeabi_dmul>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	4630      	mov	r0, r6
 8009992:	4639      	mov	r1, r7
 8009994:	f7f6 fcda 	bl	800034c <__adddf3>
 8009998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800999a:	4b35      	ldr	r3, [pc, #212]	; (8009a70 <__ieee754_pow+0x738>)
 800999c:	4413      	add	r3, r2
 800999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a2:	f7f6 fcd3 	bl	800034c <__adddf3>
 80099a6:	4604      	mov	r4, r0
 80099a8:	9807      	ldr	r0, [sp, #28]
 80099aa:	460d      	mov	r5, r1
 80099ac:	f7f6 fe1a 	bl	80005e4 <__aeabi_i2d>
 80099b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099b2:	4b30      	ldr	r3, [pc, #192]	; (8009a74 <__ieee754_pow+0x73c>)
 80099b4:	4413      	add	r3, r2
 80099b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099ba:	4606      	mov	r6, r0
 80099bc:	460f      	mov	r7, r1
 80099be:	4622      	mov	r2, r4
 80099c0:	462b      	mov	r3, r5
 80099c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099c6:	f7f6 fcc1 	bl	800034c <__adddf3>
 80099ca:	4642      	mov	r2, r8
 80099cc:	464b      	mov	r3, r9
 80099ce:	f7f6 fcbd 	bl	800034c <__adddf3>
 80099d2:	4632      	mov	r2, r6
 80099d4:	463b      	mov	r3, r7
 80099d6:	f7f6 fcb9 	bl	800034c <__adddf3>
 80099da:	9802      	ldr	r0, [sp, #8]
 80099dc:	4632      	mov	r2, r6
 80099de:	463b      	mov	r3, r7
 80099e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099e4:	f7f6 fcb0 	bl	8000348 <__aeabi_dsub>
 80099e8:	4642      	mov	r2, r8
 80099ea:	464b      	mov	r3, r9
 80099ec:	f7f6 fcac 	bl	8000348 <__aeabi_dsub>
 80099f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80099f4:	e607      	b.n	8009606 <__ieee754_pow+0x2ce>
 80099f6:	f04f 0a01 	mov.w	sl, #1
 80099fa:	e6a5      	b.n	8009748 <__ieee754_pow+0x410>
 80099fc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009a50 <__ieee754_pow+0x718>
 8009a00:	e613      	b.n	800962a <__ieee754_pow+0x2f2>
 8009a02:	bf00      	nop
 8009a04:	f3af 8000 	nop.w
 8009a08:	4a454eef 	.word	0x4a454eef
 8009a0c:	3fca7e28 	.word	0x3fca7e28
 8009a10:	93c9db65 	.word	0x93c9db65
 8009a14:	3fcd864a 	.word	0x3fcd864a
 8009a18:	a91d4101 	.word	0xa91d4101
 8009a1c:	3fd17460 	.word	0x3fd17460
 8009a20:	518f264d 	.word	0x518f264d
 8009a24:	3fd55555 	.word	0x3fd55555
 8009a28:	db6fabff 	.word	0xdb6fabff
 8009a2c:	3fdb6db6 	.word	0x3fdb6db6
 8009a30:	33333303 	.word	0x33333303
 8009a34:	3fe33333 	.word	0x3fe33333
 8009a38:	e0000000 	.word	0xe0000000
 8009a3c:	3feec709 	.word	0x3feec709
 8009a40:	dc3a03fd 	.word	0xdc3a03fd
 8009a44:	3feec709 	.word	0x3feec709
 8009a48:	145b01f5 	.word	0x145b01f5
 8009a4c:	be3e2fe0 	.word	0xbe3e2fe0
 8009a50:	00000000 	.word	0x00000000
 8009a54:	3ff00000 	.word	0x3ff00000
 8009a58:	43400000 	.word	0x43400000
 8009a5c:	0003988e 	.word	0x0003988e
 8009a60:	000bb679 	.word	0x000bb679
 8009a64:	0801e578 	.word	0x0801e578
 8009a68:	3ff00000 	.word	0x3ff00000
 8009a6c:	40080000 	.word	0x40080000
 8009a70:	0801e598 	.word	0x0801e598
 8009a74:	0801e588 	.word	0x0801e588
 8009a78:	a3b6      	add	r3, pc, #728	; (adr r3, 8009d54 <__ieee754_pow+0xa1c>)
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	4640      	mov	r0, r8
 8009a80:	4649      	mov	r1, r9
 8009a82:	f7f6 fc63 	bl	800034c <__adddf3>
 8009a86:	4622      	mov	r2, r4
 8009a88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a8c:	462b      	mov	r3, r5
 8009a8e:	4630      	mov	r0, r6
 8009a90:	4639      	mov	r1, r7
 8009a92:	f7f6 fc59 	bl	8000348 <__aeabi_dsub>
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a9e:	f7f7 f897 	bl	8000bd0 <__aeabi_dcmpgt>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	f47f adfe 	bne.w	80096a4 <__ieee754_pow+0x36c>
 8009aa8:	4aa5      	ldr	r2, [pc, #660]	; (8009d40 <__ieee754_pow+0xa08>)
 8009aaa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	f340 810c 	ble.w	8009ccc <__ieee754_pow+0x994>
 8009ab4:	151b      	asrs	r3, r3, #20
 8009ab6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009aba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009abe:	fa4a f303 	asr.w	r3, sl, r3
 8009ac2:	445b      	add	r3, fp
 8009ac4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009ac8:	4e9e      	ldr	r6, [pc, #632]	; (8009d44 <__ieee754_pow+0xa0c>)
 8009aca:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009ace:	4116      	asrs	r6, r2
 8009ad0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	ea23 0106 	bic.w	r1, r3, r6
 8009ada:	f1c2 0214 	rsb	r2, r2, #20
 8009ade:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009ae2:	fa4a fa02 	asr.w	sl, sl, r2
 8009ae6:	f1bb 0f00 	cmp.w	fp, #0
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	4620      	mov	r0, r4
 8009af0:	4629      	mov	r1, r5
 8009af2:	bfb8      	it	lt
 8009af4:	f1ca 0a00 	rsblt	sl, sl, #0
 8009af8:	f7f6 fc26 	bl	8000348 <__aeabi_dsub>
 8009afc:	e9cd 0100 	strd	r0, r1, [sp]
 8009b00:	4642      	mov	r2, r8
 8009b02:	464b      	mov	r3, r9
 8009b04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b08:	f7f6 fc20 	bl	800034c <__adddf3>
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	a37a      	add	r3, pc, #488	; (adr r3, 8009cf8 <__ieee754_pow+0x9c0>)
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	4604      	mov	r4, r0
 8009b16:	460d      	mov	r5, r1
 8009b18:	f7f6 fdca 	bl	80006b0 <__aeabi_dmul>
 8009b1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b20:	4606      	mov	r6, r0
 8009b22:	460f      	mov	r7, r1
 8009b24:	4620      	mov	r0, r4
 8009b26:	4629      	mov	r1, r5
 8009b28:	f7f6 fc0e 	bl	8000348 <__aeabi_dsub>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4640      	mov	r0, r8
 8009b32:	4649      	mov	r1, r9
 8009b34:	f7f6 fc08 	bl	8000348 <__aeabi_dsub>
 8009b38:	a371      	add	r3, pc, #452	; (adr r3, 8009d00 <__ieee754_pow+0x9c8>)
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	f7f6 fdb7 	bl	80006b0 <__aeabi_dmul>
 8009b42:	a371      	add	r3, pc, #452	; (adr r3, 8009d08 <__ieee754_pow+0x9d0>)
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	4680      	mov	r8, r0
 8009b4a:	4689      	mov	r9, r1
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	4629      	mov	r1, r5
 8009b50:	f7f6 fdae 	bl	80006b0 <__aeabi_dmul>
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	4640      	mov	r0, r8
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	f7f6 fbf6 	bl	800034c <__adddf3>
 8009b60:	4604      	mov	r4, r0
 8009b62:	460d      	mov	r5, r1
 8009b64:	4602      	mov	r2, r0
 8009b66:	460b      	mov	r3, r1
 8009b68:	4630      	mov	r0, r6
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	f7f6 fbee 	bl	800034c <__adddf3>
 8009b70:	4632      	mov	r2, r6
 8009b72:	463b      	mov	r3, r7
 8009b74:	4680      	mov	r8, r0
 8009b76:	4689      	mov	r9, r1
 8009b78:	f7f6 fbe6 	bl	8000348 <__aeabi_dsub>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4620      	mov	r0, r4
 8009b82:	4629      	mov	r1, r5
 8009b84:	f7f6 fbe0 	bl	8000348 <__aeabi_dsub>
 8009b88:	4642      	mov	r2, r8
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	460f      	mov	r7, r1
 8009b8e:	464b      	mov	r3, r9
 8009b90:	4640      	mov	r0, r8
 8009b92:	4649      	mov	r1, r9
 8009b94:	f7f6 fd8c 	bl	80006b0 <__aeabi_dmul>
 8009b98:	a35d      	add	r3, pc, #372	; (adr r3, 8009d10 <__ieee754_pow+0x9d8>)
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	460d      	mov	r5, r1
 8009ba2:	f7f6 fd85 	bl	80006b0 <__aeabi_dmul>
 8009ba6:	a35c      	add	r3, pc, #368	; (adr r3, 8009d18 <__ieee754_pow+0x9e0>)
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	f7f6 fbcc 	bl	8000348 <__aeabi_dsub>
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	462b      	mov	r3, r5
 8009bb4:	f7f6 fd7c 	bl	80006b0 <__aeabi_dmul>
 8009bb8:	a359      	add	r3, pc, #356	; (adr r3, 8009d20 <__ieee754_pow+0x9e8>)
 8009bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbe:	f7f6 fbc5 	bl	800034c <__adddf3>
 8009bc2:	4622      	mov	r2, r4
 8009bc4:	462b      	mov	r3, r5
 8009bc6:	f7f6 fd73 	bl	80006b0 <__aeabi_dmul>
 8009bca:	a357      	add	r3, pc, #348	; (adr r3, 8009d28 <__ieee754_pow+0x9f0>)
 8009bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd0:	f7f6 fbba 	bl	8000348 <__aeabi_dsub>
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	462b      	mov	r3, r5
 8009bd8:	f7f6 fd6a 	bl	80006b0 <__aeabi_dmul>
 8009bdc:	a354      	add	r3, pc, #336	; (adr r3, 8009d30 <__ieee754_pow+0x9f8>)
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	f7f6 fbb3 	bl	800034c <__adddf3>
 8009be6:	4622      	mov	r2, r4
 8009be8:	462b      	mov	r3, r5
 8009bea:	f7f6 fd61 	bl	80006b0 <__aeabi_dmul>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	f7f6 fba7 	bl	8000348 <__aeabi_dsub>
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	460d      	mov	r5, r1
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	4640      	mov	r0, r8
 8009c04:	4649      	mov	r1, r9
 8009c06:	f7f6 fd53 	bl	80006b0 <__aeabi_dmul>
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	e9cd 0100 	strd	r0, r1, [sp]
 8009c10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c14:	4620      	mov	r0, r4
 8009c16:	4629      	mov	r1, r5
 8009c18:	f7f6 fb96 	bl	8000348 <__aeabi_dsub>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c24:	f7f6 fe6e 	bl	8000904 <__aeabi_ddiv>
 8009c28:	4632      	mov	r2, r6
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	460d      	mov	r5, r1
 8009c2e:	463b      	mov	r3, r7
 8009c30:	4640      	mov	r0, r8
 8009c32:	4649      	mov	r1, r9
 8009c34:	f7f6 fd3c 	bl	80006b0 <__aeabi_dmul>
 8009c38:	4632      	mov	r2, r6
 8009c3a:	463b      	mov	r3, r7
 8009c3c:	f7f6 fb86 	bl	800034c <__adddf3>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4620      	mov	r0, r4
 8009c46:	4629      	mov	r1, r5
 8009c48:	f7f6 fb7e 	bl	8000348 <__aeabi_dsub>
 8009c4c:	4642      	mov	r2, r8
 8009c4e:	464b      	mov	r3, r9
 8009c50:	f7f6 fb7a 	bl	8000348 <__aeabi_dsub>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	2000      	movs	r0, #0
 8009c5a:	493b      	ldr	r1, [pc, #236]	; (8009d48 <__ieee754_pow+0xa10>)
 8009c5c:	f7f6 fb74 	bl	8000348 <__aeabi_dsub>
 8009c60:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009c64:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	da31      	bge.n	8009cd2 <__ieee754_pow+0x99a>
 8009c6e:	4650      	mov	r0, sl
 8009c70:	ec43 2b10 	vmov	d0, r2, r3
 8009c74:	f000 fa0c 	bl	800a090 <scalbn>
 8009c78:	ec51 0b10 	vmov	r0, r1, d0
 8009c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c80:	f7ff bbf1 	b.w	8009466 <__ieee754_pow+0x12e>
 8009c84:	4b31      	ldr	r3, [pc, #196]	; (8009d4c <__ieee754_pow+0xa14>)
 8009c86:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009c8a:	429e      	cmp	r6, r3
 8009c8c:	f77f af0c 	ble.w	8009aa8 <__ieee754_pow+0x770>
 8009c90:	4b2f      	ldr	r3, [pc, #188]	; (8009d50 <__ieee754_pow+0xa18>)
 8009c92:	440b      	add	r3, r1
 8009c94:	4303      	orrs	r3, r0
 8009c96:	d00b      	beq.n	8009cb0 <__ieee754_pow+0x978>
 8009c98:	a327      	add	r3, pc, #156	; (adr r3, 8009d38 <__ieee754_pow+0xa00>)
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ca2:	f7f6 fd05 	bl	80006b0 <__aeabi_dmul>
 8009ca6:	a324      	add	r3, pc, #144	; (adr r3, 8009d38 <__ieee754_pow+0xa00>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f7ff bbdb 	b.w	8009466 <__ieee754_pow+0x12e>
 8009cb0:	4622      	mov	r2, r4
 8009cb2:	462b      	mov	r3, r5
 8009cb4:	f7f6 fb48 	bl	8000348 <__aeabi_dsub>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	f7f6 ff72 	bl	8000ba8 <__aeabi_dcmple>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	f43f aeef 	beq.w	8009aa8 <__ieee754_pow+0x770>
 8009cca:	e7e5      	b.n	8009c98 <__ieee754_pow+0x960>
 8009ccc:	f04f 0a00 	mov.w	sl, #0
 8009cd0:	e716      	b.n	8009b00 <__ieee754_pow+0x7c8>
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	e7d2      	b.n	8009c7c <__ieee754_pow+0x944>
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	491b      	ldr	r1, [pc, #108]	; (8009d48 <__ieee754_pow+0xa10>)
 8009cda:	f7ff bb8d 	b.w	80093f8 <__ieee754_pow+0xc0>
 8009cde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ce2:	f7ff bb89 	b.w	80093f8 <__ieee754_pow+0xc0>
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	4639      	mov	r1, r7
 8009cea:	f7ff bb85 	b.w	80093f8 <__ieee754_pow+0xc0>
 8009cee:	4693      	mov	fp, r2
 8009cf0:	f7ff bb96 	b.w	8009420 <__ieee754_pow+0xe8>
 8009cf4:	f3af 8000 	nop.w
 8009cf8:	00000000 	.word	0x00000000
 8009cfc:	3fe62e43 	.word	0x3fe62e43
 8009d00:	fefa39ef 	.word	0xfefa39ef
 8009d04:	3fe62e42 	.word	0x3fe62e42
 8009d08:	0ca86c39 	.word	0x0ca86c39
 8009d0c:	be205c61 	.word	0xbe205c61
 8009d10:	72bea4d0 	.word	0x72bea4d0
 8009d14:	3e663769 	.word	0x3e663769
 8009d18:	c5d26bf1 	.word	0xc5d26bf1
 8009d1c:	3ebbbd41 	.word	0x3ebbbd41
 8009d20:	af25de2c 	.word	0xaf25de2c
 8009d24:	3f11566a 	.word	0x3f11566a
 8009d28:	16bebd93 	.word	0x16bebd93
 8009d2c:	3f66c16c 	.word	0x3f66c16c
 8009d30:	5555553e 	.word	0x5555553e
 8009d34:	3fc55555 	.word	0x3fc55555
 8009d38:	c2f8f359 	.word	0xc2f8f359
 8009d3c:	01a56e1f 	.word	0x01a56e1f
 8009d40:	3fe00000 	.word	0x3fe00000
 8009d44:	000fffff 	.word	0x000fffff
 8009d48:	3ff00000 	.word	0x3ff00000
 8009d4c:	4090cbff 	.word	0x4090cbff
 8009d50:	3f6f3400 	.word	0x3f6f3400
 8009d54:	652b82fe 	.word	0x652b82fe
 8009d58:	3c971547 	.word	0x3c971547

08009d5c <__ieee754_sqrt>:
 8009d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d60:	ec55 4b10 	vmov	r4, r5, d0
 8009d64:	4e54      	ldr	r6, [pc, #336]	; (8009eb8 <__ieee754_sqrt+0x15c>)
 8009d66:	43ae      	bics	r6, r5
 8009d68:	ee10 0a10 	vmov	r0, s0
 8009d6c:	462b      	mov	r3, r5
 8009d6e:	462a      	mov	r2, r5
 8009d70:	4621      	mov	r1, r4
 8009d72:	d113      	bne.n	8009d9c <__ieee754_sqrt+0x40>
 8009d74:	ee10 2a10 	vmov	r2, s0
 8009d78:	462b      	mov	r3, r5
 8009d7a:	ee10 0a10 	vmov	r0, s0
 8009d7e:	4629      	mov	r1, r5
 8009d80:	f7f6 fc96 	bl	80006b0 <__aeabi_dmul>
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4620      	mov	r0, r4
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	f7f6 fade 	bl	800034c <__adddf3>
 8009d90:	4604      	mov	r4, r0
 8009d92:	460d      	mov	r5, r1
 8009d94:	ec45 4b10 	vmov	d0, r4, r5
 8009d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9c:	2d00      	cmp	r5, #0
 8009d9e:	dc10      	bgt.n	8009dc2 <__ieee754_sqrt+0x66>
 8009da0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009da4:	4330      	orrs	r0, r6
 8009da6:	d0f5      	beq.n	8009d94 <__ieee754_sqrt+0x38>
 8009da8:	b15d      	cbz	r5, 8009dc2 <__ieee754_sqrt+0x66>
 8009daa:	ee10 2a10 	vmov	r2, s0
 8009dae:	462b      	mov	r3, r5
 8009db0:	4620      	mov	r0, r4
 8009db2:	4629      	mov	r1, r5
 8009db4:	f7f6 fac8 	bl	8000348 <__aeabi_dsub>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	f7f6 fda2 	bl	8000904 <__aeabi_ddiv>
 8009dc0:	e7e6      	b.n	8009d90 <__ieee754_sqrt+0x34>
 8009dc2:	151b      	asrs	r3, r3, #20
 8009dc4:	d10c      	bne.n	8009de0 <__ieee754_sqrt+0x84>
 8009dc6:	2a00      	cmp	r2, #0
 8009dc8:	d06d      	beq.n	8009ea6 <__ieee754_sqrt+0x14a>
 8009dca:	2000      	movs	r0, #0
 8009dcc:	02d6      	lsls	r6, r2, #11
 8009dce:	d56e      	bpl.n	8009eae <__ieee754_sqrt+0x152>
 8009dd0:	1e44      	subs	r4, r0, #1
 8009dd2:	1b1b      	subs	r3, r3, r4
 8009dd4:	f1c0 0420 	rsb	r4, r0, #32
 8009dd8:	fa21 f404 	lsr.w	r4, r1, r4
 8009ddc:	4322      	orrs	r2, r4
 8009dde:	4081      	lsls	r1, r0
 8009de0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009de4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009de8:	07dd      	lsls	r5, r3, #31
 8009dea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009dee:	bf42      	ittt	mi
 8009df0:	0052      	lslmi	r2, r2, #1
 8009df2:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8009df6:	0049      	lslmi	r1, r1, #1
 8009df8:	1058      	asrs	r0, r3, #1
 8009dfa:	2500      	movs	r5, #0
 8009dfc:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8009e00:	441a      	add	r2, r3
 8009e02:	0049      	lsls	r1, r1, #1
 8009e04:	2316      	movs	r3, #22
 8009e06:	462c      	mov	r4, r5
 8009e08:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009e0c:	19a7      	adds	r7, r4, r6
 8009e0e:	4297      	cmp	r7, r2
 8009e10:	bfde      	ittt	le
 8009e12:	1bd2      	suble	r2, r2, r7
 8009e14:	19bc      	addle	r4, r7, r6
 8009e16:	19ad      	addle	r5, r5, r6
 8009e18:	0052      	lsls	r2, r2, #1
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009e20:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e24:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009e28:	d1f0      	bne.n	8009e0c <__ieee754_sqrt+0xb0>
 8009e2a:	f04f 0e20 	mov.w	lr, #32
 8009e2e:	469c      	mov	ip, r3
 8009e30:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009e34:	42a2      	cmp	r2, r4
 8009e36:	eb06 070c 	add.w	r7, r6, ip
 8009e3a:	dc02      	bgt.n	8009e42 <__ieee754_sqrt+0xe6>
 8009e3c:	d112      	bne.n	8009e64 <__ieee754_sqrt+0x108>
 8009e3e:	428f      	cmp	r7, r1
 8009e40:	d810      	bhi.n	8009e64 <__ieee754_sqrt+0x108>
 8009e42:	2f00      	cmp	r7, #0
 8009e44:	eb07 0c06 	add.w	ip, r7, r6
 8009e48:	da34      	bge.n	8009eb4 <__ieee754_sqrt+0x158>
 8009e4a:	f1bc 0f00 	cmp.w	ip, #0
 8009e4e:	db31      	blt.n	8009eb4 <__ieee754_sqrt+0x158>
 8009e50:	f104 0801 	add.w	r8, r4, #1
 8009e54:	1b12      	subs	r2, r2, r4
 8009e56:	428f      	cmp	r7, r1
 8009e58:	bf88      	it	hi
 8009e5a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009e5e:	1bc9      	subs	r1, r1, r7
 8009e60:	4433      	add	r3, r6
 8009e62:	4644      	mov	r4, r8
 8009e64:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8009e68:	f1be 0e01 	subs.w	lr, lr, #1
 8009e6c:	443a      	add	r2, r7
 8009e6e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009e72:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e76:	d1dd      	bne.n	8009e34 <__ieee754_sqrt+0xd8>
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	d006      	beq.n	8009e8a <__ieee754_sqrt+0x12e>
 8009e7c:	1c5c      	adds	r4, r3, #1
 8009e7e:	bf13      	iteet	ne
 8009e80:	3301      	addne	r3, #1
 8009e82:	3501      	addeq	r5, #1
 8009e84:	4673      	moveq	r3, lr
 8009e86:	f023 0301 	bicne.w	r3, r3, #1
 8009e8a:	106a      	asrs	r2, r5, #1
 8009e8c:	085b      	lsrs	r3, r3, #1
 8009e8e:	07e9      	lsls	r1, r5, #31
 8009e90:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009e94:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009e98:	bf48      	it	mi
 8009e9a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009e9e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009ea2:	461c      	mov	r4, r3
 8009ea4:	e776      	b.n	8009d94 <__ieee754_sqrt+0x38>
 8009ea6:	0aca      	lsrs	r2, r1, #11
 8009ea8:	3b15      	subs	r3, #21
 8009eaa:	0549      	lsls	r1, r1, #21
 8009eac:	e78b      	b.n	8009dc6 <__ieee754_sqrt+0x6a>
 8009eae:	0052      	lsls	r2, r2, #1
 8009eb0:	3001      	adds	r0, #1
 8009eb2:	e78b      	b.n	8009dcc <__ieee754_sqrt+0x70>
 8009eb4:	46a0      	mov	r8, r4
 8009eb6:	e7cd      	b.n	8009e54 <__ieee754_sqrt+0xf8>
 8009eb8:	7ff00000 	.word	0x7ff00000

08009ebc <__ieee754_sqrtf>:
 8009ebc:	ee10 2a10 	vmov	r2, s0
 8009ec0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009ec4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009ec8:	b570      	push	{r4, r5, r6, lr}
 8009eca:	d302      	bcc.n	8009ed2 <__ieee754_sqrtf+0x16>
 8009ecc:	eea0 0a00 	vfma.f32	s0, s0, s0
 8009ed0:	bd70      	pop	{r4, r5, r6, pc}
 8009ed2:	b3b1      	cbz	r1, 8009f42 <__ieee754_sqrtf+0x86>
 8009ed4:	2a00      	cmp	r2, #0
 8009ed6:	da04      	bge.n	8009ee2 <__ieee754_sqrtf+0x26>
 8009ed8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009edc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009ee0:	bd70      	pop	{r4, r5, r6, pc}
 8009ee2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8009ee6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8009eea:	d204      	bcs.n	8009ef6 <__ieee754_sqrtf+0x3a>
 8009eec:	2100      	movs	r1, #0
 8009eee:	0210      	lsls	r0, r2, #8
 8009ef0:	d528      	bpl.n	8009f44 <__ieee754_sqrtf+0x88>
 8009ef2:	3901      	subs	r1, #1
 8009ef4:	1a5b      	subs	r3, r3, r1
 8009ef6:	3b7f      	subs	r3, #127	; 0x7f
 8009ef8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8009efc:	07d9      	lsls	r1, r3, #31
 8009efe:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009f02:	bf48      	it	mi
 8009f04:	0052      	lslmi	r2, r2, #1
 8009f06:	1059      	asrs	r1, r3, #1
 8009f08:	2300      	movs	r3, #0
 8009f0a:	0052      	lsls	r2, r2, #1
 8009f0c:	2419      	movs	r4, #25
 8009f0e:	461e      	mov	r6, r3
 8009f10:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8009f14:	1835      	adds	r5, r6, r0
 8009f16:	4295      	cmp	r5, r2
 8009f18:	bfde      	ittt	le
 8009f1a:	182e      	addle	r6, r5, r0
 8009f1c:	1b52      	suble	r2, r2, r5
 8009f1e:	181b      	addle	r3, r3, r0
 8009f20:	3c01      	subs	r4, #1
 8009f22:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009f26:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009f2a:	d1f3      	bne.n	8009f14 <__ieee754_sqrtf+0x58>
 8009f2c:	b112      	cbz	r2, 8009f34 <__ieee754_sqrtf+0x78>
 8009f2e:	3301      	adds	r3, #1
 8009f30:	f023 0301 	bic.w	r3, r3, #1
 8009f34:	105b      	asrs	r3, r3, #1
 8009f36:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8009f3a:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8009f3e:	ee00 3a10 	vmov	s0, r3
 8009f42:	bd70      	pop	{r4, r5, r6, pc}
 8009f44:	0052      	lsls	r2, r2, #1
 8009f46:	3101      	adds	r1, #1
 8009f48:	e7d1      	b.n	8009eee <__ieee754_sqrtf+0x32>

08009f4a <fabs>:
 8009f4a:	ec53 2b10 	vmov	r2, r3, d0
 8009f4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f52:	ec43 2b10 	vmov	d0, r2, r3
 8009f56:	4770      	bx	lr

08009f58 <finite>:
 8009f58:	ee10 3a90 	vmov	r3, s1
 8009f5c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009f60:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009f64:	0fc0      	lsrs	r0, r0, #31
 8009f66:	4770      	bx	lr

08009f68 <matherr>:
 8009f68:	2000      	movs	r0, #0
 8009f6a:	4770      	bx	lr
 8009f6c:	0000      	movs	r0, r0
	...

08009f70 <nan>:
 8009f70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009f78 <nan+0x8>
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	00000000 	.word	0x00000000
 8009f7c:	7ff80000 	.word	0x7ff80000

08009f80 <rint>:
 8009f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f82:	ec51 0b10 	vmov	r0, r1, d0
 8009f86:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8009f8a:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8009f8e:	2e13      	cmp	r6, #19
 8009f90:	ee10 7a10 	vmov	r7, s0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4602      	mov	r2, r0
 8009f98:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009f9c:	dc58      	bgt.n	800a050 <rint+0xd0>
 8009f9e:	2e00      	cmp	r6, #0
 8009fa0:	da2b      	bge.n	8009ffa <rint+0x7a>
 8009fa2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009fa6:	4302      	orrs	r2, r0
 8009fa8:	d023      	beq.n	8009ff2 <rint+0x72>
 8009faa:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009fae:	4302      	orrs	r2, r0
 8009fb0:	4251      	negs	r1, r2
 8009fb2:	4311      	orrs	r1, r2
 8009fb4:	0b09      	lsrs	r1, r1, #12
 8009fb6:	0c5b      	lsrs	r3, r3, #17
 8009fb8:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8009fbc:	045b      	lsls	r3, r3, #17
 8009fbe:	ea41 0703 	orr.w	r7, r1, r3
 8009fc2:	4b31      	ldr	r3, [pc, #196]	; (800a088 <rint+0x108>)
 8009fc4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009fc8:	4639      	mov	r1, r7
 8009fca:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009fce:	ee10 0a10 	vmov	r0, s0
 8009fd2:	4632      	mov	r2, r6
 8009fd4:	463b      	mov	r3, r7
 8009fd6:	f7f6 f9b9 	bl	800034c <__adddf3>
 8009fda:	e9cd 0100 	strd	r0, r1, [sp]
 8009fde:	463b      	mov	r3, r7
 8009fe0:	4632      	mov	r2, r6
 8009fe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fe6:	f7f6 f9af 	bl	8000348 <__aeabi_dsub>
 8009fea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009fee:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8009ff2:	ec41 0b10 	vmov	d0, r0, r1
 8009ff6:	b003      	add	sp, #12
 8009ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ffa:	4c24      	ldr	r4, [pc, #144]	; (800a08c <rint+0x10c>)
 8009ffc:	4134      	asrs	r4, r6
 8009ffe:	ea01 0704 	and.w	r7, r1, r4
 800a002:	4307      	orrs	r7, r0
 800a004:	d0f5      	beq.n	8009ff2 <rint+0x72>
 800a006:	0861      	lsrs	r1, r4, #1
 800a008:	ea03 0001 	and.w	r0, r3, r1
 800a00c:	4302      	orrs	r2, r0
 800a00e:	d00b      	beq.n	800a028 <rint+0xa8>
 800a010:	ea23 0101 	bic.w	r1, r3, r1
 800a014:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a018:	2e13      	cmp	r6, #19
 800a01a:	fa43 f306 	asr.w	r3, r3, r6
 800a01e:	bf0c      	ite	eq
 800a020:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800a024:	2200      	movne	r2, #0
 800a026:	430b      	orrs	r3, r1
 800a028:	4619      	mov	r1, r3
 800a02a:	4b17      	ldr	r3, [pc, #92]	; (800a088 <rint+0x108>)
 800a02c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a030:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a034:	4610      	mov	r0, r2
 800a036:	462b      	mov	r3, r5
 800a038:	4622      	mov	r2, r4
 800a03a:	f7f6 f987 	bl	800034c <__adddf3>
 800a03e:	e9cd 0100 	strd	r0, r1, [sp]
 800a042:	4622      	mov	r2, r4
 800a044:	462b      	mov	r3, r5
 800a046:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a04a:	f7f6 f97d 	bl	8000348 <__aeabi_dsub>
 800a04e:	e7d0      	b.n	8009ff2 <rint+0x72>
 800a050:	2e33      	cmp	r6, #51	; 0x33
 800a052:	dd08      	ble.n	800a066 <rint+0xe6>
 800a054:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a058:	d1cb      	bne.n	8009ff2 <rint+0x72>
 800a05a:	ee10 2a10 	vmov	r2, s0
 800a05e:	460b      	mov	r3, r1
 800a060:	f7f6 f974 	bl	800034c <__adddf3>
 800a064:	e7c5      	b.n	8009ff2 <rint+0x72>
 800a066:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800a06a:	f04f 34ff 	mov.w	r4, #4294967295
 800a06e:	40f4      	lsrs	r4, r6
 800a070:	4220      	tst	r0, r4
 800a072:	d0be      	beq.n	8009ff2 <rint+0x72>
 800a074:	0861      	lsrs	r1, r4, #1
 800a076:	420f      	tst	r7, r1
 800a078:	bf1f      	itttt	ne
 800a07a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800a07e:	ea27 0101 	bicne.w	r1, r7, r1
 800a082:	4132      	asrne	r2, r6
 800a084:	430a      	orrne	r2, r1
 800a086:	e7cf      	b.n	800a028 <rint+0xa8>
 800a088:	0801e5a8 	.word	0x0801e5a8
 800a08c:	000fffff 	.word	0x000fffff

0800a090 <scalbn>:
 800a090:	b570      	push	{r4, r5, r6, lr}
 800a092:	ec55 4b10 	vmov	r4, r5, d0
 800a096:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a09a:	4606      	mov	r6, r0
 800a09c:	462b      	mov	r3, r5
 800a09e:	b9b2      	cbnz	r2, 800a0ce <scalbn+0x3e>
 800a0a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a0a4:	4323      	orrs	r3, r4
 800a0a6:	d03c      	beq.n	800a122 <scalbn+0x92>
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	4b33      	ldr	r3, [pc, #204]	; (800a178 <scalbn+0xe8>)
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	ee10 0a10 	vmov	r0, s0
 800a0b2:	f7f6 fafd 	bl	80006b0 <__aeabi_dmul>
 800a0b6:	4a31      	ldr	r2, [pc, #196]	; (800a17c <scalbn+0xec>)
 800a0b8:	4296      	cmp	r6, r2
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	460d      	mov	r5, r1
 800a0be:	460b      	mov	r3, r1
 800a0c0:	da13      	bge.n	800a0ea <scalbn+0x5a>
 800a0c2:	a329      	add	r3, pc, #164	; (adr r3, 800a168 <scalbn+0xd8>)
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	f7f6 faf2 	bl	80006b0 <__aeabi_dmul>
 800a0cc:	e00a      	b.n	800a0e4 <scalbn+0x54>
 800a0ce:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a0d2:	428a      	cmp	r2, r1
 800a0d4:	d10c      	bne.n	800a0f0 <scalbn+0x60>
 800a0d6:	ee10 2a10 	vmov	r2, s0
 800a0da:	462b      	mov	r3, r5
 800a0dc:	4620      	mov	r0, r4
 800a0de:	4629      	mov	r1, r5
 800a0e0:	f7f6 f934 	bl	800034c <__adddf3>
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	460d      	mov	r5, r1
 800a0e8:	e01b      	b.n	800a122 <scalbn+0x92>
 800a0ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a0ee:	3a36      	subs	r2, #54	; 0x36
 800a0f0:	4432      	add	r2, r6
 800a0f2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a0f6:	428a      	cmp	r2, r1
 800a0f8:	dd0b      	ble.n	800a112 <scalbn+0x82>
 800a0fa:	ec45 4b11 	vmov	d1, r4, r5
 800a0fe:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800a170 <scalbn+0xe0>
 800a102:	f000 fa19 	bl	800a538 <copysign>
 800a106:	a31a      	add	r3, pc, #104	; (adr r3, 800a170 <scalbn+0xe0>)
 800a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10c:	ec51 0b10 	vmov	r0, r1, d0
 800a110:	e7da      	b.n	800a0c8 <scalbn+0x38>
 800a112:	2a00      	cmp	r2, #0
 800a114:	dd08      	ble.n	800a128 <scalbn+0x98>
 800a116:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a11a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a11e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a122:	ec45 4b10 	vmov	d0, r4, r5
 800a126:	bd70      	pop	{r4, r5, r6, pc}
 800a128:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a12c:	da0d      	bge.n	800a14a <scalbn+0xba>
 800a12e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a132:	429e      	cmp	r6, r3
 800a134:	ec45 4b11 	vmov	d1, r4, r5
 800a138:	dce1      	bgt.n	800a0fe <scalbn+0x6e>
 800a13a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800a168 <scalbn+0xd8>
 800a13e:	f000 f9fb 	bl	800a538 <copysign>
 800a142:	a309      	add	r3, pc, #36	; (adr r3, 800a168 <scalbn+0xd8>)
 800a144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a148:	e7e0      	b.n	800a10c <scalbn+0x7c>
 800a14a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a14e:	3236      	adds	r2, #54	; 0x36
 800a150:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a154:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a158:	4620      	mov	r0, r4
 800a15a:	4629      	mov	r1, r5
 800a15c:	2200      	movs	r2, #0
 800a15e:	4b08      	ldr	r3, [pc, #32]	; (800a180 <scalbn+0xf0>)
 800a160:	e7b2      	b.n	800a0c8 <scalbn+0x38>
 800a162:	bf00      	nop
 800a164:	f3af 8000 	nop.w
 800a168:	c2f8f359 	.word	0xc2f8f359
 800a16c:	01a56e1f 	.word	0x01a56e1f
 800a170:	8800759c 	.word	0x8800759c
 800a174:	7e37e43c 	.word	0x7e37e43c
 800a178:	43500000 	.word	0x43500000
 800a17c:	ffff3cb0 	.word	0xffff3cb0
 800a180:	3c900000 	.word	0x3c900000
 800a184:	00000000 	.word	0x00000000

0800a188 <__ieee754_log>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	ec51 0b10 	vmov	r0, r1, d0
 800a190:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a194:	b087      	sub	sp, #28
 800a196:	ee10 3a10 	vmov	r3, s0
 800a19a:	460d      	mov	r5, r1
 800a19c:	da27      	bge.n	800a1ee <__ieee754_log+0x66>
 800a19e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	d10a      	bne.n	800a1bc <__ieee754_log+0x34>
 800a1a6:	49cc      	ldr	r1, [pc, #816]	; (800a4d8 <__ieee754_log+0x350>)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	f7f6 fba9 	bl	8000904 <__aeabi_ddiv>
 800a1b2:	ec41 0b10 	vmov	d0, r0, r1
 800a1b6:	b007      	add	sp, #28
 800a1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	da07      	bge.n	800a1d0 <__ieee754_log+0x48>
 800a1c0:	ee10 2a10 	vmov	r2, s0
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	f7f6 f8bf 	bl	8000348 <__aeabi_dsub>
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	e7ee      	b.n	800a1ae <__ieee754_log+0x26>
 800a1d0:	4bc2      	ldr	r3, [pc, #776]	; (800a4dc <__ieee754_log+0x354>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f7f6 fa6c 	bl	80006b0 <__aeabi_dmul>
 800a1d8:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a1dc:	460d      	mov	r5, r1
 800a1de:	4ac0      	ldr	r2, [pc, #768]	; (800a4e0 <__ieee754_log+0x358>)
 800a1e0:	4295      	cmp	r5, r2
 800a1e2:	dd06      	ble.n	800a1f2 <__ieee754_log+0x6a>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	f7f6 f8b0 	bl	800034c <__adddf3>
 800a1ec:	e7e1      	b.n	800a1b2 <__ieee754_log+0x2a>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	e7f5      	b.n	800a1de <__ieee754_log+0x56>
 800a1f2:	152c      	asrs	r4, r5, #20
 800a1f4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a1f8:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a1fc:	441c      	add	r4, r3
 800a1fe:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800a202:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800a206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a20a:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800a20e:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800a212:	ea42 0105 	orr.w	r1, r2, r5
 800a216:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a21a:	2200      	movs	r2, #0
 800a21c:	4bb1      	ldr	r3, [pc, #708]	; (800a4e4 <__ieee754_log+0x35c>)
 800a21e:	f7f6 f893 	bl	8000348 <__aeabi_dsub>
 800a222:	1cab      	adds	r3, r5, #2
 800a224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a228:	2b02      	cmp	r3, #2
 800a22a:	4682      	mov	sl, r0
 800a22c:	468b      	mov	fp, r1
 800a22e:	f04f 0200 	mov.w	r2, #0
 800a232:	dc5b      	bgt.n	800a2ec <__ieee754_log+0x164>
 800a234:	2300      	movs	r3, #0
 800a236:	f7f6 fca3 	bl	8000b80 <__aeabi_dcmpeq>
 800a23a:	b1d0      	cbz	r0, 800a272 <__ieee754_log+0xea>
 800a23c:	2c00      	cmp	r4, #0
 800a23e:	f000 8170 	beq.w	800a522 <__ieee754_log+0x39a>
 800a242:	4620      	mov	r0, r4
 800a244:	f7f6 f9ce 	bl	80005e4 <__aeabi_i2d>
 800a248:	a38f      	add	r3, pc, #572	; (adr r3, 800a488 <__ieee754_log+0x300>)
 800a24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24e:	4606      	mov	r6, r0
 800a250:	460f      	mov	r7, r1
 800a252:	f7f6 fa2d 	bl	80006b0 <__aeabi_dmul>
 800a256:	a38e      	add	r3, pc, #568	; (adr r3, 800a490 <__ieee754_log+0x308>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	4604      	mov	r4, r0
 800a25e:	460d      	mov	r5, r1
 800a260:	4630      	mov	r0, r6
 800a262:	4639      	mov	r1, r7
 800a264:	f7f6 fa24 	bl	80006b0 <__aeabi_dmul>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4620      	mov	r0, r4
 800a26e:	4629      	mov	r1, r5
 800a270:	e7ba      	b.n	800a1e8 <__ieee754_log+0x60>
 800a272:	a389      	add	r3, pc, #548	; (adr r3, 800a498 <__ieee754_log+0x310>)
 800a274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a278:	4650      	mov	r0, sl
 800a27a:	4659      	mov	r1, fp
 800a27c:	f7f6 fa18 	bl	80006b0 <__aeabi_dmul>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	2000      	movs	r0, #0
 800a286:	4998      	ldr	r1, [pc, #608]	; (800a4e8 <__ieee754_log+0x360>)
 800a288:	f7f6 f85e 	bl	8000348 <__aeabi_dsub>
 800a28c:	4652      	mov	r2, sl
 800a28e:	4606      	mov	r6, r0
 800a290:	460f      	mov	r7, r1
 800a292:	465b      	mov	r3, fp
 800a294:	4650      	mov	r0, sl
 800a296:	4659      	mov	r1, fp
 800a298:	f7f6 fa0a 	bl	80006b0 <__aeabi_dmul>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	f7f6 fa04 	bl	80006b0 <__aeabi_dmul>
 800a2a8:	4606      	mov	r6, r0
 800a2aa:	460f      	mov	r7, r1
 800a2ac:	b934      	cbnz	r4, 800a2bc <__ieee754_log+0x134>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4650      	mov	r0, sl
 800a2b4:	4659      	mov	r1, fp
 800a2b6:	f7f6 f847 	bl	8000348 <__aeabi_dsub>
 800a2ba:	e77a      	b.n	800a1b2 <__ieee754_log+0x2a>
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f7f6 f991 	bl	80005e4 <__aeabi_i2d>
 800a2c2:	a371      	add	r3, pc, #452	; (adr r3, 800a488 <__ieee754_log+0x300>)
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	4680      	mov	r8, r0
 800a2ca:	4689      	mov	r9, r1
 800a2cc:	f7f6 f9f0 	bl	80006b0 <__aeabi_dmul>
 800a2d0:	a36f      	add	r3, pc, #444	; (adr r3, 800a490 <__ieee754_log+0x308>)
 800a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	460d      	mov	r5, r1
 800a2da:	4640      	mov	r0, r8
 800a2dc:	4649      	mov	r1, r9
 800a2de:	f7f6 f9e7 	bl	80006b0 <__aeabi_dmul>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	4639      	mov	r1, r7
 800a2ea:	e0b2      	b.n	800a452 <__ieee754_log+0x2ca>
 800a2ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2f0:	f7f6 f82c 	bl	800034c <__adddf3>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4650      	mov	r0, sl
 800a2fa:	4659      	mov	r1, fp
 800a2fc:	f7f6 fb02 	bl	8000904 <__aeabi_ddiv>
 800a300:	e9cd 0100 	strd	r0, r1, [sp]
 800a304:	4620      	mov	r0, r4
 800a306:	f7f6 f96d 	bl	80005e4 <__aeabi_i2d>
 800a30a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a30e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a312:	4610      	mov	r0, r2
 800a314:	4619      	mov	r1, r3
 800a316:	f7f6 f9cb 	bl	80006b0 <__aeabi_dmul>
 800a31a:	4602      	mov	r2, r0
 800a31c:	460b      	mov	r3, r1
 800a31e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a322:	f7f6 f9c5 	bl	80006b0 <__aeabi_dmul>
 800a326:	a35e      	add	r3, pc, #376	; (adr r3, 800a4a0 <__ieee754_log+0x318>)
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	4606      	mov	r6, r0
 800a32e:	460f      	mov	r7, r1
 800a330:	f7f6 f9be 	bl	80006b0 <__aeabi_dmul>
 800a334:	a35c      	add	r3, pc, #368	; (adr r3, 800a4a8 <__ieee754_log+0x320>)
 800a336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33a:	f7f6 f807 	bl	800034c <__adddf3>
 800a33e:	4632      	mov	r2, r6
 800a340:	463b      	mov	r3, r7
 800a342:	f7f6 f9b5 	bl	80006b0 <__aeabi_dmul>
 800a346:	a35a      	add	r3, pc, #360	; (adr r3, 800a4b0 <__ieee754_log+0x328>)
 800a348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34c:	f7f5 fffe 	bl	800034c <__adddf3>
 800a350:	4632      	mov	r2, r6
 800a352:	463b      	mov	r3, r7
 800a354:	f7f6 f9ac 	bl	80006b0 <__aeabi_dmul>
 800a358:	a357      	add	r3, pc, #348	; (adr r3, 800a4b8 <__ieee754_log+0x330>)
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	f7f5 fff5 	bl	800034c <__adddf3>
 800a362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a366:	f7f6 f9a3 	bl	80006b0 <__aeabi_dmul>
 800a36a:	a355      	add	r3, pc, #340	; (adr r3, 800a4c0 <__ieee754_log+0x338>)
 800a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a374:	4630      	mov	r0, r6
 800a376:	4639      	mov	r1, r7
 800a378:	f7f6 f99a 	bl	80006b0 <__aeabi_dmul>
 800a37c:	a352      	add	r3, pc, #328	; (adr r3, 800a4c8 <__ieee754_log+0x340>)
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	f7f5 ffe3 	bl	800034c <__adddf3>
 800a386:	4632      	mov	r2, r6
 800a388:	463b      	mov	r3, r7
 800a38a:	f7f6 f991 	bl	80006b0 <__aeabi_dmul>
 800a38e:	a350      	add	r3, pc, #320	; (adr r3, 800a4d0 <__ieee754_log+0x348>)
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	f7f5 ffda 	bl	800034c <__adddf3>
 800a398:	4632      	mov	r2, r6
 800a39a:	463b      	mov	r3, r7
 800a39c:	f7f6 f988 	bl	80006b0 <__aeabi_dmul>
 800a3a0:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3b0:	f7f5 ffcc 	bl	800034c <__adddf3>
 800a3b4:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 800a3b8:	3551      	adds	r5, #81	; 0x51
 800a3ba:	ea45 0508 	orr.w	r5, r5, r8
 800a3be:	2d00      	cmp	r5, #0
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	460f      	mov	r7, r1
 800a3c4:	dd50      	ble.n	800a468 <__ieee754_log+0x2e0>
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	4b47      	ldr	r3, [pc, #284]	; (800a4e8 <__ieee754_log+0x360>)
 800a3ca:	4650      	mov	r0, sl
 800a3cc:	4659      	mov	r1, fp
 800a3ce:	f7f6 f96f 	bl	80006b0 <__aeabi_dmul>
 800a3d2:	4652      	mov	r2, sl
 800a3d4:	465b      	mov	r3, fp
 800a3d6:	f7f6 f96b 	bl	80006b0 <__aeabi_dmul>
 800a3da:	4680      	mov	r8, r0
 800a3dc:	4689      	mov	r9, r1
 800a3de:	b994      	cbnz	r4, 800a406 <__ieee754_log+0x27e>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	4639      	mov	r1, r7
 800a3e8:	f7f5 ffb0 	bl	800034c <__adddf3>
 800a3ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3f0:	f7f6 f95e 	bl	80006b0 <__aeabi_dmul>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4640      	mov	r0, r8
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	f7f5 ffa4 	bl	8000348 <__aeabi_dsub>
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	e755      	b.n	800a2b2 <__ieee754_log+0x12a>
 800a406:	a320      	add	r3, pc, #128	; (adr r3, 800a488 <__ieee754_log+0x300>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a410:	f7f6 f94e 	bl	80006b0 <__aeabi_dmul>
 800a414:	4642      	mov	r2, r8
 800a416:	464b      	mov	r3, r9
 800a418:	4604      	mov	r4, r0
 800a41a:	460d      	mov	r5, r1
 800a41c:	4630      	mov	r0, r6
 800a41e:	4639      	mov	r1, r7
 800a420:	f7f5 ff94 	bl	800034c <__adddf3>
 800a424:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a428:	f7f6 f942 	bl	80006b0 <__aeabi_dmul>
 800a42c:	a318      	add	r3, pc, #96	; (adr r3, 800a490 <__ieee754_log+0x308>)
 800a42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a432:	4606      	mov	r6, r0
 800a434:	460f      	mov	r7, r1
 800a436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a43a:	f7f6 f939 	bl	80006b0 <__aeabi_dmul>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4630      	mov	r0, r6
 800a444:	4639      	mov	r1, r7
 800a446:	f7f5 ff81 	bl	800034c <__adddf3>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	4640      	mov	r0, r8
 800a450:	4649      	mov	r1, r9
 800a452:	f7f5 ff79 	bl	8000348 <__aeabi_dsub>
 800a456:	4652      	mov	r2, sl
 800a458:	465b      	mov	r3, fp
 800a45a:	f7f5 ff75 	bl	8000348 <__aeabi_dsub>
 800a45e:	4602      	mov	r2, r0
 800a460:	460b      	mov	r3, r1
 800a462:	4620      	mov	r0, r4
 800a464:	4629      	mov	r1, r5
 800a466:	e726      	b.n	800a2b6 <__ieee754_log+0x12e>
 800a468:	2c00      	cmp	r4, #0
 800a46a:	d13f      	bne.n	800a4ec <__ieee754_log+0x364>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4650      	mov	r0, sl
 800a472:	4659      	mov	r1, fp
 800a474:	f7f5 ff68 	bl	8000348 <__aeabi_dsub>
 800a478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a47c:	f7f6 f918 	bl	80006b0 <__aeabi_dmul>
 800a480:	e7be      	b.n	800a400 <__ieee754_log+0x278>
 800a482:	bf00      	nop
 800a484:	f3af 8000 	nop.w
 800a488:	fee00000 	.word	0xfee00000
 800a48c:	3fe62e42 	.word	0x3fe62e42
 800a490:	35793c76 	.word	0x35793c76
 800a494:	3dea39ef 	.word	0x3dea39ef
 800a498:	55555555 	.word	0x55555555
 800a49c:	3fd55555 	.word	0x3fd55555
 800a4a0:	df3e5244 	.word	0xdf3e5244
 800a4a4:	3fc2f112 	.word	0x3fc2f112
 800a4a8:	96cb03de 	.word	0x96cb03de
 800a4ac:	3fc74664 	.word	0x3fc74664
 800a4b0:	94229359 	.word	0x94229359
 800a4b4:	3fd24924 	.word	0x3fd24924
 800a4b8:	55555593 	.word	0x55555593
 800a4bc:	3fe55555 	.word	0x3fe55555
 800a4c0:	d078c69f 	.word	0xd078c69f
 800a4c4:	3fc39a09 	.word	0x3fc39a09
 800a4c8:	1d8e78af 	.word	0x1d8e78af
 800a4cc:	3fcc71c5 	.word	0x3fcc71c5
 800a4d0:	9997fa04 	.word	0x9997fa04
 800a4d4:	3fd99999 	.word	0x3fd99999
 800a4d8:	c3500000 	.word	0xc3500000
 800a4dc:	43500000 	.word	0x43500000
 800a4e0:	7fefffff 	.word	0x7fefffff
 800a4e4:	3ff00000 	.word	0x3ff00000
 800a4e8:	3fe00000 	.word	0x3fe00000
 800a4ec:	a30e      	add	r3, pc, #56	; (adr r3, 800a528 <__ieee754_log+0x3a0>)
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4f6:	f7f6 f8db 	bl	80006b0 <__aeabi_dmul>
 800a4fa:	4632      	mov	r2, r6
 800a4fc:	463b      	mov	r3, r7
 800a4fe:	4604      	mov	r4, r0
 800a500:	460d      	mov	r5, r1
 800a502:	4650      	mov	r0, sl
 800a504:	4659      	mov	r1, fp
 800a506:	f7f5 ff1f 	bl	8000348 <__aeabi_dsub>
 800a50a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a50e:	f7f6 f8cf 	bl	80006b0 <__aeabi_dmul>
 800a512:	a307      	add	r3, pc, #28	; (adr r3, 800a530 <__ieee754_log+0x3a8>)
 800a514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a518:	4606      	mov	r6, r0
 800a51a:	460f      	mov	r7, r1
 800a51c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a520:	e6dd      	b.n	800a2de <__ieee754_log+0x156>
 800a522:	2000      	movs	r0, #0
 800a524:	2100      	movs	r1, #0
 800a526:	e644      	b.n	800a1b2 <__ieee754_log+0x2a>
 800a528:	fee00000 	.word	0xfee00000
 800a52c:	3fe62e42 	.word	0x3fe62e42
 800a530:	35793c76 	.word	0x35793c76
 800a534:	3dea39ef 	.word	0x3dea39ef

0800a538 <copysign>:
 800a538:	ec53 2b10 	vmov	r2, r3, d0
 800a53c:	ee11 0a90 	vmov	r0, s3
 800a540:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a544:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a548:	ea41 0300 	orr.w	r3, r1, r0
 800a54c:	ec43 2b10 	vmov	d0, r2, r3
 800a550:	4770      	bx	lr
	...

0800a554 <__errno>:
 800a554:	4b01      	ldr	r3, [pc, #4]	; (800a55c <__errno+0x8>)
 800a556:	6818      	ldr	r0, [r3, #0]
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	20000018 	.word	0x20000018

0800a560 <_close>:
 800a560:	4b02      	ldr	r3, [pc, #8]	; (800a56c <_close+0xc>)
 800a562:	2258      	movs	r2, #88	; 0x58
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	f04f 30ff 	mov.w	r0, #4294967295
 800a56a:	4770      	bx	lr
 800a56c:	20013038 	.word	0x20013038

0800a570 <_fstat>:
 800a570:	4b02      	ldr	r3, [pc, #8]	; (800a57c <_fstat+0xc>)
 800a572:	2258      	movs	r2, #88	; 0x58
 800a574:	601a      	str	r2, [r3, #0]
 800a576:	f04f 30ff 	mov.w	r0, #4294967295
 800a57a:	4770      	bx	lr
 800a57c:	20013038 	.word	0x20013038

0800a580 <_isatty>:
 800a580:	4b02      	ldr	r3, [pc, #8]	; (800a58c <_isatty+0xc>)
 800a582:	2258      	movs	r2, #88	; 0x58
 800a584:	601a      	str	r2, [r3, #0]
 800a586:	2000      	movs	r0, #0
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	20013038 	.word	0x20013038

0800a590 <_lseek>:
 800a590:	4b02      	ldr	r3, [pc, #8]	; (800a59c <_lseek+0xc>)
 800a592:	2258      	movs	r2, #88	; 0x58
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	f04f 30ff 	mov.w	r0, #4294967295
 800a59a:	4770      	bx	lr
 800a59c:	20013038 	.word	0x20013038

0800a5a0 <_read>:
 800a5a0:	4b02      	ldr	r3, [pc, #8]	; (800a5ac <_read+0xc>)
 800a5a2:	2258      	movs	r2, #88	; 0x58
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5aa:	4770      	bx	lr
 800a5ac:	20013038 	.word	0x20013038

0800a5b0 <_sbrk>:
 800a5b0:	4b04      	ldr	r3, [pc, #16]	; (800a5c4 <_sbrk+0x14>)
 800a5b2:	6819      	ldr	r1, [r3, #0]
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	b909      	cbnz	r1, 800a5bc <_sbrk+0xc>
 800a5b8:	4903      	ldr	r1, [pc, #12]	; (800a5c8 <_sbrk+0x18>)
 800a5ba:	6019      	str	r1, [r3, #0]
 800a5bc:	6818      	ldr	r0, [r3, #0]
 800a5be:	4402      	add	r2, r0
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	4770      	bx	lr
 800a5c4:	20012ca4 	.word	0x20012ca4
 800a5c8:	2001303c 	.word	0x2001303c

0800a5cc <_init>:
 800a5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ce:	bf00      	nop
 800a5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5d2:	bc08      	pop	{r3}
 800a5d4:	469e      	mov	lr, r3
 800a5d6:	4770      	bx	lr

0800a5d8 <_fini>:
 800a5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5da:	bf00      	nop
 800a5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5de:	bc08      	pop	{r3}
 800a5e0:	469e      	mov	lr, r3
 800a5e2:	4770      	bx	lr
