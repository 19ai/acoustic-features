
acoustic_event_detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a72c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014018  0800a8c0  0800a8c0  0001a8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e8d8  0801e8d8  0002e8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e8e0  0801e8e0  0002e8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e8e4  0801e8e4  0002e8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  0801e8e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00013578  200001e4  0801eacc  000301e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2001375c  0801eacc  0003375c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cf46  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000047a6  00000000  00000000  0004d15a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000108f1  00000000  00000000  00051900  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000012b8  00000000  00000000  000621f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000015a0  00000000  00000000  000634b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000af58  00000000  00000000  00064a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007366  00000000  00000000  0006f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  00076d0e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004794  00000000  00000000  00076df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  0007b58c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  0007b610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8a4 	.word	0x0800a8a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800a8a4 	.word	0x0800a8a4

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800047e:	f1a4 0401 	sub.w	r4, r4, #1
 8000482:	d1e9      	bne.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f092 0f00 	teq	r2, #0
 800062a:	bf14      	ite	ne
 800062c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000638:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800063c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000640:	e720      	b.n	8000484 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_ul2d>:
 8000644:	ea50 0201 	orrs.w	r2, r0, r1
 8000648:	bf08      	it	eq
 800064a:	4770      	bxeq	lr
 800064c:	b530      	push	{r4, r5, lr}
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	e00a      	b.n	800066a <__aeabi_l2d+0x16>

08000654 <__aeabi_l2d>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	b530      	push	{r4, r5, lr}
 800065e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000662:	d502      	bpl.n	800066a <__aeabi_l2d+0x16>
 8000664:	4240      	negs	r0, r0
 8000666:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800066a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800066e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000672:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000676:	f43f aedc 	beq.w	8000432 <__adddf3+0xe6>
 800067a:	f04f 0203 	mov.w	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	fa00 fc03 	lsl.w	ip, r0, r3
 800069a:	fa20 f002 	lsr.w	r0, r0, r2
 800069e:	fa01 fe03 	lsl.w	lr, r1, r3
 80006a2:	ea40 000e 	orr.w	r0, r0, lr
 80006a6:	fa21 f102 	lsr.w	r1, r1, r2
 80006aa:	4414      	add	r4, r2
 80006ac:	e6c1      	b.n	8000432 <__adddf3+0xe6>
 80006ae:	bf00      	nop

080006b0 <__aeabi_dmul>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006be:	bf1d      	ittte	ne
 80006c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006c4:	ea94 0f0c 	teqne	r4, ip
 80006c8:	ea95 0f0c 	teqne	r5, ip
 80006cc:	f000 f8de 	bleq	800088c <__aeabi_dmul+0x1dc>
 80006d0:	442c      	add	r4, r5
 80006d2:	ea81 0603 	eor.w	r6, r1, r3
 80006d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006e2:	bf18      	it	ne
 80006e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f0:	d038      	beq.n	8000764 <__aeabi_dmul+0xb4>
 80006f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000702:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000706:	f04f 0600 	mov.w	r6, #0
 800070a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800070e:	f09c 0f00 	teq	ip, #0
 8000712:	bf18      	it	ne
 8000714:	f04e 0e01 	orrne.w	lr, lr, #1
 8000718:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800071c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000720:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000724:	d204      	bcs.n	8000730 <__aeabi_dmul+0x80>
 8000726:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800072a:	416d      	adcs	r5, r5
 800072c:	eb46 0606 	adc.w	r6, r6, r6
 8000730:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000734:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000738:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800073c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000740:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000744:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000748:	bf88      	it	hi
 800074a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800074e:	d81e      	bhi.n	800078e <__aeabi_dmul+0xde>
 8000750:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000754:	bf08      	it	eq
 8000756:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800075a:	f150 0000 	adcs.w	r0, r0, #0
 800075e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000768:	ea46 0101 	orr.w	r1, r6, r1
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000778:	bfc2      	ittt	gt
 800077a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800077e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000782:	bd70      	popgt	{r4, r5, r6, pc}
 8000784:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000788:	f04f 0e00 	mov.w	lr, #0
 800078c:	3c01      	subs	r4, #1
 800078e:	f300 80ab 	bgt.w	80008e8 <__aeabi_dmul+0x238>
 8000792:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000796:	bfde      	ittt	le
 8000798:	2000      	movle	r0, #0
 800079a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800079e:	bd70      	pople	{r4, r5, r6, pc}
 80007a0:	f1c4 0400 	rsb	r4, r4, #0
 80007a4:	3c20      	subs	r4, #32
 80007a6:	da35      	bge.n	8000814 <__aeabi_dmul+0x164>
 80007a8:	340c      	adds	r4, #12
 80007aa:	dc1b      	bgt.n	80007e4 <__aeabi_dmul+0x134>
 80007ac:	f104 0414 	add.w	r4, r4, #20
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f305 	lsl.w	r3, r0, r5
 80007b8:	fa20 f004 	lsr.w	r0, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea40 0002 	orr.w	r0, r0, r2
 80007c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d0:	fa21 f604 	lsr.w	r6, r1, r4
 80007d4:	eb42 0106 	adc.w	r1, r2, r6
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f1c4 040c 	rsb	r4, r4, #12
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f304 	lsl.w	r3, r0, r4
 80007f0:	fa20 f005 	lsr.w	r0, r0, r5
 80007f4:	fa01 f204 	lsl.w	r2, r1, r4
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000804:	f141 0100 	adc.w	r1, r1, #0
 8000808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800080c:	bf08      	it	eq
 800080e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f1c4 0520 	rsb	r5, r4, #32
 8000818:	fa00 f205 	lsl.w	r2, r0, r5
 800081c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000820:	fa20 f304 	lsr.w	r3, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea43 0302 	orr.w	r3, r3, r2
 800082c:	fa21 f004 	lsr.w	r0, r1, r4
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	fa21 f204 	lsr.w	r2, r1, r4
 8000838:	ea20 0002 	bic.w	r0, r0, r2
 800083c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f094 0f00 	teq	r4, #0
 8000850:	d10f      	bne.n	8000872 <__aeabi_dmul+0x1c2>
 8000852:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000856:	0040      	lsls	r0, r0, #1
 8000858:	eb41 0101 	adc.w	r1, r1, r1
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	bf08      	it	eq
 8000862:	3c01      	subeq	r4, #1
 8000864:	d0f7      	beq.n	8000856 <__aeabi_dmul+0x1a6>
 8000866:	ea41 0106 	orr.w	r1, r1, r6
 800086a:	f095 0f00 	teq	r5, #0
 800086e:	bf18      	it	ne
 8000870:	4770      	bxne	lr
 8000872:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000876:	0052      	lsls	r2, r2, #1
 8000878:	eb43 0303 	adc.w	r3, r3, r3
 800087c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000880:	bf08      	it	eq
 8000882:	3d01      	subeq	r5, #1
 8000884:	d0f7      	beq.n	8000876 <__aeabi_dmul+0x1c6>
 8000886:	ea43 0306 	orr.w	r3, r3, r6
 800088a:	4770      	bx	lr
 800088c:	ea94 0f0c 	teq	r4, ip
 8000890:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000894:	bf18      	it	ne
 8000896:	ea95 0f0c 	teqne	r5, ip
 800089a:	d00c      	beq.n	80008b6 <__aeabi_dmul+0x206>
 800089c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008a6:	d1d1      	bne.n	800084c <__aeabi_dmul+0x19c>
 80008a8:	ea81 0103 	eor.w	r1, r1, r3
 80008ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b0:	f04f 0000 	mov.w	r0, #0
 80008b4:	bd70      	pop	{r4, r5, r6, pc}
 80008b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008ba:	bf06      	itte	eq
 80008bc:	4610      	moveq	r0, r2
 80008be:	4619      	moveq	r1, r3
 80008c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008c4:	d019      	beq.n	80008fa <__aeabi_dmul+0x24a>
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	d102      	bne.n	80008d2 <__aeabi_dmul+0x222>
 80008cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d0:	d113      	bne.n	80008fa <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	d105      	bne.n	80008e4 <__aeabi_dmul+0x234>
 80008d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008dc:	bf1c      	itt	ne
 80008de:	4610      	movne	r0, r2
 80008e0:	4619      	movne	r1, r3
 80008e2:	d10a      	bne.n	80008fa <__aeabi_dmul+0x24a>
 80008e4:	ea81 0103 	eor.w	r1, r1, r3
 80008e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008f4:	f04f 0000 	mov.w	r0, #0
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
 80008fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000902:	bd70      	pop	{r4, r5, r6, pc}

08000904 <__aeabi_ddiv>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800090a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800090e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000912:	bf1d      	ittte	ne
 8000914:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000918:	ea94 0f0c 	teqne	r4, ip
 800091c:	ea95 0f0c 	teqne	r5, ip
 8000920:	f000 f8a7 	bleq	8000a72 <__aeabi_ddiv+0x16e>
 8000924:	eba4 0405 	sub.w	r4, r4, r5
 8000928:	ea81 0e03 	eor.w	lr, r1, r3
 800092c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000930:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000934:	f000 8088 	beq.w	8000a48 <__aeabi_ddiv+0x144>
 8000938:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800093c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000940:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000944:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000948:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800094c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000950:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000954:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000958:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800095c:	429d      	cmp	r5, r3
 800095e:	bf08      	it	eq
 8000960:	4296      	cmpeq	r6, r2
 8000962:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000966:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800096a:	d202      	bcs.n	8000972 <__aeabi_ddiv+0x6e>
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	1ab6      	subs	r6, r6, r2
 8000974:	eb65 0503 	sbc.w	r5, r5, r3
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000982:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 000c 	orrcs.w	r0, r0, ip
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009e4:	d018      	beq.n	8000a18 <__aeabi_ddiv+0x114>
 80009e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a02:	d1c0      	bne.n	8000986 <__aeabi_ddiv+0x82>
 8000a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a08:	d10b      	bne.n	8000a22 <__aeabi_ddiv+0x11e>
 8000a0a:	ea41 0100 	orr.w	r1, r1, r0
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a16:	e7b6      	b.n	8000986 <__aeabi_ddiv+0x82>
 8000a18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a1c:	bf04      	itt	eq
 8000a1e:	4301      	orreq	r1, r0
 8000a20:	2000      	moveq	r0, #0
 8000a22:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a26:	bf88      	it	hi
 8000a28:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a2c:	f63f aeaf 	bhi.w	800078e <__aeabi_dmul+0xde>
 8000a30:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a34:	bf04      	itt	eq
 8000a36:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a3e:	f150 0000 	adcs.w	r0, r0, #0
 8000a42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a4c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a50:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a54:	bfc2      	ittt	gt
 8000a56:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a5e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a64:	f04f 0e00 	mov.w	lr, #0
 8000a68:	3c01      	subs	r4, #1
 8000a6a:	e690      	b.n	800078e <__aeabi_dmul+0xde>
 8000a6c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a70:	e68d      	b.n	800078e <__aeabi_dmul+0xde>
 8000a72:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a76:	ea94 0f0c 	teq	r4, ip
 8000a7a:	bf08      	it	eq
 8000a7c:	ea95 0f0c 	teqeq	r5, ip
 8000a80:	f43f af3b 	beq.w	80008fa <__aeabi_dmul+0x24a>
 8000a84:	ea94 0f0c 	teq	r4, ip
 8000a88:	d10a      	bne.n	8000aa0 <__aeabi_ddiv+0x19c>
 8000a8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a8e:	f47f af34 	bne.w	80008fa <__aeabi_dmul+0x24a>
 8000a92:	ea95 0f0c 	teq	r5, ip
 8000a96:	f47f af25 	bne.w	80008e4 <__aeabi_dmul+0x234>
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	e72c      	b.n	80008fa <__aeabi_dmul+0x24a>
 8000aa0:	ea95 0f0c 	teq	r5, ip
 8000aa4:	d106      	bne.n	8000ab4 <__aeabi_ddiv+0x1b0>
 8000aa6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aaa:	f43f aefd 	beq.w	80008a8 <__aeabi_dmul+0x1f8>
 8000aae:	4610      	mov	r0, r2
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	e722      	b.n	80008fa <__aeabi_dmul+0x24a>
 8000ab4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab8:	bf18      	it	ne
 8000aba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000abe:	f47f aec5 	bne.w	800084c <__aeabi_dmul+0x19c>
 8000ac2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ac6:	f47f af0d 	bne.w	80008e4 <__aeabi_dmul+0x234>
 8000aca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ace:	f47f aeeb 	bne.w	80008a8 <__aeabi_dmul+0x1f8>
 8000ad2:	e712      	b.n	80008fa <__aeabi_dmul+0x24a>

08000ad4 <__gedf2>:
 8000ad4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad8:	e006      	b.n	8000ae8 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__ledf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	e002      	b.n	8000ae8 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__cmpdf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	bf18      	it	ne
 8000afa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000afe:	d01b      	beq.n	8000b38 <__cmpdf2+0x54>
 8000b00:	b001      	add	sp, #4
 8000b02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b06:	bf0c      	ite	eq
 8000b08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b0c:	ea91 0f03 	teqne	r1, r3
 8000b10:	bf02      	ittt	eq
 8000b12:	ea90 0f02 	teqeq	r0, r2
 8000b16:	2000      	moveq	r0, #0
 8000b18:	4770      	bxeq	lr
 8000b1a:	f110 0f00 	cmn.w	r0, #0
 8000b1e:	ea91 0f03 	teq	r1, r3
 8000b22:	bf58      	it	pl
 8000b24:	4299      	cmppl	r1, r3
 8000b26:	bf08      	it	eq
 8000b28:	4290      	cmpeq	r0, r2
 8000b2a:	bf2c      	ite	cs
 8000b2c:	17d8      	asrcs	r0, r3, #31
 8000b2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b32:	f040 0001 	orr.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b40:	d102      	bne.n	8000b48 <__cmpdf2+0x64>
 8000b42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b46:	d107      	bne.n	8000b58 <__cmpdf2+0x74>
 8000b48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b50:	d1d6      	bne.n	8000b00 <__cmpdf2+0x1c>
 8000b52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b56:	d0d3      	beq.n	8000b00 <__cmpdf2+0x1c>
 8000b58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_cdrcmple>:
 8000b60:	4684      	mov	ip, r0
 8000b62:	4610      	mov	r0, r2
 8000b64:	4662      	mov	r2, ip
 8000b66:	468c      	mov	ip, r1
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4663      	mov	r3, ip
 8000b6c:	e000      	b.n	8000b70 <__aeabi_cdcmpeq>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_cdcmpeq>:
 8000b70:	b501      	push	{r0, lr}
 8000b72:	f7ff ffb7 	bl	8000ae4 <__cmpdf2>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	bf48      	it	mi
 8000b7a:	f110 0f00 	cmnmi.w	r0, #0
 8000b7e:	bd01      	pop	{r0, pc}

08000b80 <__aeabi_dcmpeq>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff fff4 	bl	8000b70 <__aeabi_cdcmpeq>
 8000b88:	bf0c      	ite	eq
 8000b8a:	2001      	moveq	r0, #1
 8000b8c:	2000      	movne	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_dcmplt>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff ffea 	bl	8000b70 <__aeabi_cdcmpeq>
 8000b9c:	bf34      	ite	cc
 8000b9e:	2001      	movcc	r0, #1
 8000ba0:	2000      	movcs	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_dcmple>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff ffe0 	bl	8000b70 <__aeabi_cdcmpeq>
 8000bb0:	bf94      	ite	ls
 8000bb2:	2001      	movls	r0, #1
 8000bb4:	2000      	movhi	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmpge>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffce 	bl	8000b60 <__aeabi_cdrcmple>
 8000bc4:	bf94      	ite	ls
 8000bc6:	2001      	movls	r0, #1
 8000bc8:	2000      	movhi	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmpgt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffc4 	bl	8000b60 <__aeabi_cdrcmple>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpun>:
 8000be4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bec:	d102      	bne.n	8000bf4 <__aeabi_dcmpun+0x10>
 8000bee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bf2:	d10a      	bne.n	8000c0a <__aeabi_dcmpun+0x26>
 8000bf4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bfc:	d102      	bne.n	8000c04 <__aeabi_dcmpun+0x20>
 8000bfe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_dcmpun+0x26>
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0001 	mov.w	r0, #1
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2iz>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c18:	d215      	bcs.n	8000c46 <__aeabi_d2iz+0x36>
 8000c1a:	d511      	bpl.n	8000c40 <__aeabi_d2iz+0x30>
 8000c1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c24:	d912      	bls.n	8000c4c <__aeabi_d2iz+0x3c>
 8000c26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c36:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d105      	bne.n	8000c58 <__aeabi_d2iz+0x48>
 8000c4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	bf08      	it	eq
 8000c52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c56:	4770      	bx	lr
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <__aeabi_d2uiz>:
 8000c60:	004a      	lsls	r2, r1, #1
 8000c62:	d211      	bcs.n	8000c88 <__aeabi_d2uiz+0x28>
 8000c64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c68:	d211      	bcs.n	8000c8e <__aeabi_d2uiz+0x2e>
 8000c6a:	d50d      	bpl.n	8000c88 <__aeabi_d2uiz+0x28>
 8000c6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c74:	d40e      	bmi.n	8000c94 <__aeabi_d2uiz+0x34>
 8000c76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c82:	fa23 f002 	lsr.w	r0, r3, r2
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d102      	bne.n	8000c9a <__aeabi_d2uiz+0x3a>
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	4770      	bx	lr
 8000c9a:	f04f 0000 	mov.w	r0, #0
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_d2f>:
 8000ca0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ca4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ca8:	bf24      	itt	cs
 8000caa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cb2:	d90d      	bls.n	8000cd0 <__aeabi_d2f+0x30>
 8000cb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cc8:	bf08      	it	eq
 8000cca:	f020 0001 	biceq.w	r0, r0, #1
 8000cce:	4770      	bx	lr
 8000cd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cd4:	d121      	bne.n	8000d1a <__aeabi_d2f+0x7a>
 8000cd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cda:	bfbc      	itt	lt
 8000cdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce0:	4770      	bxlt	lr
 8000ce2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ce6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cea:	f1c2 0218 	rsb	r2, r2, #24
 8000cee:	f1c2 0c20 	rsb	ip, r2, #32
 8000cf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000cfa:	bf18      	it	ne
 8000cfc:	f040 0001 	orrne.w	r0, r0, #1
 8000d00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d0c:	ea40 000c 	orr.w	r0, r0, ip
 8000d10:	fa23 f302 	lsr.w	r3, r3, r2
 8000d14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d18:	e7cc      	b.n	8000cb4 <__aeabi_d2f+0x14>
 8000d1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d1e:	d107      	bne.n	8000d30 <__aeabi_d2f+0x90>
 8000d20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d24:	bf1e      	ittt	ne
 8000d26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d2e:	4770      	bxne	lr
 8000d30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <__aeabi_uldivmod>:
 8000d40:	b953      	cbnz	r3, 8000d58 <__aeabi_uldivmod+0x18>
 8000d42:	b94a      	cbnz	r2, 8000d58 <__aeabi_uldivmod+0x18>
 8000d44:	2900      	cmp	r1, #0
 8000d46:	bf08      	it	eq
 8000d48:	2800      	cmpeq	r0, #0
 8000d4a:	bf1c      	itt	ne
 8000d4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d50:	f04f 30ff 	movne.w	r0, #4294967295
 8000d54:	f000 b97a 	b.w	800104c <__aeabi_idiv0>
 8000d58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d60:	f000 f806 	bl	8000d70 <__udivmoddi4>
 8000d64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6c:	b004      	add	sp, #16
 8000d6e:	4770      	bx	lr

08000d70 <__udivmoddi4>:
 8000d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d74:	468c      	mov	ip, r1
 8000d76:	460d      	mov	r5, r1
 8000d78:	4604      	mov	r4, r0
 8000d7a:	9e08      	ldr	r6, [sp, #32]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d151      	bne.n	8000e24 <__udivmoddi4+0xb4>
 8000d80:	428a      	cmp	r2, r1
 8000d82:	4617      	mov	r7, r2
 8000d84:	d96d      	bls.n	8000e62 <__udivmoddi4+0xf2>
 8000d86:	fab2 fe82 	clz	lr, r2
 8000d8a:	f1be 0f00 	cmp.w	lr, #0
 8000d8e:	d00b      	beq.n	8000da8 <__udivmoddi4+0x38>
 8000d90:	f1ce 0c20 	rsb	ip, lr, #32
 8000d94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000da0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000da4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000da8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000dac:	0c25      	lsrs	r5, r4, #16
 8000dae:	fbbc f8fa 	udiv	r8, ip, sl
 8000db2:	fa1f f987 	uxth.w	r9, r7
 8000db6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000dba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000dbe:	fb08 f309 	mul.w	r3, r8, r9
 8000dc2:	42ab      	cmp	r3, r5
 8000dc4:	d90a      	bls.n	8000ddc <__udivmoddi4+0x6c>
 8000dc6:	19ed      	adds	r5, r5, r7
 8000dc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000dcc:	f080 8123 	bcs.w	8001016 <__udivmoddi4+0x2a6>
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	f240 8120 	bls.w	8001016 <__udivmoddi4+0x2a6>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	443d      	add	r5, r7
 8000ddc:	1aed      	subs	r5, r5, r3
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000de4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000de8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dec:	fb00 f909 	mul.w	r9, r0, r9
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	d909      	bls.n	8000e08 <__udivmoddi4+0x98>
 8000df4:	19e4      	adds	r4, r4, r7
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	f080 810a 	bcs.w	8001012 <__udivmoddi4+0x2a2>
 8000dfe:	45a1      	cmp	r9, r4
 8000e00:	f240 8107 	bls.w	8001012 <__udivmoddi4+0x2a2>
 8000e04:	3802      	subs	r0, #2
 8000e06:	443c      	add	r4, r7
 8000e08:	eba4 0409 	sub.w	r4, r4, r9
 8000e0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e10:	2100      	movs	r1, #0
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	d061      	beq.n	8000eda <__udivmoddi4+0x16a>
 8000e16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	6034      	str	r4, [r6, #0]
 8000e1e:	6073      	str	r3, [r6, #4]
 8000e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xc8>
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d054      	beq.n	8000ed6 <__udivmoddi4+0x166>
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000e32:	4608      	mov	r0, r1
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	fab3 f183 	clz	r1, r3
 8000e3c:	2900      	cmp	r1, #0
 8000e3e:	f040 808e 	bne.w	8000f5e <__udivmoddi4+0x1ee>
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xdc>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 80fa 	bhi.w	8001040 <__udivmoddi4+0x2d0>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	46ac      	mov	ip, r5
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d03f      	beq.n	8000eda <__udivmoddi4+0x16a>
 8000e5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	b912      	cbnz	r2, 8000e6a <__udivmoddi4+0xfa>
 8000e64:	2701      	movs	r7, #1
 8000e66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000e6a:	fab7 fe87 	clz	lr, r7
 8000e6e:	f1be 0f00 	cmp.w	lr, #0
 8000e72:	d134      	bne.n	8000ede <__udivmoddi4+0x16e>
 8000e74:	1beb      	subs	r3, r5, r7
 8000e76:	0c3a      	lsrs	r2, r7, #16
 8000e78:	fa1f fc87 	uxth.w	ip, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000e82:	0c25      	lsrs	r5, r4, #16
 8000e84:	fb02 3318 	mls	r3, r2, r8, r3
 8000e88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e8c:	fb0c f308 	mul.w	r3, ip, r8
 8000e90:	42ab      	cmp	r3, r5
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x134>
 8000e94:	19ed      	adds	r5, r5, r7
 8000e96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x132>
 8000e9c:	42ab      	cmp	r3, r5
 8000e9e:	f200 80d1 	bhi.w	8001044 <__udivmoddi4+0x2d4>
 8000ea2:	4680      	mov	r8, r0
 8000ea4:	1aed      	subs	r5, r5, r3
 8000ea6:	b2a3      	uxth	r3, r4
 8000ea8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000eac:	fb02 5510 	mls	r5, r2, r0, r5
 8000eb0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000eb4:	fb0c fc00 	mul.w	ip, ip, r0
 8000eb8:	45a4      	cmp	ip, r4
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x15c>
 8000ebc:	19e4      	adds	r4, r4, r7
 8000ebe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x15a>
 8000ec4:	45a4      	cmp	ip, r4
 8000ec6:	f200 80b8 	bhi.w	800103a <__udivmoddi4+0x2ca>
 8000eca:	4618      	mov	r0, r3
 8000ecc:	eba4 040c 	sub.w	r4, r4, ip
 8000ed0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ed4:	e79d      	b.n	8000e12 <__udivmoddi4+0xa2>
 8000ed6:	4631      	mov	r1, r6
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ede:	f1ce 0420 	rsb	r4, lr, #32
 8000ee2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000ee6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000eea:	fa20 f804 	lsr.w	r8, r0, r4
 8000eee:	0c3a      	lsrs	r2, r7, #16
 8000ef0:	fa25 f404 	lsr.w	r4, r5, r4
 8000ef4:	ea48 0803 	orr.w	r8, r8, r3
 8000ef8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000efc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000f00:	fb02 4411 	mls	r4, r2, r1, r4
 8000f04:	fa1f fc87 	uxth.w	ip, r7
 8000f08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000f0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000f10:	42ab      	cmp	r3, r5
 8000f12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000f16:	d909      	bls.n	8000f2c <__udivmoddi4+0x1bc>
 8000f18:	19ed      	adds	r5, r5, r7
 8000f1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f1e:	f080 808a 	bcs.w	8001036 <__udivmoddi4+0x2c6>
 8000f22:	42ab      	cmp	r3, r5
 8000f24:	f240 8087 	bls.w	8001036 <__udivmoddi4+0x2c6>
 8000f28:	3902      	subs	r1, #2
 8000f2a:	443d      	add	r5, r7
 8000f2c:	1aeb      	subs	r3, r5, r3
 8000f2e:	fa1f f588 	uxth.w	r5, r8
 8000f32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000f36:	fb02 3310 	mls	r3, r2, r0, r3
 8000f3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000f3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000f42:	42ab      	cmp	r3, r5
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1e6>
 8000f46:	19ed      	adds	r5, r5, r7
 8000f48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4c:	d26f      	bcs.n	800102e <__udivmoddi4+0x2be>
 8000f4e:	42ab      	cmp	r3, r5
 8000f50:	d96d      	bls.n	800102e <__udivmoddi4+0x2be>
 8000f52:	3802      	subs	r0, #2
 8000f54:	443d      	add	r5, r7
 8000f56:	1aeb      	subs	r3, r5, r3
 8000f58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f5c:	e78f      	b.n	8000e7e <__udivmoddi4+0x10e>
 8000f5e:	f1c1 0720 	rsb	r7, r1, #32
 8000f62:	fa22 f807 	lsr.w	r8, r2, r7
 8000f66:	408b      	lsls	r3, r1
 8000f68:	fa05 f401 	lsl.w	r4, r5, r1
 8000f6c:	ea48 0303 	orr.w	r3, r8, r3
 8000f70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000f74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000f7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000f82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000f86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000f8a:	fa1f f883 	uxth.w	r8, r3
 8000f8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f92:	fb09 f408 	mul.w	r4, r9, r8
 8000f96:	42ac      	cmp	r4, r5
 8000f98:	fa02 f201 	lsl.w	r2, r2, r1
 8000f9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x244>
 8000fa2:	18ed      	adds	r5, r5, r3
 8000fa4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fa8:	d243      	bcs.n	8001032 <__udivmoddi4+0x2c2>
 8000faa:	42ac      	cmp	r4, r5
 8000fac:	d941      	bls.n	8001032 <__udivmoddi4+0x2c2>
 8000fae:	f1a9 0902 	sub.w	r9, r9, #2
 8000fb2:	441d      	add	r5, r3
 8000fb4:	1b2d      	subs	r5, r5, r4
 8000fb6:	fa1f fe8e 	uxth.w	lr, lr
 8000fba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000fbe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000fc2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000fc6:	fb00 f808 	mul.w	r8, r0, r8
 8000fca:	45a0      	cmp	r8, r4
 8000fcc:	d907      	bls.n	8000fde <__udivmoddi4+0x26e>
 8000fce:	18e4      	adds	r4, r4, r3
 8000fd0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000fd4:	d229      	bcs.n	800102a <__udivmoddi4+0x2ba>
 8000fd6:	45a0      	cmp	r8, r4
 8000fd8:	d927      	bls.n	800102a <__udivmoddi4+0x2ba>
 8000fda:	3802      	subs	r0, #2
 8000fdc:	441c      	add	r4, r3
 8000fde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fe2:	eba4 0408 	sub.w	r4, r4, r8
 8000fe6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fea:	454c      	cmp	r4, r9
 8000fec:	46c6      	mov	lr, r8
 8000fee:	464d      	mov	r5, r9
 8000ff0:	d315      	bcc.n	800101e <__udivmoddi4+0x2ae>
 8000ff2:	d012      	beq.n	800101a <__udivmoddi4+0x2aa>
 8000ff4:	b156      	cbz	r6, 800100c <__udivmoddi4+0x29c>
 8000ff6:	ebba 030e 	subs.w	r3, sl, lr
 8000ffa:	eb64 0405 	sbc.w	r4, r4, r5
 8000ffe:	fa04 f707 	lsl.w	r7, r4, r7
 8001002:	40cb      	lsrs	r3, r1
 8001004:	431f      	orrs	r7, r3
 8001006:	40cc      	lsrs	r4, r1
 8001008:	6037      	str	r7, [r6, #0]
 800100a:	6074      	str	r4, [r6, #4]
 800100c:	2100      	movs	r1, #0
 800100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001012:	4618      	mov	r0, r3
 8001014:	e6f8      	b.n	8000e08 <__udivmoddi4+0x98>
 8001016:	4690      	mov	r8, r2
 8001018:	e6e0      	b.n	8000ddc <__udivmoddi4+0x6c>
 800101a:	45c2      	cmp	sl, r8
 800101c:	d2ea      	bcs.n	8000ff4 <__udivmoddi4+0x284>
 800101e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001022:	eb69 0503 	sbc.w	r5, r9, r3
 8001026:	3801      	subs	r0, #1
 8001028:	e7e4      	b.n	8000ff4 <__udivmoddi4+0x284>
 800102a:	4628      	mov	r0, r5
 800102c:	e7d7      	b.n	8000fde <__udivmoddi4+0x26e>
 800102e:	4640      	mov	r0, r8
 8001030:	e791      	b.n	8000f56 <__udivmoddi4+0x1e6>
 8001032:	4681      	mov	r9, r0
 8001034:	e7be      	b.n	8000fb4 <__udivmoddi4+0x244>
 8001036:	4601      	mov	r1, r0
 8001038:	e778      	b.n	8000f2c <__udivmoddi4+0x1bc>
 800103a:	3802      	subs	r0, #2
 800103c:	443c      	add	r4, r7
 800103e:	e745      	b.n	8000ecc <__udivmoddi4+0x15c>
 8001040:	4608      	mov	r0, r1
 8001042:	e708      	b.n	8000e56 <__udivmoddi4+0xe6>
 8001044:	f1a8 0802 	sub.w	r8, r8, #2
 8001048:	443d      	add	r5, r7
 800104a:	e72b      	b.n	8000ea4 <__udivmoddi4+0x134>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_InitTick+0x2c>)
{
 8001054:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001060:	f000 f892 	bl	8001188 <HAL_SYSTICK_Config>
 8001064:	4604      	mov	r4, r0
 8001066:	b938      	cbnz	r0, 8001078 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001068:	4602      	mov	r2, r0
 800106a:	4629      	mov	r1, r5
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f000 f84a 	bl	8001108 <HAL_NVIC_SetPriority>
 8001074:	4620      	mov	r0, r4
 8001076:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8001078:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800107a:	bd38      	pop	{r3, r4, r5, pc}
 800107c:	2000000c 	.word	0x2000000c

08001080 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <HAL_Init+0x28>)
 8001082:	6813      	ldr	r3, [r2, #0]
 8001084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001088:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108e:	f000 f829 	bl	80010e4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff ffdc 	bl	8001050 <HAL_InitTick>
 8001098:	4604      	mov	r4, r0
 800109a:	b918      	cbnz	r0, 80010a4 <HAL_Init+0x24>
    HAL_MspInit();
 800109c:	f003 faca 	bl	8004634 <HAL_MspInit>
}
 80010a0:	4620      	mov	r0, r4
 80010a2:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80010a4:	2401      	movs	r4, #1
 80010a6:	e7fb      	b.n	80010a0 <HAL_Init+0x20>
 80010a8:	40022000 	.word	0x40022000

080010ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80010ac:	4a02      	ldr	r2, [pc, #8]	; (80010b8 <HAL_IncTick+0xc>)
 80010ae:	6813      	ldr	r3, [r2, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	2001349c 	.word	0x2001349c

080010bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010bc:	4b01      	ldr	r3, [pc, #4]	; (80010c4 <HAL_GetTick+0x8>)
 80010be:	6818      	ldr	r0, [r3, #0]
}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2001349c 	.word	0x2001349c

080010c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c8:	b538      	push	{r3, r4, r5, lr}
 80010ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff fff6 	bl	80010bc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80010d2:	4605      	mov	r5, r0
  {
    wait++;
 80010d4:	bf18      	it	ne
 80010d6:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010d8:	f7ff fff0 	bl	80010bc <HAL_GetTick>
 80010dc:	1b40      	subs	r0, r0, r5
 80010de:	4284      	cmp	r4, r0
 80010e0:	d8fa      	bhi.n	80010d8 <HAL_Delay+0x10>
  {
  }
}
 80010e2:	bd38      	pop	{r3, r4, r5, pc}

080010e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80010e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010ec:	041b      	lsls	r3, r3, #16
 80010ee:	0c1b      	lsrs	r3, r3, #16
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010f4:	0200      	lsls	r0, r0, #8
 80010f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80010fe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001100:	60d3      	str	r3, [r2, #12]
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110a:	b530      	push	{r4, r5, lr}
 800110c:	68dc      	ldr	r4, [r3, #12]
 800110e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001112:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	2b04      	cmp	r3, #4
 800111a:	bf28      	it	cs
 800111c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 0501 	mov.w	r5, #1
 8001124:	fa05 f303 	lsl.w	r3, r5, r3
 8001128:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112c:	bf8c      	ite	hi
 800112e:	3c03      	subhi	r4, #3
 8001130:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001132:	4019      	ands	r1, r3
 8001134:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001136:	fa05 f404 	lsl.w	r4, r5, r4
 800113a:	3c01      	subs	r4, #1
 800113c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800113e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	ea42 0201 	orr.w	r2, r2, r1
 8001144:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	bfaf      	iteee	ge
 800114a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	f000 000f 	andlt.w	r0, r0, #15
 8001152:	4b06      	ldrlt	r3, [pc, #24]	; (800116c <HAL_NVIC_SetPriority+0x64>)
 8001154:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	bfa5      	ittet	ge
 8001158:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800115c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001160:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001164:	bd30      	pop	{r4, r5, pc}
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00
 800116c:	e000ed14 	.word	0xe000ed14

08001170 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001170:	0942      	lsrs	r2, r0, #5
 8001172:	2301      	movs	r3, #1
 8001174:	f000 001f 	and.w	r0, r0, #31
 8001178:	fa03 f000 	lsl.w	r0, r3, r0
 800117c:	4b01      	ldr	r3, [pc, #4]	; (8001184 <HAL_NVIC_EnableIRQ+0x14>)
 800117e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100

08001188 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	3801      	subs	r0, #1
 800118a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800118e:	d20a      	bcs.n	80011a6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001194:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	21f0      	movs	r1, #240	; 0xf0
 8001198:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80011b6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80011b8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80011ba:	bf0c      	ite	eq
 80011bc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80011c0:	f022 0204 	bicne.w	r2, r2, #4
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	4770      	bx	lr
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80011cc:	4770      	bx	lr

080011ce <HAL_SYSTICK_IRQHandler>:
{
 80011ce:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80011d0:	f7ff fffc 	bl	80011cc <HAL_SYSTICK_Callback>
 80011d4:	bd08      	pop	{r3, pc}

080011d6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80011d6:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 80011d8:	4604      	mov	r4, r0
 80011da:	b168      	cbz	r0, 80011f8 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80011dc:	7903      	ldrb	r3, [r0, #4]
 80011de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011e2:	b913      	cbnz	r3, 80011ea <HAL_DAC_Init+0x14>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80011e4:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80011e6:	f002 f961 	bl	80034ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80011ea:	2302      	movs	r3, #2
 80011ec:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80011ee:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80011f0:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80011f2:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80011f4:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80011f6:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80011f8:	2001      	movs	r0, #1
}
 80011fa:	bd10      	pop	{r4, pc}

080011fc <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011fc:	7943      	ldrb	r3, [r0, #5]
 80011fe:	2b01      	cmp	r3, #1
{
 8001200:	b530      	push	{r4, r5, lr}
 8001202:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8001206:	d017      	beq.n	8001238 <HAL_DAC_Start+0x3c>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001208:	7103      	strb	r3, [r0, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800120a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 800120c:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 800120e:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 8001210:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001212:	f001 0510 	and.w	r5, r1, #16
 8001216:	40aa      	lsls	r2, r5
 8001218:	4322      	orrs	r2, r4
 800121a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800121c:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 800121e:	b969      	cbnz	r1, 800123c <HAL_DAC_Start+0x40>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001220:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8001224:	2a04      	cmp	r2, #4
 8001226:	d103      	bne.n	8001230 <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800122e:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001230:	2301      	movs	r3, #1
 8001232:	7103      	strb	r3, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001234:	2300      	movs	r3, #0
 8001236:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001238:	4618      	mov	r0, r3

  /* Return function status */
  return HAL_OK;
}
 800123a:	bd30      	pop	{r4, r5, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800123c:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8001240:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8001244:	d1f4      	bne.n	8001230 <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	f042 0202 	orr.w	r2, r2, #2
 800124c:	e7ef      	b.n	800122e <HAL_DAC_Start+0x32>
	...

08001250 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001252:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001254:	7940      	ldrb	r0, [r0, #5]
 8001256:	2801      	cmp	r0, #1
{
 8001258:	460e      	mov	r6, r1
 800125a:	f04f 0002 	mov.w	r0, #2
 800125e:	4611      	mov	r1, r2
 8001260:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdac);
 8001262:	d054      	beq.n	800130e <HAL_DAC_Start_DMA+0xbe>
 8001264:	2401      	movs	r4, #1
 8001266:	716c      	strb	r4, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001268:	7128      	strb	r0, [r5, #4]
 800126a:	682c      	ldr	r4, [r5, #0]

  if(Channel == DAC_CHANNEL_1)
 800126c:	b9e6      	cbnz	r6, 80012a8 <HAL_DAC_Start_DMA+0x58>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800126e:	68a8      	ldr	r0, [r5, #8]
 8001270:	4f27      	ldr	r7, [pc, #156]	; (8001310 <HAL_DAC_Start_DMA+0xc0>)
 8001272:	62c7      	str	r7, [r0, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001274:	4f27      	ldr	r7, [pc, #156]	; (8001314 <HAL_DAC_Start_DMA+0xc4>)
 8001276:	6307      	str	r7, [r0, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001278:	4f27      	ldr	r7, [pc, #156]	; (8001318 <HAL_DAC_Start_DMA+0xc8>)
 800127a:	6347      	str	r7, [r0, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800127c:	6827      	ldr	r7, [r4, #0]

    /* Case of use of channel 1 */
    switch(Alignment)
 800127e:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001280:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 8001284:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 8001286:	d009      	beq.n	800129c <HAL_DAC_Start_DMA+0x4c>
 8001288:	2a08      	cmp	r2, #8
 800128a:	d00a      	beq.n	80012a2 <HAL_DAC_Start_DMA+0x52>
 800128c:	2a00      	cmp	r2, #0
 800128e:	d13c      	bne.n	800130a <HAL_DAC_Start_DMA+0xba>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001290:	f104 0208 	add.w	r2, r4, #8

  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001294:	6827      	ldr	r7, [r4, #0]
 8001296:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 800129a:	e01a      	b.n	80012d2 <HAL_DAC_Start_DMA+0x82>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800129c:	f104 020c 	add.w	r2, r4, #12
        break;
 80012a0:	e7f8      	b.n	8001294 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80012a2:	f104 0210 	add.w	r2, r4, #16
        break;
 80012a6:	e7f5      	b.n	8001294 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80012a8:	68e8      	ldr	r0, [r5, #12]
 80012aa:	4f1c      	ldr	r7, [pc, #112]	; (800131c <HAL_DAC_Start_DMA+0xcc>)
 80012ac:	62c7      	str	r7, [r0, #44]	; 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80012ae:	4f1c      	ldr	r7, [pc, #112]	; (8001320 <HAL_DAC_Start_DMA+0xd0>)
 80012b0:	6307      	str	r7, [r0, #48]	; 0x30
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80012b2:	4f1c      	ldr	r7, [pc, #112]	; (8001324 <HAL_DAC_Start_DMA+0xd4>)
 80012b4:	6347      	str	r7, [r0, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80012b6:	6827      	ldr	r7, [r4, #0]
    switch(Alignment)
 80012b8:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80012ba:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 80012be:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 80012c0:	d016      	beq.n	80012f0 <HAL_DAC_Start_DMA+0xa0>
 80012c2:	2a08      	cmp	r2, #8
 80012c4:	d017      	beq.n	80012f6 <HAL_DAC_Start_DMA+0xa6>
 80012c6:	b9f2      	cbnz	r2, 8001306 <HAL_DAC_Start_DMA+0xb6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80012c8:	f104 0214 	add.w	r2, r4, #20
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80012cc:	6827      	ldr	r7, [r4, #0]
 80012ce:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80012d2:	6027      	str	r7, [r4, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80012d4:	f000 faf8 	bl	80018c8 <HAL_DMA_Start_IT>
    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80012d8:	2300      	movs	r3, #0
 80012da:	716b      	strb	r3, [r5, #5]

  if (status == HAL_OK)
 80012dc:	b970      	cbnz	r0, 80012fc <HAL_DAC_Start_DMA+0xac>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80012de:	682b      	ldr	r3, [r5, #0]
 80012e0:	f006 0110 	and.w	r1, r6, #16
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	2601      	movs	r6, #1
 80012e8:	408e      	lsls	r6, r1
 80012ea:	4316      	orrs	r6, r2
 80012ec:	601e      	str	r6, [r3, #0]
 80012ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80012f0:	f104 0218 	add.w	r2, r4, #24
        break;
 80012f4:	e7ea      	b.n	80012cc <HAL_DAC_Start_DMA+0x7c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80012f6:	f104 021c 	add.w	r2, r4, #28
        break;
 80012fa:	e7e7      	b.n	80012cc <HAL_DAC_Start_DMA+0x7c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80012fc:	692b      	ldr	r3, [r5, #16]
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	612b      	str	r3, [r5, #16]
 8001304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpreg = 0U;
 8001306:	2200      	movs	r2, #0
 8001308:	e7e0      	b.n	80012cc <HAL_DAC_Start_DMA+0x7c>
 800130a:	4632      	mov	r2, r6
 800130c:	e7c2      	b.n	8001294 <HAL_DAC_Start_DMA+0x44>
  }

  /* Return function status */
  return status;
}
 800130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001310:	0800132b 	.word	0x0800132b
 8001314:	0800133d 	.word	0x0800133d
 8001318:	08001349 	.word	0x08001349
 800131c:	08001479 	.word	0x08001479
 8001320:	08001489 	.word	0x08001489
 8001324:	08001493 	.word	0x08001493

08001328 <HAL_DAC_ConvCpltCallbackCh1>:
 8001328:	4770      	bx	lr

0800132a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800132a:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800132c:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800132e:	4620      	mov	r0, r4
 8001330:	f7ff fffa 	bl	8001328 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001334:	2301      	movs	r3, #1
 8001336:	7123      	strb	r3, [r4, #4]
 8001338:	bd10      	pop	{r4, pc}

0800133a <HAL_DAC_ConvHalfCpltCallbackCh1>:
 800133a:	4770      	bx	lr

0800133c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800133c:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800133e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001340:	f7ff fffb 	bl	800133a <HAL_DAC_ConvHalfCpltCallbackCh1>
 8001344:	bd08      	pop	{r3, pc}

08001346 <HAL_DAC_ErrorCallbackCh1>:
 8001346:	4770      	bx	lr

08001348 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001348:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800134a:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800134c:	6923      	ldr	r3, [r4, #16]
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff fff6 	bl	8001346 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800135a:	2301      	movs	r3, #1
 800135c:	7123      	strb	r3, [r4, #4]
 800135e:	bd10      	pop	{r4, pc}

08001360 <HAL_DAC_ConfigChannel>:
{
 8001360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdac);
 8001362:	7943      	ldrb	r3, [r0, #5]
 8001364:	2b01      	cmp	r3, #1
{
 8001366:	4604      	mov	r4, r0
 8001368:	460d      	mov	r5, r1
 800136a:	4616      	mov	r6, r2
 800136c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8001370:	d063      	beq.n	800143a <HAL_DAC_ConfigChannel+0xda>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8001372:	680b      	ldr	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001374:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 8001376:	2201      	movs	r2, #1
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001378:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 800137a:	7162      	strb	r2, [r4, #5]
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800137c:	d125      	bne.n	80013ca <HAL_DAC_ConfigChannel+0x6a>
    if (Channel == DAC_CHANNEL_1)
 800137e:	2e00      	cmp	r6, #0
 8001380:	d16c      	bne.n	800145c <HAL_DAC_ConfigChannel+0xfc>
      tickstart = HAL_GetTick();
 8001382:	f7ff fe9b 	bl	80010bc <HAL_GetTick>
 8001386:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138c:	041b      	lsls	r3, r3, #16
 800138e:	d455      	bmi.n	800143c <HAL_DAC_ConfigChannel+0xdc>
      HAL_Delay(1);
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff fe99 	bl	80010c8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	69aa      	ldr	r2, [r5, #24]
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800139c:	6821      	ldr	r1, [r4, #0]
 800139e:	f006 0010 	and.w	r0, r6, #16
 80013a2:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80013a4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80013a8:	4083      	lsls	r3, r0
 80013aa:	ea22 0203 	bic.w	r2, r2, r3
 80013ae:	69eb      	ldr	r3, [r5, #28]
 80013b0:	4083      	lsls	r3, r0
 80013b2:	431a      	orrs	r2, r3
 80013b4:	648a      	str	r2, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80013b6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80013b8:	22ff      	movs	r2, #255	; 0xff
 80013ba:	4082      	lsls	r2, r0
 80013bc:	ea23 0302 	bic.w	r3, r3, r2
 80013c0:	6a2a      	ldr	r2, [r5, #32]
 80013c2:	fa02 f000 	lsl.w	r0, r2, r0
 80013c6:	4303      	orrs	r3, r0
 80013c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80013ca:	692b      	ldr	r3, [r5, #16]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	f006 0210 	and.w	r2, r6, #16
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	d108      	bne.n	80013e8 <HAL_DAC_ConfigChannel+0x88>
  tmpreg1 = hdac->Instance->CCR;
 80013d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80013d8:	201f      	movs	r0, #31
 80013da:	4090      	lsls	r0, r2
 80013dc:	ea21 0000 	bic.w	r0, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013e0:	6969      	ldr	r1, [r5, #20]
 80013e2:	4091      	lsls	r1, r2
 80013e4:	4301      	orrs	r1, r0
  hdac->Instance->CCR = tmpreg1;
 80013e6:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg1 = hdac->Instance->MCR;
 80013e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80013ea:	68ae      	ldr	r6, [r5, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80013ec:	2007      	movs	r0, #7
 80013ee:	4090      	lsls	r0, r2
 80013f0:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80013f4:	6829      	ldr	r1, [r5, #0]
 80013f6:	4331      	orrs	r1, r6
 80013f8:	68ee      	ldr	r6, [r5, #12]
 80013fa:	4331      	orrs	r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013fc:	4091      	lsls	r1, r2
 80013fe:	4301      	orrs	r1, r0
  hdac->Instance->MCR = tmpreg1;
 8001400:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001408:	4090      	lsls	r0, r2
 800140a:	ea21 0100 	bic.w	r1, r1, r0
 800140e:	6019      	str	r1, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8001410:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001412:	f640 70fc 	movw	r0, #4092	; 0xffc
 8001416:	4090      	lsls	r0, r2
 8001418:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800141c:	6869      	ldr	r1, [r5, #4]
 800141e:	4091      	lsls	r1, r2
 8001420:	4301      	orrs	r1, r0
  hdac->Instance->CR = tmpreg1;
 8001422:	6019      	str	r1, [r3, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001424:	6819      	ldr	r1, [r3, #0]
 8001426:	20c0      	movs	r0, #192	; 0xc0
 8001428:	fa00 f202 	lsl.w	r2, r0, r2
 800142c:	ea21 0202 	bic.w	r2, r1, r2
 8001430:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hdac);
 8001432:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8001434:	2301      	movs	r3, #1
 8001436:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001438:	7160      	strb	r0, [r4, #5]
}
 800143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800143c:	f7ff fe3e 	bl	80010bc <HAL_GetTick>
 8001440:	1bc0      	subs	r0, r0, r7
 8001442:	2801      	cmp	r0, #1
 8001444:	d9a0      	bls.n	8001388 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001446:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001448:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001450:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8001452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001454:	f7ff fe32 	bl	80010bc <HAL_GetTick>
 8001458:	2801      	cmp	r0, #1
 800145a:	d8f4      	bhi.n	8001446 <HAL_DAC_ConfigChannel+0xe6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001460:	2b00      	cmp	r3, #0
 8001462:	dbf7      	blt.n	8001454 <HAL_DAC_ConfigChannel+0xf4>
      HAL_Delay(1);
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff fe2f 	bl	80010c8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	69aa      	ldr	r2, [r5, #24]
 800146e:	645a      	str	r2, [r3, #68]	; 0x44
 8001470:	e794      	b.n	800139c <HAL_DAC_ConfigChannel+0x3c>

08001472 <HAL_DACEx_ConvCpltCallbackCh2>:
 8001472:	4770      	bx	lr

08001474 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8001474:	4770      	bx	lr

08001476 <HAL_DACEx_ErrorCallbackCh2>:
 8001476:	4770      	bx	lr

08001478 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001478:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800147a:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff fff8 	bl	8001472 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 8001482:	2301      	movs	r3, #1
 8001484:	7123      	strb	r3, [r4, #4]
 8001486:	bd10      	pop	{r4, pc}

08001488 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001488:	b508      	push	{r3, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800148a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800148c:	f7ff fff2 	bl	8001474 <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8001490:	bd08      	pop	{r3, pc}

08001492 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001492:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001494:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001496:	6923      	ldr	r3, [r4, #16]
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800149e:	4620      	mov	r0, r4
 80014a0:	f7ff ffe9 	bl	8001476 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 80014a4:	2301      	movs	r3, #1
 80014a6:	7123      	strb	r3, [r4, #4]
 80014a8:	bd10      	pop	{r4, pc}

080014aa <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80014aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80014ac:	6803      	ldr	r3, [r0, #0]
 80014ae:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 80014b2:	b93a      	cbnz	r2, 80014c4 <DFSDM_RegConvStart+0x1a>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014ba:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80014bc:	2901      	cmp	r1, #1
 80014be:	d11c      	bne.n	80014fa <DFSDM_RegConvStart+0x50>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e01b      	b.n	80014fc <DFSDM_RegConvStart+0x52>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014d2:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80014d4:	681a      	ldr	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80014d6:	2903      	cmp	r1, #3
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80014d8:	f042 0201 	orr.w	r2, r2, #1
 80014dc:	601a      	str	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80014de:	d1ed      	bne.n	80014bc <DFSDM_RegConvStart+0x12>
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80014e0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80014e2:	b91a      	cbnz	r2, 80014ec <DFSDM_RegConvStart+0x42>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f042 0202 	orr.w	r2, r2, #2
 80014ea:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80014ec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	bf0c      	ite	eq
 80014f4:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 80014f6:	2301      	movne	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80014f8:	6483      	str	r3, [r0, #72]	; 0x48
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80014fa:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80014fc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 8001500:	4770      	bx	lr
	...

08001504 <DFSDM_GetChannelFromInstance>:
  if (Instance == DFSDM1_Channel0)
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <DFSDM_GetChannelFromInstance+0x54>)
 8001506:	4298      	cmp	r0, r3
 8001508:	d017      	beq.n	800153a <DFSDM_GetChannelFromInstance+0x36>
  else if (Instance == DFSDM1_Channel1)
 800150a:	3320      	adds	r3, #32
 800150c:	4298      	cmp	r0, r3
 800150e:	d016      	beq.n	800153e <DFSDM_GetChannelFromInstance+0x3a>
  else if (Instance == DFSDM1_Channel2)
 8001510:	3320      	adds	r3, #32
 8001512:	4298      	cmp	r0, r3
 8001514:	d015      	beq.n	8001542 <DFSDM_GetChannelFromInstance+0x3e>
  else if (Instance == DFSDM1_Channel3)
 8001516:	3320      	adds	r3, #32
 8001518:	4298      	cmp	r0, r3
 800151a:	d014      	beq.n	8001546 <DFSDM_GetChannelFromInstance+0x42>
  else if (Instance == DFSDM1_Channel4)
 800151c:	3320      	adds	r3, #32
 800151e:	4298      	cmp	r0, r3
 8001520:	d013      	beq.n	800154a <DFSDM_GetChannelFromInstance+0x46>
  else if (Instance == DFSDM1_Channel5)
 8001522:	3320      	adds	r3, #32
 8001524:	4298      	cmp	r0, r3
 8001526:	d012      	beq.n	800154e <DFSDM_GetChannelFromInstance+0x4a>
  else if (Instance == DFSDM1_Channel6)
 8001528:	3320      	adds	r3, #32
 800152a:	4298      	cmp	r0, r3
 800152c:	d011      	beq.n	8001552 <DFSDM_GetChannelFromInstance+0x4e>
    channel = 7;
 800152e:	3320      	adds	r3, #32
 8001530:	4298      	cmp	r0, r3
 8001532:	bf0c      	ite	eq
 8001534:	2007      	moveq	r0, #7
 8001536:	2000      	movne	r0, #0
 8001538:	4770      	bx	lr
    channel = 0;
 800153a:	2000      	movs	r0, #0
 800153c:	4770      	bx	lr
    channel = 1;
 800153e:	2001      	movs	r0, #1
 8001540:	4770      	bx	lr
    channel = 2;
 8001542:	2002      	movs	r0, #2
 8001544:	4770      	bx	lr
    channel = 3;
 8001546:	2003      	movs	r0, #3
 8001548:	4770      	bx	lr
    channel = 4;
 800154a:	2004      	movs	r0, #4
 800154c:	4770      	bx	lr
    channel = 5;
 800154e:	2005      	movs	r0, #5
 8001550:	4770      	bx	lr
    channel = 6;
 8001552:	2006      	movs	r0, #6
}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40016000 	.word	0x40016000

0800155c <HAL_DFSDM_ChannelInit>:
{
 800155c:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 800155e:	4604      	mov	r4, r0
 8001560:	2800      	cmp	r0, #0
 8001562:	d067      	beq.n	8001634 <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001564:	6800      	ldr	r0, [r0, #0]
 8001566:	4d34      	ldr	r5, [pc, #208]	; (8001638 <HAL_DFSDM_ChannelInit+0xdc>)
 8001568:	f7ff ffcc 	bl	8001504 <DFSDM_GetChannelFromInstance>
 800156c:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d15f      	bne.n	8001634 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001574:	4620      	mov	r0, r4
 8001576:	f002 f8b9 	bl	80036ec <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 800157a:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_DFSDM_ChannelInit+0xe0>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	3201      	adds	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d119      	bne.n	80015bc <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <HAL_DFSDM_ChannelInit+0xe4>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001590:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68a1      	ldr	r1, [r4, #8]
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80015a0:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80015a2:	7922      	ldrb	r2, [r4, #4]
 80015a4:	2a01      	cmp	r2, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80015a8:	68e1      	ldr	r1, [r4, #12]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	3901      	subs	r1, #1
 80015ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80015b2:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015ba:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80015bc:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015be:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80015c0:	6803      	ldr	r3, [r0, #0]
 80015c2:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 80015c6:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015c8:	6923      	ldr	r3, [r4, #16]
 80015ca:	6802      	ldr	r2, [r0, #0]
 80015cc:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 80015ce:	69a1      	ldr	r1, [r4, #24]
 80015d0:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015d2:	4313      	orrs	r3, r2
 80015d4:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80015d6:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80015d8:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80015da:	f023 030f 	bic.w	r3, r3, #15
 80015de:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80015e0:	69e3      	ldr	r3, [r4, #28]
 80015e2:	6802      	ldr	r2, [r0, #0]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	4313      	orrs	r3, r2
 80015e8:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80015ea:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80015ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80015ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80015f0:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 80015f4:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80015f6:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80015f8:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80015fa:	430b      	orrs	r3, r1
 80015fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001600:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001602:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001604:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800160c:	6843      	ldr	r3, [r0, #4]
 800160e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001612:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001614:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001618:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800161a:	6803      	ldr	r3, [r0, #0]
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001622:	2301      	movs	r3, #1
 8001624:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001628:	f7ff ff6c 	bl	8001504 <DFSDM_GetChannelFromInstance>
 800162c:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8001630:	2000      	movs	r0, #0
 8001632:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001634:	2001      	movs	r0, #1
}
 8001636:	bd38      	pop	{r3, r4, r5, pc}
 8001638:	20000200 	.word	0x20000200
 800163c:	20000220 	.word	0x20000220
 8001640:	40016000 	.word	0x40016000

08001644 <HAL_DFSDM_FilterInit>:
{
 8001644:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_filter == NULL)
 8001646:	4604      	mov	r4, r0
 8001648:	2800      	cmp	r0, #0
 800164a:	d069      	beq.n	8001720 <HAL_DFSDM_FilterInit+0xdc>
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800164c:	6802      	ldr	r2, [r0, #0]
 800164e:	4b35      	ldr	r3, [pc, #212]	; (8001724 <HAL_DFSDM_FilterInit+0xe0>)
 8001650:	429a      	cmp	r2, r3
 8001652:	d105      	bne.n	8001660 <HAL_DFSDM_FilterInit+0x1c>
 8001654:	6840      	ldr	r0, [r0, #4]
 8001656:	2801      	cmp	r0, #1
 8001658:	d063      	beq.n	8001722 <HAL_DFSDM_FilterInit+0xde>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800165a:	68e0      	ldr	r0, [r4, #12]
 800165c:	2801      	cmp	r0, #1
 800165e:	d060      	beq.n	8001722 <HAL_DFSDM_FilterInit+0xde>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001660:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001662:	2201      	movs	r2, #1
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001664:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001666:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001668:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800166a:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800166c:	4620      	mov	r0, r4
 800166e:	f001 ffcf 	bl	8003610 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001672:	6823      	ldr	r3, [r4, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001674:	7c20      	ldrb	r0, [r4, #16]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800167c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800167e:	7a22      	ldrb	r2, [r4, #8]
 8001680:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	bf0c      	ite	eq
 8001686:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800168a:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 800168e:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001690:	7a62      	ldrb	r2, [r4, #9]
 8001692:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	bf0c      	ite	eq
 8001698:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800169c:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 80016a0:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80016a2:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80016a4:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80016a6:	f422 42ce 	bic.w	r2, r2, #26368	; 0x6700
 80016aa:	f022 0208 	bic.w	r2, r2, #8
 80016ae:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80016b0:	2d02      	cmp	r5, #2
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80016b2:	bf01      	itttt	eq
 80016b4:	681a      	ldreq	r2, [r3, #0]
 80016b6:	6961      	ldreq	r1, [r4, #20]
 80016b8:	430a      	orreq	r2, r1
 80016ba:	601a      	streq	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80016bc:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80016be:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80016c0:	bf0c      	ite	eq
 80016c2:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80016c6:	f022 0210 	bicne.w	r2, r2, #16
 80016ca:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80016cc:	7c62      	ldrb	r2, [r4, #17]
 80016ce:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	bf0c      	ite	eq
 80016d4:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80016d8:	f022 0220 	bicne.w	r2, r2, #32
 80016dc:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 80016e4:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80016e8:	615a      	str	r2, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80016ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80016ec:	6959      	ldr	r1, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80016ee:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80016f0:	430a      	orrs	r2, r1
 80016f2:	69e1      	ldr	r1, [r4, #28]
 80016f4:	430a      	orrs	r2, r1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80016f6:	6a21      	ldr	r1, [r4, #32]
 80016f8:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80016fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80016fe:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001700:	6862      	ldr	r2, [r4, #4]
 8001702:	6362      	str	r2, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001704:	69a2      	ldr	r2, [r4, #24]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001706:	63a5      	str	r5, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001708:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800170a:	681a      	ldr	r2, [r3, #0]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800170c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001716:	2301      	movs	r3, #1
 8001718:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 800171c:	2000      	movs	r0, #0
 800171e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001720:	2001      	movs	r0, #1
}
 8001722:	bd38      	pop	{r3, r4, r5, pc}
 8001724:	40016100 	.word	0x40016100

08001728 <HAL_DFSDM_FilterConfigRegChannel>:
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001728:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800172c:	3b01      	subs	r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2bfd      	cmp	r3, #253	; 0xfd
{
 8001732:	b510      	push	{r4, lr}
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001734:	d813      	bhi.n	800175e <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001736:	6803      	ldr	r3, [r0, #0]
 8001738:	681c      	ldr	r4, [r3, #0]
 800173a:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 800173e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001742:	601c      	str	r4, [r3, #0]
 8001744:	0209      	lsls	r1, r1, #8
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001746:	681c      	ldr	r4, [r3, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001748:	2a01      	cmp	r2, #1
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800174a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800174e:	bf08      	it	eq
 8001750:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001754:	4321      	orrs	r1, r4
 8001756:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001758:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 800175a:	2000      	movs	r0, #0
 800175c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800175e:	2001      	movs	r0, #1
}
 8001760:	bd10      	pop	{r4, pc}
	...

08001764 <HAL_DFSDM_FilterRegularStart_DMA>:
{
 8001764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001766:	4613      	mov	r3, r2
 8001768:	4605      	mov	r5, r0
  if ((pData == NULL) || (Length == 0U))
 800176a:	460a      	mov	r2, r1
 800176c:	b351      	cbz	r1, 80017c4 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
 800176e:	b34b      	cbz	r3, 80017c4 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001770:	6807      	ldr	r7, [r0, #0]
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	0289      	lsls	r1, r1, #10
 8001776:	d525      	bpl.n	80017c4 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001778:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800177a:	b949      	cbnz	r1, 8001790 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
 800177c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800177e:	b939      	cbnz	r1, 8001790 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001780:	6a81      	ldr	r1, [r0, #40]	; 0x28
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001782:	69c8      	ldr	r0, [r1, #28]
 8001784:	b908      	cbnz	r0, 800178a <HAL_DFSDM_FilterRegularStart_DMA+0x26>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001786:	2b01      	cmp	r3, #1
 8001788:	d11c      	bne.n	80017c4 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800178a:	69c9      	ldr	r1, [r1, #28]
 800178c:	2920      	cmp	r1, #32
 800178e:	d019      	beq.n	80017c4 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001790:	f895 604c 	ldrb.w	r6, [r5, #76]	; 0x4c
 8001794:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
 8001798:	2e01      	cmp	r6, #1
 800179a:	d113      	bne.n	80017c4 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800179c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800179e:	490d      	ldr	r1, [pc, #52]	; (80017d4 <HAL_DFSDM_FilterRegularStart_DMA+0x70>)
 80017a0:	62c1      	str	r1, [r0, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80017a2:	490d      	ldr	r1, [pc, #52]	; (80017d8 <HAL_DFSDM_FilterRegularStart_DMA+0x74>)
 80017a4:	6341      	str	r1, [r0, #52]	; 0x34
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80017a6:	69c1      	ldr	r1, [r0, #28]
 80017a8:	4c0c      	ldr	r4, [pc, #48]	; (80017dc <HAL_DFSDM_FilterRegularStart_DMA+0x78>)
 80017aa:	2920      	cmp	r1, #32
 80017ac:	bf18      	it	ne
 80017ae:	2400      	movne	r4, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80017b0:	6304      	str	r4, [r0, #48]	; 0x30
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80017b2:	f107 011c 	add.w	r1, r7, #28
 80017b6:	f000 f887 	bl	80018c8 <HAL_DMA_Start_IT>
 80017ba:	4604      	mov	r4, r0
 80017bc:	b120      	cbz	r0, 80017c8 <HAL_DFSDM_FilterRegularStart_DMA+0x64>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80017be:	23ff      	movs	r3, #255	; 0xff
 80017c0:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
    status = HAL_ERROR;
 80017c4:	2401      	movs	r4, #1
 80017c6:	e002      	b.n	80017ce <HAL_DFSDM_FilterRegularStart_DMA+0x6a>
      DFSDM_RegConvStart(hdfsdm_filter);
 80017c8:	4628      	mov	r0, r5
 80017ca:	f7ff fe6e 	bl	80014aa <DFSDM_RegConvStart>
}
 80017ce:	4620      	mov	r0, r4
 80017d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	080017e1 	.word	0x080017e1
 80017d8:	080017f7 	.word	0x080017f7
 80017dc:	080017eb 	.word	0x080017eb

080017e0 <DFSDM_DMARegularConvCplt>:
{
 80017e0:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80017e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80017e4:	f002 fed2 	bl	800458c <HAL_DFSDM_FilterRegConvCpltCallback>
 80017e8:	bd08      	pop	{r3, pc}

080017ea <DFSDM_DMARegularHalfConvCplt>:
{
 80017ea:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80017ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80017ee:	f002 febf 	bl	8004570 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
 80017f2:	bd08      	pop	{r3, pc}

080017f4 <HAL_DFSDM_FilterErrorCallback>:
{
 80017f4:	4770      	bx	lr

080017f6 <DFSDM_DMAError>:
{
 80017f6:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80017fa:	2303      	movs	r3, #3
 80017fc:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80017fe:	f7ff fff9 	bl	80017f4 <HAL_DFSDM_FilterErrorCallback>
 8001802:	bd08      	pop	{r3, pc}

08001804 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001804:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001806:	2800      	cmp	r0, #0
 8001808:	d04e      	beq.n	80018a8 <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800180a:	6801      	ldr	r1, [r0, #0]
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_DMA_Init+0xa8>)
 800180e:	4299      	cmp	r1, r3
 8001810:	f04f 0414 	mov.w	r4, #20
 8001814:	d840      	bhi.n	8001898 <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001816:	4a26      	ldr	r2, [pc, #152]	; (80018b0 <HAL_DMA_Init+0xac>)
 8001818:	440a      	add	r2, r1
 800181a:	fbb2 f2f4 	udiv	r2, r2, r4
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001822:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8001826:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001828:	2302      	movs	r3, #2
 800182a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800182e:	6884      	ldr	r4, [r0, #8]
 8001830:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001832:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8001834:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8001836:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001838:	432b      	orrs	r3, r5
 800183a:	6945      	ldr	r5, [r0, #20]
 800183c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183e:	6985      	ldr	r5, [r0, #24]
 8001840:	432b      	orrs	r3, r5
 8001842:	69c5      	ldr	r5, [r0, #28]
 8001844:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001846:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001848:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800184c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001850:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8001852:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001854:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8001858:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800185a:	d014      	beq.n	8001886 <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800185c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_DMA_Init+0xb0>)
 8001860:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001862:	bf0c      	ite	eq
 8001864:	4914      	ldreq	r1, [pc, #80]	; (80018b8 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001866:	4915      	ldrne	r1, [pc, #84]	; (80018bc <HAL_DMA_Init+0xb8>)
 8001868:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800186a:	680a      	ldr	r2, [r1, #0]
 800186c:	f003 031c 	and.w	r3, r3, #28
 8001870:	240f      	movs	r4, #15
 8001872:	409c      	lsls	r4, r3
 8001874:	ea22 0204 	bic.w	r2, r2, r4
 8001878:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800187a:	6842      	ldr	r2, [r0, #4]
 800187c:	680c      	ldr	r4, [r1, #0]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	4323      	orrs	r3, r4
 8001884:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001886:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001888:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800188a:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800188c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001890:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8001894:	4618      	mov	r0, r3
 8001896:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_DMA_Init+0xbc>)
 800189a:	440b      	add	r3, r1
 800189c:	fbb3 f3f4 	udiv	r3, r3, r4
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_DMA_Init+0xc0>)
 80018a6:	e7be      	b.n	8001826 <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 80018a8:	2001      	movs	r0, #1
}
 80018aa:	bd30      	pop	{r4, r5, pc}
 80018ac:	40020407 	.word	0x40020407
 80018b0:	bffdfff8 	.word	0xbffdfff8
 80018b4:	40020000 	.word	0x40020000
 80018b8:	400200a8 	.word	0x400200a8
 80018bc:	400204a8 	.word	0x400204a8
 80018c0:	bffdfbf8 	.word	0xbffdfbf8
 80018c4:	40020400 	.word	0x40020400

080018c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018ca:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80018ce:	2c01      	cmp	r4, #1
 80018d0:	d038      	beq.n	8001944 <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 80018d2:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 80018d6:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80018d8:	b2ed      	uxtb	r5, r5
 80018da:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80018dc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 80018e0:	f04f 0600 	mov.w	r6, #0
 80018e4:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 80018e8:	d12a      	bne.n	8001940 <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ea:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018ee:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f0:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80018f2:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018f4:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80018f6:	f026 0601 	bic.w	r6, r6, #1
 80018fa:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018fc:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80018fe:	f006 061c 	and.w	r6, r6, #28
 8001902:	40b5      	lsls	r5, r6
 8001904:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001906:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001908:	6883      	ldr	r3, [r0, #8]
 800190a:	6805      	ldr	r5, [r0, #0]
 800190c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800190e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001910:	bf0b      	itete	eq
 8001912:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001914:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001916:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001918:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800191a:	b14b      	cbz	r3, 8001930 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001922:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001924:	682b      	ldr	r3, [r5, #0]
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800192c:	2000      	movs	r0, #0
 800192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	f023 0304 	bic.w	r3, r3, #4
 8001936:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	f043 030a 	orr.w	r3, r3, #10
 800193e:	e7f0      	b.n	8001922 <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 8001940:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001944:	2002      	movs	r0, #2
}
 8001946:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001948 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001948:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800194c:	2a02      	cmp	r2, #2
{
 800194e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001950:	d003      	beq.n	800195a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001952:	2204      	movs	r2, #4
 8001954:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001956:	2001      	movs	r0, #1
 8001958:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800195a:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800195c:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800195e:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8001960:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001962:	f021 010e 	bic.w	r1, r1, #14
 8001966:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001968:	6811      	ldr	r1, [r2, #0]
 800196a:	f021 0101 	bic.w	r1, r1, #1
 800196e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001970:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001972:	2101      	movs	r1, #1
 8001974:	f002 021c 	and.w	r2, r2, #28
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800197e:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001980:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001984:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001988:	b113      	cbz	r3, 8001990 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 800198a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800198c:	4620      	mov	r0, r4
 800198e:	bd10      	pop	{r4, pc}
 8001990:	4618      	mov	r0, r3
}
 8001992:	bd10      	pop	{r4, pc}

08001994 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001994:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001996:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001998:	6803      	ldr	r3, [r0, #0]
{
 800199a:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800199c:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019a0:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80019a2:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80019a4:	2404      	movs	r4, #4
 80019a6:	4094      	lsls	r4, r2
 80019a8:	4226      	tst	r6, r4
 80019aa:	d00e      	beq.n	80019ca <HAL_DMA_IRQHandler+0x36>
 80019ac:	f015 0f04 	tst.w	r5, #4
 80019b0:	d00b      	beq.n	80019ca <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019b6:	bf5e      	ittt	pl
 80019b8:	681a      	ldrpl	r2, [r3, #0]
 80019ba:	f022 0204 	bicpl.w	r2, r2, #4
 80019be:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80019c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80019c2:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80019c4:	b373      	cbz	r3, 8001a24 <HAL_DMA_IRQHandler+0x90>
}
 80019c6:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80019c8:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80019ca:	2402      	movs	r4, #2
 80019cc:	4094      	lsls	r4, r2
 80019ce:	4226      	tst	r6, r4
 80019d0:	d012      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x64>
 80019d2:	f015 0f02 	tst.w	r5, #2
 80019d6:	d00f      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	0695      	lsls	r5, r2, #26
 80019dc:	d406      	bmi.n	80019ec <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	f022 020a 	bic.w	r2, r2, #10
 80019e4:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80019e6:	2301      	movs	r3, #1
 80019e8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80019ec:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80019ee:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80019f0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 80019f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019f6:	e7e5      	b.n	80019c4 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80019f8:	2408      	movs	r4, #8
 80019fa:	4094      	lsls	r4, r2
 80019fc:	4234      	tst	r4, r6
 80019fe:	d011      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x90>
 8001a00:	072c      	lsls	r4, r5, #28
 8001a02:	d50f      	bpl.n	8001a24 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a04:	681c      	ldr	r4, [r3, #0]
 8001a06:	f024 040e 	bic.w	r4, r4, #14
 8001a0a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	fa03 f202 	lsl.w	r2, r3, r2
 8001a12:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a14:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001a16:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001a20:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a22:	e7cf      	b.n	80019c4 <HAL_DMA_IRQHandler+0x30>
}
 8001a24:	bc70      	pop	{r4, r5, r6}
 8001a26:	4770      	bx	lr

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a2c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a30:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001bdc <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a34:	4c67      	ldr	r4, [pc, #412]	; (8001bd4 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a36:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001a38:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3a:	9a01      	ldr	r2, [sp, #4]
 8001a3c:	40da      	lsrs	r2, r3
 8001a3e:	d102      	bne.n	8001a46 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001a40:	b005      	add	sp, #20
 8001a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a46:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001a48:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a4a:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001a4c:	ea12 0e06 	ands.w	lr, r2, r6
 8001a50:	f000 80b1 	beq.w	8001bb6 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a54:	684a      	ldr	r2, [r1, #4]
 8001a56:	f022 0710 	bic.w	r7, r2, #16
 8001a5a:	2f02      	cmp	r7, #2
 8001a5c:	d116      	bne.n	8001a8c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001a5e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001a62:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a66:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001a6a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a6e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001a72:	f04f 0c0f 	mov.w	ip, #15
 8001a76:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001a7a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a7e:	690d      	ldr	r5, [r1, #16]
 8001a80:	fa05 f50a 	lsl.w	r5, r5, sl
 8001a84:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001a88:	f8c9 5020 	str.w	r5, [r9, #32]
 8001a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a90:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001a92:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a96:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a9a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a9c:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001aa0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aa4:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aa8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aaa:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aae:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001ab0:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ab4:	d811      	bhi.n	8001ada <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001ab6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ab8:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001abc:	68cf      	ldr	r7, [r1, #12]
 8001abe:	fa07 f70c 	lsl.w	r7, r7, ip
 8001ac2:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001ac6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ac8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aca:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ace:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001ad2:	409f      	lsls	r7, r3
 8001ad4:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001ad8:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ada:	f1ba 0f03 	cmp.w	sl, #3
 8001ade:	d107      	bne.n	8001af0 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001ae0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ae2:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001ae6:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001aea:	409f      	lsls	r7, r3
 8001aec:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8001aee:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001af0:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001af2:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001af4:	688e      	ldr	r6, [r1, #8]
 8001af6:	fa06 f60c 	lsl.w	r6, r6, ip
 8001afa:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001afc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001afe:	00d5      	lsls	r5, r2, #3
 8001b00:	d559      	bpl.n	8001bb6 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001b06:	f045 0501 	orr.w	r5, r5, #1
 8001b0a:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001b0e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001b12:	f023 0603 	bic.w	r6, r3, #3
 8001b16:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001b1a:	f005 0501 	and.w	r5, r5, #1
 8001b1e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001b22:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b24:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b28:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b2a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b2c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001b30:	270f      	movs	r7, #15
 8001b32:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b36:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b3a:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b3e:	d03c      	beq.n	8001bba <HAL_GPIO_Init+0x192>
 8001b40:	4d25      	ldr	r5, [pc, #148]	; (8001bd8 <HAL_GPIO_Init+0x1b0>)
 8001b42:	42a8      	cmp	r0, r5
 8001b44:	d03b      	beq.n	8001bbe <HAL_GPIO_Init+0x196>
 8001b46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b4a:	42a8      	cmp	r0, r5
 8001b4c:	d039      	beq.n	8001bc2 <HAL_GPIO_Init+0x19a>
 8001b4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b52:	42a8      	cmp	r0, r5
 8001b54:	d037      	beq.n	8001bc6 <HAL_GPIO_Init+0x19e>
 8001b56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b5a:	42a8      	cmp	r0, r5
 8001b5c:	d035      	beq.n	8001bca <HAL_GPIO_Init+0x1a2>
 8001b5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b62:	42a8      	cmp	r0, r5
 8001b64:	d033      	beq.n	8001bce <HAL_GPIO_Init+0x1a6>
 8001b66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b6a:	42a8      	cmp	r0, r5
 8001b6c:	bf14      	ite	ne
 8001b6e:	2507      	movne	r5, #7
 8001b70:	2506      	moveq	r5, #6
 8001b72:	fa05 f50c 	lsl.w	r5, r5, ip
 8001b76:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b78:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001b7a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001b7c:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b80:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001b82:	bf54      	ite	pl
 8001b84:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001b86:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001b8a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001b8c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b8e:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001b90:	bf54      	ite	pl
 8001b92:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001b94:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001b98:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001b9a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b9c:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001b9e:	bf54      	ite	pl
 8001ba0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001ba2:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8001ba6:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001ba8:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001baa:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001bac:	bf54      	ite	pl
 8001bae:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001bb0:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001bb4:	60e5      	str	r5, [r4, #12]
    position++;
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	e73f      	b.n	8001a3a <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bba:	2500      	movs	r5, #0
 8001bbc:	e7d9      	b.n	8001b72 <HAL_GPIO_Init+0x14a>
 8001bbe:	2501      	movs	r5, #1
 8001bc0:	e7d7      	b.n	8001b72 <HAL_GPIO_Init+0x14a>
 8001bc2:	2502      	movs	r5, #2
 8001bc4:	e7d5      	b.n	8001b72 <HAL_GPIO_Init+0x14a>
 8001bc6:	2503      	movs	r5, #3
 8001bc8:	e7d3      	b.n	8001b72 <HAL_GPIO_Init+0x14a>
 8001bca:	2504      	movs	r5, #4
 8001bcc:	e7d1      	b.n	8001b72 <HAL_GPIO_Init+0x14a>
 8001bce:	2505      	movs	r5, #5
 8001bd0:	e7cf      	b.n	8001b72 <HAL_GPIO_Init+0x14a>
 8001bd2:	bf00      	nop
 8001bd4:	40010400 	.word	0x40010400
 8001bd8:	48000400 	.word	0x48000400
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001be0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001be4:	6959      	ldr	r1, [r3, #20]
 8001be6:	4201      	tst	r1, r0
 8001be8:	d002      	beq.n	8001bf0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bea:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bec:	f002 fce8 	bl	80045c0 <HAL_GPIO_EXTI_Callback>
 8001bf0:	bd08      	pop	{r3, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bf8:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <HAL_PWREx_GetVoltageRange+0xc>)
 8001bfa:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001bfc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40007000 	.word	0x40007000

08001c08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c08:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c10:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c14:	d11c      	bne.n	8001c50 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c16:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001c1a:	d015      	beq.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c26:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c28:	4a10      	ldr	r2, [pc, #64]	; (8001c6c <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001c2a:	6811      	ldr	r1, [r2, #0]
 8001c2c:	2232      	movs	r2, #50	; 0x32
 8001c2e:	434a      	muls	r2, r1
 8001c30:	490f      	ldr	r1, [pc, #60]	; (8001c70 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001c32:	fbb2 f2f1 	udiv	r2, r2, r1
 8001c36:	4619      	mov	r1, r3
 8001c38:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c3a:	6958      	ldr	r0, [r3, #20]
 8001c3c:	0540      	lsls	r0, r0, #21
 8001c3e:	d500      	bpl.n	8001c42 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001c40:	b922      	cbnz	r2, 8001c4c <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c42:	694b      	ldr	r3, [r1, #20]
 8001c44:	055b      	lsls	r3, r3, #21
 8001c46:	d40d      	bmi.n	8001c64 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c48:	2000      	movs	r0, #0
 8001c4a:	4770      	bx	lr
        wait_loop_index--;
 8001c4c:	3a01      	subs	r2, #1
 8001c4e:	e7f4      	b.n	8001c3a <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c50:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c54:	bf1f      	itttt	ne
 8001c56:	681a      	ldrne	r2, [r3, #0]
 8001c58:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001c5c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001c60:	601a      	strne	r2, [r3, #0]
 8001c62:	e7f1      	b.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001c64:	2003      	movs	r0, #3
}
 8001c66:	4770      	bx	lr
 8001c68:	40007000 	.word	0x40007000
 8001c6c:	2000000c 	.word	0x2000000c
 8001c70:	000f4240 	.word	0x000f4240

08001c74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c76:	4d1e      	ldr	r5, [pc, #120]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001c78:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c7a:	00da      	lsls	r2, r3, #3
{
 8001c7c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c7e:	d518      	bpl.n	8001cb2 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c80:	f7ff ffba 	bl	8001bf8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c84:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001c88:	d123      	bne.n	8001cd2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c8a:	2c80      	cmp	r4, #128	; 0x80
 8001c8c:	d929      	bls.n	8001ce2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c8e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c90:	bf8c      	ite	hi
 8001c92:	2002      	movhi	r0, #2
 8001c94:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001c98:	6813      	ldr	r3, [r2, #0]
 8001c9a:	f023 0307 	bic.w	r3, r3, #7
 8001c9e:	4303      	orrs	r3, r0
 8001ca0:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ca2:	6813      	ldr	r3, [r2, #0]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001ca8:	1a18      	subs	r0, r3, r0
 8001caa:	bf18      	it	ne
 8001cac:	2001      	movne	r0, #1
 8001cae:	b003      	add	sp, #12
 8001cb0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	65ab      	str	r3, [r5, #88]	; 0x58
 8001cba:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001cc4:	f7ff ff98 	bl	8001bf8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cc8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cce:	65ab      	str	r3, [r5, #88]	; 0x58
 8001cd0:	e7d8      	b.n	8001c84 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001cd2:	2c80      	cmp	r4, #128	; 0x80
 8001cd4:	d807      	bhi.n	8001ce6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001cd6:	d008      	beq.n	8001cea <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001cd8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001cdc:	4258      	negs	r0, r3
 8001cde:	4158      	adcs	r0, r3
 8001ce0:	e7d9      	b.n	8001c96 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	e7d7      	b.n	8001c96 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	e7d5      	b.n	8001c96 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cea:	2002      	movs	r0, #2
 8001cec:	e7d3      	b.n	8001c96 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40022000 	.word	0x40022000

08001cf8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cfa:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cfc:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cfe:	f012 020c 	ands.w	r2, r2, #12
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x18>
 8001d04:	2a0c      	cmp	r2, #12
 8001d06:	d115      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d08:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d0c:	2901      	cmp	r1, #1
 8001d0e:	d118      	bne.n	8001d42 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d10:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001d12:	4820      	ldr	r0, [pc, #128]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d14:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d16:	bf55      	itete	pl
 8001d18:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d1c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d1e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d22:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001d26:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2a:	b382      	cbz	r2, 8001d8e <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d2c:	2a0c      	cmp	r2, #12
 8001d2e:	d009      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x4c>
 8001d30:	2000      	movs	r0, #0
  return sysclockfreq;
 8001d32:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d34:	2a04      	cmp	r2, #4
 8001d36:	d029      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x94>
 8001d38:	2a08      	cmp	r2, #8
 8001d3a:	4817      	ldr	r0, [pc, #92]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d3c:	bf18      	it	ne
 8001d3e:	2000      	movne	r0, #0
 8001d40:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d42:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d44:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d46:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d48:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d4c:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8001d50:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d52:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x6c>
 8001d58:	2903      	cmp	r1, #3
 8001d5a:	d012      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d5c:	68d9      	ldr	r1, [r3, #12]
 8001d5e:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001d62:	e003      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d64:	68d9      	ldr	r1, [r3, #12]
 8001d66:	480d      	ldr	r0, [pc, #52]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d68:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d6c:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d6e:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d72:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001d76:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d78:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d7a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001d7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d80:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d82:	68d9      	ldr	r1, [r3, #12]
 8001d84:	4804      	ldr	r0, [pc, #16]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d86:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001d8a:	e7ef      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8001d8c:	4803      	ldr	r0, [pc, #12]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001d8e:	4770      	bx	lr
 8001d90:	40021000 	.word	0x40021000
 8001d94:	0800a920 	.word	0x0800a920
 8001d98:	007a1200 	.word	0x007a1200
 8001d9c:	00f42400 	.word	0x00f42400

08001da0 <HAL_RCC_OscConfig>:
{
 8001da0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001da4:	4605      	mov	r5, r0
 8001da6:	b918      	cbnz	r0, 8001db0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001da8:	2001      	movs	r0, #1
}
 8001daa:	b003      	add	sp, #12
 8001dac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db0:	4ca5      	ldr	r4, [pc, #660]	; (8002048 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001db2:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db4:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db6:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001db8:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dba:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dbe:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dc2:	d53c      	bpl.n	8001e3e <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dc4:	b11e      	cbz	r6, 8001dce <HAL_RCC_OscConfig+0x2e>
 8001dc6:	2e0c      	cmp	r6, #12
 8001dc8:	d163      	bne.n	8001e92 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dca:	2f01      	cmp	r7, #1
 8001dcc:	d161      	bne.n	8001e92 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	0798      	lsls	r0, r3, #30
 8001dd2:	d502      	bpl.n	8001dda <HAL_RCC_OscConfig+0x3a>
 8001dd4:	69ab      	ldr	r3, [r5, #24]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0e6      	beq.n	8001da8 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	6a28      	ldr	r0, [r5, #32]
 8001dde:	0719      	lsls	r1, r3, #28
 8001de0:	bf56      	itet	pl
 8001de2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001de6:	6823      	ldrmi	r3, [r4, #0]
 8001de8:	091b      	lsrpl	r3, r3, #4
 8001dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dee:	4283      	cmp	r3, r0
 8001df0:	d23a      	bcs.n	8001e68 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001df2:	f7ff ff3f 	bl	8001c74 <RCC_SetFlashLatencyFromMSIRange>
 8001df6:	2800      	cmp	r0, #0
 8001df8:	d1d6      	bne.n	8001da8 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	f043 0308 	orr.w	r3, r3, #8
 8001e00:	6023      	str	r3, [r4, #0]
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	6a2a      	ldr	r2, [r5, #32]
 8001e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e0e:	6863      	ldr	r3, [r4, #4]
 8001e10:	69ea      	ldr	r2, [r5, #28]
 8001e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e1a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e1c:	f7ff ff6c 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8001e20:	68a3      	ldr	r3, [r4, #8]
 8001e22:	4a8a      	ldr	r2, [pc, #552]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e28:	5cd3      	ldrb	r3, [r2, r3]
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	40d8      	lsrs	r0, r3
 8001e30:	4b87      	ldr	r3, [pc, #540]	; (8002050 <HAL_RCC_OscConfig+0x2b0>)
 8001e32:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7ff f90b 	bl	8001050 <HAL_InitTick>
        if(status != HAL_OK)
 8001e3a:	2800      	cmp	r0, #0
 8001e3c:	d1b5      	bne.n	8001daa <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3e:	682b      	ldr	r3, [r5, #0]
 8001e40:	07d8      	lsls	r0, r3, #31
 8001e42:	d45d      	bmi.n	8001f00 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e44:	682b      	ldr	r3, [r5, #0]
 8001e46:	0799      	lsls	r1, r3, #30
 8001e48:	f100 809c 	bmi.w	8001f84 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4c:	682b      	ldr	r3, [r5, #0]
 8001e4e:	0718      	lsls	r0, r3, #28
 8001e50:	f100 80d0 	bmi.w	8001ff4 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e54:	682b      	ldr	r3, [r5, #0]
 8001e56:	0759      	lsls	r1, r3, #29
 8001e58:	f100 80fc 	bmi.w	8002054 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 8165 	bne.w	800212e <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8001e64:	2000      	movs	r0, #0
 8001e66:	e7a0      	b.n	8001daa <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	f043 0308 	orr.w	r3, r3, #8
 8001e6e:	6023      	str	r3, [r4, #0]
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e76:	4303      	orrs	r3, r0
 8001e78:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7a:	6863      	ldr	r3, [r4, #4]
 8001e7c:	69ea      	ldr	r2, [r5, #28]
 8001e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e86:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e88:	f7ff fef4 	bl	8001c74 <RCC_SetFlashLatencyFromMSIRange>
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d0c5      	beq.n	8001e1c <HAL_RCC_OscConfig+0x7c>
 8001e90:	e78a      	b.n	8001da8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e92:	69ab      	ldr	r3, [r5, #24]
 8001e94:	b31b      	cbz	r3, 8001ede <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e9e:	f7ff f90d 	bl	80010bc <HAL_GetTick>
 8001ea2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	079a      	lsls	r2, r3, #30
 8001ea8:	d511      	bpl.n	8001ece <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	f043 0308 	orr.w	r3, r3, #8
 8001eb0:	6023      	str	r3, [r4, #0]
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	6a2a      	ldr	r2, [r5, #32]
 8001eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ebe:	6863      	ldr	r3, [r4, #4]
 8001ec0:	69ea      	ldr	r2, [r5, #28]
 8001ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ec6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001eca:	6063      	str	r3, [r4, #4]
 8001ecc:	e7b7      	b.n	8001e3e <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ece:	f7ff f8f5 	bl	80010bc <HAL_GetTick>
 8001ed2:	eba0 0008 	sub.w	r0, r0, r8
 8001ed6:	2802      	cmp	r0, #2
 8001ed8:	d9e4      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8001eda:	2003      	movs	r0, #3
 8001edc:	e765      	b.n	8001daa <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ee6:	f7ff f8e9 	bl	80010bc <HAL_GetTick>
 8001eea:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	079b      	lsls	r3, r3, #30
 8001ef0:	d5a5      	bpl.n	8001e3e <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ef2:	f7ff f8e3 	bl	80010bc <HAL_GetTick>
 8001ef6:	eba0 0008 	sub.w	r0, r0, r8
 8001efa:	2802      	cmp	r0, #2
 8001efc:	d9f6      	bls.n	8001eec <HAL_RCC_OscConfig+0x14c>
 8001efe:	e7ec      	b.n	8001eda <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f00:	2e08      	cmp	r6, #8
 8001f02:	d003      	beq.n	8001f0c <HAL_RCC_OscConfig+0x16c>
 8001f04:	2e0c      	cmp	r6, #12
 8001f06:	d108      	bne.n	8001f1a <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8001f08:	2f03      	cmp	r7, #3
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	039a      	lsls	r2, r3, #14
 8001f10:	d598      	bpl.n	8001e44 <HAL_RCC_OscConfig+0xa4>
 8001f12:	686b      	ldr	r3, [r5, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d195      	bne.n	8001e44 <HAL_RCC_OscConfig+0xa4>
 8001f18:	e746      	b.n	8001da8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1a:	686b      	ldr	r3, [r5, #4]
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d110      	bne.n	8001f44 <HAL_RCC_OscConfig+0x1a4>
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f28:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f2a:	f7ff f8c7 	bl	80010bc <HAL_GetTick>
 8001f2e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	039b      	lsls	r3, r3, #14
 8001f34:	d486      	bmi.n	8001e44 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f36:	f7ff f8c1 	bl	80010bc <HAL_GetTick>
 8001f3a:	eba0 0008 	sub.w	r0, r0, r8
 8001f3e:	2864      	cmp	r0, #100	; 0x64
 8001f40:	d9f6      	bls.n	8001f30 <HAL_RCC_OscConfig+0x190>
 8001f42:	e7ca      	b.n	8001eda <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f48:	d104      	bne.n	8001f54 <HAL_RCC_OscConfig+0x1b4>
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f50:	6023      	str	r3, [r4, #0]
 8001f52:	e7e6      	b.n	8001f22 <HAL_RCC_OscConfig+0x182>
 8001f54:	6822      	ldr	r2, [r4, #0]
 8001f56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f5a:	6022      	str	r2, [r4, #0]
 8001f5c:	6822      	ldr	r2, [r4, #0]
 8001f5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f62:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1e0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8001f68:	f7ff f8a8 	bl	80010bc <HAL_GetTick>
 8001f6c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	0398      	lsls	r0, r3, #14
 8001f72:	f57f af67 	bpl.w	8001e44 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f76:	f7ff f8a1 	bl	80010bc <HAL_GetTick>
 8001f7a:	eba0 0008 	sub.w	r0, r0, r8
 8001f7e:	2864      	cmp	r0, #100	; 0x64
 8001f80:	d9f5      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1ce>
 8001f82:	e7aa      	b.n	8001eda <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f84:	2e04      	cmp	r6, #4
 8001f86:	d003      	beq.n	8001f90 <HAL_RCC_OscConfig+0x1f0>
 8001f88:	2e0c      	cmp	r6, #12
 8001f8a:	d110      	bne.n	8001fae <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001f8c:	2f02      	cmp	r7, #2
 8001f8e:	d10e      	bne.n	8001fae <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	0559      	lsls	r1, r3, #21
 8001f94:	d503      	bpl.n	8001f9e <HAL_RCC_OscConfig+0x1fe>
 8001f96:	68eb      	ldr	r3, [r5, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f43f af05 	beq.w	8001da8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9e:	6863      	ldr	r3, [r4, #4]
 8001fa0:	692a      	ldr	r2, [r5, #16]
 8001fa2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001fa6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001faa:	6063      	str	r3, [r4, #4]
 8001fac:	e74e      	b.n	8001e4c <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fae:	68eb      	ldr	r3, [r5, #12]
 8001fb0:	b17b      	cbz	r3, 8001fd2 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001fba:	f7ff f87f 	bl	80010bc <HAL_GetTick>
 8001fbe:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	055a      	lsls	r2, r3, #21
 8001fc4:	d4eb      	bmi.n	8001f9e <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7ff f879 	bl	80010bc <HAL_GetTick>
 8001fca:	1bc0      	subs	r0, r0, r7
 8001fcc:	2802      	cmp	r0, #2
 8001fce:	d9f7      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x220>
 8001fd0:	e783      	b.n	8001eda <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fd8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001fda:	f7ff f86f 	bl	80010bc <HAL_GetTick>
 8001fde:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	055b      	lsls	r3, r3, #21
 8001fe4:	f57f af32 	bpl.w	8001e4c <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7ff f868 	bl	80010bc <HAL_GetTick>
 8001fec:	1bc0      	subs	r0, r0, r7
 8001fee:	2802      	cmp	r0, #2
 8001ff0:	d9f6      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x240>
 8001ff2:	e772      	b.n	8001eda <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff4:	696b      	ldr	r3, [r5, #20]
 8001ff6:	b19b      	cbz	r3, 8002020 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001ff8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002004:	f7ff f85a 	bl	80010bc <HAL_GetTick>
 8002008:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800200a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800200e:	079a      	lsls	r2, r3, #30
 8002010:	f53f af20 	bmi.w	8001e54 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002014:	f7ff f852 	bl	80010bc <HAL_GetTick>
 8002018:	1bc0      	subs	r0, r0, r7
 800201a:	2802      	cmp	r0, #2
 800201c:	d9f5      	bls.n	800200a <HAL_RCC_OscConfig+0x26a>
 800201e:	e75c      	b.n	8001eda <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8002020:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800202c:	f7ff f846 	bl	80010bc <HAL_GetTick>
 8002030:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002032:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002036:	079b      	lsls	r3, r3, #30
 8002038:	f57f af0c 	bpl.w	8001e54 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff f83e 	bl	80010bc <HAL_GetTick>
 8002040:	1bc0      	subs	r0, r0, r7
 8002042:	2802      	cmp	r0, #2
 8002044:	d9f5      	bls.n	8002032 <HAL_RCC_OscConfig+0x292>
 8002046:	e748      	b.n	8001eda <HAL_RCC_OscConfig+0x13a>
 8002048:	40021000 	.word	0x40021000
 800204c:	0800a907 	.word	0x0800a907
 8002050:	2000000c 	.word	0x2000000c
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002054:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002056:	00d8      	lsls	r0, r3, #3
 8002058:	d429      	bmi.n	80020ae <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800205c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002060:	65a3      	str	r3, [r4, #88]	; 0x58
 8002062:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800206c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002070:	4f5d      	ldr	r7, [pc, #372]	; (80021e8 <HAL_RCC_OscConfig+0x448>)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	05d9      	lsls	r1, r3, #23
 8002076:	d51d      	bpl.n	80020b4 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	68ab      	ldr	r3, [r5, #8]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d12b      	bne.n	80020d6 <HAL_RCC_OscConfig+0x336>
 800207e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800208a:	f7ff f817 	bl	80010bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002092:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002094:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002098:	079b      	lsls	r3, r3, #30
 800209a:	d542      	bpl.n	8002122 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 800209c:	f1b8 0f00 	cmp.w	r8, #0
 80020a0:	f43f aedc 	beq.w	8001e5c <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80020ac:	e6d6      	b.n	8001e5c <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 80020ae:	f04f 0800 	mov.w	r8, #0
 80020b2:	e7dd      	b.n	8002070 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ba:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80020bc:	f7fe fffe 	bl	80010bc <HAL_GetTick>
 80020c0:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	05da      	lsls	r2, r3, #23
 80020c6:	d4d7      	bmi.n	8002078 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7fe fff8 	bl	80010bc <HAL_GetTick>
 80020cc:	eba0 0009 	sub.w	r0, r0, r9
 80020d0:	2802      	cmp	r0, #2
 80020d2:	d9f6      	bls.n	80020c2 <HAL_RCC_OscConfig+0x322>
 80020d4:	e701      	b.n	8001eda <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d6:	2b05      	cmp	r3, #5
 80020d8:	d106      	bne.n	80020e8 <HAL_RCC_OscConfig+0x348>
 80020da:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80020e6:	e7ca      	b.n	800207e <HAL_RCC_OscConfig+0x2de>
 80020e8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80020f4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80020f8:	f022 0204 	bic.w	r2, r2, #4
 80020fc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1c2      	bne.n	800208a <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8002104:	f7fe ffda 	bl	80010bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002108:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800210c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800210e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002112:	0798      	lsls	r0, r3, #30
 8002114:	d5c2      	bpl.n	800209c <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7fe ffd1 	bl	80010bc <HAL_GetTick>
 800211a:	1bc0      	subs	r0, r0, r7
 800211c:	4548      	cmp	r0, r9
 800211e:	d9f6      	bls.n	800210e <HAL_RCC_OscConfig+0x36e>
 8002120:	e6db      	b.n	8001eda <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7fe ffcb 	bl	80010bc <HAL_GetTick>
 8002126:	1bc0      	subs	r0, r0, r7
 8002128:	4548      	cmp	r0, r9
 800212a:	d9b3      	bls.n	8002094 <HAL_RCC_OscConfig+0x2f4>
 800212c:	e6d5      	b.n	8001eda <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800212e:	2e0c      	cmp	r6, #12
 8002130:	f43f ae3a 	beq.w	8001da8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002134:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800213c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800213e:	d137      	bne.n	80021b0 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8002140:	f7fe ffbc 	bl	80010bc <HAL_GetTick>
 8002144:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	0199      	lsls	r1, r3, #6
 800214a:	d42b      	bmi.n	80021a4 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800214c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800214e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002150:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002154:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002156:	3a01      	subs	r2, #1
 8002158:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800215c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800215e:	0912      	lsrs	r2, r2, #4
 8002160:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002164:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002166:	0852      	lsrs	r2, r2, #1
 8002168:	3a01      	subs	r2, #1
 800216a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800216e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002170:	0852      	lsrs	r2, r2, #1
 8002172:	3a01      	subs	r2, #1
 8002174:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002178:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002180:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002182:	68e3      	ldr	r3, [r4, #12]
 8002184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002188:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800218a:	f7fe ff97 	bl	80010bc <HAL_GetTick>
 800218e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	019a      	lsls	r2, r3, #6
 8002194:	f53f ae66 	bmi.w	8001e64 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002198:	f7fe ff90 	bl	80010bc <HAL_GetTick>
 800219c:	1b40      	subs	r0, r0, r5
 800219e:	2802      	cmp	r0, #2
 80021a0:	d9f6      	bls.n	8002190 <HAL_RCC_OscConfig+0x3f0>
 80021a2:	e69a      	b.n	8001eda <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe ff8a 	bl	80010bc <HAL_GetTick>
 80021a8:	1b80      	subs	r0, r0, r6
 80021aa:	2802      	cmp	r0, #2
 80021ac:	d9cb      	bls.n	8002146 <HAL_RCC_OscConfig+0x3a6>
 80021ae:	e694      	b.n	8001eda <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021b6:	bf02      	ittt	eq
 80021b8:	68e3      	ldreq	r3, [r4, #12]
 80021ba:	f023 0303 	biceq.w	r3, r3, #3
 80021be:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021c0:	68e3      	ldr	r3, [r4, #12]
 80021c2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ca:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80021cc:	f7fe ff76 	bl	80010bc <HAL_GetTick>
 80021d0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	019b      	lsls	r3, r3, #6
 80021d6:	f57f ae45 	bpl.w	8001e64 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021da:	f7fe ff6f 	bl	80010bc <HAL_GetTick>
 80021de:	1b40      	subs	r0, r0, r5
 80021e0:	2802      	cmp	r0, #2
 80021e2:	d9f6      	bls.n	80021d2 <HAL_RCC_OscConfig+0x432>
 80021e4:	e679      	b.n	8001eda <HAL_RCC_OscConfig+0x13a>
 80021e6:	bf00      	nop
 80021e8:	40007000 	.word	0x40007000

080021ec <HAL_RCC_ClockConfig>:
{
 80021ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021f0:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80021f2:	4604      	mov	r4, r0
 80021f4:	b910      	cbnz	r0, 80021fc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80021f6:	2001      	movs	r0, #1
 80021f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4a40      	ldr	r2, [pc, #256]	; (8002300 <HAL_RCC_ClockConfig+0x114>)
 80021fe:	6813      	ldr	r3, [r2, #0]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	428b      	cmp	r3, r1
 8002206:	d329      	bcc.n	800225c <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	07d9      	lsls	r1, r3, #31
 800220c:	d431      	bmi.n	8002272 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800220e:	6821      	ldr	r1, [r4, #0]
 8002210:	078a      	lsls	r2, r1, #30
 8002212:	d45b      	bmi.n	80022cc <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002214:	4a3a      	ldr	r2, [pc, #232]	; (8002300 <HAL_RCC_ClockConfig+0x114>)
 8002216:	6813      	ldr	r3, [r2, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	429e      	cmp	r6, r3
 800221e:	d35d      	bcc.n	80022dc <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	f011 0f04 	tst.w	r1, #4
 8002224:	4d37      	ldr	r5, [pc, #220]	; (8002304 <HAL_RCC_ClockConfig+0x118>)
 8002226:	d164      	bne.n	80022f2 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	070b      	lsls	r3, r1, #28
 800222a:	d506      	bpl.n	800223a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800222c:	68ab      	ldr	r3, [r5, #8]
 800222e:	6922      	ldr	r2, [r4, #16]
 8002230:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002234:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002238:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800223a:	f7ff fd5d 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 800223e:	68ab      	ldr	r3, [r5, #8]
 8002240:	4a31      	ldr	r2, [pc, #196]	; (8002308 <HAL_RCC_ClockConfig+0x11c>)
 8002242:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800224a:	5cd3      	ldrb	r3, [r2, r3]
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	40d8      	lsrs	r0, r3
 8002252:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_RCC_ClockConfig+0x120>)
 8002254:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8002256:	2000      	movs	r0, #0
 8002258:	f7fe befa 	b.w	8001050 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225c:	6813      	ldr	r3, [r2, #0]
 800225e:	f023 0307 	bic.w	r3, r3, #7
 8002262:	430b      	orrs	r3, r1
 8002264:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	6813      	ldr	r3, [r2, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4299      	cmp	r1, r3
 800226e:	d1c2      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xa>
 8002270:	e7ca      	b.n	8002208 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002272:	6862      	ldr	r2, [r4, #4]
 8002274:	4d23      	ldr	r5, [pc, #140]	; (8002304 <HAL_RCC_ClockConfig+0x118>)
 8002276:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002278:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227a:	d11b      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002280:	d0b9      	beq.n	80021f6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002282:	68ab      	ldr	r3, [r5, #8]
 8002284:	f023 0303 	bic.w	r3, r3, #3
 8002288:	4313      	orrs	r3, r2
 800228a:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800228c:	f7fe ff16 	bl	80010bc <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002290:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002294:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	68ab      	ldr	r3, [r5, #8]
 8002298:	6862      	ldr	r2, [r4, #4]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022a2:	d0b4      	beq.n	800220e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a4:	f7fe ff0a 	bl	80010bc <HAL_GetTick>
 80022a8:	1bc0      	subs	r0, r0, r7
 80022aa:	4540      	cmp	r0, r8
 80022ac:	d9f3      	bls.n	8002296 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80022ae:	2003      	movs	r0, #3
}
 80022b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b4:	2a02      	cmp	r2, #2
 80022b6:	d102      	bne.n	80022be <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022bc:	e7e0      	b.n	8002280 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022be:	b912      	cbnz	r2, 80022c6 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c0:	f013 0f02 	tst.w	r3, #2
 80022c4:	e7dc      	b.n	8002280 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80022ca:	e7d9      	b.n	8002280 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <HAL_RCC_ClockConfig+0x118>)
 80022ce:	68a0      	ldr	r0, [r4, #8]
 80022d0:	6893      	ldr	r3, [r2, #8]
 80022d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022d6:	4303      	orrs	r3, r0
 80022d8:	6093      	str	r3, [r2, #8]
 80022da:	e79b      	b.n	8002214 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022dc:	6813      	ldr	r3, [r2, #0]
 80022de:	f023 0307 	bic.w	r3, r3, #7
 80022e2:	4333      	orrs	r3, r6
 80022e4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	6813      	ldr	r3, [r2, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	429e      	cmp	r6, r3
 80022ee:	d182      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xa>
 80022f0:	e796      	b.n	8002220 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f2:	68ab      	ldr	r3, [r5, #8]
 80022f4:	68e2      	ldr	r2, [r4, #12]
 80022f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60ab      	str	r3, [r5, #8]
 80022fe:	e793      	b.n	8002228 <HAL_RCC_ClockConfig+0x3c>
 8002300:	40022000 	.word	0x40022000
 8002304:	40021000 	.word	0x40021000
 8002308:	0800a907 	.word	0x0800a907
 800230c:	2000000c 	.word	0x2000000c

08002310 <HAL_RCC_GetHCLKFreq>:
}
 8002310:	4b01      	ldr	r3, [pc, #4]	; (8002318 <HAL_RCC_GetHCLKFreq+0x8>)
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	2000000c 	.word	0x2000000c

0800231c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetPCLK1Freq+0x18>)
 800231e:	4a06      	ldr	r2, [pc, #24]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002326:	5cd3      	ldrb	r3, [r2, r3]
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <HAL_RCC_GetPCLK1Freq+0x20>)
 800232a:	6810      	ldr	r0, [r2, #0]
 800232c:	f003 031f 	and.w	r3, r3, #31
}
 8002330:	40d8      	lsrs	r0, r3
 8002332:	4770      	bx	lr
 8002334:	40021000 	.word	0x40021000
 8002338:	0800a917 	.word	0x0800a917
 800233c:	2000000c 	.word	0x2000000c

08002340 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002342:	4a06      	ldr	r2, [pc, #24]	; (800235c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800234e:	6810      	ldr	r0, [r2, #0]
 8002350:	f003 031f 	and.w	r3, r3, #31
}
 8002354:	40d8      	lsrs	r0, r3
 8002356:	4770      	bx	lr
 8002358:	40021000 	.word	0x40021000
 800235c:	0800a917 	.word	0x0800a917
 8002360:	2000000c 	.word	0x2000000c

08002364 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002366:	4b45      	ldr	r3, [pc, #276]	; (800247c <RCCEx_PLLSAI1_Config+0x118>)
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	f012 0f03 	tst.w	r2, #3
{
 800236e:	4605      	mov	r5, r0
 8002370:	460e      	mov	r6, r1
 8002372:	461c      	mov	r4, r3
 8002374:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002376:	d02a      	beq.n	80023ce <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	f002 0203 	and.w	r2, r2, #3
 800237e:	4282      	cmp	r2, r0
 8002380:	d13c      	bne.n	80023fc <RCCEx_PLLSAI1_Config+0x98>
       ||
 8002382:	2a00      	cmp	r2, #0
 8002384:	d03a      	beq.n	80023fc <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002386:	68db      	ldr	r3, [r3, #12]
       ||
 8002388:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800238a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800238e:	3301      	adds	r3, #1
       ||
 8002390:	4293      	cmp	r3, r2
 8002392:	d133      	bne.n	80023fc <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800239a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800239c:	f7fe fe8e 	bl	80010bc <HAL_GetTick>
 80023a0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	011a      	lsls	r2, r3, #4
 80023a6:	d432      	bmi.n	800240e <RCCEx_PLLSAI1_Config+0xaa>
 80023a8:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023aa:	2e00      	cmp	r6, #0
 80023ac:	d036      	beq.n	800241c <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023ae:	2e01      	cmp	r6, #1
 80023b0:	d150      	bne.n	8002454 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023b2:	6922      	ldr	r2, [r4, #16]
 80023b4:	6928      	ldr	r0, [r5, #16]
 80023b6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80023ba:	0840      	lsrs	r0, r0, #1
 80023bc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80023c0:	3801      	subs	r0, #1
 80023c2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80023c6:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80023ca:	6122      	str	r2, [r4, #16]
 80023cc:	e032      	b.n	8002434 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80023ce:	2802      	cmp	r0, #2
 80023d0:	d010      	beq.n	80023f4 <RCCEx_PLLSAI1_Config+0x90>
 80023d2:	2803      	cmp	r0, #3
 80023d4:	d014      	beq.n	8002400 <RCCEx_PLLSAI1_Config+0x9c>
 80023d6:	2801      	cmp	r0, #1
 80023d8:	d110      	bne.n	80023fc <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	079f      	lsls	r7, r3, #30
 80023de:	d538      	bpl.n	8002452 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023e0:	68e3      	ldr	r3, [r4, #12]
 80023e2:	686a      	ldr	r2, [r5, #4]
 80023e4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80023e8:	3a01      	subs	r2, #1
 80023ea:	4318      	orrs	r0, r3
 80023ec:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80023f0:	60e0      	str	r0, [r4, #12]
 80023f2:	e7cf      	b.n	8002394 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023fa:	d1f1      	bne.n	80023e0 <RCCEx_PLLSAI1_Config+0x7c>
 80023fc:	2001      	movs	r0, #1
 80023fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	0391      	lsls	r1, r2, #14
 8002404:	d4ec      	bmi.n	80023e0 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800240c:	e7f5      	b.n	80023fa <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800240e:	f7fe fe55 	bl	80010bc <HAL_GetTick>
 8002412:	1bc0      	subs	r0, r0, r7
 8002414:	2802      	cmp	r0, #2
 8002416:	d9c4      	bls.n	80023a2 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8002418:	2003      	movs	r0, #3
 800241a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800241c:	6921      	ldr	r1, [r4, #16]
 800241e:	68eb      	ldr	r3, [r5, #12]
 8002420:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002424:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002428:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002432:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800243a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7fe fe3e 	bl	80010bc <HAL_GetTick>
 8002440:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	d513      	bpl.n	8002470 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002448:	6923      	ldr	r3, [r4, #16]
 800244a:	69aa      	ldr	r2, [r5, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	6123      	str	r3, [r4, #16]
 8002450:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002454:	6923      	ldr	r3, [r4, #16]
 8002456:	6968      	ldr	r0, [r5, #20]
 8002458:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800245c:	0840      	lsrs	r0, r0, #1
 800245e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002462:	3801      	subs	r0, #1
 8002464:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002468:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800246c:	6123      	str	r3, [r4, #16]
 800246e:	e7e1      	b.n	8002434 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002470:	f7fe fe24 	bl	80010bc <HAL_GetTick>
 8002474:	1b80      	subs	r0, r0, r6
 8002476:	2802      	cmp	r0, #2
 8002478:	d9e3      	bls.n	8002442 <RCCEx_PLLSAI1_Config+0xde>
 800247a:	e7cd      	b.n	8002418 <RCCEx_PLLSAI1_Config+0xb4>
 800247c:	40021000 	.word	0x40021000

08002480 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002482:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <RCCEx_PLLSAI2_Config+0xf8>)
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	f012 0f03 	tst.w	r2, #3
{
 800248a:	4605      	mov	r5, r0
 800248c:	460e      	mov	r6, r1
 800248e:	461c      	mov	r4, r3
 8002490:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002492:	d028      	beq.n	80024e6 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	f002 0203 	and.w	r2, r2, #3
 800249a:	4282      	cmp	r2, r0
 800249c:	d13a      	bne.n	8002514 <RCCEx_PLLSAI2_Config+0x94>
       ||
 800249e:	2a00      	cmp	r2, #0
 80024a0:	d038      	beq.n	8002514 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80024a2:	68db      	ldr	r3, [r3, #12]
       ||
 80024a4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80024a6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80024aa:	3301      	adds	r3, #1
       ||
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d131      	bne.n	8002514 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80024b0:	6823      	ldr	r3, [r4, #0]
 80024b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b8:	f7fe fe00 	bl	80010bc <HAL_GetTick>
 80024bc:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	009a      	lsls	r2, r3, #2
 80024c2:	d430      	bmi.n	8002526 <RCCEx_PLLSAI2_Config+0xa6>
 80024c4:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024c6:	2e00      	cmp	r6, #0
 80024c8:	d034      	beq.n	8002534 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024ca:	6963      	ldr	r3, [r4, #20]
 80024cc:	6929      	ldr	r1, [r5, #16]
 80024ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024d2:	0849      	lsrs	r1, r1, #1
 80024d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024d8:	3901      	subs	r1, #1
 80024da:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80024de:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80024e2:	6163      	str	r3, [r4, #20]
 80024e4:	e032      	b.n	800254c <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80024e6:	2802      	cmp	r0, #2
 80024e8:	d010      	beq.n	800250c <RCCEx_PLLSAI2_Config+0x8c>
 80024ea:	2803      	cmp	r0, #3
 80024ec:	d014      	beq.n	8002518 <RCCEx_PLLSAI2_Config+0x98>
 80024ee:	2801      	cmp	r0, #1
 80024f0:	d110      	bne.n	8002514 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	079f      	lsls	r7, r3, #30
 80024f6:	d538      	bpl.n	800256a <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024f8:	68e3      	ldr	r3, [r4, #12]
 80024fa:	686a      	ldr	r2, [r5, #4]
 80024fc:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002500:	3a01      	subs	r2, #1
 8002502:	4318      	orrs	r0, r3
 8002504:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002508:	60e0      	str	r0, [r4, #12]
 800250a:	e7d1      	b.n	80024b0 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002512:	d1f1      	bne.n	80024f8 <RCCEx_PLLSAI2_Config+0x78>
 8002514:	2001      	movs	r0, #1
 8002516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	0391      	lsls	r1, r2, #14
 800251c:	d4ec      	bmi.n	80024f8 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002524:	e7f5      	b.n	8002512 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002526:	f7fe fdc9 	bl	80010bc <HAL_GetTick>
 800252a:	1bc0      	subs	r0, r0, r7
 800252c:	2802      	cmp	r0, #2
 800252e:	d9c6      	bls.n	80024be <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002530:	2003      	movs	r0, #3
 8002532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002534:	6962      	ldr	r2, [r4, #20]
 8002536:	68eb      	ldr	r3, [r5, #12]
 8002538:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800253c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002540:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800254a:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002552:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7fe fdb2 	bl	80010bc <HAL_GetTick>
 8002558:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	d505      	bpl.n	800256c <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002560:	6963      	ldr	r3, [r4, #20]
 8002562:	696a      	ldr	r2, [r5, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	6163      	str	r3, [r4, #20]
 8002568:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800256a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800256c:	f7fe fda6 	bl	80010bc <HAL_GetTick>
 8002570:	1b80      	subs	r0, r0, r6
 8002572:	2802      	cmp	r0, #2
 8002574:	d9f1      	bls.n	800255a <RCCEx_PLLSAI2_Config+0xda>
 8002576:	e7db      	b.n	8002530 <RCCEx_PLLSAI2_Config+0xb0>
 8002578:	40021000 	.word	0x40021000

0800257c <HAL_RCCEx_PeriphCLKConfig>:
{
 800257c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002580:	6806      	ldr	r6, [r0, #0]
 8002582:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002586:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002588:	d024      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800258a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800258c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002590:	d02c      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002592:	d802      	bhi.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002594:	b1c1      	cbz	r1, 80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8002596:	2601      	movs	r6, #1
 8002598:	e01c      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800259a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800259e:	d00d      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80025a0:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80025a4:	d1f7      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025a6:	4a4d      	ldr	r2, [pc, #308]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80025aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025b2:	430b      	orrs	r3, r1
 80025b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80025b8:	2600      	movs	r6, #0
 80025ba:	e00b      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025bc:	4a47      	ldr	r2, [pc, #284]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025be:	68d3      	ldr	r3, [r2, #12]
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	60d3      	str	r3, [r2, #12]
      break;
 80025c6:	e7ee      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025c8:	3004      	adds	r0, #4
 80025ca:	f7ff fecb 	bl	8002364 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025ce:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d0e8      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	04d8      	lsls	r0, r3, #19
 80025d8:	d506      	bpl.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80025da:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80025dc:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80025e0:	d074      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x150>
 80025e2:	d808      	bhi.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80025e4:	b1a9      	cbz	r1, 8002612 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80025e6:	2601      	movs	r6, #1
 80025e8:	4635      	mov	r5, r6
 80025ea:	e021      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025ec:	2100      	movs	r1, #0
 80025ee:	3020      	adds	r0, #32
 80025f0:	f7ff ff46 	bl	8002480 <RCCEx_PLLSAI2_Config>
 80025f4:	e7eb      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80025f6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80025fa:	d004      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80025fc:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002600:	d1f1      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002602:	4635      	mov	r5, r6
 8002604:	e009      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002606:	4a35      	ldr	r2, [pc, #212]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002608:	68d3      	ldr	r3, [r2, #12]
 800260a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260e:	60d3      	str	r3, [r2, #12]
 8002610:	e7f7      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002612:	1d20      	adds	r0, r4, #4
 8002614:	f7ff fea6 	bl	8002364 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002618:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800261a:	2d00      	cmp	r5, #0
 800261c:	d15c      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800261e:	4a2f      	ldr	r2, [pc, #188]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002620:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002622:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002626:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800262a:	430b      	orrs	r3, r1
 800262c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	0399      	lsls	r1, r3, #14
 8002634:	f140 814f 	bpl.w	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002638:	4f28      	ldr	r7, [pc, #160]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800263c:	00da      	lsls	r2, r3, #3
 800263e:	f140 8176 	bpl.w	800292e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002642:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002646:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80026e0 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800264a:	f8d9 3000 	ldr.w	r3, [r9]
 800264e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002652:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002656:	f7fe fd31 	bl	80010bc <HAL_GetTick>
 800265a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800265c:	f8d9 3000 	ldr.w	r3, [r9]
 8002660:	05db      	lsls	r3, r3, #23
 8002662:	d53f      	bpl.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002664:	2d00      	cmp	r5, #0
 8002666:	d144      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800266c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002670:	d015      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002672:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002676:	4293      	cmp	r3, r2
 8002678:	d011      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800267a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800267e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002682:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002686:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800268a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800268e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002692:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002696:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800269a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800269e:	07d8      	lsls	r0, r3, #31
 80026a0:	d509      	bpl.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80026a2:	f7fe fd0b 	bl	80010bc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80026aa:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026b0:	0799      	lsls	r1, r3, #30
 80026b2:	f140 8109 	bpl.w	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026ba:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80026be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026c8:	4635      	mov	r5, r6
 80026ca:	e012      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026cc:	2100      	movs	r1, #0
 80026ce:	f104 0020 	add.w	r0, r4, #32
 80026d2:	f7ff fed5 	bl	8002480 <RCCEx_PLLSAI2_Config>
 80026d6:	e79f      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80026d8:	462e      	mov	r6, r5
 80026da:	e7a9      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e4:	f7fe fcea 	bl	80010bc <HAL_GetTick>
 80026e8:	eba0 000a 	sub.w	r0, r0, sl
 80026ec:	2802      	cmp	r0, #2
 80026ee:	d9b5      	bls.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 80026f0:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80026f2:	f1b8 0f00 	cmp.w	r8, #0
 80026f6:	d003      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fe:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	07da      	lsls	r2, r3, #31
 8002704:	d508      	bpl.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002706:	4990      	ldr	r1, [pc, #576]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002708:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800270a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800270e:	f022 0203 	bic.w	r2, r2, #3
 8002712:	4302      	orrs	r2, r0
 8002714:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002718:	079f      	lsls	r7, r3, #30
 800271a:	d508      	bpl.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800271c:	498a      	ldr	r1, [pc, #552]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800271e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002720:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002724:	f022 020c 	bic.w	r2, r2, #12
 8002728:	4302      	orrs	r2, r0
 800272a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800272e:	075e      	lsls	r6, r3, #29
 8002730:	d508      	bpl.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002732:	4985      	ldr	r1, [pc, #532]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002734:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002736:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800273a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800273e:	4302      	orrs	r2, r0
 8002740:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002744:	0718      	lsls	r0, r3, #28
 8002746:	d508      	bpl.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002748:	497f      	ldr	r1, [pc, #508]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800274a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800274c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002750:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002754:	4302      	orrs	r2, r0
 8002756:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800275a:	06d9      	lsls	r1, r3, #27
 800275c:	d508      	bpl.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800275e:	497a      	ldr	r1, [pc, #488]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002760:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002762:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002766:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800276a:	4302      	orrs	r2, r0
 800276c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002770:	069a      	lsls	r2, r3, #26
 8002772:	d508      	bpl.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002774:	4974      	ldr	r1, [pc, #464]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002776:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002778:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800277c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002780:	4302      	orrs	r2, r0
 8002782:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002786:	059f      	lsls	r7, r3, #22
 8002788:	d508      	bpl.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800278a:	496f      	ldr	r1, [pc, #444]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800278c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800278e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002792:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002796:	4302      	orrs	r2, r0
 8002798:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800279c:	055e      	lsls	r6, r3, #21
 800279e:	d508      	bpl.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027a0:	4969      	ldr	r1, [pc, #420]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80027a2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80027a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80027a8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80027ac:	4302      	orrs	r2, r0
 80027ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b2:	0658      	lsls	r0, r3, #25
 80027b4:	d508      	bpl.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027b6:	4964      	ldr	r1, [pc, #400]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80027b8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80027ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80027be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80027c2:	4302      	orrs	r2, r0
 80027c4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027c8:	0619      	lsls	r1, r3, #24
 80027ca:	d508      	bpl.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027cc:	495e      	ldr	r1, [pc, #376]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80027ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80027d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80027d4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80027d8:	4302      	orrs	r2, r0
 80027da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027de:	05da      	lsls	r2, r3, #23
 80027e0:	d508      	bpl.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027e2:	4959      	ldr	r1, [pc, #356]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80027e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80027ea:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80027ee:	4302      	orrs	r2, r0
 80027f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027f4:	049b      	lsls	r3, r3, #18
 80027f6:	d50f      	bpl.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027f8:	4a53      	ldr	r2, [pc, #332]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80027fa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80027fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002800:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002804:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002806:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800280a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800280e:	d164      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002810:	68d3      	ldr	r3, [r2, #12]
 8002812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002816:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	031f      	lsls	r7, r3, #12
 800281c:	d50f      	bpl.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800281e:	4a4a      	ldr	r2, [pc, #296]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002820:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002822:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002826:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800282a:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800282c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002834:	d15c      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002836:	68d3      	ldr	r3, [r2, #12]
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	035e      	lsls	r6, r3, #13
 8002842:	d50f      	bpl.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002844:	4a40      	ldr	r2, [pc, #256]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002846:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002848:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800284c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002850:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002852:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002856:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800285a:	d154      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800285c:	68d3      	ldr	r3, [r2, #12]
 800285e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002862:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	0458      	lsls	r0, r3, #17
 8002868:	d512      	bpl.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800286a:	4937      	ldr	r1, [pc, #220]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800286c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800286e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002872:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002876:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002878:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800287c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002880:	d14c      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002882:	2102      	movs	r1, #2
 8002884:	1d20      	adds	r0, r4, #4
 8002886:	f7ff fd6d 	bl	8002364 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800288a:	2800      	cmp	r0, #0
 800288c:	bf18      	it	ne
 800288e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002890:	6822      	ldr	r2, [r4, #0]
 8002892:	0411      	lsls	r1, r2, #16
 8002894:	d508      	bpl.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002896:	492c      	ldr	r1, [pc, #176]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002898:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800289a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800289e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028a2:	4303      	orrs	r3, r0
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028a8:	03d3      	lsls	r3, r2, #15
 80028aa:	d509      	bpl.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028ac:	4a26      	ldr	r2, [pc, #152]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80028ae:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80028b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80028b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ba:	430b      	orrs	r3, r1
 80028bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80028c0:	4628      	mov	r0, r5
 80028c2:	b002      	add	sp, #8
 80028c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7fe fbf8 	bl	80010bc <HAL_GetTick>
 80028cc:	1b40      	subs	r0, r0, r5
 80028ce:	4548      	cmp	r0, r9
 80028d0:	f67f aeec 	bls.w	80026ac <HAL_RCCEx_PeriphCLKConfig+0x130>
 80028d4:	e70c      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80028d6:	4635      	mov	r5, r6
 80028d8:	e712      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028da:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80028de:	d19b      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028e0:	2101      	movs	r1, #1
 80028e2:	1d20      	adds	r0, r4, #4
 80028e4:	f7ff fd3e 	bl	8002364 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80028e8:	2800      	cmp	r0, #0
 80028ea:	bf18      	it	ne
 80028ec:	4605      	movne	r5, r0
 80028ee:	e793      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028f0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80028f4:	d1a3      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028f6:	2101      	movs	r1, #1
 80028f8:	1d20      	adds	r0, r4, #4
 80028fa:	f7ff fd33 	bl	8002364 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80028fe:	2800      	cmp	r0, #0
 8002900:	bf18      	it	ne
 8002902:	4605      	movne	r5, r0
 8002904:	e79b      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002906:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800290a:	d1ab      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800290c:	2101      	movs	r1, #1
 800290e:	1d20      	adds	r0, r4, #4
 8002910:	f7ff fd28 	bl	8002364 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002914:	2800      	cmp	r0, #0
 8002916:	bf18      	it	ne
 8002918:	4605      	movne	r5, r0
 800291a:	e7a3      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800291c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002920:	d1b6      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002922:	2102      	movs	r1, #2
 8002924:	f104 0020 	add.w	r0, r4, #32
 8002928:	f7ff fdaa 	bl	8002480 <RCCEx_PLLSAI2_Config>
 800292c:	e7ad      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	65bb      	str	r3, [r7, #88]	; 0x58
 8002936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002940:	f04f 0801 	mov.w	r8, #1
 8002944:	e67f      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000

0800294c <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	2302      	movs	r3, #2
{
 800294e:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8002954:	6803      	ldr	r3, [r0, #0]
 8002956:	4c09      	ldr	r4, [pc, #36]	; (800297c <HAL_TIM_Base_Start+0x30>)
 8002958:	6899      	ldr	r1, [r3, #8]
 800295a:	4021      	ands	r1, r4
 800295c:	2906      	cmp	r1, #6
 800295e:	d008      	beq.n	8002972 <HAL_TIM_Base_Start+0x26>
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	4022      	ands	r2, r4
 8002964:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8002968:	bf1e      	ittt	ne
 800296a:	681a      	ldrne	r2, [r3, #0]
 800296c:	f042 0201 	orrne.w	r2, r2, #1
 8002970:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002972:	2301      	movs	r3, #1
 8002974:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8002978:	2000      	movs	r0, #0
 800297a:	bd10      	pop	{r4, pc}
 800297c:	00010007 	.word	0x00010007

08002980 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002980:	4a30      	ldr	r2, [pc, #192]	; (8002a44 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002982:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002984:	4290      	cmp	r0, r2
 8002986:	d012      	beq.n	80029ae <TIM_Base_SetConfig+0x2e>
 8002988:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800298c:	d00f      	beq.n	80029ae <TIM_Base_SetConfig+0x2e>
 800298e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002992:	4290      	cmp	r0, r2
 8002994:	d00b      	beq.n	80029ae <TIM_Base_SetConfig+0x2e>
 8002996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800299a:	4290      	cmp	r0, r2
 800299c:	d007      	beq.n	80029ae <TIM_Base_SetConfig+0x2e>
 800299e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029a2:	4290      	cmp	r0, r2
 80029a4:	d003      	beq.n	80029ae <TIM_Base_SetConfig+0x2e>
 80029a6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80029aa:	4290      	cmp	r0, r2
 80029ac:	d119      	bne.n	80029e2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80029ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029b4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029b6:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <TIM_Base_SetConfig+0xc4>)
 80029b8:	4290      	cmp	r0, r2
 80029ba:	d01d      	beq.n	80029f8 <TIM_Base_SetConfig+0x78>
 80029bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80029c0:	d01a      	beq.n	80029f8 <TIM_Base_SetConfig+0x78>
 80029c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80029c6:	4290      	cmp	r0, r2
 80029c8:	d016      	beq.n	80029f8 <TIM_Base_SetConfig+0x78>
 80029ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029ce:	4290      	cmp	r0, r2
 80029d0:	d012      	beq.n	80029f8 <TIM_Base_SetConfig+0x78>
 80029d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029d6:	4290      	cmp	r0, r2
 80029d8:	d00e      	beq.n	80029f8 <TIM_Base_SetConfig+0x78>
 80029da:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80029de:	4290      	cmp	r0, r2
 80029e0:	d00a      	beq.n	80029f8 <TIM_Base_SetConfig+0x78>
 80029e2:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <TIM_Base_SetConfig+0xc8>)
 80029e4:	4290      	cmp	r0, r2
 80029e6:	d007      	beq.n	80029f8 <TIM_Base_SetConfig+0x78>
 80029e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029ec:	4290      	cmp	r0, r2
 80029ee:	d003      	beq.n	80029f8 <TIM_Base_SetConfig+0x78>
 80029f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029f4:	4290      	cmp	r0, r2
 80029f6:	d103      	bne.n	8002a00 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029f8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80029fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fe:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a00:	694a      	ldr	r2, [r1, #20]
 8002a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a06:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002a08:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a0a:	688b      	ldr	r3, [r1, #8]
 8002a0c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a0e:	680b      	ldr	r3, [r1, #0]
 8002a10:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <TIM_Base_SetConfig+0xc4>)
 8002a14:	4298      	cmp	r0, r3
 8002a16:	d00f      	beq.n	8002a38 <TIM_Base_SetConfig+0xb8>
 8002a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1c:	4298      	cmp	r0, r3
 8002a1e:	d00b      	beq.n	8002a38 <TIM_Base_SetConfig+0xb8>
 8002a20:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002a24:	4298      	cmp	r0, r3
 8002a26:	d007      	beq.n	8002a38 <TIM_Base_SetConfig+0xb8>
 8002a28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a2c:	4298      	cmp	r0, r3
 8002a2e:	d003      	beq.n	8002a38 <TIM_Base_SetConfig+0xb8>
 8002a30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a34:	4298      	cmp	r0, r3
 8002a36:	d101      	bne.n	8002a3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a38:	690b      	ldr	r3, [r1, #16]
 8002a3a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	6143      	str	r3, [r0, #20]
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40014000 	.word	0x40014000

08002a4c <HAL_TIM_Base_Init>:
{
 8002a4c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002a4e:	4604      	mov	r4, r0
 8002a50:	b1a0      	cbz	r0, 8002a7c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a5a:	b91b      	cbnz	r3, 8002a64 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002a5c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002a60:	f001 fea8 	bl	80047b4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a64:	2302      	movs	r3, #2
 8002a66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a6a:	6820      	ldr	r0, [r4, #0]
 8002a6c:	1d21      	adds	r1, r4, #4
 8002a6e:	f7ff ff87 	bl	8002980 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a78:	2000      	movs	r0, #0
 8002a7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a7c:	2001      	movs	r0, #1
}
 8002a7e:	bd10      	pop	{r4, pc}

08002a80 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a84:	2b01      	cmp	r3, #1
{
 8002a86:	b530      	push	{r4, r5, lr}
 8002a88:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002a8c:	d01f      	beq.n	8002ace <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a8e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a90:	4d10      	ldr	r5, [pc, #64]	; (8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002a92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a96:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8002a98:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002a9a:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8002a9e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002aa2:	42aa      	cmp	r2, r5
 8002aa4:	d103      	bne.n	8002aae <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002aa6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002aa8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002aac:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aae:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ab0:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ab6:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002ab8:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002abc:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002abe:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ac0:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8002ac2:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002ac4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002ace:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002ad0:	bd30      	pop	{r4, r5, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40012c00 	.word	0x40012c00

08002ad8 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad8:	6803      	ldr	r3, [r0, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ae0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aea:	2320      	movs	r3, #32
 8002aec:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	6603      	str	r3, [r0, #96]	; 0x60
 8002af4:	4770      	bx	lr
	...

08002af8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002af8:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d149      	bne.n	8002b94 <HAL_UART_Receive_IT+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8002b00:	2900      	cmp	r1, #0
 8002b02:	d045      	beq.n	8002b90 <HAL_UART_Receive_IT+0x98>
 8002b04:	2a00      	cmp	r2, #0
 8002b06:	d043      	beq.n	8002b90 <HAL_UART_Receive_IT+0x98>
    __HAL_LOCK(huart);
 8002b08:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d041      	beq.n	8002b94 <HAL_UART_Receive_IT+0x9c>
 8002b10:	2301      	movs	r3, #1
 8002b12:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxISR       = NULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8002b1a:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 8002b1c:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8002b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize  = Size;
 8002b22:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b26:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002b2a:	d121      	bne.n	8002b70 <HAL_UART_Receive_IT+0x78>
 8002b2c:	6902      	ldr	r2, [r0, #16]
 8002b2e:	b9ea      	cbnz	r2, 8002b6c <HAL_UART_Receive_IT+0x74>
 8002b30:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002b34:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b38:	2200      	movs	r2, #0
 8002b3a:	6742      	str	r2, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b3c:	2222      	movs	r2, #34	; 0x22
 8002b3e:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b42:	6802      	ldr	r2, [r0, #0]
 8002b44:	6891      	ldr	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4a:	f041 0101 	orr.w	r1, r1, #1
 8002b4e:	6091      	str	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b50:	d11c      	bne.n	8002b8c <HAL_UART_Receive_IT+0x94>
 8002b52:	6903      	ldr	r3, [r0, #16]
 8002b54:	b9d3      	cbnz	r3, 8002b8c <HAL_UART_Receive_IT+0x94>
        huart->RxISR = UART_RxISR_16BIT;
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <HAL_UART_Receive_IT+0xa0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002b58:	6811      	ldr	r1, [r2, #0]
        huart->RxISR = UART_RxISR_8BIT;
 8002b5a:	6603      	str	r3, [r0, #96]	; 0x60
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002b5c:	f441 7190 	orr.w	r1, r1, #288	; 0x120
      __HAL_UNLOCK(huart);
 8002b60:	2300      	movs	r3, #0
 8002b62:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002b66:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002b68:	4618      	mov	r0, r3
 8002b6a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002b6c:	22ff      	movs	r2, #255	; 0xff
 8002b6e:	e7e1      	b.n	8002b34 <HAL_UART_Receive_IT+0x3c>
 8002b70:	b923      	cbnz	r3, 8002b7c <HAL_UART_Receive_IT+0x84>
 8002b72:	6902      	ldr	r2, [r0, #16]
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	d0f9      	beq.n	8002b6c <HAL_UART_Receive_IT+0x74>
 8002b78:	227f      	movs	r2, #127	; 0x7f
 8002b7a:	e7db      	b.n	8002b34 <HAL_UART_Receive_IT+0x3c>
 8002b7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b80:	d1da      	bne.n	8002b38 <HAL_UART_Receive_IT+0x40>
 8002b82:	6902      	ldr	r2, [r0, #16]
 8002b84:	2a00      	cmp	r2, #0
 8002b86:	d0f7      	beq.n	8002b78 <HAL_UART_Receive_IT+0x80>
 8002b88:	223f      	movs	r2, #63	; 0x3f
 8002b8a:	e7d3      	b.n	8002b34 <HAL_UART_Receive_IT+0x3c>
        huart->RxISR = UART_RxISR_8BIT;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_UART_Receive_IT+0xa4>)
 8002b8e:	e7e3      	b.n	8002b58 <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 8002b90:	2001      	movs	r0, #1
 8002b92:	4770      	bx	lr
    return HAL_BUSY;
 8002b94:	2002      	movs	r0, #2
}
 8002b96:	4770      	bx	lr
 8002b98:	08002cab 	.word	0x08002cab
 8002b9c:	08002c55 	.word	0x08002c55

08002ba0 <HAL_UART_Transmit_DMA>:
{
 8002ba0:	b538      	push	{r3, r4, r5, lr}
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002ba6:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
 8002baa:	2a20      	cmp	r2, #32
 8002bac:	d12b      	bne.n	8002c06 <HAL_UART_Transmit_DMA+0x66>
    if ((pData == NULL) || (Size == 0U))
 8002bae:	b341      	cbz	r1, 8002c02 <HAL_UART_Transmit_DMA+0x62>
 8002bb0:	b33b      	cbz	r3, 8002c02 <HAL_UART_Transmit_DMA+0x62>
    __HAL_LOCK(huart);
 8002bb2:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8002bb6:	2a01      	cmp	r2, #1
 8002bb8:	d025      	beq.n	8002c06 <HAL_UART_Transmit_DMA+0x66>
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002bc0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferCount = Size;
 8002bc2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc6:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bc8:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bca:	6765      	str	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bcc:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002bd0:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize  = Size;
 8002bd2:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr  = pData;
 8002bd6:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002bd8:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002bda:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <HAL_UART_Transmit_DMA+0x70>)
 8002bdc:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002bde:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <HAL_UART_Transmit_DMA+0x74>)
 8002be0:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8002be2:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8002be4:	6385      	str	r5, [r0, #56]	; 0x38
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8002be6:	3228      	adds	r2, #40	; 0x28
 8002be8:	f7fe fe6e 	bl	80018c8 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	2240      	movs	r2, #64	; 0x40
 8002bf0:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bf2:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8002bf4:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bfc:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8002bfe:	4628      	mov	r0, r5
 8002c00:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002c02:	2001      	movs	r0, #1
 8002c04:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002c06:	2002      	movs	r0, #2
}
 8002c08:	bd38      	pop	{r3, r4, r5, pc}
 8002c0a:	bf00      	nop
 8002c0c:	08002c1b 	.word	0x08002c1b
 8002c10:	08002c4b 	.word	0x08002c4b
 8002c14:	08002d01 	.word	0x08002d01

08002c18 <HAL_UART_TxCpltCallback>:
 8002c18:	4770      	bx	lr

08002c1a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c1a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002c1c:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c1e:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f013 0320 	ands.w	r3, r3, #32
 8002c26:	d10b      	bne.n	8002c40 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 8002c28:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c2c:	6813      	ldr	r3, [r2, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c34:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	bd08      	pop	{r3, pc}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8002c40:	4610      	mov	r0, r2
 8002c42:	f7ff ffe9 	bl	8002c18 <HAL_UART_TxCpltCallback>
 8002c46:	bd08      	pop	{r3, pc}

08002c48 <HAL_UART_TxHalfCpltCallback>:
 8002c48:	4770      	bx	lr

08002c4a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c4a:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002c4c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002c4e:	f7ff fffb 	bl	8002c48 <HAL_UART_TxHalfCpltCallback>
 8002c52:	bd08      	pop	{r3, pc}

08002c54 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c54:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8002c58:	2a22      	cmp	r2, #34	; 0x22
{
 8002c5a:	b538      	push	{r3, r4, r5, lr}
 8002c5c:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c5e:	d11e      	bne.n	8002c9e <UART_RxISR_8BIT+0x4a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c60:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002c62:	6d44      	ldr	r4, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 8002c64:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002c68:	1c65      	adds	r5, r4, #1
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	6545      	str	r5, [r0, #84]	; 0x54
 8002c6e:	7022      	strb	r2, [r4, #0]

    if (--huart->RxXferCount == 0)
 8002c70:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8002c74:	3a01      	subs	r2, #1
 8002c76:	b292      	uxth	r2, r2
 8002c78:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 8002c7c:	b9a2      	cbnz	r2, 8002ca8 <UART_RxISR_8BIT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c7e:	6801      	ldr	r1, [r0, #0]
 8002c80:	680c      	ldr	r4, [r1, #0]
 8002c82:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8002c86:	600c      	str	r4, [r1, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c88:	688c      	ldr	r4, [r1, #8]
 8002c8a:	f024 0401 	bic.w	r4, r4, #1
 8002c8e:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c90:	2120      	movs	r1, #32
 8002c92:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002c96:	6602      	str	r2, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002c98:	f001 fc9c 	bl	80045d4 <HAL_UART_RxCpltCallback>
 8002c9c:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c9e:	8b13      	ldrh	r3, [r2, #24]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	f043 0308 	orr.w	r3, r3, #8
 8002ca6:	8313      	strh	r3, [r2, #24]
 8002ca8:	bd38      	pop	{r3, r4, r5, pc}

08002caa <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002caa:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8002cae:	2a22      	cmp	r2, #34	; 0x22
{
 8002cb0:	b510      	push	{r4, lr}
 8002cb2:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cb4:	d11d      	bne.n	8002cf2 <UART_RxISR_16BIT+0x48>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002cb6:	8c94      	ldrh	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8002cb8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8002cbc:	400c      	ands	r4, r1
 8002cbe:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8002cc0:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2;
 8002cc4:	6541      	str	r1, [r0, #84]	; 0x54

    if (--huart->RxXferCount == 0)
 8002cc6:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
 8002cca:	3901      	subs	r1, #1
 8002ccc:	b289      	uxth	r1, r1
 8002cce:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
 8002cd2:	b999      	cbnz	r1, 8002cfc <UART_RxISR_16BIT+0x52>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd4:	6814      	ldr	r4, [r2, #0]
 8002cd6:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8002cda:	6014      	str	r4, [r2, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cdc:	6894      	ldr	r4, [r2, #8]
 8002cde:	f024 0401 	bic.w	r4, r4, #1
 8002ce2:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002cea:	6601      	str	r1, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002cec:	f001 fc72 	bl	80045d4 <HAL_UART_RxCpltCallback>
 8002cf0:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002cf2:	8b13      	ldrh	r3, [r2, #24]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	f043 0308 	orr.w	r3, r3, #8
 8002cfa:	8313      	strh	r3, [r2, #24]
 8002cfc:	bd10      	pop	{r4, pc}

08002cfe <HAL_UART_ErrorCallback>:
 8002cfe:	4770      	bx	lr

08002d00 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002d00:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
 8002d02:	b508      	push	{r3, lr}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d04:	f891 3071 	ldrb.w	r3, [r1, #113]	; 0x71
 8002d08:	2b21      	cmp	r3, #33	; 0x21
 8002d0a:	d10d      	bne.n	8002d28 <UART_DMAError+0x28>
      && (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 8002d0c:	680b      	ldr	r3, [r1, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	0612      	lsls	r2, r2, #24
 8002d12:	d509      	bpl.n	8002d28 <UART_DMAError+0x28>
    huart->TxXferCount = 0U;
 8002d14:	2200      	movs	r2, #0
 8002d16:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002d20:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002d22:	2320      	movs	r3, #32
 8002d24:	f881 3071 	strb.w	r3, [r1, #113]	; 0x71
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d28:	f891 3072 	ldrb.w	r3, [r1, #114]	; 0x72
 8002d2c:	2b22      	cmp	r3, #34	; 0x22
 8002d2e:	d109      	bne.n	8002d44 <UART_DMAError+0x44>
      && (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002d30:	680b      	ldr	r3, [r1, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	065b      	lsls	r3, r3, #25
 8002d36:	d505      	bpl.n	8002d44 <UART_DMAError+0x44>
    huart->RxXferCount = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8002d3e:	4608      	mov	r0, r1
 8002d40:	f7ff feca 	bl	8002ad8 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002d44:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8002d46:	f043 0310 	orr.w	r3, r3, #16
 8002d4a:	674b      	str	r3, [r1, #116]	; 0x74
  HAL_UART_ErrorCallback(huart);
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	f7ff ffd6 	bl	8002cfe <HAL_UART_ErrorCallback>
 8002d52:	bd08      	pop	{r3, pc}

08002d54 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d54:	6803      	ldr	r3, [r0, #0]
 8002d56:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d58:	6819      	ldr	r1, [r3, #0]
{
 8002d5a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002d5c:	0716      	lsls	r6, r2, #28
{
 8002d5e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d60:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8002d62:	d10a      	bne.n	8002d7a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 8002d64:	0696      	lsls	r6, r2, #26
 8002d66:	d564      	bpl.n	8002e32 <HAL_UART_IRQHandler+0xde>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d68:	068e      	lsls	r6, r1, #26
 8002d6a:	d562      	bpl.n	8002e32 <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8002d6c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8083 	beq.w	8002e7a <HAL_UART_IRQHandler+0x126>
}
 8002d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8002d78:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != RESET)
 8002d7a:	f015 0001 	ands.w	r0, r5, #1
 8002d7e:	d102      	bne.n	8002d86 <HAL_UART_IRQHandler+0x32>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d80:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002d84:	d055      	beq.n	8002e32 <HAL_UART_IRQHandler+0xde>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d86:	07d5      	lsls	r5, r2, #31
 8002d88:	d507      	bpl.n	8002d9a <HAL_UART_IRQHandler+0x46>
 8002d8a:	05ce      	lsls	r6, r1, #23
 8002d8c:	d505      	bpl.n	8002d9a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d8e:	2501      	movs	r5, #1
 8002d90:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d92:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002d94:	f045 0501 	orr.w	r5, r5, #1
 8002d98:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d9a:	0795      	lsls	r5, r2, #30
 8002d9c:	d506      	bpl.n	8002dac <HAL_UART_IRQHandler+0x58>
 8002d9e:	b128      	cbz	r0, 8002dac <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002da0:	2502      	movs	r5, #2
 8002da2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002da4:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002da6:	f045 0504 	orr.w	r5, r5, #4
 8002daa:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dac:	0756      	lsls	r6, r2, #29
 8002dae:	d506      	bpl.n	8002dbe <HAL_UART_IRQHandler+0x6a>
 8002db0:	b128      	cbz	r0, 8002dbe <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002db2:	2504      	movs	r5, #4
 8002db4:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002db6:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002db8:	f045 0502 	orr.w	r5, r5, #2
 8002dbc:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 8002dbe:	0715      	lsls	r5, r2, #28
 8002dc0:	d507      	bpl.n	8002dd2 <HAL_UART_IRQHandler+0x7e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8002dc2:	068e      	lsls	r6, r1, #26
 8002dc4:	d400      	bmi.n	8002dc8 <HAL_UART_IRQHandler+0x74>
 8002dc6:	b120      	cbz	r0, 8002dd2 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dc8:	2008      	movs	r0, #8
 8002dca:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dcc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002dce:	4303      	orrs	r3, r0
 8002dd0:	6763      	str	r3, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dd2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d050      	beq.n	8002e7a <HAL_UART_IRQHandler+0x126>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8002dd8:	0695      	lsls	r5, r2, #26
 8002dda:	d505      	bpl.n	8002de8 <HAL_UART_IRQHandler+0x94>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ddc:	0688      	lsls	r0, r1, #26
 8002dde:	d503      	bpl.n	8002de8 <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL)
 8002de0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002de2:	b10b      	cbz	r3, 8002de8 <HAL_UART_IRQHandler+0x94>
          huart->RxISR(huart);
 8002de4:	4620      	mov	r0, r4
 8002de6:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002de8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002dea:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8002dec:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002dee:	d404      	bmi.n	8002dfa <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002df4:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002df8:	d017      	beq.n	8002e2a <HAL_UART_IRQHandler+0xd6>
        UART_EndRxTransfer(huart);
 8002dfa:	f7ff fe6d 	bl	8002ad8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	0652      	lsls	r2, r2, #25
 8002e04:	d50d      	bpl.n	8002e22 <HAL_UART_IRQHandler+0xce>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e06:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002e08:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e0e:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002e10:	b138      	cbz	r0, 8002e22 <HAL_UART_IRQHandler+0xce>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_UART_IRQHandler+0x128>)
 8002e14:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e16:	f7fe fd97 	bl	8001948 <HAL_DMA_Abort_IT>
 8002e1a:	b370      	cbz	r0, 8002e7a <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e1c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002e1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e20:	e7a8      	b.n	8002d74 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8002e22:	4620      	mov	r0, r4
 8002e24:	f7ff ff6b 	bl	8002cfe <HAL_UART_ErrorCallback>
 8002e28:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002e2a:	f7ff ff68 	bl	8002cfe <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2e:	6765      	str	r5, [r4, #116]	; 0x74
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002e32:	02d6      	lsls	r6, r2, #11
 8002e34:	d509      	bpl.n	8002e4a <HAL_UART_IRQHandler+0xf6>
 8002e36:	0268      	lsls	r0, r5, #9
 8002e38:	d507      	bpl.n	8002e4a <HAL_UART_IRQHandler+0xf6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8002e3e:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e40:	621a      	str	r2, [r3, #32]
}
 8002e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002e46:	f000 bafd 	b.w	8003444 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != RESET)
 8002e4a:	0616      	lsls	r6, r2, #24
 8002e4c:	d505      	bpl.n	8002e5a <HAL_UART_IRQHandler+0x106>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e4e:	060d      	lsls	r5, r1, #24
 8002e50:	d503      	bpl.n	8002e5a <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 8002e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e54:	b18b      	cbz	r3, 8002e7a <HAL_UART_IRQHandler+0x126>
      huart->TxISR(huart);
 8002e56:	4620      	mov	r0, r4
 8002e58:	e78c      	b.n	8002d74 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e5a:	0650      	lsls	r0, r2, #25
 8002e5c:	d50d      	bpl.n	8002e7a <HAL_UART_IRQHandler+0x126>
 8002e5e:	064a      	lsls	r2, r1, #25
 8002e60:	d50b      	bpl.n	8002e7a <HAL_UART_IRQHandler+0x126>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e68:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002e6a:	2320      	movs	r3, #32
 8002e6c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->TxISR = NULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8002e74:	4620      	mov	r0, r4
 8002e76:	f7ff fecf 	bl	8002c18 <HAL_UART_TxCpltCallback>
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	08002e81 	.word	0x08002e81

08002e80 <UART_DMAAbortOnError>:
{
 8002e80:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e82:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002e8a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002e8e:	f7ff ff36 	bl	8002cfe <HAL_UART_ErrorCallback>
 8002e92:	bd08      	pop	{r3, pc}

08002e94 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e94:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e96:	69c1      	ldr	r1, [r0, #28]
{
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e9c:	6883      	ldr	r3, [r0, #8]
 8002e9e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ea0:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ea2:	4303      	orrs	r3, r0
 8002ea4:	6960      	ldr	r0, [r4, #20]
 8002ea6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ea8:	48ba      	ldr	r0, [pc, #744]	; (8003194 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eaa:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eac:	4028      	ands	r0, r5
 8002eae:	4303      	orrs	r3, r0
 8002eb0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb2:	6853      	ldr	r3, [r2, #4]
 8002eb4:	68e0      	ldr	r0, [r4, #12]
 8002eb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eba:	4303      	orrs	r3, r0
 8002ebc:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ebe:	4bb6      	ldr	r3, [pc, #728]	; (8003198 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ec0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ec2:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8002ec4:	bf1c      	itt	ne
 8002ec6:	6a23      	ldrne	r3, [r4, #32]
 8002ec8:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eca:	6893      	ldr	r3, [r2, #8]
 8002ecc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002ed0:	4303      	orrs	r3, r0
 8002ed2:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ed4:	4bb1      	ldr	r3, [pc, #708]	; (800319c <UART_SetConfig+0x308>)
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d119      	bne.n	8002f0e <UART_SetConfig+0x7a>
 8002eda:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002ede:	4ab0      	ldr	r2, [pc, #704]	; (80031a0 <UART_SetConfig+0x30c>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee4:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ee8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002eec:	5cd3      	ldrb	r3, [r2, r3]
 8002eee:	f040 8138 	bne.w	8003162 <UART_SetConfig+0x2ce>
    switch (clocksource)
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	f200 808f 	bhi.w	8003016 <UART_SetConfig+0x182>
 8002ef8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002efc:	00ca011a 	.word	0x00ca011a
 8002f00:	008d00f9 	.word	0x008d00f9
 8002f04:	008d0114 	.word	0x008d0114
 8002f08:	008d008d 	.word	0x008d008d
 8002f0c:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f0e:	4ba5      	ldr	r3, [pc, #660]	; (80031a4 <UART_SetConfig+0x310>)
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d107      	bne.n	8002f24 <UART_SetConfig+0x90>
 8002f14:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002f18:	4aa3      	ldr	r2, [pc, #652]	; (80031a8 <UART_SetConfig+0x314>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	e7e1      	b.n	8002ee8 <UART_SetConfig+0x54>
 8002f24:	4ba1      	ldr	r3, [pc, #644]	; (80031ac <UART_SetConfig+0x318>)
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d123      	bne.n	8002f72 <UART_SetConfig+0xde>
 8002f2a:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	f000 80f1 	beq.w	800311e <UART_SetConfig+0x28a>
 8002f3c:	d80b      	bhi.n	8002f56 <UART_SetConfig+0xc2>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80f3 	beq.w	800312a <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f44:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        ret = HAL_ERROR;
 8002f48:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002f4c:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f50:	f000 80f8 	beq.w	8003144 <UART_SetConfig+0x2b0>
 8002f54:	e0a8      	b.n	80030a8 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	f000 80c6 	beq.w	80030e8 <UART_SetConfig+0x254>
 8002f5c:	2b30      	cmp	r3, #48	; 0x30
 8002f5e:	d1f1      	bne.n	8002f44 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f60:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002f64:	f040 80b8 	bne.w	80030d8 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f68:	6860      	ldr	r0, [r4, #4]
 8002f6a:	0843      	lsrs	r3, r0, #1
 8002f6c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002f70:	e0c3      	b.n	80030fa <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f72:	4b8f      	ldr	r3, [pc, #572]	; (80031b0 <UART_SetConfig+0x31c>)
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d11e      	bne.n	8002fb6 <UART_SetConfig+0x122>
 8002f78:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f84:	2b40      	cmp	r3, #64	; 0x40
 8002f86:	f000 80bb 	beq.w	8003100 <UART_SetConfig+0x26c>
 8002f8a:	d80a      	bhi.n	8002fa2 <UART_SetConfig+0x10e>
 8002f8c:	b97b      	cbnz	r3, 8002fae <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f8e:	4b82      	ldr	r3, [pc, #520]	; (8003198 <UART_SetConfig+0x304>)
 8002f90:	429a      	cmp	r2, r3
 8002f92:	f040 80ca 	bne.w	800312a <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002f96:	f7ff f9c1 	bl	800231c <HAL_RCC_GetPCLK1Freq>
        break;
 8002f9a:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002f9c:	bbb0      	cbnz	r0, 800300c <UART_SetConfig+0x178>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	e03a      	b.n	8003018 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fa2:	2b80      	cmp	r3, #128	; 0x80
 8002fa4:	f000 809d 	beq.w	80030e2 <UART_SetConfig+0x24e>
 8002fa8:	2bc0      	cmp	r3, #192	; 0xc0
 8002faa:	f000 80b0 	beq.w	800310e <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fae:	4b7a      	ldr	r3, [pc, #488]	; (8003198 <UART_SetConfig+0x304>)
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1c7      	bne.n	8002f44 <UART_SetConfig+0xb0>
 8002fb4:	e02f      	b.n	8003016 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fb6:	4b7f      	ldr	r3, [pc, #508]	; (80031b4 <UART_SetConfig+0x320>)
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d111      	bne.n	8002fe0 <UART_SetConfig+0x14c>
 8002fbc:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fcc:	f000 8098 	beq.w	8003100 <UART_SetConfig+0x26c>
 8002fd0:	d9dc      	bls.n	8002f8c <UART_SetConfig+0xf8>
 8002fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd6:	f000 8084 	beq.w	80030e2 <UART_SetConfig+0x24e>
 8002fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fde:	e7e4      	b.n	8002faa <UART_SetConfig+0x116>
 8002fe0:	4b6d      	ldr	r3, [pc, #436]	; (8003198 <UART_SetConfig+0x304>)
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d1ae      	bne.n	8002f44 <UART_SetConfig+0xb0>
 8002fe6:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff6:	f000 8083 	beq.w	8003100 <UART_SetConfig+0x26c>
 8002ffa:	d9c7      	bls.n	8002f8c <UART_SetConfig+0xf8>
 8002ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003000:	d06f      	beq.n	80030e2 <UART_SetConfig+0x24e>
 8003002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003006:	e7d0      	b.n	8002faa <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003008:	486b      	ldr	r0, [pc, #428]	; (80031b8 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 800300a:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800300c:	6862      	ldr	r2, [r4, #4]
 800300e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003012:	4281      	cmp	r1, r0
 8003014:	d905      	bls.n	8003022 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8003016:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 8003018:	2300      	movs	r3, #0
 800301a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800301c:	6663      	str	r3, [r4, #100]	; 0x64
}
 800301e:	4610      	mov	r0, r2
 8003020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8003022:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003026:	d8f6      	bhi.n	8003016 <UART_SetConfig+0x182>
        switch (clocksource)
 8003028:	2b08      	cmp	r3, #8
 800302a:	d82e      	bhi.n	800308a <UART_SetConfig+0x1f6>
 800302c:	e8df f003 	tbb	[pc, r3]
 8003030:	2d1c2d05 	.word	0x2d1c2d05
 8003034:	2d2d2d24 	.word	0x2d2d2d24
 8003038:	27          	.byte	0x27
 8003039:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800303a:	f7ff f96f 	bl	800231c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800303e:	6862      	ldr	r2, [r4, #4]
 8003040:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003044:	0856      	lsrs	r6, r2, #1
 8003046:	2700      	movs	r7, #0
 8003048:	fbe1 6700 	umlal	r6, r7, r1, r0
 800304c:	2300      	movs	r3, #0
 800304e:	4630      	mov	r0, r6
 8003050:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003052:	f7fd fe75 	bl	8000d40 <__aeabi_uldivmod>
            break;
 8003056:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003058:	4b58      	ldr	r3, [pc, #352]	; (80031bc <UART_SetConfig+0x328>)
 800305a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800305e:	4299      	cmp	r1, r3
 8003060:	d8d9      	bhi.n	8003016 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	60d8      	str	r0, [r3, #12]
 8003066:	e7d7      	b.n	8003018 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003068:	4855      	ldr	r0, [pc, #340]	; (80031c0 <UART_SetConfig+0x32c>)
 800306a:	0855      	lsrs	r5, r2, #1
 800306c:	2300      	movs	r3, #0
 800306e:	2100      	movs	r1, #0
 8003070:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003072:	f141 0100 	adc.w	r1, r1, #0
 8003076:	e7ec      	b.n	8003052 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003078:	f7fe fe3e 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 800307c:	e7df      	b.n	800303e <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800307e:	0850      	lsrs	r0, r2, #1
 8003080:	2100      	movs	r1, #0
 8003082:	2300      	movs	r3, #0
 8003084:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8003088:	e7f3      	b.n	8003072 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 800308a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800308c:	2000      	movs	r0, #0
 800308e:	e7e3      	b.n	8003058 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003090:	f7ff f956 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8003094:	e04e      	b.n	8003134 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003096:	f7ff f941 	bl	800231c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800309a:	6862      	ldr	r2, [r4, #4]
 800309c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80030a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030a4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80030a6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a8:	f1a3 0010 	sub.w	r0, r3, #16
 80030ac:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80030b0:	4288      	cmp	r0, r1
 80030b2:	d8b0      	bhi.n	8003016 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 80030b4:	6821      	ldr	r1, [r4, #0]
 80030b6:	60cb      	str	r3, [r1, #12]
 80030b8:	e7ae      	b.n	8003018 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80030ba:	f7ff f941 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 80030be:	e7ec      	b.n	800309a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80030c0:	6860      	ldr	r0, [r4, #4]
 80030c2:	0843      	lsrs	r3, r0, #1
 80030c4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80030c8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80030cc:	fbb3 f3f0 	udiv	r3, r3, r0
 80030d0:	e7e8      	b.n	80030a4 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030d2:	f7fe fe11 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 80030d6:	e7e0      	b.n	800309a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80030d8:	6860      	ldr	r0, [r4, #4]
 80030da:	0843      	lsrs	r3, r0, #1
 80030dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030e0:	e7f4      	b.n	80030cc <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 80030e2:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <UART_SetConfig+0x304>)
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d08f      	beq.n	8003008 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030e8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80030ec:	d1e8      	bne.n	80030c0 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80030ee:	6860      	ldr	r0, [r4, #4]
 80030f0:	0843      	lsrs	r3, r0, #1
 80030f2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80030f6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80030fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80030fe:	e01f      	b.n	8003140 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003100:	4b25      	ldr	r3, [pc, #148]	; (8003198 <UART_SetConfig+0x304>)
 8003102:	429a      	cmp	r2, r3
 8003104:	d10b      	bne.n	800311e <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003106:	f7fe fdf7 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
        break;
 800310a:	2304      	movs	r3, #4
 800310c:	e746      	b.n	8002f9c <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 800310e:	4b22      	ldr	r3, [pc, #136]	; (8003198 <UART_SetConfig+0x304>)
 8003110:	429a      	cmp	r2, r3
 8003112:	f47f af25 	bne.w	8002f60 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003116:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 800311a:	2308      	movs	r3, #8
 800311c:	e776      	b.n	800300c <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800311e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003122:	d1d6      	bne.n	80030d2 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003124:	f7fe fde8 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8003128:	e004      	b.n	8003134 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800312a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800312e:	d1b2      	bne.n	8003096 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003130:	f7ff f8f4 	bl	800231c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003134:	6861      	ldr	r1, [r4, #4]
 8003136:	084a      	lsrs	r2, r1, #1
 8003138:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800313c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003140:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003142:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003144:	f1a3 0010 	sub.w	r0, r3, #16
 8003148:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800314c:	4288      	cmp	r0, r1
 800314e:	f63f af62 	bhi.w	8003016 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8003152:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8003156:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003158:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800315c:	430b      	orrs	r3, r1
 800315e:	60c3      	str	r3, [r0, #12]
 8003160:	e75a      	b.n	8003018 <UART_SetConfig+0x184>
    switch (clocksource)
 8003162:	2b08      	cmp	r3, #8
 8003164:	f63f af57 	bhi.w	8003016 <UART_SetConfig+0x182>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <UART_SetConfig+0x2dc>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	08003097 	.word	0x08003097
 8003174:	080030bb 	.word	0x080030bb
 8003178:	080030c1 	.word	0x080030c1
 800317c:	08003017 	.word	0x08003017
 8003180:	080030d3 	.word	0x080030d3
 8003184:	08003017 	.word	0x08003017
 8003188:	08003017 	.word	0x08003017
 800318c:	08003017 	.word	0x08003017
 8003190:	080030d9 	.word	0x080030d9
 8003194:	efff69f3 	.word	0xefff69f3
 8003198:	40008000 	.word	0x40008000
 800319c:	40013800 	.word	0x40013800
 80031a0:	0800a8c0 	.word	0x0800a8c0
 80031a4:	40004400 	.word	0x40004400
 80031a8:	0800a8c4 	.word	0x0800a8c4
 80031ac:	40004800 	.word	0x40004800
 80031b0:	40004c00 	.word	0x40004c00
 80031b4:	40005000 	.word	0x40005000
 80031b8:	00f42400 	.word	0x00f42400
 80031bc:	000ffcff 	.word	0x000ffcff
 80031c0:	f4240000 	.word	0xf4240000

080031c4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031c6:	07da      	lsls	r2, r3, #31
{
 80031c8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031ca:	d506      	bpl.n	80031da <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031cc:	6801      	ldr	r1, [r0, #0]
 80031ce:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80031d0:	684a      	ldr	r2, [r1, #4]
 80031d2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80031d6:	4322      	orrs	r2, r4
 80031d8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031da:	079c      	lsls	r4, r3, #30
 80031dc:	d506      	bpl.n	80031ec <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031de:	6801      	ldr	r1, [r0, #0]
 80031e0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80031e2:	684a      	ldr	r2, [r1, #4]
 80031e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80031e8:	4322      	orrs	r2, r4
 80031ea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031ec:	0759      	lsls	r1, r3, #29
 80031ee:	d506      	bpl.n	80031fe <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031f0:	6801      	ldr	r1, [r0, #0]
 80031f2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80031f4:	684a      	ldr	r2, [r1, #4]
 80031f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031fa:	4322      	orrs	r2, r4
 80031fc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031fe:	071a      	lsls	r2, r3, #28
 8003200:	d506      	bpl.n	8003210 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003202:	6801      	ldr	r1, [r0, #0]
 8003204:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003206:	684a      	ldr	r2, [r1, #4]
 8003208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800320c:	4322      	orrs	r2, r4
 800320e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003210:	06dc      	lsls	r4, r3, #27
 8003212:	d506      	bpl.n	8003222 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003214:	6801      	ldr	r1, [r0, #0]
 8003216:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003218:	688a      	ldr	r2, [r1, #8]
 800321a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800321e:	4322      	orrs	r2, r4
 8003220:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003222:	0699      	lsls	r1, r3, #26
 8003224:	d506      	bpl.n	8003234 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003226:	6801      	ldr	r1, [r0, #0]
 8003228:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800322a:	688a      	ldr	r2, [r1, #8]
 800322c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003230:	4322      	orrs	r2, r4
 8003232:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003234:	065a      	lsls	r2, r3, #25
 8003236:	d50f      	bpl.n	8003258 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003238:	6801      	ldr	r1, [r0, #0]
 800323a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800323c:	684a      	ldr	r2, [r1, #4]
 800323e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003242:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003244:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003248:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800324a:	d105      	bne.n	8003258 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800324c:	684a      	ldr	r2, [r1, #4]
 800324e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003250:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003254:	4322      	orrs	r2, r4
 8003256:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	d506      	bpl.n	800326a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800325c:	6802      	ldr	r2, [r0, #0]
 800325e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003260:	6853      	ldr	r3, [r2, #4]
 8003262:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003266:	430b      	orrs	r3, r1
 8003268:	6053      	str	r3, [r2, #4]
 800326a:	bd10      	pop	{r4, pc}

0800326c <UART_WaitOnFlagUntilTimeout>:
{
 800326c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003270:	9d06      	ldr	r5, [sp, #24]
 8003272:	4604      	mov	r4, r0
 8003274:	460f      	mov	r7, r1
 8003276:	4616      	mov	r6, r2
 8003278:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327a:	6821      	ldr	r1, [r4, #0]
 800327c:	69ca      	ldr	r2, [r1, #28]
 800327e:	ea37 0302 	bics.w	r3, r7, r2
 8003282:	bf0c      	ite	eq
 8003284:	2201      	moveq	r2, #1
 8003286:	2200      	movne	r2, #0
 8003288:	42b2      	cmp	r2, r6
 800328a:	d002      	beq.n	8003292 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800328c:	2000      	movs	r0, #0
}
 800328e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003292:	1c6b      	adds	r3, r5, #1
 8003294:	d0f2      	beq.n	800327c <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003296:	b99d      	cbnz	r5, 80032c0 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80032aa:	2320      	movs	r3, #32
 80032ac:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80032b0:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80032b4:	2300      	movs	r3, #0
 80032b6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80032ba:	2003      	movs	r0, #3
 80032bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032c0:	f7fd fefc 	bl	80010bc <HAL_GetTick>
 80032c4:	eba0 0008 	sub.w	r0, r0, r8
 80032c8:	4285      	cmp	r5, r0
 80032ca:	d2d6      	bcs.n	800327a <UART_WaitOnFlagUntilTimeout+0xe>
 80032cc:	e7e4      	b.n	8003298 <UART_WaitOnFlagUntilTimeout+0x2c>

080032ce <HAL_UART_Transmit>:
{
 80032ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80032d2:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80032d4:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80032d8:	2b20      	cmp	r3, #32
{
 80032da:	4604      	mov	r4, r0
 80032dc:	460d      	mov	r5, r1
 80032de:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80032e0:	d14a      	bne.n	8003378 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 80032e2:	2900      	cmp	r1, #0
 80032e4:	d046      	beq.n	8003374 <HAL_UART_Transmit+0xa6>
 80032e6:	2a00      	cmp	r2, #0
 80032e8:	d044      	beq.n	8003374 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80032ea:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d042      	beq.n	8003378 <HAL_UART_Transmit+0xaa>
 80032f2:	2301      	movs	r3, #1
 80032f4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032fc:	2321      	movs	r3, #33	; 0x21
 80032fe:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8003302:	f7fd fedb 	bl	80010bc <HAL_GetTick>
    huart->TxXferSize  = Size;
 8003306:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800330a:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800330c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003310:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003314:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8003316:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003318:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 800331a:	b952      	cbnz	r2, 8003332 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800331c:	2140      	movs	r1, #64	; 0x40
 800331e:	4620      	mov	r0, r4
 8003320:	f7ff ffa4 	bl	800326c <UART_WaitOnFlagUntilTimeout>
 8003324:	b958      	cbnz	r0, 800333e <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8003326:	2320      	movs	r3, #32
 8003328:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 800332c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8003330:	e006      	b.n	8003340 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003332:	2200      	movs	r2, #0
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	4620      	mov	r0, r4
 8003338:	f7ff ff98 	bl	800326c <UART_WaitOnFlagUntilTimeout>
 800333c:	b118      	cbz	r0, 8003346 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 800333e:	2003      	movs	r0, #3
}
 8003340:	b002      	add	sp, #8
 8003342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003346:	68a3      	ldr	r3, [r4, #8]
 8003348:	6822      	ldr	r2, [r4, #0]
 800334a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334e:	d10d      	bne.n	800336c <HAL_UART_Transmit+0x9e>
 8003350:	6923      	ldr	r3, [r4, #16]
 8003352:	b95b      	cbnz	r3, 800336c <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003354:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335c:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800335e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003362:	3b01      	subs	r3, #1
 8003364:	b29b      	uxth	r3, r3
 8003366:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800336a:	e7d1      	b.n	8003310 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800336c:	782b      	ldrb	r3, [r5, #0]
 800336e:	8513      	strh	r3, [r2, #40]	; 0x28
 8003370:	3501      	adds	r5, #1
 8003372:	e7f4      	b.n	800335e <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8003374:	2001      	movs	r0, #1
 8003376:	e7e3      	b.n	8003340 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8003378:	2002      	movs	r0, #2
 800337a:	e7e1      	b.n	8003340 <HAL_UART_Transmit+0x72>

0800337c <UART_CheckIdleState>:
{
 800337c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800337e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	2600      	movs	r6, #0
 8003382:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8003384:	f7fd fe9a 	bl	80010bc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800338e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003390:	d417      	bmi.n	80033c2 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	075b      	lsls	r3, r3, #29
 8003398:	d50a      	bpl.n	80033b0 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800339a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2200      	movs	r2, #0
 80033a2:	462b      	mov	r3, r5
 80033a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033a8:	4620      	mov	r0, r4
 80033aa:	f7ff ff5f 	bl	800326c <UART_WaitOnFlagUntilTimeout>
 80033ae:	b9a0      	cbnz	r0, 80033da <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 80033b0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80033b2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80033b4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 80033b8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80033bc:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 80033c0:	e00c      	b.n	80033dc <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	4632      	mov	r2, r6
 80033ca:	4603      	mov	r3, r0
 80033cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033d0:	4620      	mov	r0, r4
 80033d2:	f7ff ff4b 	bl	800326c <UART_WaitOnFlagUntilTimeout>
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d0db      	beq.n	8003392 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80033da:	2003      	movs	r0, #3
}
 80033dc:	b002      	add	sp, #8
 80033de:	bd70      	pop	{r4, r5, r6, pc}

080033e0 <HAL_UART_Init>:
{
 80033e0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80033e2:	4604      	mov	r4, r0
 80033e4:	b360      	cbz	r0, 8003440 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80033e6:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80033ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033ee:	b91b      	cbnz	r3, 80033f8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80033f0:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80033f4:	f001 fa14 	bl	8004820 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80033f8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80033fa:	2324      	movs	r3, #36	; 0x24
 80033fc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8003400:	6813      	ldr	r3, [r2, #0]
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003408:	4620      	mov	r0, r4
 800340a:	f7ff fd43 	bl	8002e94 <UART_SetConfig>
 800340e:	2801      	cmp	r0, #1
 8003410:	d016      	beq.n	8003440 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003412:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003414:	b113      	cbz	r3, 800341c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003416:	4620      	mov	r0, r4
 8003418:	f7ff fed4 	bl	80031c4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003424:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800342c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003434:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003436:	601a      	str	r2, [r3, #0]
}
 8003438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800343c:	f7ff bf9e 	b.w	800337c <UART_CheckIdleState>
}
 8003440:	2001      	movs	r0, #1
 8003442:	bd10      	pop	{r4, pc}

08003444 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003444:	4770      	bx	lr
	...

08003448 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003448:	b510      	push	{r4, lr}
  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac1.Instance = DAC1;
 800344a:	4815      	ldr	r0, [pc, #84]	; (80034a0 <MX_DAC1_Init+0x58>)
 800344c:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <MX_DAC1_Init+0x5c>)
 800344e:	6003      	str	r3, [r0, #0]
{
 8003450:	b08a      	sub	sp, #40	; 0x28
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003452:	f7fd fec0 	bl	80011d6 <HAL_DAC_Init>
 8003456:	b118      	cbz	r0, 8003460 <MX_DAC1_Init+0x18>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003458:	2140      	movs	r1, #64	; 0x40
 800345a:	4813      	ldr	r0, [pc, #76]	; (80034a8 <MX_DAC1_Init+0x60>)
 800345c:	f001 f8e8 	bl	8004630 <_Error_Handler>
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003460:	2400      	movs	r4, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8003462:	2304      	movs	r3, #4
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003464:	4622      	mov	r2, r4
 8003466:	eb0d 0103 	add.w	r1, sp, r3
 800346a:	480d      	ldr	r0, [pc, #52]	; (80034a0 <MX_DAC1_Init+0x58>)
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800346c:	9401      	str	r4, [sp, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800346e:	9302      	str	r3, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003470:	9403      	str	r4, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003472:	9404      	str	r4, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003474:	9405      	str	r4, [sp, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003476:	f7fd ff73 	bl	8001360 <HAL_DAC_ConfigChannel>
 800347a:	b118      	cbz	r0, 8003484 <MX_DAC1_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800347c:	214c      	movs	r1, #76	; 0x4c
 800347e:	480a      	ldr	r0, [pc, #40]	; (80034a8 <MX_DAC1_Init+0x60>)
 8003480:	f001 f8d6 	bl	8004630 <_Error_Handler>
  }

    /**DAC channel OUT2 config 
    */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003484:	2210      	movs	r2, #16
 8003486:	a901      	add	r1, sp, #4
 8003488:	4805      	ldr	r0, [pc, #20]	; (80034a0 <MX_DAC1_Init+0x58>)
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800348a:	9404      	str	r4, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800348c:	f7fd ff68 	bl	8001360 <HAL_DAC_ConfigChannel>
 8003490:	b118      	cbz	r0, 800349a <MX_DAC1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003492:	2154      	movs	r1, #84	; 0x54
 8003494:	4804      	ldr	r0, [pc, #16]	; (80034a8 <MX_DAC1_Init+0x60>)
 8003496:	f001 f8cb 	bl	8004630 <_Error_Handler>
  }

}
 800349a:	b00a      	add	sp, #40	; 0x28
 800349c:	bd10      	pop	{r4, pc}
 800349e:	bf00      	nop
 80034a0:	200134a0 	.word	0x200134a0
 80034a4:	40007400 	.word	0x40007400
 80034a8:	0800a8d1 	.word	0x0800a8d1

080034ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80034ac:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(dacHandle->Instance==DAC1)
 80034ae:	6802      	ldr	r2, [r0, #0]
 80034b0:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_DAC_MspInit+0xb4>)
 80034b2:	429a      	cmp	r2, r3
{
 80034b4:	b086      	sub	sp, #24
 80034b6:	4605      	mov	r5, r0
  if(dacHandle->Instance==DAC1)
 80034b8:	d150      	bne.n	800355c <HAL_DAC_MspInit+0xb0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80034ba:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2600      	movs	r6, #0
    __HAL_RCC_DAC1_CLK_ENABLE();
 80034c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80034c2:	4c28      	ldr	r4, [pc, #160]	; (8003564 <HAL_DAC_MspInit+0xb8>)
    __HAL_RCC_DAC1_CLK_ENABLE();
 80034c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80034c8:	659a      	str	r2, [r3, #88]	; 0x58
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	9603      	str	r6, [sp, #12]
    __HAL_RCC_DAC1_CLK_ENABLE();
 80034ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80034d6:	2330      	movs	r3, #48	; 0x30
 80034d8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034de:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034e2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	f7fe faa0 	bl	8001a28 <HAL_GPIO_Init>
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034e8:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <HAL_DAC_MspInit+0xbc>)
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ea:	60e6      	str	r6, [r4, #12]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034ec:	2306      	movs	r3, #6
 80034ee:	f04f 0c10 	mov.w	ip, #16
 80034f2:	e884 100c 	stmia.w	r4, {r2, r3, ip}
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	6123      	str	r3, [r4, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034fe:	6163      	str	r3, [r4, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003504:	61a3      	str	r3, [r4, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003506:	4620      	mov	r0, r4
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8003508:	2320      	movs	r3, #32
 800350a:	61e3      	str	r3, [r4, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800350c:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800350e:	f7fe f979 	bl	8001804 <HAL_DMA_Init>
 8003512:	b118      	cbz	r0, 800351c <HAL_DAC_MspInit+0x70>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003514:	217b      	movs	r1, #123	; 0x7b
 8003516:	4815      	ldr	r0, [pc, #84]	; (800356c <HAL_DAC_MspInit+0xc0>)
 8003518:	f001 f88a 	bl	8004630 <_Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 800351c:	60ac      	str	r4, [r5, #8]
 800351e:	62a5      	str	r5, [r4, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel5;
 8003520:	4c13      	ldr	r4, [pc, #76]	; (8003570 <HAL_DAC_MspInit+0xc4>)
    hdma_dac_ch2.Init.Request = DMA_REQUEST_3;
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003522:	4b14      	ldr	r3, [pc, #80]	; (8003574 <HAL_DAC_MspInit+0xc8>)
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003524:	2280      	movs	r2, #128	; 0x80
 8003526:	6122      	str	r2, [r4, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003528:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800352c:	2603      	movs	r6, #3
 800352e:	f04f 0e10 	mov.w	lr, #16
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003532:	6162      	str	r2, [r4, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003534:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003538:	e884 4048 	stmia.w	r4, {r3, r6, lr}
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800353c:	61a2      	str	r2, [r4, #24]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800353e:	2300      	movs	r3, #0
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8003540:	2220      	movs	r2, #32
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8003542:	4620      	mov	r0, r4
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003544:	60e3      	str	r3, [r4, #12]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8003546:	61e2      	str	r2, [r4, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003548:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 800354a:	f7fe f95b 	bl	8001804 <HAL_DMA_Init>
 800354e:	b118      	cbz	r0, 8003558 <HAL_DAC_MspInit+0xac>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003550:	218c      	movs	r1, #140	; 0x8c
 8003552:	4806      	ldr	r0, [pc, #24]	; (800356c <HAL_DAC_MspInit+0xc0>)
 8003554:	f001 f86c 	bl	8004630 <_Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 8003558:	60ec      	str	r4, [r5, #12]
 800355a:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800355c:	b006      	add	sp, #24
 800355e:	bd70      	pop	{r4, r5, r6, pc}
 8003560:	40007400 	.word	0x40007400
 8003564:	200134b4 	.word	0x200134b4
 8003568:	40020030 	.word	0x40020030
 800356c:	0800a8d1 	.word	0x0800a8d1
 8003570:	200134fc 	.word	0x200134fc
 8003574:	40020458 	.word	0x40020458

08003578 <MX_DFSDM1_Init>:

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8003578:	481f      	ldr	r0, [pc, #124]	; (80035f8 <MX_DFSDM1_Init+0x80>)
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800357a:	4a20      	ldr	r2, [pc, #128]	; (80035fc <MX_DFSDM1_Init+0x84>)
{
 800357c:	b508      	push	{r3, lr}
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800357e:	2300      	movs	r3, #0
 8003580:	e880 000c 	stmia.w	r0, {r2, r3}
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8003584:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8003588:	2301      	movs	r3, #1
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800358a:	61c2      	str	r2, [r0, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 800358c:	2240      	movs	r2, #64	; 0x40
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800358e:	7203      	strb	r3, [r0, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8003590:	7243      	strb	r3, [r0, #9]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8003592:	6202      	str	r2, [r0, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8003594:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8003596:	f7fe f855 	bl	8001644 <HAL_DFSDM_FilterInit>
 800359a:	b118      	cbz	r0, 80035a4 <MX_DFSDM1_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800359c:	2143      	movs	r1, #67	; 0x43
 800359e:	4818      	ldr	r0, [pc, #96]	; (8003600 <MX_DFSDM1_Init+0x88>)
 80035a0:	f001 f846 	bl	8004630 <_Error_Handler>
  }

  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80035a4:	4817      	ldr	r0, [pc, #92]	; (8003604 <MX_DFSDM1_Init+0x8c>)
 80035a6:	4b18      	ldr	r3, [pc, #96]	; (8003608 <MX_DFSDM1_Init+0x90>)
 80035a8:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel2.Init.OutputClock.Divider = 64;
 80035aa:	2240      	movs	r2, #64	; 0x40
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel2.Init.OutputClock.Divider = 64;
 80035b0:	60c2      	str	r2, [r0, #12]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80035b2:	2300      	movs	r3, #0
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80035b4:	2204      	movs	r2, #4
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80035b6:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80035b8:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80035ba:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80035bc:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80035be:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80035c0:	6202      	str	r2, [r0, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80035c2:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 10;
 80035c4:	220a      	movs	r2, #10
  hdfsdm1_channel2.Init.Offset = 0;
 80035c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 3;
 80035c8:	2303      	movs	r3, #3
  hdfsdm1_channel2.Init.Awd.Oversampling = 10;
 80035ca:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel2.Init.RightBitShift = 3;
 80035cc:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80035ce:	f7fd ffc5 	bl	800155c <HAL_DFSDM_ChannelInit>
 80035d2:	b118      	cbz	r0, 80035dc <MX_DFSDM1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 80035d4:	2155      	movs	r1, #85	; 0x55
 80035d6:	480a      	ldr	r0, [pc, #40]	; (8003600 <MX_DFSDM1_Init+0x88>)
 80035d8:	f001 f82a 	bl	8004630 <_Error_Handler>
  }

  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80035dc:	2201      	movs	r2, #1
 80035de:	490b      	ldr	r1, [pc, #44]	; (800360c <MX_DFSDM1_Init+0x94>)
 80035e0:	4805      	ldr	r0, [pc, #20]	; (80035f8 <MX_DFSDM1_Init+0x80>)
 80035e2:	f7fe f8a1 	bl	8001728 <HAL_DFSDM_FilterConfigRegChannel>
 80035e6:	b128      	cbz	r0, 80035f4 <MX_DFSDM1_Init+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80035e8:	215a      	movs	r1, #90	; 0x5a
 80035ea:	4805      	ldr	r0, [pc, #20]	; (8003600 <MX_DFSDM1_Init+0x88>)
  }

}
 80035ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80035f0:	f001 b81e 	b.w	8004630 <_Error_Handler>
 80035f4:	bd08      	pop	{r3, pc}
 80035f6:	bf00      	nop
 80035f8:	20013544 	.word	0x20013544
 80035fc:	40016100 	.word	0x40016100
 8003600:	0800a8de 	.word	0x0800a8de
 8003604:	200135e0 	.word	0x200135e0
 8003608:	40016040 	.word	0x40016040
 800360c:	00020004 	.word	0x00020004

08003610 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8003610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 8003614:	4c2d      	ldr	r4, [pc, #180]	; (80036cc <HAL_DFSDM_FilterMspInit+0xbc>)
 8003616:	6823      	ldr	r3, [r4, #0]
{
 8003618:	b086      	sub	sp, #24
 800361a:	4605      	mov	r5, r0
  if(DFSDM1_Init == 0)
 800361c:	2b00      	cmp	r3, #0
 800361e:	d12e      	bne.n	800367e <HAL_DFSDM_FilterMspInit+0x6e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003620:	4a2b      	ldr	r2, [pc, #172]	; (80036d0 <HAL_DFSDM_FilterMspInit+0xc0>)
 8003622:	6813      	ldr	r3, [r2, #0]
 8003624:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003626:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003628:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800362a:	d109      	bne.n	8003640 <HAL_DFSDM_FilterMspInit+0x30>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_DFSDM_FilterMspInit+0xc4>)
 800362e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003630:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003634:	661a      	str	r2, [r3, #96]	; 0x60
 8003636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003640:	4825      	ldr	r0, [pc, #148]	; (80036d8 <HAL_DFSDM_FilterMspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003642:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003646:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364a:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800364e:	2706      	movs	r7, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003650:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003652:	f8cd 8008 	str.w	r8, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003658:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800365a:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800365c:	f7fe f9e4 	bl	8001a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003660:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003664:	a901      	add	r1, sp, #4
 8003666:	481d      	ldr	r0, [pc, #116]	; (80036dc <HAL_DFSDM_FilterMspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003668:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366a:	f8cd 8008 	str.w	r8, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003670:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003672:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003674:	f7fe f9d8 	bl	8001a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	3301      	adds	r3, #1
 800367c:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800367e:	682a      	ldr	r2, [r5, #0]
 8003680:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <HAL_DFSDM_FilterMspInit+0xd0>)
 8003682:	429a      	cmp	r2, r3
 8003684:	d11e      	bne.n	80036c4 <HAL_DFSDM_FilterMspInit+0xb4>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003686:	4c17      	ldr	r4, [pc, #92]	; (80036e4 <HAL_DFSDM_FilterMspInit+0xd4>)
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003688:	2280      	movs	r2, #128	; 0x80
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 800368a:	f503 431f 	add.w	r3, r3, #40704	; 0x9f00
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800368e:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003690:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003694:	3344      	adds	r3, #68	; 0x44
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003696:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003698:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 800369c:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800369e:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80036a0:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80036a2:	2220      	movs	r2, #32
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80036a4:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80036a6:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036a8:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80036aa:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80036ac:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80036ae:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80036b0:	f7fe f8a8 	bl	8001804 <HAL_DMA_Init>
 80036b4:	b118      	cbz	r0, 80036be <HAL_DFSDM_FilterMspInit+0xae>
    {
      _Error_Handler(__FILE__, __LINE__);
 80036b6:	2198      	movs	r1, #152	; 0x98
 80036b8:	480b      	ldr	r0, [pc, #44]	; (80036e8 <HAL_DFSDM_FilterMspInit+0xd8>)
 80036ba:	f000 ffb9 	bl	8004630 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 80036be:	62a5      	str	r5, [r4, #40]	; 0x28
 80036c0:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 80036c2:	62ac      	str	r4, [r5, #40]	; 0x28
  }

}
 80036c4:	b006      	add	sp, #24
 80036c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036ca:	bf00      	nop
 80036cc:	20000224 	.word	0x20000224
 80036d0:	20000228 	.word	0x20000228
 80036d4:	40021000 	.word	0x40021000
 80036d8:	48000800 	.word	0x48000800
 80036dc:	48000400 	.word	0x48000400
 80036e0:	40016100 	.word	0x40016100
 80036e4:	20013598 	.word	0x20013598
 80036e8:	0800a8de 	.word	0x0800a8de

080036ec <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80036ec:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 80036ee:	4c19      	ldr	r4, [pc, #100]	; (8003754 <HAL_DFSDM_ChannelMspInit+0x68>)
 80036f0:	6823      	ldr	r3, [r4, #0]
{
 80036f2:	b087      	sub	sp, #28
  if(DFSDM1_Init == 0)
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d12b      	bne.n	8003750 <HAL_DFSDM_ChannelMspInit+0x64>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80036f8:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_DFSDM_ChannelMspInit+0x6c>)
 80036fa:	6813      	ldr	r3, [r2, #0]
 80036fc:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80036fe:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003700:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003702:	d109      	bne.n	8003718 <HAL_DFSDM_ChannelMspInit+0x2c>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003704:	4b15      	ldr	r3, [pc, #84]	; (800375c <HAL_DFSDM_ChannelMspInit+0x70>)
 8003706:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003708:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800370c:	661a      	str	r2, [r3, #96]	; 0x60
 800370e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003718:	4811      	ldr	r0, [pc, #68]	; (8003760 <HAL_DFSDM_ChannelMspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800371a:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800371e:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003724:	2606      	movs	r6, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003726:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003728:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800372e:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003730:	f7fe f97a 	bl	8001a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003734:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003738:	a901      	add	r1, sp, #4
 800373a:	480a      	ldr	r0, [pc, #40]	; (8003764 <HAL_DFSDM_ChannelMspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800373c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373e:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003742:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003744:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003746:	f7fe f96f 	bl	8001a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	3301      	adds	r3, #1
 800374e:	6023      	str	r3, [r4, #0]
  }
}
 8003750:	b007      	add	sp, #28
 8003752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003754:	20000224 	.word	0x20000224
 8003758:	20000228 	.word	0x20000228
 800375c:	40021000 	.word	0x40021000
 8003760:	48000800 	.word	0x48000800
 8003764:	48000400 	.word	0x48000400

08003768 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003768:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <MX_DMA_Init+0x70>)
{
 800376a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800376c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	649a      	str	r2, [r3, #72]	; 0x48
 8003774:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003776:	f002 0201 	and.w	r2, r2, #1
 800377a:	9200      	str	r2, [sp, #0]
 800377c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800377e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003780:	f042 0202 	orr.w	r2, r2, #2
 8003784:	649a      	str	r2, [r3, #72]	; 0x48
 8003786:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003788:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 800378a:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800378e:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003790:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003792:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003794:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003796:	f7fd fcb7 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800379a:	200d      	movs	r0, #13
 800379c:	f7fd fce8 	bl	8001170 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80037a0:	2200      	movs	r2, #0
 80037a2:	4611      	mov	r1, r2
 80037a4:	200e      	movs	r0, #14
 80037a6:	f7fd fcaf 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80037aa:	200e      	movs	r0, #14
 80037ac:	f7fd fce0 	bl	8001170 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80037b0:	2200      	movs	r2, #0
 80037b2:	4611      	mov	r1, r2
 80037b4:	2011      	movs	r0, #17
 80037b6:	f7fd fca7 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80037ba:	2011      	movs	r0, #17
 80037bc:	f7fd fcd8 	bl	8001170 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	4611      	mov	r1, r2
 80037c4:	203c      	movs	r0, #60	; 0x3c
 80037c6:	f7fd fc9f 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80037ca:	203c      	movs	r0, #60	; 0x3c
 80037cc:	f7fd fcd0 	bl	8001170 <HAL_NVIC_EnableIRQ>

}
 80037d0:	b003      	add	sp, #12
 80037d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80037d6:	bf00      	nop
 80037d8:	40021000 	.word	0x40021000

080037dc <hann>:

// Half sample shifter
float32_t half_sample_shifter[NUM_FILTERS * 2] = { 0.0f };

// hann window generation
void hann(int num) {
 80037dc:	b570      	push	{r4, r5, r6, lr}
  arm_fill_f32(0.0f, hann_window, NN);
 80037de:	f44f 7100 	mov.w	r1, #512	; 0x200
void hann(int num) {
 80037e2:	ed2d 8b02 	vpush	{d8}
 80037e6:	4605      	mov	r5, r0
  arm_fill_f32(0.0f, hann_window, NN);
 80037e8:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8003834 <hann+0x58>
 80037ec:	4812      	ldr	r0, [pc, #72]	; (8003838 <hann+0x5c>)
 80037ee:	4e12      	ldr	r6, [pc, #72]	; (8003838 <hann+0x5c>)
 80037f0:	f001 f88a 	bl	8004908 <arm_fill_f32>
  float32_t scale = 2.0f * PI / (float32_t) num;
 80037f4:	ee07 5a90 	vmov	s15, r5
 80037f8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800383c <hann+0x60>
 80037fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int n = 0; n < num; n++) {
 8003800:	2400      	movs	r4, #0
  float32_t scale = 2.0f * PI / (float32_t) num;
 8003802:	eec7 8a27 	vdiv.f32	s17, s14, s15
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 8003806:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
  for (int n = 0; n < num; n++) {
 800380a:	42ac      	cmp	r4, r5
 800380c:	db02      	blt.n	8003814 <hann+0x38>
  }
}
 800380e:	ecbd 8b02 	vpop	{d8}
 8003812:	bd70      	pop	{r4, r5, r6, pc}
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 8003814:	ee07 4a90 	vmov	s15, r4
 8003818:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  for (int n = 0; n < num; n++) {
 800381c:	3401      	adds	r4, #1
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 800381e:	ee20 0a28 	vmul.f32	s0, s0, s17
 8003822:	f002 fa2d 	bl	8005c80 <arm_cos_f32>
 8003826:	eef0 7a48 	vmov.f32	s15, s16
 800382a:	eee0 7a48 	vfms.f32	s15, s0, s16
 800382e:	ece6 7a01 	vstmia	r6!, {s15}
 8003832:	e7ea      	b.n	800380a <hann+0x2e>
 8003834:	00000000 	.word	0x00000000
 8003838:	20010470 	.word	0x20010470
 800383c:	40c90fdb 	.word	0x40c90fdb

08003840 <log10_approx>:
 *
 *  reference: https://community.arm.com/tools/f/discussions/4292/cmsis-dsp-new-functionality-proposal
 */
const float32_t C[4] = {1.23149591368684f, -4.11852516267426f, 6.02197014179219f, -3.13396450166353f};
const float32_t LOG10_2 = log10(2.0f);
float32_t log10_approx(float32_t x) {
 8003840:	b507      	push	{r0, r1, r2, lr}
  float32_t f;
  int e;
  f = frexpf(fabsf(x), &e);
 8003842:	eeb0 0ac0 	vabs.f32	s0, s0
 8003846:	a801      	add	r0, sp, #4
 8003848:	f003 fb58 	bl	8006efc <frexpf>
  return LOG10_2 * (C[0]*f*f*f + C[1]*f*f + C[2]*f + C[3] + e);
 800384c:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003894 <log10_approx+0x54>
 8003850:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003898 <log10_approx+0x58>
 8003854:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003858:	ee20 7a07 	vmul.f32	s14, s0, s14
 800385c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003860:	ee27 7a00 	vmul.f32	s14, s14, s0
 8003864:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003868:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800389c <log10_approx+0x5c>
 800386c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003870:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80038a0 <log10_approx+0x60>
 8003874:	ed9d 7a01 	vldr	s14, [sp, #4]
 8003878:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800387c:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8003880:	ee77 7a80 	vadd.f32	s15, s15, s0
}
 8003884:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80038a4 <log10_approx+0x64>
 8003888:	ee27 0a80 	vmul.f32	s0, s15, s0
 800388c:	b003      	add	sp, #12
 800388e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003892:	bf00      	nop
 8003894:	c083caf5 	.word	0xc083caf5
 8003898:	3f9da1a8 	.word	0x3f9da1a8
 800389c:	40c0b3fb 	.word	0x40c0b3fb
 80038a0:	404892e0 	.word	0x404892e0
 80038a4:	3e9a209b 	.word	0x3e9a209b

080038a8 <hz2mel>:

float32_t hz2mel(float32_t hz) {
  return 2595.0f * log10(hz/700.0f + 1.0f);
 80038a8:	eddf 7a11 	vldr	s15, [pc, #68]	; 80038f0 <hz2mel+0x48>
 80038ac:	ee80 0a27 	vdiv.f32	s0, s0, s15
float32_t hz2mel(float32_t hz) {
 80038b0:	b508      	push	{r3, lr}
  return 2595.0f * log10(hz/700.0f + 1.0f);
 80038b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80038b6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80038ba:	ee17 0a90 	vmov	r0, s15
 80038be:	f7fc fea3 	bl	8000608 <__aeabi_f2d>
 80038c2:	ec41 0b10 	vmov	d0, r0, r1
 80038c6:	f005 fbcb 	bl	8009060 <log10>
 80038ca:	a307      	add	r3, pc, #28	; (adr r3, 80038e8 <hz2mel+0x40>)
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	ec51 0b10 	vmov	r0, r1, d0
 80038d4:	f7fc feec 	bl	80006b0 <__aeabi_dmul>
 80038d8:	f7fd f9e2 	bl	8000ca0 <__aeabi_d2f>
}
 80038dc:	ee00 0a10 	vmov	s0, r0
 80038e0:	bd08      	pop	{r3, pc}
 80038e2:	bf00      	nop
 80038e4:	f3af 8000 	nop.w
 80038e8:	00000000 	.word	0x00000000
 80038ec:	40a44600 	.word	0x40a44600
 80038f0:	442f0000 	.word	0x442f0000
 80038f4:	00000000 	.word	0x00000000

080038f8 <mel2hz>:

float32_t mel2hz(float32_t mel) {
  return 700.0 * (pow(10.0, (mel/2595.0f)) - 1.0f);
 80038f8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003940 <mel2hz+0x48>
 80038fc:	ee80 7a27 	vdiv.f32	s14, s0, s15
float32_t mel2hz(float32_t mel) {
 8003900:	b508      	push	{r3, lr}
  return 700.0 * (pow(10.0, (mel/2595.0f)) - 1.0f);
 8003902:	ee17 0a10 	vmov	r0, s14
 8003906:	f7fc fe7f 	bl	8000608 <__aeabi_f2d>
 800390a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8003938 <mel2hz+0x40>
 800390e:	ec41 0b11 	vmov	d1, r0, r1
 8003912:	f005 fc25 	bl	8009160 <pow>
 8003916:	2200      	movs	r2, #0
 8003918:	ec51 0b10 	vmov	r0, r1, d0
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <mel2hz+0x4c>)
 800391e:	f7fc fd13 	bl	8000348 <__aeabi_dsub>
 8003922:	2200      	movs	r2, #0
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <mel2hz+0x50>)
 8003926:	f7fc fec3 	bl	80006b0 <__aeabi_dmul>
 800392a:	f7fd f9b9 	bl	8000ca0 <__aeabi_d2f>
}
 800392e:	ee00 0a10 	vmov	s0, r0
 8003932:	bd08      	pop	{r3, pc}
 8003934:	f3af 8000 	nop.w
 8003938:	00000000 	.word	0x00000000
 800393c:	40240000 	.word	0x40240000
 8003940:	45223000 	.word	0x45223000
 8003944:	3ff00000 	.word	0x3ff00000
 8003948:	4085e000 	.word	0x4085e000

0800394c <n2hz>:

float32_t n2hz(uint32_t n) {
  return (float32_t)n/(float32_t)NN * (float32_t)(fs/2);
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <n2hz+0x1c>)
 800394e:	ee00 0a10 	vmov	s0, r0
 8003952:	edd3 7a00 	vldr	s15, [r3]
 8003956:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800395a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800395e:	eebb 0aeb 	vcvt.f32.u32	s0, s0, #9
}
 8003962:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003966:	4770      	bx	lr
 8003968:	2001032c 	.word	0x2001032c

0800396c <clear_filterbank>:

void clear_filterbank(void) {
 800396c:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int m = 0; m < NUM_FILTERS_L + 2; m++) {
 800396e:	2300      	movs	r3, #0
 8003970:	480b      	ldr	r0, [pc, #44]	; (80039a0 <clear_filterbank+0x34>)
 8003972:	4d0c      	ldr	r5, [pc, #48]	; (80039a4 <clear_filterbank+0x38>)
    for (int n = 0; n < NN/8; n++) {
      filterbank[m][n] = 0.0f;
    }
    hz_freqs[m] = 0.0f;
    hz_freqs_n[m] = 0;
 8003974:	4e0c      	ldr	r6, [pc, #48]	; (80039a8 <clear_filterbank+0x3c>)
      filterbank[m][n] = 0.0f;
 8003976:	2400      	movs	r4, #0
    hz_freqs_n[m] = 0;
 8003978:	461f      	mov	r7, r3
  for (int m = 0; m < NUM_FILTERS_L + 2; m++) {
 800397a:	f240 1e01 	movw	lr, #257	; 0x101
 800397e:	eb05 2103 	add.w	r1, r5, r3, lsl #8
void clear_filterbank(void) {
 8003982:	2200      	movs	r2, #0
    for (int n = 0; n < NN/8; n++) {
 8003984:	3201      	adds	r2, #1
 8003986:	2a40      	cmp	r2, #64	; 0x40
      filterbank[m][n] = 0.0f;
 8003988:	f841 4b04 	str.w	r4, [r1], #4
    for (int n = 0; n < NN/8; n++) {
 800398c:	d1fa      	bne.n	8003984 <clear_filterbank+0x18>
    hz_freqs_n[m] = 0;
 800398e:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
  for (int m = 0; m < NUM_FILTERS_L + 2; m++) {
 8003992:	3301      	adds	r3, #1
 8003994:	4573      	cmp	r3, lr
    hz_freqs[m] = 0.0f;
 8003996:	f840 4b04 	str.w	r4, [r0], #4
  for (int m = 0; m < NUM_FILTERS_L + 2; m++) {
 800399a:	d1f0      	bne.n	800397e <clear_filterbank+0x12>
 800399c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800399e:	bf00      	nop
 80039a0:	20010c70 	.word	0x20010c70
 80039a4:	2000022c 	.word	0x2000022c
 80039a8:	20011074 	.word	0x20011074

080039ac <generate_mel_scale_filters>:
}

/*
 * Filter bank: Mel scale
 */
void generate_mel_scale_filters(void) {
 80039ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b0:	ed2d 8b02 	vpush	{d8}
  float32_t mel_delta;
  float32_t divider;

  clear_filterbank();
  mel_freq_low = 0.0f;
  mel_freq_high = hz2mel((float32_t)fs/2.0);
 80039b4:	4d51      	ldr	r5, [pc, #324]	; (8003afc <generate_mel_scale_filters+0x150>)
 80039b6:	f8df a158 	ldr.w	sl, [pc, #344]	; 8003b10 <generate_mel_scale_filters+0x164>
  mel_delta = (mel_freq_high - mel_freq_low)/(float32_t)(NUM_FILTERS+1);

  for (int m = 0; m < NUM_FILTERS + 2; m++) {
    hz_freqs[m] = mel2hz(mel_delta*m);
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / ((float32_t)fs/2.0) * NN / 2);
 80039ba:	f8df b150 	ldr.w	fp, [pc, #336]	; 8003b0c <generate_mel_scale_filters+0x160>
 80039be:	4f50      	ldr	r7, [pc, #320]	; (8003b00 <generate_mel_scale_filters+0x154>)
void generate_mel_scale_filters(void) {
 80039c0:	b083      	sub	sp, #12
  clear_filterbank();
 80039c2:	f7ff ffd3 	bl	800396c <clear_filterbank>
  mel_freq_high = hz2mel((float32_t)fs/2.0);
 80039c6:	ed95 0a00 	vldr	s0, [r5]
 80039ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80039ce:	ee20 0a27 	vmul.f32	s0, s0, s15
 80039d2:	f7ff ff69 	bl	80038a8 <hz2mel>
  mel_delta = (mel_freq_high - mel_freq_low)/(float32_t)(NUM_FILTERS+1);
 80039d6:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8003b04 <generate_mel_scale_filters+0x158>
 80039da:	ee80 8a27 	vdiv.f32	s16, s0, s15
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 80039de:	2400      	movs	r4, #0
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / ((float32_t)fs/2.0) * NN / 2);
 80039e0:	2600      	movs	r6, #0
    hz_freqs[m] = mel2hz(mel_delta*m);
 80039e2:	ee07 4a90 	vmov	s15, r4
 80039e6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80039ea:	ee20 0a08 	vmul.f32	s0, s0, s16
 80039ee:	f7ff ff83 	bl	80038f8 <mel2hz>
 80039f2:	ee10 0a10 	vmov	r0, s0
 80039f6:	ecaa 0a01 	vstmia	sl!, {s0}
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / ((float32_t)fs/2.0) * NN / 2);
 80039fa:	f7fc fe05 	bl	8000608 <__aeabi_f2d>
 80039fe:	4680      	mov	r8, r0
 8003a00:	6828      	ldr	r0, [r5, #0]
 8003a02:	4689      	mov	r9, r1
 8003a04:	f7fc fe00 	bl	8000608 <__aeabi_f2d>
 8003a08:	4632      	mov	r2, r6
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	f7fc fe50 	bl	80006b0 <__aeabi_dmul>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4640      	mov	r0, r8
 8003a16:	4649      	mov	r1, r9
 8003a18:	f7fc ff74 	bl	8000904 <__aeabi_ddiv>
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8003a22:	f7fc fe45 	bl	80006b0 <__aeabi_dmul>
 8003a26:	4632      	mov	r2, r6
 8003a28:	463b      	mov	r3, r7
 8003a2a:	f7fc fe41 	bl	80006b0 <__aeabi_dmul>
 8003a2e:	f7fd f917 	bl	8000c60 <__aeabi_d2uiz>
 8003a32:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8003a36:	3401      	adds	r4, #1
 8003a38:	2c2a      	cmp	r4, #42	; 0x2a
 8003a3a:	d1d2      	bne.n	80039e2 <generate_mel_scale_filters+0x36>
 8003a3c:	4f32      	ldr	r7, [pc, #200]	; (8003b08 <generate_mel_scale_filters+0x15c>)
 8003a3e:	4d33      	ldr	r5, [pc, #204]	; (8003b0c <generate_mel_scale_filters+0x160>)
 8003a40:	2401      	movs	r4, #1
 8003a42:	46b8      	mov	r8, r7

    for (int n = left_n; n < center_n; n++) {
      filterbank[m][n - left_n] = (n2hz(n) - freq_m_minus_1)/(freq_m - freq_m_minus_1)/divider;
    }

    filterbank[m][center_n - left_n] = 1.0f/divider;
 8003a44:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8003a48:	f06f 0903 	mvn.w	r9, #3
    left_n = hz_freqs_n[m-1];
 8003a4c:	6829      	ldr	r1, [r5, #0]
    center_n = hz_freqs_n[m];
 8003a4e:	f855 2f04 	ldr.w	r2, [r5, #4]!
    freq_m_minus_1 = n2hz(left_n);
 8003a52:	4608      	mov	r0, r1
 8003a54:	f7ff ff7a 	bl	800394c <n2hz>
    freq_m = n2hz(center_n);
 8003a58:	4610      	mov	r0, r2
    right_n = hz_freqs_n[m+1];
 8003a5a:	686e      	ldr	r6, [r5, #4]
    freq_m_minus_1 = n2hz(left_n);
 8003a5c:	eeb0 5a40 	vmov.f32	s10, s0
    freq_m = n2hz(center_n);
 8003a60:	f7ff ff74 	bl	800394c <n2hz>
    freq_m_plus_1 = n2hz(right_n);
 8003a64:	4630      	mov	r0, r6
    freq_m = n2hz(center_n);
 8003a66:	eeb0 6a40 	vmov.f32	s12, s0
    freq_m_plus_1 = n2hz(right_n);
 8003a6a:	f7ff ff6f 	bl	800394c <n2hz>
    divider = (float32_t)(right_n - left_n);
 8003a6e:	1a73      	subs	r3, r6, r1
 8003a70:	ee06 3a90 	vmov	s13, r3
 8003a74:	ea4f 2a04 	mov.w	sl, r4, lsl #8
 8003a78:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    freq_m_plus_1 = n2hz(right_n);
 8003a7c:	eef0 5a40 	vmov.f32	s11, s0
 8003a80:	eb07 030a 	add.w	r3, r7, sl
    for (int n = left_n; n < center_n; n++) {
 8003a84:	468b      	mov	fp, r1
 8003a86:	4593      	cmp	fp, r2
 8003a88:	db15      	blt.n	8003ab6 <generate_mel_scale_filters+0x10a>
    filterbank[m][center_n - left_n] = 1.0f/divider;
 8003a8a:	eec4 7aa6 	vdiv.f32	s15, s9, s13
 8003a8e:	1a53      	subs	r3, r2, r1
 8003a90:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 8003a94:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8003a98:	fb09 a101 	mla	r1, r9, r1, sl
 8003a9c:	edc3 7a00 	vstr	s15, [r3]
 8003aa0:	3201      	adds	r2, #1

    for (int n= center_n + 1; n <= right_n; n++) {
 8003aa2:	4296      	cmp	r6, r2
 8003aa4:	da19      	bge.n	8003ada <generate_mel_scale_filters+0x12e>
 8003aa6:	3401      	adds	r4, #1
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 8003aa8:	2c29      	cmp	r4, #41	; 0x29
 8003aaa:	d1cf      	bne.n	8003a4c <generate_mel_scale_filters+0xa0>
      filterbank[m][n - left_n] = (freq_m_plus_1 - n2hz(n))/(freq_m_plus_1 - freq_m)/divider;
    }
  }
}
 8003aac:	b003      	add	sp, #12
 8003aae:	ecbd 8b02 	vpop	{d8}
 8003ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      filterbank[m][n - left_n] = (n2hz(n) - freq_m_minus_1)/(freq_m - freq_m_minus_1)/divider;
 8003ab6:	4658      	mov	r0, fp
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	f7ff ff47 	bl	800394c <n2hz>
 8003abe:	ee76 7a45 	vsub.f32	s15, s12, s10
 8003ac2:	ee30 0a45 	vsub.f32	s0, s0, s10
 8003ac6:	9b01      	ldr	r3, [sp, #4]
 8003ac8:	ee80 7a27 	vdiv.f32	s14, s0, s15
    for (int n = left_n; n < center_n; n++) {
 8003acc:	f10b 0b01 	add.w	fp, fp, #1
      filterbank[m][n - left_n] = (n2hz(n) - freq_m_minus_1)/(freq_m - freq_m_minus_1)/divider;
 8003ad0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ad4:	ece3 7a01 	vstmia	r3!, {s15}
 8003ad8:	e7d5      	b.n	8003a86 <generate_mel_scale_filters+0xda>
      filterbank[m][n - left_n] = (freq_m_plus_1 - n2hz(n))/(freq_m_plus_1 - freq_m)/divider;
 8003ada:	4610      	mov	r0, r2
 8003adc:	f7ff ff36 	bl	800394c <n2hz>
 8003ae0:	ee75 7ac6 	vsub.f32	s15, s11, s12
 8003ae4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8003ae8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003aec:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8003af0:	4443      	add	r3, r8
 8003af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003af6:	edc3 7a00 	vstr	s15, [r3]
 8003afa:	e7d1      	b.n	8003aa0 <generate_mel_scale_filters+0xf4>
 8003afc:	2001032c 	.word	0x2001032c
 8003b00:	3fe00000 	.word	0x3fe00000
 8003b04:	42240000 	.word	0x42240000
 8003b08:	2000022c 	.word	0x2000022c
 8003b0c:	20011074 	.word	0x20011074
 8003b10:	20010c70 	.word	0x20010c70

08003b14 <generate_linear_scale_filters>:

/*
 * Filter bank: linear scale
 */
void generate_linear_scale_filters(void) {
 8003b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b18:	ed2d 8b02 	vpush	{d8}
 8003b1c:	b083      	sub	sp, #12
  float32_t freq_m_minus_1, freq_m, freq_m_plus_1;
  float32_t freq_low;
  float32_t freq_high;
  float32_t delta;

  clear_filterbank();
 8003b1e:	f7ff ff25 	bl	800396c <clear_filterbank>
  freq_low = 0.0f;
  freq_high = (float32_t)fs/2.0;
 8003b22:	4b4a      	ldr	r3, [pc, #296]	; (8003c4c <generate_linear_scale_filters+0x138>)
  delta = (freq_high - freq_low)/(float32_t)(NUM_FILTERS_L+1);
 8003b24:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003c50 <generate_linear_scale_filters+0x13c>
  freq_high = (float32_t)fs/2.0;
 8003b28:	edd3 7a00 	vldr	s15, [r3]
 8003b2c:	4d49      	ldr	r5, [pc, #292]	; (8003c54 <generate_linear_scale_filters+0x140>)

  for (int m = 0; m < NUM_FILTERS_L + 2; m++) {
    hz_freqs[m] = delta * m;
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / ((float32_t)fs/2.0) * NN / 2);
 8003b2e:	f8df b130 	ldr.w	fp, [pc, #304]	; 8003c60 <generate_linear_scale_filters+0x14c>
  freq_high = (float32_t)fs/2.0;
 8003b32:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8003b36:	ee27 8a88 	vmul.f32	s16, s15, s16
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / ((float32_t)fs/2.0) * NN / 2);
 8003b3a:	ee17 0a90 	vmov	r0, s15
  delta = (freq_high - freq_low)/(float32_t)(NUM_FILTERS_L+1);
 8003b3e:	ee28 8a07 	vmul.f32	s16, s16, s14
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / ((float32_t)fs/2.0) * NN / 2);
 8003b42:	f7fc fd61 	bl	8000608 <__aeabi_f2d>
 8003b46:	2200      	movs	r2, #0
 8003b48:	4b43      	ldr	r3, [pc, #268]	; (8003c58 <generate_linear_scale_filters+0x144>)
 8003b4a:	f7fc fdb1 	bl	80006b0 <__aeabi_dmul>
  for (int m = 0; m < NUM_FILTERS_L + 2; m++) {
 8003b4e:	2400      	movs	r4, #0
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / ((float32_t)fs/2.0) * NN / 2);
 8003b50:	4680      	mov	r8, r0
 8003b52:	4689      	mov	r9, r1
 8003b54:	2600      	movs	r6, #0
 8003b56:	f04f 4781 	mov.w	r7, #1082130432	; 0x40800000
  for (int m = 0; m < NUM_FILTERS_L + 2; m++) {
 8003b5a:	f240 1a01 	movw	sl, #257	; 0x101
    hz_freqs[m] = delta * m;
 8003b5e:	ee07 4a90 	vmov	s15, r4
 8003b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b66:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003b6a:	ece5 7a01 	vstmia	r5!, {s15}
    hz_freqs_n[m] = (uint32_t)(hz_freqs[m] / ((float32_t)fs/2.0) * NN / 2);
 8003b6e:	ee17 0a90 	vmov	r0, s15
 8003b72:	f7fc fd49 	bl	8000608 <__aeabi_f2d>
 8003b76:	4642      	mov	r2, r8
 8003b78:	464b      	mov	r3, r9
 8003b7a:	f7fc fec3 	bl	8000904 <__aeabi_ddiv>
 8003b7e:	4632      	mov	r2, r6
 8003b80:	463b      	mov	r3, r7
 8003b82:	f7fc fd95 	bl	80006b0 <__aeabi_dmul>
 8003b86:	2200      	movs	r2, #0
 8003b88:	4b33      	ldr	r3, [pc, #204]	; (8003c58 <generate_linear_scale_filters+0x144>)
 8003b8a:	f7fc fd91 	bl	80006b0 <__aeabi_dmul>
 8003b8e:	f7fd f867 	bl	8000c60 <__aeabi_d2uiz>
 8003b92:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
  for (int m = 0; m < NUM_FILTERS_L + 2; m++) {
 8003b96:	3401      	adds	r4, #1
 8003b98:	4554      	cmp	r4, sl
 8003b9a:	d1e0      	bne.n	8003b5e <generate_linear_scale_filters+0x4a>
 8003b9c:	4d2f      	ldr	r5, [pc, #188]	; (8003c5c <generate_linear_scale_filters+0x148>)
 8003b9e:	4c30      	ldr	r4, [pc, #192]	; (8003c60 <generate_linear_scale_filters+0x14c>)
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	462e      	mov	r6, r5

    for (int n = left_n; n < center_n; n++) {
      filterbank[m][n - left_n] = (n2hz(n) - freq_m_minus_1)/(freq_m - freq_m_minus_1);
    }

    filterbank[m][center_n - left_n] = 1.0f;
 8003ba4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8003ba8:	f06f 0803 	mvn.w	r8, #3
    left_n = hz_freqs_n[m-1];
 8003bac:	f8d4 a000 	ldr.w	sl, [r4]
    center_n = hz_freqs_n[m];
 8003bb0:	f854 2f04 	ldr.w	r2, [r4, #4]!
    freq_m_minus_1 = n2hz(left_n);
 8003bb4:	4650      	mov	r0, sl
 8003bb6:	f7ff fec9 	bl	800394c <n2hz>
    freq_m = n2hz(center_n);
 8003bba:	4610      	mov	r0, r2
    freq_m_minus_1 = n2hz(left_n);
 8003bbc:	eef0 5a40 	vmov.f32	s11, s0
    right_n = hz_freqs_n[m+1];
 8003bc0:	6867      	ldr	r7, [r4, #4]
    freq_m = n2hz(center_n);
 8003bc2:	f7ff fec3 	bl	800394c <n2hz>
    freq_m_plus_1 = n2hz(right_n);
 8003bc6:	4638      	mov	r0, r7
    freq_m = n2hz(center_n);
 8003bc8:	eef0 6a40 	vmov.f32	s13, s0
    freq_m_plus_1 = n2hz(right_n);
 8003bcc:	f7ff febe 	bl	800394c <n2hz>
 8003bd0:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8003bd4:	eeb0 6a40 	vmov.f32	s12, s0
 8003bd8:	eb05 0309 	add.w	r3, r5, r9
    for (int n = left_n; n < center_n; n++) {
 8003bdc:	46d3      	mov	fp, sl
 8003bde:	4593      	cmp	fp, r2
 8003be0:	db15      	blt.n	8003c0e <generate_linear_scale_filters+0xfa>
    filterbank[m][center_n - left_n] = 1.0f;
 8003be2:	eba2 030a 	sub.w	r3, r2, sl
 8003be6:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 8003bea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003bee:	ed83 5a00 	vstr	s10, [r3]
 8003bf2:	fb08 990a 	mla	r9, r8, sl, r9
 8003bf6:	3201      	adds	r2, #1

    for (int n= center_n + 1; n <= right_n; n++) {
 8003bf8:	4297      	cmp	r7, r2
 8003bfa:	da18      	bge.n	8003c2e <generate_linear_scale_filters+0x11a>
 8003bfc:	3101      	adds	r1, #1
  for (int m = 1; m < NUM_FILTERS_L + 1; m++) {
 8003bfe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003c02:	d1d3      	bne.n	8003bac <generate_linear_scale_filters+0x98>
      filterbank[m][n - left_n] = (freq_m_plus_1 - n2hz(n))/(freq_m_plus_1 - freq_m);
    }
  }
}
 8003c04:	b003      	add	sp, #12
 8003c06:	ecbd 8b02 	vpop	{d8}
 8003c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      filterbank[m][n - left_n] = (n2hz(n) - freq_m_minus_1)/(freq_m - freq_m_minus_1);
 8003c0e:	4658      	mov	r0, fp
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	f7ff fe9b 	bl	800394c <n2hz>
 8003c16:	ee30 0a65 	vsub.f32	s0, s0, s11
 8003c1a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8003c1e:	9b01      	ldr	r3, [sp, #4]
 8003c20:	eec0 7a07 	vdiv.f32	s15, s0, s14
    for (int n = left_n; n < center_n; n++) {
 8003c24:	f10b 0b01 	add.w	fp, fp, #1
      filterbank[m][n - left_n] = (n2hz(n) - freq_m_minus_1)/(freq_m - freq_m_minus_1);
 8003c28:	ece3 7a01 	vstmia	r3!, {s15}
 8003c2c:	e7d7      	b.n	8003bde <generate_linear_scale_filters+0xca>
      filterbank[m][n - left_n] = (freq_m_plus_1 - n2hz(n))/(freq_m_plus_1 - freq_m);
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f7ff fe8c 	bl	800394c <n2hz>
 8003c34:	ee36 0a40 	vsub.f32	s0, s12, s0
 8003c38:	ee36 7a66 	vsub.f32	s14, s12, s13
 8003c3c:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8003c40:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8003c44:	4433      	add	r3, r6
 8003c46:	edc3 7a00 	vstr	s15, [r3]
 8003c4a:	e7d4      	b.n	8003bf6 <generate_linear_scale_filters+0xe2>
 8003c4c:	2001032c 	.word	0x2001032c
 8003c50:	3b800000 	.word	0x3b800000
 8003c54:	20010c70 	.word	0x20010c70
 8003c58:	3fe00000 	.word	0x3fe00000
 8003c5c:	2000022c 	.word	0x2000022c
 8003c60:	20011074 	.word	0x20011074

08003c64 <generate_filters>:

void generate_filters(mode mode) {
  if (mode == FILTERED_MEL) {
 8003c64:	2803      	cmp	r0, #3
 8003c66:	d101      	bne.n	8003c6c <generate_filters+0x8>
    generate_mel_scale_filters();
 8003c68:	f7ff bea0 	b.w	80039ac <generate_mel_scale_filters>
  } else if (mode == FILTERED_LINEAR) {
 8003c6c:	2806      	cmp	r0, #6
 8003c6e:	d101      	bne.n	8003c74 <generate_filters+0x10>
    generate_linear_scale_filters();
 8003c70:	f7ff bf50 	b.w	8003b14 <generate_linear_scale_filters>
 8003c74:	4770      	bx	lr
	...

08003c78 <generate_half_sample_shifter>:
  }
}

void generate_half_sample_shifter(void) {
 8003c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int re, im;
  float32_t num_filters_2 = (float32_t)NUM_FILTERS * 2;
  for (int k = 0; k < NUM_FILTERS; k ++) {
    re = k * 2;
    im = re + 1;
    half_sample_shifter[re] = arm_cos_f32(-1.0*PI*(float32_t)k/num_filters_2);
 8003c7c:	f20f 0970 	addw	r9, pc, #112	; 0x70
 8003c80:	e9d9 8900 	ldrd	r8, r9, [r9]
void generate_half_sample_shifter(void) {
 8003c84:	ed2d 8b02 	vpush	{d8}
 8003c88:	4d17      	ldr	r5, [pc, #92]	; (8003ce8 <generate_half_sample_shifter+0x70>)
    half_sample_shifter[re] = arm_cos_f32(-1.0*PI*(float32_t)k/num_filters_2);
 8003c8a:	4f18      	ldr	r7, [pc, #96]	; (8003cec <generate_half_sample_shifter+0x74>)
  for (int k = 0; k < NUM_FILTERS; k ++) {
 8003c8c:	2400      	movs	r4, #0
    half_sample_shifter[re] = arm_cos_f32(-1.0*PI*(float32_t)k/num_filters_2);
 8003c8e:	2600      	movs	r6, #0
 8003c90:	ee07 4a90 	vmov	s15, r4
 8003c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int k = 0; k < NUM_FILTERS; k ++) {
 8003c98:	3401      	adds	r4, #1
    half_sample_shifter[re] = arm_cos_f32(-1.0*PI*(float32_t)k/num_filters_2);
 8003c9a:	ee17 0a90 	vmov	r0, s15
 8003c9e:	f7fc fcb3 	bl	8000608 <__aeabi_f2d>
 8003ca2:	4642      	mov	r2, r8
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	f7fc fd03 	bl	80006b0 <__aeabi_dmul>
 8003caa:	463b      	mov	r3, r7
 8003cac:	4632      	mov	r2, r6
 8003cae:	f7fc fe29 	bl	8000904 <__aeabi_ddiv>
 8003cb2:	f7fc fff5 	bl	8000ca0 <__aeabi_d2f>
 8003cb6:	ee00 0a10 	vmov	s0, r0
 8003cba:	ee08 0a10 	vmov	s16, r0
 8003cbe:	f001 ffdf 	bl	8005c80 <arm_cos_f32>
 8003cc2:	ed05 0a01 	vstr	s0, [r5, #-4]
    half_sample_shifter[im] = arm_sin_f32(-1.0*PI*(float32_t)k/num_filters_2);
 8003cc6:	eeb0 0a48 	vmov.f32	s0, s16
 8003cca:	f001 ff8b 	bl	8005be4 <arm_sin_f32>
 8003cce:	462b      	mov	r3, r5
  for (int k = 0; k < NUM_FILTERS; k ++) {
 8003cd0:	2c28      	cmp	r4, #40	; 0x28
    half_sample_shifter[im] = arm_sin_f32(-1.0*PI*(float32_t)k/num_filters_2);
 8003cd2:	f105 0508 	add.w	r5, r5, #8
 8003cd6:	ed83 0a00 	vstr	s0, [r3]
  for (int k = 0; k < NUM_FILTERS; k ++) {
 8003cda:	d1d9      	bne.n	8003c90 <generate_half_sample_shifter+0x18>
  }
}
 8003cdc:	ecbd 8b02 	vpop	{d8}
 8003ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ce4:	f3af 8000 	nop.w
 8003ce8:	20010334 	.word	0x20010334
 8003cec:	40540000 	.word	0x40540000
 8003cf0:	60000000 	.word	0x60000000
 8003cf4:	c00921fb 	.word	0xc00921fb

08003cf8 <init_dsp>:

/*
 * dsp initialization
 */
void init_dsp(float32_t sampling_frequency) {
 8003cf8:	b500      	push	{lr}
 8003cfa:	ed2d 8b02 	vpush	{d8}
  // Generate Hanning window
  hann(NN);
 8003cfe:	f44f 7000 	mov.w	r0, #512	; 0x200
void init_dsp(float32_t sampling_frequency) {
 8003d02:	b083      	sub	sp, #12
 8003d04:	eeb0 8a40 	vmov.f32	s16, s0
  hann(NN);
 8003d08:	f7ff fd68 	bl	80037dc <hann>
  fs = sampling_frequency;
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <init_dsp+0x50>)
  arm_rfft_fast_init_f32(&S, NN);
 8003d0e:	480f      	ldr	r0, [pc, #60]	; (8003d4c <init_dsp+0x54>)
  fs = sampling_frequency;
 8003d10:	ed83 8a00 	vstr	s16, [r3]
  arm_rfft_fast_init_f32(&S, NN);
 8003d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d18:	f000 fe78 	bl	8004a0c <arm_rfft_fast_init_f32>
  arm_rfft_fast_init_f32(&S_DCT, NUM_FILTERS*2);
 8003d1c:	2150      	movs	r1, #80	; 0x50
 8003d1e:	480c      	ldr	r0, [pc, #48]	; (8003d50 <init_dsp+0x58>)
 8003d20:	f000 fe74 	bl	8004a0c <arm_rfft_fast_init_f32>
  arm_fir_init_f32(&S_PRE, 2, fir_coefficients, state_buf, NN+1);
 8003d24:	f240 2301 	movw	r3, #513	; 0x201
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <init_dsp+0x5c>)
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <init_dsp+0x60>)
 8003d2e:	480b      	ldr	r0, [pc, #44]	; (8003d5c <init_dsp+0x64>)
 8003d30:	2102      	movs	r1, #2
 8003d32:	f001 fb59 	bl	80053e8 <arm_fir_init_f32>
  generate_mel_scale_filters();
 8003d36:	f7ff fe39 	bl	80039ac <generate_mel_scale_filters>
  //generate_linear_scale_filters();
  generate_half_sample_shifter();
}
 8003d3a:	b003      	add	sp, #12
 8003d3c:	ecbd 8b02 	vpop	{d8}
 8003d40:	f85d eb04 	ldr.w	lr, [sp], #4
  generate_half_sample_shifter();
 8003d44:	f7ff bf98 	b.w	8003c78 <generate_half_sample_shifter>
 8003d48:	2001032c 	.word	0x2001032c
 8003d4c:	20013630 	.word	0x20013630
 8003d50:	20013618 	.word	0x20013618
 8003d54:	20000000 	.word	0x20000000
 8003d58:	20011c78 	.word	0x20011c78
 8003d5c:	20013648 	.word	0x20013648

08003d60 <apply_pre_emphasis>:

void apply_pre_emphasis(float32_t *inout) {
 8003d60:	4602      	mov	r2, r0
  arm_fir_f32(&S_PRE, inout, inout, NN);
 8003d62:	4601      	mov	r1, r0
 8003d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d68:	4801      	ldr	r0, [pc, #4]	; (8003d70 <apply_pre_emphasis+0x10>)
 8003d6a:	f001 bb4f 	b.w	800540c <arm_fir_f32>
 8003d6e:	bf00      	nop
 8003d70:	20013648 	.word	0x20013648

08003d74 <apply_mean_normalization>:
}

void apply_mean_normalization(float32_t *inout) {
 8003d74:	b513      	push	{r0, r1, r4, lr}
  float32_t mean;
  arm_mean_f32(inout, NN/2, &mean);
 8003d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d7a:	aa01      	add	r2, sp, #4
void apply_mean_normalization(float32_t *inout) {
 8003d7c:	4604      	mov	r4, r0
  arm_mean_f32(inout, NN/2, &mean);
 8003d7e:	f000 fe11 	bl	80049a4 <arm_mean_f32>
  arm_offset_f32(inout, -mean, inout, NN/2);
 8003d82:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	eeb1 0a40 	vneg.f32	s0, s0
 8003d90:	4620      	mov	r0, r4
 8003d92:	f001 ffeb 	bl	8005d6c <arm_offset_f32>
}
 8003d96:	b002      	add	sp, #8
 8003d98:	bd10      	pop	{r4, pc}

08003d9a <apply_ac_coupling>:

void apply_ac_coupling(float32_t *inout) {
 8003d9a:	b513      	push	{r0, r1, r4, lr}
  float32_t mean;
  arm_mean_f32(inout, NN, &mean);
 8003d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003da0:	aa01      	add	r2, sp, #4
void apply_ac_coupling(float32_t *inout) {
 8003da2:	4604      	mov	r4, r0
  arm_mean_f32(inout, NN, &mean);
 8003da4:	f000 fdfe 	bl	80049a4 <arm_mean_f32>
  arm_offset_f32(inout, -mean, inout, NN);
 8003da8:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003db0:	4621      	mov	r1, r4
 8003db2:	eeb1 0a40 	vneg.f32	s0, s0
 8003db6:	4620      	mov	r0, r4
 8003db8:	f001 ffd8 	bl	8005d6c <arm_offset_f32>
}
 8003dbc:	b002      	add	sp, #8
 8003dbe:	bd10      	pop	{r4, pc}

08003dc0 <apply_hann>:

void apply_hann(float32_t *inout) {
  arm_mult_f32(inout, hann_window, inout, NN);
 8003dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4901      	ldr	r1, [pc, #4]	; (8003dcc <apply_hann+0xc>)
 8003dc8:	f002 b806 	b.w	8005dd8 <arm_mult_f32>
 8003dcc:	20010470 	.word	0x20010470

08003dd0 <apply_fft>:
}

void apply_fft(float32_t *inout) {
 8003dd0:	b538      	push	{r3, r4, r5, lr}
  arm_rfft_fast_f32(&S, inout, signal_buf, 0);
 8003dd2:	4c08      	ldr	r4, [pc, #32]	; (8003df4 <apply_fft+0x24>)
void apply_fft(float32_t *inout) {
 8003dd4:	4605      	mov	r5, r0
  arm_rfft_fast_f32(&S, inout, signal_buf, 0);
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	4601      	mov	r1, r0
 8003dda:	2300      	movs	r3, #0
 8003ddc:	4806      	ldr	r0, [pc, #24]	; (8003df8 <apply_fft+0x28>)
 8003dde:	f000 fe97 	bl	8004b10 <arm_rfft_fast_f32>
  arm_copy_f32(signal_buf, inout, NN);
 8003de2:	4629      	mov	r1, r5
 8003de4:	4620      	mov	r0, r4
 8003de6:	f44f 7200 	mov.w	r2, #512	; 0x200
}
 8003dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  arm_copy_f32(signal_buf, inout, NN);
 8003dee:	f000 bda9 	b.w	8004944 <arm_copy_f32>
 8003df2:	bf00      	nop
 8003df4:	20011478 	.word	0x20011478
 8003df8:	20013630 	.word	0x20013630

08003dfc <apply_psd_logscale>:

void apply_psd_logscale(float32_t *inout) {
 8003dfc:	b570      	push	{r4, r5, r6, lr}
  arm_cmplx_mag_f32(inout, signal_buf, NN / 2);
 8003dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
void apply_psd_logscale(float32_t *inout) {
 8003e02:	4604      	mov	r4, r0
 8003e04:	ed2d 8b02 	vpush	{d8}
  arm_cmplx_mag_f32(inout, signal_buf, NN / 2);
 8003e08:	490e      	ldr	r1, [pc, #56]	; (8003e44 <apply_psd_logscale+0x48>)
 8003e0a:	4d0e      	ldr	r5, [pc, #56]	; (8003e44 <apply_psd_logscale+0x48>)
 8003e0c:	f001 fe02 	bl	8005a14 <arm_cmplx_mag_f32>
  arm_scale_f32(inout, RECIPROCAL_NN, inout, NN / 2);
 8003e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e14:	4621      	mov	r1, r4
 8003e16:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003e48 <apply_psd_logscale+0x4c>
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	f001 ff70 	bl	8005d00 <arm_scale_f32>
 8003e20:	f504 6680 	add.w	r6, r4, #1024	; 0x400
  for (int n = 0; n < NN / 2; n++) {
    inout[n] = 20.0 * log10_approx(signal_buf[n]);
 8003e24:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
 8003e28:	ecb5 0a01 	vldmia	r5!, {s0}
 8003e2c:	f7ff fd08 	bl	8003840 <log10_approx>
 8003e30:	ee20 0a08 	vmul.f32	s0, s0, s16
 8003e34:	eca4 0a01 	vstmia	r4!, {s0}
  for (int n = 0; n < NN / 2; n++) {
 8003e38:	42b4      	cmp	r4, r6
 8003e3a:	d1f5      	bne.n	8003e28 <apply_psd_logscale+0x2c>
  }
}
 8003e3c:	ecbd 8b02 	vpop	{d8}
 8003e40:	bd70      	pop	{r4, r5, r6, pc}
 8003e42:	bf00      	nop
 8003e44:	20011478 	.word	0x20011478
 8003e48:	3b000000 	.word	0x3b000000

08003e4c <apply_filterbank>:

void apply_filterbank(float32_t *inout, mode mode) {
 8003e4c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  float32_t sum = 0.0f;
 8003e50:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8003ec4 <apply_filterbank+0x78>
 8003e54:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003ec8 <apply_filterbank+0x7c>
    num_filters = NUM_FILTERS;
  }

  arm_fill_f32(0.0f, signal_buf, NN/2);
  for (int m = 1; m < num_filters + 1; m++) {
    left_n = hz_freqs_n[m-1];
 8003e58:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8003ecc <apply_filterbank+0x80>
    right_n = hz_freqs_n[m+1];
    len = right_n - left_n + 1;
    arm_dot_prod_f32(&inout[left_n], filterbank[m], len, &sum);
 8003e5c:	f8df a070 	ldr.w	sl, [pc, #112]	; 8003ed0 <apply_filterbank+0x84>
    num_filters = NUM_FILTERS;
 8003e60:	2906      	cmp	r1, #6
void apply_filterbank(float32_t *inout, mode mode) {
 8003e62:	4606      	mov	r6, r0
  float32_t sum = 0.0f;
 8003e64:	ad02      	add	r5, sp, #8
  arm_fill_f32(0.0f, signal_buf, NN/2);
 8003e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e6a:	4817      	ldr	r0, [pc, #92]	; (8003ec8 <apply_filterbank+0x7c>)
  float32_t sum = 0.0f;
 8003e6c:	ed25 0a01 	vstmdb	r5!, {s0}
    num_filters = NUM_FILTERS;
 8003e70:	bf0c      	ite	eq
 8003e72:	27ff      	moveq	r7, #255	; 0xff
 8003e74:	2728      	movne	r7, #40	; 0x28
  arm_fill_f32(0.0f, signal_buf, NN/2);
 8003e76:	f000 fd47 	bl	8004908 <arm_fill_f32>
  for (int m = 1; m < num_filters + 1; m++) {
 8003e7a:	2401      	movs	r4, #1
 8003e7c:	00a3      	lsls	r3, r4, #2
    left_n = hz_freqs_n[m-1];
 8003e7e:	eb09 0203 	add.w	r2, r9, r3
    right_n = hz_freqs_n[m+1];
 8003e82:	3304      	adds	r3, #4
    left_n = hz_freqs_n[m-1];
 8003e84:	f852 0c04 	ldr.w	r0, [r2, #-4]
    len = right_n - left_n + 1;
 8003e88:	f853 2009 	ldr.w	r2, [r3, r9]
    right_n = hz_freqs_n[m+1];
 8003e8c:	3401      	adds	r4, #1
    arm_dot_prod_f32(&inout[left_n], filterbank[m], len, &sum);
 8003e8e:	f104 11ff 	add.w	r1, r4, #16711935	; 0xff00ff
    len = right_n - left_n + 1;
 8003e92:	1a12      	subs	r2, r2, r0
    arm_dot_prod_f32(&inout[left_n], filterbank[m], len, &sum);
 8003e94:	f501 417f 	add.w	r1, r1, #65280	; 0xff00
 8003e98:	462b      	mov	r3, r5
 8003e9a:	3201      	adds	r2, #1
 8003e9c:	eb0a 2101 	add.w	r1, sl, r1, lsl #8
 8003ea0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8003ea4:	f001 ffde 	bl	8005e64 <arm_dot_prod_f32>
    signal_buf[m-1] = sum;
 8003ea8:	9b01      	ldr	r3, [sp, #4]
 8003eaa:	f848 3b04 	str.w	r3, [r8], #4
  for (int m = 1; m < num_filters + 1; m++) {
 8003eae:	42a7      	cmp	r7, r4
 8003eb0:	dae4      	bge.n	8003e7c <apply_filterbank+0x30>
  }
  arm_copy_f32(signal_buf, inout, num_filters);
 8003eb2:	463a      	mov	r2, r7
 8003eb4:	4631      	mov	r1, r6
 8003eb6:	4804      	ldr	r0, [pc, #16]	; (8003ec8 <apply_filterbank+0x7c>)
 8003eb8:	f000 fd44 	bl	8004944 <arm_copy_f32>
}
 8003ebc:	b002      	add	sp, #8
 8003ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec2:	bf00      	nop
 8003ec4:	00000000 	.word	0x00000000
 8003ec8:	20011478 	.word	0x20011478
 8003ecc:	20011074 	.word	0x20011074
 8003ed0:	2000022c 	.word	0x2000022c

08003ed4 <apply_dct2>:

void apply_dct2(float32_t *inout) {
 8003ed4:	b530      	push	{r4, r5, lr}
 8003ed6:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 8003eda:	4605      	mov	r5, r0
  float32_t in[NUM_FILTERS*2] = { 0.0f };
 8003edc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4668      	mov	r0, sp
  float32_t out[NUM_FILTERS*2] = { 0.0f };
 8003ee4:	ac50      	add	r4, sp, #320	; 0x140
  float32_t in[NUM_FILTERS*2] = { 0.0f };
 8003ee6:	f002 fb19 	bl	800651c <memset>
  float32_t out[NUM_FILTERS*2] = { 0.0f };
 8003eea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f002 fb13 	bl	800651c <memset>
  arm_copy_f32(inout, in, NUM_FILTERS);
 8003ef6:	2228      	movs	r2, #40	; 0x28
 8003ef8:	4669      	mov	r1, sp
 8003efa:	4628      	mov	r0, r5
 8003efc:	f000 fd22 	bl	8004944 <arm_copy_f32>
 8003f00:	aa28      	add	r2, sp, #160	; 0xa0
 8003f02:	4613      	mov	r3, r2
  for (int n = 0; n < NUM_FILTERS; n++) {
    in[n+NUM_FILTERS] = in[NUM_FILTERS-n-1];
 8003f04:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003f08:	f843 1b04 	str.w	r1, [r3], #4
  for (int n = 0; n < NUM_FILTERS; n++) {
 8003f0c:	42a3      	cmp	r3, r4
 8003f0e:	d1f9      	bne.n	8003f04 <apply_dct2+0x30>
  }
  arm_rfft_fast_f32(&S_DCT, in, out, 0);
 8003f10:	2300      	movs	r3, #0
 8003f12:	4622      	mov	r2, r4
 8003f14:	4669      	mov	r1, sp
 8003f16:	480e      	ldr	r0, [pc, #56]	; (8003f50 <apply_dct2+0x7c>)
 8003f18:	f000 fdfa 	bl	8004b10 <arm_rfft_fast_f32>
  arm_scale_f32 (out, 2.0, out, NUM_FILTERS*2);
 8003f1c:	2250      	movs	r2, #80	; 0x50
 8003f1e:	4621      	mov	r1, r4
 8003f20:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003f24:	4620      	mov	r0, r4
 8003f26:	f001 feeb 	bl	8005d00 <arm_scale_f32>
  arm_cmplx_mult_cmplx_f32(out, half_sample_shifter, out, NUM_FILTERS);
 8003f2a:	2328      	movs	r3, #40	; 0x28
 8003f2c:	4622      	mov	r2, r4
 8003f2e:	4909      	ldr	r1, [pc, #36]	; (8003f54 <apply_dct2+0x80>)
 8003f30:	4620      	mov	r0, r4
 8003f32:	f001 fccf 	bl	80058d4 <arm_cmplx_mult_cmplx_f32>
 8003f36:	2300      	movs	r3, #0
  for (int n = 0; n < NUM_FILTERS; n++) {
    inout[n] = out[n*2];
 8003f38:	18e2      	adds	r2, r4, r3
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	f845 2b04 	str.w	r2, [r5], #4
  for (int n = 0; n < NUM_FILTERS; n++) {
 8003f42:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f46:	d1f7      	bne.n	8003f38 <apply_dct2+0x64>
  }
}
 8003f48:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 8003f4c:	bd30      	pop	{r4, r5, pc}
 8003f4e:	bf00      	nop
 8003f50:	20013618 	.word	0x20013618
 8003f54:	20010330 	.word	0x20010330

08003f58 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f58:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <MX_GPIO_Init+0x68>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f5a:	481a      	ldr	r0, [pc, #104]	; (8003fc4 <MX_GPIO_Init+0x6c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 8003f5e:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f60:	f042 0204 	orr.w	r2, r2, #4
 8003f64:	64da      	str	r2, [r3, #76]	; 0x4c
 8003f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 8003f68:	b088      	sub	sp, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f6a:	f002 0204 	and.w	r2, r2, #4
 8003f6e:	9200      	str	r2, [sp, #0]
 8003f70:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	64da      	str	r2, [r3, #76]	; 0x4c
 8003f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f7c:	f002 0201 	and.w	r2, r2, #1
 8003f80:	9201      	str	r2, [sp, #4]
 8003f82:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f86:	f042 0202 	orr.w	r2, r2, #2
 8003f8a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	9302      	str	r3, [sp, #8]
 8003f94:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = B1_Pin;
 8003f96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9a:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8003f9c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f9e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <MX_GPIO_Init+0x70>)
 8003fa2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003fa6:	f7fd fd3f 	bl	8001a28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003faa:	4622      	mov	r2, r4
 8003fac:	4621      	mov	r1, r4
 8003fae:	2028      	movs	r0, #40	; 0x28
 8003fb0:	f7fd f8aa 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003fb4:	2028      	movs	r0, #40	; 0x28
 8003fb6:	f7fd f8db 	bl	8001170 <HAL_NVIC_EnableIRQ>

}
 8003fba:	b008      	add	sp, #32
 8003fbc:	bd10      	pop	{r4, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	48000800 	.word	0x48000800
 8003fc8:	10210000 	.word	0x10210000

08003fcc <uart_tx>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

bool uart_tx(float32_t *in, mode mode, bool dma_start) {
 8003fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  static int length = 0;
  static int idx = 0;

  static char uart_buf[NN * 8] = { 0.0f };

  if (cnt == 0) {
 8003fd0:	4c4b      	ldr	r4, [pc, #300]	; (8004100 <uart_tx+0x134>)
 8003fd2:	6823      	ldr	r3, [r4, #0]
bool uart_tx(float32_t *in, mode mode, bool dma_start) {
 8003fd4:	4616      	mov	r6, r2
  if (cnt == 0) {
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d13e      	bne.n	8004058 <uart_tx+0x8c>
    idx = 0;
 8003fda:	4a4a      	ldr	r2, [pc, #296]	; (8004104 <uart_tx+0x138>)
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b4a      	ldr	r3, [pc, #296]	; (8004108 <uart_tx+0x13c>)

    switch (mode) {
 8003fe0:	2906      	cmp	r1, #6
 8003fe2:	d837      	bhi.n	8004054 <uart_tx+0x88>
 8003fe4:	e8df f001 	tbb	[pc, r1]
 8003fe8:	2b362804 	.word	0x2b362804
 8003fec:	2f2b      	.short	0x2f2b
 8003fee:	34          	.byte	0x34
 8003fef:	00          	.byte	0x00

    case RAW_WAVE:
      length = NN;
 8003ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
      cnt = 1;
      break;

    case PSD:
      length = NN / 2;
 8003ff4:	601a      	str	r2, [r3, #0]
      cnt = 1;
 8003ff6:	2301      	movs	r3, #1
      cnt = 0x7fffffff;
      break;

    case FILTERED_LINEAR:
      length = NUM_FILTERS_L;
      cnt = 200;
 8003ff8:	6023      	str	r3, [r4, #0]
    printf("e\n");
    printing = false;

  } else {   // dump time-series signal

    for (int n = 0; n < length; n++) {
 8003ffa:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8004108 <uart_tx+0x13c>
 8003ffe:	4d41      	ldr	r5, [pc, #260]	; (8004104 <uart_tx+0x138>)
 8004000:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8004110 <uart_tx+0x144>
 8004004:	4607      	mov	r7, r0
 8004006:	f04f 0900 	mov.w	r9, #0
 800400a:	f8da 3000 	ldr.w	r3, [sl]
 800400e:	4599      	cmp	r9, r3
 8004010:	db4f      	blt.n	80040b2 <uart_tx+0xe6>
      idx += sprintf(&uart_buf[idx], "%ld,", (int32_t) in[n]);
    }

    if (--cnt == 0) {
 8004012:	6827      	ldr	r7, [r4, #0]
 8004014:	3f01      	subs	r7, #1
 8004016:	6027      	str	r7, [r4, #0]
      idx += sprintf(&uart_buf[idx], "e\n");  // transmission end
 8004018:	682c      	ldr	r4, [r5, #0]
    if (--cnt == 0) {
 800401a:	2f00      	cmp	r7, #0
 800401c:	d15a      	bne.n	80040d4 <uart_tx+0x108>
      idx += sprintf(&uart_buf[idx], "e\n");  // transmission end
 800401e:	493b      	ldr	r1, [pc, #236]	; (800410c <uart_tx+0x140>)
 8004020:	eb08 0004 	add.w	r0, r8, r4
 8004024:	f002 ffb8 	bl	8006f98 <strcpy>
 8004028:	1ca2      	adds	r2, r4, #2
 800402a:	602a      	str	r2, [r5, #0]
      HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, idx);
 800402c:	4938      	ldr	r1, [pc, #224]	; (8004110 <uart_tx+0x144>)
 800402e:	4839      	ldr	r0, [pc, #228]	; (8004114 <uart_tx+0x148>)
 8004030:	b292      	uxth	r2, r2
 8004032:	f7fe fdb5 	bl	8002ba0 <HAL_UART_Transmit_DMA>
 8004036:	e038      	b.n	80040aa <uart_tx+0xde>
      length = NN / 2;
 8004038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800403c:	e7da      	b.n	8003ff4 <uart_tx+0x28>
      length = NUM_FILTERS;
 800403e:	2228      	movs	r2, #40	; 0x28
      length = NUM_FILTERS_L;
 8004040:	601a      	str	r2, [r3, #0]
      cnt = 200;
 8004042:	23c8      	movs	r3, #200	; 0xc8
 8004044:	e7d8      	b.n	8003ff8 <uart_tx+0x2c>
      length = NUM_FILTERS;
 8004046:	2228      	movs	r2, #40	; 0x28
 8004048:	601a      	str	r2, [r3, #0]
      cnt = 0x7fffffff;
 800404a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800404e:	e7d3      	b.n	8003ff8 <uart_tx+0x2c>
      length = NUM_FILTERS_L;
 8004050:	22ff      	movs	r2, #255	; 0xff
 8004052:	e7f5      	b.n	8004040 <uart_tx+0x74>
      length = 0;
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
  if (mode == FILTERBANK) {   // just dump filter bank itself
 8004058:	2902      	cmp	r1, #2
 800405a:	d1ce      	bne.n	8003ffa <uart_tx+0x2e>
 800405c:	4f2e      	ldr	r7, [pc, #184]	; (8004118 <uart_tx+0x14c>)
        printf("%ld\n", (uint32_t) (filterbank[m][i] * 100.0));
 800405e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800412c <uart_tx+0x160>
 8004062:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8004130 <uart_tx+0x164>
 8004066:	2401      	movs	r4, #1
 8004068:	f04f 0800 	mov.w	r8, #0
 800406c:	eb07 2604 	add.w	r6, r7, r4, lsl #8
bool uart_tx(float32_t *in, mode mode, bool dma_start) {
 8004070:	2500      	movs	r5, #0
        printf("%ld\n", (uint32_t) (filterbank[m][i] * 100.0));
 8004072:	f856 0b04 	ldr.w	r0, [r6], #4
 8004076:	f7fc fac7 	bl	8000608 <__aeabi_f2d>
 800407a:	4642      	mov	r2, r8
 800407c:	464b      	mov	r3, r9
 800407e:	f7fc fb17 	bl	80006b0 <__aeabi_dmul>
 8004082:	f7fc fded 	bl	8000c60 <__aeabi_d2uiz>
      for (int i = 0; i < NN / 8; i++) {
 8004086:	3501      	adds	r5, #1
        printf("%ld\n", (uint32_t) (filterbank[m][i] * 100.0));
 8004088:	4601      	mov	r1, r0
 800408a:	4650      	mov	r0, sl
 800408c:	f002 feba 	bl	8006e04 <iprintf>
      for (int i = 0; i < NN / 8; i++) {
 8004090:	2d40      	cmp	r5, #64	; 0x40
 8004092:	d1ee      	bne.n	8004072 <uart_tx+0xa6>
      if (m != NUM_FILTERS) printf("d\n");
 8004094:	2c28      	cmp	r4, #40	; 0x28
 8004096:	d002      	beq.n	800409e <uart_tx+0xd2>
 8004098:	4820      	ldr	r0, [pc, #128]	; (800411c <uart_tx+0x150>)
 800409a:	f002 ff27 	bl	8006eec <puts>
    for (int m = 1; m < NUM_FILTERS + 1; m++) {
 800409e:	3401      	adds	r4, #1
 80040a0:	2c29      	cmp	r4, #41	; 0x29
 80040a2:	d1e3      	bne.n	800406c <uart_tx+0xa0>
    printf("e\n");
 80040a4:	481e      	ldr	r0, [pc, #120]	; (8004120 <uart_tx+0x154>)
 80040a6:	f002 ff21 	bl	8006eec <puts>
    printing = false;
 80040aa:	2600      	movs	r6, #0
      printing = true;
    }
  }

  return printing;
}
 80040ac:	4630      	mov	r0, r6
 80040ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      idx += sprintf(&uart_buf[idx], "%ld,", (int32_t) in[n]);
 80040b2:	ecf7 7a01 	vldmia	r7!, {s15}
 80040b6:	6828      	ldr	r0, [r5, #0]
 80040b8:	491a      	ldr	r1, [pc, #104]	; (8004124 <uart_tx+0x158>)
 80040ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040be:	4440      	add	r0, r8
 80040c0:	ee17 2a90 	vmov	r2, s15
 80040c4:	f002 ff44 	bl	8006f50 <siprintf>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	4418      	add	r0, r3
 80040cc:	6028      	str	r0, [r5, #0]
    for (int n = 0; n < length; n++) {
 80040ce:	f109 0901 	add.w	r9, r9, #1
 80040d2:	e79a      	b.n	800400a <uart_tx+0x3e>
      idx += sprintf(&uart_buf[idx], "d\n");  // delimiter
 80040d4:	4914      	ldr	r1, [pc, #80]	; (8004128 <uart_tx+0x15c>)
 80040d6:	eb08 0004 	add.w	r0, r8, r4
    } else if (dma_start) {
 80040da:	b15e      	cbz	r6, 80040f4 <uart_tx+0x128>
      idx += sprintf(&uart_buf[idx], "d\n");  // delimiter
 80040dc:	f002 ff5c 	bl	8006f98 <strcpy>
 80040e0:	1ca2      	adds	r2, r4, #2
 80040e2:	602a      	str	r2, [r5, #0]
      HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, idx);
 80040e4:	490a      	ldr	r1, [pc, #40]	; (8004110 <uart_tx+0x144>)
 80040e6:	480b      	ldr	r0, [pc, #44]	; (8004114 <uart_tx+0x148>)
 80040e8:	b292      	uxth	r2, r2
 80040ea:	f7fe fd59 	bl	8002ba0 <HAL_UART_Transmit_DMA>
      idx = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	602b      	str	r3, [r5, #0]
 80040f2:	e7db      	b.n	80040ac <uart_tx+0xe0>
      idx += sprintf(&uart_buf[idx], "d\n");  // delimiter
 80040f4:	3402      	adds	r4, #2
 80040f6:	f002 ff4f 	bl	8006f98 <strcpy>
      printing = true;
 80040fa:	2601      	movs	r6, #1
      idx += sprintf(&uart_buf[idx], "d\n");  // delimiter
 80040fc:	602c      	str	r4, [r5, #0]
 80040fe:	e7d5      	b.n	80040ac <uart_tx+0xe0>
 8004100:	2001247c 	.word	0x2001247c
 8004104:	20012484 	.word	0x20012484
 8004108:	20012488 	.word	0x20012488
 800410c:	0800a904 	.word	0x0800a904
 8004110:	20012490 	.word	0x20012490
 8004114:	200136e0 	.word	0x200136e0
 8004118:	2000022c 	.word	0x2000022c
 800411c:	0800a8fb 	.word	0x0800a8fb
 8004120:	0800a8fd 	.word	0x0800a8fd
 8004124:	0800a8ff 	.word	0x0800a8ff
 8004128:	0800a8f8 	.word	0x0800a8f8
 800412c:	40590000 	.word	0x40590000
 8004130:	0800a8f6 	.word	0x0800a8f6

08004134 <dsp>:

/*
 * DSP pipeline
 */
void dsp(float32_t *s1, mode mode) {
 8004134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
//static bool p = true;
  static bool p = false;
  uint32_t start = 0;
  uint32_t end = 0;
  if (p)
 8004138:	4e28      	ldr	r6, [pc, #160]	; (80041dc <dsp+0xa8>)
 800413a:	7837      	ldrb	r7, [r6, #0]
void dsp(float32_t *s1, mode mode) {
 800413c:	4605      	mov	r5, r0
 800413e:	460c      	mov	r4, r1
  if (p)
 8004140:	b117      	cbz	r7, 8004148 <dsp+0x14>
    start = HAL_GetTick();
 8004142:	f7fc ffbb 	bl	80010bc <HAL_GetTick>
 8004146:	4607      	mov	r7, r0

  apply_ac_coupling(s1);
 8004148:	4628      	mov	r0, r5
 800414a:	f7ff fe26 	bl	8003d9a <apply_ac_coupling>
 800414e:	2c06      	cmp	r4, #6
 8004150:	d82e      	bhi.n	80041b0 <dsp+0x7c>
 8004152:	2301      	movs	r3, #1
 8004154:	40a3      	lsls	r3, r4
 8004156:	f013 0f5a 	tst.w	r3, #90	; 0x5a
 800415a:	d029      	beq.n	80041b0 <dsp+0x7c>

  case MFCC:
  case FILTERED_MEL:
  case FILTERED_LINEAR:
  case PSD:
    if (enable_pre_emphasis) {
 800415c:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <dsp+0xac>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b113      	cbz	r3, 8004168 <dsp+0x34>
      apply_pre_emphasis(s1);
 8004162:	4628      	mov	r0, r5
 8004164:	f7ff fdfc 	bl	8003d60 <apply_pre_emphasis>
    }
    apply_hann(s1);
 8004168:	4628      	mov	r0, r5
 800416a:	f7ff fe29 	bl	8003dc0 <apply_hann>
    apply_fft(s1);
 800416e:	4628      	mov	r0, r5
 8004170:	f7ff fe2e 	bl	8003dd0 <apply_fft>
    apply_psd_logscale(s1);
 8004174:	4628      	mov	r0, r5
 8004176:	f7ff fe41 	bl	8003dfc <apply_psd_logscale>
    if (enable_mean_normalization) {
 800417a:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <dsp+0xb0>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	b113      	cbz	r3, 8004186 <dsp+0x52>
      apply_mean_normalization(s1);
 8004180:	4628      	mov	r0, r5
 8004182:	f7ff fdf7 	bl	8003d74 <apply_mean_normalization>
    }
    switch (mode) {
 8004186:	2c04      	cmp	r4, #4
 8004188:	d01f      	beq.n	80041ca <dsp+0x96>
 800418a:	2c06      	cmp	r4, #6
 800418c:	d001      	beq.n	8004192 <dsp+0x5e>
 800418e:	2c03      	cmp	r4, #3
 8004190:	d10e      	bne.n	80041b0 <dsp+0x7c>
    case PSD:
      break;
    case FILTERED_MEL:
    case FILTERED_LINEAR:
      if (filter_type != mode) {
 8004192:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80041ec <dsp+0xb8>
 8004196:	f898 3000 	ldrb.w	r3, [r8]
 800419a:	42a3      	cmp	r3, r4
 800419c:	d004      	beq.n	80041a8 <dsp+0x74>
        generate_filters(mode);
 800419e:	4620      	mov	r0, r4
 80041a0:	f7ff fd60 	bl	8003c64 <generate_filters>
        filter_type = mode;
 80041a4:	f888 4000 	strb.w	r4, [r8]
      }
      apply_filterbank(s1, mode);
 80041a8:	4621      	mov	r1, r4
 80041aa:	4628      	mov	r0, r5
 80041ac:	f7ff fe4e 	bl	8003e4c <apply_filterbank>
      break;
    }
  default:
    break;
  }
  if (p) {
 80041b0:	7833      	ldrb	r3, [r6, #0]
 80041b2:	b143      	cbz	r3, 80041c6 <dsp+0x92>
    end = HAL_GetTick();
 80041b4:	f7fc ff82 	bl	80010bc <HAL_GetTick>
    printf("%lu %lu\n", start, end);
 80041b8:	4639      	mov	r1, r7
 80041ba:	4602      	mov	r2, r0
 80041bc:	480a      	ldr	r0, [pc, #40]	; (80041e8 <dsp+0xb4>)
 80041be:	f002 fe21 	bl	8006e04 <iprintf>
    p = false;
 80041c2:	2300      	movs	r3, #0
 80041c4:	7033      	strb	r3, [r6, #0]
 80041c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      apply_filterbank(s1, mode);
 80041ca:	4628      	mov	r0, r5
 80041cc:	4621      	mov	r1, r4
 80041ce:	f7ff fe3d 	bl	8003e4c <apply_filterbank>
      apply_dct2(s1);
 80041d2:	4628      	mov	r0, r5
 80041d4:	f7ff fe7e 	bl	8003ed4 <apply_dct2>
      break;
 80041d8:	e7ea      	b.n	80041b0 <dsp+0x7c>
 80041da:	bf00      	nop
 80041dc:	2001248e 	.word	0x2001248e
 80041e0:	20012481 	.word	0x20012481
 80041e4:	20012480 	.word	0x20012480
 80041e8:	0800a8ed 	.word	0x0800a8ed
 80041ec:	20000008 	.word	0x20000008

080041f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041f0:	b510      	push	{r4, lr}
 80041f2:	b0b8      	sub	sp, #224	; 0xe0
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80041f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041f8:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80041fa:	2210      	movs	r2, #16
 80041fc:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 80041fe:	2201      	movs	r2, #1
 8004200:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004202:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004204:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004206:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004208:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800420a:	2207      	movs	r2, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800420c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800420e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004210:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004212:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004214:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004216:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004218:	f7fd fdc2 	bl	8001da0 <HAL_RCC_OscConfig>
 800421c:	b100      	cbz	r0, 8004220 <SystemClock_Config+0x30>
 800421e:	e7fe      	b.n	800421e <SystemClock_Config+0x2e>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004220:	220f      	movs	r2, #15
 8004222:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004224:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004226:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004228:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800422a:	2104      	movs	r1, #4
 800422c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800422e:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004232:	f7fd ffdb 	bl	80021ec <HAL_RCC_ClockConfig>
 8004236:	b100      	cbz	r0, 800423a <SystemClock_Config+0x4a>
 8004238:	e7fe      	b.n	8004238 <SystemClock_Config+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_DFSDM1;
 800423a:	4b11      	ldr	r3, [pc, #68]	; (8004280 <SystemClock_Config+0x90>)
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800423c:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800423e:	9036      	str	r0, [sp, #216]	; 0xd8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004240:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_DFSDM1;
 8004242:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004244:	f7fe f99a 	bl	800257c <HAL_RCCEx_PeriphCLKConfig>
 8004248:	b100      	cbz	r0, 800424c <SystemClock_Config+0x5c>
 800424a:	e7fe      	b.n	800424a <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800424c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004250:	f7fd fcda 	bl	8001c08 <HAL_PWREx_ControlVoltageScaling>
 8004254:	4604      	mov	r4, r0
 8004256:	b100      	cbz	r0, 800425a <SystemClock_Config+0x6a>
 8004258:	e7fe      	b.n	8004258 <SystemClock_Config+0x68>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800425a:	f7fe f859 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 800425e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004262:	fbb0 f0f3 	udiv	r0, r0, r3
 8004266:	f7fc ff8f 	bl	8001188 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800426a:	2004      	movs	r0, #4
 800426c:	f7fc ffa2 	bl	80011b4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004270:	4622      	mov	r2, r4
 8004272:	4621      	mov	r1, r4
 8004274:	f04f 30ff 	mov.w	r0, #4294967295
 8004278:	f7fc ff46 	bl	8001108 <HAL_NVIC_SetPriority>
}
 800427c:	b038      	add	sp, #224	; 0xe0
 800427e:	bd10      	pop	{r4, pc}
 8004280:	00010002 	.word	0x00010002

08004284 <main>:
{
 8004284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004288:	f5ad 5d50 	sub.w	sp, sp, #13312	; 0x3400
 800428c:	b083      	sub	sp, #12
  int32_t input_buf[NN * 2] = { 0 };
 800428e:	f50d 5510 	add.w	r5, sp, #9216	; 0x2400
 8004292:	3508      	adds	r5, #8
 8004294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004298:	2100      	movs	r1, #0
  volatile uint16_t dac1_out1_buf[NN * 2] = { 0 };
 800429a:	ae02      	add	r6, sp, #8
  int32_t input_buf[NN * 2] = { 0 };
 800429c:	4628      	mov	r0, r5
 800429e:	f002 f93d 	bl	800651c <memset>
  volatile uint16_t dac1_out2_buf[NN * 2] = { 0 };
 80042a2:	f60d 0708 	addw	r7, sp, #2056	; 0x808
  volatile uint16_t dac1_out1_buf[NN * 2] = { 0 };
 80042a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042aa:	2100      	movs	r1, #0
 80042ac:	4630      	mov	r0, r6
 80042ae:	f002 f935 	bl	800651c <memset>
  volatile uint16_t dac1_out2_buf[NN * 2] = { 0 };
 80042b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042b6:	2100      	movs	r1, #0
 80042b8:	4638      	mov	r0, r7
 80042ba:	f002 f92f 	bl	800651c <memset>
  float32_t signal[NN] = { 0.0f };
 80042be:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 80042c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042c6:	2100      	movs	r1, #0
 80042c8:	3008      	adds	r0, #8
 80042ca:	f002 f927 	bl	800651c <memset>
  float32_t signal_buf[NN + NN / 2] = { 0.0f };
 80042ce:	f50d 50c0 	add.w	r0, sp, #6144	; 0x1800
 80042d2:	2100      	movs	r1, #0
 80042d4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80042d8:	3008      	adds	r0, #8
 80042da:	f002 f91f 	bl	800651c <memset>
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 80042de:	4c99      	ldr	r4, [pc, #612]	; (8004544 <main+0x2c0>)
  HAL_Init();
 80042e0:	f7fc fece 	bl	8001080 <HAL_Init>
  SystemClock_Config();
 80042e4:	f7ff ff84 	bl	80041f0 <SystemClock_Config>
  MX_GPIO_Init();
 80042e8:	f7ff fe36 	bl	8003f58 <MX_GPIO_Init>
  MX_DMA_Init();
 80042ec:	f7ff fa3c 	bl	8003768 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80042f0:	f000 fa74 	bl	80047dc <MX_USART2_UART_Init>
  MX_DFSDM1_Init();
 80042f4:	f7ff f940 	bl	8003578 <MX_DFSDM1_Init>
  MX_DAC1_Init();
 80042f8:	f7ff f8a6 	bl	8003448 <MX_DAC1_Init>
  MX_TIM6_Init();
 80042fc:	f000 fa30 	bl	8004760 <MX_TIM6_Init>
      / hdfsdm1_channel2.Init.OutputClock.Divider
 8004300:	4b91      	ldr	r3, [pc, #580]	; (8004548 <main+0x2c4>)
 8004302:	4a92      	ldr	r2, [pc, #584]	; (800454c <main+0x2c8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68d2      	ldr	r2, [r2, #12]
 8004308:	fbb3 f3f2 	udiv	r3, r3, r2
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 800430c:	6a22      	ldr	r2, [r4, #32]
 800430e:	fbb3 f3f2 	udiv	r3, r3, r2
      / hdfsdm1_filter0.Init.FilterParam.IntOversampling;
 8004312:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004314:	fbb3 f3f2 	udiv	r3, r3, r2
 8004318:	ee00 3a10 	vmov	s0, r3
  init_dsp(sampling_frequency);
 800431c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8004320:	f7ff fcea 	bl	8003cf8 <init_dsp>
  HAL_TIM_Base_Start(&htim6);
 8004324:	488a      	ldr	r0, [pc, #552]	; (8004550 <main+0x2cc>)
 8004326:	f7fe fb11 	bl	800294c <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) dac1_out1_buf, NN * 2,
 800432a:	f04f 0800 	mov.w	r8, #0
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800432e:	2100      	movs	r1, #0
 8004330:	4888      	ldr	r0, [pc, #544]	; (8004554 <main+0x2d0>)
 8004332:	f7fc ff63 	bl	80011fc <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) dac1_out1_buf, NN * 2,
 8004336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800433a:	4632      	mov	r2, r6
 800433c:	4641      	mov	r1, r8
 800433e:	f8cd 8000 	str.w	r8, [sp]
 8004342:	4884      	ldr	r0, [pc, #528]	; (8004554 <main+0x2d0>)
 8004344:	f7fc ff84 	bl	8001250 <HAL_DAC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8004348:	2110      	movs	r1, #16
 800434a:	4882      	ldr	r0, [pc, #520]	; (8004554 <main+0x2d0>)
 800434c:	f7fc ff56 	bl	80011fc <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*) dac1_out2_buf, NN * 2,
 8004350:	463a      	mov	r2, r7
 8004352:	2110      	movs	r1, #16
 8004354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004358:	f8cd 8000 	str.w	r8, [sp]
 800435c:	487d      	ldr	r0, [pc, #500]	; (8004554 <main+0x2d0>)
 800435e:	f7fc ff77 	bl	8001250 <HAL_DAC_Start_DMA>
  HAL_Delay(1);
 8004362:	2001      	movs	r0, #1
 8004364:	f7fc feb0 	bl	80010c8 <HAL_Delay>
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, input_buf, NN * 2)
 8004368:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800436c:	4629      	mov	r1, r5
 800436e:	4620      	mov	r0, r4
 8004370:	f7fd f9f8 	bl	8001764 <HAL_DFSDM_FilterRegularStart_DMA>
 8004374:	b100      	cbz	r0, 8004378 <main+0xf4>
 8004376:	e7fe      	b.n	8004376 <main+0xf2>
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 8004378:	2201      	movs	r2, #1
 800437a:	4977      	ldr	r1, [pc, #476]	; (8004558 <main+0x2d4>)
 800437c:	4877      	ldr	r0, [pc, #476]	; (800455c <main+0x2d8>)
    if (new_pcm_data_a) {
 800437e:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8004564 <main+0x2e0>
      dsp(signal, output_mode);
 8004382:	4c77      	ldr	r4, [pc, #476]	; (8004560 <main+0x2dc>)
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 8004384:	f7fe fbb8 	bl	8002af8 <HAL_UART_Receive_IT>
    if (new_pcm_data_a) {
 8004388:	f89a 3000 	ldrb.w	r3, [sl]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d066      	beq.n	800445e <main+0x1da>
 8004390:	2300      	movs	r3, #0
        dac1_out1_buf[n] = (uint16_t) ((input_buf[n] >> 13) + 2048);
 8004392:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8004396:	1352      	asrs	r2, r2, #13
 8004398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800439c:	b292      	uxth	r2, r2
 800439e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
        dac1_out2_buf[n] = dac1_out1_buf[n];
 80043a2:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 80043a6:	b292      	uxth	r2, r2
 80043a8:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
      for (uint32_t n = 0; n < NN; n++) {
 80043ac:	3301      	adds	r3, #1
 80043ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b2:	d1ee      	bne.n	8004392 <main+0x10e>
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 80043b4:	f50d 51c0 	add.w	r1, sp, #6144	; 0x1800
 80043b8:	f50d 5000 	add.w	r0, sp, #8192	; 0x2000
 80043bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043c0:	3108      	adds	r1, #8
 80043c2:	3008      	adds	r0, #8
 80043c4:	f000 fabe 	bl	8004944 <arm_copy_f32>
 80043c8:	f50d 51e0 	add.w	r1, sp, #7168	; 0x1c00
 80043cc:	3108      	adds	r1, #8
      for (uint32_t n = 0; n < NN; n++) {
 80043ce:	2200      	movs	r2, #0
 80043d0:	4688      	mov	r8, r1
        signal_buf[n + NN_HALF] = (float32_t) (input_buf[n] >> 9);
 80043d2:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 80043d6:	125b      	asrs	r3, r3, #9
 80043d8:	ee07 3a90 	vmov	s15, r3
      for (uint32_t n = 0; n < NN; n++) {
 80043dc:	3201      	adds	r2, #1
        signal_buf[n + NN_HALF] = (float32_t) (input_buf[n] >> 9);
 80043de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for (uint32_t n = 0; n < NN; n++) {
 80043e2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
        signal_buf[n + NN_HALF] = (float32_t) (input_buf[n] >> 9);
 80043e6:	ece1 7a01 	vstmia	r1!, {s15}
      for (uint32_t n = 0; n < NN; n++) {
 80043ea:	d1f2      	bne.n	80043d2 <main+0x14e>
      arm_copy_f32(signal_buf, signal, NN);
 80043ec:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 80043f0:	f50d 50c0 	add.w	r0, sp, #6144	; 0x1800
 80043f4:	3108      	adds	r1, #8
 80043f6:	3008      	adds	r0, #8
 80043f8:	f000 faa4 	bl	8004944 <arm_copy_f32>
      if (printing) {
 80043fc:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8004568 <main+0x2e4>
      dsp(signal, output_mode);
 8004400:	7821      	ldrb	r1, [r4, #0]
 8004402:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 8004406:	3008      	adds	r0, #8
 8004408:	f7ff fe94 	bl	8004134 <dsp>
      if (printing) {
 800440c:	f899 3000 	ldrb.w	r3, [r9]
 8004410:	b143      	cbz	r3, 8004424 <main+0x1a0>
        printing = uart_tx(signal, output_mode, false);
 8004412:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 8004416:	7821      	ldrb	r1, [r4, #0]
 8004418:	2200      	movs	r2, #0
 800441a:	3008      	adds	r0, #8
 800441c:	f7ff fdd6 	bl	8003fcc <uart_tx>
 8004420:	f889 0000 	strb.w	r0, [r9]
      arm_copy_f32(signal_buf + NN_HALF, signal, NN);
 8004424:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 8004428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800442c:	3108      	adds	r1, #8
 800442e:	4640      	mov	r0, r8
 8004430:	f000 fa88 	bl	8004944 <arm_copy_f32>
      dsp(signal, output_mode);
 8004434:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 8004438:	7821      	ldrb	r1, [r4, #0]
 800443a:	3008      	adds	r0, #8
 800443c:	f7ff fe7a 	bl	8004134 <dsp>
      if (printing) {
 8004440:	f899 3000 	ldrb.w	r3, [r9]
 8004444:	b143      	cbz	r3, 8004458 <main+0x1d4>
        printing = uart_tx(signal, output_mode, true);
 8004446:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 800444a:	7821      	ldrb	r1, [r4, #0]
 800444c:	2201      	movs	r2, #1
 800444e:	3008      	adds	r0, #8
 8004450:	f7ff fdbc 	bl	8003fcc <uart_tx>
 8004454:	f889 0000 	strb.w	r0, [r9]
      new_pcm_data_a = false;
 8004458:	4a42      	ldr	r2, [pc, #264]	; (8004564 <main+0x2e0>)
 800445a:	2300      	movs	r3, #0
 800445c:	7013      	strb	r3, [r2, #0]
    if (new_pcm_data_b) {
 800445e:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800456c <main+0x2e8>
 8004462:	f899 3000 	ldrb.w	r3, [r9]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d08e      	beq.n	8004388 <main+0x104>
 800446a:	f44f 7300 	mov.w	r3, #512	; 0x200
        dac1_out1_buf[n] = (uint16_t) ((input_buf[n] >> 13) + 2048);
 800446e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8004472:	1352      	asrs	r2, r2, #13
 8004474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004478:	b292      	uxth	r2, r2
 800447a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
        dac1_out2_buf[n] = dac1_out1_buf[n];
 800447e:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 8004482:	b292      	uxth	r2, r2
 8004484:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
      for (uint32_t n = NN; n < NN * 2; n++) {
 8004488:	3301      	adds	r3, #1
 800448a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448e:	d1ee      	bne.n	800446e <main+0x1ea>
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 8004490:	f50d 51c0 	add.w	r1, sp, #6144	; 0x1800
 8004494:	f50d 5000 	add.w	r0, sp, #8192	; 0x2000
 8004498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800449c:	3108      	adds	r1, #8
 800449e:	3008      	adds	r0, #8
 80044a0:	f000 fa50 	bl	8004944 <arm_copy_f32>
 80044a4:	f50d 51e0 	add.w	r1, sp, #7168	; 0x1c00
 80044a8:	3108      	adds	r1, #8
 80044aa:	2200      	movs	r2, #0
 80044ac:	468b      	mov	fp, r1
        signal_buf[n + NN_HALF] = (float32_t) (input_buf[n + NN] >> 9);
 80044ae:	18ab      	adds	r3, r5, r2
 80044b0:	3204      	adds	r2, #4
 80044b2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80044b6:	125b      	asrs	r3, r3, #9
 80044b8:	ee07 3a90 	vmov	s15, r3
 80044bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for (uint32_t n = 0; n < NN; n++) {
 80044c0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
        signal_buf[n + NN_HALF] = (float32_t) (input_buf[n + NN] >> 9);
 80044c4:	ece1 7a01 	vstmia	r1!, {s15}
      for (uint32_t n = 0; n < NN; n++) {
 80044c8:	d1f1      	bne.n	80044ae <main+0x22a>
      arm_copy_f32(signal_buf, signal, NN);
 80044ca:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 80044ce:	f50d 50c0 	add.w	r0, sp, #6144	; 0x1800
 80044d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d6:	3108      	adds	r1, #8
 80044d8:	3008      	adds	r0, #8
 80044da:	f000 fa33 	bl	8004944 <arm_copy_f32>
      if (printing) {
 80044de:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8004568 <main+0x2e4>
      dsp(signal, output_mode);
 80044e2:	7821      	ldrb	r1, [r4, #0]
 80044e4:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 80044e8:	3008      	adds	r0, #8
 80044ea:	f7ff fe23 	bl	8004134 <dsp>
      if (printing) {
 80044ee:	f898 3000 	ldrb.w	r3, [r8]
 80044f2:	b143      	cbz	r3, 8004506 <main+0x282>
        printing = uart_tx(signal, output_mode, false);
 80044f4:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 80044f8:	7821      	ldrb	r1, [r4, #0]
 80044fa:	2200      	movs	r2, #0
 80044fc:	3008      	adds	r0, #8
 80044fe:	f7ff fd65 	bl	8003fcc <uart_tx>
 8004502:	f888 0000 	strb.w	r0, [r8]
      arm_copy_f32(signal_buf + NN_HALF, signal, NN);
 8004506:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 800450a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800450e:	3108      	adds	r1, #8
 8004510:	4658      	mov	r0, fp
 8004512:	f000 fa17 	bl	8004944 <arm_copy_f32>
      dsp(signal, output_mode);
 8004516:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 800451a:	7821      	ldrb	r1, [r4, #0]
 800451c:	3008      	adds	r0, #8
 800451e:	f7ff fe09 	bl	8004134 <dsp>
      if (printing) {
 8004522:	f898 3000 	ldrb.w	r3, [r8]
 8004526:	b143      	cbz	r3, 800453a <main+0x2b6>
        printing = uart_tx(signal, output_mode, true);
 8004528:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 800452c:	7821      	ldrb	r1, [r4, #0]
 800452e:	2201      	movs	r2, #1
 8004530:	3008      	adds	r0, #8
 8004532:	f7ff fd4b 	bl	8003fcc <uart_tx>
 8004536:	f888 0000 	strb.w	r0, [r8]
      new_pcm_data_b = false;
 800453a:	2300      	movs	r3, #0
 800453c:	f889 3000 	strb.w	r3, [r9]
 8004540:	e722      	b.n	8004388 <main+0x104>
 8004542:	bf00      	nop
 8004544:	20013544 	.word	0x20013544
 8004548:	2000000c 	.word	0x2000000c
 800454c:	200135e0 	.word	0x200135e0
 8004550:	20013658 	.word	0x20013658
 8004554:	200134a0 	.word	0x200134a0
 8004558:	20013654 	.word	0x20013654
 800455c:	200136e0 	.word	0x200136e0
 8004560:	20000009 	.word	0x20000009
 8004564:	2001248c 	.word	0x2001248c
 8004568:	2001248f 	.word	0x2001248f
 800456c:	2001248d 	.word	0x2001248d

08004570 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
 * @param  hdfsdm_filter DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
  if (!new_pcm_data_a && (hdfsdm_filter == &hdfsdm1_filter0)) {
 8004570:	4b04      	ldr	r3, [pc, #16]	; (8004584 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x14>)
 8004572:	781a      	ldrb	r2, [r3, #0]
 8004574:	b922      	cbnz	r2, 8004580 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x10>
 8004576:	4a04      	ldr	r2, [pc, #16]	; (8004588 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>)
 8004578:	4290      	cmp	r0, r2
    new_pcm_data_a = true;
 800457a:	bf04      	itt	eq
 800457c:	2201      	moveq	r2, #1
 800457e:	701a      	strbeq	r2, [r3, #0]
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	2001248c 	.word	0x2001248c
 8004588:	20013544 	.word	0x20013544

0800458c <HAL_DFSDM_FilterRegConvCpltCallback>:
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
  if (!new_pcm_data_b && (hdfsdm_filter == &hdfsdm1_filter0)) {
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <HAL_DFSDM_FilterRegConvCpltCallback+0x14>)
 800458e:	781a      	ldrb	r2, [r3, #0]
 8004590:	b922      	cbnz	r2, 800459c <HAL_DFSDM_FilterRegConvCpltCallback+0x10>
 8004592:	4a04      	ldr	r2, [pc, #16]	; (80045a4 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>)
 8004594:	4290      	cmp	r0, r2
    new_pcm_data_b = true;
 8004596:	bf04      	itt	eq
 8004598:	2201      	moveq	r2, #1
 800459a:	701a      	strbeq	r2, [r3, #0]
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	2001248d 	.word	0x2001248d
 80045a4:	20013544 	.word	0x20013544

080045a8 <_write>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
int _write(int file, char *ptr, int len) {
 80045a8:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295
int _write(int file, char *ptr, int len) {
 80045ae:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 80045b0:	4802      	ldr	r0, [pc, #8]	; (80045bc <_write+0x14>)
 80045b2:	b292      	uxth	r2, r2
 80045b4:	f7fe fe8b 	bl	80032ce <HAL_UART_Transmit>
  return len;
}
 80045b8:	4620      	mov	r0, r4
 80045ba:	bd10      	pop	{r4, pc}
 80045bc:	200136e0 	.word	0x200136e0

080045c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
  if (GPIO_Pin == GPIO_PIN_13) {  // User button (blue tactile switch)
 80045c0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    printing = true;
 80045c4:	bf02      	ittt	eq
 80045c6:	4b02      	ldreq	r3, [pc, #8]	; (80045d0 <HAL_GPIO_EXTI_Callback+0x10>)
 80045c8:	2201      	moveq	r2, #1
 80045ca:	701a      	strbeq	r2, [r3, #0]
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	2001248f 	.word	0x2001248f

080045d4 <HAL_UART_RxCpltCallback>:
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
  char cmd;
  cmd = rxbuf[0];
 80045d4:	4b10      	ldr	r3, [pc, #64]	; (8004618 <HAL_UART_RxCpltCallback+0x44>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
  switch(cmd) {
 80045d8:	2b50      	cmp	r3, #80	; 0x50
 80045da:	d00f      	beq.n	80045fc <HAL_UART_RxCpltCallback+0x28>
 80045dc:	d808      	bhi.n	80045f0 <HAL_UART_RxCpltCallback+0x1c>
 80045de:	2b4d      	cmp	r3, #77	; 0x4d
 80045e0:	d014      	beq.n	800460c <HAL_UART_RxCpltCallback+0x38>
    break;
  case 'm':
    enable_mean_normalization = false;
    break;
  default:
    output_mode = (mode) (cmd - 0x30);
 80045e2:	4a0e      	ldr	r2, [pc, #56]	; (800461c <HAL_UART_RxCpltCallback+0x48>)
 80045e4:	3b30      	subs	r3, #48	; 0x30
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	7013      	strb	r3, [r2, #0]
    printing = true;
 80045ea:	2201      	movs	r2, #1
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <HAL_UART_RxCpltCallback+0x4c>)
 80045ee:	e007      	b.n	8004600 <HAL_UART_RxCpltCallback+0x2c>
  switch(cmd) {
 80045f0:	2b6d      	cmp	r3, #109	; 0x6d
 80045f2:	d00e      	beq.n	8004612 <HAL_UART_RxCpltCallback+0x3e>
 80045f4:	2b70      	cmp	r3, #112	; 0x70
 80045f6:	d1f4      	bne.n	80045e2 <HAL_UART_RxCpltCallback+0xe>
    enable_pre_emphasis = false;
 80045f8:	2200      	movs	r2, #0
 80045fa:	e000      	b.n	80045fe <HAL_UART_RxCpltCallback+0x2a>
    enable_pre_emphasis = true;
 80045fc:	2201      	movs	r2, #1
    enable_pre_emphasis = false;
 80045fe:	4b09      	ldr	r3, [pc, #36]	; (8004624 <HAL_UART_RxCpltCallback+0x50>)
    printing = true;
 8004600:	701a      	strb	r2, [r3, #0]
    break;
  }
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 8004602:	4905      	ldr	r1, [pc, #20]	; (8004618 <HAL_UART_RxCpltCallback+0x44>)
 8004604:	4808      	ldr	r0, [pc, #32]	; (8004628 <HAL_UART_RxCpltCallback+0x54>)
 8004606:	2201      	movs	r2, #1
 8004608:	f7fe ba76 	b.w	8002af8 <HAL_UART_Receive_IT>
    enable_mean_normalization = true;
 800460c:	2201      	movs	r2, #1
    enable_mean_normalization = false;
 800460e:	4b07      	ldr	r3, [pc, #28]	; (800462c <HAL_UART_RxCpltCallback+0x58>)
 8004610:	e7f6      	b.n	8004600 <HAL_UART_RxCpltCallback+0x2c>
 8004612:	2200      	movs	r2, #0
 8004614:	e7fb      	b.n	800460e <HAL_UART_RxCpltCallback+0x3a>
 8004616:	bf00      	nop
 8004618:	20013654 	.word	0x20013654
 800461c:	20000009 	.word	0x20000009
 8004620:	2001248f 	.word	0x2001248f
 8004624:	20012481 	.word	0x20012481
 8004628:	200136e0 	.word	0x200136e0
 800462c:	20012480 	.word	0x20012480

08004630 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004630:	e7fe      	b.n	8004630 <_Error_Handler>
	...

08004634 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004634:	4b21      	ldr	r3, [pc, #132]	; (80046bc <HAL_MspInit+0x88>)
{
 8004636:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004638:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	661a      	str	r2, [r3, #96]	; 0x60
 8004640:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004642:	f002 0201 	and.w	r2, r2, #1
 8004646:	9200      	str	r2, [sp, #0]
 8004648:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800464a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800464c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004650:	659a      	str	r2, [r3, #88]	; 0x58
 8004652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004658:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800465a:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800465c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800465e:	f7fc fd41 	bl	80010e4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004662:	2200      	movs	r2, #0
 8004664:	4611      	mov	r1, r2
 8004666:	f06f 000b 	mvn.w	r0, #11
 800466a:	f7fc fd4d 	bl	8001108 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800466e:	2200      	movs	r2, #0
 8004670:	4611      	mov	r1, r2
 8004672:	f06f 000a 	mvn.w	r0, #10
 8004676:	f7fc fd47 	bl	8001108 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800467a:	2200      	movs	r2, #0
 800467c:	4611      	mov	r1, r2
 800467e:	f06f 0009 	mvn.w	r0, #9
 8004682:	f7fc fd41 	bl	8001108 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004686:	2200      	movs	r2, #0
 8004688:	4611      	mov	r1, r2
 800468a:	f06f 0004 	mvn.w	r0, #4
 800468e:	f7fc fd3b 	bl	8001108 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004692:	2200      	movs	r2, #0
 8004694:	4611      	mov	r1, r2
 8004696:	f06f 0003 	mvn.w	r0, #3
 800469a:	f7fc fd35 	bl	8001108 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800469e:	2200      	movs	r2, #0
 80046a0:	4611      	mov	r1, r2
 80046a2:	f06f 0001 	mvn.w	r0, #1
 80046a6:	f7fc fd2f 	bl	8001108 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80046aa:	2200      	movs	r2, #0
 80046ac:	4611      	mov	r1, r2
 80046ae:	f04f 30ff 	mov.w	r0, #4294967295
 80046b2:	f7fc fd29 	bl	8001108 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046b6:	b003      	add	sp, #12
 80046b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80046bc:	40021000 	.word	0x40021000

080046c0 <SVC_Handler>:
 80046c0:	4770      	bx	lr

080046c2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80046c2:	4770      	bx	lr

080046c4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80046c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046c6:	f7fc fcf1 	bl	80010ac <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80046ce:	f7fc bd7e 	b.w	80011ce <HAL_SYSTICK_IRQHandler>
	...

080046d4 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80046d4:	4801      	ldr	r0, [pc, #4]	; (80046dc <DMA1_Channel3_IRQHandler+0x8>)
 80046d6:	f7fd b95d 	b.w	8001994 <HAL_DMA_IRQHandler>
 80046da:	bf00      	nop
 80046dc:	200134b4 	.word	0x200134b4

080046e0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80046e0:	4801      	ldr	r0, [pc, #4]	; (80046e8 <DMA1_Channel4_IRQHandler+0x8>)
 80046e2:	f7fd b957 	b.w	8001994 <HAL_DMA_IRQHandler>
 80046e6:	bf00      	nop
 80046e8:	20013598 	.word	0x20013598

080046ec <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80046ec:	4801      	ldr	r0, [pc, #4]	; (80046f4 <DMA1_Channel7_IRQHandler+0x8>)
 80046ee:	f7fd b951 	b.w	8001994 <HAL_DMA_IRQHandler>
 80046f2:	bf00      	nop
 80046f4:	20013698 	.word	0x20013698

080046f8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046f8:	4801      	ldr	r0, [pc, #4]	; (8004700 <USART2_IRQHandler+0x8>)
 80046fa:	f7fe bb2b 	b.w	8002d54 <HAL_UART_IRQHandler>
 80046fe:	bf00      	nop
 8004700:	200136e0 	.word	0x200136e0

08004704 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004704:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004708:	f7fd ba6a 	b.w	8001be0 <HAL_GPIO_EXTI_IRQHandler>

0800470c <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 800470c:	4801      	ldr	r0, [pc, #4]	; (8004714 <DMA2_Channel5_IRQHandler+0x8>)
 800470e:	f7fd b941 	b.w	8001994 <HAL_DMA_IRQHandler>
 8004712:	bf00      	nop
 8004714:	200134fc 	.word	0x200134fc

08004718 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004718:	490f      	ldr	r1, [pc, #60]	; (8004758 <SystemInit+0x40>)
 800471a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800471e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004726:	4b0d      	ldr	r3, [pc, #52]	; (800475c <SystemInit+0x44>)
 8004728:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800472a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8004732:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800473a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800473e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004744:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800474c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800474e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004750:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004754:	608b      	str	r3, [r1, #8]
 8004756:	4770      	bx	lr
 8004758:	e000ed00 	.word	0xe000ed00
 800475c:	40021000 	.word	0x40021000

08004760 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 8004762:	4811      	ldr	r0, [pc, #68]	; (80047a8 <MX_TIM6_Init+0x48>)
 8004764:	4b11      	ldr	r3, [pc, #68]	; (80047ac <MX_TIM6_Init+0x4c>)
 8004766:	6003      	str	r3, [r0, #0]
  htim6.Init.Prescaler = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800476c:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 4095;
 800476e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004772:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004778:	f7fe f968 	bl	8002a4c <HAL_TIM_Base_Init>
 800477c:	b118      	cbz	r0, 8004786 <MX_TIM6_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
 800477e:	213d      	movs	r1, #61	; 0x3d
 8004780:	480b      	ldr	r0, [pc, #44]	; (80047b0 <MX_TIM6_Init+0x50>)
 8004782:	f7ff ff55 	bl	8004630 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004786:	2320      	movs	r3, #32
 8004788:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800478a:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800478c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800478e:	4806      	ldr	r0, [pc, #24]	; (80047a8 <MX_TIM6_Init+0x48>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004790:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004792:	f7fe f975 	bl	8002a80 <HAL_TIMEx_MasterConfigSynchronization>
 8004796:	b118      	cbz	r0, 80047a0 <MX_TIM6_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004798:	2144      	movs	r1, #68	; 0x44
 800479a:	4805      	ldr	r0, [pc, #20]	; (80047b0 <MX_TIM6_Init+0x50>)
 800479c:	f7ff ff48 	bl	8004630 <_Error_Handler>
  }

}
 80047a0:	b005      	add	sp, #20
 80047a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80047a6:	bf00      	nop
 80047a8:	20013658 	.word	0x20013658
 80047ac:	40001000 	.word	0x40001000
 80047b0:	0800a950 	.word	0x0800a950

080047b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 80047b4:	6802      	ldr	r2, [r0, #0]
 80047b6:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <HAL_TIM_Base_MspInit+0x24>)
 80047b8:	429a      	cmp	r2, r3
{
 80047ba:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM6)
 80047bc:	d10a      	bne.n	80047d4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80047be:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80047c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047c4:	f042 0210 	orr.w	r2, r2, #16
 80047c8:	659a      	str	r2, [r3, #88]	; 0x58
 80047ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80047d4:	b002      	add	sp, #8
 80047d6:	4770      	bx	lr
 80047d8:	40001000 	.word	0x40001000

080047dc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80047dc:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80047de:	480d      	ldr	r0, [pc, #52]	; (8004814 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 921600;
 80047e0:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <MX_USART2_UART_Init+0x3c>)
 80047e2:	f44f 2e61 	mov.w	lr, #921600	; 0xe1000
 80047e6:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047ea:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047ec:	2300      	movs	r3, #0
 80047ee:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047f0:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80047f2:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047f4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047f6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047f8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047fa:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047fc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80047fe:	f7fe fdef 	bl	80033e0 <HAL_UART_Init>
 8004802:	b128      	cbz	r0, 8004810 <MX_USART2_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004804:	2146      	movs	r1, #70	; 0x46
 8004806:	4805      	ldr	r0, [pc, #20]	; (800481c <MX_USART2_UART_Init+0x40>)
  }

}
 8004808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800480c:	f7ff bf10 	b.w	8004630 <_Error_Handler>
 8004810:	bd08      	pop	{r3, pc}
 8004812:	bf00      	nop
 8004814:	200136e0 	.word	0x200136e0
 8004818:	40004400 	.word	0x40004400
 800481c:	0800a95d 	.word	0x0800a95d

08004820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004820:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8004822:	6802      	ldr	r2, [r0, #0]
 8004824:	4b1f      	ldr	r3, [pc, #124]	; (80048a4 <HAL_UART_MspInit+0x84>)
 8004826:	429a      	cmp	r2, r3
{
 8004828:	b087      	sub	sp, #28
 800482a:	4606      	mov	r6, r0
  if(uartHandle->Instance==USART2)
 800482c:	d138      	bne.n	80048a0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800482e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004832:	2500      	movs	r5, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8004834:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8004836:	4c1c      	ldr	r4, [pc, #112]	; (80048a8 <HAL_UART_MspInit+0x88>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004838:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800483c:	659a      	str	r2, [r3, #88]	; 0x58
 800483e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004840:	9503      	str	r5, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 8004842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800484a:	230c      	movs	r3, #12
 800484c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800484e:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004850:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004852:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004858:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800485a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800485c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485e:	9702      	str	r7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004860:	f7fd f8e2 	bl	8001a28 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8004864:	4b11      	ldr	r3, [pc, #68]	; (80048ac <HAL_UART_MspInit+0x8c>)
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004866:	60e5      	str	r5, [r4, #12]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8004868:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800486c:	2310      	movs	r3, #16
 800486e:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004870:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	6123      	str	r3, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004876:	6165      	str	r5, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004878:	61a5      	str	r5, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800487a:	61e5      	str	r5, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800487c:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800487e:	f7fc ffc1 	bl	8001804 <HAL_DMA_Init>
 8004882:	b118      	cbz	r0, 800488c <HAL_UART_MspInit+0x6c>
    {
      _Error_Handler(__FILE__, __LINE__);
 8004884:	216f      	movs	r1, #111	; 0x6f
 8004886:	480a      	ldr	r0, [pc, #40]	; (80048b0 <HAL_UART_MspInit+0x90>)
 8004888:	f7ff fed2 	bl	8004630 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800488c:	2200      	movs	r2, #0
 800488e:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004890:	66b4      	str	r4, [r6, #104]	; 0x68
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004892:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004894:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004896:	f7fc fc37 	bl	8001108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800489a:	2026      	movs	r0, #38	; 0x26
 800489c:	f7fc fc68 	bl	8001170 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80048a0:	b007      	add	sp, #28
 80048a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048a4:	40004400 	.word	0x40004400
 80048a8:	20013698 	.word	0x20013698
 80048ac:	40020080 	.word	0x40020080
 80048b0:	0800a95d 	.word	0x0800a95d

080048b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80048b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80048b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80048ba:	e003      	b.n	80048c4 <LoopCopyDataInit>

080048bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80048be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80048c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80048c2:	3104      	adds	r1, #4

080048c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80048c4:	480b      	ldr	r0, [pc, #44]	; (80048f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80048c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80048ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80048cc:	d3f6      	bcc.n	80048bc <CopyDataInit>
	ldr	r2, =_sbss
 80048ce:	4a0b      	ldr	r2, [pc, #44]	; (80048fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80048d0:	e002      	b.n	80048d8 <LoopFillZerobss>

080048d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80048d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80048d4:	f842 3b04 	str.w	r3, [r2], #4

080048d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80048d8:	4b09      	ldr	r3, [pc, #36]	; (8004900 <LoopForever+0x16>)
	cmp	r2, r3
 80048da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80048dc:	d3f9      	bcc.n	80048d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80048de:	f7ff ff1b 	bl	8004718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048e2:	f001 fdf7 	bl	80064d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80048e6:	f7ff fccd 	bl	8004284 <main>

080048ea <LoopForever>:

LoopForever:
    b LoopForever
 80048ea:	e7fe      	b.n	80048ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80048ec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80048f0:	0801e8e8 	.word	0x0801e8e8
	ldr	r0, =_sdata
 80048f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80048f8:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 80048fc:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8004900:	2001375c 	.word	0x2001375c

08004904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004904:	e7fe      	b.n	8004904 <ADC1_2_IRQHandler>
	...

08004908 <arm_fill_f32>:
 8004908:	b410      	push	{r4}
 800490a:	088c      	lsrs	r4, r1, #2
 800490c:	d010      	beq.n	8004930 <arm_fill_f32+0x28>
 800490e:	f100 0310 	add.w	r3, r0, #16
 8004912:	4622      	mov	r2, r4
 8004914:	3a01      	subs	r2, #1
 8004916:	ed03 0a04 	vstr	s0, [r3, #-16]
 800491a:	ed03 0a03 	vstr	s0, [r3, #-12]
 800491e:	ed03 0a02 	vstr	s0, [r3, #-8]
 8004922:	ed03 0a01 	vstr	s0, [r3, #-4]
 8004926:	f103 0310 	add.w	r3, r3, #16
 800492a:	d1f3      	bne.n	8004914 <arm_fill_f32+0xc>
 800492c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8004930:	f011 0103 	ands.w	r1, r1, #3
 8004934:	d003      	beq.n	800493e <arm_fill_f32+0x36>
 8004936:	3901      	subs	r1, #1
 8004938:	eca0 0a01 	vstmia	r0!, {s0}
 800493c:	d1fb      	bne.n	8004936 <arm_fill_f32+0x2e>
 800493e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004942:	4770      	bx	lr

08004944 <arm_copy_f32>:
 8004944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004948:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800494c:	d01e      	beq.n	800498c <arm_copy_f32+0x48>
 800494e:	f100 0410 	add.w	r4, r0, #16
 8004952:	f101 0310 	add.w	r3, r1, #16
 8004956:	4645      	mov	r5, r8
 8004958:	f854 cc10 	ldr.w	ip, [r4, #-16]
 800495c:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 8004960:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8004964:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8004968:	f843 6c04 	str.w	r6, [r3, #-4]
 800496c:	3d01      	subs	r5, #1
 800496e:	f843 cc10 	str.w	ip, [r3, #-16]
 8004972:	f843 ec0c 	str.w	lr, [r3, #-12]
 8004976:	f843 7c08 	str.w	r7, [r3, #-8]
 800497a:	f104 0410 	add.w	r4, r4, #16
 800497e:	f103 0310 	add.w	r3, r3, #16
 8004982:	d1e9      	bne.n	8004958 <arm_copy_f32+0x14>
 8004984:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004988:	4440      	add	r0, r8
 800498a:	4441      	add	r1, r8
 800498c:	f012 0203 	ands.w	r2, r2, #3
 8004990:	d005      	beq.n	800499e <arm_copy_f32+0x5a>
 8004992:	f850 3b04 	ldr.w	r3, [r0], #4
 8004996:	f841 3b04 	str.w	r3, [r1], #4
 800499a:	3a01      	subs	r2, #1
 800499c:	d1f9      	bne.n	8004992 <arm_copy_f32+0x4e>
 800499e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049a2:	bf00      	nop

080049a4 <arm_mean_f32>:
 80049a4:	b430      	push	{r4, r5}
 80049a6:	088d      	lsrs	r5, r1, #2
 80049a8:	eddf 7a17 	vldr	s15, [pc, #92]	; 8004a08 <arm_mean_f32+0x64>
 80049ac:	d018      	beq.n	80049e0 <arm_mean_f32+0x3c>
 80049ae:	f100 0310 	add.w	r3, r0, #16
 80049b2:	462c      	mov	r4, r5
 80049b4:	ed13 7a04 	vldr	s14, [r3, #-16]
 80049b8:	ed53 5a03 	vldr	s11, [r3, #-12]
 80049bc:	ed13 6a02 	vldr	s12, [r3, #-8]
 80049c0:	ed53 6a01 	vldr	s13, [r3, #-4]
 80049c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049c8:	3c01      	subs	r4, #1
 80049ca:	ee77 7a25 	vadd.f32	s15, s14, s11
 80049ce:	f103 0310 	add.w	r3, r3, #16
 80049d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80049d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049da:	d1eb      	bne.n	80049b4 <arm_mean_f32+0x10>
 80049dc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80049e0:	f011 0303 	ands.w	r3, r1, #3
 80049e4:	d005      	beq.n	80049f2 <arm_mean_f32+0x4e>
 80049e6:	ecb0 7a01 	vldmia	r0!, {s14}
 80049ea:	3b01      	subs	r3, #1
 80049ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049f0:	d1f9      	bne.n	80049e6 <arm_mean_f32+0x42>
 80049f2:	ee07 1a10 	vmov	s14, r1
 80049f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049fa:	bc30      	pop	{r4, r5}
 80049fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a00:	edc2 6a00 	vstr	s13, [r2]
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	00000000 	.word	0x00000000

08004a0c <arm_rfft_fast_init_f32>:
 8004a0c:	084b      	lsrs	r3, r1, #1
 8004a0e:	2b80      	cmp	r3, #128	; 0x80
 8004a10:	b410      	push	{r4}
 8004a12:	8201      	strh	r1, [r0, #16]
 8004a14:	8003      	strh	r3, [r0, #0]
 8004a16:	d046      	beq.n	8004aa6 <arm_rfft_fast_init_f32+0x9a>
 8004a18:	d916      	bls.n	8004a48 <arm_rfft_fast_init_f32+0x3c>
 8004a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a1e:	d03c      	beq.n	8004a9a <arm_rfft_fast_init_f32+0x8e>
 8004a20:	d928      	bls.n	8004a74 <arm_rfft_fast_init_f32+0x68>
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a26:	d01f      	beq.n	8004a68 <arm_rfft_fast_init_f32+0x5c>
 8004a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a2c:	d112      	bne.n	8004a54 <arm_rfft_fast_init_f32+0x48>
 8004a2e:	4920      	ldr	r1, [pc, #128]	; (8004ab0 <arm_rfft_fast_init_f32+0xa4>)
 8004a30:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <arm_rfft_fast_init_f32+0xa8>)
 8004a32:	4b21      	ldr	r3, [pc, #132]	; (8004ab8 <arm_rfft_fast_init_f32+0xac>)
 8004a34:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8004a38:	8184      	strh	r4, [r0, #12]
 8004a3a:	6081      	str	r1, [r0, #8]
 8004a3c:	6042      	str	r2, [r0, #4]
 8004a3e:	6143      	str	r3, [r0, #20]
 8004a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a44:	2000      	movs	r0, #0
 8004a46:	4770      	bx	lr
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d01c      	beq.n	8004a86 <arm_rfft_fast_init_f32+0x7a>
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d006      	beq.n	8004a5e <arm_rfft_fast_init_f32+0x52>
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d01d      	beq.n	8004a90 <arm_rfft_fast_init_f32+0x84>
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	2438      	movs	r4, #56	; 0x38
 8004a60:	4916      	ldr	r1, [pc, #88]	; (8004abc <arm_rfft_fast_init_f32+0xb0>)
 8004a62:	4a17      	ldr	r2, [pc, #92]	; (8004ac0 <arm_rfft_fast_init_f32+0xb4>)
 8004a64:	4b17      	ldr	r3, [pc, #92]	; (8004ac4 <arm_rfft_fast_init_f32+0xb8>)
 8004a66:	e7e7      	b.n	8004a38 <arm_rfft_fast_init_f32+0x2c>
 8004a68:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8004a6c:	4916      	ldr	r1, [pc, #88]	; (8004ac8 <arm_rfft_fast_init_f32+0xbc>)
 8004a6e:	4a17      	ldr	r2, [pc, #92]	; (8004acc <arm_rfft_fast_init_f32+0xc0>)
 8004a70:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <arm_rfft_fast_init_f32+0xc4>)
 8004a72:	e7e1      	b.n	8004a38 <arm_rfft_fast_init_f32+0x2c>
 8004a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a78:	d1ec      	bne.n	8004a54 <arm_rfft_fast_init_f32+0x48>
 8004a7a:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8004a7e:	4915      	ldr	r1, [pc, #84]	; (8004ad4 <arm_rfft_fast_init_f32+0xc8>)
 8004a80:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <arm_rfft_fast_init_f32+0xcc>)
 8004a82:	4b16      	ldr	r3, [pc, #88]	; (8004adc <arm_rfft_fast_init_f32+0xd0>)
 8004a84:	e7d8      	b.n	8004a38 <arm_rfft_fast_init_f32+0x2c>
 8004a86:	2430      	movs	r4, #48	; 0x30
 8004a88:	4915      	ldr	r1, [pc, #84]	; (8004ae0 <arm_rfft_fast_init_f32+0xd4>)
 8004a8a:	4a16      	ldr	r2, [pc, #88]	; (8004ae4 <arm_rfft_fast_init_f32+0xd8>)
 8004a8c:	4b16      	ldr	r3, [pc, #88]	; (8004ae8 <arm_rfft_fast_init_f32+0xdc>)
 8004a8e:	e7d3      	b.n	8004a38 <arm_rfft_fast_init_f32+0x2c>
 8004a90:	2414      	movs	r4, #20
 8004a92:	4916      	ldr	r1, [pc, #88]	; (8004aec <arm_rfft_fast_init_f32+0xe0>)
 8004a94:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <arm_rfft_fast_init_f32+0xe4>)
 8004a96:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <arm_rfft_fast_init_f32+0xe8>)
 8004a98:	e7ce      	b.n	8004a38 <arm_rfft_fast_init_f32+0x2c>
 8004a9a:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8004a9e:	4916      	ldr	r1, [pc, #88]	; (8004af8 <arm_rfft_fast_init_f32+0xec>)
 8004aa0:	4a16      	ldr	r2, [pc, #88]	; (8004afc <arm_rfft_fast_init_f32+0xf0>)
 8004aa2:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <arm_rfft_fast_init_f32+0xf4>)
 8004aa4:	e7c8      	b.n	8004a38 <arm_rfft_fast_init_f32+0x2c>
 8004aa6:	24d0      	movs	r4, #208	; 0xd0
 8004aa8:	4916      	ldr	r1, [pc, #88]	; (8004b04 <arm_rfft_fast_init_f32+0xf8>)
 8004aaa:	4a17      	ldr	r2, [pc, #92]	; (8004b08 <arm_rfft_fast_init_f32+0xfc>)
 8004aac:	4b17      	ldr	r3, [pc, #92]	; (8004b0c <arm_rfft_fast_init_f32+0x100>)
 8004aae:	e7c3      	b.n	8004a38 <arm_rfft_fast_init_f32+0x2c>
 8004ab0:	08019f78 	.word	0x08019f78
 8004ab4:	0800a96c 	.word	0x0800a96c
 8004ab8:	08010adc 	.word	0x08010adc
 8004abc:	0800ea6c 	.word	0x0800ea6c
 8004ac0:	0801bd38 	.word	0x0801bd38
 8004ac4:	0801e228 	.word	0x0801e228
 8004ac8:	0801745c 	.word	0x0801745c
 8004acc:	0801535c 	.word	0x0801535c
 8004ad0:	0800eadc 	.word	0x0800eadc
 8004ad4:	0801deb8 	.word	0x0801deb8
 8004ad8:	08014adc 	.word	0x08014adc
 8004adc:	0801bf38 	.word	0x0801bf38
 8004ae0:	08018314 	.word	0x08018314
 8004ae4:	0801735c 	.word	0x0801735c
 8004ae8:	0800e96c 	.word	0x0800e96c
 8004aec:	0801826c 	.word	0x0801826c
 8004af0:	080152dc 	.word	0x080152dc
 8004af4:	08018294 	.word	0x08018294
 8004af8:	0801c738 	.word	0x0801c738
 8004afc:	08018f78 	.word	0x08018f78
 8004b00:	0801cab8 	.word	0x0801cab8
 8004b04:	0801e428 	.word	0x0801e428
 8004b08:	08018b78 	.word	0x08018b78
 8004b0c:	0801dab8 	.word	0x0801dab8

08004b10 <arm_rfft_fast_f32>:
 8004b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b14:	8a06      	ldrh	r6, [r0, #16]
 8004b16:	0876      	lsrs	r6, r6, #1
 8004b18:	4607      	mov	r7, r0
 8004b1a:	4615      	mov	r5, r2
 8004b1c:	8006      	strh	r6, [r0, #0]
 8004b1e:	460c      	mov	r4, r1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d15c      	bne.n	8004bde <arm_rfft_fast_f32+0xce>
 8004b24:	461a      	mov	r2, r3
 8004b26:	2301      	movs	r3, #1
 8004b28:	f000 fbe4 	bl	80052f4 <arm_cfft_f32>
 8004b2c:	edd4 7a00 	vldr	s15, [r4]
 8004b30:	ed94 7a01 	vldr	s14, [r4, #4]
 8004b34:	883e      	ldrh	r6, [r7, #0]
 8004b36:	6978      	ldr	r0, [r7, #20]
 8004b38:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004b3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b40:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 8004b44:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004b48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b4c:	3e01      	subs	r6, #1
 8004b4e:	ee26 7a83 	vmul.f32	s14, s13, s6
 8004b52:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004b56:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8004b5a:	ed85 7a00 	vstr	s14, [r5]
 8004b5e:	edc5 7a01 	vstr	s15, [r5, #4]
 8004b62:	3010      	adds	r0, #16
 8004b64:	f105 0210 	add.w	r2, r5, #16
 8004b68:	3b08      	subs	r3, #8
 8004b6a:	f104 0110 	add.w	r1, r4, #16
 8004b6e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b72:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004b76:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004b7a:	edd3 3a03 	vldr	s7, [r3, #12]
 8004b7e:	ed11 5a01 	vldr	s10, [r1, #-4]
 8004b82:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004b86:	ee77 7a66 	vsub.f32	s15, s14, s13
 8004b8a:	ee77 4a26 	vadd.f32	s9, s14, s13
 8004b8e:	ee33 4a85 	vadd.f32	s8, s7, s10
 8004b92:	ee66 6a27 	vmul.f32	s13, s12, s15
 8004b96:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004b9a:	ee35 5a63 	vsub.f32	s10, s10, s7
 8004b9e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004ba2:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004ba6:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004baa:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004bae:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004bb2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8004bb6:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004bba:	ee27 7a03 	vmul.f32	s14, s14, s6
 8004bbe:	3e01      	subs	r6, #1
 8004bc0:	ed02 7a02 	vstr	s14, [r2, #-8]
 8004bc4:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004bc8:	f1a3 0308 	sub.w	r3, r3, #8
 8004bcc:	f101 0108 	add.w	r1, r1, #8
 8004bd0:	f100 0008 	add.w	r0, r0, #8
 8004bd4:	f102 0208 	add.w	r2, r2, #8
 8004bd8:	d1c9      	bne.n	8004b6e <arm_rfft_fast_f32+0x5e>
 8004bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bde:	edd1 7a00 	vldr	s15, [r1]
 8004be2:	edd1 6a01 	vldr	s13, [r1, #4]
 8004be6:	6941      	ldr	r1, [r0, #20]
 8004be8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004bec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004bf0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004bf4:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004bf8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004bfc:	3e01      	subs	r6, #1
 8004bfe:	ed82 7a00 	vstr	s14, [r2]
 8004c02:	edc2 7a01 	vstr	s15, [r2, #4]
 8004c06:	00f0      	lsls	r0, r6, #3
 8004c08:	b3ee      	cbz	r6, 8004c86 <arm_rfft_fast_f32+0x176>
 8004c0a:	3808      	subs	r0, #8
 8004c0c:	f101 0e10 	add.w	lr, r1, #16
 8004c10:	4420      	add	r0, r4
 8004c12:	f104 0110 	add.w	r1, r4, #16
 8004c16:	f102 0c10 	add.w	ip, r2, #16
 8004c1a:	ed90 7a02 	vldr	s14, [r0, #8]
 8004c1e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004c22:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8004c26:	ed90 4a03 	vldr	s8, [r0, #12]
 8004c2a:	ed11 5a01 	vldr	s10, [r1, #-4]
 8004c2e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8004c32:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8004c36:	ee74 4a05 	vadd.f32	s9, s8, s10
 8004c3a:	ee26 3a27 	vmul.f32	s6, s12, s15
 8004c3e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004c42:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004c46:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004c4a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004c4e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004c52:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004c56:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8004c5a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004c5e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8004c62:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004c66:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004c6a:	3e01      	subs	r6, #1
 8004c6c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8004c70:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8004c74:	f1a0 0008 	sub.w	r0, r0, #8
 8004c78:	f101 0108 	add.w	r1, r1, #8
 8004c7c:	f10e 0e08 	add.w	lr, lr, #8
 8004c80:	f10c 0c08 	add.w	ip, ip, #8
 8004c84:	d1c9      	bne.n	8004c1a <arm_rfft_fast_f32+0x10a>
 8004c86:	461a      	mov	r2, r3
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c92:	f000 bb2f 	b.w	80052f4 <arm_cfft_f32>
 8004c96:	bf00      	nop

08004c98 <arm_cfft_radix8by2_f32>:
 8004c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9c:	ed2d 8b08 	vpush	{d8-d11}
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	4608      	mov	r0, r1
 8004ca4:	f8b7 e000 	ldrh.w	lr, [r7]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8004cae:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8004cb2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8004cb6:	f000 80b0 	beq.w	8004e1a <arm_cfft_radix8by2_f32+0x182>
 8004cba:	008b      	lsls	r3, r1, #2
 8004cbc:	3310      	adds	r3, #16
 8004cbe:	18c6      	adds	r6, r0, r3
 8004cc0:	3210      	adds	r2, #16
 8004cc2:	4443      	add	r3, r8
 8004cc4:	f100 0510 	add.w	r5, r0, #16
 8004cc8:	f108 0410 	add.w	r4, r8, #16
 8004ccc:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004cd0:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004cd4:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004cd8:	ed53 3a03 	vldr	s7, [r3, #-12]
 8004cdc:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004ce0:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004ce4:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004ce8:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004cec:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004cf0:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004cf4:	ed15 6a03 	vldr	s12, [r5, #-12]
 8004cf8:	ed15 7a01 	vldr	s14, [r5, #-4]
 8004cfc:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004d00:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004d04:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004d08:	ed55 4a02 	vldr	s9, [r5, #-8]
 8004d0c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8004d10:	ee36 ba26 	vadd.f32	s22, s12, s13
 8004d14:	ee37 aa27 	vadd.f32	s20, s14, s15
 8004d18:	ee72 9a04 	vadd.f32	s19, s4, s8
 8004d1c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8004d20:	ee31 8a05 	vadd.f32	s16, s2, s10
 8004d24:	ee74 aa80 	vadd.f32	s21, s9, s0
 8004d28:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8004d2c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8004d30:	ed05 ba03 	vstr	s22, [r5, #-12]
 8004d34:	ed45 aa02 	vstr	s21, [r5, #-8]
 8004d38:	ed05 aa01 	vstr	s20, [r5, #-4]
 8004d3c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004d40:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004d44:	ed06 9a03 	vstr	s18, [r6, #-12]
 8004d48:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004d4c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004d50:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004d54:	ed12 6a03 	vldr	s12, [r2, #-12]
 8004d58:	ed52 2a04 	vldr	s5, [r2, #-16]
 8004d5c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004d60:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004d64:	ee26 8a86 	vmul.f32	s16, s13, s12
 8004d68:	ee24 2a06 	vmul.f32	s4, s8, s12
 8004d6c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8004d70:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004d74:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004d78:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8004d7c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8004d80:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004d84:	ee36 6a04 	vadd.f32	s12, s12, s8
 8004d88:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004d8c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8004d90:	ee71 2a88 	vadd.f32	s5, s3, s16
 8004d94:	ed44 6a03 	vstr	s13, [r4, #-12]
 8004d98:	ed44 2a04 	vstr	s5, [r4, #-16]
 8004d9c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8004da0:	ed03 6a03 	vstr	s12, [r3, #-12]
 8004da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004da8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8004dac:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004db0:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004db4:	ee35 6a41 	vsub.f32	s12, s10, s2
 8004db8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004dbc:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004dc0:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004dc4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8004dc8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004dcc:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004dd0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004dd4:	ee26 7a07 	vmul.f32	s14, s12, s14
 8004dd8:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004ddc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004de0:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004de4:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004de8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004dec:	f1be 0e01 	subs.w	lr, lr, #1
 8004df0:	ed44 5a02 	vstr	s11, [r4, #-8]
 8004df4:	f105 0510 	add.w	r5, r5, #16
 8004df8:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004dfc:	f106 0610 	add.w	r6, r6, #16
 8004e00:	ed03 6a02 	vstr	s12, [r3, #-8]
 8004e04:	ed03 7a01 	vstr	s14, [r3, #-4]
 8004e08:	f102 0210 	add.w	r2, r2, #16
 8004e0c:	f104 0410 	add.w	r4, r4, #16
 8004e10:	f103 0310 	add.w	r3, r3, #16
 8004e14:	f47f af5a 	bne.w	8004ccc <arm_cfft_radix8by2_f32+0x34>
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	b28c      	uxth	r4, r1
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	2302      	movs	r3, #2
 8004e20:	f001 f866 	bl	8005ef0 <arm_radix8_butterfly_f32>
 8004e24:	ecbd 8b08 	vpop	{d8-d11}
 8004e28:	4621      	mov	r1, r4
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4640      	mov	r0, r8
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e34:	f001 b85c 	b.w	8005ef0 <arm_radix8_butterfly_f32>

08004e38 <arm_cfft_radix8by4_f32>:
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	ed2d 8b0a 	vpush	{d8-d12}
 8004e40:	8802      	ldrh	r2, [r0, #0]
 8004e42:	ed91 6a00 	vldr	s12, [r1]
 8004e46:	b08f      	sub	sp, #60	; 0x3c
 8004e48:	460f      	mov	r7, r1
 8004e4a:	0852      	lsrs	r2, r2, #1
 8004e4c:	6841      	ldr	r1, [r0, #4]
 8004e4e:	900c      	str	r0, [sp, #48]	; 0x30
 8004e50:	0093      	lsls	r3, r2, #2
 8004e52:	4638      	mov	r0, r7
 8004e54:	4418      	add	r0, r3
 8004e56:	4606      	mov	r6, r0
 8004e58:	9009      	str	r0, [sp, #36]	; 0x24
 8004e5a:	4418      	add	r0, r3
 8004e5c:	edd0 6a00 	vldr	s13, [r0]
 8004e60:	ed96 4a00 	vldr	s8, [r6]
 8004e64:	edd6 2a01 	vldr	s5, [r6, #4]
 8004e68:	edd0 7a01 	vldr	s15, [r0, #4]
 8004e6c:	900a      	str	r0, [sp, #40]	; 0x28
 8004e6e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8004e72:	4604      	mov	r4, r0
 8004e74:	4625      	mov	r5, r4
 8004e76:	441c      	add	r4, r3
 8004e78:	edd4 4a00 	vldr	s9, [r4]
 8004e7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e80:	ed94 3a01 	vldr	s6, [r4, #4]
 8004e84:	9401      	str	r4, [sp, #4]
 8004e86:	ee35 5a84 	vadd.f32	s10, s11, s8
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004e90:	463e      	mov	r6, r7
 8004e92:	ee15 ea10 	vmov	lr, s10
 8004e96:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004e9a:	f846 eb08 	str.w	lr, [r6], #8
 8004e9e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004ea2:	ed90 5a01 	vldr	s10, [r0, #4]
 8004ea6:	9605      	str	r6, [sp, #20]
 8004ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eac:	9e01      	ldr	r6, [sp, #4]
 8004eae:	9707      	str	r7, [sp, #28]
 8004eb0:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8004eb4:	ed96 2a01 	vldr	s4, [r6, #4]
 8004eb8:	ee36 7a05 	vadd.f32	s14, s12, s10
 8004ebc:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8004ec0:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8004ec4:	ee77 7a84 	vadd.f32	s15, s15, s8
 8004ec8:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8004ecc:	4604      	mov	r4, r0
 8004ece:	46a3      	mov	fp, r4
 8004ed0:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004ed4:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004ed8:	ee14 8a10 	vmov	r8, s8
 8004edc:	46a4      	mov	ip, r4
 8004ede:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8004ee2:	ed87 7a01 	vstr	s14, [r7, #4]
 8004ee6:	f84b 8b08 	str.w	r8, [fp], #8
 8004eea:	f1ac 0704 	sub.w	r7, ip, #4
 8004eee:	ed8c 5a01 	vstr	s10, [ip, #4]
 8004ef2:	f101 0c08 	add.w	ip, r1, #8
 8004ef6:	462c      	mov	r4, r5
 8004ef8:	f8cd c010 	str.w	ip, [sp, #16]
 8004efc:	ee15 ca90 	vmov	ip, s11
 8004f00:	ee36 6a62 	vsub.f32	s12, s12, s5
 8004f04:	f844 cb08 	str.w	ip, [r4], #8
 8004f08:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8004f0c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8004f10:	9406      	str	r4, [sp, #24]
 8004f12:	ee76 6a83 	vadd.f32	s13, s13, s6
 8004f16:	f101 0410 	add.w	r4, r1, #16
 8004f1a:	0852      	lsrs	r2, r2, #1
 8004f1c:	9402      	str	r4, [sp, #8]
 8004f1e:	ed85 6a01 	vstr	s12, [r5, #4]
 8004f22:	462c      	mov	r4, r5
 8004f24:	f101 0518 	add.w	r5, r1, #24
 8004f28:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f2a:	46b2      	mov	sl, r6
 8004f2c:	9503      	str	r5, [sp, #12]
 8004f2e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004f32:	3a02      	subs	r2, #2
 8004f34:	ee16 5a90 	vmov	r5, s13
 8004f38:	46b6      	mov	lr, r6
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	0852      	lsrs	r2, r2, #1
 8004f3e:	f84a 5b08 	str.w	r5, [sl], #8
 8004f42:	f1a0 0604 	sub.w	r6, r0, #4
 8004f46:	edce 7a01 	vstr	s15, [lr, #4]
 8004f4a:	9208      	str	r2, [sp, #32]
 8004f4c:	f000 8130 	beq.w	80051b0 <arm_cfft_radix8by4_f32+0x378>
 8004f50:	4691      	mov	r9, r2
 8004f52:	9a07      	ldr	r2, [sp, #28]
 8004f54:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004f58:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004f5c:	3b08      	subs	r3, #8
 8004f5e:	f102 0510 	add.w	r5, r2, #16
 8004f62:	f101 0c20 	add.w	ip, r1, #32
 8004f66:	f1a4 020c 	sub.w	r2, r4, #12
 8004f6a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8004f6e:	4433      	add	r3, r6
 8004f70:	3410      	adds	r4, #16
 8004f72:	4650      	mov	r0, sl
 8004f74:	4659      	mov	r1, fp
 8004f76:	ed55 3a02 	vldr	s7, [r5, #-8]
 8004f7a:	ed14 5a02 	vldr	s10, [r4, #-8]
 8004f7e:	ed91 7a00 	vldr	s14, [r1]
 8004f82:	edd0 7a00 	vldr	s15, [r0]
 8004f86:	ed54 5a01 	vldr	s11, [r4, #-4]
 8004f8a:	ed15 4a01 	vldr	s8, [r5, #-4]
 8004f8e:	edd0 6a01 	vldr	s13, [r0, #4]
 8004f92:	ed91 6a01 	vldr	s12, [r1, #4]
 8004f96:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004f9a:	ee34 0a25 	vadd.f32	s0, s8, s11
 8004f9e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8004fa2:	ee74 5a65 	vsub.f32	s11, s8, s11
 8004fa6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8004faa:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8004fae:	ed45 4a02 	vstr	s9, [r5, #-8]
 8004fb2:	edd1 4a01 	vldr	s9, [r1, #4]
 8004fb6:	ed90 4a01 	vldr	s8, [r0, #4]
 8004fba:	ee70 4a24 	vadd.f32	s9, s0, s9
 8004fbe:	ee75 aa06 	vadd.f32	s21, s10, s12
 8004fc2:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004fc6:	ee35 aac7 	vsub.f32	s20, s11, s14
 8004fca:	ed45 4a01 	vstr	s9, [r5, #-4]
 8004fce:	edd6 1a00 	vldr	s3, [r6]
 8004fd2:	edd7 0a00 	vldr	s1, [r7]
 8004fd6:	ed92 4a02 	vldr	s8, [r2, #8]
 8004fda:	edd3 3a02 	vldr	s7, [r3, #8]
 8004fde:	ed93 2a01 	vldr	s4, [r3, #4]
 8004fe2:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004fe6:	edd2 2a01 	vldr	s5, [r2, #4]
 8004fea:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004fee:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8004ff2:	ee39 3a81 	vadd.f32	s6, s19, s2
 8004ff6:	ee74 8a84 	vadd.f32	s17, s9, s8
 8004ffa:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8004ffe:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8005002:	ee7a aae6 	vsub.f32	s21, s21, s13
 8005006:	ee18 aa90 	vmov	sl, s17
 800500a:	f847 a908 	str.w	sl, [r7], #-8
 800500e:	edd2 8a01 	vldr	s17, [r2, #4]
 8005012:	ed93 9a01 	vldr	s18, [r3, #4]
 8005016:	ee73 8a28 	vadd.f32	s17, s6, s17
 800501a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800501e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005022:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005026:	edc7 8a01 	vstr	s17, [r7, #4]
 800502a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800502e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8005032:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005036:	ee6a ba28 	vmul.f32	s23, s20, s17
 800503a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800503e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8005042:	ee31 9a20 	vadd.f32	s18, s2, s1
 8005046:	ee79 9a82 	vadd.f32	s19, s19, s4
 800504a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800504e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8005052:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005056:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800505a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800505e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8005062:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8005066:	ee1c aa10 	vmov	sl, s24
 800506a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800506e:	f841 ab08 	str.w	sl, [r1], #8
 8005072:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8005076:	ee3b bacb 	vsub.f32	s22, s23, s22
 800507a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800507e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005082:	ed01 aa01 	vstr	s20, [r1, #-4]
 8005086:	edc2 8a01 	vstr	s17, [r2, #4]
 800508a:	ed82 ba02 	vstr	s22, [r2, #8]
 800508e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8005092:	ee74 3a63 	vsub.f32	s7, s8, s7
 8005096:	ee38 8a47 	vsub.f32	s16, s16, s14
 800509a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800509e:	ee30 0a46 	vsub.f32	s0, s0, s12
 80050a2:	ee33 3a42 	vsub.f32	s6, s6, s4
 80050a6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80050aa:	ee30 0a66 	vsub.f32	s0, s0, s13
 80050ae:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80050b2:	ee63 8a04 	vmul.f32	s17, s6, s8
 80050b6:	ee28 aa24 	vmul.f32	s20, s16, s9
 80050ba:	ee60 9a04 	vmul.f32	s19, s0, s8
 80050be:	ee28 8a04 	vmul.f32	s16, s16, s8
 80050c2:	ee20 0a24 	vmul.f32	s0, s0, s9
 80050c6:	ee63 3a84 	vmul.f32	s7, s7, s8
 80050ca:	ee39 4a68 	vsub.f32	s8, s18, s17
 80050ce:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80050d2:	ee14 aa10 	vmov	sl, s8
 80050d6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80050da:	ee63 4a24 	vmul.f32	s9, s6, s9
 80050de:	ed44 9a02 	vstr	s19, [r4, #-8]
 80050e2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80050e6:	ed04 0a01 	vstr	s0, [r4, #-4]
 80050ea:	f846 a908 	str.w	sl, [r6], #-8
 80050ee:	ee35 6a46 	vsub.f32	s12, s10, s12
 80050f2:	ee35 7a87 	vadd.f32	s14, s11, s14
 80050f6:	edc6 3a01 	vstr	s7, [r6, #4]
 80050fa:	ee76 6a26 	vadd.f32	s13, s12, s13
 80050fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005102:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8005106:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800510a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800510e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005112:	ee72 2a62 	vsub.f32	s5, s4, s5
 8005116:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800511a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800511e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005122:	ee62 0a86 	vmul.f32	s1, s5, s12
 8005126:	ee66 6a86 	vmul.f32	s13, s13, s12
 800512a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800512e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8005132:	ee62 2a87 	vmul.f32	s5, s5, s14
 8005136:	ee21 1a07 	vmul.f32	s2, s2, s14
 800513a:	ee15 aa90 	vmov	sl, s11
 800513e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005142:	f840 ab08 	str.w	sl, [r0], #8
 8005146:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800514a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800514e:	f1b9 0901 	subs.w	r9, r9, #1
 8005152:	ed40 7a01 	vstr	s15, [r0, #-4]
 8005156:	f105 0508 	add.w	r5, r5, #8
 800515a:	ed83 1a02 	vstr	s2, [r3, #8]
 800515e:	edc3 2a01 	vstr	s5, [r3, #4]
 8005162:	f108 0808 	add.w	r8, r8, #8
 8005166:	f1a2 0208 	sub.w	r2, r2, #8
 800516a:	f10c 0c10 	add.w	ip, ip, #16
 800516e:	f104 0408 	add.w	r4, r4, #8
 8005172:	f10e 0e18 	add.w	lr, lr, #24
 8005176:	f1a3 0308 	sub.w	r3, r3, #8
 800517a:	f47f aefc 	bne.w	8004f76 <arm_cfft_radix8by4_f32+0x13e>
 800517e:	9908      	ldr	r1, [sp, #32]
 8005180:	9802      	ldr	r0, [sp, #8]
 8005182:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8005186:	00cb      	lsls	r3, r1, #3
 8005188:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800518c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005190:	9102      	str	r1, [sp, #8]
 8005192:	9905      	ldr	r1, [sp, #20]
 8005194:	4419      	add	r1, r3
 8005196:	9105      	str	r1, [sp, #20]
 8005198:	9904      	ldr	r1, [sp, #16]
 800519a:	4419      	add	r1, r3
 800519c:	9104      	str	r1, [sp, #16]
 800519e:	9906      	ldr	r1, [sp, #24]
 80051a0:	449b      	add	fp, r3
 80051a2:	4419      	add	r1, r3
 80051a4:	449a      	add	sl, r3
 80051a6:	9b03      	ldr	r3, [sp, #12]
 80051a8:	9106      	str	r1, [sp, #24]
 80051aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051ae:	9303      	str	r3, [sp, #12]
 80051b0:	9a05      	ldr	r2, [sp, #20]
 80051b2:	9806      	ldr	r0, [sp, #24]
 80051b4:	ed92 4a00 	vldr	s8, [r2]
 80051b8:	ed90 7a00 	vldr	s14, [r0]
 80051bc:	ed9b 3a00 	vldr	s6, [fp]
 80051c0:	edda 3a00 	vldr	s7, [sl]
 80051c4:	edd2 4a01 	vldr	s9, [r2, #4]
 80051c8:	edd0 6a01 	vldr	s13, [r0, #4]
 80051cc:	ed9a 2a01 	vldr	s4, [sl, #4]
 80051d0:	eddb 7a01 	vldr	s15, [fp, #4]
 80051d4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80051d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80051da:	ee34 6a07 	vadd.f32	s12, s8, s14
 80051de:	ee74 5aa6 	vadd.f32	s11, s9, s13
 80051e2:	ee36 5a03 	vadd.f32	s10, s12, s6
 80051e6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80051ea:	ee35 5a23 	vadd.f32	s10, s10, s7
 80051ee:	ee34 7a47 	vsub.f32	s14, s8, s14
 80051f2:	ed82 5a00 	vstr	s10, [r2]
 80051f6:	ed9b 5a01 	vldr	s10, [fp, #4]
 80051fa:	edda 4a01 	vldr	s9, [sl, #4]
 80051fe:	ee35 5a85 	vadd.f32	s10, s11, s10
 8005202:	ee37 4a27 	vadd.f32	s8, s14, s15
 8005206:	ee35 5a24 	vadd.f32	s10, s10, s9
 800520a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800520e:	ed82 5a01 	vstr	s10, [r2, #4]
 8005212:	9a04      	ldr	r2, [sp, #16]
 8005214:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8005218:	edd2 1a00 	vldr	s3, [r2]
 800521c:	edd2 2a01 	vldr	s5, [r2, #4]
 8005220:	9a02      	ldr	r2, [sp, #8]
 8005222:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005226:	ee36 6a43 	vsub.f32	s12, s12, s6
 800522a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800522e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005232:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005236:	ee25 5a21 	vmul.f32	s10, s10, s3
 800523a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800523e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005242:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005246:	edcb 2a00 	vstr	s5, [fp]
 800524a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800524e:	ed92 4a01 	vldr	s8, [r2, #4]
 8005252:	ed92 5a00 	vldr	s10, [r2]
 8005256:	9a03      	ldr	r2, [sp, #12]
 8005258:	ee36 6a63 	vsub.f32	s12, s12, s7
 800525c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005260:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005264:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005268:	ee26 6a04 	vmul.f32	s12, s12, s8
 800526c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005270:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005274:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8005278:	ee76 6a83 	vadd.f32	s13, s13, s6
 800527c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005280:	ed80 6a01 	vstr	s12, [r0, #4]
 8005284:	edc0 5a00 	vstr	s11, [r0]
 8005288:	edd2 5a01 	vldr	s11, [r2, #4]
 800528c:	9807      	ldr	r0, [sp, #28]
 800528e:	ee77 7a02 	vadd.f32	s15, s14, s4
 8005292:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8005296:	edd2 6a00 	vldr	s13, [r2]
 800529a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800529e:	ee67 6a26 	vmul.f32	s13, s14, s13
 80052a2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80052a6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80052aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80052ae:	ee36 7a07 	vadd.f32	s14, s12, s14
 80052b2:	edca 7a01 	vstr	s15, [sl, #4]
 80052b6:	ed8a 7a00 	vstr	s14, [sl]
 80052ba:	6872      	ldr	r2, [r6, #4]
 80052bc:	4621      	mov	r1, r4
 80052be:	2304      	movs	r3, #4
 80052c0:	f000 fe16 	bl	8005ef0 <arm_radix8_butterfly_f32>
 80052c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052c6:	6872      	ldr	r2, [r6, #4]
 80052c8:	4621      	mov	r1, r4
 80052ca:	2304      	movs	r3, #4
 80052cc:	f000 fe10 	bl	8005ef0 <arm_radix8_butterfly_f32>
 80052d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80052d2:	6872      	ldr	r2, [r6, #4]
 80052d4:	4621      	mov	r1, r4
 80052d6:	2304      	movs	r3, #4
 80052d8:	f000 fe0a 	bl	8005ef0 <arm_radix8_butterfly_f32>
 80052dc:	6872      	ldr	r2, [r6, #4]
 80052de:	9801      	ldr	r0, [sp, #4]
 80052e0:	4621      	mov	r1, r4
 80052e2:	2304      	movs	r3, #4
 80052e4:	b00f      	add	sp, #60	; 0x3c
 80052e6:	ecbd 8b0a 	vpop	{d8-d12}
 80052ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ee:	f000 bdff 	b.w	8005ef0 <arm_radix8_butterfly_f32>
 80052f2:	bf00      	nop

080052f4 <arm_cfft_f32>:
 80052f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f8:	2a01      	cmp	r2, #1
 80052fa:	4606      	mov	r6, r0
 80052fc:	4617      	mov	r7, r2
 80052fe:	460c      	mov	r4, r1
 8005300:	4698      	mov	r8, r3
 8005302:	8805      	ldrh	r5, [r0, #0]
 8005304:	d054      	beq.n	80053b0 <arm_cfft_f32+0xbc>
 8005306:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800530a:	d04c      	beq.n	80053a6 <arm_cfft_f32+0xb2>
 800530c:	d916      	bls.n	800533c <arm_cfft_f32+0x48>
 800530e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005312:	d01a      	beq.n	800534a <arm_cfft_f32+0x56>
 8005314:	d95c      	bls.n	80053d0 <arm_cfft_f32+0xdc>
 8005316:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800531a:	d044      	beq.n	80053a6 <arm_cfft_f32+0xb2>
 800531c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005320:	d105      	bne.n	800532e <arm_cfft_f32+0x3a>
 8005322:	2301      	movs	r3, #1
 8005324:	6872      	ldr	r2, [r6, #4]
 8005326:	4629      	mov	r1, r5
 8005328:	4620      	mov	r0, r4
 800532a:	f000 fde1 	bl	8005ef0 <arm_radix8_butterfly_f32>
 800532e:	f1b8 0f00 	cmp.w	r8, #0
 8005332:	d111      	bne.n	8005358 <arm_cfft_f32+0x64>
 8005334:	2f01      	cmp	r7, #1
 8005336:	d016      	beq.n	8005366 <arm_cfft_f32+0x72>
 8005338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800533c:	2d20      	cmp	r5, #32
 800533e:	d032      	beq.n	80053a6 <arm_cfft_f32+0xb2>
 8005340:	d94a      	bls.n	80053d8 <arm_cfft_f32+0xe4>
 8005342:	2d40      	cmp	r5, #64	; 0x40
 8005344:	d0ed      	beq.n	8005322 <arm_cfft_f32+0x2e>
 8005346:	2d80      	cmp	r5, #128	; 0x80
 8005348:	d1f1      	bne.n	800532e <arm_cfft_f32+0x3a>
 800534a:	4621      	mov	r1, r4
 800534c:	4630      	mov	r0, r6
 800534e:	f7ff fca3 	bl	8004c98 <arm_cfft_radix8by2_f32>
 8005352:	f1b8 0f00 	cmp.w	r8, #0
 8005356:	d0ed      	beq.n	8005334 <arm_cfft_f32+0x40>
 8005358:	68b2      	ldr	r2, [r6, #8]
 800535a:	89b1      	ldrh	r1, [r6, #12]
 800535c:	4620      	mov	r0, r4
 800535e:	f7fa ff37 	bl	80001d0 <arm_bitreversal_32>
 8005362:	2f01      	cmp	r7, #1
 8005364:	d1e8      	bne.n	8005338 <arm_cfft_f32+0x44>
 8005366:	ee07 5a90 	vmov	s15, r5
 800536a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005372:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005376:	2d00      	cmp	r5, #0
 8005378:	d0de      	beq.n	8005338 <arm_cfft_f32+0x44>
 800537a:	f104 0108 	add.w	r1, r4, #8
 800537e:	2300      	movs	r3, #0
 8005380:	3301      	adds	r3, #1
 8005382:	429d      	cmp	r5, r3
 8005384:	f101 0108 	add.w	r1, r1, #8
 8005388:	ed11 7a04 	vldr	s14, [r1, #-16]
 800538c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005390:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005394:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005398:	ed01 7a04 	vstr	s14, [r1, #-16]
 800539c:	ed41 7a03 	vstr	s15, [r1, #-12]
 80053a0:	d1ee      	bne.n	8005380 <arm_cfft_f32+0x8c>
 80053a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a6:	4621      	mov	r1, r4
 80053a8:	4630      	mov	r0, r6
 80053aa:	f7ff fd45 	bl	8004e38 <arm_cfft_radix8by4_f32>
 80053ae:	e7be      	b.n	800532e <arm_cfft_f32+0x3a>
 80053b0:	b1ad      	cbz	r5, 80053de <arm_cfft_f32+0xea>
 80053b2:	f101 030c 	add.w	r3, r1, #12
 80053b6:	2200      	movs	r2, #0
 80053b8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80053bc:	3201      	adds	r2, #1
 80053be:	eef1 7a67 	vneg.f32	s15, s15
 80053c2:	4295      	cmp	r5, r2
 80053c4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80053c8:	f103 0308 	add.w	r3, r3, #8
 80053cc:	d1f4      	bne.n	80053b8 <arm_cfft_f32+0xc4>
 80053ce:	e79a      	b.n	8005306 <arm_cfft_f32+0x12>
 80053d0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80053d4:	d0a5      	beq.n	8005322 <arm_cfft_f32+0x2e>
 80053d6:	e7aa      	b.n	800532e <arm_cfft_f32+0x3a>
 80053d8:	2d10      	cmp	r5, #16
 80053da:	d0b6      	beq.n	800534a <arm_cfft_f32+0x56>
 80053dc:	e7a7      	b.n	800532e <arm_cfft_f32+0x3a>
 80053de:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80053e2:	d894      	bhi.n	800530e <arm_cfft_f32+0x1a>
 80053e4:	e7aa      	b.n	800533c <arm_cfft_f32+0x48>
 80053e6:	bf00      	nop

080053e8 <arm_fir_init_f32>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	9c04      	ldr	r4, [sp, #16]
 80053ec:	6082      	str	r2, [r0, #8]
 80053ee:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80053f2:	3c01      	subs	r4, #1
 80053f4:	4605      	mov	r5, r0
 80053f6:	440c      	add	r4, r1
 80053f8:	8001      	strh	r1, [r0, #0]
 80053fa:	461e      	mov	r6, r3
 80053fc:	00a2      	lsls	r2, r4, #2
 80053fe:	4618      	mov	r0, r3
 8005400:	2100      	movs	r1, #0
 8005402:	f001 f88b 	bl	800651c <memset>
 8005406:	606e      	str	r6, [r5, #4]
 8005408:	bd70      	pop	{r4, r5, r6, pc}
 800540a:	bf00      	nop

0800540c <arm_fir_f32>:
 800540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005410:	ed2d 8b10 	vpush	{d8-d15}
 8005414:	b089      	sub	sp, #36	; 0x24
 8005416:	4605      	mov	r5, r0
 8005418:	9003      	str	r0, [sp, #12]
 800541a:	8800      	ldrh	r0, [r0, #0]
 800541c:	9304      	str	r3, [sp, #16]
 800541e:	461e      	mov	r6, r3
 8005420:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8005424:	9001      	str	r0, [sp, #4]
 8005426:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800542a:	3b01      	subs	r3, #1
 800542c:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8005430:	08f3      	lsrs	r3, r6, #3
 8005432:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8005436:	9400      	str	r4, [sp, #0]
 8005438:	9302      	str	r3, [sp, #8]
 800543a:	f000 81ef 	beq.w	800581c <arm_fir_f32+0x410>
 800543e:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8005442:	469e      	mov	lr, r3
 8005444:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8005448:	1f1e      	subs	r6, r3, #4
 800544a:	4625      	mov	r5, r4
 800544c:	9605      	str	r6, [sp, #20]
 800544e:	4604      	mov	r4, r0
 8005450:	eb08 0003 	add.w	r0, r8, r3
 8005454:	f004 0a07 	and.w	sl, r4, #7
 8005458:	4613      	mov	r3, r2
 800545a:	f10c 0420 	add.w	r4, ip, #32
 800545e:	f8cd c018 	str.w	ip, [sp, #24]
 8005462:	4684      	mov	ip, r0
 8005464:	4648      	mov	r0, r9
 8005466:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800546a:	9107      	str	r1, [sp, #28]
 800546c:	f105 0720 	add.w	r7, r5, #32
 8005470:	f101 0620 	add.w	r6, r1, #32
 8005474:	f102 0520 	add.w	r5, r2, #32
 8005478:	4652      	mov	r2, sl
 800547a:	469a      	mov	sl, r3
 800547c:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8005480:	f847 3c20 	str.w	r3, [r7, #-32]
 8005484:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8005488:	f847 3c1c 	str.w	r3, [r7, #-28]
 800548c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8005490:	f847 3c18 	str.w	r3, [r7, #-24]
 8005494:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8005498:	f847 3c14 	str.w	r3, [r7, #-20]
 800549c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 80054a0:	f847 3c10 	str.w	r3, [r7, #-16]
 80054a4:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80054a8:	f847 3c0c 	str.w	r3, [r7, #-12]
 80054ac:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80054b0:	f847 3c08 	str.w	r3, [r7, #-8]
 80054b4:	eddf 3af1 	vldr	s7, [pc, #964]	; 800587c <arm_fir_f32+0x470>
 80054b8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80054bc:	f847 3c04 	str.w	r3, [r7, #-4]
 80054c0:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 80054c4:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 80054c8:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80054cc:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 80054d0:	ed14 1a04 	vldr	s2, [r4, #-16]
 80054d4:	ed54 0a03 	vldr	s1, [r4, #-12]
 80054d8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80054dc:	1f21      	subs	r1, r4, #4
 80054de:	eef0 8a63 	vmov.f32	s17, s7
 80054e2:	eef0 9a63 	vmov.f32	s19, s7
 80054e6:	eef0 aa63 	vmov.f32	s21, s7
 80054ea:	eef0 ba63 	vmov.f32	s23, s7
 80054ee:	eeb0 ca63 	vmov.f32	s24, s7
 80054f2:	eef0 ca63 	vmov.f32	s25, s7
 80054f6:	eeb0 da63 	vmov.f32	s26, s7
 80054fa:	2800      	cmp	r0, #0
 80054fc:	f000 81e8 	beq.w	80058d0 <arm_fir_f32+0x4c4>
 8005500:	f108 0120 	add.w	r1, r8, #32
 8005504:	f104 031c 	add.w	r3, r4, #28
 8005508:	4683      	mov	fp, r0
 800550a:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 800550e:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8005512:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 8005516:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 800551a:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 800551e:	ed11 6a04 	vldr	s12, [r1, #-16]
 8005522:	ed51 6a03 	vldr	s13, [r1, #-12]
 8005526:	ed11 7a02 	vldr	s14, [r1, #-8]
 800552a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800552e:	ee24 fa03 	vmul.f32	s30, s8, s6
 8005532:	ee64 ea22 	vmul.f32	s29, s8, s5
 8005536:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 800553a:	ee24 ea02 	vmul.f32	s28, s8, s4
 800553e:	ee64 da21 	vmul.f32	s27, s8, s3
 8005542:	ee24 ba01 	vmul.f32	s22, s8, s2
 8005546:	ee24 aa20 	vmul.f32	s20, s8, s1
 800554a:	ee24 9a00 	vmul.f32	s18, s8, s0
 800554e:	ee24 4a08 	vmul.f32	s8, s8, s16
 8005552:	ee3f da0d 	vadd.f32	s26, s30, s26
 8005556:	ee74 3a23 	vadd.f32	s7, s8, s7
 800555a:	ee24 faa2 	vmul.f32	s30, s9, s5
 800555e:	ee7e caac 	vadd.f32	s25, s29, s25
 8005562:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 8005566:	ee64 ea82 	vmul.f32	s29, s9, s4
 800556a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800556e:	ee7d baab 	vadd.f32	s23, s27, s23
 8005572:	ee24 eaa1 	vmul.f32	s28, s9, s3
 8005576:	ee64 da81 	vmul.f32	s27, s9, s2
 800557a:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800557e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005582:	ee24 baa0 	vmul.f32	s22, s9, s1
 8005586:	ee24 aa80 	vmul.f32	s20, s9, s0
 800558a:	ee79 8a28 	vadd.f32	s17, s18, s17
 800558e:	ee28 9a24 	vmul.f32	s18, s16, s9
 8005592:	ee64 4a83 	vmul.f32	s9, s9, s6
 8005596:	ee25 4a02 	vmul.f32	s8, s10, s4
 800559a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800559e:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 80055a2:	ee7e caac 	vadd.f32	s25, s29, s25
 80055a6:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80055aa:	ee65 ea21 	vmul.f32	s29, s10, s3
 80055ae:	ee25 ea01 	vmul.f32	s28, s10, s2
 80055b2:	ee7d baab 	vadd.f32	s23, s27, s23
 80055b6:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80055ba:	ee65 da20 	vmul.f32	s27, s10, s1
 80055be:	ee25 ba00 	vmul.f32	s22, s10, s0
 80055c2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80055c6:	ee79 8a28 	vadd.f32	s17, s18, s17
 80055ca:	ee28 aa05 	vmul.f32	s20, s16, s10
 80055ce:	ee23 9a05 	vmul.f32	s18, s6, s10
 80055d2:	ee3d da0f 	vadd.f32	s26, s26, s30
 80055d6:	ee25 5a22 	vmul.f32	s10, s10, s5
 80055da:	ee65 3aa1 	vmul.f32	s7, s11, s3
 80055de:	ee35 5a24 	vadd.f32	s10, s10, s9
 80055e2:	ed53 1a04 	vldr	s3, [r3, #-16]
 80055e6:	ee7e caac 	vadd.f32	s25, s29, s25
 80055ea:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80055ee:	ee65 ea81 	vmul.f32	s29, s11, s2
 80055f2:	ee25 eaa0 	vmul.f32	s28, s11, s1
 80055f6:	ee7d baab 	vadd.f32	s23, s27, s23
 80055fa:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80055fe:	ee65 da80 	vmul.f32	s27, s11, s0
 8005602:	ee28 ba25 	vmul.f32	s22, s16, s11
 8005606:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800560a:	ee79 8a28 	vadd.f32	s17, s18, s17
 800560e:	ee23 aa25 	vmul.f32	s20, s6, s11
 8005612:	ee22 9aa5 	vmul.f32	s18, s5, s11
 8005616:	ee3d da04 	vadd.f32	s26, s26, s8
 800561a:	ee65 5a82 	vmul.f32	s11, s11, s4
 800561e:	ee66 4a01 	vmul.f32	s9, s12, s2
 8005622:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005626:	ed13 1a03 	vldr	s2, [r3, #-12]
 800562a:	ee75 5a85 	vadd.f32	s11, s11, s10
 800562e:	ee3d da23 	vadd.f32	s26, s26, s7
 8005632:	ee22 5a06 	vmul.f32	s10, s4, s12
 8005636:	ee7e caac 	vadd.f32	s25, s29, s25
 800563a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800563e:	ee66 ea20 	vmul.f32	s29, s12, s1
 8005642:	ee26 ea00 	vmul.f32	s28, s12, s0
 8005646:	ee7d baab 	vadd.f32	s23, s27, s23
 800564a:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800564e:	ee68 da06 	vmul.f32	s27, s16, s12
 8005652:	ee23 ba06 	vmul.f32	s22, s6, s12
 8005656:	ee22 aa86 	vmul.f32	s20, s5, s12
 800565a:	ee79 8a28 	vadd.f32	s17, s18, s17
 800565e:	ee26 6a21 	vmul.f32	s12, s12, s3
 8005662:	ee26 9aa0 	vmul.f32	s18, s13, s1
 8005666:	ee36 6a25 	vadd.f32	s12, s12, s11
 800566a:	ed53 0a02 	vldr	s1, [r3, #-8]
 800566e:	ee61 5aa6 	vmul.f32	s11, s3, s13
 8005672:	ee3d da24 	vadd.f32	s26, s26, s9
 8005676:	ee7e caac 	vadd.f32	s25, s29, s25
 800567a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800567e:	ee66 ea80 	vmul.f32	s29, s13, s0
 8005682:	ee28 ea26 	vmul.f32	s28, s16, s13
 8005686:	ee7d baab 	vadd.f32	s23, s27, s23
 800568a:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800568e:	ee63 da26 	vmul.f32	s27, s6, s13
 8005692:	ee22 baa6 	vmul.f32	s22, s5, s13
 8005696:	ee3a aa29 	vadd.f32	s20, s20, s19
 800569a:	ee75 8a28 	vadd.f32	s17, s10, s17
 800569e:	ee62 9a26 	vmul.f32	s19, s4, s13
 80056a2:	ee66 6a81 	vmul.f32	s13, s13, s2
 80056a6:	ee27 5a00 	vmul.f32	s10, s14, s0
 80056aa:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80056ae:	ee75 8aa8 	vadd.f32	s17, s11, s17
 80056b2:	ee7e caac 	vadd.f32	s25, s29, s25
 80056b6:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80056ba:	ee68 ea07 	vmul.f32	s29, s16, s14
 80056be:	ee23 ea07 	vmul.f32	s28, s6, s14
 80056c2:	ee7d baab 	vadd.f32	s23, s27, s23
 80056c6:	ee22 ba07 	vmul.f32	s22, s4, s14
 80056ca:	ee62 da87 	vmul.f32	s27, s5, s14
 80056ce:	ee39 aa8a 	vadd.f32	s20, s19, s20
 80056d2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80056d6:	ee61 9a87 	vmul.f32	s19, s3, s14
 80056da:	ee67 3a20 	vmul.f32	s7, s14, s1
 80056de:	ed13 0a01 	vldr	s0, [r3, #-4]
 80056e2:	ee3d da09 	vadd.f32	s26, s26, s18
 80056e6:	ee21 6a07 	vmul.f32	s12, s2, s14
 80056ea:	ee3d da05 	vadd.f32	s26, s26, s10
 80056ee:	ee28 8a27 	vmul.f32	s16, s16, s15
 80056f2:	ee63 5a27 	vmul.f32	s11, s6, s15
 80056f6:	ee22 5aa7 	vmul.f32	s10, s5, s15
 80056fa:	ee62 4a27 	vmul.f32	s9, s4, s15
 80056fe:	ee3b ba2a 	vadd.f32	s22, s22, s21
 8005702:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8005706:	ee61 aaa7 	vmul.f32	s21, s3, s15
 800570a:	ee61 9a27 	vmul.f32	s19, s2, s15
 800570e:	ee36 7a28 	vadd.f32	s14, s12, s17
 8005712:	ee7e caac 	vadd.f32	s25, s29, s25
 8005716:	ee60 8aa7 	vmul.f32	s17, s1, s15
 800571a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800571e:	ee7d baab 	vadd.f32	s23, s27, s23
 8005722:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8005726:	ee67 7a80 	vmul.f32	s15, s15, s0
 800572a:	f1bb 0b01 	subs.w	fp, fp, #1
 800572e:	f101 0120 	add.w	r1, r1, #32
 8005732:	ee38 da0d 	vadd.f32	s26, s16, s26
 8005736:	ee75 caac 	vadd.f32	s25, s11, s25
 800573a:	ee35 ca0c 	vadd.f32	s24, s10, s24
 800573e:	ee74 baab 	vadd.f32	s23, s9, s23
 8005742:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8005746:	ee79 9a8a 	vadd.f32	s19, s19, s20
 800574a:	ee78 8a87 	vadd.f32	s17, s17, s14
 800574e:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8005752:	f103 0320 	add.w	r3, r3, #32
 8005756:	f47f aed8 	bne.w	800550a <arm_fir_f32+0xfe>
 800575a:	eb09 0104 	add.w	r1, r9, r4
 800575e:	46e3      	mov	fp, ip
 8005760:	b3a2      	cbz	r2, 80057cc <arm_fir_f32+0x3c0>
 8005762:	4613      	mov	r3, r2
 8005764:	ecbb 6a01 	vldmia	fp!, {s12}
 8005768:	ecf1 7a01 	vldmia	r1!, {s15}
 800576c:	ee26 3a03 	vmul.f32	s6, s12, s6
 8005770:	ee26 4a22 	vmul.f32	s8, s12, s5
 8005774:	ee66 4a02 	vmul.f32	s9, s12, s4
 8005778:	ee26 5a21 	vmul.f32	s10, s12, s3
 800577c:	ee66 5a01 	vmul.f32	s11, s12, s2
 8005780:	ee66 6a20 	vmul.f32	s13, s12, s1
 8005784:	ee26 7a00 	vmul.f32	s14, s12, s0
 8005788:	ee26 6a27 	vmul.f32	s12, s12, s15
 800578c:	3b01      	subs	r3, #1
 800578e:	ee3d da03 	vadd.f32	s26, s26, s6
 8005792:	ee7c ca84 	vadd.f32	s25, s25, s8
 8005796:	eeb0 3a62 	vmov.f32	s6, s5
 800579a:	ee3c ca24 	vadd.f32	s24, s24, s9
 800579e:	eef0 2a42 	vmov.f32	s5, s4
 80057a2:	ee7b ba85 	vadd.f32	s23, s23, s10
 80057a6:	eeb0 2a61 	vmov.f32	s4, s3
 80057aa:	ee7a aaa5 	vadd.f32	s21, s21, s11
 80057ae:	eef0 1a41 	vmov.f32	s3, s2
 80057b2:	ee79 9aa6 	vadd.f32	s19, s19, s13
 80057b6:	eeb0 1a60 	vmov.f32	s2, s1
 80057ba:	ee78 8a87 	vadd.f32	s17, s17, s14
 80057be:	eef0 0a40 	vmov.f32	s1, s0
 80057c2:	ee73 3a86 	vadd.f32	s7, s7, s12
 80057c6:	eeb0 0a67 	vmov.f32	s0, s15
 80057ca:	d1cb      	bne.n	8005764 <arm_fir_f32+0x358>
 80057cc:	f1be 0e01 	subs.w	lr, lr, #1
 80057d0:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 80057d4:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 80057d8:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 80057dc:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 80057e0:	ed45 aa04 	vstr	s21, [r5, #-16]
 80057e4:	ed45 9a03 	vstr	s19, [r5, #-12]
 80057e8:	ed45 8a02 	vstr	s17, [r5, #-8]
 80057ec:	ed45 3a01 	vstr	s7, [r5, #-4]
 80057f0:	f107 0720 	add.w	r7, r7, #32
 80057f4:	f106 0620 	add.w	r6, r6, #32
 80057f8:	f104 0420 	add.w	r4, r4, #32
 80057fc:	f105 0520 	add.w	r5, r5, #32
 8005800:	f47f ae3c 	bne.w	800547c <arm_fir_f32+0x70>
 8005804:	9b02      	ldr	r3, [sp, #8]
 8005806:	9800      	ldr	r0, [sp, #0]
 8005808:	f8dd c018 	ldr.w	ip, [sp, #24]
 800580c:	9907      	ldr	r1, [sp, #28]
 800580e:	015b      	lsls	r3, r3, #5
 8005810:	4652      	mov	r2, sl
 8005812:	4418      	add	r0, r3
 8005814:	9000      	str	r0, [sp, #0]
 8005816:	4419      	add	r1, r3
 8005818:	449c      	add	ip, r3
 800581a:	441a      	add	r2, r3
 800581c:	9b04      	ldr	r3, [sp, #16]
 800581e:	f013 0e07 	ands.w	lr, r3, #7
 8005822:	d01f      	beq.n	8005864 <arm_fir_f32+0x458>
 8005824:	9f00      	ldr	r7, [sp, #0]
 8005826:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800582a:	4676      	mov	r6, lr
 800582c:	4665      	mov	r5, ip
 800582e:	f851 3b04 	ldr.w	r3, [r1], #4
 8005832:	eddf 6a12 	vldr	s13, [pc, #72]	; 800587c <arm_fir_f32+0x470>
 8005836:	f847 3b04 	str.w	r3, [r7], #4
 800583a:	4644      	mov	r4, r8
 800583c:	464b      	mov	r3, r9
 800583e:	4628      	mov	r0, r5
 8005840:	ecb0 7a01 	vldmia	r0!, {s14}
 8005844:	ecf4 7a01 	vldmia	r4!, {s15}
 8005848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584c:	3b01      	subs	r3, #1
 800584e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005852:	d1f5      	bne.n	8005840 <arm_fir_f32+0x434>
 8005854:	3e01      	subs	r6, #1
 8005856:	ece2 6a01 	vstmia	r2!, {s13}
 800585a:	f105 0504 	add.w	r5, r5, #4
 800585e:	d1e6      	bne.n	800582e <arm_fir_f32+0x422>
 8005860:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8005864:	9b01      	ldr	r3, [sp, #4]
 8005866:	1e59      	subs	r1, r3, #1
 8005868:	9b03      	ldr	r3, [sp, #12]
 800586a:	088e      	lsrs	r6, r1, #2
 800586c:	685c      	ldr	r4, [r3, #4]
 800586e:	d020      	beq.n	80058b2 <arm_fir_f32+0x4a6>
 8005870:	f104 0210 	add.w	r2, r4, #16
 8005874:	f10c 0310 	add.w	r3, ip, #16
 8005878:	4630      	mov	r0, r6
 800587a:	e001      	b.n	8005880 <arm_fir_f32+0x474>
 800587c:	00000000 	.word	0x00000000
 8005880:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8005884:	f842 5c10 	str.w	r5, [r2, #-16]
 8005888:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 800588c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8005890:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8005894:	f842 5c08 	str.w	r5, [r2, #-8]
 8005898:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800589c:	f842 5c04 	str.w	r5, [r2, #-4]
 80058a0:	3801      	subs	r0, #1
 80058a2:	f103 0310 	add.w	r3, r3, #16
 80058a6:	f102 0210 	add.w	r2, r2, #16
 80058aa:	d1e9      	bne.n	8005880 <arm_fir_f32+0x474>
 80058ac:	0133      	lsls	r3, r6, #4
 80058ae:	441c      	add	r4, r3
 80058b0:	449c      	add	ip, r3
 80058b2:	f011 0303 	ands.w	r3, r1, #3
 80058b6:	d006      	beq.n	80058c6 <arm_fir_f32+0x4ba>
 80058b8:	4622      	mov	r2, r4
 80058ba:	f85c 1b04 	ldr.w	r1, [ip], #4
 80058be:	f842 1b04 	str.w	r1, [r2], #4
 80058c2:	3b01      	subs	r3, #1
 80058c4:	d1f9      	bne.n	80058ba <arm_fir_f32+0x4ae>
 80058c6:	b009      	add	sp, #36	; 0x24
 80058c8:	ecbd 8b10 	vpop	{d8-d15}
 80058cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d0:	46c3      	mov	fp, r8
 80058d2:	e745      	b.n	8005760 <arm_fir_f32+0x354>

080058d4 <arm_cmplx_mult_cmplx_f32>:
 80058d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058d6:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 80058da:	d073      	beq.n	80059c4 <arm_cmplx_mult_cmplx_f32+0xf0>
 80058dc:	f100 0620 	add.w	r6, r0, #32
 80058e0:	f101 0520 	add.w	r5, r1, #32
 80058e4:	f102 0420 	add.w	r4, r2, #32
 80058e8:	4677      	mov	r7, lr
 80058ea:	ed16 7a08 	vldr	s14, [r6, #-32]	; 0xffffffe0
 80058ee:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 80058f2:	ed16 2a07 	vldr	s4, [r6, #-28]	; 0xffffffe4
 80058f6:	ed55 2a07 	vldr	s5, [r5, #-28]	; 0xffffffe4
 80058fa:	ed16 3a05 	vldr	s6, [r6, #-20]	; 0xffffffec
 80058fe:	ed16 6a06 	vldr	s12, [r6, #-24]	; 0xffffffe8
 8005902:	ed55 7a06 	vldr	s15, [r5, #-24]	; 0xffffffe8
 8005906:	ed55 5a05 	vldr	s11, [r5, #-20]	; 0xffffffec
 800590a:	ed56 6a04 	vldr	s13, [r6, #-16]
 800590e:	ed55 3a04 	vldr	s7, [r5, #-16]
 8005912:	ee67 4a05 	vmul.f32	s9, s14, s10
 8005916:	ee22 4a22 	vmul.f32	s8, s4, s5
 800591a:	ee25 5a02 	vmul.f32	s10, s10, s4
 800591e:	ee27 7a22 	vmul.f32	s14, s14, s5
 8005922:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8005926:	ee66 4a27 	vmul.f32	s9, s12, s15
 800592a:	ee26 6a25 	vmul.f32	s12, s12, s11
 800592e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005932:	ee65 5a83 	vmul.f32	s11, s11, s6
 8005936:	ee37 7a05 	vadd.f32	s14, s14, s10
 800593a:	ed04 4a08 	vstr	s8, [r4, #-32]	; 0xffffffe0
 800593e:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8005942:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005946:	ed16 5a03 	vldr	s10, [r6, #-12]
 800594a:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 800594e:	ed15 7a03 	vldr	s14, [r5, #-12]
 8005952:	ed44 5a06 	vstr	s11, [r4, #-24]	; 0xffffffe8
 8005956:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800595a:	ed56 7a02 	vldr	s15, [r6, #-8]
 800595e:	ed15 6a02 	vldr	s12, [r5, #-8]
 8005962:	ed56 5a01 	vldr	s11, [r6, #-4]
 8005966:	ed15 4a01 	vldr	s8, [r5, #-4]
 800596a:	ee67 4a86 	vmul.f32	s9, s15, s12
 800596e:	ee23 3a85 	vmul.f32	s6, s7, s10
 8005972:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005976:	ee25 5a07 	vmul.f32	s10, s10, s14
 800597a:	ee65 5a84 	vmul.f32	s11, s11, s8
 800597e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8005982:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005986:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800598a:	ee37 7a03 	vadd.f32	s14, s14, s6
 800598e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8005992:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8005996:	ee77 7a86 	vadd.f32	s15, s15, s12
 800599a:	3f01      	subs	r7, #1
 800599c:	ed44 6a04 	vstr	s13, [r4, #-16]
 80059a0:	ed04 7a03 	vstr	s14, [r4, #-12]
 80059a4:	ed44 5a02 	vstr	s11, [r4, #-8]
 80059a8:	ed44 7a01 	vstr	s15, [r4, #-4]
 80059ac:	f106 0620 	add.w	r6, r6, #32
 80059b0:	f105 0520 	add.w	r5, r5, #32
 80059b4:	f104 0420 	add.w	r4, r4, #32
 80059b8:	d197      	bne.n	80058ea <arm_cmplx_mult_cmplx_f32+0x16>
 80059ba:	ea4f 144e 	mov.w	r4, lr, lsl #5
 80059be:	4420      	add	r0, r4
 80059c0:	4421      	add	r1, r4
 80059c2:	4422      	add	r2, r4
 80059c4:	f013 0303 	ands.w	r3, r3, #3
 80059c8:	d022      	beq.n	8005a10 <arm_cmplx_mult_cmplx_f32+0x13c>
 80059ca:	3008      	adds	r0, #8
 80059cc:	3108      	adds	r1, #8
 80059ce:	3208      	adds	r2, #8
 80059d0:	ed50 7a02 	vldr	s15, [r0, #-8]
 80059d4:	ed11 7a02 	vldr	s14, [r1, #-8]
 80059d8:	ed50 6a01 	vldr	s13, [r0, #-4]
 80059dc:	ed51 5a01 	vldr	s11, [r1, #-4]
 80059e0:	ee27 6a87 	vmul.f32	s12, s15, s14
 80059e4:	ee26 7a87 	vmul.f32	s14, s13, s14
 80059e8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80059ec:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80059f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059f4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80059f8:	3b01      	subs	r3, #1
 80059fa:	ed42 6a02 	vstr	s13, [r2, #-8]
 80059fe:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005a02:	f100 0008 	add.w	r0, r0, #8
 8005a06:	f101 0108 	add.w	r1, r1, #8
 8005a0a:	f102 0208 	add.w	r2, r2, #8
 8005a0e:	d1df      	bne.n	80059d0 <arm_cmplx_mult_cmplx_f32+0xfc>
 8005a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a12:	bf00      	nop

08005a14 <arm_cmplx_mag_f32>:
 8005a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a18:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	d07f      	beq.n	8005b20 <arm_cmplx_mag_f32+0x10c>
 8005a20:	2700      	movs	r7, #0
 8005a22:	f100 0420 	add.w	r4, r0, #32
 8005a26:	f101 0510 	add.w	r5, r1, #16
 8005a2a:	4646      	mov	r6, r8
 8005a2c:	e05a      	b.n	8005ae4 <arm_cmplx_mag_f32+0xd0>
 8005a2e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005a32:	eeb4 0a40 	vcmp.f32	s0, s0
 8005a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a3a:	f040 80a4 	bne.w	8005b86 <arm_cmplx_mag_f32+0x172>
 8005a3e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8005a42:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8005a46:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8005a4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a4e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005a52:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5e:	f2c0 808f 	blt.w	8005b80 <arm_cmplx_mag_f32+0x16c>
 8005a62:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005a66:	eeb4 0a40 	vcmp.f32	s0, s0
 8005a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6e:	f040 80af 	bne.w	8005bd0 <arm_cmplx_mag_f32+0x1bc>
 8005a72:	ed05 0a03 	vstr	s0, [r5, #-12]
 8005a76:	ed54 7a04 	vldr	s15, [r4, #-16]
 8005a7a:	ed14 0a03 	vldr	s0, [r4, #-12]
 8005a7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a82:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005a86:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005a8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a92:	db72      	blt.n	8005b7a <arm_cmplx_mag_f32+0x166>
 8005a94:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005a98:	eeb4 0a40 	vcmp.f32	s0, s0
 8005a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa0:	f040 808c 	bne.w	8005bbc <arm_cmplx_mag_f32+0x1a8>
 8005aa4:	ed05 0a02 	vstr	s0, [r5, #-8]
 8005aa8:	ed54 7a02 	vldr	s15, [r4, #-8]
 8005aac:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005ab0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005ab4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005ab8:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005abc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac4:	db20      	blt.n	8005b08 <arm_cmplx_mag_f32+0xf4>
 8005ac6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005aca:	eeb4 0a40 	vcmp.f32	s0, s0
 8005ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad2:	d169      	bne.n	8005ba8 <arm_cmplx_mag_f32+0x194>
 8005ad4:	3e01      	subs	r6, #1
 8005ad6:	ed05 0a01 	vstr	s0, [r5, #-4]
 8005ada:	f104 0420 	add.w	r4, r4, #32
 8005ade:	f105 0510 	add.w	r5, r5, #16
 8005ae2:	d019      	beq.n	8005b18 <arm_cmplx_mag_f32+0x104>
 8005ae4:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8005ae8:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8005aec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005af0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005af4:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b00:	da95      	bge.n	8005a2e <arm_cmplx_mag_f32+0x1a>
 8005b02:	f845 7c10 	str.w	r7, [r5, #-16]
 8005b06:	e79c      	b.n	8005a42 <arm_cmplx_mag_f32+0x2e>
 8005b08:	3e01      	subs	r6, #1
 8005b0a:	f845 7c04 	str.w	r7, [r5, #-4]
 8005b0e:	f104 0420 	add.w	r4, r4, #32
 8005b12:	f105 0510 	add.w	r5, r5, #16
 8005b16:	d1e5      	bne.n	8005ae4 <arm_cmplx_mag_f32+0xd0>
 8005b18:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8005b1c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8005b20:	f012 0503 	ands.w	r5, r2, #3
 8005b24:	d026      	beq.n	8005b74 <arm_cmplx_mag_f32+0x160>
 8005b26:	2600      	movs	r6, #0
 8005b28:	f100 0408 	add.w	r4, r0, #8
 8005b2c:	e00c      	b.n	8005b48 <arm_cmplx_mag_f32+0x134>
 8005b2e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005b32:	eeb4 0a40 	vcmp.f32	s0, s0
 8005b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3a:	d12e      	bne.n	8005b9a <arm_cmplx_mag_f32+0x186>
 8005b3c:	3d01      	subs	r5, #1
 8005b3e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8005b42:	f104 0408 	add.w	r4, r4, #8
 8005b46:	d015      	beq.n	8005b74 <arm_cmplx_mag_f32+0x160>
 8005b48:	ed54 7a02 	vldr	s15, [r4, #-8]
 8005b4c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005b50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b54:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005b58:	3104      	adds	r1, #4
 8005b5a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005b5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b66:	dae2      	bge.n	8005b2e <arm_cmplx_mag_f32+0x11a>
 8005b68:	3d01      	subs	r5, #1
 8005b6a:	f841 6c04 	str.w	r6, [r1, #-4]
 8005b6e:	f104 0408 	add.w	r4, r4, #8
 8005b72:	d1e9      	bne.n	8005b48 <arm_cmplx_mag_f32+0x134>
 8005b74:	b004      	add	sp, #16
 8005b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b7a:	f845 7c08 	str.w	r7, [r5, #-8]
 8005b7e:	e793      	b.n	8005aa8 <arm_cmplx_mag_f32+0x94>
 8005b80:	f845 7c0c 	str.w	r7, [r5, #-12]
 8005b84:	e777      	b.n	8005a76 <arm_cmplx_mag_f32+0x62>
 8005b86:	eeb0 0a67 	vmov.f32	s0, s15
 8005b8a:	9203      	str	r2, [sp, #12]
 8005b8c:	9102      	str	r1, [sp, #8]
 8005b8e:	9001      	str	r0, [sp, #4]
 8005b90:	f003 fc5e 	bl	8009450 <sqrtf>
 8005b94:	a801      	add	r0, sp, #4
 8005b96:	c807      	ldmia	r0, {r0, r1, r2}
 8005b98:	e751      	b.n	8005a3e <arm_cmplx_mag_f32+0x2a>
 8005b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b9e:	9101      	str	r1, [sp, #4]
 8005ba0:	f003 fc56 	bl	8009450 <sqrtf>
 8005ba4:	9901      	ldr	r1, [sp, #4]
 8005ba6:	e7c9      	b.n	8005b3c <arm_cmplx_mag_f32+0x128>
 8005ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8005bac:	9203      	str	r2, [sp, #12]
 8005bae:	9102      	str	r1, [sp, #8]
 8005bb0:	9001      	str	r0, [sp, #4]
 8005bb2:	f003 fc4d 	bl	8009450 <sqrtf>
 8005bb6:	a801      	add	r0, sp, #4
 8005bb8:	c807      	ldmia	r0, {r0, r1, r2}
 8005bba:	e78b      	b.n	8005ad4 <arm_cmplx_mag_f32+0xc0>
 8005bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8005bc0:	9203      	str	r2, [sp, #12]
 8005bc2:	9102      	str	r1, [sp, #8]
 8005bc4:	9001      	str	r0, [sp, #4]
 8005bc6:	f003 fc43 	bl	8009450 <sqrtf>
 8005bca:	a801      	add	r0, sp, #4
 8005bcc:	c807      	ldmia	r0, {r0, r1, r2}
 8005bce:	e769      	b.n	8005aa4 <arm_cmplx_mag_f32+0x90>
 8005bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8005bd4:	9203      	str	r2, [sp, #12]
 8005bd6:	9102      	str	r1, [sp, #8]
 8005bd8:	9001      	str	r0, [sp, #4]
 8005bda:	f003 fc39 	bl	8009450 <sqrtf>
 8005bde:	a801      	add	r0, sp, #4
 8005be0:	c807      	ldmia	r0, {r0, r1, r2}
 8005be2:	e746      	b.n	8005a72 <arm_cmplx_mag_f32+0x5e>

08005be4 <arm_sin_f32>:
 8005be4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bec:	d42c      	bmi.n	8005c48 <arm_sin_f32+0x64>
 8005bee:	eddf 7a20 	vldr	s15, [pc, #128]	; 8005c70 <arm_sin_f32+0x8c>
 8005bf2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005bf6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005bfa:	d432      	bmi.n	8005c62 <arm_sin_f32+0x7e>
 8005bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c00:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8005c74 <arm_sin_f32+0x90>
 8005c04:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <arm_sin_f32+0x94>)
 8005c06:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c0e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005c12:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005c16:	ee17 3a90 	vmov	r3, s15
 8005c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c26:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005c2a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005c2e:	edd1 6a01 	vldr	s13, [r1, #4]
 8005c32:	ed91 0a00 	vldr	s0, [r1]
 8005c36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005c3e:	ee27 0a00 	vmul.f32	s0, s14, s0
 8005c42:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005c46:	4770      	bx	lr
 8005c48:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8005c7c <arm_sin_f32+0x98>
 8005c4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c54:	da0b      	bge.n	8005c6e <arm_sin_f32+0x8a>
 8005c56:	eddf 7a06 	vldr	s15, [pc, #24]	; 8005c70 <arm_sin_f32+0x8c>
 8005c5a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005c5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005c62:	ee17 3a90 	vmov	r3, s15
 8005c66:	3b01      	subs	r3, #1
 8005c68:	ee07 3a90 	vmov	s15, r3
 8005c6c:	e7c6      	b.n	8005bfc <arm_sin_f32+0x18>
 8005c6e:	4770      	bx	lr
 8005c70:	3e22f983 	.word	0x3e22f983
 8005c74:	44000000 	.word	0x44000000
 8005c78:	08018374 	.word	0x08018374
 8005c7c:	b44c02cd 	.word	0xb44c02cd

08005c80 <arm_cos_f32>:
 8005c80:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8005cf4 <arm_cos_f32+0x74>
 8005c84:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005c88:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8005c8c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005c90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c98:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005c9c:	d504      	bpl.n	8005ca8 <arm_cos_f32+0x28>
 8005c9e:	ee17 3a90 	vmov	r3, s15
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	ee07 3a90 	vmov	s15, r3
 8005ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cac:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005cf8 <arm_cos_f32+0x78>
 8005cb0:	4a12      	ldr	r2, [pc, #72]	; (8005cfc <arm_cos_f32+0x7c>)
 8005cb2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cba:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005cbe:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005cc2:	ee17 3a90 	vmov	r3, s15
 8005cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005cd6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005cda:	edd1 6a01 	vldr	s13, [r1, #4]
 8005cde:	ed91 0a00 	vldr	s0, [r1]
 8005ce2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ce6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005cea:	ee27 0a00 	vmul.f32	s0, s14, s0
 8005cee:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005cf2:	4770      	bx	lr
 8005cf4:	3e22f983 	.word	0x3e22f983
 8005cf8:	44000000 	.word	0x44000000
 8005cfc:	08018374 	.word	0x08018374

08005d00 <arm_scale_f32>:
 8005d00:	b470      	push	{r4, r5, r6}
 8005d02:	0896      	lsrs	r6, r2, #2
 8005d04:	d025      	beq.n	8005d52 <arm_scale_f32+0x52>
 8005d06:	f100 0410 	add.w	r4, r0, #16
 8005d0a:	f101 0310 	add.w	r3, r1, #16
 8005d0e:	4635      	mov	r5, r6
 8005d10:	ed14 6a04 	vldr	s12, [r4, #-16]
 8005d14:	ed54 6a03 	vldr	s13, [r4, #-12]
 8005d18:	ed14 7a02 	vldr	s14, [r4, #-8]
 8005d1c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005d20:	ee26 6a00 	vmul.f32	s12, s12, s0
 8005d24:	ee66 6a80 	vmul.f32	s13, s13, s0
 8005d28:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005d2c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005d30:	3d01      	subs	r5, #1
 8005d32:	ed03 6a04 	vstr	s12, [r3, #-16]
 8005d36:	ed43 6a03 	vstr	s13, [r3, #-12]
 8005d3a:	ed03 7a02 	vstr	s14, [r3, #-8]
 8005d3e:	ed43 7a01 	vstr	s15, [r3, #-4]
 8005d42:	f104 0410 	add.w	r4, r4, #16
 8005d46:	f103 0310 	add.w	r3, r3, #16
 8005d4a:	d1e1      	bne.n	8005d10 <arm_scale_f32+0x10>
 8005d4c:	0136      	lsls	r6, r6, #4
 8005d4e:	4430      	add	r0, r6
 8005d50:	4431      	add	r1, r6
 8005d52:	f012 0203 	ands.w	r2, r2, #3
 8005d56:	d007      	beq.n	8005d68 <arm_scale_f32+0x68>
 8005d58:	ecf0 7a01 	vldmia	r0!, {s15}
 8005d5c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005d60:	3a01      	subs	r2, #1
 8005d62:	ece1 7a01 	vstmia	r1!, {s15}
 8005d66:	d1f7      	bne.n	8005d58 <arm_scale_f32+0x58>
 8005d68:	bc70      	pop	{r4, r5, r6}
 8005d6a:	4770      	bx	lr

08005d6c <arm_offset_f32>:
 8005d6c:	b470      	push	{r4, r5, r6}
 8005d6e:	0896      	lsrs	r6, r2, #2
 8005d70:	d025      	beq.n	8005dbe <arm_offset_f32+0x52>
 8005d72:	f100 0410 	add.w	r4, r0, #16
 8005d76:	f101 0310 	add.w	r3, r1, #16
 8005d7a:	4635      	mov	r5, r6
 8005d7c:	ed14 6a04 	vldr	s12, [r4, #-16]
 8005d80:	ed54 6a03 	vldr	s13, [r4, #-12]
 8005d84:	ed14 7a02 	vldr	s14, [r4, #-8]
 8005d88:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005d8c:	ee36 6a00 	vadd.f32	s12, s12, s0
 8005d90:	ee76 6a80 	vadd.f32	s13, s13, s0
 8005d94:	ee30 7a07 	vadd.f32	s14, s0, s14
 8005d98:	ee70 7a27 	vadd.f32	s15, s0, s15
 8005d9c:	3d01      	subs	r5, #1
 8005d9e:	ed03 6a04 	vstr	s12, [r3, #-16]
 8005da2:	ed43 6a03 	vstr	s13, [r3, #-12]
 8005da6:	ed03 7a02 	vstr	s14, [r3, #-8]
 8005daa:	ed43 7a01 	vstr	s15, [r3, #-4]
 8005dae:	f104 0410 	add.w	r4, r4, #16
 8005db2:	f103 0310 	add.w	r3, r3, #16
 8005db6:	d1e1      	bne.n	8005d7c <arm_offset_f32+0x10>
 8005db8:	0136      	lsls	r6, r6, #4
 8005dba:	4430      	add	r0, r6
 8005dbc:	4431      	add	r1, r6
 8005dbe:	f012 0203 	ands.w	r2, r2, #3
 8005dc2:	d007      	beq.n	8005dd4 <arm_offset_f32+0x68>
 8005dc4:	ecf0 7a01 	vldmia	r0!, {s15}
 8005dc8:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005dcc:	3a01      	subs	r2, #1
 8005dce:	ece1 7a01 	vstmia	r1!, {s15}
 8005dd2:	d1f7      	bne.n	8005dc4 <arm_offset_f32+0x58>
 8005dd4:	bc70      	pop	{r4, r5, r6}
 8005dd6:	4770      	bx	lr

08005dd8 <arm_mult_f32>:
 8005dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dda:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8005dde:	d033      	beq.n	8005e48 <arm_mult_f32+0x70>
 8005de0:	f100 0610 	add.w	r6, r0, #16
 8005de4:	f101 0510 	add.w	r5, r1, #16
 8005de8:	f102 0410 	add.w	r4, r2, #16
 8005dec:	4677      	mov	r7, lr
 8005dee:	ed16 6a04 	vldr	s12, [r6, #-16]
 8005df2:	ed55 4a04 	vldr	s9, [r5, #-16]
 8005df6:	ed56 6a02 	vldr	s13, [r6, #-8]
 8005dfa:	ed15 5a02 	vldr	s10, [r5, #-8]
 8005dfe:	ed16 7a03 	vldr	s14, [r6, #-12]
 8005e02:	ed55 5a03 	vldr	s11, [r5, #-12]
 8005e06:	ed56 7a01 	vldr	s15, [r6, #-4]
 8005e0a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005e0e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8005e12:	ed04 6a04 	vstr	s12, [r4, #-16]
 8005e16:	ed15 6a01 	vldr	s12, [r5, #-4]
 8005e1a:	ed44 6a02 	vstr	s13, [r4, #-8]
 8005e1e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005e22:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005e26:	3f01      	subs	r7, #1
 8005e28:	ed04 7a03 	vstr	s14, [r4, #-12]
 8005e2c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005e30:	f106 0610 	add.w	r6, r6, #16
 8005e34:	f105 0510 	add.w	r5, r5, #16
 8005e38:	f104 0410 	add.w	r4, r4, #16
 8005e3c:	d1d7      	bne.n	8005dee <arm_mult_f32+0x16>
 8005e3e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8005e42:	4420      	add	r0, r4
 8005e44:	4421      	add	r1, r4
 8005e46:	4422      	add	r2, r4
 8005e48:	f013 0303 	ands.w	r3, r3, #3
 8005e4c:	d009      	beq.n	8005e62 <arm_mult_f32+0x8a>
 8005e4e:	ecf0 7a01 	vldmia	r0!, {s15}
 8005e52:	ecb1 7a01 	vldmia	r1!, {s14}
 8005e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	ece2 7a01 	vstmia	r2!, {s15}
 8005e60:	d1f5      	bne.n	8005e4e <arm_mult_f32+0x76>
 8005e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e64 <arm_dot_prod_f32>:
 8005e64:	b4f0      	push	{r4, r5, r6, r7}
 8005e66:	0897      	lsrs	r7, r2, #2
 8005e68:	eddf 5a20 	vldr	s11, [pc, #128]	; 8005eec <arm_dot_prod_f32+0x88>
 8005e6c:	d02d      	beq.n	8005eca <arm_dot_prod_f32+0x66>
 8005e6e:	f100 0510 	add.w	r5, r0, #16
 8005e72:	f101 0410 	add.w	r4, r1, #16
 8005e76:	463e      	mov	r6, r7
 8005e78:	ed54 7a04 	vldr	s15, [r4, #-16]
 8005e7c:	ed15 6a04 	vldr	s12, [r5, #-16]
 8005e80:	ed55 6a03 	vldr	s13, [r5, #-12]
 8005e84:	ed54 3a03 	vldr	s7, [r4, #-12]
 8005e88:	ed15 7a02 	vldr	s14, [r5, #-8]
 8005e8c:	ed14 4a02 	vldr	s8, [r4, #-8]
 8005e90:	ed15 5a01 	vldr	s10, [r5, #-4]
 8005e94:	ed54 4a01 	vldr	s9, [r4, #-4]
 8005e98:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005e9c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005ea0:	ee76 7a25 	vadd.f32	s15, s12, s11
 8005ea4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eac:	ee65 5a24 	vmul.f32	s11, s10, s9
 8005eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eb4:	3e01      	subs	r6, #1
 8005eb6:	f105 0510 	add.w	r5, r5, #16
 8005eba:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005ebe:	f104 0410 	add.w	r4, r4, #16
 8005ec2:	d1d9      	bne.n	8005e78 <arm_dot_prod_f32+0x14>
 8005ec4:	013f      	lsls	r7, r7, #4
 8005ec6:	4438      	add	r0, r7
 8005ec8:	4439      	add	r1, r7
 8005eca:	f012 0203 	ands.w	r2, r2, #3
 8005ece:	d009      	beq.n	8005ee4 <arm_dot_prod_f32+0x80>
 8005ed0:	ecf0 7a01 	vldmia	r0!, {s15}
 8005ed4:	ecb1 7a01 	vldmia	r1!, {s14}
 8005ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005edc:	3a01      	subs	r2, #1
 8005ede:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005ee2:	d1f5      	bne.n	8005ed0 <arm_dot_prod_f32+0x6c>
 8005ee4:	edc3 5a00 	vstr	s11, [r3]
 8005ee8:	bcf0      	pop	{r4, r5, r6, r7}
 8005eea:	4770      	bx	lr
 8005eec:	00000000 	.word	0x00000000

08005ef0 <arm_radix8_butterfly_f32>:
 8005ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef4:	ed2d 8b10 	vpush	{d8-d15}
 8005ef8:	461c      	mov	r4, r3
 8005efa:	b09d      	sub	sp, #116	; 0x74
 8005efc:	4603      	mov	r3, r0
 8005efe:	3304      	adds	r3, #4
 8005f00:	ed9f bac4 	vldr	s22, [pc, #784]	; 8006214 <arm_radix8_butterfly_f32+0x324>
 8005f04:	9019      	str	r0, [sp, #100]	; 0x64
 8005f06:	921a      	str	r2, [sp, #104]	; 0x68
 8005f08:	468b      	mov	fp, r1
 8005f0a:	931b      	str	r3, [sp, #108]	; 0x6c
 8005f0c:	468a      	mov	sl, r1
 8005f0e:	46a1      	mov	r9, r4
 8005f10:	4607      	mov	r7, r0
 8005f12:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8005f16:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005f1a:	eb03 0508 	add.w	r5, r3, r8
 8005f1e:	195c      	adds	r4, r3, r5
 8005f20:	00de      	lsls	r6, r3, #3
 8005f22:	191a      	adds	r2, r3, r4
 8005f24:	9600      	str	r6, [sp, #0]
 8005f26:	1898      	adds	r0, r3, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	9e00      	ldr	r6, [sp, #0]
 8005f2c:	9311      	str	r3, [sp, #68]	; 0x44
 8005f2e:	4401      	add	r1, r0
 8005f30:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8005f34:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8005f38:	19be      	adds	r6, r7, r6
 8005f3a:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8005f3e:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8005f42:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8005f46:	9f00      	ldr	r7, [sp, #0]
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	eb06 0e07 	add.w	lr, r6, r7
 8005f4e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8005f50:	9302      	str	r3, [sp, #8]
 8005f52:	3204      	adds	r2, #4
 8005f54:	3104      	adds	r1, #4
 8005f56:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f5a:	f04f 0c00 	mov.w	ip, #0
 8005f5e:	edde 7a00 	vldr	s15, [lr]
 8005f62:	edd6 6a00 	vldr	s13, [r6]
 8005f66:	ed95 2a00 	vldr	s4, [r5]
 8005f6a:	ed17 aa01 	vldr	s20, [r7, #-4]
 8005f6e:	edd4 4a00 	vldr	s9, [r4]
 8005f72:	ed90 5a00 	vldr	s10, [r0]
 8005f76:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005f7a:	ed51 0a01 	vldr	s1, [r1, #-4]
 8005f7e:	ee77 8a85 	vadd.f32	s17, s15, s10
 8005f82:	ee76 3a87 	vadd.f32	s7, s13, s14
 8005f86:	ee32 4a20 	vadd.f32	s8, s4, s1
 8005f8a:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8005f8e:	ee33 6a84 	vadd.f32	s12, s7, s8
 8005f92:	ee73 5a28 	vadd.f32	s11, s6, s17
 8005f96:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005f9a:	ee75 6a86 	vadd.f32	s13, s11, s12
 8005f9e:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8005fa2:	ed47 6a01 	vstr	s13, [r7, #-4]
 8005fa6:	edc4 5a00 	vstr	s11, [r4]
 8005faa:	ed92 9a00 	vldr	s18, [r2]
 8005fae:	ed95 1a01 	vldr	s2, [r5, #4]
 8005fb2:	edd6 5a01 	vldr	s11, [r6, #4]
 8005fb6:	ed91 6a00 	vldr	s12, [r1]
 8005fba:	edd7 2a00 	vldr	s5, [r7]
 8005fbe:	edd4 1a01 	vldr	s3, [r4, #4]
 8005fc2:	edde 6a01 	vldr	s13, [lr, #4]
 8005fc6:	edd0 9a01 	vldr	s19, [r0, #4]
 8005fca:	ee72 0a60 	vsub.f32	s1, s4, s1
 8005fce:	ee71 aa46 	vsub.f32	s21, s2, s12
 8005fd2:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8005fd6:	ee37 0a60 	vsub.f32	s0, s14, s1
 8005fda:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8005fde:	ee37 7a20 	vadd.f32	s14, s14, s1
 8005fe2:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8005fe6:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8005fea:	ee75 5a89 	vadd.f32	s11, s11, s18
 8005fee:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8005ff2:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8005ff6:	ee31 6a06 	vadd.f32	s12, s2, s12
 8005ffa:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8005ffe:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8006002:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8006006:	ee72 1ae1 	vsub.f32	s3, s5, s3
 800600a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800600e:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8006012:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8006016:	ee33 3a68 	vsub.f32	s6, s6, s17
 800601a:	ee36 0a88 	vadd.f32	s0, s13, s16
 800601e:	ee75 8a86 	vadd.f32	s17, s11, s12
 8006022:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8006026:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800602a:	ee74 6ae0 	vsub.f32	s13, s9, s1
 800602e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8006032:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8006036:	ee75 4a27 	vadd.f32	s9, s10, s15
 800603a:	ee71 5a49 	vsub.f32	s11, s2, s18
 800603e:	ee31 2a09 	vadd.f32	s4, s2, s18
 8006042:	ee75 7a67 	vsub.f32	s15, s10, s15
 8006046:	ee31 1aa2 	vadd.f32	s2, s3, s5
 800604a:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800604e:	ee73 0a06 	vadd.f32	s1, s6, s12
 8006052:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8006056:	ee36 5a87 	vadd.f32	s10, s13, s14
 800605a:	ee32 8a28 	vadd.f32	s16, s4, s17
 800605e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8006062:	ee34 4a25 	vadd.f32	s8, s8, s11
 8006066:	ee33 3a80 	vadd.f32	s6, s7, s0
 800606a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800606e:	ee71 5a64 	vsub.f32	s11, s2, s9
 8006072:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8006076:	ee32 2a68 	vsub.f32	s4, s4, s17
 800607a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800607e:	ee74 4a81 	vadd.f32	s9, s9, s2
 8006082:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8006086:	44dc      	add	ip, fp
 8006088:	45e2      	cmp	sl, ip
 800608a:	ed87 8a00 	vstr	s16, [r7]
 800608e:	ed84 2a01 	vstr	s4, [r4, #4]
 8006092:	441f      	add	r7, r3
 8006094:	edce 0a00 	vstr	s1, [lr]
 8006098:	441c      	add	r4, r3
 800609a:	ed80 6a00 	vstr	s12, [r0]
 800609e:	edce 1a01 	vstr	s3, [lr, #4]
 80060a2:	ed80 4a01 	vstr	s8, [r0, #4]
 80060a6:	449e      	add	lr, r3
 80060a8:	ed86 3a00 	vstr	s6, [r6]
 80060ac:	4418      	add	r0, r3
 80060ae:	ed41 3a01 	vstr	s7, [r1, #-4]
 80060b2:	ed02 5a01 	vstr	s10, [r2, #-4]
 80060b6:	ed85 7a00 	vstr	s14, [r5]
 80060ba:	edc6 5a01 	vstr	s11, [r6, #4]
 80060be:	edc1 4a00 	vstr	s9, [r1]
 80060c2:	441e      	add	r6, r3
 80060c4:	edc2 6a00 	vstr	s13, [r2]
 80060c8:	4419      	add	r1, r3
 80060ca:	edc5 7a01 	vstr	s15, [r5, #4]
 80060ce:	441a      	add	r2, r3
 80060d0:	441d      	add	r5, r3
 80060d2:	f63f af44 	bhi.w	8005f5e <arm_radix8_butterfly_f32+0x6e>
 80060d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80060d8:	2a07      	cmp	r2, #7
 80060da:	f240 81f5 	bls.w	80064c8 <arm_radix8_butterfly_f32+0x5d8>
 80060de:	f108 0101 	add.w	r1, r8, #1
 80060e2:	188f      	adds	r7, r1, r2
 80060e4:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 80060e8:	19d6      	adds	r6, r2, r7
 80060ea:	eb08 0c09 	add.w	ip, r8, r9
 80060ee:	1994      	adds	r4, r2, r6
 80060f0:	eb0c 0e09 	add.w	lr, ip, r9
 80060f4:	4610      	mov	r0, r2
 80060f6:	9701      	str	r7, [sp, #4]
 80060f8:	4420      	add	r0, r4
 80060fa:	eb0e 0709 	add.w	r7, lr, r9
 80060fe:	1815      	adds	r5, r2, r0
 8006100:	eb07 0209 	add.w	r2, r7, r9
 8006104:	9203      	str	r2, [sp, #12]
 8006106:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800610c:	9117      	str	r1, [sp, #92]	; 0x5c
 800610e:	440a      	add	r2, r1
 8006110:	9900      	ldr	r1, [sp, #0]
 8006112:	3108      	adds	r1, #8
 8006114:	9100      	str	r1, [sp, #0]
 8006116:	9902      	ldr	r1, [sp, #8]
 8006118:	3108      	adds	r1, #8
 800611a:	9102      	str	r1, [sp, #8]
 800611c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800611e:	00ff      	lsls	r7, r7, #3
 8006120:	9715      	str	r7, [sp, #84]	; 0x54
 8006122:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8006126:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800612a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800612e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8006130:	9903      	ldr	r1, [sp, #12]
 8006132:	19d7      	adds	r7, r2, r7
 8006134:	00c9      	lsls	r1, r1, #3
 8006136:	9114      	str	r1, [sp, #80]	; 0x50
 8006138:	9710      	str	r7, [sp, #64]	; 0x40
 800613a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800613c:	9f00      	ldr	r7, [sp, #0]
 800613e:	19cf      	adds	r7, r1, r7
 8006140:	970d      	str	r7, [sp, #52]	; 0x34
 8006142:	9f02      	ldr	r7, [sp, #8]
 8006144:	19cf      	adds	r7, r1, r7
 8006146:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800614a:	970c      	str	r7, [sp, #48]	; 0x30
 800614c:	9f01      	ldr	r7, [sp, #4]
 800614e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8006152:	3504      	adds	r5, #4
 8006154:	3004      	adds	r0, #4
 8006156:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 800615a:	9508      	str	r5, [sp, #32]
 800615c:	9009      	str	r0, [sp, #36]	; 0x24
 800615e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8006160:	981a      	ldr	r0, [sp, #104]	; 0x68
 8006162:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8006166:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800616a:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 800616e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006170:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8006174:	1945      	adds	r5, r0, r5
 8006176:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800617a:	460f      	mov	r7, r1
 800617c:	3404      	adds	r4, #4
 800617e:	4641      	mov	r1, r8
 8006180:	1841      	adds	r1, r0, r1
 8006182:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8006186:	940a      	str	r4, [sp, #40]	; 0x28
 8006188:	eb00 0c06 	add.w	ip, r0, r6
 800618c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006190:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006192:	9506      	str	r5, [sp, #24]
 8006194:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8006196:	9105      	str	r1, [sp, #20]
 8006198:	4639      	mov	r1, r7
 800619a:	1905      	adds	r5, r0, r4
 800619c:	3108      	adds	r1, #8
 800619e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80061a0:	9507      	str	r5, [sp, #28]
 80061a2:	910f      	str	r1, [sp, #60]	; 0x3c
 80061a4:	ea4f 1509 	mov.w	r5, r9, lsl #4
 80061a8:	2101      	movs	r1, #1
 80061aa:	eb00 0e06 	add.w	lr, r0, r6
 80061ae:	9518      	str	r5, [sp, #96]	; 0x60
 80061b0:	9404      	str	r4, [sp, #16]
 80061b2:	9103      	str	r1, [sp, #12]
 80061b4:	4620      	mov	r0, r4
 80061b6:	4689      	mov	r9, r1
 80061b8:	9e06      	ldr	r6, [sp, #24]
 80061ba:	ed90 fa00 	vldr	s30, [r0]
 80061be:	edd6 7a01 	vldr	s15, [r6, #4]
 80061c2:	edd0 ba01 	vldr	s23, [r0, #4]
 80061c6:	edcd 7a00 	vstr	s15, [sp]
 80061ca:	a80d      	add	r0, sp, #52	; 0x34
 80061cc:	edde 7a01 	vldr	s15, [lr, #4]
 80061d0:	9c05      	ldr	r4, [sp, #20]
 80061d2:	9d07      	ldr	r5, [sp, #28]
 80061d4:	edd2 fa00 	vldr	s31, [r2]
 80061d8:	ed92 ca01 	vldr	s24, [r2, #4]
 80061dc:	edcd 7a01 	vstr	s15, [sp, #4]
 80061e0:	c807      	ldmia	r0, {r0, r1, r2}
 80061e2:	eddc 7a01 	vldr	s15, [ip, #4]
 80061e6:	edd4 ea00 	vldr	s29, [r4]
 80061ea:	ed95 ea00 	vldr	s28, [r5]
 80061ee:	edd6 da00 	vldr	s27, [r6]
 80061f2:	edd4 aa01 	vldr	s21, [r4, #4]
 80061f6:	ed95 aa01 	vldr	s20, [r5, #4]
 80061fa:	ed9e da00 	vldr	s26, [lr]
 80061fe:	eddc ca00 	vldr	s25, [ip]
 8006202:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006206:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006208:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800620a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800620c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800620e:	edcd 7a02 	vstr	s15, [sp, #8]
 8006212:	e001      	b.n	8006218 <arm_radix8_butterfly_f32+0x328>
 8006214:	3f3504f3 	.word	0x3f3504f3
 8006218:	ed16 6a01 	vldr	s12, [r6, #-4]
 800621c:	ed91 5a00 	vldr	s10, [r1]
 8006220:	ed57 9a01 	vldr	s19, [r7, #-4]
 8006224:	edd5 7a00 	vldr	s15, [r5]
 8006228:	ed18 7a01 	vldr	s14, [r8, #-4]
 800622c:	edd2 3a00 	vldr	s7, [r2]
 8006230:	ed94 3a00 	vldr	s6, [r4]
 8006234:	ed90 2a00 	vldr	s4, [r0]
 8006238:	ed92 0a01 	vldr	s0, [r2, #4]
 800623c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006240:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006244:	ee33 4a29 	vadd.f32	s8, s6, s19
 8006248:	ee77 4a87 	vadd.f32	s9, s15, s14
 800624c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006250:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006254:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006258:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800625c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006260:	ed82 6a00 	vstr	s12, [r2]
 8006264:	edd5 8a01 	vldr	s17, [r5, #4]
 8006268:	ed90 9a01 	vldr	s18, [r0, #4]
 800626c:	edd6 2a00 	vldr	s5, [r6]
 8006270:	ed98 7a00 	vldr	s14, [r8]
 8006274:	edd4 0a01 	vldr	s1, [r4, #4]
 8006278:	ed91 6a01 	vldr	s12, [r1, #4]
 800627c:	edd7 5a00 	vldr	s11, [r7]
 8006280:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006284:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006288:	ee39 5a62 	vsub.f32	s10, s18, s5
 800628c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8006290:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006294:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006298:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800629c:	ee79 2a22 	vadd.f32	s5, s18, s5
 80062a0:	ee75 8a69 	vsub.f32	s17, s10, s19
 80062a4:	ee32 9a27 	vadd.f32	s18, s4, s15
 80062a8:	ee35 5a29 	vadd.f32	s10, s10, s19
 80062ac:	ee72 7a67 	vsub.f32	s15, s4, s15
 80062b0:	ee30 2a06 	vadd.f32	s4, s0, s12
 80062b4:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80062b8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80062bc:	ee32 9a08 	vadd.f32	s18, s4, s16
 80062c0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80062c4:	ee32 2a48 	vsub.f32	s4, s4, s16
 80062c8:	ee71 4a64 	vsub.f32	s9, s2, s9
 80062cc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80062d0:	ee32 1a87 	vadd.f32	s2, s5, s14
 80062d4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80062d8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80062dc:	ee30 6a46 	vsub.f32	s12, s0, s12
 80062e0:	ee73 0a29 	vadd.f32	s1, s6, s19
 80062e4:	ee36 0a28 	vadd.f32	s0, s12, s17
 80062e8:	ee33 3a69 	vsub.f32	s6, s6, s19
 80062ec:	ee32 7a64 	vsub.f32	s14, s4, s9
 80062f0:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80062f4:	ee36 6a68 	vsub.f32	s12, s12, s17
 80062f8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80062fc:	ee75 8a85 	vadd.f32	s17, s11, s10
 8006300:	ee74 3a22 	vadd.f32	s7, s8, s5
 8006304:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8006308:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800630c:	ee79 1a41 	vsub.f32	s3, s18, s2
 8006310:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8006314:	ee76 5a43 	vsub.f32	s11, s12, s6
 8006318:	ee74 2a62 	vsub.f32	s5, s8, s5
 800631c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8006320:	ee30 4a60 	vsub.f32	s8, s0, s1
 8006324:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8006328:	ee30 0a80 	vadd.f32	s0, s1, s0
 800632c:	ee77 9a85 	vadd.f32	s19, s15, s10
 8006330:	ee33 6a06 	vadd.f32	s12, s6, s12
 8006334:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006338:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800633c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8006340:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8006344:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8006348:	ee39 1a01 	vadd.f32	s2, s18, s2
 800634c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8006350:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8006354:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8006358:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800635c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8006360:	ee35 3a03 	vadd.f32	s6, s10, s6
 8006364:	ee72 6a66 	vsub.f32	s13, s4, s13
 8006368:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800636c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8006370:	ed9d 4a02 	vldr	s8, [sp, #8]
 8006374:	ed82 1a01 	vstr	s2, [r2, #4]
 8006378:	ee77 3a63 	vsub.f32	s7, s14, s7
 800637c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8006380:	ed9d 7a01 	vldr	s14, [sp, #4]
 8006384:	ed81 3a00 	vstr	s6, [r1]
 8006388:	ee30 9a89 	vadd.f32	s18, s1, s18
 800638c:	ee32 2a05 	vadd.f32	s4, s4, s10
 8006390:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8006394:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8006398:	ee67 2a22 	vmul.f32	s5, s14, s5
 800639c:	ee64 1a00 	vmul.f32	s3, s8, s0
 80063a0:	ee27 7a24 	vmul.f32	s14, s14, s9
 80063a4:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80063a8:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80063ac:	ee64 8a28 	vmul.f32	s17, s8, s17
 80063b0:	ed9d 4a00 	vldr	s8, [sp]
 80063b4:	edc1 6a01 	vstr	s13, [r1, #4]
 80063b8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80063bc:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80063c0:	ee64 9a29 	vmul.f32	s19, s8, s19
 80063c4:	ee24 4a25 	vmul.f32	s8, s8, s11
 80063c8:	ee30 7a87 	vadd.f32	s14, s1, s14
 80063cc:	ee74 4a84 	vadd.f32	s9, s9, s8
 80063d0:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80063d4:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80063d8:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80063dc:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80063e0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80063e4:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80063e8:	ee75 1a21 	vadd.f32	s3, s10, s3
 80063ec:	ee30 0a68 	vsub.f32	s0, s0, s17
 80063f0:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80063f4:	ee70 0a84 	vadd.f32	s1, s1, s8
 80063f8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80063fc:	44d9      	add	r9, fp
 80063fe:	45ca      	cmp	sl, r9
 8006400:	ed84 9a00 	vstr	s18, [r4]
 8006404:	edc4 3a01 	vstr	s7, [r4, #4]
 8006408:	441a      	add	r2, r3
 800640a:	ed07 7a01 	vstr	s14, [r7, #-4]
 800640e:	edc7 2a00 	vstr	s5, [r7]
 8006412:	4419      	add	r1, r3
 8006414:	ed80 2a00 	vstr	s4, [r0]
 8006418:	ed80 8a01 	vstr	s16, [r0, #4]
 800641c:	441c      	add	r4, r3
 800641e:	ed48 1a01 	vstr	s3, [r8, #-4]
 8006422:	ed88 0a00 	vstr	s0, [r8]
 8006426:	441f      	add	r7, r3
 8006428:	ed46 4a01 	vstr	s9, [r6, #-4]
 800642c:	4418      	add	r0, r3
 800642e:	edc6 9a00 	vstr	s19, [r6]
 8006432:	4498      	add	r8, r3
 8006434:	edc5 0a00 	vstr	s1, [r5]
 8006438:	ed85 6a01 	vstr	s12, [r5, #4]
 800643c:	441e      	add	r6, r3
 800643e:	441d      	add	r5, r3
 8006440:	f63f aeea 	bhi.w	8006218 <arm_radix8_butterfly_f32+0x328>
 8006444:	9a03      	ldr	r2, [sp, #12]
 8006446:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006448:	3201      	adds	r2, #1
 800644a:	4611      	mov	r1, r2
 800644c:	9203      	str	r2, [sp, #12]
 800644e:	9a04      	ldr	r2, [sp, #16]
 8006450:	4402      	add	r2, r0
 8006452:	9204      	str	r2, [sp, #16]
 8006454:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006456:	9a05      	ldr	r2, [sp, #20]
 8006458:	4402      	add	r2, r0
 800645a:	9205      	str	r2, [sp, #20]
 800645c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800645e:	9a07      	ldr	r2, [sp, #28]
 8006460:	4402      	add	r2, r0
 8006462:	9207      	str	r2, [sp, #28]
 8006464:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006466:	9a06      	ldr	r2, [sp, #24]
 8006468:	4402      	add	r2, r0
 800646a:	9206      	str	r2, [sp, #24]
 800646c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800646e:	4496      	add	lr, r2
 8006470:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006472:	4494      	add	ip, r2
 8006474:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006476:	3208      	adds	r2, #8
 8006478:	920f      	str	r2, [sp, #60]	; 0x3c
 800647a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800647c:	3208      	adds	r2, #8
 800647e:	920e      	str	r2, [sp, #56]	; 0x38
 8006480:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006482:	3208      	adds	r2, #8
 8006484:	920d      	str	r2, [sp, #52]	; 0x34
 8006486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006488:	3208      	adds	r2, #8
 800648a:	920c      	str	r2, [sp, #48]	; 0x30
 800648c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800648e:	3208      	adds	r2, #8
 8006490:	920b      	str	r2, [sp, #44]	; 0x2c
 8006492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006494:	3208      	adds	r2, #8
 8006496:	920a      	str	r2, [sp, #40]	; 0x28
 8006498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800649a:	3208      	adds	r2, #8
 800649c:	9209      	str	r2, [sp, #36]	; 0x24
 800649e:	9a08      	ldr	r2, [sp, #32]
 80064a0:	3208      	adds	r2, #8
 80064a2:	9208      	str	r2, [sp, #32]
 80064a4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80064a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80064a8:	4288      	cmp	r0, r1
 80064aa:	4622      	mov	r2, r4
 80064ac:	d007      	beq.n	80064be <arm_radix8_butterfly_f32+0x5ce>
 80064ae:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80064b0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80064b4:	4621      	mov	r1, r4
 80064b6:	4401      	add	r1, r0
 80064b8:	9110      	str	r1, [sp, #64]	; 0x40
 80064ba:	9804      	ldr	r0, [sp, #16]
 80064bc:	e67c      	b.n	80061b8 <arm_radix8_butterfly_f32+0x2c8>
 80064be:	4683      	mov	fp, r0
 80064c0:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 80064c4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80064c6:	e524      	b.n	8005f12 <arm_radix8_butterfly_f32+0x22>
 80064c8:	b01d      	add	sp, #116	; 0x74
 80064ca:	ecbd 8b10 	vpop	{d8-d15}
 80064ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d2:	bf00      	nop

080064d4 <__libc_init_array>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	4e0d      	ldr	r6, [pc, #52]	; (800650c <__libc_init_array+0x38>)
 80064d8:	4c0d      	ldr	r4, [pc, #52]	; (8006510 <__libc_init_array+0x3c>)
 80064da:	1ba4      	subs	r4, r4, r6
 80064dc:	10a4      	asrs	r4, r4, #2
 80064de:	2500      	movs	r5, #0
 80064e0:	42a5      	cmp	r5, r4
 80064e2:	d109      	bne.n	80064f8 <__libc_init_array+0x24>
 80064e4:	4e0b      	ldr	r6, [pc, #44]	; (8006514 <__libc_init_array+0x40>)
 80064e6:	4c0c      	ldr	r4, [pc, #48]	; (8006518 <__libc_init_array+0x44>)
 80064e8:	f004 f9dc 	bl	800a8a4 <_init>
 80064ec:	1ba4      	subs	r4, r4, r6
 80064ee:	10a4      	asrs	r4, r4, #2
 80064f0:	2500      	movs	r5, #0
 80064f2:	42a5      	cmp	r5, r4
 80064f4:	d105      	bne.n	8006502 <__libc_init_array+0x2e>
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064fc:	4798      	blx	r3
 80064fe:	3501      	adds	r5, #1
 8006500:	e7ee      	b.n	80064e0 <__libc_init_array+0xc>
 8006502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006506:	4798      	blx	r3
 8006508:	3501      	adds	r5, #1
 800650a:	e7f2      	b.n	80064f2 <__libc_init_array+0x1e>
 800650c:	0801e8e0 	.word	0x0801e8e0
 8006510:	0801e8e0 	.word	0x0801e8e0
 8006514:	0801e8e0 	.word	0x0801e8e0
 8006518:	0801e8e4 	.word	0x0801e8e4

0800651c <memset>:
 800651c:	4402      	add	r2, r0
 800651e:	4603      	mov	r3, r0
 8006520:	4293      	cmp	r3, r2
 8006522:	d100      	bne.n	8006526 <memset+0xa>
 8006524:	4770      	bx	lr
 8006526:	f803 1b01 	strb.w	r1, [r3], #1
 800652a:	e7f9      	b.n	8006520 <memset+0x4>

0800652c <__cvt>:
 800652c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006530:	ec55 4b10 	vmov	r4, r5, d0
 8006534:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006536:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800653a:	2d00      	cmp	r5, #0
 800653c:	460e      	mov	r6, r1
 800653e:	4691      	mov	r9, r2
 8006540:	4619      	mov	r1, r3
 8006542:	bfb8      	it	lt
 8006544:	4622      	movlt	r2, r4
 8006546:	462b      	mov	r3, r5
 8006548:	f027 0720 	bic.w	r7, r7, #32
 800654c:	bfbb      	ittet	lt
 800654e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006552:	461d      	movlt	r5, r3
 8006554:	2300      	movge	r3, #0
 8006556:	232d      	movlt	r3, #45	; 0x2d
 8006558:	bfb8      	it	lt
 800655a:	4614      	movlt	r4, r2
 800655c:	2f46      	cmp	r7, #70	; 0x46
 800655e:	700b      	strb	r3, [r1, #0]
 8006560:	d004      	beq.n	800656c <__cvt+0x40>
 8006562:	2f45      	cmp	r7, #69	; 0x45
 8006564:	d100      	bne.n	8006568 <__cvt+0x3c>
 8006566:	3601      	adds	r6, #1
 8006568:	2102      	movs	r1, #2
 800656a:	e000      	b.n	800656e <__cvt+0x42>
 800656c:	2103      	movs	r1, #3
 800656e:	ab03      	add	r3, sp, #12
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	ab02      	add	r3, sp, #8
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	4632      	mov	r2, r6
 8006578:	4653      	mov	r3, sl
 800657a:	ec45 4b10 	vmov	d0, r4, r5
 800657e:	f000 fe5f 	bl	8007240 <_dtoa_r>
 8006582:	2f47      	cmp	r7, #71	; 0x47
 8006584:	4680      	mov	r8, r0
 8006586:	d102      	bne.n	800658e <__cvt+0x62>
 8006588:	f019 0f01 	tst.w	r9, #1
 800658c:	d026      	beq.n	80065dc <__cvt+0xb0>
 800658e:	2f46      	cmp	r7, #70	; 0x46
 8006590:	eb08 0906 	add.w	r9, r8, r6
 8006594:	d111      	bne.n	80065ba <__cvt+0x8e>
 8006596:	f898 3000 	ldrb.w	r3, [r8]
 800659a:	2b30      	cmp	r3, #48	; 0x30
 800659c:	d10a      	bne.n	80065b4 <__cvt+0x88>
 800659e:	2200      	movs	r2, #0
 80065a0:	2300      	movs	r3, #0
 80065a2:	4620      	mov	r0, r4
 80065a4:	4629      	mov	r1, r5
 80065a6:	f7fa faeb 	bl	8000b80 <__aeabi_dcmpeq>
 80065aa:	b918      	cbnz	r0, 80065b4 <__cvt+0x88>
 80065ac:	f1c6 0601 	rsb	r6, r6, #1
 80065b0:	f8ca 6000 	str.w	r6, [sl]
 80065b4:	f8da 3000 	ldr.w	r3, [sl]
 80065b8:	4499      	add	r9, r3
 80065ba:	2200      	movs	r2, #0
 80065bc:	2300      	movs	r3, #0
 80065be:	4620      	mov	r0, r4
 80065c0:	4629      	mov	r1, r5
 80065c2:	f7fa fadd 	bl	8000b80 <__aeabi_dcmpeq>
 80065c6:	b938      	cbnz	r0, 80065d8 <__cvt+0xac>
 80065c8:	2230      	movs	r2, #48	; 0x30
 80065ca:	9b03      	ldr	r3, [sp, #12]
 80065cc:	4599      	cmp	r9, r3
 80065ce:	d905      	bls.n	80065dc <__cvt+0xb0>
 80065d0:	1c59      	adds	r1, r3, #1
 80065d2:	9103      	str	r1, [sp, #12]
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	e7f8      	b.n	80065ca <__cvt+0x9e>
 80065d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065e0:	eba3 0308 	sub.w	r3, r3, r8
 80065e4:	4640      	mov	r0, r8
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	b004      	add	sp, #16
 80065ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080065ee <__exponent>:
 80065ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065f0:	4603      	mov	r3, r0
 80065f2:	2900      	cmp	r1, #0
 80065f4:	bfb8      	it	lt
 80065f6:	4249      	neglt	r1, r1
 80065f8:	f803 2b02 	strb.w	r2, [r3], #2
 80065fc:	bfb4      	ite	lt
 80065fe:	222d      	movlt	r2, #45	; 0x2d
 8006600:	222b      	movge	r2, #43	; 0x2b
 8006602:	2909      	cmp	r1, #9
 8006604:	7042      	strb	r2, [r0, #1]
 8006606:	dd20      	ble.n	800664a <__exponent+0x5c>
 8006608:	f10d 0207 	add.w	r2, sp, #7
 800660c:	4617      	mov	r7, r2
 800660e:	260a      	movs	r6, #10
 8006610:	fb91 f5f6 	sdiv	r5, r1, r6
 8006614:	fb06 1115 	mls	r1, r6, r5, r1
 8006618:	3130      	adds	r1, #48	; 0x30
 800661a:	2d09      	cmp	r5, #9
 800661c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006620:	f102 34ff 	add.w	r4, r2, #4294967295
 8006624:	4629      	mov	r1, r5
 8006626:	dc09      	bgt.n	800663c <__exponent+0x4e>
 8006628:	3130      	adds	r1, #48	; 0x30
 800662a:	3a02      	subs	r2, #2
 800662c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006630:	42ba      	cmp	r2, r7
 8006632:	461c      	mov	r4, r3
 8006634:	d304      	bcc.n	8006640 <__exponent+0x52>
 8006636:	1a20      	subs	r0, r4, r0
 8006638:	b003      	add	sp, #12
 800663a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800663c:	4622      	mov	r2, r4
 800663e:	e7e7      	b.n	8006610 <__exponent+0x22>
 8006640:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006644:	f803 1b01 	strb.w	r1, [r3], #1
 8006648:	e7f2      	b.n	8006630 <__exponent+0x42>
 800664a:	2230      	movs	r2, #48	; 0x30
 800664c:	461c      	mov	r4, r3
 800664e:	4411      	add	r1, r2
 8006650:	f804 2b02 	strb.w	r2, [r4], #2
 8006654:	7059      	strb	r1, [r3, #1]
 8006656:	e7ee      	b.n	8006636 <__exponent+0x48>

08006658 <_printf_float>:
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	b08d      	sub	sp, #52	; 0x34
 800665e:	460c      	mov	r4, r1
 8006660:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006664:	4616      	mov	r6, r2
 8006666:	461f      	mov	r7, r3
 8006668:	4605      	mov	r5, r0
 800666a:	f001 fd33 	bl	80080d4 <_localeconv_r>
 800666e:	6803      	ldr	r3, [r0, #0]
 8006670:	9304      	str	r3, [sp, #16]
 8006672:	4618      	mov	r0, r3
 8006674:	f7f9 fe0c 	bl	8000290 <strlen>
 8006678:	2300      	movs	r3, #0
 800667a:	930a      	str	r3, [sp, #40]	; 0x28
 800667c:	f8d8 3000 	ldr.w	r3, [r8]
 8006680:	9005      	str	r0, [sp, #20]
 8006682:	3307      	adds	r3, #7
 8006684:	f023 0307 	bic.w	r3, r3, #7
 8006688:	f103 0208 	add.w	r2, r3, #8
 800668c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006690:	f8d4 b000 	ldr.w	fp, [r4]
 8006694:	f8c8 2000 	str.w	r2, [r8]
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066a0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066a8:	9307      	str	r3, [sp, #28]
 80066aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80066ae:	f04f 32ff 	mov.w	r2, #4294967295
 80066b2:	4ba5      	ldr	r3, [pc, #660]	; (8006948 <_printf_float+0x2f0>)
 80066b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066b8:	f7fa fa94 	bl	8000be4 <__aeabi_dcmpun>
 80066bc:	2800      	cmp	r0, #0
 80066be:	f040 81fb 	bne.w	8006ab8 <_printf_float+0x460>
 80066c2:	f04f 32ff 	mov.w	r2, #4294967295
 80066c6:	4ba0      	ldr	r3, [pc, #640]	; (8006948 <_printf_float+0x2f0>)
 80066c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066cc:	f7fa fa6c 	bl	8000ba8 <__aeabi_dcmple>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f040 81f1 	bne.w	8006ab8 <_printf_float+0x460>
 80066d6:	2200      	movs	r2, #0
 80066d8:	2300      	movs	r3, #0
 80066da:	4640      	mov	r0, r8
 80066dc:	4649      	mov	r1, r9
 80066de:	f7fa fa59 	bl	8000b94 <__aeabi_dcmplt>
 80066e2:	b110      	cbz	r0, 80066ea <_printf_float+0x92>
 80066e4:	232d      	movs	r3, #45	; 0x2d
 80066e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ea:	4b98      	ldr	r3, [pc, #608]	; (800694c <_printf_float+0x2f4>)
 80066ec:	4a98      	ldr	r2, [pc, #608]	; (8006950 <_printf_float+0x2f8>)
 80066ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80066f2:	bf8c      	ite	hi
 80066f4:	4690      	movhi	r8, r2
 80066f6:	4698      	movls	r8, r3
 80066f8:	2303      	movs	r3, #3
 80066fa:	f02b 0204 	bic.w	r2, fp, #4
 80066fe:	6123      	str	r3, [r4, #16]
 8006700:	6022      	str	r2, [r4, #0]
 8006702:	f04f 0900 	mov.w	r9, #0
 8006706:	9700      	str	r7, [sp, #0]
 8006708:	4633      	mov	r3, r6
 800670a:	aa0b      	add	r2, sp, #44	; 0x2c
 800670c:	4621      	mov	r1, r4
 800670e:	4628      	mov	r0, r5
 8006710:	f000 f9e2 	bl	8006ad8 <_printf_common>
 8006714:	3001      	adds	r0, #1
 8006716:	f040 8093 	bne.w	8006840 <_printf_float+0x1e8>
 800671a:	f04f 30ff 	mov.w	r0, #4294967295
 800671e:	b00d      	add	sp, #52	; 0x34
 8006720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006724:	6861      	ldr	r1, [r4, #4]
 8006726:	1c4b      	adds	r3, r1, #1
 8006728:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800672c:	d13f      	bne.n	80067ae <_printf_float+0x156>
 800672e:	2306      	movs	r3, #6
 8006730:	6063      	str	r3, [r4, #4]
 8006732:	2300      	movs	r3, #0
 8006734:	9303      	str	r3, [sp, #12]
 8006736:	ab0a      	add	r3, sp, #40	; 0x28
 8006738:	9302      	str	r3, [sp, #8]
 800673a:	ab09      	add	r3, sp, #36	; 0x24
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	ec49 8b10 	vmov	d0, r8, r9
 8006742:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006746:	6022      	str	r2, [r4, #0]
 8006748:	f8cd a004 	str.w	sl, [sp, #4]
 800674c:	6861      	ldr	r1, [r4, #4]
 800674e:	4628      	mov	r0, r5
 8006750:	f7ff feec 	bl	800652c <__cvt>
 8006754:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006758:	2b47      	cmp	r3, #71	; 0x47
 800675a:	4680      	mov	r8, r0
 800675c:	d109      	bne.n	8006772 <_printf_float+0x11a>
 800675e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006760:	1cd8      	adds	r0, r3, #3
 8006762:	db02      	blt.n	800676a <_printf_float+0x112>
 8006764:	6862      	ldr	r2, [r4, #4]
 8006766:	4293      	cmp	r3, r2
 8006768:	dd57      	ble.n	800681a <_printf_float+0x1c2>
 800676a:	f1aa 0a02 	sub.w	sl, sl, #2
 800676e:	fa5f fa8a 	uxtb.w	sl, sl
 8006772:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006776:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006778:	d834      	bhi.n	80067e4 <_printf_float+0x18c>
 800677a:	3901      	subs	r1, #1
 800677c:	4652      	mov	r2, sl
 800677e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006782:	9109      	str	r1, [sp, #36]	; 0x24
 8006784:	f7ff ff33 	bl	80065ee <__exponent>
 8006788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800678a:	1883      	adds	r3, r0, r2
 800678c:	2a01      	cmp	r2, #1
 800678e:	4681      	mov	r9, r0
 8006790:	6123      	str	r3, [r4, #16]
 8006792:	dc02      	bgt.n	800679a <_printf_float+0x142>
 8006794:	6822      	ldr	r2, [r4, #0]
 8006796:	07d1      	lsls	r1, r2, #31
 8006798:	d501      	bpl.n	800679e <_printf_float+0x146>
 800679a:	3301      	adds	r3, #1
 800679c:	6123      	str	r3, [r4, #16]
 800679e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0af      	beq.n	8006706 <_printf_float+0xae>
 80067a6:	232d      	movs	r3, #45	; 0x2d
 80067a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ac:	e7ab      	b.n	8006706 <_printf_float+0xae>
 80067ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80067b2:	d002      	beq.n	80067ba <_printf_float+0x162>
 80067b4:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80067b8:	d1bb      	bne.n	8006732 <_printf_float+0xda>
 80067ba:	b189      	cbz	r1, 80067e0 <_printf_float+0x188>
 80067bc:	2300      	movs	r3, #0
 80067be:	9303      	str	r3, [sp, #12]
 80067c0:	ab0a      	add	r3, sp, #40	; 0x28
 80067c2:	9302      	str	r3, [sp, #8]
 80067c4:	ab09      	add	r3, sp, #36	; 0x24
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	ec49 8b10 	vmov	d0, r8, r9
 80067cc:	6022      	str	r2, [r4, #0]
 80067ce:	f8cd a004 	str.w	sl, [sp, #4]
 80067d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067d6:	4628      	mov	r0, r5
 80067d8:	f7ff fea8 	bl	800652c <__cvt>
 80067dc:	4680      	mov	r8, r0
 80067de:	e7be      	b.n	800675e <_printf_float+0x106>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e7a5      	b.n	8006730 <_printf_float+0xd8>
 80067e4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80067e8:	d119      	bne.n	800681e <_printf_float+0x1c6>
 80067ea:	2900      	cmp	r1, #0
 80067ec:	6863      	ldr	r3, [r4, #4]
 80067ee:	dd0c      	ble.n	800680a <_printf_float+0x1b2>
 80067f0:	6121      	str	r1, [r4, #16]
 80067f2:	b913      	cbnz	r3, 80067fa <_printf_float+0x1a2>
 80067f4:	6822      	ldr	r2, [r4, #0]
 80067f6:	07d2      	lsls	r2, r2, #31
 80067f8:	d502      	bpl.n	8006800 <_printf_float+0x1a8>
 80067fa:	3301      	adds	r3, #1
 80067fc:	440b      	add	r3, r1
 80067fe:	6123      	str	r3, [r4, #16]
 8006800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006802:	65a3      	str	r3, [r4, #88]	; 0x58
 8006804:	f04f 0900 	mov.w	r9, #0
 8006808:	e7c9      	b.n	800679e <_printf_float+0x146>
 800680a:	b913      	cbnz	r3, 8006812 <_printf_float+0x1ba>
 800680c:	6822      	ldr	r2, [r4, #0]
 800680e:	07d0      	lsls	r0, r2, #31
 8006810:	d501      	bpl.n	8006816 <_printf_float+0x1be>
 8006812:	3302      	adds	r3, #2
 8006814:	e7f3      	b.n	80067fe <_printf_float+0x1a6>
 8006816:	2301      	movs	r3, #1
 8006818:	e7f1      	b.n	80067fe <_printf_float+0x1a6>
 800681a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800681e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006822:	4293      	cmp	r3, r2
 8006824:	db05      	blt.n	8006832 <_printf_float+0x1da>
 8006826:	6822      	ldr	r2, [r4, #0]
 8006828:	6123      	str	r3, [r4, #16]
 800682a:	07d1      	lsls	r1, r2, #31
 800682c:	d5e8      	bpl.n	8006800 <_printf_float+0x1a8>
 800682e:	3301      	adds	r3, #1
 8006830:	e7e5      	b.n	80067fe <_printf_float+0x1a6>
 8006832:	2b00      	cmp	r3, #0
 8006834:	bfd4      	ite	le
 8006836:	f1c3 0302 	rsble	r3, r3, #2
 800683a:	2301      	movgt	r3, #1
 800683c:	4413      	add	r3, r2
 800683e:	e7de      	b.n	80067fe <_printf_float+0x1a6>
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	055a      	lsls	r2, r3, #21
 8006844:	d407      	bmi.n	8006856 <_printf_float+0x1fe>
 8006846:	6923      	ldr	r3, [r4, #16]
 8006848:	4642      	mov	r2, r8
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	d12b      	bne.n	80068ac <_printf_float+0x254>
 8006854:	e761      	b.n	800671a <_printf_float+0xc2>
 8006856:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800685a:	f240 80e2 	bls.w	8006a22 <_printf_float+0x3ca>
 800685e:	2200      	movs	r2, #0
 8006860:	2300      	movs	r3, #0
 8006862:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006866:	f7fa f98b 	bl	8000b80 <__aeabi_dcmpeq>
 800686a:	2800      	cmp	r0, #0
 800686c:	d03c      	beq.n	80068e8 <_printf_float+0x290>
 800686e:	2301      	movs	r3, #1
 8006870:	4a38      	ldr	r2, [pc, #224]	; (8006954 <_printf_float+0x2fc>)
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	47b8      	blx	r7
 8006878:	3001      	adds	r0, #1
 800687a:	f43f af4e 	beq.w	800671a <_printf_float+0xc2>
 800687e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006882:	429a      	cmp	r2, r3
 8006884:	db02      	blt.n	800688c <_printf_float+0x234>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	07d8      	lsls	r0, r3, #31
 800688a:	d50f      	bpl.n	80068ac <_printf_float+0x254>
 800688c:	9b05      	ldr	r3, [sp, #20]
 800688e:	9a04      	ldr	r2, [sp, #16]
 8006890:	4631      	mov	r1, r6
 8006892:	4628      	mov	r0, r5
 8006894:	47b8      	blx	r7
 8006896:	3001      	adds	r0, #1
 8006898:	f43f af3f 	beq.w	800671a <_printf_float+0xc2>
 800689c:	f04f 0800 	mov.w	r8, #0
 80068a0:	f104 091a 	add.w	r9, r4, #26
 80068a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a6:	3b01      	subs	r3, #1
 80068a8:	4598      	cmp	r8, r3
 80068aa:	db12      	blt.n	80068d2 <_printf_float+0x27a>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	079b      	lsls	r3, r3, #30
 80068b0:	d509      	bpl.n	80068c6 <_printf_float+0x26e>
 80068b2:	f04f 0800 	mov.w	r8, #0
 80068b6:	f104 0919 	add.w	r9, r4, #25
 80068ba:	68e3      	ldr	r3, [r4, #12]
 80068bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068be:	1a9b      	subs	r3, r3, r2
 80068c0:	4598      	cmp	r8, r3
 80068c2:	f2c0 80ee 	blt.w	8006aa2 <_printf_float+0x44a>
 80068c6:	68e0      	ldr	r0, [r4, #12]
 80068c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ca:	4298      	cmp	r0, r3
 80068cc:	bfb8      	it	lt
 80068ce:	4618      	movlt	r0, r3
 80068d0:	e725      	b.n	800671e <_printf_float+0xc6>
 80068d2:	2301      	movs	r3, #1
 80068d4:	464a      	mov	r2, r9
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	f43f af1c 	beq.w	800671a <_printf_float+0xc2>
 80068e2:	f108 0801 	add.w	r8, r8, #1
 80068e6:	e7dd      	b.n	80068a4 <_printf_float+0x24c>
 80068e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	dc34      	bgt.n	8006958 <_printf_float+0x300>
 80068ee:	2301      	movs	r3, #1
 80068f0:	4a18      	ldr	r2, [pc, #96]	; (8006954 <_printf_float+0x2fc>)
 80068f2:	4631      	mov	r1, r6
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b8      	blx	r7
 80068f8:	3001      	adds	r0, #1
 80068fa:	f43f af0e 	beq.w	800671a <_printf_float+0xc2>
 80068fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006900:	b923      	cbnz	r3, 800690c <_printf_float+0x2b4>
 8006902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006904:	b913      	cbnz	r3, 800690c <_printf_float+0x2b4>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	07d9      	lsls	r1, r3, #31
 800690a:	d5cf      	bpl.n	80068ac <_printf_float+0x254>
 800690c:	9b05      	ldr	r3, [sp, #20]
 800690e:	9a04      	ldr	r2, [sp, #16]
 8006910:	4631      	mov	r1, r6
 8006912:	4628      	mov	r0, r5
 8006914:	47b8      	blx	r7
 8006916:	3001      	adds	r0, #1
 8006918:	f43f aeff 	beq.w	800671a <_printf_float+0xc2>
 800691c:	f04f 0900 	mov.w	r9, #0
 8006920:	f104 0a1a 	add.w	sl, r4, #26
 8006924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006926:	425b      	negs	r3, r3
 8006928:	4599      	cmp	r9, r3
 800692a:	db01      	blt.n	8006930 <_printf_float+0x2d8>
 800692c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692e:	e78b      	b.n	8006848 <_printf_float+0x1f0>
 8006930:	2301      	movs	r3, #1
 8006932:	4652      	mov	r2, sl
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f aeed 	beq.w	800671a <_printf_float+0xc2>
 8006940:	f109 0901 	add.w	r9, r9, #1
 8006944:	e7ee      	b.n	8006924 <_printf_float+0x2cc>
 8006946:	bf00      	nop
 8006948:	7fefffff 	.word	0x7fefffff
 800694c:	0801e5c8 	.word	0x0801e5c8
 8006950:	0801e5cc 	.word	0x0801e5cc
 8006954:	0801e88c 	.word	0x0801e88c
 8006958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800695a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800695c:	429a      	cmp	r2, r3
 800695e:	bfa8      	it	ge
 8006960:	461a      	movge	r2, r3
 8006962:	2a00      	cmp	r2, #0
 8006964:	4691      	mov	r9, r2
 8006966:	dc38      	bgt.n	80069da <_printf_float+0x382>
 8006968:	f104 031a 	add.w	r3, r4, #26
 800696c:	f04f 0b00 	mov.w	fp, #0
 8006970:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006974:	9306      	str	r3, [sp, #24]
 8006976:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800697a:	ebaa 0309 	sub.w	r3, sl, r9
 800697e:	459b      	cmp	fp, r3
 8006980:	db33      	blt.n	80069ea <_printf_float+0x392>
 8006982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006986:	429a      	cmp	r2, r3
 8006988:	db3a      	blt.n	8006a00 <_printf_float+0x3a8>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	07da      	lsls	r2, r3, #31
 800698e:	d437      	bmi.n	8006a00 <_printf_float+0x3a8>
 8006990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006992:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006994:	eba3 020a 	sub.w	r2, r3, sl
 8006998:	eba3 0901 	sub.w	r9, r3, r1
 800699c:	4591      	cmp	r9, r2
 800699e:	bfa8      	it	ge
 80069a0:	4691      	movge	r9, r2
 80069a2:	f1b9 0f00 	cmp.w	r9, #0
 80069a6:	dc33      	bgt.n	8006a10 <_printf_float+0x3b8>
 80069a8:	f04f 0800 	mov.w	r8, #0
 80069ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069b0:	f104 0a1a 	add.w	sl, r4, #26
 80069b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b8:	1a9b      	subs	r3, r3, r2
 80069ba:	eba3 0309 	sub.w	r3, r3, r9
 80069be:	4598      	cmp	r8, r3
 80069c0:	f6bf af74 	bge.w	80068ac <_printf_float+0x254>
 80069c4:	2301      	movs	r3, #1
 80069c6:	4652      	mov	r2, sl
 80069c8:	4631      	mov	r1, r6
 80069ca:	4628      	mov	r0, r5
 80069cc:	47b8      	blx	r7
 80069ce:	3001      	adds	r0, #1
 80069d0:	f43f aea3 	beq.w	800671a <_printf_float+0xc2>
 80069d4:	f108 0801 	add.w	r8, r8, #1
 80069d8:	e7ec      	b.n	80069b4 <_printf_float+0x35c>
 80069da:	4613      	mov	r3, r2
 80069dc:	4631      	mov	r1, r6
 80069de:	4642      	mov	r2, r8
 80069e0:	4628      	mov	r0, r5
 80069e2:	47b8      	blx	r7
 80069e4:	3001      	adds	r0, #1
 80069e6:	d1bf      	bne.n	8006968 <_printf_float+0x310>
 80069e8:	e697      	b.n	800671a <_printf_float+0xc2>
 80069ea:	2301      	movs	r3, #1
 80069ec:	9a06      	ldr	r2, [sp, #24]
 80069ee:	4631      	mov	r1, r6
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b8      	blx	r7
 80069f4:	3001      	adds	r0, #1
 80069f6:	f43f ae90 	beq.w	800671a <_printf_float+0xc2>
 80069fa:	f10b 0b01 	add.w	fp, fp, #1
 80069fe:	e7ba      	b.n	8006976 <_printf_float+0x31e>
 8006a00:	9b05      	ldr	r3, [sp, #20]
 8006a02:	9a04      	ldr	r2, [sp, #16]
 8006a04:	4631      	mov	r1, r6
 8006a06:	4628      	mov	r0, r5
 8006a08:	47b8      	blx	r7
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	d1c0      	bne.n	8006990 <_printf_float+0x338>
 8006a0e:	e684      	b.n	800671a <_printf_float+0xc2>
 8006a10:	464b      	mov	r3, r9
 8006a12:	eb08 020a 	add.w	r2, r8, sl
 8006a16:	4631      	mov	r1, r6
 8006a18:	4628      	mov	r0, r5
 8006a1a:	47b8      	blx	r7
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d1c3      	bne.n	80069a8 <_printf_float+0x350>
 8006a20:	e67b      	b.n	800671a <_printf_float+0xc2>
 8006a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a24:	2a01      	cmp	r2, #1
 8006a26:	dc01      	bgt.n	8006a2c <_printf_float+0x3d4>
 8006a28:	07db      	lsls	r3, r3, #31
 8006a2a:	d537      	bpl.n	8006a9c <_printf_float+0x444>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4642      	mov	r2, r8
 8006a30:	4631      	mov	r1, r6
 8006a32:	4628      	mov	r0, r5
 8006a34:	47b8      	blx	r7
 8006a36:	3001      	adds	r0, #1
 8006a38:	f43f ae6f 	beq.w	800671a <_printf_float+0xc2>
 8006a3c:	9b05      	ldr	r3, [sp, #20]
 8006a3e:	9a04      	ldr	r2, [sp, #16]
 8006a40:	4631      	mov	r1, r6
 8006a42:	4628      	mov	r0, r5
 8006a44:	47b8      	blx	r7
 8006a46:	3001      	adds	r0, #1
 8006a48:	f43f ae67 	beq.w	800671a <_printf_float+0xc2>
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2300      	movs	r3, #0
 8006a50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a54:	f7fa f894 	bl	8000b80 <__aeabi_dcmpeq>
 8006a58:	b158      	cbz	r0, 8006a72 <_printf_float+0x41a>
 8006a5a:	f04f 0800 	mov.w	r8, #0
 8006a5e:	f104 0a1a 	add.w	sl, r4, #26
 8006a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a64:	3b01      	subs	r3, #1
 8006a66:	4598      	cmp	r8, r3
 8006a68:	db0d      	blt.n	8006a86 <_printf_float+0x42e>
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a70:	e6eb      	b.n	800684a <_printf_float+0x1f2>
 8006a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a74:	f108 0201 	add.w	r2, r8, #1
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	47b8      	blx	r7
 8006a80:	3001      	adds	r0, #1
 8006a82:	d1f2      	bne.n	8006a6a <_printf_float+0x412>
 8006a84:	e649      	b.n	800671a <_printf_float+0xc2>
 8006a86:	2301      	movs	r3, #1
 8006a88:	4652      	mov	r2, sl
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	f43f ae42 	beq.w	800671a <_printf_float+0xc2>
 8006a96:	f108 0801 	add.w	r8, r8, #1
 8006a9a:	e7e2      	b.n	8006a62 <_printf_float+0x40a>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	4642      	mov	r2, r8
 8006aa0:	e7eb      	b.n	8006a7a <_printf_float+0x422>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	464a      	mov	r2, r9
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b8      	blx	r7
 8006aac:	3001      	adds	r0, #1
 8006aae:	f43f ae34 	beq.w	800671a <_printf_float+0xc2>
 8006ab2:	f108 0801 	add.w	r8, r8, #1
 8006ab6:	e700      	b.n	80068ba <_printf_float+0x262>
 8006ab8:	4642      	mov	r2, r8
 8006aba:	464b      	mov	r3, r9
 8006abc:	4640      	mov	r0, r8
 8006abe:	4649      	mov	r1, r9
 8006ac0:	f7fa f890 	bl	8000be4 <__aeabi_dcmpun>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	f43f ae2d 	beq.w	8006724 <_printf_float+0xcc>
 8006aca:	4b01      	ldr	r3, [pc, #4]	; (8006ad0 <_printf_float+0x478>)
 8006acc:	4a01      	ldr	r2, [pc, #4]	; (8006ad4 <_printf_float+0x47c>)
 8006ace:	e60e      	b.n	80066ee <_printf_float+0x96>
 8006ad0:	0801e5d0 	.word	0x0801e5d0
 8006ad4:	0801e5d4 	.word	0x0801e5d4

08006ad8 <_printf_common>:
 8006ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006adc:	4691      	mov	r9, r2
 8006ade:	461f      	mov	r7, r3
 8006ae0:	688a      	ldr	r2, [r1, #8]
 8006ae2:	690b      	ldr	r3, [r1, #16]
 8006ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	bfb8      	it	lt
 8006aec:	4613      	movlt	r3, r2
 8006aee:	f8c9 3000 	str.w	r3, [r9]
 8006af2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006af6:	4606      	mov	r6, r0
 8006af8:	460c      	mov	r4, r1
 8006afa:	b112      	cbz	r2, 8006b02 <_printf_common+0x2a>
 8006afc:	3301      	adds	r3, #1
 8006afe:	f8c9 3000 	str.w	r3, [r9]
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	0699      	lsls	r1, r3, #26
 8006b06:	bf42      	ittt	mi
 8006b08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b0c:	3302      	addmi	r3, #2
 8006b0e:	f8c9 3000 	strmi.w	r3, [r9]
 8006b12:	6825      	ldr	r5, [r4, #0]
 8006b14:	f015 0506 	ands.w	r5, r5, #6
 8006b18:	d107      	bne.n	8006b2a <_printf_common+0x52>
 8006b1a:	f104 0a19 	add.w	sl, r4, #25
 8006b1e:	68e3      	ldr	r3, [r4, #12]
 8006b20:	f8d9 2000 	ldr.w	r2, [r9]
 8006b24:	1a9b      	subs	r3, r3, r2
 8006b26:	429d      	cmp	r5, r3
 8006b28:	db29      	blt.n	8006b7e <_printf_common+0xa6>
 8006b2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b2e:	6822      	ldr	r2, [r4, #0]
 8006b30:	3300      	adds	r3, #0
 8006b32:	bf18      	it	ne
 8006b34:	2301      	movne	r3, #1
 8006b36:	0692      	lsls	r2, r2, #26
 8006b38:	d42e      	bmi.n	8006b98 <_printf_common+0xc0>
 8006b3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b3e:	4639      	mov	r1, r7
 8006b40:	4630      	mov	r0, r6
 8006b42:	47c0      	blx	r8
 8006b44:	3001      	adds	r0, #1
 8006b46:	d021      	beq.n	8006b8c <_printf_common+0xb4>
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	68e5      	ldr	r5, [r4, #12]
 8006b4c:	f8d9 2000 	ldr.w	r2, [r9]
 8006b50:	f003 0306 	and.w	r3, r3, #6
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	bf08      	it	eq
 8006b58:	1aad      	subeq	r5, r5, r2
 8006b5a:	68a3      	ldr	r3, [r4, #8]
 8006b5c:	6922      	ldr	r2, [r4, #16]
 8006b5e:	bf0c      	ite	eq
 8006b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b64:	2500      	movne	r5, #0
 8006b66:	4293      	cmp	r3, r2
 8006b68:	bfc4      	itt	gt
 8006b6a:	1a9b      	subgt	r3, r3, r2
 8006b6c:	18ed      	addgt	r5, r5, r3
 8006b6e:	f04f 0900 	mov.w	r9, #0
 8006b72:	341a      	adds	r4, #26
 8006b74:	454d      	cmp	r5, r9
 8006b76:	d11b      	bne.n	8006bb0 <_printf_common+0xd8>
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7e:	2301      	movs	r3, #1
 8006b80:	4652      	mov	r2, sl
 8006b82:	4639      	mov	r1, r7
 8006b84:	4630      	mov	r0, r6
 8006b86:	47c0      	blx	r8
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d103      	bne.n	8006b94 <_printf_common+0xbc>
 8006b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b94:	3501      	adds	r5, #1
 8006b96:	e7c2      	b.n	8006b1e <_printf_common+0x46>
 8006b98:	18e1      	adds	r1, r4, r3
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	2030      	movs	r0, #48	; 0x30
 8006b9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ba2:	4422      	add	r2, r4
 8006ba4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ba8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bac:	3302      	adds	r3, #2
 8006bae:	e7c4      	b.n	8006b3a <_printf_common+0x62>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	47c0      	blx	r8
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d0e6      	beq.n	8006b8c <_printf_common+0xb4>
 8006bbe:	f109 0901 	add.w	r9, r9, #1
 8006bc2:	e7d7      	b.n	8006b74 <_printf_common+0x9c>

08006bc4 <_printf_i>:
 8006bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bc8:	4617      	mov	r7, r2
 8006bca:	7e0a      	ldrb	r2, [r1, #24]
 8006bcc:	b085      	sub	sp, #20
 8006bce:	2a6e      	cmp	r2, #110	; 0x6e
 8006bd0:	4698      	mov	r8, r3
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bd8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006bdc:	f000 80bc 	beq.w	8006d58 <_printf_i+0x194>
 8006be0:	d81a      	bhi.n	8006c18 <_printf_i+0x54>
 8006be2:	2a63      	cmp	r2, #99	; 0x63
 8006be4:	d02e      	beq.n	8006c44 <_printf_i+0x80>
 8006be6:	d80a      	bhi.n	8006bfe <_printf_i+0x3a>
 8006be8:	2a00      	cmp	r2, #0
 8006bea:	f000 80c8 	beq.w	8006d7e <_printf_i+0x1ba>
 8006bee:	2a58      	cmp	r2, #88	; 0x58
 8006bf0:	f000 808a 	beq.w	8006d08 <_printf_i+0x144>
 8006bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bf8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006bfc:	e02a      	b.n	8006c54 <_printf_i+0x90>
 8006bfe:	2a64      	cmp	r2, #100	; 0x64
 8006c00:	d001      	beq.n	8006c06 <_printf_i+0x42>
 8006c02:	2a69      	cmp	r2, #105	; 0x69
 8006c04:	d1f6      	bne.n	8006bf4 <_printf_i+0x30>
 8006c06:	6821      	ldr	r1, [r4, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006c0e:	d023      	beq.n	8006c58 <_printf_i+0x94>
 8006c10:	1d11      	adds	r1, r2, #4
 8006c12:	6019      	str	r1, [r3, #0]
 8006c14:	6813      	ldr	r3, [r2, #0]
 8006c16:	e027      	b.n	8006c68 <_printf_i+0xa4>
 8006c18:	2a73      	cmp	r2, #115	; 0x73
 8006c1a:	f000 80b4 	beq.w	8006d86 <_printf_i+0x1c2>
 8006c1e:	d808      	bhi.n	8006c32 <_printf_i+0x6e>
 8006c20:	2a6f      	cmp	r2, #111	; 0x6f
 8006c22:	d02a      	beq.n	8006c7a <_printf_i+0xb6>
 8006c24:	2a70      	cmp	r2, #112	; 0x70
 8006c26:	d1e5      	bne.n	8006bf4 <_printf_i+0x30>
 8006c28:	680a      	ldr	r2, [r1, #0]
 8006c2a:	f042 0220 	orr.w	r2, r2, #32
 8006c2e:	600a      	str	r2, [r1, #0]
 8006c30:	e003      	b.n	8006c3a <_printf_i+0x76>
 8006c32:	2a75      	cmp	r2, #117	; 0x75
 8006c34:	d021      	beq.n	8006c7a <_printf_i+0xb6>
 8006c36:	2a78      	cmp	r2, #120	; 0x78
 8006c38:	d1dc      	bne.n	8006bf4 <_printf_i+0x30>
 8006c3a:	2278      	movs	r2, #120	; 0x78
 8006c3c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006c40:	496e      	ldr	r1, [pc, #440]	; (8006dfc <_printf_i+0x238>)
 8006c42:	e064      	b.n	8006d0e <_printf_i+0x14a>
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006c4a:	1d11      	adds	r1, r2, #4
 8006c4c:	6019      	str	r1, [r3, #0]
 8006c4e:	6813      	ldr	r3, [r2, #0]
 8006c50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c54:	2301      	movs	r3, #1
 8006c56:	e0a3      	b.n	8006da0 <_printf_i+0x1dc>
 8006c58:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006c5c:	f102 0104 	add.w	r1, r2, #4
 8006c60:	6019      	str	r1, [r3, #0]
 8006c62:	d0d7      	beq.n	8006c14 <_printf_i+0x50>
 8006c64:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	da03      	bge.n	8006c74 <_printf_i+0xb0>
 8006c6c:	222d      	movs	r2, #45	; 0x2d
 8006c6e:	425b      	negs	r3, r3
 8006c70:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c74:	4962      	ldr	r1, [pc, #392]	; (8006e00 <_printf_i+0x23c>)
 8006c76:	220a      	movs	r2, #10
 8006c78:	e017      	b.n	8006caa <_printf_i+0xe6>
 8006c7a:	6820      	ldr	r0, [r4, #0]
 8006c7c:	6819      	ldr	r1, [r3, #0]
 8006c7e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006c82:	d003      	beq.n	8006c8c <_printf_i+0xc8>
 8006c84:	1d08      	adds	r0, r1, #4
 8006c86:	6018      	str	r0, [r3, #0]
 8006c88:	680b      	ldr	r3, [r1, #0]
 8006c8a:	e006      	b.n	8006c9a <_printf_i+0xd6>
 8006c8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c90:	f101 0004 	add.w	r0, r1, #4
 8006c94:	6018      	str	r0, [r3, #0]
 8006c96:	d0f7      	beq.n	8006c88 <_printf_i+0xc4>
 8006c98:	880b      	ldrh	r3, [r1, #0]
 8006c9a:	4959      	ldr	r1, [pc, #356]	; (8006e00 <_printf_i+0x23c>)
 8006c9c:	2a6f      	cmp	r2, #111	; 0x6f
 8006c9e:	bf14      	ite	ne
 8006ca0:	220a      	movne	r2, #10
 8006ca2:	2208      	moveq	r2, #8
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006caa:	6865      	ldr	r5, [r4, #4]
 8006cac:	60a5      	str	r5, [r4, #8]
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	f2c0 809c 	blt.w	8006dec <_printf_i+0x228>
 8006cb4:	6820      	ldr	r0, [r4, #0]
 8006cb6:	f020 0004 	bic.w	r0, r0, #4
 8006cba:	6020      	str	r0, [r4, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d13f      	bne.n	8006d40 <_printf_i+0x17c>
 8006cc0:	2d00      	cmp	r5, #0
 8006cc2:	f040 8095 	bne.w	8006df0 <_printf_i+0x22c>
 8006cc6:	4675      	mov	r5, lr
 8006cc8:	2a08      	cmp	r2, #8
 8006cca:	d10b      	bne.n	8006ce4 <_printf_i+0x120>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	07da      	lsls	r2, r3, #31
 8006cd0:	d508      	bpl.n	8006ce4 <_printf_i+0x120>
 8006cd2:	6923      	ldr	r3, [r4, #16]
 8006cd4:	6862      	ldr	r2, [r4, #4]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	bfde      	ittt	le
 8006cda:	2330      	movle	r3, #48	; 0x30
 8006cdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ce0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ce4:	ebae 0305 	sub.w	r3, lr, r5
 8006ce8:	6123      	str	r3, [r4, #16]
 8006cea:	f8cd 8000 	str.w	r8, [sp]
 8006cee:	463b      	mov	r3, r7
 8006cf0:	aa03      	add	r2, sp, #12
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7ff feef 	bl	8006ad8 <_printf_common>
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	d155      	bne.n	8006daa <_printf_i+0x1e6>
 8006cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006d02:	b005      	add	sp, #20
 8006d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d08:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006d0c:	493c      	ldr	r1, [pc, #240]	; (8006e00 <_printf_i+0x23c>)
 8006d0e:	6822      	ldr	r2, [r4, #0]
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006d16:	f100 0504 	add.w	r5, r0, #4
 8006d1a:	601d      	str	r5, [r3, #0]
 8006d1c:	d001      	beq.n	8006d22 <_printf_i+0x15e>
 8006d1e:	6803      	ldr	r3, [r0, #0]
 8006d20:	e002      	b.n	8006d28 <_printf_i+0x164>
 8006d22:	0655      	lsls	r5, r2, #25
 8006d24:	d5fb      	bpl.n	8006d1e <_printf_i+0x15a>
 8006d26:	8803      	ldrh	r3, [r0, #0]
 8006d28:	07d0      	lsls	r0, r2, #31
 8006d2a:	bf44      	itt	mi
 8006d2c:	f042 0220 	orrmi.w	r2, r2, #32
 8006d30:	6022      	strmi	r2, [r4, #0]
 8006d32:	b91b      	cbnz	r3, 8006d3c <_printf_i+0x178>
 8006d34:	6822      	ldr	r2, [r4, #0]
 8006d36:	f022 0220 	bic.w	r2, r2, #32
 8006d3a:	6022      	str	r2, [r4, #0]
 8006d3c:	2210      	movs	r2, #16
 8006d3e:	e7b1      	b.n	8006ca4 <_printf_i+0xe0>
 8006d40:	4675      	mov	r5, lr
 8006d42:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d46:	fb02 3310 	mls	r3, r2, r0, r3
 8006d4a:	5ccb      	ldrb	r3, [r1, r3]
 8006d4c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d50:	4603      	mov	r3, r0
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d1f5      	bne.n	8006d42 <_printf_i+0x17e>
 8006d56:	e7b7      	b.n	8006cc8 <_printf_i+0x104>
 8006d58:	6808      	ldr	r0, [r1, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	6949      	ldr	r1, [r1, #20]
 8006d5e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006d62:	d004      	beq.n	8006d6e <_printf_i+0x1aa>
 8006d64:	1d10      	adds	r0, r2, #4
 8006d66:	6018      	str	r0, [r3, #0]
 8006d68:	6813      	ldr	r3, [r2, #0]
 8006d6a:	6019      	str	r1, [r3, #0]
 8006d6c:	e007      	b.n	8006d7e <_printf_i+0x1ba>
 8006d6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d72:	f102 0004 	add.w	r0, r2, #4
 8006d76:	6018      	str	r0, [r3, #0]
 8006d78:	6813      	ldr	r3, [r2, #0]
 8006d7a:	d0f6      	beq.n	8006d6a <_printf_i+0x1a6>
 8006d7c:	8019      	strh	r1, [r3, #0]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	6123      	str	r3, [r4, #16]
 8006d82:	4675      	mov	r5, lr
 8006d84:	e7b1      	b.n	8006cea <_printf_i+0x126>
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	1d11      	adds	r1, r2, #4
 8006d8a:	6019      	str	r1, [r3, #0]
 8006d8c:	6815      	ldr	r5, [r2, #0]
 8006d8e:	6862      	ldr	r2, [r4, #4]
 8006d90:	2100      	movs	r1, #0
 8006d92:	4628      	mov	r0, r5
 8006d94:	f7f9 fa84 	bl	80002a0 <memchr>
 8006d98:	b108      	cbz	r0, 8006d9e <_printf_i+0x1da>
 8006d9a:	1b40      	subs	r0, r0, r5
 8006d9c:	6060      	str	r0, [r4, #4]
 8006d9e:	6863      	ldr	r3, [r4, #4]
 8006da0:	6123      	str	r3, [r4, #16]
 8006da2:	2300      	movs	r3, #0
 8006da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da8:	e79f      	b.n	8006cea <_printf_i+0x126>
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	462a      	mov	r2, r5
 8006dae:	4639      	mov	r1, r7
 8006db0:	4630      	mov	r0, r6
 8006db2:	47c0      	blx	r8
 8006db4:	3001      	adds	r0, #1
 8006db6:	d0a2      	beq.n	8006cfe <_printf_i+0x13a>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	079b      	lsls	r3, r3, #30
 8006dbc:	d507      	bpl.n	8006dce <_printf_i+0x20a>
 8006dbe:	2500      	movs	r5, #0
 8006dc0:	f104 0919 	add.w	r9, r4, #25
 8006dc4:	68e3      	ldr	r3, [r4, #12]
 8006dc6:	9a03      	ldr	r2, [sp, #12]
 8006dc8:	1a9b      	subs	r3, r3, r2
 8006dca:	429d      	cmp	r5, r3
 8006dcc:	db05      	blt.n	8006dda <_printf_i+0x216>
 8006dce:	68e0      	ldr	r0, [r4, #12]
 8006dd0:	9b03      	ldr	r3, [sp, #12]
 8006dd2:	4298      	cmp	r0, r3
 8006dd4:	bfb8      	it	lt
 8006dd6:	4618      	movlt	r0, r3
 8006dd8:	e793      	b.n	8006d02 <_printf_i+0x13e>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	464a      	mov	r2, r9
 8006dde:	4639      	mov	r1, r7
 8006de0:	4630      	mov	r0, r6
 8006de2:	47c0      	blx	r8
 8006de4:	3001      	adds	r0, #1
 8006de6:	d08a      	beq.n	8006cfe <_printf_i+0x13a>
 8006de8:	3501      	adds	r5, #1
 8006dea:	e7eb      	b.n	8006dc4 <_printf_i+0x200>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1a7      	bne.n	8006d40 <_printf_i+0x17c>
 8006df0:	780b      	ldrb	r3, [r1, #0]
 8006df2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006df6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dfa:	e765      	b.n	8006cc8 <_printf_i+0x104>
 8006dfc:	0801e5e9 	.word	0x0801e5e9
 8006e00:	0801e5d8 	.word	0x0801e5d8

08006e04 <iprintf>:
 8006e04:	b40f      	push	{r0, r1, r2, r3}
 8006e06:	4b0a      	ldr	r3, [pc, #40]	; (8006e30 <iprintf+0x2c>)
 8006e08:	b513      	push	{r0, r1, r4, lr}
 8006e0a:	681c      	ldr	r4, [r3, #0]
 8006e0c:	b124      	cbz	r4, 8006e18 <iprintf+0x14>
 8006e0e:	69a3      	ldr	r3, [r4, #24]
 8006e10:	b913      	cbnz	r3, 8006e18 <iprintf+0x14>
 8006e12:	4620      	mov	r0, r4
 8006e14:	f001 f8d4 	bl	8007fc0 <__sinit>
 8006e18:	ab05      	add	r3, sp, #20
 8006e1a:	9a04      	ldr	r2, [sp, #16]
 8006e1c:	68a1      	ldr	r1, [r4, #8]
 8006e1e:	9301      	str	r3, [sp, #4]
 8006e20:	4620      	mov	r0, r4
 8006e22:	f001 fee1 	bl	8008be8 <_vfiprintf_r>
 8006e26:	b002      	add	sp, #8
 8006e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e2c:	b004      	add	sp, #16
 8006e2e:	4770      	bx	lr
 8006e30:	20000010 	.word	0x20000010

08006e34 <_puts_r>:
 8006e34:	b570      	push	{r4, r5, r6, lr}
 8006e36:	460e      	mov	r6, r1
 8006e38:	4605      	mov	r5, r0
 8006e3a:	b118      	cbz	r0, 8006e44 <_puts_r+0x10>
 8006e3c:	6983      	ldr	r3, [r0, #24]
 8006e3e:	b90b      	cbnz	r3, 8006e44 <_puts_r+0x10>
 8006e40:	f001 f8be 	bl	8007fc0 <__sinit>
 8006e44:	69ab      	ldr	r3, [r5, #24]
 8006e46:	68ac      	ldr	r4, [r5, #8]
 8006e48:	b913      	cbnz	r3, 8006e50 <_puts_r+0x1c>
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f001 f8b8 	bl	8007fc0 <__sinit>
 8006e50:	4b23      	ldr	r3, [pc, #140]	; (8006ee0 <_puts_r+0xac>)
 8006e52:	429c      	cmp	r4, r3
 8006e54:	d117      	bne.n	8006e86 <_puts_r+0x52>
 8006e56:	686c      	ldr	r4, [r5, #4]
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	071b      	lsls	r3, r3, #28
 8006e5c:	d51d      	bpl.n	8006e9a <_puts_r+0x66>
 8006e5e:	6923      	ldr	r3, [r4, #16]
 8006e60:	b1db      	cbz	r3, 8006e9a <_puts_r+0x66>
 8006e62:	3e01      	subs	r6, #1
 8006e64:	68a3      	ldr	r3, [r4, #8]
 8006e66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	60a3      	str	r3, [r4, #8]
 8006e6e:	b9e9      	cbnz	r1, 8006eac <_puts_r+0x78>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	da2e      	bge.n	8006ed2 <_puts_r+0x9e>
 8006e74:	4622      	mov	r2, r4
 8006e76:	210a      	movs	r1, #10
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f000 f895 	bl	8006fa8 <__swbuf_r>
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d011      	beq.n	8006ea6 <_puts_r+0x72>
 8006e82:	200a      	movs	r0, #10
 8006e84:	bd70      	pop	{r4, r5, r6, pc}
 8006e86:	4b17      	ldr	r3, [pc, #92]	; (8006ee4 <_puts_r+0xb0>)
 8006e88:	429c      	cmp	r4, r3
 8006e8a:	d101      	bne.n	8006e90 <_puts_r+0x5c>
 8006e8c:	68ac      	ldr	r4, [r5, #8]
 8006e8e:	e7e3      	b.n	8006e58 <_puts_r+0x24>
 8006e90:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <_puts_r+0xb4>)
 8006e92:	429c      	cmp	r4, r3
 8006e94:	bf08      	it	eq
 8006e96:	68ec      	ldreq	r4, [r5, #12]
 8006e98:	e7de      	b.n	8006e58 <_puts_r+0x24>
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	f000 f8d5 	bl	800704c <__swsetup_r>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d0dd      	beq.n	8006e62 <_puts_r+0x2e>
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	da04      	bge.n	8006eba <_puts_r+0x86>
 8006eb0:	69a2      	ldr	r2, [r4, #24]
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	db06      	blt.n	8006ec4 <_puts_r+0x90>
 8006eb6:	290a      	cmp	r1, #10
 8006eb8:	d004      	beq.n	8006ec4 <_puts_r+0x90>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	6022      	str	r2, [r4, #0]
 8006ec0:	7019      	strb	r1, [r3, #0]
 8006ec2:	e7cf      	b.n	8006e64 <_puts_r+0x30>
 8006ec4:	4622      	mov	r2, r4
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f000 f86e 	bl	8006fa8 <__swbuf_r>
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d1c9      	bne.n	8006e64 <_puts_r+0x30>
 8006ed0:	e7e9      	b.n	8006ea6 <_puts_r+0x72>
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	200a      	movs	r0, #10
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	6022      	str	r2, [r4, #0]
 8006eda:	7018      	strb	r0, [r3, #0]
 8006edc:	bd70      	pop	{r4, r5, r6, pc}
 8006ede:	bf00      	nop
 8006ee0:	0801e628 	.word	0x0801e628
 8006ee4:	0801e648 	.word	0x0801e648
 8006ee8:	0801e608 	.word	0x0801e608

08006eec <puts>:
 8006eec:	4b02      	ldr	r3, [pc, #8]	; (8006ef8 <puts+0xc>)
 8006eee:	4601      	mov	r1, r0
 8006ef0:	6818      	ldr	r0, [r3, #0]
 8006ef2:	f7ff bf9f 	b.w	8006e34 <_puts_r>
 8006ef6:	bf00      	nop
 8006ef8:	20000010 	.word	0x20000010

08006efc <frexpf>:
 8006efc:	ee10 1a10 	vmov	r1, s0
 8006f00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f04:	b510      	push	{r4, lr}
 8006f06:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006f0a:	f04f 0400 	mov.w	r4, #0
 8006f0e:	ee10 2a10 	vmov	r2, s0
 8006f12:	6004      	str	r4, [r0, #0]
 8006f14:	da17      	bge.n	8006f46 <frexpf+0x4a>
 8006f16:	b1b3      	cbz	r3, 8006f46 <frexpf+0x4a>
 8006f18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f1c:	da0a      	bge.n	8006f34 <frexpf+0x38>
 8006f1e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8006f4c <frexpf+0x50>
 8006f22:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006f26:	f06f 0118 	mvn.w	r1, #24
 8006f2a:	ee17 2a90 	vmov	r2, s15
 8006f2e:	6001      	str	r1, [r0, #0]
 8006f30:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006f34:	6801      	ldr	r1, [r0, #0]
 8006f36:	15db      	asrs	r3, r3, #23
 8006f38:	3b7e      	subs	r3, #126	; 0x7e
 8006f3a:	440b      	add	r3, r1
 8006f3c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006f40:	6003      	str	r3, [r0, #0]
 8006f42:	f042 517c 	orr.w	r1, r2, #1056964608	; 0x3f000000
 8006f46:	ee00 1a10 	vmov	s0, r1
 8006f4a:	bd10      	pop	{r4, pc}
 8006f4c:	4c000000 	.word	0x4c000000

08006f50 <siprintf>:
 8006f50:	b40e      	push	{r1, r2, r3}
 8006f52:	b500      	push	{lr}
 8006f54:	b09c      	sub	sp, #112	; 0x70
 8006f56:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8006f5c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006f60:	9002      	str	r0, [sp, #8]
 8006f62:	9006      	str	r0, [sp, #24]
 8006f64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f68:	480a      	ldr	r0, [pc, #40]	; (8006f94 <siprintf+0x44>)
 8006f6a:	9104      	str	r1, [sp, #16]
 8006f6c:	9107      	str	r1, [sp, #28]
 8006f6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f76:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006f7a:	6800      	ldr	r0, [r0, #0]
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	a902      	add	r1, sp, #8
 8006f80:	f001 fd14 	bl	80089ac <_svfiprintf_r>
 8006f84:	9b02      	ldr	r3, [sp, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	b01c      	add	sp, #112	; 0x70
 8006f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f90:	b003      	add	sp, #12
 8006f92:	4770      	bx	lr
 8006f94:	20000010 	.word	0x20000010

08006f98 <strcpy>:
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f9e:	f803 2b01 	strb.w	r2, [r3], #1
 8006fa2:	2a00      	cmp	r2, #0
 8006fa4:	d1f9      	bne.n	8006f9a <strcpy+0x2>
 8006fa6:	4770      	bx	lr

08006fa8 <__swbuf_r>:
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006faa:	460e      	mov	r6, r1
 8006fac:	4614      	mov	r4, r2
 8006fae:	4605      	mov	r5, r0
 8006fb0:	b118      	cbz	r0, 8006fba <__swbuf_r+0x12>
 8006fb2:	6983      	ldr	r3, [r0, #24]
 8006fb4:	b90b      	cbnz	r3, 8006fba <__swbuf_r+0x12>
 8006fb6:	f001 f803 	bl	8007fc0 <__sinit>
 8006fba:	4b21      	ldr	r3, [pc, #132]	; (8007040 <__swbuf_r+0x98>)
 8006fbc:	429c      	cmp	r4, r3
 8006fbe:	d12a      	bne.n	8007016 <__swbuf_r+0x6e>
 8006fc0:	686c      	ldr	r4, [r5, #4]
 8006fc2:	69a3      	ldr	r3, [r4, #24]
 8006fc4:	60a3      	str	r3, [r4, #8]
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	071a      	lsls	r2, r3, #28
 8006fca:	d52e      	bpl.n	800702a <__swbuf_r+0x82>
 8006fcc:	6923      	ldr	r3, [r4, #16]
 8006fce:	b363      	cbz	r3, 800702a <__swbuf_r+0x82>
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	6820      	ldr	r0, [r4, #0]
 8006fd4:	1ac0      	subs	r0, r0, r3
 8006fd6:	6963      	ldr	r3, [r4, #20]
 8006fd8:	b2f6      	uxtb	r6, r6
 8006fda:	4298      	cmp	r0, r3
 8006fdc:	4637      	mov	r7, r6
 8006fde:	db04      	blt.n	8006fea <__swbuf_r+0x42>
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	f000 ff82 	bl	8007eec <_fflush_r>
 8006fe8:	bb28      	cbnz	r0, 8007036 <__swbuf_r+0x8e>
 8006fea:	68a3      	ldr	r3, [r4, #8]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	60a3      	str	r3, [r4, #8]
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	6022      	str	r2, [r4, #0]
 8006ff6:	701e      	strb	r6, [r3, #0]
 8006ff8:	6963      	ldr	r3, [r4, #20]
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	4298      	cmp	r0, r3
 8006ffe:	d004      	beq.n	800700a <__swbuf_r+0x62>
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	07db      	lsls	r3, r3, #31
 8007004:	d519      	bpl.n	800703a <__swbuf_r+0x92>
 8007006:	2e0a      	cmp	r6, #10
 8007008:	d117      	bne.n	800703a <__swbuf_r+0x92>
 800700a:	4621      	mov	r1, r4
 800700c:	4628      	mov	r0, r5
 800700e:	f000 ff6d 	bl	8007eec <_fflush_r>
 8007012:	b190      	cbz	r0, 800703a <__swbuf_r+0x92>
 8007014:	e00f      	b.n	8007036 <__swbuf_r+0x8e>
 8007016:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <__swbuf_r+0x9c>)
 8007018:	429c      	cmp	r4, r3
 800701a:	d101      	bne.n	8007020 <__swbuf_r+0x78>
 800701c:	68ac      	ldr	r4, [r5, #8]
 800701e:	e7d0      	b.n	8006fc2 <__swbuf_r+0x1a>
 8007020:	4b09      	ldr	r3, [pc, #36]	; (8007048 <__swbuf_r+0xa0>)
 8007022:	429c      	cmp	r4, r3
 8007024:	bf08      	it	eq
 8007026:	68ec      	ldreq	r4, [r5, #12]
 8007028:	e7cb      	b.n	8006fc2 <__swbuf_r+0x1a>
 800702a:	4621      	mov	r1, r4
 800702c:	4628      	mov	r0, r5
 800702e:	f000 f80d 	bl	800704c <__swsetup_r>
 8007032:	2800      	cmp	r0, #0
 8007034:	d0cc      	beq.n	8006fd0 <__swbuf_r+0x28>
 8007036:	f04f 37ff 	mov.w	r7, #4294967295
 800703a:	4638      	mov	r0, r7
 800703c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800703e:	bf00      	nop
 8007040:	0801e628 	.word	0x0801e628
 8007044:	0801e648 	.word	0x0801e648
 8007048:	0801e608 	.word	0x0801e608

0800704c <__swsetup_r>:
 800704c:	4b32      	ldr	r3, [pc, #200]	; (8007118 <__swsetup_r+0xcc>)
 800704e:	b570      	push	{r4, r5, r6, lr}
 8007050:	681d      	ldr	r5, [r3, #0]
 8007052:	4606      	mov	r6, r0
 8007054:	460c      	mov	r4, r1
 8007056:	b125      	cbz	r5, 8007062 <__swsetup_r+0x16>
 8007058:	69ab      	ldr	r3, [r5, #24]
 800705a:	b913      	cbnz	r3, 8007062 <__swsetup_r+0x16>
 800705c:	4628      	mov	r0, r5
 800705e:	f000 ffaf 	bl	8007fc0 <__sinit>
 8007062:	4b2e      	ldr	r3, [pc, #184]	; (800711c <__swsetup_r+0xd0>)
 8007064:	429c      	cmp	r4, r3
 8007066:	d10f      	bne.n	8007088 <__swsetup_r+0x3c>
 8007068:	686c      	ldr	r4, [r5, #4]
 800706a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800706e:	b29a      	uxth	r2, r3
 8007070:	0715      	lsls	r5, r2, #28
 8007072:	d42c      	bmi.n	80070ce <__swsetup_r+0x82>
 8007074:	06d0      	lsls	r0, r2, #27
 8007076:	d411      	bmi.n	800709c <__swsetup_r+0x50>
 8007078:	2209      	movs	r2, #9
 800707a:	6032      	str	r2, [r6, #0]
 800707c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007080:	81a3      	strh	r3, [r4, #12]
 8007082:	f04f 30ff 	mov.w	r0, #4294967295
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	4b25      	ldr	r3, [pc, #148]	; (8007120 <__swsetup_r+0xd4>)
 800708a:	429c      	cmp	r4, r3
 800708c:	d101      	bne.n	8007092 <__swsetup_r+0x46>
 800708e:	68ac      	ldr	r4, [r5, #8]
 8007090:	e7eb      	b.n	800706a <__swsetup_r+0x1e>
 8007092:	4b24      	ldr	r3, [pc, #144]	; (8007124 <__swsetup_r+0xd8>)
 8007094:	429c      	cmp	r4, r3
 8007096:	bf08      	it	eq
 8007098:	68ec      	ldreq	r4, [r5, #12]
 800709a:	e7e6      	b.n	800706a <__swsetup_r+0x1e>
 800709c:	0751      	lsls	r1, r2, #29
 800709e:	d512      	bpl.n	80070c6 <__swsetup_r+0x7a>
 80070a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070a2:	b141      	cbz	r1, 80070b6 <__swsetup_r+0x6a>
 80070a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070a8:	4299      	cmp	r1, r3
 80070aa:	d002      	beq.n	80070b2 <__swsetup_r+0x66>
 80070ac:	4630      	mov	r0, r6
 80070ae:	f001 fb75 	bl	800879c <_free_r>
 80070b2:	2300      	movs	r3, #0
 80070b4:	6363      	str	r3, [r4, #52]	; 0x34
 80070b6:	89a3      	ldrh	r3, [r4, #12]
 80070b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070bc:	81a3      	strh	r3, [r4, #12]
 80070be:	2300      	movs	r3, #0
 80070c0:	6063      	str	r3, [r4, #4]
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	f043 0308 	orr.w	r3, r3, #8
 80070cc:	81a3      	strh	r3, [r4, #12]
 80070ce:	6923      	ldr	r3, [r4, #16]
 80070d0:	b94b      	cbnz	r3, 80070e6 <__swsetup_r+0x9a>
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070dc:	d003      	beq.n	80070e6 <__swsetup_r+0x9a>
 80070de:	4621      	mov	r1, r4
 80070e0:	4630      	mov	r0, r6
 80070e2:	f001 f829 	bl	8008138 <__smakebuf_r>
 80070e6:	89a2      	ldrh	r2, [r4, #12]
 80070e8:	f012 0301 	ands.w	r3, r2, #1
 80070ec:	d00c      	beq.n	8007108 <__swsetup_r+0xbc>
 80070ee:	2300      	movs	r3, #0
 80070f0:	60a3      	str	r3, [r4, #8]
 80070f2:	6963      	ldr	r3, [r4, #20]
 80070f4:	425b      	negs	r3, r3
 80070f6:	61a3      	str	r3, [r4, #24]
 80070f8:	6923      	ldr	r3, [r4, #16]
 80070fa:	b953      	cbnz	r3, 8007112 <__swsetup_r+0xc6>
 80070fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007100:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007104:	d1ba      	bne.n	800707c <__swsetup_r+0x30>
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	0792      	lsls	r2, r2, #30
 800710a:	bf58      	it	pl
 800710c:	6963      	ldrpl	r3, [r4, #20]
 800710e:	60a3      	str	r3, [r4, #8]
 8007110:	e7f2      	b.n	80070f8 <__swsetup_r+0xac>
 8007112:	2000      	movs	r0, #0
 8007114:	e7f7      	b.n	8007106 <__swsetup_r+0xba>
 8007116:	bf00      	nop
 8007118:	20000010 	.word	0x20000010
 800711c:	0801e628 	.word	0x0801e628
 8007120:	0801e648 	.word	0x0801e648
 8007124:	0801e608 	.word	0x0801e608

08007128 <quorem>:
 8007128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	6903      	ldr	r3, [r0, #16]
 800712e:	690c      	ldr	r4, [r1, #16]
 8007130:	429c      	cmp	r4, r3
 8007132:	4680      	mov	r8, r0
 8007134:	f300 8082 	bgt.w	800723c <quorem+0x114>
 8007138:	3c01      	subs	r4, #1
 800713a:	f101 0714 	add.w	r7, r1, #20
 800713e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007142:	f100 0614 	add.w	r6, r0, #20
 8007146:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800714a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800714e:	eb06 030e 	add.w	r3, r6, lr
 8007152:	3501      	adds	r5, #1
 8007154:	eb07 090e 	add.w	r9, r7, lr
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	fbb0 f5f5 	udiv	r5, r0, r5
 800715e:	b395      	cbz	r5, 80071c6 <quorem+0x9e>
 8007160:	f04f 0a00 	mov.w	sl, #0
 8007164:	4638      	mov	r0, r7
 8007166:	46b4      	mov	ip, r6
 8007168:	46d3      	mov	fp, sl
 800716a:	f850 2b04 	ldr.w	r2, [r0], #4
 800716e:	b293      	uxth	r3, r2
 8007170:	fb05 a303 	mla	r3, r5, r3, sl
 8007174:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007178:	b29b      	uxth	r3, r3
 800717a:	ebab 0303 	sub.w	r3, fp, r3
 800717e:	0c12      	lsrs	r2, r2, #16
 8007180:	f8bc b000 	ldrh.w	fp, [ip]
 8007184:	fb05 a202 	mla	r2, r5, r2, sl
 8007188:	fa13 f38b 	uxtah	r3, r3, fp
 800718c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007190:	fa1f fb82 	uxth.w	fp, r2
 8007194:	f8dc 2000 	ldr.w	r2, [ip]
 8007198:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800719c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071a6:	4581      	cmp	r9, r0
 80071a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80071ac:	f84c 3b04 	str.w	r3, [ip], #4
 80071b0:	d2db      	bcs.n	800716a <quorem+0x42>
 80071b2:	f856 300e 	ldr.w	r3, [r6, lr]
 80071b6:	b933      	cbnz	r3, 80071c6 <quorem+0x9e>
 80071b8:	9b01      	ldr	r3, [sp, #4]
 80071ba:	3b04      	subs	r3, #4
 80071bc:	429e      	cmp	r6, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	d330      	bcc.n	8007224 <quorem+0xfc>
 80071c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80071c6:	4640      	mov	r0, r8
 80071c8:	f001 fa13 	bl	80085f2 <__mcmp>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	db25      	blt.n	800721c <quorem+0xf4>
 80071d0:	3501      	adds	r5, #1
 80071d2:	4630      	mov	r0, r6
 80071d4:	f04f 0e00 	mov.w	lr, #0
 80071d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80071dc:	f8d0 c000 	ldr.w	ip, [r0]
 80071e0:	b293      	uxth	r3, r2
 80071e2:	ebae 0303 	sub.w	r3, lr, r3
 80071e6:	0c12      	lsrs	r2, r2, #16
 80071e8:	fa13 f38c 	uxtah	r3, r3, ip
 80071ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80071f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071fa:	45b9      	cmp	r9, r7
 80071fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007200:	f840 3b04 	str.w	r3, [r0], #4
 8007204:	d2e8      	bcs.n	80071d8 <quorem+0xb0>
 8007206:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800720a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800720e:	b92a      	cbnz	r2, 800721c <quorem+0xf4>
 8007210:	3b04      	subs	r3, #4
 8007212:	429e      	cmp	r6, r3
 8007214:	461a      	mov	r2, r3
 8007216:	d30b      	bcc.n	8007230 <quorem+0x108>
 8007218:	f8c8 4010 	str.w	r4, [r8, #16]
 800721c:	4628      	mov	r0, r5
 800721e:	b003      	add	sp, #12
 8007220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	3b04      	subs	r3, #4
 8007228:	2a00      	cmp	r2, #0
 800722a:	d1ca      	bne.n	80071c2 <quorem+0x9a>
 800722c:	3c01      	subs	r4, #1
 800722e:	e7c5      	b.n	80071bc <quorem+0x94>
 8007230:	6812      	ldr	r2, [r2, #0]
 8007232:	3b04      	subs	r3, #4
 8007234:	2a00      	cmp	r2, #0
 8007236:	d1ef      	bne.n	8007218 <quorem+0xf0>
 8007238:	3c01      	subs	r4, #1
 800723a:	e7ea      	b.n	8007212 <quorem+0xea>
 800723c:	2000      	movs	r0, #0
 800723e:	e7ee      	b.n	800721e <quorem+0xf6>

08007240 <_dtoa_r>:
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	ec57 6b10 	vmov	r6, r7, d0
 8007248:	b097      	sub	sp, #92	; 0x5c
 800724a:	e9cd 6700 	strd	r6, r7, [sp]
 800724e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007250:	9107      	str	r1, [sp, #28]
 8007252:	4604      	mov	r4, r0
 8007254:	920a      	str	r2, [sp, #40]	; 0x28
 8007256:	930f      	str	r3, [sp, #60]	; 0x3c
 8007258:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800725a:	b93e      	cbnz	r6, 800726c <_dtoa_r+0x2c>
 800725c:	2010      	movs	r0, #16
 800725e:	f000 ffab 	bl	80081b8 <malloc>
 8007262:	6260      	str	r0, [r4, #36]	; 0x24
 8007264:	6046      	str	r6, [r0, #4]
 8007266:	6086      	str	r6, [r0, #8]
 8007268:	6006      	str	r6, [r0, #0]
 800726a:	60c6      	str	r6, [r0, #12]
 800726c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800726e:	6819      	ldr	r1, [r3, #0]
 8007270:	b151      	cbz	r1, 8007288 <_dtoa_r+0x48>
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	604a      	str	r2, [r1, #4]
 8007276:	2301      	movs	r3, #1
 8007278:	4093      	lsls	r3, r2
 800727a:	608b      	str	r3, [r1, #8]
 800727c:	4620      	mov	r0, r4
 800727e:	f000 ffe2 	bl	8008246 <_Bfree>
 8007282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007284:	2200      	movs	r2, #0
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	9b01      	ldr	r3, [sp, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	bfbf      	itttt	lt
 800728e:	2301      	movlt	r3, #1
 8007290:	602b      	strlt	r3, [r5, #0]
 8007292:	9b01      	ldrlt	r3, [sp, #4]
 8007294:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007298:	bfb2      	itee	lt
 800729a:	9301      	strlt	r3, [sp, #4]
 800729c:	2300      	movge	r3, #0
 800729e:	602b      	strge	r3, [r5, #0]
 80072a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80072a4:	4ba8      	ldr	r3, [pc, #672]	; (8007548 <_dtoa_r+0x308>)
 80072a6:	ea33 0308 	bics.w	r3, r3, r8
 80072aa:	d11b      	bne.n	80072e4 <_dtoa_r+0xa4>
 80072ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	9b00      	ldr	r3, [sp, #0]
 80072b6:	b923      	cbnz	r3, 80072c2 <_dtoa_r+0x82>
 80072b8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80072bc:	2800      	cmp	r0, #0
 80072be:	f000 8578 	beq.w	8007db2 <_dtoa_r+0xb72>
 80072c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072c4:	b953      	cbnz	r3, 80072dc <_dtoa_r+0x9c>
 80072c6:	4ba1      	ldr	r3, [pc, #644]	; (800754c <_dtoa_r+0x30c>)
 80072c8:	e021      	b.n	800730e <_dtoa_r+0xce>
 80072ca:	4ba1      	ldr	r3, [pc, #644]	; (8007550 <_dtoa_r+0x310>)
 80072cc:	9302      	str	r3, [sp, #8]
 80072ce:	3308      	adds	r3, #8
 80072d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	9802      	ldr	r0, [sp, #8]
 80072d6:	b017      	add	sp, #92	; 0x5c
 80072d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072dc:	4b9b      	ldr	r3, [pc, #620]	; (800754c <_dtoa_r+0x30c>)
 80072de:	9302      	str	r3, [sp, #8]
 80072e0:	3303      	adds	r3, #3
 80072e2:	e7f5      	b.n	80072d0 <_dtoa_r+0x90>
 80072e4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80072e8:	2200      	movs	r2, #0
 80072ea:	2300      	movs	r3, #0
 80072ec:	4630      	mov	r0, r6
 80072ee:	4639      	mov	r1, r7
 80072f0:	f7f9 fc46 	bl	8000b80 <__aeabi_dcmpeq>
 80072f4:	4681      	mov	r9, r0
 80072f6:	b160      	cbz	r0, 8007312 <_dtoa_r+0xd2>
 80072f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072fa:	2301      	movs	r3, #1
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 8553 	beq.w	8007dac <_dtoa_r+0xb6c>
 8007306:	4b93      	ldr	r3, [pc, #588]	; (8007554 <_dtoa_r+0x314>)
 8007308:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	3b01      	subs	r3, #1
 800730e:	9302      	str	r3, [sp, #8]
 8007310:	e7e0      	b.n	80072d4 <_dtoa_r+0x94>
 8007312:	aa14      	add	r2, sp, #80	; 0x50
 8007314:	a915      	add	r1, sp, #84	; 0x54
 8007316:	ec47 6b10 	vmov	d0, r6, r7
 800731a:	4620      	mov	r0, r4
 800731c:	f001 f9e1 	bl	80086e2 <__d2b>
 8007320:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007324:	4682      	mov	sl, r0
 8007326:	2d00      	cmp	r5, #0
 8007328:	d07e      	beq.n	8007428 <_dtoa_r+0x1e8>
 800732a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800732e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007332:	4630      	mov	r0, r6
 8007334:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007338:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800733c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8007340:	2200      	movs	r2, #0
 8007342:	4b85      	ldr	r3, [pc, #532]	; (8007558 <_dtoa_r+0x318>)
 8007344:	f7f9 f800 	bl	8000348 <__aeabi_dsub>
 8007348:	a379      	add	r3, pc, #484	; (adr r3, 8007530 <_dtoa_r+0x2f0>)
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	f7f9 f9af 	bl	80006b0 <__aeabi_dmul>
 8007352:	a379      	add	r3, pc, #484	; (adr r3, 8007538 <_dtoa_r+0x2f8>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f7f8 fff8 	bl	800034c <__adddf3>
 800735c:	4606      	mov	r6, r0
 800735e:	4628      	mov	r0, r5
 8007360:	460f      	mov	r7, r1
 8007362:	f7f9 f93f 	bl	80005e4 <__aeabi_i2d>
 8007366:	a376      	add	r3, pc, #472	; (adr r3, 8007540 <_dtoa_r+0x300>)
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	f7f9 f9a0 	bl	80006b0 <__aeabi_dmul>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4630      	mov	r0, r6
 8007376:	4639      	mov	r1, r7
 8007378:	f7f8 ffe8 	bl	800034c <__adddf3>
 800737c:	4606      	mov	r6, r0
 800737e:	460f      	mov	r7, r1
 8007380:	f7f9 fc46 	bl	8000c10 <__aeabi_d2iz>
 8007384:	2200      	movs	r2, #0
 8007386:	4683      	mov	fp, r0
 8007388:	2300      	movs	r3, #0
 800738a:	4630      	mov	r0, r6
 800738c:	4639      	mov	r1, r7
 800738e:	f7f9 fc01 	bl	8000b94 <__aeabi_dcmplt>
 8007392:	b158      	cbz	r0, 80073ac <_dtoa_r+0x16c>
 8007394:	4658      	mov	r0, fp
 8007396:	f7f9 f925 	bl	80005e4 <__aeabi_i2d>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4630      	mov	r0, r6
 80073a0:	4639      	mov	r1, r7
 80073a2:	f7f9 fbed 	bl	8000b80 <__aeabi_dcmpeq>
 80073a6:	b908      	cbnz	r0, 80073ac <_dtoa_r+0x16c>
 80073a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073ac:	f1bb 0f16 	cmp.w	fp, #22
 80073b0:	d859      	bhi.n	8007466 <_dtoa_r+0x226>
 80073b2:	496a      	ldr	r1, [pc, #424]	; (800755c <_dtoa_r+0x31c>)
 80073b4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80073b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073c0:	f7f9 fc06 	bl	8000bd0 <__aeabi_dcmpgt>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d050      	beq.n	800746a <_dtoa_r+0x22a>
 80073c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073cc:	2300      	movs	r3, #0
 80073ce:	930e      	str	r3, [sp, #56]	; 0x38
 80073d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073d2:	1b5d      	subs	r5, r3, r5
 80073d4:	1e6b      	subs	r3, r5, #1
 80073d6:	9306      	str	r3, [sp, #24]
 80073d8:	bf45      	ittet	mi
 80073da:	f1c5 0301 	rsbmi	r3, r5, #1
 80073de:	9305      	strmi	r3, [sp, #20]
 80073e0:	2300      	movpl	r3, #0
 80073e2:	2300      	movmi	r3, #0
 80073e4:	bf4c      	ite	mi
 80073e6:	9306      	strmi	r3, [sp, #24]
 80073e8:	9305      	strpl	r3, [sp, #20]
 80073ea:	f1bb 0f00 	cmp.w	fp, #0
 80073ee:	db3e      	blt.n	800746e <_dtoa_r+0x22e>
 80073f0:	9b06      	ldr	r3, [sp, #24]
 80073f2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80073f6:	445b      	add	r3, fp
 80073f8:	9306      	str	r3, [sp, #24]
 80073fa:	2300      	movs	r3, #0
 80073fc:	9308      	str	r3, [sp, #32]
 80073fe:	9b07      	ldr	r3, [sp, #28]
 8007400:	2b09      	cmp	r3, #9
 8007402:	f200 80af 	bhi.w	8007564 <_dtoa_r+0x324>
 8007406:	2b05      	cmp	r3, #5
 8007408:	bfc4      	itt	gt
 800740a:	3b04      	subgt	r3, #4
 800740c:	9307      	strgt	r3, [sp, #28]
 800740e:	9b07      	ldr	r3, [sp, #28]
 8007410:	f1a3 0302 	sub.w	r3, r3, #2
 8007414:	bfcc      	ite	gt
 8007416:	2600      	movgt	r6, #0
 8007418:	2601      	movle	r6, #1
 800741a:	2b03      	cmp	r3, #3
 800741c:	f200 80ae 	bhi.w	800757c <_dtoa_r+0x33c>
 8007420:	e8df f003 	tbb	[pc, r3]
 8007424:	772f8482 	.word	0x772f8482
 8007428:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800742a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800742c:	441d      	add	r5, r3
 800742e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007432:	2b20      	cmp	r3, #32
 8007434:	dd11      	ble.n	800745a <_dtoa_r+0x21a>
 8007436:	9a00      	ldr	r2, [sp, #0]
 8007438:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800743c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007440:	fa22 f000 	lsr.w	r0, r2, r0
 8007444:	fa08 f303 	lsl.w	r3, r8, r3
 8007448:	4318      	orrs	r0, r3
 800744a:	f7f9 f8bb 	bl	80005c4 <__aeabi_ui2d>
 800744e:	2301      	movs	r3, #1
 8007450:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007454:	3d01      	subs	r5, #1
 8007456:	9312      	str	r3, [sp, #72]	; 0x48
 8007458:	e772      	b.n	8007340 <_dtoa_r+0x100>
 800745a:	f1c3 0020 	rsb	r0, r3, #32
 800745e:	9b00      	ldr	r3, [sp, #0]
 8007460:	fa03 f000 	lsl.w	r0, r3, r0
 8007464:	e7f1      	b.n	800744a <_dtoa_r+0x20a>
 8007466:	2301      	movs	r3, #1
 8007468:	e7b1      	b.n	80073ce <_dtoa_r+0x18e>
 800746a:	900e      	str	r0, [sp, #56]	; 0x38
 800746c:	e7b0      	b.n	80073d0 <_dtoa_r+0x190>
 800746e:	9b05      	ldr	r3, [sp, #20]
 8007470:	eba3 030b 	sub.w	r3, r3, fp
 8007474:	9305      	str	r3, [sp, #20]
 8007476:	f1cb 0300 	rsb	r3, fp, #0
 800747a:	9308      	str	r3, [sp, #32]
 800747c:	2300      	movs	r3, #0
 800747e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007480:	e7bd      	b.n	80073fe <_dtoa_r+0x1be>
 8007482:	2301      	movs	r3, #1
 8007484:	9309      	str	r3, [sp, #36]	; 0x24
 8007486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007488:	2b00      	cmp	r3, #0
 800748a:	dd7a      	ble.n	8007582 <_dtoa_r+0x342>
 800748c:	9304      	str	r3, [sp, #16]
 800748e:	9303      	str	r3, [sp, #12]
 8007490:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007492:	2200      	movs	r2, #0
 8007494:	606a      	str	r2, [r5, #4]
 8007496:	2104      	movs	r1, #4
 8007498:	f101 0214 	add.w	r2, r1, #20
 800749c:	429a      	cmp	r2, r3
 800749e:	d975      	bls.n	800758c <_dtoa_r+0x34c>
 80074a0:	6869      	ldr	r1, [r5, #4]
 80074a2:	4620      	mov	r0, r4
 80074a4:	f000 fe9b 	bl	80081de <_Balloc>
 80074a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074aa:	6028      	str	r0, [r5, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	9302      	str	r3, [sp, #8]
 80074b0:	9b03      	ldr	r3, [sp, #12]
 80074b2:	2b0e      	cmp	r3, #14
 80074b4:	f200 80e5 	bhi.w	8007682 <_dtoa_r+0x442>
 80074b8:	2e00      	cmp	r6, #0
 80074ba:	f000 80e2 	beq.w	8007682 <_dtoa_r+0x442>
 80074be:	ed9d 7b00 	vldr	d7, [sp]
 80074c2:	f1bb 0f00 	cmp.w	fp, #0
 80074c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80074ca:	dd74      	ble.n	80075b6 <_dtoa_r+0x376>
 80074cc:	4a23      	ldr	r2, [pc, #140]	; (800755c <_dtoa_r+0x31c>)
 80074ce:	f00b 030f 	and.w	r3, fp, #15
 80074d2:	ea4f 162b 	mov.w	r6, fp, asr #4
 80074d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074da:	06f0      	lsls	r0, r6, #27
 80074dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074e0:	d559      	bpl.n	8007596 <_dtoa_r+0x356>
 80074e2:	4b1f      	ldr	r3, [pc, #124]	; (8007560 <_dtoa_r+0x320>)
 80074e4:	ec51 0b17 	vmov	r0, r1, d7
 80074e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074ec:	f7f9 fa0a 	bl	8000904 <__aeabi_ddiv>
 80074f0:	e9cd 0100 	strd	r0, r1, [sp]
 80074f4:	f006 060f 	and.w	r6, r6, #15
 80074f8:	2503      	movs	r5, #3
 80074fa:	4f19      	ldr	r7, [pc, #100]	; (8007560 <_dtoa_r+0x320>)
 80074fc:	2e00      	cmp	r6, #0
 80074fe:	d14c      	bne.n	800759a <_dtoa_r+0x35a>
 8007500:	4642      	mov	r2, r8
 8007502:	464b      	mov	r3, r9
 8007504:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007508:	f7f9 f9fc 	bl	8000904 <__aeabi_ddiv>
 800750c:	e9cd 0100 	strd	r0, r1, [sp]
 8007510:	e06a      	b.n	80075e8 <_dtoa_r+0x3a8>
 8007512:	2301      	movs	r3, #1
 8007514:	9309      	str	r3, [sp, #36]	; 0x24
 8007516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007518:	445b      	add	r3, fp
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	3301      	adds	r3, #1
 800751e:	2b01      	cmp	r3, #1
 8007520:	9303      	str	r3, [sp, #12]
 8007522:	bfb8      	it	lt
 8007524:	2301      	movlt	r3, #1
 8007526:	e7b3      	b.n	8007490 <_dtoa_r+0x250>
 8007528:	2300      	movs	r3, #0
 800752a:	e7ab      	b.n	8007484 <_dtoa_r+0x244>
 800752c:	2300      	movs	r3, #0
 800752e:	e7f1      	b.n	8007514 <_dtoa_r+0x2d4>
 8007530:	636f4361 	.word	0x636f4361
 8007534:	3fd287a7 	.word	0x3fd287a7
 8007538:	8b60c8b3 	.word	0x8b60c8b3
 800753c:	3fc68a28 	.word	0x3fc68a28
 8007540:	509f79fb 	.word	0x509f79fb
 8007544:	3fd34413 	.word	0x3fd34413
 8007548:	7ff00000 	.word	0x7ff00000
 800754c:	0801e603 	.word	0x0801e603
 8007550:	0801e5fa 	.word	0x0801e5fa
 8007554:	0801e88d 	.word	0x0801e88d
 8007558:	3ff80000 	.word	0x3ff80000
 800755c:	0801e698 	.word	0x0801e698
 8007560:	0801e670 	.word	0x0801e670
 8007564:	2601      	movs	r6, #1
 8007566:	2300      	movs	r3, #0
 8007568:	9307      	str	r3, [sp, #28]
 800756a:	9609      	str	r6, [sp, #36]	; 0x24
 800756c:	f04f 33ff 	mov.w	r3, #4294967295
 8007570:	9304      	str	r3, [sp, #16]
 8007572:	9303      	str	r3, [sp, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	2312      	movs	r3, #18
 8007578:	920a      	str	r2, [sp, #40]	; 0x28
 800757a:	e789      	b.n	8007490 <_dtoa_r+0x250>
 800757c:	2301      	movs	r3, #1
 800757e:	9309      	str	r3, [sp, #36]	; 0x24
 8007580:	e7f4      	b.n	800756c <_dtoa_r+0x32c>
 8007582:	2301      	movs	r3, #1
 8007584:	9304      	str	r3, [sp, #16]
 8007586:	9303      	str	r3, [sp, #12]
 8007588:	461a      	mov	r2, r3
 800758a:	e7f5      	b.n	8007578 <_dtoa_r+0x338>
 800758c:	686a      	ldr	r2, [r5, #4]
 800758e:	3201      	adds	r2, #1
 8007590:	606a      	str	r2, [r5, #4]
 8007592:	0049      	lsls	r1, r1, #1
 8007594:	e780      	b.n	8007498 <_dtoa_r+0x258>
 8007596:	2502      	movs	r5, #2
 8007598:	e7af      	b.n	80074fa <_dtoa_r+0x2ba>
 800759a:	07f1      	lsls	r1, r6, #31
 800759c:	d508      	bpl.n	80075b0 <_dtoa_r+0x370>
 800759e:	4640      	mov	r0, r8
 80075a0:	4649      	mov	r1, r9
 80075a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a6:	f7f9 f883 	bl	80006b0 <__aeabi_dmul>
 80075aa:	3501      	adds	r5, #1
 80075ac:	4680      	mov	r8, r0
 80075ae:	4689      	mov	r9, r1
 80075b0:	1076      	asrs	r6, r6, #1
 80075b2:	3708      	adds	r7, #8
 80075b4:	e7a2      	b.n	80074fc <_dtoa_r+0x2bc>
 80075b6:	f000 809d 	beq.w	80076f4 <_dtoa_r+0x4b4>
 80075ba:	f1cb 0600 	rsb	r6, fp, #0
 80075be:	4b9f      	ldr	r3, [pc, #636]	; (800783c <_dtoa_r+0x5fc>)
 80075c0:	4f9f      	ldr	r7, [pc, #636]	; (8007840 <_dtoa_r+0x600>)
 80075c2:	f006 020f 	and.w	r2, r6, #15
 80075c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075d2:	f7f9 f86d 	bl	80006b0 <__aeabi_dmul>
 80075d6:	e9cd 0100 	strd	r0, r1, [sp]
 80075da:	1136      	asrs	r6, r6, #4
 80075dc:	2300      	movs	r3, #0
 80075de:	2502      	movs	r5, #2
 80075e0:	2e00      	cmp	r6, #0
 80075e2:	d17c      	bne.n	80076de <_dtoa_r+0x49e>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d191      	bne.n	800750c <_dtoa_r+0x2cc>
 80075e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 8084 	beq.w	80076f8 <_dtoa_r+0x4b8>
 80075f0:	e9dd 8900 	ldrd	r8, r9, [sp]
 80075f4:	2200      	movs	r2, #0
 80075f6:	4b93      	ldr	r3, [pc, #588]	; (8007844 <_dtoa_r+0x604>)
 80075f8:	4640      	mov	r0, r8
 80075fa:	4649      	mov	r1, r9
 80075fc:	f7f9 faca 	bl	8000b94 <__aeabi_dcmplt>
 8007600:	2800      	cmp	r0, #0
 8007602:	d079      	beq.n	80076f8 <_dtoa_r+0x4b8>
 8007604:	9b03      	ldr	r3, [sp, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d076      	beq.n	80076f8 <_dtoa_r+0x4b8>
 800760a:	9b04      	ldr	r3, [sp, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	dd34      	ble.n	800767a <_dtoa_r+0x43a>
 8007610:	2200      	movs	r2, #0
 8007612:	4b8d      	ldr	r3, [pc, #564]	; (8007848 <_dtoa_r+0x608>)
 8007614:	4640      	mov	r0, r8
 8007616:	4649      	mov	r1, r9
 8007618:	f7f9 f84a 	bl	80006b0 <__aeabi_dmul>
 800761c:	e9cd 0100 	strd	r0, r1, [sp]
 8007620:	9e04      	ldr	r6, [sp, #16]
 8007622:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007626:	3501      	adds	r5, #1
 8007628:	4628      	mov	r0, r5
 800762a:	f7f8 ffdb 	bl	80005e4 <__aeabi_i2d>
 800762e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007632:	f7f9 f83d 	bl	80006b0 <__aeabi_dmul>
 8007636:	2200      	movs	r2, #0
 8007638:	4b84      	ldr	r3, [pc, #528]	; (800784c <_dtoa_r+0x60c>)
 800763a:	f7f8 fe87 	bl	800034c <__adddf3>
 800763e:	4680      	mov	r8, r0
 8007640:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8007644:	2e00      	cmp	r6, #0
 8007646:	d15a      	bne.n	80076fe <_dtoa_r+0x4be>
 8007648:	2200      	movs	r2, #0
 800764a:	4b81      	ldr	r3, [pc, #516]	; (8007850 <_dtoa_r+0x610>)
 800764c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007650:	f7f8 fe7a 	bl	8000348 <__aeabi_dsub>
 8007654:	4642      	mov	r2, r8
 8007656:	464b      	mov	r3, r9
 8007658:	e9cd 0100 	strd	r0, r1, [sp]
 800765c:	f7f9 fab8 	bl	8000bd0 <__aeabi_dcmpgt>
 8007660:	2800      	cmp	r0, #0
 8007662:	f040 829b 	bne.w	8007b9c <_dtoa_r+0x95c>
 8007666:	4642      	mov	r2, r8
 8007668:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800766c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007670:	f7f9 fa90 	bl	8000b94 <__aeabi_dcmplt>
 8007674:	2800      	cmp	r0, #0
 8007676:	f040 828f 	bne.w	8007b98 <_dtoa_r+0x958>
 800767a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800767e:	e9cd 2300 	strd	r2, r3, [sp]
 8007682:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007684:	2b00      	cmp	r3, #0
 8007686:	f2c0 8150 	blt.w	800792a <_dtoa_r+0x6ea>
 800768a:	f1bb 0f0e 	cmp.w	fp, #14
 800768e:	f300 814c 	bgt.w	800792a <_dtoa_r+0x6ea>
 8007692:	4b6a      	ldr	r3, [pc, #424]	; (800783c <_dtoa_r+0x5fc>)
 8007694:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007698:	e9d3 8900 	ldrd	r8, r9, [r3]
 800769c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f280 80da 	bge.w	8007858 <_dtoa_r+0x618>
 80076a4:	9b03      	ldr	r3, [sp, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f300 80d6 	bgt.w	8007858 <_dtoa_r+0x618>
 80076ac:	f040 8273 	bne.w	8007b96 <_dtoa_r+0x956>
 80076b0:	2200      	movs	r2, #0
 80076b2:	4b67      	ldr	r3, [pc, #412]	; (8007850 <_dtoa_r+0x610>)
 80076b4:	4640      	mov	r0, r8
 80076b6:	4649      	mov	r1, r9
 80076b8:	f7f8 fffa 	bl	80006b0 <__aeabi_dmul>
 80076bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076c0:	f7f9 fa7c 	bl	8000bbc <__aeabi_dcmpge>
 80076c4:	9e03      	ldr	r6, [sp, #12]
 80076c6:	4637      	mov	r7, r6
 80076c8:	2800      	cmp	r0, #0
 80076ca:	f040 824a 	bne.w	8007b62 <_dtoa_r+0x922>
 80076ce:	9b02      	ldr	r3, [sp, #8]
 80076d0:	9a02      	ldr	r2, [sp, #8]
 80076d2:	1c5d      	adds	r5, r3, #1
 80076d4:	2331      	movs	r3, #49	; 0x31
 80076d6:	7013      	strb	r3, [r2, #0]
 80076d8:	f10b 0b01 	add.w	fp, fp, #1
 80076dc:	e245      	b.n	8007b6a <_dtoa_r+0x92a>
 80076de:	07f2      	lsls	r2, r6, #31
 80076e0:	d505      	bpl.n	80076ee <_dtoa_r+0x4ae>
 80076e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e6:	f7f8 ffe3 	bl	80006b0 <__aeabi_dmul>
 80076ea:	3501      	adds	r5, #1
 80076ec:	2301      	movs	r3, #1
 80076ee:	1076      	asrs	r6, r6, #1
 80076f0:	3708      	adds	r7, #8
 80076f2:	e775      	b.n	80075e0 <_dtoa_r+0x3a0>
 80076f4:	2502      	movs	r5, #2
 80076f6:	e777      	b.n	80075e8 <_dtoa_r+0x3a8>
 80076f8:	465f      	mov	r7, fp
 80076fa:	9e03      	ldr	r6, [sp, #12]
 80076fc:	e794      	b.n	8007628 <_dtoa_r+0x3e8>
 80076fe:	9a02      	ldr	r2, [sp, #8]
 8007700:	4b4e      	ldr	r3, [pc, #312]	; (800783c <_dtoa_r+0x5fc>)
 8007702:	4432      	add	r2, r6
 8007704:	9213      	str	r2, [sp, #76]	; 0x4c
 8007706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007708:	1e71      	subs	r1, r6, #1
 800770a:	2a00      	cmp	r2, #0
 800770c:	d048      	beq.n	80077a0 <_dtoa_r+0x560>
 800770e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007716:	2000      	movs	r0, #0
 8007718:	494e      	ldr	r1, [pc, #312]	; (8007854 <_dtoa_r+0x614>)
 800771a:	f7f9 f8f3 	bl	8000904 <__aeabi_ddiv>
 800771e:	4642      	mov	r2, r8
 8007720:	464b      	mov	r3, r9
 8007722:	f7f8 fe11 	bl	8000348 <__aeabi_dsub>
 8007726:	9d02      	ldr	r5, [sp, #8]
 8007728:	4680      	mov	r8, r0
 800772a:	4689      	mov	r9, r1
 800772c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007730:	f7f9 fa6e 	bl	8000c10 <__aeabi_d2iz>
 8007734:	4606      	mov	r6, r0
 8007736:	f7f8 ff55 	bl	80005e4 <__aeabi_i2d>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007742:	f7f8 fe01 	bl	8000348 <__aeabi_dsub>
 8007746:	3630      	adds	r6, #48	; 0x30
 8007748:	f805 6b01 	strb.w	r6, [r5], #1
 800774c:	4642      	mov	r2, r8
 800774e:	464b      	mov	r3, r9
 8007750:	e9cd 0100 	strd	r0, r1, [sp]
 8007754:	f7f9 fa1e 	bl	8000b94 <__aeabi_dcmplt>
 8007758:	2800      	cmp	r0, #0
 800775a:	d165      	bne.n	8007828 <_dtoa_r+0x5e8>
 800775c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007760:	2000      	movs	r0, #0
 8007762:	4938      	ldr	r1, [pc, #224]	; (8007844 <_dtoa_r+0x604>)
 8007764:	f7f8 fdf0 	bl	8000348 <__aeabi_dsub>
 8007768:	4642      	mov	r2, r8
 800776a:	464b      	mov	r3, r9
 800776c:	f7f9 fa12 	bl	8000b94 <__aeabi_dcmplt>
 8007770:	2800      	cmp	r0, #0
 8007772:	f040 80ba 	bne.w	80078ea <_dtoa_r+0x6aa>
 8007776:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007778:	429d      	cmp	r5, r3
 800777a:	f43f af7e 	beq.w	800767a <_dtoa_r+0x43a>
 800777e:	2200      	movs	r2, #0
 8007780:	4b31      	ldr	r3, [pc, #196]	; (8007848 <_dtoa_r+0x608>)
 8007782:	4640      	mov	r0, r8
 8007784:	4649      	mov	r1, r9
 8007786:	f7f8 ff93 	bl	80006b0 <__aeabi_dmul>
 800778a:	2200      	movs	r2, #0
 800778c:	4680      	mov	r8, r0
 800778e:	4689      	mov	r9, r1
 8007790:	4b2d      	ldr	r3, [pc, #180]	; (8007848 <_dtoa_r+0x608>)
 8007792:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007796:	f7f8 ff8b 	bl	80006b0 <__aeabi_dmul>
 800779a:	e9cd 0100 	strd	r0, r1, [sp]
 800779e:	e7c5      	b.n	800772c <_dtoa_r+0x4ec>
 80077a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80077a4:	4642      	mov	r2, r8
 80077a6:	464b      	mov	r3, r9
 80077a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077ac:	f7f8 ff80 	bl	80006b0 <__aeabi_dmul>
 80077b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077b4:	9d02      	ldr	r5, [sp, #8]
 80077b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077ba:	f7f9 fa29 	bl	8000c10 <__aeabi_d2iz>
 80077be:	4606      	mov	r6, r0
 80077c0:	f7f8 ff10 	bl	80005e4 <__aeabi_i2d>
 80077c4:	3630      	adds	r6, #48	; 0x30
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077ce:	f7f8 fdbb 	bl	8000348 <__aeabi_dsub>
 80077d2:	f805 6b01 	strb.w	r6, [r5], #1
 80077d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077d8:	42ab      	cmp	r3, r5
 80077da:	4680      	mov	r8, r0
 80077dc:	4689      	mov	r9, r1
 80077de:	f04f 0200 	mov.w	r2, #0
 80077e2:	d125      	bne.n	8007830 <_dtoa_r+0x5f0>
 80077e4:	4b1b      	ldr	r3, [pc, #108]	; (8007854 <_dtoa_r+0x614>)
 80077e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077ea:	f7f8 fdaf 	bl	800034c <__adddf3>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4640      	mov	r0, r8
 80077f4:	4649      	mov	r1, r9
 80077f6:	f7f9 f9eb 	bl	8000bd0 <__aeabi_dcmpgt>
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d175      	bne.n	80078ea <_dtoa_r+0x6aa>
 80077fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007802:	2000      	movs	r0, #0
 8007804:	4913      	ldr	r1, [pc, #76]	; (8007854 <_dtoa_r+0x614>)
 8007806:	f7f8 fd9f 	bl	8000348 <__aeabi_dsub>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	4640      	mov	r0, r8
 8007810:	4649      	mov	r1, r9
 8007812:	f7f9 f9bf 	bl	8000b94 <__aeabi_dcmplt>
 8007816:	2800      	cmp	r0, #0
 8007818:	f43f af2f 	beq.w	800767a <_dtoa_r+0x43a>
 800781c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007820:	2b30      	cmp	r3, #48	; 0x30
 8007822:	f105 32ff 	add.w	r2, r5, #4294967295
 8007826:	d001      	beq.n	800782c <_dtoa_r+0x5ec>
 8007828:	46bb      	mov	fp, r7
 800782a:	e04d      	b.n	80078c8 <_dtoa_r+0x688>
 800782c:	4615      	mov	r5, r2
 800782e:	e7f5      	b.n	800781c <_dtoa_r+0x5dc>
 8007830:	4b05      	ldr	r3, [pc, #20]	; (8007848 <_dtoa_r+0x608>)
 8007832:	f7f8 ff3d 	bl	80006b0 <__aeabi_dmul>
 8007836:	e9cd 0100 	strd	r0, r1, [sp]
 800783a:	e7bc      	b.n	80077b6 <_dtoa_r+0x576>
 800783c:	0801e698 	.word	0x0801e698
 8007840:	0801e670 	.word	0x0801e670
 8007844:	3ff00000 	.word	0x3ff00000
 8007848:	40240000 	.word	0x40240000
 800784c:	401c0000 	.word	0x401c0000
 8007850:	40140000 	.word	0x40140000
 8007854:	3fe00000 	.word	0x3fe00000
 8007858:	e9dd 6700 	ldrd	r6, r7, [sp]
 800785c:	9d02      	ldr	r5, [sp, #8]
 800785e:	4642      	mov	r2, r8
 8007860:	464b      	mov	r3, r9
 8007862:	4630      	mov	r0, r6
 8007864:	4639      	mov	r1, r7
 8007866:	f7f9 f84d 	bl	8000904 <__aeabi_ddiv>
 800786a:	f7f9 f9d1 	bl	8000c10 <__aeabi_d2iz>
 800786e:	9000      	str	r0, [sp, #0]
 8007870:	f7f8 feb8 	bl	80005e4 <__aeabi_i2d>
 8007874:	4642      	mov	r2, r8
 8007876:	464b      	mov	r3, r9
 8007878:	f7f8 ff1a 	bl	80006b0 <__aeabi_dmul>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4630      	mov	r0, r6
 8007882:	4639      	mov	r1, r7
 8007884:	f7f8 fd60 	bl	8000348 <__aeabi_dsub>
 8007888:	9e00      	ldr	r6, [sp, #0]
 800788a:	9f03      	ldr	r7, [sp, #12]
 800788c:	3630      	adds	r6, #48	; 0x30
 800788e:	f805 6b01 	strb.w	r6, [r5], #1
 8007892:	9e02      	ldr	r6, [sp, #8]
 8007894:	1bae      	subs	r6, r5, r6
 8007896:	42b7      	cmp	r7, r6
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	d138      	bne.n	8007910 <_dtoa_r+0x6d0>
 800789e:	f7f8 fd55 	bl	800034c <__adddf3>
 80078a2:	4606      	mov	r6, r0
 80078a4:	460f      	mov	r7, r1
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4640      	mov	r0, r8
 80078ac:	4649      	mov	r1, r9
 80078ae:	f7f9 f971 	bl	8000b94 <__aeabi_dcmplt>
 80078b2:	b9c8      	cbnz	r0, 80078e8 <_dtoa_r+0x6a8>
 80078b4:	4632      	mov	r2, r6
 80078b6:	463b      	mov	r3, r7
 80078b8:	4640      	mov	r0, r8
 80078ba:	4649      	mov	r1, r9
 80078bc:	f7f9 f960 	bl	8000b80 <__aeabi_dcmpeq>
 80078c0:	b110      	cbz	r0, 80078c8 <_dtoa_r+0x688>
 80078c2:	9b00      	ldr	r3, [sp, #0]
 80078c4:	07db      	lsls	r3, r3, #31
 80078c6:	d40f      	bmi.n	80078e8 <_dtoa_r+0x6a8>
 80078c8:	4651      	mov	r1, sl
 80078ca:	4620      	mov	r0, r4
 80078cc:	f000 fcbb 	bl	8008246 <_Bfree>
 80078d0:	2300      	movs	r3, #0
 80078d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078d4:	702b      	strb	r3, [r5, #0]
 80078d6:	f10b 0301 	add.w	r3, fp, #1
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f43f acf8 	beq.w	80072d4 <_dtoa_r+0x94>
 80078e4:	601d      	str	r5, [r3, #0]
 80078e6:	e4f5      	b.n	80072d4 <_dtoa_r+0x94>
 80078e8:	465f      	mov	r7, fp
 80078ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80078ee:	2a39      	cmp	r2, #57	; 0x39
 80078f0:	f105 33ff 	add.w	r3, r5, #4294967295
 80078f4:	d106      	bne.n	8007904 <_dtoa_r+0x6c4>
 80078f6:	9a02      	ldr	r2, [sp, #8]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d107      	bne.n	800790c <_dtoa_r+0x6cc>
 80078fc:	2330      	movs	r3, #48	; 0x30
 80078fe:	7013      	strb	r3, [r2, #0]
 8007900:	3701      	adds	r7, #1
 8007902:	4613      	mov	r3, r2
 8007904:	781a      	ldrb	r2, [r3, #0]
 8007906:	3201      	adds	r2, #1
 8007908:	701a      	strb	r2, [r3, #0]
 800790a:	e78d      	b.n	8007828 <_dtoa_r+0x5e8>
 800790c:	461d      	mov	r5, r3
 800790e:	e7ec      	b.n	80078ea <_dtoa_r+0x6aa>
 8007910:	2200      	movs	r2, #0
 8007912:	4ba4      	ldr	r3, [pc, #656]	; (8007ba4 <_dtoa_r+0x964>)
 8007914:	f7f8 fecc 	bl	80006b0 <__aeabi_dmul>
 8007918:	2200      	movs	r2, #0
 800791a:	2300      	movs	r3, #0
 800791c:	4606      	mov	r6, r0
 800791e:	460f      	mov	r7, r1
 8007920:	f7f9 f92e 	bl	8000b80 <__aeabi_dcmpeq>
 8007924:	2800      	cmp	r0, #0
 8007926:	d09a      	beq.n	800785e <_dtoa_r+0x61e>
 8007928:	e7ce      	b.n	80078c8 <_dtoa_r+0x688>
 800792a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800792c:	2a00      	cmp	r2, #0
 800792e:	f000 80cd 	beq.w	8007acc <_dtoa_r+0x88c>
 8007932:	9a07      	ldr	r2, [sp, #28]
 8007934:	2a01      	cmp	r2, #1
 8007936:	f300 80af 	bgt.w	8007a98 <_dtoa_r+0x858>
 800793a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800793c:	2a00      	cmp	r2, #0
 800793e:	f000 80a7 	beq.w	8007a90 <_dtoa_r+0x850>
 8007942:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007946:	9e08      	ldr	r6, [sp, #32]
 8007948:	9d05      	ldr	r5, [sp, #20]
 800794a:	9a05      	ldr	r2, [sp, #20]
 800794c:	441a      	add	r2, r3
 800794e:	9205      	str	r2, [sp, #20]
 8007950:	9a06      	ldr	r2, [sp, #24]
 8007952:	2101      	movs	r1, #1
 8007954:	441a      	add	r2, r3
 8007956:	4620      	mov	r0, r4
 8007958:	9206      	str	r2, [sp, #24]
 800795a:	f000 fd14 	bl	8008386 <__i2b>
 800795e:	4607      	mov	r7, r0
 8007960:	2d00      	cmp	r5, #0
 8007962:	dd0c      	ble.n	800797e <_dtoa_r+0x73e>
 8007964:	9b06      	ldr	r3, [sp, #24]
 8007966:	2b00      	cmp	r3, #0
 8007968:	dd09      	ble.n	800797e <_dtoa_r+0x73e>
 800796a:	42ab      	cmp	r3, r5
 800796c:	9a05      	ldr	r2, [sp, #20]
 800796e:	bfa8      	it	ge
 8007970:	462b      	movge	r3, r5
 8007972:	1ad2      	subs	r2, r2, r3
 8007974:	9205      	str	r2, [sp, #20]
 8007976:	9a06      	ldr	r2, [sp, #24]
 8007978:	1aed      	subs	r5, r5, r3
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	9306      	str	r3, [sp, #24]
 800797e:	9b08      	ldr	r3, [sp, #32]
 8007980:	b1f3      	cbz	r3, 80079c0 <_dtoa_r+0x780>
 8007982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 80a5 	beq.w	8007ad4 <_dtoa_r+0x894>
 800798a:	2e00      	cmp	r6, #0
 800798c:	dd10      	ble.n	80079b0 <_dtoa_r+0x770>
 800798e:	4639      	mov	r1, r7
 8007990:	4632      	mov	r2, r6
 8007992:	4620      	mov	r0, r4
 8007994:	f000 fd8e 	bl	80084b4 <__pow5mult>
 8007998:	4652      	mov	r2, sl
 800799a:	4601      	mov	r1, r0
 800799c:	4607      	mov	r7, r0
 800799e:	4620      	mov	r0, r4
 80079a0:	f000 fcfa 	bl	8008398 <__multiply>
 80079a4:	4651      	mov	r1, sl
 80079a6:	4680      	mov	r8, r0
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 fc4c 	bl	8008246 <_Bfree>
 80079ae:	46c2      	mov	sl, r8
 80079b0:	9b08      	ldr	r3, [sp, #32]
 80079b2:	1b9a      	subs	r2, r3, r6
 80079b4:	d004      	beq.n	80079c0 <_dtoa_r+0x780>
 80079b6:	4651      	mov	r1, sl
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 fd7b 	bl	80084b4 <__pow5mult>
 80079be:	4682      	mov	sl, r0
 80079c0:	2101      	movs	r1, #1
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 fcdf 	bl	8008386 <__i2b>
 80079c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	4606      	mov	r6, r0
 80079ce:	f340 8083 	ble.w	8007ad8 <_dtoa_r+0x898>
 80079d2:	461a      	mov	r2, r3
 80079d4:	4601      	mov	r1, r0
 80079d6:	4620      	mov	r0, r4
 80079d8:	f000 fd6c 	bl	80084b4 <__pow5mult>
 80079dc:	9b07      	ldr	r3, [sp, #28]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	4606      	mov	r6, r0
 80079e2:	dd7c      	ble.n	8007ade <_dtoa_r+0x89e>
 80079e4:	f04f 0800 	mov.w	r8, #0
 80079e8:	6933      	ldr	r3, [r6, #16]
 80079ea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80079ee:	6918      	ldr	r0, [r3, #16]
 80079f0:	f000 fc7b 	bl	80082ea <__hi0bits>
 80079f4:	f1c0 0020 	rsb	r0, r0, #32
 80079f8:	9b06      	ldr	r3, [sp, #24]
 80079fa:	4418      	add	r0, r3
 80079fc:	f010 001f 	ands.w	r0, r0, #31
 8007a00:	f000 8096 	beq.w	8007b30 <_dtoa_r+0x8f0>
 8007a04:	f1c0 0320 	rsb	r3, r0, #32
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	f340 8087 	ble.w	8007b1c <_dtoa_r+0x8dc>
 8007a0e:	9b05      	ldr	r3, [sp, #20]
 8007a10:	f1c0 001c 	rsb	r0, r0, #28
 8007a14:	4403      	add	r3, r0
 8007a16:	9305      	str	r3, [sp, #20]
 8007a18:	9b06      	ldr	r3, [sp, #24]
 8007a1a:	4405      	add	r5, r0
 8007a1c:	4403      	add	r3, r0
 8007a1e:	9306      	str	r3, [sp, #24]
 8007a20:	9b05      	ldr	r3, [sp, #20]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	dd05      	ble.n	8007a32 <_dtoa_r+0x7f2>
 8007a26:	4651      	mov	r1, sl
 8007a28:	461a      	mov	r2, r3
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f000 fd90 	bl	8008550 <__lshift>
 8007a30:	4682      	mov	sl, r0
 8007a32:	9b06      	ldr	r3, [sp, #24]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dd05      	ble.n	8007a44 <_dtoa_r+0x804>
 8007a38:	4631      	mov	r1, r6
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f000 fd87 	bl	8008550 <__lshift>
 8007a42:	4606      	mov	r6, r0
 8007a44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d074      	beq.n	8007b34 <_dtoa_r+0x8f4>
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	4650      	mov	r0, sl
 8007a4e:	f000 fdd0 	bl	80085f2 <__mcmp>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	da6e      	bge.n	8007b34 <_dtoa_r+0x8f4>
 8007a56:	2300      	movs	r3, #0
 8007a58:	4651      	mov	r1, sl
 8007a5a:	220a      	movs	r2, #10
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f000 fc09 	bl	8008274 <__multadd>
 8007a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a68:	4682      	mov	sl, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 81a8 	beq.w	8007dc0 <_dtoa_r+0xb80>
 8007a70:	2300      	movs	r3, #0
 8007a72:	4639      	mov	r1, r7
 8007a74:	220a      	movs	r2, #10
 8007a76:	4620      	mov	r0, r4
 8007a78:	f000 fbfc 	bl	8008274 <__multadd>
 8007a7c:	9b04      	ldr	r3, [sp, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	4607      	mov	r7, r0
 8007a82:	f300 80c8 	bgt.w	8007c16 <_dtoa_r+0x9d6>
 8007a86:	9b07      	ldr	r3, [sp, #28]
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	f340 80c4 	ble.w	8007c16 <_dtoa_r+0x9d6>
 8007a8e:	e059      	b.n	8007b44 <_dtoa_r+0x904>
 8007a90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a92:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a96:	e756      	b.n	8007946 <_dtoa_r+0x706>
 8007a98:	9b03      	ldr	r3, [sp, #12]
 8007a9a:	1e5e      	subs	r6, r3, #1
 8007a9c:	9b08      	ldr	r3, [sp, #32]
 8007a9e:	42b3      	cmp	r3, r6
 8007aa0:	bfbf      	itttt	lt
 8007aa2:	9b08      	ldrlt	r3, [sp, #32]
 8007aa4:	9608      	strlt	r6, [sp, #32]
 8007aa6:	1af2      	sublt	r2, r6, r3
 8007aa8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8007aaa:	bfb6      	itet	lt
 8007aac:	189b      	addlt	r3, r3, r2
 8007aae:	1b9e      	subge	r6, r3, r6
 8007ab0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8007ab2:	9b03      	ldr	r3, [sp, #12]
 8007ab4:	bfb8      	it	lt
 8007ab6:	2600      	movlt	r6, #0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	bfb9      	ittee	lt
 8007abc:	9b05      	ldrlt	r3, [sp, #20]
 8007abe:	9a03      	ldrlt	r2, [sp, #12]
 8007ac0:	9d05      	ldrge	r5, [sp, #20]
 8007ac2:	9b03      	ldrge	r3, [sp, #12]
 8007ac4:	bfbc      	itt	lt
 8007ac6:	1a9d      	sublt	r5, r3, r2
 8007ac8:	2300      	movlt	r3, #0
 8007aca:	e73e      	b.n	800794a <_dtoa_r+0x70a>
 8007acc:	9e08      	ldr	r6, [sp, #32]
 8007ace:	9d05      	ldr	r5, [sp, #20]
 8007ad0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ad2:	e745      	b.n	8007960 <_dtoa_r+0x720>
 8007ad4:	9a08      	ldr	r2, [sp, #32]
 8007ad6:	e76e      	b.n	80079b6 <_dtoa_r+0x776>
 8007ad8:	9b07      	ldr	r3, [sp, #28]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	dc19      	bgt.n	8007b12 <_dtoa_r+0x8d2>
 8007ade:	9b00      	ldr	r3, [sp, #0]
 8007ae0:	b9bb      	cbnz	r3, 8007b12 <_dtoa_r+0x8d2>
 8007ae2:	9b01      	ldr	r3, [sp, #4]
 8007ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ae8:	b99b      	cbnz	r3, 8007b12 <_dtoa_r+0x8d2>
 8007aea:	9b01      	ldr	r3, [sp, #4]
 8007aec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007af0:	0d1b      	lsrs	r3, r3, #20
 8007af2:	051b      	lsls	r3, r3, #20
 8007af4:	b183      	cbz	r3, 8007b18 <_dtoa_r+0x8d8>
 8007af6:	9b05      	ldr	r3, [sp, #20]
 8007af8:	3301      	adds	r3, #1
 8007afa:	9305      	str	r3, [sp, #20]
 8007afc:	9b06      	ldr	r3, [sp, #24]
 8007afe:	3301      	adds	r3, #1
 8007b00:	9306      	str	r3, [sp, #24]
 8007b02:	f04f 0801 	mov.w	r8, #1
 8007b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f47f af6d 	bne.w	80079e8 <_dtoa_r+0x7a8>
 8007b0e:	2001      	movs	r0, #1
 8007b10:	e772      	b.n	80079f8 <_dtoa_r+0x7b8>
 8007b12:	f04f 0800 	mov.w	r8, #0
 8007b16:	e7f6      	b.n	8007b06 <_dtoa_r+0x8c6>
 8007b18:	4698      	mov	r8, r3
 8007b1a:	e7f4      	b.n	8007b06 <_dtoa_r+0x8c6>
 8007b1c:	d080      	beq.n	8007a20 <_dtoa_r+0x7e0>
 8007b1e:	9a05      	ldr	r2, [sp, #20]
 8007b20:	331c      	adds	r3, #28
 8007b22:	441a      	add	r2, r3
 8007b24:	9205      	str	r2, [sp, #20]
 8007b26:	9a06      	ldr	r2, [sp, #24]
 8007b28:	441a      	add	r2, r3
 8007b2a:	441d      	add	r5, r3
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	e776      	b.n	8007a1e <_dtoa_r+0x7de>
 8007b30:	4603      	mov	r3, r0
 8007b32:	e7f4      	b.n	8007b1e <_dtoa_r+0x8de>
 8007b34:	9b03      	ldr	r3, [sp, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	dc36      	bgt.n	8007ba8 <_dtoa_r+0x968>
 8007b3a:	9b07      	ldr	r3, [sp, #28]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	dd33      	ble.n	8007ba8 <_dtoa_r+0x968>
 8007b40:	9b03      	ldr	r3, [sp, #12]
 8007b42:	9304      	str	r3, [sp, #16]
 8007b44:	9b04      	ldr	r3, [sp, #16]
 8007b46:	b963      	cbnz	r3, 8007b62 <_dtoa_r+0x922>
 8007b48:	4631      	mov	r1, r6
 8007b4a:	2205      	movs	r2, #5
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 fb91 	bl	8008274 <__multadd>
 8007b52:	4601      	mov	r1, r0
 8007b54:	4606      	mov	r6, r0
 8007b56:	4650      	mov	r0, sl
 8007b58:	f000 fd4b 	bl	80085f2 <__mcmp>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	f73f adb6 	bgt.w	80076ce <_dtoa_r+0x48e>
 8007b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b64:	9d02      	ldr	r5, [sp, #8]
 8007b66:	ea6f 0b03 	mvn.w	fp, r3
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	9303      	str	r3, [sp, #12]
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4620      	mov	r0, r4
 8007b72:	f000 fb68 	bl	8008246 <_Bfree>
 8007b76:	2f00      	cmp	r7, #0
 8007b78:	f43f aea6 	beq.w	80078c8 <_dtoa_r+0x688>
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	b12b      	cbz	r3, 8007b8c <_dtoa_r+0x94c>
 8007b80:	42bb      	cmp	r3, r7
 8007b82:	d003      	beq.n	8007b8c <_dtoa_r+0x94c>
 8007b84:	4619      	mov	r1, r3
 8007b86:	4620      	mov	r0, r4
 8007b88:	f000 fb5d 	bl	8008246 <_Bfree>
 8007b8c:	4639      	mov	r1, r7
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f000 fb59 	bl	8008246 <_Bfree>
 8007b94:	e698      	b.n	80078c8 <_dtoa_r+0x688>
 8007b96:	2600      	movs	r6, #0
 8007b98:	4637      	mov	r7, r6
 8007b9a:	e7e2      	b.n	8007b62 <_dtoa_r+0x922>
 8007b9c:	46bb      	mov	fp, r7
 8007b9e:	4637      	mov	r7, r6
 8007ba0:	e595      	b.n	80076ce <_dtoa_r+0x48e>
 8007ba2:	bf00      	nop
 8007ba4:	40240000 	.word	0x40240000
 8007ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007baa:	bb93      	cbnz	r3, 8007c12 <_dtoa_r+0x9d2>
 8007bac:	9b03      	ldr	r3, [sp, #12]
 8007bae:	9304      	str	r3, [sp, #16]
 8007bb0:	9d02      	ldr	r5, [sp, #8]
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4650      	mov	r0, sl
 8007bb6:	f7ff fab7 	bl	8007128 <quorem>
 8007bba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007bbe:	f805 9b01 	strb.w	r9, [r5], #1
 8007bc2:	9b02      	ldr	r3, [sp, #8]
 8007bc4:	9a04      	ldr	r2, [sp, #16]
 8007bc6:	1aeb      	subs	r3, r5, r3
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	f300 80dc 	bgt.w	8007d86 <_dtoa_r+0xb46>
 8007bce:	9b02      	ldr	r3, [sp, #8]
 8007bd0:	2a01      	cmp	r2, #1
 8007bd2:	bfac      	ite	ge
 8007bd4:	189b      	addge	r3, r3, r2
 8007bd6:	3301      	addlt	r3, #1
 8007bd8:	4698      	mov	r8, r3
 8007bda:	2300      	movs	r3, #0
 8007bdc:	9303      	str	r3, [sp, #12]
 8007bde:	4651      	mov	r1, sl
 8007be0:	2201      	movs	r2, #1
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 fcb4 	bl	8008550 <__lshift>
 8007be8:	4631      	mov	r1, r6
 8007bea:	4682      	mov	sl, r0
 8007bec:	f000 fd01 	bl	80085f2 <__mcmp>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	f300 808d 	bgt.w	8007d10 <_dtoa_r+0xad0>
 8007bf6:	d103      	bne.n	8007c00 <_dtoa_r+0x9c0>
 8007bf8:	f019 0f01 	tst.w	r9, #1
 8007bfc:	f040 8088 	bne.w	8007d10 <_dtoa_r+0xad0>
 8007c00:	4645      	mov	r5, r8
 8007c02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c06:	2b30      	cmp	r3, #48	; 0x30
 8007c08:	f105 32ff 	add.w	r2, r5, #4294967295
 8007c0c:	d1af      	bne.n	8007b6e <_dtoa_r+0x92e>
 8007c0e:	4615      	mov	r5, r2
 8007c10:	e7f7      	b.n	8007c02 <_dtoa_r+0x9c2>
 8007c12:	9b03      	ldr	r3, [sp, #12]
 8007c14:	9304      	str	r3, [sp, #16]
 8007c16:	2d00      	cmp	r5, #0
 8007c18:	dd05      	ble.n	8007c26 <_dtoa_r+0x9e6>
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	462a      	mov	r2, r5
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 fc96 	bl	8008550 <__lshift>
 8007c24:	4607      	mov	r7, r0
 8007c26:	f1b8 0f00 	cmp.w	r8, #0
 8007c2a:	d04c      	beq.n	8007cc6 <_dtoa_r+0xa86>
 8007c2c:	6879      	ldr	r1, [r7, #4]
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 fad5 	bl	80081de <_Balloc>
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	3202      	adds	r2, #2
 8007c38:	4605      	mov	r5, r0
 8007c3a:	0092      	lsls	r2, r2, #2
 8007c3c:	f107 010c 	add.w	r1, r7, #12
 8007c40:	300c      	adds	r0, #12
 8007c42:	f000 fac1 	bl	80081c8 <memcpy>
 8007c46:	2201      	movs	r2, #1
 8007c48:	4629      	mov	r1, r5
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f000 fc80 	bl	8008550 <__lshift>
 8007c50:	9b00      	ldr	r3, [sp, #0]
 8007c52:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007c56:	9703      	str	r7, [sp, #12]
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	9305      	str	r3, [sp, #20]
 8007c60:	4631      	mov	r1, r6
 8007c62:	4650      	mov	r0, sl
 8007c64:	f7ff fa60 	bl	8007128 <quorem>
 8007c68:	9903      	ldr	r1, [sp, #12]
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c70:	4650      	mov	r0, sl
 8007c72:	f000 fcbe 	bl	80085f2 <__mcmp>
 8007c76:	463a      	mov	r2, r7
 8007c78:	9000      	str	r0, [sp, #0]
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f000 fcd2 	bl	8008626 <__mdiff>
 8007c82:	68c3      	ldr	r3, [r0, #12]
 8007c84:	4602      	mov	r2, r0
 8007c86:	bb03      	cbnz	r3, 8007cca <_dtoa_r+0xa8a>
 8007c88:	4601      	mov	r1, r0
 8007c8a:	9006      	str	r0, [sp, #24]
 8007c8c:	4650      	mov	r0, sl
 8007c8e:	f000 fcb0 	bl	80085f2 <__mcmp>
 8007c92:	9a06      	ldr	r2, [sp, #24]
 8007c94:	4603      	mov	r3, r0
 8007c96:	4611      	mov	r1, r2
 8007c98:	4620      	mov	r0, r4
 8007c9a:	9306      	str	r3, [sp, #24]
 8007c9c:	f000 fad3 	bl	8008246 <_Bfree>
 8007ca0:	9b06      	ldr	r3, [sp, #24]
 8007ca2:	b9a3      	cbnz	r3, 8007cce <_dtoa_r+0xa8e>
 8007ca4:	9a07      	ldr	r2, [sp, #28]
 8007ca6:	b992      	cbnz	r2, 8007cce <_dtoa_r+0xa8e>
 8007ca8:	9a05      	ldr	r2, [sp, #20]
 8007caa:	b982      	cbnz	r2, 8007cce <_dtoa_r+0xa8e>
 8007cac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007cb0:	d029      	beq.n	8007d06 <_dtoa_r+0xac6>
 8007cb2:	9b00      	ldr	r3, [sp, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	dd01      	ble.n	8007cbc <_dtoa_r+0xa7c>
 8007cb8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8007cbc:	f108 0501 	add.w	r5, r8, #1
 8007cc0:	f888 9000 	strb.w	r9, [r8]
 8007cc4:	e753      	b.n	8007b6e <_dtoa_r+0x92e>
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	e7c2      	b.n	8007c50 <_dtoa_r+0xa10>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e7e3      	b.n	8007c96 <_dtoa_r+0xa56>
 8007cce:	9a00      	ldr	r2, [sp, #0]
 8007cd0:	2a00      	cmp	r2, #0
 8007cd2:	db04      	blt.n	8007cde <_dtoa_r+0xa9e>
 8007cd4:	d125      	bne.n	8007d22 <_dtoa_r+0xae2>
 8007cd6:	9a07      	ldr	r2, [sp, #28]
 8007cd8:	bb1a      	cbnz	r2, 8007d22 <_dtoa_r+0xae2>
 8007cda:	9a05      	ldr	r2, [sp, #20]
 8007cdc:	bb0a      	cbnz	r2, 8007d22 <_dtoa_r+0xae2>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	ddec      	ble.n	8007cbc <_dtoa_r+0xa7c>
 8007ce2:	4651      	mov	r1, sl
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f000 fc32 	bl	8008550 <__lshift>
 8007cec:	4631      	mov	r1, r6
 8007cee:	4682      	mov	sl, r0
 8007cf0:	f000 fc7f 	bl	80085f2 <__mcmp>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	dc03      	bgt.n	8007d00 <_dtoa_r+0xac0>
 8007cf8:	d1e0      	bne.n	8007cbc <_dtoa_r+0xa7c>
 8007cfa:	f019 0f01 	tst.w	r9, #1
 8007cfe:	d0dd      	beq.n	8007cbc <_dtoa_r+0xa7c>
 8007d00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d04:	d1d8      	bne.n	8007cb8 <_dtoa_r+0xa78>
 8007d06:	2339      	movs	r3, #57	; 0x39
 8007d08:	f888 3000 	strb.w	r3, [r8]
 8007d0c:	f108 0801 	add.w	r8, r8, #1
 8007d10:	4645      	mov	r5, r8
 8007d12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d16:	2b39      	cmp	r3, #57	; 0x39
 8007d18:	f105 32ff 	add.w	r2, r5, #4294967295
 8007d1c:	d03b      	beq.n	8007d96 <_dtoa_r+0xb56>
 8007d1e:	3301      	adds	r3, #1
 8007d20:	e040      	b.n	8007da4 <_dtoa_r+0xb64>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f108 0501 	add.w	r5, r8, #1
 8007d28:	dd05      	ble.n	8007d36 <_dtoa_r+0xaf6>
 8007d2a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d2e:	d0ea      	beq.n	8007d06 <_dtoa_r+0xac6>
 8007d30:	f109 0901 	add.w	r9, r9, #1
 8007d34:	e7c4      	b.n	8007cc0 <_dtoa_r+0xa80>
 8007d36:	9b02      	ldr	r3, [sp, #8]
 8007d38:	9a04      	ldr	r2, [sp, #16]
 8007d3a:	f805 9c01 	strb.w	r9, [r5, #-1]
 8007d3e:	1aeb      	subs	r3, r5, r3
 8007d40:	4293      	cmp	r3, r2
 8007d42:	46a8      	mov	r8, r5
 8007d44:	f43f af4b 	beq.w	8007bde <_dtoa_r+0x99e>
 8007d48:	4651      	mov	r1, sl
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	220a      	movs	r2, #10
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 fa90 	bl	8008274 <__multadd>
 8007d54:	9b03      	ldr	r3, [sp, #12]
 8007d56:	9903      	ldr	r1, [sp, #12]
 8007d58:	42bb      	cmp	r3, r7
 8007d5a:	4682      	mov	sl, r0
 8007d5c:	f04f 0300 	mov.w	r3, #0
 8007d60:	f04f 020a 	mov.w	r2, #10
 8007d64:	4620      	mov	r0, r4
 8007d66:	d104      	bne.n	8007d72 <_dtoa_r+0xb32>
 8007d68:	f000 fa84 	bl	8008274 <__multadd>
 8007d6c:	9003      	str	r0, [sp, #12]
 8007d6e:	4607      	mov	r7, r0
 8007d70:	e776      	b.n	8007c60 <_dtoa_r+0xa20>
 8007d72:	f000 fa7f 	bl	8008274 <__multadd>
 8007d76:	2300      	movs	r3, #0
 8007d78:	9003      	str	r0, [sp, #12]
 8007d7a:	220a      	movs	r2, #10
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 fa78 	bl	8008274 <__multadd>
 8007d84:	e7f3      	b.n	8007d6e <_dtoa_r+0xb2e>
 8007d86:	4651      	mov	r1, sl
 8007d88:	2300      	movs	r3, #0
 8007d8a:	220a      	movs	r2, #10
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f000 fa71 	bl	8008274 <__multadd>
 8007d92:	4682      	mov	sl, r0
 8007d94:	e70d      	b.n	8007bb2 <_dtoa_r+0x972>
 8007d96:	9b02      	ldr	r3, [sp, #8]
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d105      	bne.n	8007da8 <_dtoa_r+0xb68>
 8007d9c:	9a02      	ldr	r2, [sp, #8]
 8007d9e:	f10b 0b01 	add.w	fp, fp, #1
 8007da2:	2331      	movs	r3, #49	; 0x31
 8007da4:	7013      	strb	r3, [r2, #0]
 8007da6:	e6e2      	b.n	8007b6e <_dtoa_r+0x92e>
 8007da8:	4615      	mov	r5, r2
 8007daa:	e7b2      	b.n	8007d12 <_dtoa_r+0xad2>
 8007dac:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <_dtoa_r+0xb94>)
 8007dae:	f7ff baae 	b.w	800730e <_dtoa_r+0xce>
 8007db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f47f aa88 	bne.w	80072ca <_dtoa_r+0x8a>
 8007dba:	4b07      	ldr	r3, [pc, #28]	; (8007dd8 <_dtoa_r+0xb98>)
 8007dbc:	f7ff baa7 	b.w	800730e <_dtoa_r+0xce>
 8007dc0:	9b04      	ldr	r3, [sp, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f73f aef4 	bgt.w	8007bb0 <_dtoa_r+0x970>
 8007dc8:	9b07      	ldr	r3, [sp, #28]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	f77f aef0 	ble.w	8007bb0 <_dtoa_r+0x970>
 8007dd0:	e6b8      	b.n	8007b44 <_dtoa_r+0x904>
 8007dd2:	bf00      	nop
 8007dd4:	0801e88c 	.word	0x0801e88c
 8007dd8:	0801e5fa 	.word	0x0801e5fa

08007ddc <__sflush_r>:
 8007ddc:	898a      	ldrh	r2, [r1, #12]
 8007dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007de2:	4605      	mov	r5, r0
 8007de4:	0710      	lsls	r0, r2, #28
 8007de6:	460c      	mov	r4, r1
 8007de8:	d45a      	bmi.n	8007ea0 <__sflush_r+0xc4>
 8007dea:	684b      	ldr	r3, [r1, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	dc05      	bgt.n	8007dfc <__sflush_r+0x20>
 8007df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	dc02      	bgt.n	8007dfc <__sflush_r+0x20>
 8007df6:	2000      	movs	r0, #0
 8007df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dfe:	2e00      	cmp	r6, #0
 8007e00:	d0f9      	beq.n	8007df6 <__sflush_r+0x1a>
 8007e02:	2300      	movs	r3, #0
 8007e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e08:	682f      	ldr	r7, [r5, #0]
 8007e0a:	602b      	str	r3, [r5, #0]
 8007e0c:	d033      	beq.n	8007e76 <__sflush_r+0x9a>
 8007e0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	075a      	lsls	r2, r3, #29
 8007e14:	d505      	bpl.n	8007e22 <__sflush_r+0x46>
 8007e16:	6863      	ldr	r3, [r4, #4]
 8007e18:	1ac0      	subs	r0, r0, r3
 8007e1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e1c:	b10b      	cbz	r3, 8007e22 <__sflush_r+0x46>
 8007e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e20:	1ac0      	subs	r0, r0, r3
 8007e22:	2300      	movs	r3, #0
 8007e24:	4602      	mov	r2, r0
 8007e26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e28:	6a21      	ldr	r1, [r4, #32]
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b0      	blx	r6
 8007e2e:	1c43      	adds	r3, r0, #1
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	d106      	bne.n	8007e42 <__sflush_r+0x66>
 8007e34:	6829      	ldr	r1, [r5, #0]
 8007e36:	291d      	cmp	r1, #29
 8007e38:	d84b      	bhi.n	8007ed2 <__sflush_r+0xf6>
 8007e3a:	4a2b      	ldr	r2, [pc, #172]	; (8007ee8 <__sflush_r+0x10c>)
 8007e3c:	40ca      	lsrs	r2, r1
 8007e3e:	07d6      	lsls	r6, r2, #31
 8007e40:	d547      	bpl.n	8007ed2 <__sflush_r+0xf6>
 8007e42:	2200      	movs	r2, #0
 8007e44:	6062      	str	r2, [r4, #4]
 8007e46:	04d9      	lsls	r1, r3, #19
 8007e48:	6922      	ldr	r2, [r4, #16]
 8007e4a:	6022      	str	r2, [r4, #0]
 8007e4c:	d504      	bpl.n	8007e58 <__sflush_r+0x7c>
 8007e4e:	1c42      	adds	r2, r0, #1
 8007e50:	d101      	bne.n	8007e56 <__sflush_r+0x7a>
 8007e52:	682b      	ldr	r3, [r5, #0]
 8007e54:	b903      	cbnz	r3, 8007e58 <__sflush_r+0x7c>
 8007e56:	6560      	str	r0, [r4, #84]	; 0x54
 8007e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e5a:	602f      	str	r7, [r5, #0]
 8007e5c:	2900      	cmp	r1, #0
 8007e5e:	d0ca      	beq.n	8007df6 <__sflush_r+0x1a>
 8007e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e64:	4299      	cmp	r1, r3
 8007e66:	d002      	beq.n	8007e6e <__sflush_r+0x92>
 8007e68:	4628      	mov	r0, r5
 8007e6a:	f000 fc97 	bl	800879c <_free_r>
 8007e6e:	2000      	movs	r0, #0
 8007e70:	6360      	str	r0, [r4, #52]	; 0x34
 8007e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e76:	6a21      	ldr	r1, [r4, #32]
 8007e78:	2301      	movs	r3, #1
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b0      	blx	r6
 8007e7e:	1c41      	adds	r1, r0, #1
 8007e80:	d1c6      	bne.n	8007e10 <__sflush_r+0x34>
 8007e82:	682b      	ldr	r3, [r5, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0c3      	beq.n	8007e10 <__sflush_r+0x34>
 8007e88:	2b1d      	cmp	r3, #29
 8007e8a:	d001      	beq.n	8007e90 <__sflush_r+0xb4>
 8007e8c:	2b16      	cmp	r3, #22
 8007e8e:	d101      	bne.n	8007e94 <__sflush_r+0xb8>
 8007e90:	602f      	str	r7, [r5, #0]
 8007e92:	e7b0      	b.n	8007df6 <__sflush_r+0x1a>
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea0:	690f      	ldr	r7, [r1, #16]
 8007ea2:	2f00      	cmp	r7, #0
 8007ea4:	d0a7      	beq.n	8007df6 <__sflush_r+0x1a>
 8007ea6:	0793      	lsls	r3, r2, #30
 8007ea8:	680e      	ldr	r6, [r1, #0]
 8007eaa:	bf08      	it	eq
 8007eac:	694b      	ldreq	r3, [r1, #20]
 8007eae:	600f      	str	r7, [r1, #0]
 8007eb0:	bf18      	it	ne
 8007eb2:	2300      	movne	r3, #0
 8007eb4:	eba6 0807 	sub.w	r8, r6, r7
 8007eb8:	608b      	str	r3, [r1, #8]
 8007eba:	f1b8 0f00 	cmp.w	r8, #0
 8007ebe:	dd9a      	ble.n	8007df6 <__sflush_r+0x1a>
 8007ec0:	4643      	mov	r3, r8
 8007ec2:	463a      	mov	r2, r7
 8007ec4:	6a21      	ldr	r1, [r4, #32]
 8007ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ec8:	4628      	mov	r0, r5
 8007eca:	47b0      	blx	r6
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	dc07      	bgt.n	8007ee0 <__sflush_r+0x104>
 8007ed0:	89a3      	ldrh	r3, [r4, #12]
 8007ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8007edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee0:	4407      	add	r7, r0
 8007ee2:	eba8 0800 	sub.w	r8, r8, r0
 8007ee6:	e7e8      	b.n	8007eba <__sflush_r+0xde>
 8007ee8:	20400001 	.word	0x20400001

08007eec <_fflush_r>:
 8007eec:	b538      	push	{r3, r4, r5, lr}
 8007eee:	690b      	ldr	r3, [r1, #16]
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	b1db      	cbz	r3, 8007f2e <_fflush_r+0x42>
 8007ef6:	b118      	cbz	r0, 8007f00 <_fflush_r+0x14>
 8007ef8:	6983      	ldr	r3, [r0, #24]
 8007efa:	b90b      	cbnz	r3, 8007f00 <_fflush_r+0x14>
 8007efc:	f000 f860 	bl	8007fc0 <__sinit>
 8007f00:	4b0c      	ldr	r3, [pc, #48]	; (8007f34 <_fflush_r+0x48>)
 8007f02:	429c      	cmp	r4, r3
 8007f04:	d109      	bne.n	8007f1a <_fflush_r+0x2e>
 8007f06:	686c      	ldr	r4, [r5, #4]
 8007f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f0c:	b17b      	cbz	r3, 8007f2e <_fflush_r+0x42>
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f16:	f7ff bf61 	b.w	8007ddc <__sflush_r>
 8007f1a:	4b07      	ldr	r3, [pc, #28]	; (8007f38 <_fflush_r+0x4c>)
 8007f1c:	429c      	cmp	r4, r3
 8007f1e:	d101      	bne.n	8007f24 <_fflush_r+0x38>
 8007f20:	68ac      	ldr	r4, [r5, #8]
 8007f22:	e7f1      	b.n	8007f08 <_fflush_r+0x1c>
 8007f24:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <_fflush_r+0x50>)
 8007f26:	429c      	cmp	r4, r3
 8007f28:	bf08      	it	eq
 8007f2a:	68ec      	ldreq	r4, [r5, #12]
 8007f2c:	e7ec      	b.n	8007f08 <_fflush_r+0x1c>
 8007f2e:	2000      	movs	r0, #0
 8007f30:	bd38      	pop	{r3, r4, r5, pc}
 8007f32:	bf00      	nop
 8007f34:	0801e628 	.word	0x0801e628
 8007f38:	0801e648 	.word	0x0801e648
 8007f3c:	0801e608 	.word	0x0801e608

08007f40 <_cleanup_r>:
 8007f40:	4901      	ldr	r1, [pc, #4]	; (8007f48 <_cleanup_r+0x8>)
 8007f42:	f000 b8a9 	b.w	8008098 <_fwalk_reent>
 8007f46:	bf00      	nop
 8007f48:	08007eed 	.word	0x08007eed

08007f4c <std.isra.0>:
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	b510      	push	{r4, lr}
 8007f50:	4604      	mov	r4, r0
 8007f52:	6003      	str	r3, [r0, #0]
 8007f54:	6043      	str	r3, [r0, #4]
 8007f56:	6083      	str	r3, [r0, #8]
 8007f58:	8181      	strh	r1, [r0, #12]
 8007f5a:	6643      	str	r3, [r0, #100]	; 0x64
 8007f5c:	81c2      	strh	r2, [r0, #14]
 8007f5e:	6103      	str	r3, [r0, #16]
 8007f60:	6143      	str	r3, [r0, #20]
 8007f62:	6183      	str	r3, [r0, #24]
 8007f64:	4619      	mov	r1, r3
 8007f66:	2208      	movs	r2, #8
 8007f68:	305c      	adds	r0, #92	; 0x5c
 8007f6a:	f7fe fad7 	bl	800651c <memset>
 8007f6e:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <std.isra.0+0x38>)
 8007f70:	6263      	str	r3, [r4, #36]	; 0x24
 8007f72:	4b05      	ldr	r3, [pc, #20]	; (8007f88 <std.isra.0+0x3c>)
 8007f74:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f76:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <std.isra.0+0x40>)
 8007f78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <std.isra.0+0x44>)
 8007f7c:	6224      	str	r4, [r4, #32]
 8007f7e:	6323      	str	r3, [r4, #48]	; 0x30
 8007f80:	bd10      	pop	{r4, pc}
 8007f82:	bf00      	nop
 8007f84:	08008e35 	.word	0x08008e35
 8007f88:	08008e57 	.word	0x08008e57
 8007f8c:	08008e8f 	.word	0x08008e8f
 8007f90:	08008eb3 	.word	0x08008eb3

08007f94 <__sfmoreglue>:
 8007f94:	b570      	push	{r4, r5, r6, lr}
 8007f96:	1e4a      	subs	r2, r1, #1
 8007f98:	2568      	movs	r5, #104	; 0x68
 8007f9a:	4355      	muls	r5, r2
 8007f9c:	460e      	mov	r6, r1
 8007f9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fa2:	f000 fc49 	bl	8008838 <_malloc_r>
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	b140      	cbz	r0, 8007fbc <__sfmoreglue+0x28>
 8007faa:	2100      	movs	r1, #0
 8007fac:	e880 0042 	stmia.w	r0, {r1, r6}
 8007fb0:	300c      	adds	r0, #12
 8007fb2:	60a0      	str	r0, [r4, #8]
 8007fb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fb8:	f7fe fab0 	bl	800651c <memset>
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}

08007fc0 <__sinit>:
 8007fc0:	6983      	ldr	r3, [r0, #24]
 8007fc2:	b510      	push	{r4, lr}
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	bb33      	cbnz	r3, 8008016 <__sinit+0x56>
 8007fc8:	6483      	str	r3, [r0, #72]	; 0x48
 8007fca:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007fcc:	6503      	str	r3, [r0, #80]	; 0x50
 8007fce:	4b12      	ldr	r3, [pc, #72]	; (8008018 <__sinit+0x58>)
 8007fd0:	4a12      	ldr	r2, [pc, #72]	; (800801c <__sinit+0x5c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6282      	str	r2, [r0, #40]	; 0x28
 8007fd6:	4298      	cmp	r0, r3
 8007fd8:	bf04      	itt	eq
 8007fda:	2301      	moveq	r3, #1
 8007fdc:	6183      	streq	r3, [r0, #24]
 8007fde:	f000 f81f 	bl	8008020 <__sfp>
 8007fe2:	6060      	str	r0, [r4, #4]
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f000 f81b 	bl	8008020 <__sfp>
 8007fea:	60a0      	str	r0, [r4, #8]
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 f817 	bl	8008020 <__sfp>
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	60e0      	str	r0, [r4, #12]
 8007ff6:	2104      	movs	r1, #4
 8007ff8:	6860      	ldr	r0, [r4, #4]
 8007ffa:	f7ff ffa7 	bl	8007f4c <std.isra.0>
 8007ffe:	2201      	movs	r2, #1
 8008000:	2109      	movs	r1, #9
 8008002:	68a0      	ldr	r0, [r4, #8]
 8008004:	f7ff ffa2 	bl	8007f4c <std.isra.0>
 8008008:	2202      	movs	r2, #2
 800800a:	2112      	movs	r1, #18
 800800c:	68e0      	ldr	r0, [r4, #12]
 800800e:	f7ff ff9d 	bl	8007f4c <std.isra.0>
 8008012:	2301      	movs	r3, #1
 8008014:	61a3      	str	r3, [r4, #24]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	0801e668 	.word	0x0801e668
 800801c:	08007f41 	.word	0x08007f41

08008020 <__sfp>:
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	4b1c      	ldr	r3, [pc, #112]	; (8008094 <__sfp+0x74>)
 8008024:	681e      	ldr	r6, [r3, #0]
 8008026:	69b3      	ldr	r3, [r6, #24]
 8008028:	4607      	mov	r7, r0
 800802a:	b913      	cbnz	r3, 8008032 <__sfp+0x12>
 800802c:	4630      	mov	r0, r6
 800802e:	f7ff ffc7 	bl	8007fc0 <__sinit>
 8008032:	3648      	adds	r6, #72	; 0x48
 8008034:	68b4      	ldr	r4, [r6, #8]
 8008036:	6873      	ldr	r3, [r6, #4]
 8008038:	3b01      	subs	r3, #1
 800803a:	d503      	bpl.n	8008044 <__sfp+0x24>
 800803c:	6833      	ldr	r3, [r6, #0]
 800803e:	b133      	cbz	r3, 800804e <__sfp+0x2e>
 8008040:	6836      	ldr	r6, [r6, #0]
 8008042:	e7f7      	b.n	8008034 <__sfp+0x14>
 8008044:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008048:	b16d      	cbz	r5, 8008066 <__sfp+0x46>
 800804a:	3468      	adds	r4, #104	; 0x68
 800804c:	e7f4      	b.n	8008038 <__sfp+0x18>
 800804e:	2104      	movs	r1, #4
 8008050:	4638      	mov	r0, r7
 8008052:	f7ff ff9f 	bl	8007f94 <__sfmoreglue>
 8008056:	6030      	str	r0, [r6, #0]
 8008058:	2800      	cmp	r0, #0
 800805a:	d1f1      	bne.n	8008040 <__sfp+0x20>
 800805c:	230c      	movs	r3, #12
 800805e:	603b      	str	r3, [r7, #0]
 8008060:	4604      	mov	r4, r0
 8008062:	4620      	mov	r0, r4
 8008064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800806a:	81e3      	strh	r3, [r4, #14]
 800806c:	2301      	movs	r3, #1
 800806e:	81a3      	strh	r3, [r4, #12]
 8008070:	6665      	str	r5, [r4, #100]	; 0x64
 8008072:	6025      	str	r5, [r4, #0]
 8008074:	60a5      	str	r5, [r4, #8]
 8008076:	6065      	str	r5, [r4, #4]
 8008078:	6125      	str	r5, [r4, #16]
 800807a:	6165      	str	r5, [r4, #20]
 800807c:	61a5      	str	r5, [r4, #24]
 800807e:	2208      	movs	r2, #8
 8008080:	4629      	mov	r1, r5
 8008082:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008086:	f7fe fa49 	bl	800651c <memset>
 800808a:	6365      	str	r5, [r4, #52]	; 0x34
 800808c:	63a5      	str	r5, [r4, #56]	; 0x38
 800808e:	64a5      	str	r5, [r4, #72]	; 0x48
 8008090:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008092:	e7e6      	b.n	8008062 <__sfp+0x42>
 8008094:	0801e668 	.word	0x0801e668

08008098 <_fwalk_reent>:
 8008098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800809c:	4680      	mov	r8, r0
 800809e:	4689      	mov	r9, r1
 80080a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080a4:	2600      	movs	r6, #0
 80080a6:	b914      	cbnz	r4, 80080ae <_fwalk_reent+0x16>
 80080a8:	4630      	mov	r0, r6
 80080aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ae:	68a5      	ldr	r5, [r4, #8]
 80080b0:	6867      	ldr	r7, [r4, #4]
 80080b2:	3f01      	subs	r7, #1
 80080b4:	d501      	bpl.n	80080ba <_fwalk_reent+0x22>
 80080b6:	6824      	ldr	r4, [r4, #0]
 80080b8:	e7f5      	b.n	80080a6 <_fwalk_reent+0xe>
 80080ba:	89ab      	ldrh	r3, [r5, #12]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d907      	bls.n	80080d0 <_fwalk_reent+0x38>
 80080c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080c4:	3301      	adds	r3, #1
 80080c6:	d003      	beq.n	80080d0 <_fwalk_reent+0x38>
 80080c8:	4629      	mov	r1, r5
 80080ca:	4640      	mov	r0, r8
 80080cc:	47c8      	blx	r9
 80080ce:	4306      	orrs	r6, r0
 80080d0:	3568      	adds	r5, #104	; 0x68
 80080d2:	e7ee      	b.n	80080b2 <_fwalk_reent+0x1a>

080080d4 <_localeconv_r>:
 80080d4:	4b04      	ldr	r3, [pc, #16]	; (80080e8 <_localeconv_r+0x14>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6a18      	ldr	r0, [r3, #32]
 80080da:	4b04      	ldr	r3, [pc, #16]	; (80080ec <_localeconv_r+0x18>)
 80080dc:	2800      	cmp	r0, #0
 80080de:	bf08      	it	eq
 80080e0:	4618      	moveq	r0, r3
 80080e2:	30f0      	adds	r0, #240	; 0xf0
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	20000010 	.word	0x20000010
 80080ec:	20000074 	.word	0x20000074

080080f0 <__swhatbuf_r>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	460e      	mov	r6, r1
 80080f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f8:	2900      	cmp	r1, #0
 80080fa:	b090      	sub	sp, #64	; 0x40
 80080fc:	4614      	mov	r4, r2
 80080fe:	461d      	mov	r5, r3
 8008100:	da07      	bge.n	8008112 <__swhatbuf_r+0x22>
 8008102:	2300      	movs	r3, #0
 8008104:	602b      	str	r3, [r5, #0]
 8008106:	89b3      	ldrh	r3, [r6, #12]
 8008108:	061a      	lsls	r2, r3, #24
 800810a:	d410      	bmi.n	800812e <__swhatbuf_r+0x3e>
 800810c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008110:	e00e      	b.n	8008130 <__swhatbuf_r+0x40>
 8008112:	aa01      	add	r2, sp, #4
 8008114:	f000 fef4 	bl	8008f00 <_fstat_r>
 8008118:	2800      	cmp	r0, #0
 800811a:	dbf2      	blt.n	8008102 <__swhatbuf_r+0x12>
 800811c:	9a02      	ldr	r2, [sp, #8]
 800811e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008122:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008126:	425a      	negs	r2, r3
 8008128:	415a      	adcs	r2, r3
 800812a:	602a      	str	r2, [r5, #0]
 800812c:	e7ee      	b.n	800810c <__swhatbuf_r+0x1c>
 800812e:	2340      	movs	r3, #64	; 0x40
 8008130:	2000      	movs	r0, #0
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	b010      	add	sp, #64	; 0x40
 8008136:	bd70      	pop	{r4, r5, r6, pc}

08008138 <__smakebuf_r>:
 8008138:	898b      	ldrh	r3, [r1, #12]
 800813a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800813c:	079d      	lsls	r5, r3, #30
 800813e:	4606      	mov	r6, r0
 8008140:	460c      	mov	r4, r1
 8008142:	d507      	bpl.n	8008154 <__smakebuf_r+0x1c>
 8008144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	6123      	str	r3, [r4, #16]
 800814c:	2301      	movs	r3, #1
 800814e:	6163      	str	r3, [r4, #20]
 8008150:	b002      	add	sp, #8
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	ab01      	add	r3, sp, #4
 8008156:	466a      	mov	r2, sp
 8008158:	f7ff ffca 	bl	80080f0 <__swhatbuf_r>
 800815c:	9900      	ldr	r1, [sp, #0]
 800815e:	4605      	mov	r5, r0
 8008160:	4630      	mov	r0, r6
 8008162:	f000 fb69 	bl	8008838 <_malloc_r>
 8008166:	b948      	cbnz	r0, 800817c <__smakebuf_r+0x44>
 8008168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800816c:	059a      	lsls	r2, r3, #22
 800816e:	d4ef      	bmi.n	8008150 <__smakebuf_r+0x18>
 8008170:	f023 0303 	bic.w	r3, r3, #3
 8008174:	f043 0302 	orr.w	r3, r3, #2
 8008178:	81a3      	strh	r3, [r4, #12]
 800817a:	e7e3      	b.n	8008144 <__smakebuf_r+0xc>
 800817c:	4b0d      	ldr	r3, [pc, #52]	; (80081b4 <__smakebuf_r+0x7c>)
 800817e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	6020      	str	r0, [r4, #0]
 8008184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008188:	81a3      	strh	r3, [r4, #12]
 800818a:	9b00      	ldr	r3, [sp, #0]
 800818c:	6163      	str	r3, [r4, #20]
 800818e:	9b01      	ldr	r3, [sp, #4]
 8008190:	6120      	str	r0, [r4, #16]
 8008192:	b15b      	cbz	r3, 80081ac <__smakebuf_r+0x74>
 8008194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008198:	4630      	mov	r0, r6
 800819a:	f000 fec3 	bl	8008f24 <_isatty_r>
 800819e:	b128      	cbz	r0, 80081ac <__smakebuf_r+0x74>
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	f023 0303 	bic.w	r3, r3, #3
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	81a3      	strh	r3, [r4, #12]
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	431d      	orrs	r5, r3
 80081b0:	81a5      	strh	r5, [r4, #12]
 80081b2:	e7cd      	b.n	8008150 <__smakebuf_r+0x18>
 80081b4:	08007f41 	.word	0x08007f41

080081b8 <malloc>:
 80081b8:	4b02      	ldr	r3, [pc, #8]	; (80081c4 <malloc+0xc>)
 80081ba:	4601      	mov	r1, r0
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	f000 bb3b 	b.w	8008838 <_malloc_r>
 80081c2:	bf00      	nop
 80081c4:	20000010 	.word	0x20000010

080081c8 <memcpy>:
 80081c8:	b510      	push	{r4, lr}
 80081ca:	1e43      	subs	r3, r0, #1
 80081cc:	440a      	add	r2, r1
 80081ce:	4291      	cmp	r1, r2
 80081d0:	d100      	bne.n	80081d4 <memcpy+0xc>
 80081d2:	bd10      	pop	{r4, pc}
 80081d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081dc:	e7f7      	b.n	80081ce <memcpy+0x6>

080081de <_Balloc>:
 80081de:	b570      	push	{r4, r5, r6, lr}
 80081e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081e2:	4604      	mov	r4, r0
 80081e4:	460e      	mov	r6, r1
 80081e6:	b93d      	cbnz	r5, 80081f8 <_Balloc+0x1a>
 80081e8:	2010      	movs	r0, #16
 80081ea:	f7ff ffe5 	bl	80081b8 <malloc>
 80081ee:	6260      	str	r0, [r4, #36]	; 0x24
 80081f0:	6045      	str	r5, [r0, #4]
 80081f2:	6085      	str	r5, [r0, #8]
 80081f4:	6005      	str	r5, [r0, #0]
 80081f6:	60c5      	str	r5, [r0, #12]
 80081f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80081fa:	68eb      	ldr	r3, [r5, #12]
 80081fc:	b183      	cbz	r3, 8008220 <_Balloc+0x42>
 80081fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008206:	b9b8      	cbnz	r0, 8008238 <_Balloc+0x5a>
 8008208:	2101      	movs	r1, #1
 800820a:	fa01 f506 	lsl.w	r5, r1, r6
 800820e:	1d6a      	adds	r2, r5, #5
 8008210:	0092      	lsls	r2, r2, #2
 8008212:	4620      	mov	r0, r4
 8008214:	f000 fab4 	bl	8008780 <_calloc_r>
 8008218:	b160      	cbz	r0, 8008234 <_Balloc+0x56>
 800821a:	6046      	str	r6, [r0, #4]
 800821c:	6085      	str	r5, [r0, #8]
 800821e:	e00e      	b.n	800823e <_Balloc+0x60>
 8008220:	2221      	movs	r2, #33	; 0x21
 8008222:	2104      	movs	r1, #4
 8008224:	4620      	mov	r0, r4
 8008226:	f000 faab 	bl	8008780 <_calloc_r>
 800822a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800822c:	60e8      	str	r0, [r5, #12]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1e4      	bne.n	80081fe <_Balloc+0x20>
 8008234:	2000      	movs	r0, #0
 8008236:	bd70      	pop	{r4, r5, r6, pc}
 8008238:	6802      	ldr	r2, [r0, #0]
 800823a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800823e:	2300      	movs	r3, #0
 8008240:	6103      	str	r3, [r0, #16]
 8008242:	60c3      	str	r3, [r0, #12]
 8008244:	bd70      	pop	{r4, r5, r6, pc}

08008246 <_Bfree>:
 8008246:	b570      	push	{r4, r5, r6, lr}
 8008248:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800824a:	4606      	mov	r6, r0
 800824c:	460d      	mov	r5, r1
 800824e:	b93c      	cbnz	r4, 8008260 <_Bfree+0x1a>
 8008250:	2010      	movs	r0, #16
 8008252:	f7ff ffb1 	bl	80081b8 <malloc>
 8008256:	6270      	str	r0, [r6, #36]	; 0x24
 8008258:	6044      	str	r4, [r0, #4]
 800825a:	6084      	str	r4, [r0, #8]
 800825c:	6004      	str	r4, [r0, #0]
 800825e:	60c4      	str	r4, [r0, #12]
 8008260:	b13d      	cbz	r5, 8008272 <_Bfree+0x2c>
 8008262:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008264:	686a      	ldr	r2, [r5, #4]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800826c:	6029      	str	r1, [r5, #0]
 800826e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008272:	bd70      	pop	{r4, r5, r6, pc}

08008274 <__multadd>:
 8008274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008278:	690d      	ldr	r5, [r1, #16]
 800827a:	461f      	mov	r7, r3
 800827c:	4606      	mov	r6, r0
 800827e:	460c      	mov	r4, r1
 8008280:	f101 0e14 	add.w	lr, r1, #20
 8008284:	2300      	movs	r3, #0
 8008286:	f8de 0000 	ldr.w	r0, [lr]
 800828a:	b281      	uxth	r1, r0
 800828c:	fb02 7101 	mla	r1, r2, r1, r7
 8008290:	0c0f      	lsrs	r7, r1, #16
 8008292:	0c00      	lsrs	r0, r0, #16
 8008294:	fb02 7000 	mla	r0, r2, r0, r7
 8008298:	b289      	uxth	r1, r1
 800829a:	3301      	adds	r3, #1
 800829c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80082a0:	429d      	cmp	r5, r3
 80082a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80082a6:	f84e 1b04 	str.w	r1, [lr], #4
 80082aa:	dcec      	bgt.n	8008286 <__multadd+0x12>
 80082ac:	b1d7      	cbz	r7, 80082e4 <__multadd+0x70>
 80082ae:	68a3      	ldr	r3, [r4, #8]
 80082b0:	429d      	cmp	r5, r3
 80082b2:	db12      	blt.n	80082da <__multadd+0x66>
 80082b4:	6861      	ldr	r1, [r4, #4]
 80082b6:	4630      	mov	r0, r6
 80082b8:	3101      	adds	r1, #1
 80082ba:	f7ff ff90 	bl	80081de <_Balloc>
 80082be:	6922      	ldr	r2, [r4, #16]
 80082c0:	3202      	adds	r2, #2
 80082c2:	f104 010c 	add.w	r1, r4, #12
 80082c6:	4680      	mov	r8, r0
 80082c8:	0092      	lsls	r2, r2, #2
 80082ca:	300c      	adds	r0, #12
 80082cc:	f7ff ff7c 	bl	80081c8 <memcpy>
 80082d0:	4621      	mov	r1, r4
 80082d2:	4630      	mov	r0, r6
 80082d4:	f7ff ffb7 	bl	8008246 <_Bfree>
 80082d8:	4644      	mov	r4, r8
 80082da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082de:	3501      	adds	r5, #1
 80082e0:	615f      	str	r7, [r3, #20]
 80082e2:	6125      	str	r5, [r4, #16]
 80082e4:	4620      	mov	r0, r4
 80082e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080082ea <__hi0bits>:
 80082ea:	0c02      	lsrs	r2, r0, #16
 80082ec:	0412      	lsls	r2, r2, #16
 80082ee:	4603      	mov	r3, r0
 80082f0:	b9b2      	cbnz	r2, 8008320 <__hi0bits+0x36>
 80082f2:	0403      	lsls	r3, r0, #16
 80082f4:	2010      	movs	r0, #16
 80082f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80082fa:	bf04      	itt	eq
 80082fc:	021b      	lsleq	r3, r3, #8
 80082fe:	3008      	addeq	r0, #8
 8008300:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008304:	bf04      	itt	eq
 8008306:	011b      	lsleq	r3, r3, #4
 8008308:	3004      	addeq	r0, #4
 800830a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800830e:	bf04      	itt	eq
 8008310:	009b      	lsleq	r3, r3, #2
 8008312:	3002      	addeq	r0, #2
 8008314:	2b00      	cmp	r3, #0
 8008316:	db06      	blt.n	8008326 <__hi0bits+0x3c>
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	d503      	bpl.n	8008324 <__hi0bits+0x3a>
 800831c:	3001      	adds	r0, #1
 800831e:	4770      	bx	lr
 8008320:	2000      	movs	r0, #0
 8008322:	e7e8      	b.n	80082f6 <__hi0bits+0xc>
 8008324:	2020      	movs	r0, #32
 8008326:	4770      	bx	lr

08008328 <__lo0bits>:
 8008328:	6803      	ldr	r3, [r0, #0]
 800832a:	f013 0207 	ands.w	r2, r3, #7
 800832e:	4601      	mov	r1, r0
 8008330:	d00b      	beq.n	800834a <__lo0bits+0x22>
 8008332:	07da      	lsls	r2, r3, #31
 8008334:	d423      	bmi.n	800837e <__lo0bits+0x56>
 8008336:	0798      	lsls	r0, r3, #30
 8008338:	bf49      	itett	mi
 800833a:	085b      	lsrmi	r3, r3, #1
 800833c:	089b      	lsrpl	r3, r3, #2
 800833e:	2001      	movmi	r0, #1
 8008340:	600b      	strmi	r3, [r1, #0]
 8008342:	bf5c      	itt	pl
 8008344:	600b      	strpl	r3, [r1, #0]
 8008346:	2002      	movpl	r0, #2
 8008348:	4770      	bx	lr
 800834a:	b298      	uxth	r0, r3
 800834c:	b9a8      	cbnz	r0, 800837a <__lo0bits+0x52>
 800834e:	0c1b      	lsrs	r3, r3, #16
 8008350:	2010      	movs	r0, #16
 8008352:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008356:	bf04      	itt	eq
 8008358:	0a1b      	lsreq	r3, r3, #8
 800835a:	3008      	addeq	r0, #8
 800835c:	071a      	lsls	r2, r3, #28
 800835e:	bf04      	itt	eq
 8008360:	091b      	lsreq	r3, r3, #4
 8008362:	3004      	addeq	r0, #4
 8008364:	079a      	lsls	r2, r3, #30
 8008366:	bf04      	itt	eq
 8008368:	089b      	lsreq	r3, r3, #2
 800836a:	3002      	addeq	r0, #2
 800836c:	07da      	lsls	r2, r3, #31
 800836e:	d402      	bmi.n	8008376 <__lo0bits+0x4e>
 8008370:	085b      	lsrs	r3, r3, #1
 8008372:	d006      	beq.n	8008382 <__lo0bits+0x5a>
 8008374:	3001      	adds	r0, #1
 8008376:	600b      	str	r3, [r1, #0]
 8008378:	4770      	bx	lr
 800837a:	4610      	mov	r0, r2
 800837c:	e7e9      	b.n	8008352 <__lo0bits+0x2a>
 800837e:	2000      	movs	r0, #0
 8008380:	4770      	bx	lr
 8008382:	2020      	movs	r0, #32
 8008384:	4770      	bx	lr

08008386 <__i2b>:
 8008386:	b510      	push	{r4, lr}
 8008388:	460c      	mov	r4, r1
 800838a:	2101      	movs	r1, #1
 800838c:	f7ff ff27 	bl	80081de <_Balloc>
 8008390:	2201      	movs	r2, #1
 8008392:	6144      	str	r4, [r0, #20]
 8008394:	6102      	str	r2, [r0, #16]
 8008396:	bd10      	pop	{r4, pc}

08008398 <__multiply>:
 8008398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	4614      	mov	r4, r2
 800839e:	690a      	ldr	r2, [r1, #16]
 80083a0:	6923      	ldr	r3, [r4, #16]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	bfb8      	it	lt
 80083a6:	460b      	movlt	r3, r1
 80083a8:	4689      	mov	r9, r1
 80083aa:	bfbc      	itt	lt
 80083ac:	46a1      	movlt	r9, r4
 80083ae:	461c      	movlt	r4, r3
 80083b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80083b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80083b8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80083bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80083c0:	eb07 060a 	add.w	r6, r7, sl
 80083c4:	429e      	cmp	r6, r3
 80083c6:	bfc8      	it	gt
 80083c8:	3101      	addgt	r1, #1
 80083ca:	f7ff ff08 	bl	80081de <_Balloc>
 80083ce:	f100 0514 	add.w	r5, r0, #20
 80083d2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083d6:	462b      	mov	r3, r5
 80083d8:	2200      	movs	r2, #0
 80083da:	4543      	cmp	r3, r8
 80083dc:	d316      	bcc.n	800840c <__multiply+0x74>
 80083de:	f104 0214 	add.w	r2, r4, #20
 80083e2:	f109 0114 	add.w	r1, r9, #20
 80083e6:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80083ea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80083ee:	9301      	str	r3, [sp, #4]
 80083f0:	9c01      	ldr	r4, [sp, #4]
 80083f2:	4294      	cmp	r4, r2
 80083f4:	4613      	mov	r3, r2
 80083f6:	d80c      	bhi.n	8008412 <__multiply+0x7a>
 80083f8:	2e00      	cmp	r6, #0
 80083fa:	dd03      	ble.n	8008404 <__multiply+0x6c>
 80083fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008400:	2b00      	cmp	r3, #0
 8008402:	d054      	beq.n	80084ae <__multiply+0x116>
 8008404:	6106      	str	r6, [r0, #16]
 8008406:	b003      	add	sp, #12
 8008408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840c:	f843 2b04 	str.w	r2, [r3], #4
 8008410:	e7e3      	b.n	80083da <__multiply+0x42>
 8008412:	f8b3 a000 	ldrh.w	sl, [r3]
 8008416:	3204      	adds	r2, #4
 8008418:	f1ba 0f00 	cmp.w	sl, #0
 800841c:	d020      	beq.n	8008460 <__multiply+0xc8>
 800841e:	46ae      	mov	lr, r5
 8008420:	4689      	mov	r9, r1
 8008422:	f04f 0c00 	mov.w	ip, #0
 8008426:	f859 4b04 	ldr.w	r4, [r9], #4
 800842a:	f8be b000 	ldrh.w	fp, [lr]
 800842e:	b2a3      	uxth	r3, r4
 8008430:	fb0a b303 	mla	r3, sl, r3, fp
 8008434:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8008438:	f8de 4000 	ldr.w	r4, [lr]
 800843c:	4463      	add	r3, ip
 800843e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008442:	fb0a c40b 	mla	r4, sl, fp, ip
 8008446:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800844a:	b29b      	uxth	r3, r3
 800844c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008450:	454f      	cmp	r7, r9
 8008452:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008456:	f84e 3b04 	str.w	r3, [lr], #4
 800845a:	d8e4      	bhi.n	8008426 <__multiply+0x8e>
 800845c:	f8ce c000 	str.w	ip, [lr]
 8008460:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8008464:	f1b9 0f00 	cmp.w	r9, #0
 8008468:	d01f      	beq.n	80084aa <__multiply+0x112>
 800846a:	682b      	ldr	r3, [r5, #0]
 800846c:	46ae      	mov	lr, r5
 800846e:	468c      	mov	ip, r1
 8008470:	f04f 0a00 	mov.w	sl, #0
 8008474:	f8bc 4000 	ldrh.w	r4, [ip]
 8008478:	f8be b002 	ldrh.w	fp, [lr, #2]
 800847c:	fb09 b404 	mla	r4, r9, r4, fp
 8008480:	44a2      	add	sl, r4
 8008482:	b29b      	uxth	r3, r3
 8008484:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8008488:	f84e 3b04 	str.w	r3, [lr], #4
 800848c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008490:	f8be 4000 	ldrh.w	r4, [lr]
 8008494:	0c1b      	lsrs	r3, r3, #16
 8008496:	fb09 4303 	mla	r3, r9, r3, r4
 800849a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800849e:	4567      	cmp	r7, ip
 80084a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084a4:	d8e6      	bhi.n	8008474 <__multiply+0xdc>
 80084a6:	f8ce 3000 	str.w	r3, [lr]
 80084aa:	3504      	adds	r5, #4
 80084ac:	e7a0      	b.n	80083f0 <__multiply+0x58>
 80084ae:	3e01      	subs	r6, #1
 80084b0:	e7a2      	b.n	80083f8 <__multiply+0x60>
	...

080084b4 <__pow5mult>:
 80084b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084b8:	4615      	mov	r5, r2
 80084ba:	f012 0203 	ands.w	r2, r2, #3
 80084be:	4606      	mov	r6, r0
 80084c0:	460f      	mov	r7, r1
 80084c2:	d007      	beq.n	80084d4 <__pow5mult+0x20>
 80084c4:	3a01      	subs	r2, #1
 80084c6:	4c21      	ldr	r4, [pc, #132]	; (800854c <__pow5mult+0x98>)
 80084c8:	2300      	movs	r3, #0
 80084ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084ce:	f7ff fed1 	bl	8008274 <__multadd>
 80084d2:	4607      	mov	r7, r0
 80084d4:	10ad      	asrs	r5, r5, #2
 80084d6:	d035      	beq.n	8008544 <__pow5mult+0x90>
 80084d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084da:	b93c      	cbnz	r4, 80084ec <__pow5mult+0x38>
 80084dc:	2010      	movs	r0, #16
 80084de:	f7ff fe6b 	bl	80081b8 <malloc>
 80084e2:	6270      	str	r0, [r6, #36]	; 0x24
 80084e4:	6044      	str	r4, [r0, #4]
 80084e6:	6084      	str	r4, [r0, #8]
 80084e8:	6004      	str	r4, [r0, #0]
 80084ea:	60c4      	str	r4, [r0, #12]
 80084ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084f4:	b94c      	cbnz	r4, 800850a <__pow5mult+0x56>
 80084f6:	f240 2171 	movw	r1, #625	; 0x271
 80084fa:	4630      	mov	r0, r6
 80084fc:	f7ff ff43 	bl	8008386 <__i2b>
 8008500:	2300      	movs	r3, #0
 8008502:	f8c8 0008 	str.w	r0, [r8, #8]
 8008506:	4604      	mov	r4, r0
 8008508:	6003      	str	r3, [r0, #0]
 800850a:	f04f 0800 	mov.w	r8, #0
 800850e:	07eb      	lsls	r3, r5, #31
 8008510:	d50a      	bpl.n	8008528 <__pow5mult+0x74>
 8008512:	4639      	mov	r1, r7
 8008514:	4622      	mov	r2, r4
 8008516:	4630      	mov	r0, r6
 8008518:	f7ff ff3e 	bl	8008398 <__multiply>
 800851c:	4639      	mov	r1, r7
 800851e:	4681      	mov	r9, r0
 8008520:	4630      	mov	r0, r6
 8008522:	f7ff fe90 	bl	8008246 <_Bfree>
 8008526:	464f      	mov	r7, r9
 8008528:	106d      	asrs	r5, r5, #1
 800852a:	d00b      	beq.n	8008544 <__pow5mult+0x90>
 800852c:	6820      	ldr	r0, [r4, #0]
 800852e:	b938      	cbnz	r0, 8008540 <__pow5mult+0x8c>
 8008530:	4622      	mov	r2, r4
 8008532:	4621      	mov	r1, r4
 8008534:	4630      	mov	r0, r6
 8008536:	f7ff ff2f 	bl	8008398 <__multiply>
 800853a:	6020      	str	r0, [r4, #0]
 800853c:	f8c0 8000 	str.w	r8, [r0]
 8008540:	4604      	mov	r4, r0
 8008542:	e7e4      	b.n	800850e <__pow5mult+0x5a>
 8008544:	4638      	mov	r0, r7
 8008546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800854a:	bf00      	nop
 800854c:	0801e760 	.word	0x0801e760

08008550 <__lshift>:
 8008550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008554:	460c      	mov	r4, r1
 8008556:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800855a:	6923      	ldr	r3, [r4, #16]
 800855c:	6849      	ldr	r1, [r1, #4]
 800855e:	eb0a 0903 	add.w	r9, sl, r3
 8008562:	68a3      	ldr	r3, [r4, #8]
 8008564:	4607      	mov	r7, r0
 8008566:	4616      	mov	r6, r2
 8008568:	f109 0501 	add.w	r5, r9, #1
 800856c:	42ab      	cmp	r3, r5
 800856e:	db31      	blt.n	80085d4 <__lshift+0x84>
 8008570:	4638      	mov	r0, r7
 8008572:	f7ff fe34 	bl	80081de <_Balloc>
 8008576:	2200      	movs	r2, #0
 8008578:	4680      	mov	r8, r0
 800857a:	f100 0314 	add.w	r3, r0, #20
 800857e:	4611      	mov	r1, r2
 8008580:	4552      	cmp	r2, sl
 8008582:	db2a      	blt.n	80085da <__lshift+0x8a>
 8008584:	6920      	ldr	r0, [r4, #16]
 8008586:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800858a:	f104 0114 	add.w	r1, r4, #20
 800858e:	f016 021f 	ands.w	r2, r6, #31
 8008592:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008596:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800859a:	d022      	beq.n	80085e2 <__lshift+0x92>
 800859c:	f1c2 0c20 	rsb	ip, r2, #32
 80085a0:	2000      	movs	r0, #0
 80085a2:	680e      	ldr	r6, [r1, #0]
 80085a4:	4096      	lsls	r6, r2
 80085a6:	4330      	orrs	r0, r6
 80085a8:	f843 0b04 	str.w	r0, [r3], #4
 80085ac:	f851 0b04 	ldr.w	r0, [r1], #4
 80085b0:	458e      	cmp	lr, r1
 80085b2:	fa20 f00c 	lsr.w	r0, r0, ip
 80085b6:	d8f4      	bhi.n	80085a2 <__lshift+0x52>
 80085b8:	6018      	str	r0, [r3, #0]
 80085ba:	b108      	cbz	r0, 80085c0 <__lshift+0x70>
 80085bc:	f109 0502 	add.w	r5, r9, #2
 80085c0:	3d01      	subs	r5, #1
 80085c2:	4638      	mov	r0, r7
 80085c4:	f8c8 5010 	str.w	r5, [r8, #16]
 80085c8:	4621      	mov	r1, r4
 80085ca:	f7ff fe3c 	bl	8008246 <_Bfree>
 80085ce:	4640      	mov	r0, r8
 80085d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d4:	3101      	adds	r1, #1
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	e7c8      	b.n	800856c <__lshift+0x1c>
 80085da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80085de:	3201      	adds	r2, #1
 80085e0:	e7ce      	b.n	8008580 <__lshift+0x30>
 80085e2:	3b04      	subs	r3, #4
 80085e4:	f851 2b04 	ldr.w	r2, [r1], #4
 80085e8:	f843 2f04 	str.w	r2, [r3, #4]!
 80085ec:	458e      	cmp	lr, r1
 80085ee:	d8f9      	bhi.n	80085e4 <__lshift+0x94>
 80085f0:	e7e6      	b.n	80085c0 <__lshift+0x70>

080085f2 <__mcmp>:
 80085f2:	6903      	ldr	r3, [r0, #16]
 80085f4:	690a      	ldr	r2, [r1, #16]
 80085f6:	1a9b      	subs	r3, r3, r2
 80085f8:	b530      	push	{r4, r5, lr}
 80085fa:	d10c      	bne.n	8008616 <__mcmp+0x24>
 80085fc:	0092      	lsls	r2, r2, #2
 80085fe:	3014      	adds	r0, #20
 8008600:	3114      	adds	r1, #20
 8008602:	1884      	adds	r4, r0, r2
 8008604:	4411      	add	r1, r2
 8008606:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800860a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800860e:	4295      	cmp	r5, r2
 8008610:	d003      	beq.n	800861a <__mcmp+0x28>
 8008612:	d305      	bcc.n	8008620 <__mcmp+0x2e>
 8008614:	2301      	movs	r3, #1
 8008616:	4618      	mov	r0, r3
 8008618:	bd30      	pop	{r4, r5, pc}
 800861a:	42a0      	cmp	r0, r4
 800861c:	d3f3      	bcc.n	8008606 <__mcmp+0x14>
 800861e:	e7fa      	b.n	8008616 <__mcmp+0x24>
 8008620:	f04f 33ff 	mov.w	r3, #4294967295
 8008624:	e7f7      	b.n	8008616 <__mcmp+0x24>

08008626 <__mdiff>:
 8008626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800862a:	460d      	mov	r5, r1
 800862c:	4607      	mov	r7, r0
 800862e:	4611      	mov	r1, r2
 8008630:	4628      	mov	r0, r5
 8008632:	4614      	mov	r4, r2
 8008634:	f7ff ffdd 	bl	80085f2 <__mcmp>
 8008638:	1e06      	subs	r6, r0, #0
 800863a:	d108      	bne.n	800864e <__mdiff+0x28>
 800863c:	4631      	mov	r1, r6
 800863e:	4638      	mov	r0, r7
 8008640:	f7ff fdcd 	bl	80081de <_Balloc>
 8008644:	2301      	movs	r3, #1
 8008646:	6103      	str	r3, [r0, #16]
 8008648:	6146      	str	r6, [r0, #20]
 800864a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864e:	bfa4      	itt	ge
 8008650:	4623      	movge	r3, r4
 8008652:	462c      	movge	r4, r5
 8008654:	4638      	mov	r0, r7
 8008656:	6861      	ldr	r1, [r4, #4]
 8008658:	bfa6      	itte	ge
 800865a:	461d      	movge	r5, r3
 800865c:	2600      	movge	r6, #0
 800865e:	2601      	movlt	r6, #1
 8008660:	f7ff fdbd 	bl	80081de <_Balloc>
 8008664:	692b      	ldr	r3, [r5, #16]
 8008666:	60c6      	str	r6, [r0, #12]
 8008668:	6926      	ldr	r6, [r4, #16]
 800866a:	f105 0914 	add.w	r9, r5, #20
 800866e:	f104 0214 	add.w	r2, r4, #20
 8008672:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008676:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800867a:	f100 0514 	add.w	r5, r0, #20
 800867e:	f04f 0c00 	mov.w	ip, #0
 8008682:	f852 ab04 	ldr.w	sl, [r2], #4
 8008686:	f859 4b04 	ldr.w	r4, [r9], #4
 800868a:	fa1c f18a 	uxtah	r1, ip, sl
 800868e:	b2a3      	uxth	r3, r4
 8008690:	1ac9      	subs	r1, r1, r3
 8008692:	0c23      	lsrs	r3, r4, #16
 8008694:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008698:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800869c:	b289      	uxth	r1, r1
 800869e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80086a2:	45c8      	cmp	r8, r9
 80086a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80086a8:	4696      	mov	lr, r2
 80086aa:	f845 3b04 	str.w	r3, [r5], #4
 80086ae:	d8e8      	bhi.n	8008682 <__mdiff+0x5c>
 80086b0:	45be      	cmp	lr, r7
 80086b2:	d305      	bcc.n	80086c0 <__mdiff+0x9a>
 80086b4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80086b8:	b18b      	cbz	r3, 80086de <__mdiff+0xb8>
 80086ba:	6106      	str	r6, [r0, #16]
 80086bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c0:	f85e 1b04 	ldr.w	r1, [lr], #4
 80086c4:	fa1c f381 	uxtah	r3, ip, r1
 80086c8:	141a      	asrs	r2, r3, #16
 80086ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80086d8:	f845 3b04 	str.w	r3, [r5], #4
 80086dc:	e7e8      	b.n	80086b0 <__mdiff+0x8a>
 80086de:	3e01      	subs	r6, #1
 80086e0:	e7e8      	b.n	80086b4 <__mdiff+0x8e>

080086e2 <__d2b>:
 80086e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086e6:	460e      	mov	r6, r1
 80086e8:	2101      	movs	r1, #1
 80086ea:	ec59 8b10 	vmov	r8, r9, d0
 80086ee:	4615      	mov	r5, r2
 80086f0:	f7ff fd75 	bl	80081de <_Balloc>
 80086f4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80086f8:	4607      	mov	r7, r0
 80086fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086fe:	bb34      	cbnz	r4, 800874e <__d2b+0x6c>
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	f1b8 0f00 	cmp.w	r8, #0
 8008706:	d027      	beq.n	8008758 <__d2b+0x76>
 8008708:	a802      	add	r0, sp, #8
 800870a:	f840 8d08 	str.w	r8, [r0, #-8]!
 800870e:	f7ff fe0b 	bl	8008328 <__lo0bits>
 8008712:	9900      	ldr	r1, [sp, #0]
 8008714:	b1f0      	cbz	r0, 8008754 <__d2b+0x72>
 8008716:	9a01      	ldr	r2, [sp, #4]
 8008718:	f1c0 0320 	rsb	r3, r0, #32
 800871c:	fa02 f303 	lsl.w	r3, r2, r3
 8008720:	430b      	orrs	r3, r1
 8008722:	40c2      	lsrs	r2, r0
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	9201      	str	r2, [sp, #4]
 8008728:	9b01      	ldr	r3, [sp, #4]
 800872a:	61bb      	str	r3, [r7, #24]
 800872c:	2b00      	cmp	r3, #0
 800872e:	bf14      	ite	ne
 8008730:	2102      	movne	r1, #2
 8008732:	2101      	moveq	r1, #1
 8008734:	6139      	str	r1, [r7, #16]
 8008736:	b1c4      	cbz	r4, 800876a <__d2b+0x88>
 8008738:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800873c:	4404      	add	r4, r0
 800873e:	6034      	str	r4, [r6, #0]
 8008740:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008744:	6028      	str	r0, [r5, #0]
 8008746:	4638      	mov	r0, r7
 8008748:	b003      	add	sp, #12
 800874a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800874e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008752:	e7d5      	b.n	8008700 <__d2b+0x1e>
 8008754:	6179      	str	r1, [r7, #20]
 8008756:	e7e7      	b.n	8008728 <__d2b+0x46>
 8008758:	a801      	add	r0, sp, #4
 800875a:	f7ff fde5 	bl	8008328 <__lo0bits>
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	617b      	str	r3, [r7, #20]
 8008762:	2101      	movs	r1, #1
 8008764:	6139      	str	r1, [r7, #16]
 8008766:	3020      	adds	r0, #32
 8008768:	e7e5      	b.n	8008736 <__d2b+0x54>
 800876a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800876e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008772:	6030      	str	r0, [r6, #0]
 8008774:	6918      	ldr	r0, [r3, #16]
 8008776:	f7ff fdb8 	bl	80082ea <__hi0bits>
 800877a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800877e:	e7e1      	b.n	8008744 <__d2b+0x62>

08008780 <_calloc_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	fb02 f401 	mul.w	r4, r2, r1
 8008786:	4621      	mov	r1, r4
 8008788:	f000 f856 	bl	8008838 <_malloc_r>
 800878c:	4605      	mov	r5, r0
 800878e:	b118      	cbz	r0, 8008798 <_calloc_r+0x18>
 8008790:	4622      	mov	r2, r4
 8008792:	2100      	movs	r1, #0
 8008794:	f7fd fec2 	bl	800651c <memset>
 8008798:	4628      	mov	r0, r5
 800879a:	bd38      	pop	{r3, r4, r5, pc}

0800879c <_free_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4605      	mov	r5, r0
 80087a0:	2900      	cmp	r1, #0
 80087a2:	d045      	beq.n	8008830 <_free_r+0x94>
 80087a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087a8:	1f0c      	subs	r4, r1, #4
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	bfb8      	it	lt
 80087ae:	18e4      	addlt	r4, r4, r3
 80087b0:	f000 fc06 	bl	8008fc0 <__malloc_lock>
 80087b4:	4a1f      	ldr	r2, [pc, #124]	; (8008834 <_free_r+0x98>)
 80087b6:	6813      	ldr	r3, [r2, #0]
 80087b8:	4610      	mov	r0, r2
 80087ba:	b933      	cbnz	r3, 80087ca <_free_r+0x2e>
 80087bc:	6063      	str	r3, [r4, #4]
 80087be:	6014      	str	r4, [r2, #0]
 80087c0:	4628      	mov	r0, r5
 80087c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087c6:	f000 bbfc 	b.w	8008fc2 <__malloc_unlock>
 80087ca:	42a3      	cmp	r3, r4
 80087cc:	d90c      	bls.n	80087e8 <_free_r+0x4c>
 80087ce:	6821      	ldr	r1, [r4, #0]
 80087d0:	1862      	adds	r2, r4, r1
 80087d2:	4293      	cmp	r3, r2
 80087d4:	bf04      	itt	eq
 80087d6:	681a      	ldreq	r2, [r3, #0]
 80087d8:	685b      	ldreq	r3, [r3, #4]
 80087da:	6063      	str	r3, [r4, #4]
 80087dc:	bf04      	itt	eq
 80087de:	1852      	addeq	r2, r2, r1
 80087e0:	6022      	streq	r2, [r4, #0]
 80087e2:	6004      	str	r4, [r0, #0]
 80087e4:	e7ec      	b.n	80087c0 <_free_r+0x24>
 80087e6:	4613      	mov	r3, r2
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	b10a      	cbz	r2, 80087f0 <_free_r+0x54>
 80087ec:	42a2      	cmp	r2, r4
 80087ee:	d9fa      	bls.n	80087e6 <_free_r+0x4a>
 80087f0:	6819      	ldr	r1, [r3, #0]
 80087f2:	1858      	adds	r0, r3, r1
 80087f4:	42a0      	cmp	r0, r4
 80087f6:	d10b      	bne.n	8008810 <_free_r+0x74>
 80087f8:	6820      	ldr	r0, [r4, #0]
 80087fa:	4401      	add	r1, r0
 80087fc:	1858      	adds	r0, r3, r1
 80087fe:	4282      	cmp	r2, r0
 8008800:	6019      	str	r1, [r3, #0]
 8008802:	d1dd      	bne.n	80087c0 <_free_r+0x24>
 8008804:	6810      	ldr	r0, [r2, #0]
 8008806:	6852      	ldr	r2, [r2, #4]
 8008808:	605a      	str	r2, [r3, #4]
 800880a:	4401      	add	r1, r0
 800880c:	6019      	str	r1, [r3, #0]
 800880e:	e7d7      	b.n	80087c0 <_free_r+0x24>
 8008810:	d902      	bls.n	8008818 <_free_r+0x7c>
 8008812:	230c      	movs	r3, #12
 8008814:	602b      	str	r3, [r5, #0]
 8008816:	e7d3      	b.n	80087c0 <_free_r+0x24>
 8008818:	6820      	ldr	r0, [r4, #0]
 800881a:	1821      	adds	r1, r4, r0
 800881c:	428a      	cmp	r2, r1
 800881e:	bf04      	itt	eq
 8008820:	6811      	ldreq	r1, [r2, #0]
 8008822:	6852      	ldreq	r2, [r2, #4]
 8008824:	6062      	str	r2, [r4, #4]
 8008826:	bf04      	itt	eq
 8008828:	1809      	addeq	r1, r1, r0
 800882a:	6021      	streq	r1, [r4, #0]
 800882c:	605c      	str	r4, [r3, #4]
 800882e:	e7c7      	b.n	80087c0 <_free_r+0x24>
 8008830:	bd38      	pop	{r3, r4, r5, pc}
 8008832:	bf00      	nop
 8008834:	20013490 	.word	0x20013490

08008838 <_malloc_r>:
 8008838:	b570      	push	{r4, r5, r6, lr}
 800883a:	1ccd      	adds	r5, r1, #3
 800883c:	f025 0503 	bic.w	r5, r5, #3
 8008840:	3508      	adds	r5, #8
 8008842:	2d0c      	cmp	r5, #12
 8008844:	bf38      	it	cc
 8008846:	250c      	movcc	r5, #12
 8008848:	2d00      	cmp	r5, #0
 800884a:	4606      	mov	r6, r0
 800884c:	db01      	blt.n	8008852 <_malloc_r+0x1a>
 800884e:	42a9      	cmp	r1, r5
 8008850:	d903      	bls.n	800885a <_malloc_r+0x22>
 8008852:	230c      	movs	r3, #12
 8008854:	6033      	str	r3, [r6, #0]
 8008856:	2000      	movs	r0, #0
 8008858:	bd70      	pop	{r4, r5, r6, pc}
 800885a:	f000 fbb1 	bl	8008fc0 <__malloc_lock>
 800885e:	4a23      	ldr	r2, [pc, #140]	; (80088ec <_malloc_r+0xb4>)
 8008860:	6814      	ldr	r4, [r2, #0]
 8008862:	4621      	mov	r1, r4
 8008864:	b991      	cbnz	r1, 800888c <_malloc_r+0x54>
 8008866:	4c22      	ldr	r4, [pc, #136]	; (80088f0 <_malloc_r+0xb8>)
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	b91b      	cbnz	r3, 8008874 <_malloc_r+0x3c>
 800886c:	4630      	mov	r0, r6
 800886e:	f000 fad1 	bl	8008e14 <_sbrk_r>
 8008872:	6020      	str	r0, [r4, #0]
 8008874:	4629      	mov	r1, r5
 8008876:	4630      	mov	r0, r6
 8008878:	f000 facc 	bl	8008e14 <_sbrk_r>
 800887c:	1c43      	adds	r3, r0, #1
 800887e:	d126      	bne.n	80088ce <_malloc_r+0x96>
 8008880:	230c      	movs	r3, #12
 8008882:	6033      	str	r3, [r6, #0]
 8008884:	4630      	mov	r0, r6
 8008886:	f000 fb9c 	bl	8008fc2 <__malloc_unlock>
 800888a:	e7e4      	b.n	8008856 <_malloc_r+0x1e>
 800888c:	680b      	ldr	r3, [r1, #0]
 800888e:	1b5b      	subs	r3, r3, r5
 8008890:	d41a      	bmi.n	80088c8 <_malloc_r+0x90>
 8008892:	2b0b      	cmp	r3, #11
 8008894:	d90f      	bls.n	80088b6 <_malloc_r+0x7e>
 8008896:	600b      	str	r3, [r1, #0]
 8008898:	50cd      	str	r5, [r1, r3]
 800889a:	18cc      	adds	r4, r1, r3
 800889c:	4630      	mov	r0, r6
 800889e:	f000 fb90 	bl	8008fc2 <__malloc_unlock>
 80088a2:	f104 000b 	add.w	r0, r4, #11
 80088a6:	1d23      	adds	r3, r4, #4
 80088a8:	f020 0007 	bic.w	r0, r0, #7
 80088ac:	1ac3      	subs	r3, r0, r3
 80088ae:	d01b      	beq.n	80088e8 <_malloc_r+0xb0>
 80088b0:	425a      	negs	r2, r3
 80088b2:	50e2      	str	r2, [r4, r3]
 80088b4:	bd70      	pop	{r4, r5, r6, pc}
 80088b6:	428c      	cmp	r4, r1
 80088b8:	bf0d      	iteet	eq
 80088ba:	6863      	ldreq	r3, [r4, #4]
 80088bc:	684b      	ldrne	r3, [r1, #4]
 80088be:	6063      	strne	r3, [r4, #4]
 80088c0:	6013      	streq	r3, [r2, #0]
 80088c2:	bf18      	it	ne
 80088c4:	460c      	movne	r4, r1
 80088c6:	e7e9      	b.n	800889c <_malloc_r+0x64>
 80088c8:	460c      	mov	r4, r1
 80088ca:	6849      	ldr	r1, [r1, #4]
 80088cc:	e7ca      	b.n	8008864 <_malloc_r+0x2c>
 80088ce:	1cc4      	adds	r4, r0, #3
 80088d0:	f024 0403 	bic.w	r4, r4, #3
 80088d4:	42a0      	cmp	r0, r4
 80088d6:	d005      	beq.n	80088e4 <_malloc_r+0xac>
 80088d8:	1a21      	subs	r1, r4, r0
 80088da:	4630      	mov	r0, r6
 80088dc:	f000 fa9a 	bl	8008e14 <_sbrk_r>
 80088e0:	3001      	adds	r0, #1
 80088e2:	d0cd      	beq.n	8008880 <_malloc_r+0x48>
 80088e4:	6025      	str	r5, [r4, #0]
 80088e6:	e7d9      	b.n	800889c <_malloc_r+0x64>
 80088e8:	bd70      	pop	{r4, r5, r6, pc}
 80088ea:	bf00      	nop
 80088ec:	20013490 	.word	0x20013490
 80088f0:	20013494 	.word	0x20013494

080088f4 <__ssputs_r>:
 80088f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f8:	688e      	ldr	r6, [r1, #8]
 80088fa:	429e      	cmp	r6, r3
 80088fc:	4682      	mov	sl, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	4691      	mov	r9, r2
 8008902:	4698      	mov	r8, r3
 8008904:	d835      	bhi.n	8008972 <__ssputs_r+0x7e>
 8008906:	898a      	ldrh	r2, [r1, #12]
 8008908:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800890c:	d031      	beq.n	8008972 <__ssputs_r+0x7e>
 800890e:	6825      	ldr	r5, [r4, #0]
 8008910:	6909      	ldr	r1, [r1, #16]
 8008912:	1a6f      	subs	r7, r5, r1
 8008914:	6965      	ldr	r5, [r4, #20]
 8008916:	2302      	movs	r3, #2
 8008918:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800891c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008920:	f108 0301 	add.w	r3, r8, #1
 8008924:	443b      	add	r3, r7
 8008926:	429d      	cmp	r5, r3
 8008928:	bf38      	it	cc
 800892a:	461d      	movcc	r5, r3
 800892c:	0553      	lsls	r3, r2, #21
 800892e:	d531      	bpl.n	8008994 <__ssputs_r+0xa0>
 8008930:	4629      	mov	r1, r5
 8008932:	f7ff ff81 	bl	8008838 <_malloc_r>
 8008936:	4606      	mov	r6, r0
 8008938:	b950      	cbnz	r0, 8008950 <__ssputs_r+0x5c>
 800893a:	230c      	movs	r3, #12
 800893c:	f8ca 3000 	str.w	r3, [sl]
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008946:	81a3      	strh	r3, [r4, #12]
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008950:	463a      	mov	r2, r7
 8008952:	6921      	ldr	r1, [r4, #16]
 8008954:	f7ff fc38 	bl	80081c8 <memcpy>
 8008958:	89a3      	ldrh	r3, [r4, #12]
 800895a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800895e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008962:	81a3      	strh	r3, [r4, #12]
 8008964:	6126      	str	r6, [r4, #16]
 8008966:	6165      	str	r5, [r4, #20]
 8008968:	443e      	add	r6, r7
 800896a:	1bed      	subs	r5, r5, r7
 800896c:	6026      	str	r6, [r4, #0]
 800896e:	60a5      	str	r5, [r4, #8]
 8008970:	4646      	mov	r6, r8
 8008972:	4546      	cmp	r6, r8
 8008974:	bf28      	it	cs
 8008976:	4646      	movcs	r6, r8
 8008978:	4632      	mov	r2, r6
 800897a:	4649      	mov	r1, r9
 800897c:	6820      	ldr	r0, [r4, #0]
 800897e:	f000 fb05 	bl	8008f8c <memmove>
 8008982:	68a3      	ldr	r3, [r4, #8]
 8008984:	1b9b      	subs	r3, r3, r6
 8008986:	60a3      	str	r3, [r4, #8]
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	441e      	add	r6, r3
 800898c:	6026      	str	r6, [r4, #0]
 800898e:	2000      	movs	r0, #0
 8008990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008994:	462a      	mov	r2, r5
 8008996:	f000 fb15 	bl	8008fc4 <_realloc_r>
 800899a:	4606      	mov	r6, r0
 800899c:	2800      	cmp	r0, #0
 800899e:	d1e1      	bne.n	8008964 <__ssputs_r+0x70>
 80089a0:	6921      	ldr	r1, [r4, #16]
 80089a2:	4650      	mov	r0, sl
 80089a4:	f7ff fefa 	bl	800879c <_free_r>
 80089a8:	e7c7      	b.n	800893a <__ssputs_r+0x46>
	...

080089ac <_svfiprintf_r>:
 80089ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	b09d      	sub	sp, #116	; 0x74
 80089b2:	4680      	mov	r8, r0
 80089b4:	9303      	str	r3, [sp, #12]
 80089b6:	898b      	ldrh	r3, [r1, #12]
 80089b8:	061c      	lsls	r4, r3, #24
 80089ba:	460d      	mov	r5, r1
 80089bc:	4616      	mov	r6, r2
 80089be:	d50f      	bpl.n	80089e0 <_svfiprintf_r+0x34>
 80089c0:	690b      	ldr	r3, [r1, #16]
 80089c2:	b96b      	cbnz	r3, 80089e0 <_svfiprintf_r+0x34>
 80089c4:	2140      	movs	r1, #64	; 0x40
 80089c6:	f7ff ff37 	bl	8008838 <_malloc_r>
 80089ca:	6028      	str	r0, [r5, #0]
 80089cc:	6128      	str	r0, [r5, #16]
 80089ce:	b928      	cbnz	r0, 80089dc <_svfiprintf_r+0x30>
 80089d0:	230c      	movs	r3, #12
 80089d2:	f8c8 3000 	str.w	r3, [r8]
 80089d6:	f04f 30ff 	mov.w	r0, #4294967295
 80089da:	e0c5      	b.n	8008b68 <_svfiprintf_r+0x1bc>
 80089dc:	2340      	movs	r3, #64	; 0x40
 80089de:	616b      	str	r3, [r5, #20]
 80089e0:	2300      	movs	r3, #0
 80089e2:	9309      	str	r3, [sp, #36]	; 0x24
 80089e4:	2320      	movs	r3, #32
 80089e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089ea:	2330      	movs	r3, #48	; 0x30
 80089ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089f0:	f04f 0b01 	mov.w	fp, #1
 80089f4:	4637      	mov	r7, r6
 80089f6:	463c      	mov	r4, r7
 80089f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d13c      	bne.n	8008a7a <_svfiprintf_r+0xce>
 8008a00:	ebb7 0a06 	subs.w	sl, r7, r6
 8008a04:	d00b      	beq.n	8008a1e <_svfiprintf_r+0x72>
 8008a06:	4653      	mov	r3, sl
 8008a08:	4632      	mov	r2, r6
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	f7ff ff71 	bl	80088f4 <__ssputs_r>
 8008a12:	3001      	adds	r0, #1
 8008a14:	f000 80a3 	beq.w	8008b5e <_svfiprintf_r+0x1b2>
 8008a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a1a:	4453      	add	r3, sl
 8008a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a1e:	783b      	ldrb	r3, [r7, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 809c 	beq.w	8008b5e <_svfiprintf_r+0x1b2>
 8008a26:	2300      	movs	r3, #0
 8008a28:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2c:	9304      	str	r3, [sp, #16]
 8008a2e:	9307      	str	r3, [sp, #28]
 8008a30:	9205      	str	r2, [sp, #20]
 8008a32:	9306      	str	r3, [sp, #24]
 8008a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a38:	931a      	str	r3, [sp, #104]	; 0x68
 8008a3a:	2205      	movs	r2, #5
 8008a3c:	7821      	ldrb	r1, [r4, #0]
 8008a3e:	4850      	ldr	r0, [pc, #320]	; (8008b80 <_svfiprintf_r+0x1d4>)
 8008a40:	f7f7 fc2e 	bl	80002a0 <memchr>
 8008a44:	1c67      	adds	r7, r4, #1
 8008a46:	9b04      	ldr	r3, [sp, #16]
 8008a48:	b9d8      	cbnz	r0, 8008a82 <_svfiprintf_r+0xd6>
 8008a4a:	06d9      	lsls	r1, r3, #27
 8008a4c:	bf44      	itt	mi
 8008a4e:	2220      	movmi	r2, #32
 8008a50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a54:	071a      	lsls	r2, r3, #28
 8008a56:	bf44      	itt	mi
 8008a58:	222b      	movmi	r2, #43	; 0x2b
 8008a5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a5e:	7822      	ldrb	r2, [r4, #0]
 8008a60:	2a2a      	cmp	r2, #42	; 0x2a
 8008a62:	d016      	beq.n	8008a92 <_svfiprintf_r+0xe6>
 8008a64:	9a07      	ldr	r2, [sp, #28]
 8008a66:	2100      	movs	r1, #0
 8008a68:	200a      	movs	r0, #10
 8008a6a:	4627      	mov	r7, r4
 8008a6c:	3401      	adds	r4, #1
 8008a6e:	783b      	ldrb	r3, [r7, #0]
 8008a70:	3b30      	subs	r3, #48	; 0x30
 8008a72:	2b09      	cmp	r3, #9
 8008a74:	d951      	bls.n	8008b1a <_svfiprintf_r+0x16e>
 8008a76:	b1c9      	cbz	r1, 8008aac <_svfiprintf_r+0x100>
 8008a78:	e011      	b.n	8008a9e <_svfiprintf_r+0xf2>
 8008a7a:	2b25      	cmp	r3, #37	; 0x25
 8008a7c:	d0c0      	beq.n	8008a00 <_svfiprintf_r+0x54>
 8008a7e:	4627      	mov	r7, r4
 8008a80:	e7b9      	b.n	80089f6 <_svfiprintf_r+0x4a>
 8008a82:	4a3f      	ldr	r2, [pc, #252]	; (8008b80 <_svfiprintf_r+0x1d4>)
 8008a84:	1a80      	subs	r0, r0, r2
 8008a86:	fa0b f000 	lsl.w	r0, fp, r0
 8008a8a:	4318      	orrs	r0, r3
 8008a8c:	9004      	str	r0, [sp, #16]
 8008a8e:	463c      	mov	r4, r7
 8008a90:	e7d3      	b.n	8008a3a <_svfiprintf_r+0x8e>
 8008a92:	9a03      	ldr	r2, [sp, #12]
 8008a94:	1d11      	adds	r1, r2, #4
 8008a96:	6812      	ldr	r2, [r2, #0]
 8008a98:	9103      	str	r1, [sp, #12]
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	db01      	blt.n	8008aa2 <_svfiprintf_r+0xf6>
 8008a9e:	9207      	str	r2, [sp, #28]
 8008aa0:	e004      	b.n	8008aac <_svfiprintf_r+0x100>
 8008aa2:	4252      	negs	r2, r2
 8008aa4:	f043 0302 	orr.w	r3, r3, #2
 8008aa8:	9207      	str	r2, [sp, #28]
 8008aaa:	9304      	str	r3, [sp, #16]
 8008aac:	783b      	ldrb	r3, [r7, #0]
 8008aae:	2b2e      	cmp	r3, #46	; 0x2e
 8008ab0:	d10e      	bne.n	8008ad0 <_svfiprintf_r+0x124>
 8008ab2:	787b      	ldrb	r3, [r7, #1]
 8008ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ab6:	f107 0101 	add.w	r1, r7, #1
 8008aba:	d132      	bne.n	8008b22 <_svfiprintf_r+0x176>
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	1d1a      	adds	r2, r3, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	9203      	str	r2, [sp, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bfb8      	it	lt
 8008ac8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008acc:	3702      	adds	r7, #2
 8008ace:	9305      	str	r3, [sp, #20]
 8008ad0:	4c2c      	ldr	r4, [pc, #176]	; (8008b84 <_svfiprintf_r+0x1d8>)
 8008ad2:	7839      	ldrb	r1, [r7, #0]
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f7f7 fbe2 	bl	80002a0 <memchr>
 8008adc:	b138      	cbz	r0, 8008aee <_svfiprintf_r+0x142>
 8008ade:	2340      	movs	r3, #64	; 0x40
 8008ae0:	1b00      	subs	r0, r0, r4
 8008ae2:	fa03 f000 	lsl.w	r0, r3, r0
 8008ae6:	9b04      	ldr	r3, [sp, #16]
 8008ae8:	4303      	orrs	r3, r0
 8008aea:	9304      	str	r3, [sp, #16]
 8008aec:	3701      	adds	r7, #1
 8008aee:	7839      	ldrb	r1, [r7, #0]
 8008af0:	4825      	ldr	r0, [pc, #148]	; (8008b88 <_svfiprintf_r+0x1dc>)
 8008af2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008af6:	2206      	movs	r2, #6
 8008af8:	1c7e      	adds	r6, r7, #1
 8008afa:	f7f7 fbd1 	bl	80002a0 <memchr>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d035      	beq.n	8008b6e <_svfiprintf_r+0x1c2>
 8008b02:	4b22      	ldr	r3, [pc, #136]	; (8008b8c <_svfiprintf_r+0x1e0>)
 8008b04:	b9fb      	cbnz	r3, 8008b46 <_svfiprintf_r+0x19a>
 8008b06:	9b03      	ldr	r3, [sp, #12]
 8008b08:	3307      	adds	r3, #7
 8008b0a:	f023 0307 	bic.w	r3, r3, #7
 8008b0e:	3308      	adds	r3, #8
 8008b10:	9303      	str	r3, [sp, #12]
 8008b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b14:	444b      	add	r3, r9
 8008b16:	9309      	str	r3, [sp, #36]	; 0x24
 8008b18:	e76c      	b.n	80089f4 <_svfiprintf_r+0x48>
 8008b1a:	fb00 3202 	mla	r2, r0, r2, r3
 8008b1e:	2101      	movs	r1, #1
 8008b20:	e7a3      	b.n	8008a6a <_svfiprintf_r+0xbe>
 8008b22:	2300      	movs	r3, #0
 8008b24:	9305      	str	r3, [sp, #20]
 8008b26:	4618      	mov	r0, r3
 8008b28:	240a      	movs	r4, #10
 8008b2a:	460f      	mov	r7, r1
 8008b2c:	3101      	adds	r1, #1
 8008b2e:	783a      	ldrb	r2, [r7, #0]
 8008b30:	3a30      	subs	r2, #48	; 0x30
 8008b32:	2a09      	cmp	r2, #9
 8008b34:	d903      	bls.n	8008b3e <_svfiprintf_r+0x192>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0ca      	beq.n	8008ad0 <_svfiprintf_r+0x124>
 8008b3a:	9005      	str	r0, [sp, #20]
 8008b3c:	e7c8      	b.n	8008ad0 <_svfiprintf_r+0x124>
 8008b3e:	fb04 2000 	mla	r0, r4, r0, r2
 8008b42:	2301      	movs	r3, #1
 8008b44:	e7f1      	b.n	8008b2a <_svfiprintf_r+0x17e>
 8008b46:	ab03      	add	r3, sp, #12
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	462a      	mov	r2, r5
 8008b4c:	4b10      	ldr	r3, [pc, #64]	; (8008b90 <_svfiprintf_r+0x1e4>)
 8008b4e:	a904      	add	r1, sp, #16
 8008b50:	4640      	mov	r0, r8
 8008b52:	f7fd fd81 	bl	8006658 <_printf_float>
 8008b56:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008b5a:	4681      	mov	r9, r0
 8008b5c:	d1d9      	bne.n	8008b12 <_svfiprintf_r+0x166>
 8008b5e:	89ab      	ldrh	r3, [r5, #12]
 8008b60:	065b      	lsls	r3, r3, #25
 8008b62:	f53f af38 	bmi.w	80089d6 <_svfiprintf_r+0x2a>
 8008b66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b68:	b01d      	add	sp, #116	; 0x74
 8008b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6e:	ab03      	add	r3, sp, #12
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	462a      	mov	r2, r5
 8008b74:	4b06      	ldr	r3, [pc, #24]	; (8008b90 <_svfiprintf_r+0x1e4>)
 8008b76:	a904      	add	r1, sp, #16
 8008b78:	4640      	mov	r0, r8
 8008b7a:	f7fe f823 	bl	8006bc4 <_printf_i>
 8008b7e:	e7ea      	b.n	8008b56 <_svfiprintf_r+0x1aa>
 8008b80:	0801e76c 	.word	0x0801e76c
 8008b84:	0801e772 	.word	0x0801e772
 8008b88:	0801e776 	.word	0x0801e776
 8008b8c:	08006659 	.word	0x08006659
 8008b90:	080088f5 	.word	0x080088f5

08008b94 <__sfputc_r>:
 8008b94:	6893      	ldr	r3, [r2, #8]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	b410      	push	{r4}
 8008b9c:	6093      	str	r3, [r2, #8]
 8008b9e:	da09      	bge.n	8008bb4 <__sfputc_r+0x20>
 8008ba0:	6994      	ldr	r4, [r2, #24]
 8008ba2:	42a3      	cmp	r3, r4
 8008ba4:	db02      	blt.n	8008bac <__sfputc_r+0x18>
 8008ba6:	b2cb      	uxtb	r3, r1
 8008ba8:	2b0a      	cmp	r3, #10
 8008baa:	d103      	bne.n	8008bb4 <__sfputc_r+0x20>
 8008bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bb0:	f7fe b9fa 	b.w	8006fa8 <__swbuf_r>
 8008bb4:	6813      	ldr	r3, [r2, #0]
 8008bb6:	1c58      	adds	r0, r3, #1
 8008bb8:	6010      	str	r0, [r2, #0]
 8008bba:	7019      	strb	r1, [r3, #0]
 8008bbc:	b2c8      	uxtb	r0, r1
 8008bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <__sfputs_r>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	460f      	mov	r7, r1
 8008bca:	4614      	mov	r4, r2
 8008bcc:	18d5      	adds	r5, r2, r3
 8008bce:	42ac      	cmp	r4, r5
 8008bd0:	d101      	bne.n	8008bd6 <__sfputs_r+0x12>
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	e007      	b.n	8008be6 <__sfputs_r+0x22>
 8008bd6:	463a      	mov	r2, r7
 8008bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f7ff ffd9 	bl	8008b94 <__sfputc_r>
 8008be2:	1c43      	adds	r3, r0, #1
 8008be4:	d1f3      	bne.n	8008bce <__sfputs_r+0xa>
 8008be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008be8 <_vfiprintf_r>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	b09d      	sub	sp, #116	; 0x74
 8008bee:	460c      	mov	r4, r1
 8008bf0:	4617      	mov	r7, r2
 8008bf2:	9303      	str	r3, [sp, #12]
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	b118      	cbz	r0, 8008c00 <_vfiprintf_r+0x18>
 8008bf8:	6983      	ldr	r3, [r0, #24]
 8008bfa:	b90b      	cbnz	r3, 8008c00 <_vfiprintf_r+0x18>
 8008bfc:	f7ff f9e0 	bl	8007fc0 <__sinit>
 8008c00:	4b7c      	ldr	r3, [pc, #496]	; (8008df4 <_vfiprintf_r+0x20c>)
 8008c02:	429c      	cmp	r4, r3
 8008c04:	d157      	bne.n	8008cb6 <_vfiprintf_r+0xce>
 8008c06:	6874      	ldr	r4, [r6, #4]
 8008c08:	89a3      	ldrh	r3, [r4, #12]
 8008c0a:	0718      	lsls	r0, r3, #28
 8008c0c:	d55d      	bpl.n	8008cca <_vfiprintf_r+0xe2>
 8008c0e:	6923      	ldr	r3, [r4, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d05a      	beq.n	8008cca <_vfiprintf_r+0xe2>
 8008c14:	2300      	movs	r3, #0
 8008c16:	9309      	str	r3, [sp, #36]	; 0x24
 8008c18:	2320      	movs	r3, #32
 8008c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c1e:	2330      	movs	r3, #48	; 0x30
 8008c20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c24:	f04f 0b01 	mov.w	fp, #1
 8008c28:	46b8      	mov	r8, r7
 8008c2a:	4645      	mov	r5, r8
 8008c2c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d155      	bne.n	8008ce0 <_vfiprintf_r+0xf8>
 8008c34:	ebb8 0a07 	subs.w	sl, r8, r7
 8008c38:	d00b      	beq.n	8008c52 <_vfiprintf_r+0x6a>
 8008c3a:	4653      	mov	r3, sl
 8008c3c:	463a      	mov	r2, r7
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4630      	mov	r0, r6
 8008c42:	f7ff ffbf 	bl	8008bc4 <__sfputs_r>
 8008c46:	3001      	adds	r0, #1
 8008c48:	f000 80c4 	beq.w	8008dd4 <_vfiprintf_r+0x1ec>
 8008c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c4e:	4453      	add	r3, sl
 8008c50:	9309      	str	r3, [sp, #36]	; 0x24
 8008c52:	f898 3000 	ldrb.w	r3, [r8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 80bc 	beq.w	8008dd4 <_vfiprintf_r+0x1ec>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c62:	9304      	str	r3, [sp, #16]
 8008c64:	9307      	str	r3, [sp, #28]
 8008c66:	9205      	str	r2, [sp, #20]
 8008c68:	9306      	str	r3, [sp, #24]
 8008c6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c6e:	931a      	str	r3, [sp, #104]	; 0x68
 8008c70:	2205      	movs	r2, #5
 8008c72:	7829      	ldrb	r1, [r5, #0]
 8008c74:	4860      	ldr	r0, [pc, #384]	; (8008df8 <_vfiprintf_r+0x210>)
 8008c76:	f7f7 fb13 	bl	80002a0 <memchr>
 8008c7a:	f105 0801 	add.w	r8, r5, #1
 8008c7e:	9b04      	ldr	r3, [sp, #16]
 8008c80:	2800      	cmp	r0, #0
 8008c82:	d131      	bne.n	8008ce8 <_vfiprintf_r+0x100>
 8008c84:	06d9      	lsls	r1, r3, #27
 8008c86:	bf44      	itt	mi
 8008c88:	2220      	movmi	r2, #32
 8008c8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c8e:	071a      	lsls	r2, r3, #28
 8008c90:	bf44      	itt	mi
 8008c92:	222b      	movmi	r2, #43	; 0x2b
 8008c94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c98:	782a      	ldrb	r2, [r5, #0]
 8008c9a:	2a2a      	cmp	r2, #42	; 0x2a
 8008c9c:	d02c      	beq.n	8008cf8 <_vfiprintf_r+0x110>
 8008c9e:	9a07      	ldr	r2, [sp, #28]
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	200a      	movs	r0, #10
 8008ca4:	46a8      	mov	r8, r5
 8008ca6:	3501      	adds	r5, #1
 8008ca8:	f898 3000 	ldrb.w	r3, [r8]
 8008cac:	3b30      	subs	r3, #48	; 0x30
 8008cae:	2b09      	cmp	r3, #9
 8008cb0:	d96d      	bls.n	8008d8e <_vfiprintf_r+0x1a6>
 8008cb2:	b371      	cbz	r1, 8008d12 <_vfiprintf_r+0x12a>
 8008cb4:	e026      	b.n	8008d04 <_vfiprintf_r+0x11c>
 8008cb6:	4b51      	ldr	r3, [pc, #324]	; (8008dfc <_vfiprintf_r+0x214>)
 8008cb8:	429c      	cmp	r4, r3
 8008cba:	d101      	bne.n	8008cc0 <_vfiprintf_r+0xd8>
 8008cbc:	68b4      	ldr	r4, [r6, #8]
 8008cbe:	e7a3      	b.n	8008c08 <_vfiprintf_r+0x20>
 8008cc0:	4b4f      	ldr	r3, [pc, #316]	; (8008e00 <_vfiprintf_r+0x218>)
 8008cc2:	429c      	cmp	r4, r3
 8008cc4:	bf08      	it	eq
 8008cc6:	68f4      	ldreq	r4, [r6, #12]
 8008cc8:	e79e      	b.n	8008c08 <_vfiprintf_r+0x20>
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f7fe f9bd 	bl	800704c <__swsetup_r>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d09e      	beq.n	8008c14 <_vfiprintf_r+0x2c>
 8008cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cda:	b01d      	add	sp, #116	; 0x74
 8008cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce0:	2b25      	cmp	r3, #37	; 0x25
 8008ce2:	d0a7      	beq.n	8008c34 <_vfiprintf_r+0x4c>
 8008ce4:	46a8      	mov	r8, r5
 8008ce6:	e7a0      	b.n	8008c2a <_vfiprintf_r+0x42>
 8008ce8:	4a43      	ldr	r2, [pc, #268]	; (8008df8 <_vfiprintf_r+0x210>)
 8008cea:	1a80      	subs	r0, r0, r2
 8008cec:	fa0b f000 	lsl.w	r0, fp, r0
 8008cf0:	4318      	orrs	r0, r3
 8008cf2:	9004      	str	r0, [sp, #16]
 8008cf4:	4645      	mov	r5, r8
 8008cf6:	e7bb      	b.n	8008c70 <_vfiprintf_r+0x88>
 8008cf8:	9a03      	ldr	r2, [sp, #12]
 8008cfa:	1d11      	adds	r1, r2, #4
 8008cfc:	6812      	ldr	r2, [r2, #0]
 8008cfe:	9103      	str	r1, [sp, #12]
 8008d00:	2a00      	cmp	r2, #0
 8008d02:	db01      	blt.n	8008d08 <_vfiprintf_r+0x120>
 8008d04:	9207      	str	r2, [sp, #28]
 8008d06:	e004      	b.n	8008d12 <_vfiprintf_r+0x12a>
 8008d08:	4252      	negs	r2, r2
 8008d0a:	f043 0302 	orr.w	r3, r3, #2
 8008d0e:	9207      	str	r2, [sp, #28]
 8008d10:	9304      	str	r3, [sp, #16]
 8008d12:	f898 3000 	ldrb.w	r3, [r8]
 8008d16:	2b2e      	cmp	r3, #46	; 0x2e
 8008d18:	d110      	bne.n	8008d3c <_vfiprintf_r+0x154>
 8008d1a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d20:	f108 0101 	add.w	r1, r8, #1
 8008d24:	d137      	bne.n	8008d96 <_vfiprintf_r+0x1ae>
 8008d26:	9b03      	ldr	r3, [sp, #12]
 8008d28:	1d1a      	adds	r2, r3, #4
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	9203      	str	r2, [sp, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	bfb8      	it	lt
 8008d32:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d36:	f108 0802 	add.w	r8, r8, #2
 8008d3a:	9305      	str	r3, [sp, #20]
 8008d3c:	4d31      	ldr	r5, [pc, #196]	; (8008e04 <_vfiprintf_r+0x21c>)
 8008d3e:	f898 1000 	ldrb.w	r1, [r8]
 8008d42:	2203      	movs	r2, #3
 8008d44:	4628      	mov	r0, r5
 8008d46:	f7f7 faab 	bl	80002a0 <memchr>
 8008d4a:	b140      	cbz	r0, 8008d5e <_vfiprintf_r+0x176>
 8008d4c:	2340      	movs	r3, #64	; 0x40
 8008d4e:	1b40      	subs	r0, r0, r5
 8008d50:	fa03 f000 	lsl.w	r0, r3, r0
 8008d54:	9b04      	ldr	r3, [sp, #16]
 8008d56:	4303      	orrs	r3, r0
 8008d58:	9304      	str	r3, [sp, #16]
 8008d5a:	f108 0801 	add.w	r8, r8, #1
 8008d5e:	f898 1000 	ldrb.w	r1, [r8]
 8008d62:	4829      	ldr	r0, [pc, #164]	; (8008e08 <_vfiprintf_r+0x220>)
 8008d64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d68:	2206      	movs	r2, #6
 8008d6a:	f108 0701 	add.w	r7, r8, #1
 8008d6e:	f7f7 fa97 	bl	80002a0 <memchr>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d034      	beq.n	8008de0 <_vfiprintf_r+0x1f8>
 8008d76:	4b25      	ldr	r3, [pc, #148]	; (8008e0c <_vfiprintf_r+0x224>)
 8008d78:	bb03      	cbnz	r3, 8008dbc <_vfiprintf_r+0x1d4>
 8008d7a:	9b03      	ldr	r3, [sp, #12]
 8008d7c:	3307      	adds	r3, #7
 8008d7e:	f023 0307 	bic.w	r3, r3, #7
 8008d82:	3308      	adds	r3, #8
 8008d84:	9303      	str	r3, [sp, #12]
 8008d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d88:	444b      	add	r3, r9
 8008d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d8c:	e74c      	b.n	8008c28 <_vfiprintf_r+0x40>
 8008d8e:	fb00 3202 	mla	r2, r0, r2, r3
 8008d92:	2101      	movs	r1, #1
 8008d94:	e786      	b.n	8008ca4 <_vfiprintf_r+0xbc>
 8008d96:	2300      	movs	r3, #0
 8008d98:	9305      	str	r3, [sp, #20]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	250a      	movs	r5, #10
 8008d9e:	4688      	mov	r8, r1
 8008da0:	3101      	adds	r1, #1
 8008da2:	f898 2000 	ldrb.w	r2, [r8]
 8008da6:	3a30      	subs	r2, #48	; 0x30
 8008da8:	2a09      	cmp	r2, #9
 8008daa:	d903      	bls.n	8008db4 <_vfiprintf_r+0x1cc>
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d0c5      	beq.n	8008d3c <_vfiprintf_r+0x154>
 8008db0:	9005      	str	r0, [sp, #20]
 8008db2:	e7c3      	b.n	8008d3c <_vfiprintf_r+0x154>
 8008db4:	fb05 2000 	mla	r0, r5, r0, r2
 8008db8:	2301      	movs	r3, #1
 8008dba:	e7f0      	b.n	8008d9e <_vfiprintf_r+0x1b6>
 8008dbc:	ab03      	add	r3, sp, #12
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <_vfiprintf_r+0x228>)
 8008dc4:	a904      	add	r1, sp, #16
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	f7fd fc46 	bl	8006658 <_printf_float>
 8008dcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008dd0:	4681      	mov	r9, r0
 8008dd2:	d1d8      	bne.n	8008d86 <_vfiprintf_r+0x19e>
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	065b      	lsls	r3, r3, #25
 8008dd8:	f53f af7d 	bmi.w	8008cd6 <_vfiprintf_r+0xee>
 8008ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dde:	e77c      	b.n	8008cda <_vfiprintf_r+0xf2>
 8008de0:	ab03      	add	r3, sp, #12
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	4622      	mov	r2, r4
 8008de6:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <_vfiprintf_r+0x228>)
 8008de8:	a904      	add	r1, sp, #16
 8008dea:	4630      	mov	r0, r6
 8008dec:	f7fd feea 	bl	8006bc4 <_printf_i>
 8008df0:	e7ec      	b.n	8008dcc <_vfiprintf_r+0x1e4>
 8008df2:	bf00      	nop
 8008df4:	0801e628 	.word	0x0801e628
 8008df8:	0801e76c 	.word	0x0801e76c
 8008dfc:	0801e648 	.word	0x0801e648
 8008e00:	0801e608 	.word	0x0801e608
 8008e04:	0801e772 	.word	0x0801e772
 8008e08:	0801e776 	.word	0x0801e776
 8008e0c:	08006659 	.word	0x08006659
 8008e10:	08008bc5 	.word	0x08008bc5

08008e14 <_sbrk_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	4c06      	ldr	r4, [pc, #24]	; (8008e30 <_sbrk_r+0x1c>)
 8008e18:	2300      	movs	r3, #0
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	6023      	str	r3, [r4, #0]
 8008e20:	f001 fd32 	bl	800a888 <_sbrk>
 8008e24:	1c43      	adds	r3, r0, #1
 8008e26:	d102      	bne.n	8008e2e <_sbrk_r+0x1a>
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	b103      	cbz	r3, 8008e2e <_sbrk_r+0x1a>
 8008e2c:	602b      	str	r3, [r5, #0]
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	20013758 	.word	0x20013758

08008e34 <__sread>:
 8008e34:	b510      	push	{r4, lr}
 8008e36:	460c      	mov	r4, r1
 8008e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3c:	f000 f8e8 	bl	8009010 <_read_r>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	bfab      	itete	ge
 8008e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e46:	89a3      	ldrhlt	r3, [r4, #12]
 8008e48:	181b      	addge	r3, r3, r0
 8008e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e4e:	bfac      	ite	ge
 8008e50:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e52:	81a3      	strhlt	r3, [r4, #12]
 8008e54:	bd10      	pop	{r4, pc}

08008e56 <__swrite>:
 8008e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5a:	461f      	mov	r7, r3
 8008e5c:	898b      	ldrh	r3, [r1, #12]
 8008e5e:	05db      	lsls	r3, r3, #23
 8008e60:	4605      	mov	r5, r0
 8008e62:	460c      	mov	r4, r1
 8008e64:	4616      	mov	r6, r2
 8008e66:	d505      	bpl.n	8008e74 <__swrite+0x1e>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e70:	f000 f868 	bl	8008f44 <_lseek_r>
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e7e:	81a3      	strh	r3, [r4, #12]
 8008e80:	4632      	mov	r2, r6
 8008e82:	463b      	mov	r3, r7
 8008e84:	4628      	mov	r0, r5
 8008e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8a:	f000 b817 	b.w	8008ebc <_write_r>

08008e8e <__sseek>:
 8008e8e:	b510      	push	{r4, lr}
 8008e90:	460c      	mov	r4, r1
 8008e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e96:	f000 f855 	bl	8008f44 <_lseek_r>
 8008e9a:	1c43      	adds	r3, r0, #1
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	bf15      	itete	ne
 8008ea0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008eaa:	81a3      	strheq	r3, [r4, #12]
 8008eac:	bf18      	it	ne
 8008eae:	81a3      	strhne	r3, [r4, #12]
 8008eb0:	bd10      	pop	{r4, pc}

08008eb2 <__sclose>:
 8008eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb6:	f000 b813 	b.w	8008ee0 <_close_r>
	...

08008ebc <_write_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	4c07      	ldr	r4, [pc, #28]	; (8008edc <_write_r+0x20>)
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	4608      	mov	r0, r1
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	6022      	str	r2, [r4, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f7fb fb6c 	bl	80045a8 <_write>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d102      	bne.n	8008eda <_write_r+0x1e>
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	b103      	cbz	r3, 8008eda <_write_r+0x1e>
 8008ed8:	602b      	str	r3, [r5, #0]
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	20013758 	.word	0x20013758

08008ee0 <_close_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4c06      	ldr	r4, [pc, #24]	; (8008efc <_close_r+0x1c>)
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	4608      	mov	r0, r1
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	f001 fca4 	bl	800a838 <_close>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_close_r+0x1a>
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_close_r+0x1a>
 8008ef8:	602b      	str	r3, [r5, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	20013758 	.word	0x20013758

08008f00 <_fstat_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4c07      	ldr	r4, [pc, #28]	; (8008f20 <_fstat_r+0x20>)
 8008f04:	2300      	movs	r3, #0
 8008f06:	4605      	mov	r5, r0
 8008f08:	4608      	mov	r0, r1
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	f001 fc9b 	bl	800a848 <_fstat>
 8008f12:	1c43      	adds	r3, r0, #1
 8008f14:	d102      	bne.n	8008f1c <_fstat_r+0x1c>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	b103      	cbz	r3, 8008f1c <_fstat_r+0x1c>
 8008f1a:	602b      	str	r3, [r5, #0]
 8008f1c:	bd38      	pop	{r3, r4, r5, pc}
 8008f1e:	bf00      	nop
 8008f20:	20013758 	.word	0x20013758

08008f24 <_isatty_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4c06      	ldr	r4, [pc, #24]	; (8008f40 <_isatty_r+0x1c>)
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	4608      	mov	r0, r1
 8008f2e:	6023      	str	r3, [r4, #0]
 8008f30:	f001 fc92 	bl	800a858 <_isatty>
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d102      	bne.n	8008f3e <_isatty_r+0x1a>
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	b103      	cbz	r3, 8008f3e <_isatty_r+0x1a>
 8008f3c:	602b      	str	r3, [r5, #0]
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	20013758 	.word	0x20013758

08008f44 <_lseek_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4c07      	ldr	r4, [pc, #28]	; (8008f64 <_lseek_r+0x20>)
 8008f48:	4605      	mov	r5, r0
 8008f4a:	4608      	mov	r0, r1
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	2200      	movs	r2, #0
 8008f50:	6022      	str	r2, [r4, #0]
 8008f52:	461a      	mov	r2, r3
 8008f54:	f001 fc88 	bl	800a868 <_lseek>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d102      	bne.n	8008f62 <_lseek_r+0x1e>
 8008f5c:	6823      	ldr	r3, [r4, #0]
 8008f5e:	b103      	cbz	r3, 8008f62 <_lseek_r+0x1e>
 8008f60:	602b      	str	r3, [r5, #0]
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	20013758 	.word	0x20013758

08008f68 <__ascii_mbtowc>:
 8008f68:	b082      	sub	sp, #8
 8008f6a:	b901      	cbnz	r1, 8008f6e <__ascii_mbtowc+0x6>
 8008f6c:	a901      	add	r1, sp, #4
 8008f6e:	b142      	cbz	r2, 8008f82 <__ascii_mbtowc+0x1a>
 8008f70:	b14b      	cbz	r3, 8008f86 <__ascii_mbtowc+0x1e>
 8008f72:	7813      	ldrb	r3, [r2, #0]
 8008f74:	600b      	str	r3, [r1, #0]
 8008f76:	7812      	ldrb	r2, [r2, #0]
 8008f78:	1c10      	adds	r0, r2, #0
 8008f7a:	bf18      	it	ne
 8008f7c:	2001      	movne	r0, #1
 8008f7e:	b002      	add	sp, #8
 8008f80:	4770      	bx	lr
 8008f82:	4610      	mov	r0, r2
 8008f84:	e7fb      	b.n	8008f7e <__ascii_mbtowc+0x16>
 8008f86:	f06f 0001 	mvn.w	r0, #1
 8008f8a:	e7f8      	b.n	8008f7e <__ascii_mbtowc+0x16>

08008f8c <memmove>:
 8008f8c:	4288      	cmp	r0, r1
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	eb01 0302 	add.w	r3, r1, r2
 8008f94:	d803      	bhi.n	8008f9e <memmove+0x12>
 8008f96:	1e42      	subs	r2, r0, #1
 8008f98:	4299      	cmp	r1, r3
 8008f9a:	d10c      	bne.n	8008fb6 <memmove+0x2a>
 8008f9c:	bd10      	pop	{r4, pc}
 8008f9e:	4298      	cmp	r0, r3
 8008fa0:	d2f9      	bcs.n	8008f96 <memmove+0xa>
 8008fa2:	1881      	adds	r1, r0, r2
 8008fa4:	1ad2      	subs	r2, r2, r3
 8008fa6:	42d3      	cmn	r3, r2
 8008fa8:	d100      	bne.n	8008fac <memmove+0x20>
 8008faa:	bd10      	pop	{r4, pc}
 8008fac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fb0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008fb4:	e7f7      	b.n	8008fa6 <memmove+0x1a>
 8008fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fba:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008fbe:	e7eb      	b.n	8008f98 <memmove+0xc>

08008fc0 <__malloc_lock>:
 8008fc0:	4770      	bx	lr

08008fc2 <__malloc_unlock>:
 8008fc2:	4770      	bx	lr

08008fc4 <_realloc_r>:
 8008fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	4614      	mov	r4, r2
 8008fca:	460e      	mov	r6, r1
 8008fcc:	b921      	cbnz	r1, 8008fd8 <_realloc_r+0x14>
 8008fce:	4611      	mov	r1, r2
 8008fd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008fd4:	f7ff bc30 	b.w	8008838 <_malloc_r>
 8008fd8:	b922      	cbnz	r2, 8008fe4 <_realloc_r+0x20>
 8008fda:	f7ff fbdf 	bl	800879c <_free_r>
 8008fde:	4625      	mov	r5, r4
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe4:	f000 f833 	bl	800904e <_malloc_usable_size_r>
 8008fe8:	4284      	cmp	r4, r0
 8008fea:	d90f      	bls.n	800900c <_realloc_r+0x48>
 8008fec:	4621      	mov	r1, r4
 8008fee:	4638      	mov	r0, r7
 8008ff0:	f7ff fc22 	bl	8008838 <_malloc_r>
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d0f2      	beq.n	8008fe0 <_realloc_r+0x1c>
 8008ffa:	4631      	mov	r1, r6
 8008ffc:	4622      	mov	r2, r4
 8008ffe:	f7ff f8e3 	bl	80081c8 <memcpy>
 8009002:	4631      	mov	r1, r6
 8009004:	4638      	mov	r0, r7
 8009006:	f7ff fbc9 	bl	800879c <_free_r>
 800900a:	e7e9      	b.n	8008fe0 <_realloc_r+0x1c>
 800900c:	4635      	mov	r5, r6
 800900e:	e7e7      	b.n	8008fe0 <_realloc_r+0x1c>

08009010 <_read_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	4c07      	ldr	r4, [pc, #28]	; (8009030 <_read_r+0x20>)
 8009014:	4605      	mov	r5, r0
 8009016:	4608      	mov	r0, r1
 8009018:	4611      	mov	r1, r2
 800901a:	2200      	movs	r2, #0
 800901c:	6022      	str	r2, [r4, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	f001 fc2a 	bl	800a878 <_read>
 8009024:	1c43      	adds	r3, r0, #1
 8009026:	d102      	bne.n	800902e <_read_r+0x1e>
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	b103      	cbz	r3, 800902e <_read_r+0x1e>
 800902c:	602b      	str	r3, [r5, #0]
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	20013758 	.word	0x20013758

08009034 <__ascii_wctomb>:
 8009034:	b149      	cbz	r1, 800904a <__ascii_wctomb+0x16>
 8009036:	2aff      	cmp	r2, #255	; 0xff
 8009038:	bf85      	ittet	hi
 800903a:	238a      	movhi	r3, #138	; 0x8a
 800903c:	6003      	strhi	r3, [r0, #0]
 800903e:	700a      	strbls	r2, [r1, #0]
 8009040:	f04f 30ff 	movhi.w	r0, #4294967295
 8009044:	bf98      	it	ls
 8009046:	2001      	movls	r0, #1
 8009048:	4770      	bx	lr
 800904a:	4608      	mov	r0, r1
 800904c:	4770      	bx	lr

0800904e <_malloc_usable_size_r>:
 800904e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8009052:	2800      	cmp	r0, #0
 8009054:	f1a0 0004 	sub.w	r0, r0, #4
 8009058:	bfbc      	itt	lt
 800905a:	580b      	ldrlt	r3, [r1, r0]
 800905c:	18c0      	addlt	r0, r0, r3
 800905e:	4770      	bx	lr

08009060 <log10>:
 8009060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009062:	ed2d 8b02 	vpush	{d8}
 8009066:	b08b      	sub	sp, #44	; 0x2c
 8009068:	ec55 4b10 	vmov	r4, r5, d0
 800906c:	f000 fa40 	bl	80094f0 <__ieee754_log10>
 8009070:	4b36      	ldr	r3, [pc, #216]	; (800914c <log10+0xec>)
 8009072:	eeb0 8a40 	vmov.f32	s16, s0
 8009076:	eef0 8a60 	vmov.f32	s17, s1
 800907a:	f993 6000 	ldrsb.w	r6, [r3]
 800907e:	1c73      	adds	r3, r6, #1
 8009080:	d05c      	beq.n	800913c <log10+0xdc>
 8009082:	4622      	mov	r2, r4
 8009084:	462b      	mov	r3, r5
 8009086:	4620      	mov	r0, r4
 8009088:	4629      	mov	r1, r5
 800908a:	f7f7 fdab 	bl	8000be4 <__aeabi_dcmpun>
 800908e:	4607      	mov	r7, r0
 8009090:	2800      	cmp	r0, #0
 8009092:	d153      	bne.n	800913c <log10+0xdc>
 8009094:	2200      	movs	r2, #0
 8009096:	2300      	movs	r3, #0
 8009098:	4620      	mov	r0, r4
 800909a:	4629      	mov	r1, r5
 800909c:	f7f7 fd84 	bl	8000ba8 <__aeabi_dcmple>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d04b      	beq.n	800913c <log10+0xdc>
 80090a4:	4b2a      	ldr	r3, [pc, #168]	; (8009150 <log10+0xf0>)
 80090a6:	9301      	str	r3, [sp, #4]
 80090a8:	9708      	str	r7, [sp, #32]
 80090aa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80090ae:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80090b2:	b9a6      	cbnz	r6, 80090de <log10+0x7e>
 80090b4:	4b27      	ldr	r3, [pc, #156]	; (8009154 <log10+0xf4>)
 80090b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80090ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80090be:	4620      	mov	r0, r4
 80090c0:	2200      	movs	r2, #0
 80090c2:	2300      	movs	r3, #0
 80090c4:	4629      	mov	r1, r5
 80090c6:	f7f7 fd5b 	bl	8000b80 <__aeabi_dcmpeq>
 80090ca:	bb40      	cbnz	r0, 800911e <log10+0xbe>
 80090cc:	2301      	movs	r3, #1
 80090ce:	2e02      	cmp	r6, #2
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	d119      	bne.n	8009108 <log10+0xa8>
 80090d4:	f001 fbaa 	bl	800a82c <__errno>
 80090d8:	2321      	movs	r3, #33	; 0x21
 80090da:	6003      	str	r3, [r0, #0]
 80090dc:	e019      	b.n	8009112 <log10+0xb2>
 80090de:	4b1e      	ldr	r3, [pc, #120]	; (8009158 <log10+0xf8>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80090e6:	4620      	mov	r0, r4
 80090e8:	2200      	movs	r2, #0
 80090ea:	2300      	movs	r3, #0
 80090ec:	4629      	mov	r1, r5
 80090ee:	f7f7 fd47 	bl	8000b80 <__aeabi_dcmpeq>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d0ea      	beq.n	80090cc <log10+0x6c>
 80090f6:	2302      	movs	r3, #2
 80090f8:	429e      	cmp	r6, r3
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	d111      	bne.n	8009122 <log10+0xc2>
 80090fe:	f001 fb95 	bl	800a82c <__errno>
 8009102:	2322      	movs	r3, #34	; 0x22
 8009104:	6003      	str	r3, [r0, #0]
 8009106:	e011      	b.n	800912c <log10+0xcc>
 8009108:	4668      	mov	r0, sp
 800910a:	f001 f899 	bl	800a240 <matherr>
 800910e:	2800      	cmp	r0, #0
 8009110:	d0e0      	beq.n	80090d4 <log10+0x74>
 8009112:	4812      	ldr	r0, [pc, #72]	; (800915c <log10+0xfc>)
 8009114:	f001 f898 	bl	800a248 <nan>
 8009118:	ed8d 0b06 	vstr	d0, [sp, #24]
 800911c:	e006      	b.n	800912c <log10+0xcc>
 800911e:	2302      	movs	r3, #2
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	4668      	mov	r0, sp
 8009124:	f001 f88c 	bl	800a240 <matherr>
 8009128:	2800      	cmp	r0, #0
 800912a:	d0e8      	beq.n	80090fe <log10+0x9e>
 800912c:	9b08      	ldr	r3, [sp, #32]
 800912e:	b11b      	cbz	r3, 8009138 <log10+0xd8>
 8009130:	f001 fb7c 	bl	800a82c <__errno>
 8009134:	9b08      	ldr	r3, [sp, #32]
 8009136:	6003      	str	r3, [r0, #0]
 8009138:	ed9d 8b06 	vldr	d8, [sp, #24]
 800913c:	eeb0 0a48 	vmov.f32	s0, s16
 8009140:	eef0 0a68 	vmov.f32	s1, s17
 8009144:	b00b      	add	sp, #44	; 0x2c
 8009146:	ecbd 8b02 	vpop	{d8}
 800914a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800914c:	200001e0 	.word	0x200001e0
 8009150:	0801e888 	.word	0x0801e888
 8009154:	c7efffff 	.word	0xc7efffff
 8009158:	fff00000 	.word	0xfff00000
 800915c:	0800a8fa 	.word	0x0800a8fa

08009160 <pow>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	ed2d 8b04 	vpush	{d8-d9}
 8009168:	b08d      	sub	sp, #52	; 0x34
 800916a:	ec57 6b10 	vmov	r6, r7, d0
 800916e:	ec55 4b11 	vmov	r4, r5, d1
 8009172:	f000 fa4d 	bl	8009610 <__ieee754_pow>
 8009176:	4bae      	ldr	r3, [pc, #696]	; (8009430 <pow+0x2d0>)
 8009178:	eeb0 8a40 	vmov.f32	s16, s0
 800917c:	eef0 8a60 	vmov.f32	s17, s1
 8009180:	f993 9000 	ldrsb.w	r9, [r3]
 8009184:	f1b9 3fff 	cmp.w	r9, #4294967295
 8009188:	4698      	mov	r8, r3
 800918a:	d05f      	beq.n	800924c <pow+0xec>
 800918c:	4622      	mov	r2, r4
 800918e:	462b      	mov	r3, r5
 8009190:	4620      	mov	r0, r4
 8009192:	4629      	mov	r1, r5
 8009194:	f7f7 fd26 	bl	8000be4 <__aeabi_dcmpun>
 8009198:	4683      	mov	fp, r0
 800919a:	2800      	cmp	r0, #0
 800919c:	d156      	bne.n	800924c <pow+0xec>
 800919e:	4632      	mov	r2, r6
 80091a0:	463b      	mov	r3, r7
 80091a2:	4630      	mov	r0, r6
 80091a4:	4639      	mov	r1, r7
 80091a6:	f7f7 fd1d 	bl	8000be4 <__aeabi_dcmpun>
 80091aa:	9001      	str	r0, [sp, #4]
 80091ac:	b1e8      	cbz	r0, 80091ea <pow+0x8a>
 80091ae:	2200      	movs	r2, #0
 80091b0:	2300      	movs	r3, #0
 80091b2:	4620      	mov	r0, r4
 80091b4:	4629      	mov	r1, r5
 80091b6:	f7f7 fce3 	bl	8000b80 <__aeabi_dcmpeq>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d046      	beq.n	800924c <pow+0xec>
 80091be:	2301      	movs	r3, #1
 80091c0:	9302      	str	r3, [sp, #8]
 80091c2:	4b9c      	ldr	r3, [pc, #624]	; (8009434 <pow+0x2d4>)
 80091c4:	9303      	str	r3, [sp, #12]
 80091c6:	4b9c      	ldr	r3, [pc, #624]	; (8009438 <pow+0x2d8>)
 80091c8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80091cc:	2200      	movs	r2, #0
 80091ce:	f1b9 0f02 	cmp.w	r9, #2
 80091d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80091d6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80091da:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80091de:	d033      	beq.n	8009248 <pow+0xe8>
 80091e0:	a802      	add	r0, sp, #8
 80091e2:	f001 f82d 	bl	800a240 <matherr>
 80091e6:	bb48      	cbnz	r0, 800923c <pow+0xdc>
 80091e8:	e05e      	b.n	80092a8 <pow+0x148>
 80091ea:	f04f 0a00 	mov.w	sl, #0
 80091ee:	f04f 0b00 	mov.w	fp, #0
 80091f2:	4652      	mov	r2, sl
 80091f4:	465b      	mov	r3, fp
 80091f6:	4630      	mov	r0, r6
 80091f8:	4639      	mov	r1, r7
 80091fa:	f7f7 fcc1 	bl	8000b80 <__aeabi_dcmpeq>
 80091fe:	ec4b ab19 	vmov	d9, sl, fp
 8009202:	2800      	cmp	r0, #0
 8009204:	d055      	beq.n	80092b2 <pow+0x152>
 8009206:	4652      	mov	r2, sl
 8009208:	465b      	mov	r3, fp
 800920a:	4620      	mov	r0, r4
 800920c:	4629      	mov	r1, r5
 800920e:	f7f7 fcb7 	bl	8000b80 <__aeabi_dcmpeq>
 8009212:	4680      	mov	r8, r0
 8009214:	b318      	cbz	r0, 800925e <pow+0xfe>
 8009216:	2301      	movs	r3, #1
 8009218:	9302      	str	r3, [sp, #8]
 800921a:	4b86      	ldr	r3, [pc, #536]	; (8009434 <pow+0x2d4>)
 800921c:	9303      	str	r3, [sp, #12]
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	930a      	str	r3, [sp, #40]	; 0x28
 8009222:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009226:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800922a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800922e:	f1b9 0f00 	cmp.w	r9, #0
 8009232:	d0d5      	beq.n	80091e0 <pow+0x80>
 8009234:	4b80      	ldr	r3, [pc, #512]	; (8009438 <pow+0x2d8>)
 8009236:	2200      	movs	r2, #0
 8009238:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800923c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800923e:	b11b      	cbz	r3, 8009248 <pow+0xe8>
 8009240:	f001 faf4 	bl	800a82c <__errno>
 8009244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009246:	6003      	str	r3, [r0, #0]
 8009248:	ed9d 8b08 	vldr	d8, [sp, #32]
 800924c:	eeb0 0a48 	vmov.f32	s0, s16
 8009250:	eef0 0a68 	vmov.f32	s1, s17
 8009254:	b00d      	add	sp, #52	; 0x34
 8009256:	ecbd 8b04 	vpop	{d8-d9}
 800925a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925e:	ec45 4b10 	vmov	d0, r4, r5
 8009262:	f000 ffe5 	bl	800a230 <finite>
 8009266:	2800      	cmp	r0, #0
 8009268:	d0f0      	beq.n	800924c <pow+0xec>
 800926a:	4652      	mov	r2, sl
 800926c:	465b      	mov	r3, fp
 800926e:	4620      	mov	r0, r4
 8009270:	4629      	mov	r1, r5
 8009272:	f7f7 fc8f 	bl	8000b94 <__aeabi_dcmplt>
 8009276:	2800      	cmp	r0, #0
 8009278:	d0e8      	beq.n	800924c <pow+0xec>
 800927a:	2301      	movs	r3, #1
 800927c:	9302      	str	r3, [sp, #8]
 800927e:	4b6d      	ldr	r3, [pc, #436]	; (8009434 <pow+0x2d4>)
 8009280:	9303      	str	r3, [sp, #12]
 8009282:	4b6b      	ldr	r3, [pc, #428]	; (8009430 <pow+0x2d0>)
 8009284:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009288:	f993 3000 	ldrsb.w	r3, [r3]
 800928c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009290:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009294:	b913      	cbnz	r3, 800929c <pow+0x13c>
 8009296:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800929a:	e7a1      	b.n	80091e0 <pow+0x80>
 800929c:	4967      	ldr	r1, [pc, #412]	; (800943c <pow+0x2dc>)
 800929e:	2000      	movs	r0, #0
 80092a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d19b      	bne.n	80091e0 <pow+0x80>
 80092a8:	f001 fac0 	bl	800a82c <__errno>
 80092ac:	2321      	movs	r3, #33	; 0x21
 80092ae:	6003      	str	r3, [r0, #0]
 80092b0:	e7c4      	b.n	800923c <pow+0xdc>
 80092b2:	eeb0 0a48 	vmov.f32	s0, s16
 80092b6:	eef0 0a68 	vmov.f32	s1, s17
 80092ba:	f000 ffb9 	bl	800a230 <finite>
 80092be:	9001      	str	r0, [sp, #4]
 80092c0:	2800      	cmp	r0, #0
 80092c2:	f040 808a 	bne.w	80093da <pow+0x27a>
 80092c6:	ec47 6b10 	vmov	d0, r6, r7
 80092ca:	f000 ffb1 	bl	800a230 <finite>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	f000 8083 	beq.w	80093da <pow+0x27a>
 80092d4:	ec45 4b10 	vmov	d0, r4, r5
 80092d8:	f000 ffaa 	bl	800a230 <finite>
 80092dc:	2800      	cmp	r0, #0
 80092de:	d07c      	beq.n	80093da <pow+0x27a>
 80092e0:	ec53 2b18 	vmov	r2, r3, d8
 80092e4:	ee18 0a10 	vmov	r0, s16
 80092e8:	4619      	mov	r1, r3
 80092ea:	f7f7 fc7b 	bl	8000be4 <__aeabi_dcmpun>
 80092ee:	f998 9000 	ldrsb.w	r9, [r8]
 80092f2:	4b50      	ldr	r3, [pc, #320]	; (8009434 <pow+0x2d4>)
 80092f4:	b1b0      	cbz	r0, 8009324 <pow+0x1c4>
 80092f6:	2201      	movs	r2, #1
 80092f8:	9303      	str	r3, [sp, #12]
 80092fa:	9b01      	ldr	r3, [sp, #4]
 80092fc:	9202      	str	r2, [sp, #8]
 80092fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009300:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009304:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009308:	f1b9 0f00 	cmp.w	r9, #0
 800930c:	d0c3      	beq.n	8009296 <pow+0x136>
 800930e:	4652      	mov	r2, sl
 8009310:	465b      	mov	r3, fp
 8009312:	4650      	mov	r0, sl
 8009314:	4659      	mov	r1, fp
 8009316:	f7f7 faf5 	bl	8000904 <__aeabi_ddiv>
 800931a:	f1b9 0f02 	cmp.w	r9, #2
 800931e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009322:	e7c0      	b.n	80092a6 <pow+0x146>
 8009324:	2203      	movs	r2, #3
 8009326:	9202      	str	r2, [sp, #8]
 8009328:	9303      	str	r3, [sp, #12]
 800932a:	900a      	str	r0, [sp, #40]	; 0x28
 800932c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009330:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009334:	f1b9 0f00 	cmp.w	r9, #0
 8009338:	d12c      	bne.n	8009394 <pow+0x234>
 800933a:	4b41      	ldr	r3, [pc, #260]	; (8009440 <pow+0x2e0>)
 800933c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009340:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009344:	4630      	mov	r0, r6
 8009346:	4652      	mov	r2, sl
 8009348:	465b      	mov	r3, fp
 800934a:	4639      	mov	r1, r7
 800934c:	f7f7 fc22 	bl	8000b94 <__aeabi_dcmplt>
 8009350:	2800      	cmp	r0, #0
 8009352:	d066      	beq.n	8009422 <pow+0x2c2>
 8009354:	2200      	movs	r2, #0
 8009356:	4b3b      	ldr	r3, [pc, #236]	; (8009444 <pow+0x2e4>)
 8009358:	4620      	mov	r0, r4
 800935a:	4629      	mov	r1, r5
 800935c:	f7f7 f9a8 	bl	80006b0 <__aeabi_dmul>
 8009360:	4604      	mov	r4, r0
 8009362:	460d      	mov	r5, r1
 8009364:	ec45 4b10 	vmov	d0, r4, r5
 8009368:	f000 ff76 	bl	800a258 <rint>
 800936c:	4620      	mov	r0, r4
 800936e:	ec53 2b10 	vmov	r2, r3, d0
 8009372:	4629      	mov	r1, r5
 8009374:	f7f7 fc04 	bl	8000b80 <__aeabi_dcmpeq>
 8009378:	b920      	cbnz	r0, 8009384 <pow+0x224>
 800937a:	4b33      	ldr	r3, [pc, #204]	; (8009448 <pow+0x2e8>)
 800937c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009380:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009384:	f998 3000 	ldrsb.w	r3, [r8]
 8009388:	2b02      	cmp	r3, #2
 800938a:	d14a      	bne.n	8009422 <pow+0x2c2>
 800938c:	f001 fa4e 	bl	800a82c <__errno>
 8009390:	2322      	movs	r3, #34	; 0x22
 8009392:	e78c      	b.n	80092ae <pow+0x14e>
 8009394:	4b2d      	ldr	r3, [pc, #180]	; (800944c <pow+0x2ec>)
 8009396:	2200      	movs	r2, #0
 8009398:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800939c:	4630      	mov	r0, r6
 800939e:	4652      	mov	r2, sl
 80093a0:	465b      	mov	r3, fp
 80093a2:	4639      	mov	r1, r7
 80093a4:	f7f7 fbf6 	bl	8000b94 <__aeabi_dcmplt>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d0eb      	beq.n	8009384 <pow+0x224>
 80093ac:	2200      	movs	r2, #0
 80093ae:	4b25      	ldr	r3, [pc, #148]	; (8009444 <pow+0x2e4>)
 80093b0:	4620      	mov	r0, r4
 80093b2:	4629      	mov	r1, r5
 80093b4:	f7f7 f97c 	bl	80006b0 <__aeabi_dmul>
 80093b8:	4604      	mov	r4, r0
 80093ba:	460d      	mov	r5, r1
 80093bc:	ec45 4b10 	vmov	d0, r4, r5
 80093c0:	f000 ff4a 	bl	800a258 <rint>
 80093c4:	4620      	mov	r0, r4
 80093c6:	ec53 2b10 	vmov	r2, r3, d0
 80093ca:	4629      	mov	r1, r5
 80093cc:	f7f7 fbd8 	bl	8000b80 <__aeabi_dcmpeq>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d1d7      	bne.n	8009384 <pow+0x224>
 80093d4:	2200      	movs	r2, #0
 80093d6:	4b19      	ldr	r3, [pc, #100]	; (800943c <pow+0x2dc>)
 80093d8:	e7d2      	b.n	8009380 <pow+0x220>
 80093da:	2200      	movs	r2, #0
 80093dc:	2300      	movs	r3, #0
 80093de:	ec51 0b18 	vmov	r0, r1, d8
 80093e2:	f7f7 fbcd 	bl	8000b80 <__aeabi_dcmpeq>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	f43f af30 	beq.w	800924c <pow+0xec>
 80093ec:	ec47 6b10 	vmov	d0, r6, r7
 80093f0:	f000 ff1e 	bl	800a230 <finite>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	f43f af29 	beq.w	800924c <pow+0xec>
 80093fa:	ec45 4b10 	vmov	d0, r4, r5
 80093fe:	f000 ff17 	bl	800a230 <finite>
 8009402:	2800      	cmp	r0, #0
 8009404:	f43f af22 	beq.w	800924c <pow+0xec>
 8009408:	2304      	movs	r3, #4
 800940a:	9302      	str	r3, [sp, #8]
 800940c:	4b09      	ldr	r3, [pc, #36]	; (8009434 <pow+0x2d4>)
 800940e:	9303      	str	r3, [sp, #12]
 8009410:	2300      	movs	r3, #0
 8009412:	930a      	str	r3, [sp, #40]	; 0x28
 8009414:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009418:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800941c:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009420:	e7b0      	b.n	8009384 <pow+0x224>
 8009422:	a802      	add	r0, sp, #8
 8009424:	f000 ff0c 	bl	800a240 <matherr>
 8009428:	2800      	cmp	r0, #0
 800942a:	f47f af07 	bne.w	800923c <pow+0xdc>
 800942e:	e7ad      	b.n	800938c <pow+0x22c>
 8009430:	200001e0 	.word	0x200001e0
 8009434:	0801e88e 	.word	0x0801e88e
 8009438:	3ff00000 	.word	0x3ff00000
 800943c:	fff00000 	.word	0xfff00000
 8009440:	47efffff 	.word	0x47efffff
 8009444:	3fe00000 	.word	0x3fe00000
 8009448:	c7efffff 	.word	0xc7efffff
 800944c:	7ff00000 	.word	0x7ff00000

08009450 <sqrtf>:
 8009450:	b510      	push	{r4, lr}
 8009452:	ed2d 8b02 	vpush	{d8}
 8009456:	b08a      	sub	sp, #40	; 0x28
 8009458:	eeb0 8a40 	vmov.f32	s16, s0
 800945c:	f000 fe9a 	bl	800a194 <__ieee754_sqrtf>
 8009460:	4b21      	ldr	r3, [pc, #132]	; (80094e8 <sqrtf+0x98>)
 8009462:	f993 4000 	ldrsb.w	r4, [r3]
 8009466:	1c63      	adds	r3, r4, #1
 8009468:	d02c      	beq.n	80094c4 <sqrtf+0x74>
 800946a:	eeb4 8a48 	vcmp.f32	s16, s16
 800946e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009472:	d627      	bvs.n	80094c4 <sqrtf+0x74>
 8009474:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800947c:	d522      	bpl.n	80094c4 <sqrtf+0x74>
 800947e:	2301      	movs	r3, #1
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	4b1a      	ldr	r3, [pc, #104]	; (80094ec <sqrtf+0x9c>)
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	ee18 0a10 	vmov	r0, s16
 800948a:	2300      	movs	r3, #0
 800948c:	9308      	str	r3, [sp, #32]
 800948e:	f7f7 f8bb 	bl	8000608 <__aeabi_f2d>
 8009492:	2200      	movs	r2, #0
 8009494:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800949c:	2300      	movs	r3, #0
 800949e:	b9ac      	cbnz	r4, 80094cc <sqrtf+0x7c>
 80094a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80094a4:	4668      	mov	r0, sp
 80094a6:	f000 fecb 	bl	800a240 <matherr>
 80094aa:	b1b8      	cbz	r0, 80094dc <sqrtf+0x8c>
 80094ac:	9b08      	ldr	r3, [sp, #32]
 80094ae:	b11b      	cbz	r3, 80094b8 <sqrtf+0x68>
 80094b0:	f001 f9bc 	bl	800a82c <__errno>
 80094b4:	9b08      	ldr	r3, [sp, #32]
 80094b6:	6003      	str	r3, [r0, #0]
 80094b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094bc:	f7f7 fbf0 	bl	8000ca0 <__aeabi_d2f>
 80094c0:	ee00 0a10 	vmov	s0, r0
 80094c4:	b00a      	add	sp, #40	; 0x28
 80094c6:	ecbd 8b02 	vpop	{d8}
 80094ca:	bd10      	pop	{r4, pc}
 80094cc:	4610      	mov	r0, r2
 80094ce:	4619      	mov	r1, r3
 80094d0:	f7f7 fa18 	bl	8000904 <__aeabi_ddiv>
 80094d4:	2c02      	cmp	r4, #2
 80094d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80094da:	d1e3      	bne.n	80094a4 <sqrtf+0x54>
 80094dc:	f001 f9a6 	bl	800a82c <__errno>
 80094e0:	2321      	movs	r3, #33	; 0x21
 80094e2:	6003      	str	r3, [r0, #0]
 80094e4:	e7e2      	b.n	80094ac <sqrtf+0x5c>
 80094e6:	bf00      	nop
 80094e8:	200001e0 	.word	0x200001e0
 80094ec:	0801e892 	.word	0x0801e892

080094f0 <__ieee754_log10>:
 80094f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094f4:	ec55 4b10 	vmov	r4, r5, d0
 80094f8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80094fc:	ee10 2a10 	vmov	r2, s0
 8009500:	462b      	mov	r3, r5
 8009502:	da30      	bge.n	8009566 <__ieee754_log10+0x76>
 8009504:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8009508:	430a      	orrs	r2, r1
 800950a:	d10a      	bne.n	8009522 <__ieee754_log10+0x32>
 800950c:	493c      	ldr	r1, [pc, #240]	; (8009600 <__ieee754_log10+0x110>)
 800950e:	2200      	movs	r2, #0
 8009510:	2300      	movs	r3, #0
 8009512:	2000      	movs	r0, #0
 8009514:	f7f7 f9f6 	bl	8000904 <__aeabi_ddiv>
 8009518:	ec41 0b10 	vmov	d0, r0, r1
 800951c:	b003      	add	sp, #12
 800951e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009522:	2d00      	cmp	r5, #0
 8009524:	da09      	bge.n	800953a <__ieee754_log10+0x4a>
 8009526:	ee10 2a10 	vmov	r2, s0
 800952a:	462b      	mov	r3, r5
 800952c:	4620      	mov	r0, r4
 800952e:	4629      	mov	r1, r5
 8009530:	f7f6 ff0a 	bl	8000348 <__aeabi_dsub>
 8009534:	2200      	movs	r2, #0
 8009536:	2300      	movs	r3, #0
 8009538:	e7ec      	b.n	8009514 <__ieee754_log10+0x24>
 800953a:	2200      	movs	r2, #0
 800953c:	4b31      	ldr	r3, [pc, #196]	; (8009604 <__ieee754_log10+0x114>)
 800953e:	4629      	mov	r1, r5
 8009540:	ee10 0a10 	vmov	r0, s0
 8009544:	f7f7 f8b4 	bl	80006b0 <__aeabi_dmul>
 8009548:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800954c:	4604      	mov	r4, r0
 800954e:	460d      	mov	r5, r1
 8009550:	460b      	mov	r3, r1
 8009552:	492d      	ldr	r1, [pc, #180]	; (8009608 <__ieee754_log10+0x118>)
 8009554:	428b      	cmp	r3, r1
 8009556:	dd08      	ble.n	800956a <__ieee754_log10+0x7a>
 8009558:	4622      	mov	r2, r4
 800955a:	462b      	mov	r3, r5
 800955c:	4620      	mov	r0, r4
 800955e:	4629      	mov	r1, r5
 8009560:	f7f6 fef4 	bl	800034c <__adddf3>
 8009564:	e7d8      	b.n	8009518 <__ieee754_log10+0x28>
 8009566:	2200      	movs	r2, #0
 8009568:	e7f3      	b.n	8009552 <__ieee754_log10+0x62>
 800956a:	1518      	asrs	r0, r3, #20
 800956c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009570:	4410      	add	r0, r2
 8009572:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8009576:	4448      	add	r0, r9
 8009578:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800957c:	f7f7 f832 	bl	80005e4 <__aeabi_i2d>
 8009580:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8009584:	3303      	adds	r3, #3
 8009586:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800958a:	ec45 4b10 	vmov	d0, r4, r5
 800958e:	4606      	mov	r6, r0
 8009590:	460f      	mov	r7, r1
 8009592:	f000 ff65 	bl	800a460 <__ieee754_log>
 8009596:	a314      	add	r3, pc, #80	; (adr r3, 80095e8 <__ieee754_log10+0xf8>)
 8009598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959c:	4630      	mov	r0, r6
 800959e:	4639      	mov	r1, r7
 80095a0:	ed8d 0b00 	vstr	d0, [sp]
 80095a4:	f7f7 f884 	bl	80006b0 <__aeabi_dmul>
 80095a8:	ed9d 0b00 	vldr	d0, [sp]
 80095ac:	4604      	mov	r4, r0
 80095ae:	460d      	mov	r5, r1
 80095b0:	a30f      	add	r3, pc, #60	; (adr r3, 80095f0 <__ieee754_log10+0x100>)
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	ec51 0b10 	vmov	r0, r1, d0
 80095ba:	f7f7 f879 	bl	80006b0 <__aeabi_dmul>
 80095be:	4602      	mov	r2, r0
 80095c0:	460b      	mov	r3, r1
 80095c2:	4620      	mov	r0, r4
 80095c4:	4629      	mov	r1, r5
 80095c6:	f7f6 fec1 	bl	800034c <__adddf3>
 80095ca:	a30b      	add	r3, pc, #44	; (adr r3, 80095f8 <__ieee754_log10+0x108>)
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	4604      	mov	r4, r0
 80095d2:	460d      	mov	r5, r1
 80095d4:	4630      	mov	r0, r6
 80095d6:	4639      	mov	r1, r7
 80095d8:	f7f7 f86a 	bl	80006b0 <__aeabi_dmul>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	4620      	mov	r0, r4
 80095e2:	4629      	mov	r1, r5
 80095e4:	e7bc      	b.n	8009560 <__ieee754_log10+0x70>
 80095e6:	bf00      	nop
 80095e8:	11f12b36 	.word	0x11f12b36
 80095ec:	3d59fef3 	.word	0x3d59fef3
 80095f0:	1526e50e 	.word	0x1526e50e
 80095f4:	3fdbcb7b 	.word	0x3fdbcb7b
 80095f8:	509f6000 	.word	0x509f6000
 80095fc:	3fd34413 	.word	0x3fd34413
 8009600:	c3500000 	.word	0xc3500000
 8009604:	43500000 	.word	0x43500000
 8009608:	7fefffff 	.word	0x7fefffff
 800960c:	00000000 	.word	0x00000000

08009610 <__ieee754_pow>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	b091      	sub	sp, #68	; 0x44
 8009616:	ed8d 1b00 	vstr	d1, [sp]
 800961a:	e89d 0204 	ldmia.w	sp, {r2, r9}
 800961e:	ec57 6b10 	vmov	r6, r7, d0
 8009622:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009626:	ea58 0302 	orrs.w	r3, r8, r2
 800962a:	ee10 aa10 	vmov	sl, s0
 800962e:	463d      	mov	r5, r7
 8009630:	f000 84bd 	beq.w	8009fae <__ieee754_pow+0x99e>
 8009634:	4b78      	ldr	r3, [pc, #480]	; (8009818 <__ieee754_pow+0x208>)
 8009636:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800963a:	429c      	cmp	r4, r3
 800963c:	dc09      	bgt.n	8009652 <__ieee754_pow+0x42>
 800963e:	d103      	bne.n	8009648 <__ieee754_pow+0x38>
 8009640:	b93e      	cbnz	r6, 8009652 <__ieee754_pow+0x42>
 8009642:	45a0      	cmp	r8, r4
 8009644:	dc0d      	bgt.n	8009662 <__ieee754_pow+0x52>
 8009646:	e001      	b.n	800964c <__ieee754_pow+0x3c>
 8009648:	4598      	cmp	r8, r3
 800964a:	dc02      	bgt.n	8009652 <__ieee754_pow+0x42>
 800964c:	4598      	cmp	r8, r3
 800964e:	d10e      	bne.n	800966e <__ieee754_pow+0x5e>
 8009650:	b16a      	cbz	r2, 800966e <__ieee754_pow+0x5e>
 8009652:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009656:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800965a:	ea54 030a 	orrs.w	r3, r4, sl
 800965e:	f000 84a6 	beq.w	8009fae <__ieee754_pow+0x99e>
 8009662:	486e      	ldr	r0, [pc, #440]	; (800981c <__ieee754_pow+0x20c>)
 8009664:	b011      	add	sp, #68	; 0x44
 8009666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966a:	f000 bded 	b.w	800a248 <nan>
 800966e:	2d00      	cmp	r5, #0
 8009670:	da53      	bge.n	800971a <__ieee754_pow+0x10a>
 8009672:	4b6b      	ldr	r3, [pc, #428]	; (8009820 <__ieee754_pow+0x210>)
 8009674:	4598      	cmp	r8, r3
 8009676:	dc4d      	bgt.n	8009714 <__ieee754_pow+0x104>
 8009678:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800967c:	4598      	cmp	r8, r3
 800967e:	dd4c      	ble.n	800971a <__ieee754_pow+0x10a>
 8009680:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009684:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009688:	2b14      	cmp	r3, #20
 800968a:	dd26      	ble.n	80096da <__ieee754_pow+0xca>
 800968c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009690:	fa22 f103 	lsr.w	r1, r2, r3
 8009694:	fa01 f303 	lsl.w	r3, r1, r3
 8009698:	429a      	cmp	r2, r3
 800969a:	d13e      	bne.n	800971a <__ieee754_pow+0x10a>
 800969c:	f001 0101 	and.w	r1, r1, #1
 80096a0:	f1c1 0b02 	rsb	fp, r1, #2
 80096a4:	2a00      	cmp	r2, #0
 80096a6:	d15b      	bne.n	8009760 <__ieee754_pow+0x150>
 80096a8:	4b5b      	ldr	r3, [pc, #364]	; (8009818 <__ieee754_pow+0x208>)
 80096aa:	4598      	cmp	r8, r3
 80096ac:	d124      	bne.n	80096f8 <__ieee754_pow+0xe8>
 80096ae:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80096b2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80096b6:	ea53 030a 	orrs.w	r3, r3, sl
 80096ba:	f000 8478 	beq.w	8009fae <__ieee754_pow+0x99e>
 80096be:	4b59      	ldr	r3, [pc, #356]	; (8009824 <__ieee754_pow+0x214>)
 80096c0:	429c      	cmp	r4, r3
 80096c2:	dd2d      	ble.n	8009720 <__ieee754_pow+0x110>
 80096c4:	f1b9 0f00 	cmp.w	r9, #0
 80096c8:	f280 8475 	bge.w	8009fb6 <__ieee754_pow+0x9a6>
 80096cc:	2000      	movs	r0, #0
 80096ce:	2100      	movs	r1, #0
 80096d0:	ec41 0b10 	vmov	d0, r0, r1
 80096d4:	b011      	add	sp, #68	; 0x44
 80096d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096da:	2a00      	cmp	r2, #0
 80096dc:	d13e      	bne.n	800975c <__ieee754_pow+0x14c>
 80096de:	f1c3 0314 	rsb	r3, r3, #20
 80096e2:	fa48 f103 	asr.w	r1, r8, r3
 80096e6:	fa01 f303 	lsl.w	r3, r1, r3
 80096ea:	4598      	cmp	r8, r3
 80096ec:	f040 846b 	bne.w	8009fc6 <__ieee754_pow+0x9b6>
 80096f0:	f001 0101 	and.w	r1, r1, #1
 80096f4:	f1c1 0b02 	rsb	fp, r1, #2
 80096f8:	4b4b      	ldr	r3, [pc, #300]	; (8009828 <__ieee754_pow+0x218>)
 80096fa:	4598      	cmp	r8, r3
 80096fc:	d118      	bne.n	8009730 <__ieee754_pow+0x120>
 80096fe:	f1b9 0f00 	cmp.w	r9, #0
 8009702:	f280 845c 	bge.w	8009fbe <__ieee754_pow+0x9ae>
 8009706:	4948      	ldr	r1, [pc, #288]	; (8009828 <__ieee754_pow+0x218>)
 8009708:	4632      	mov	r2, r6
 800970a:	463b      	mov	r3, r7
 800970c:	2000      	movs	r0, #0
 800970e:	f7f7 f8f9 	bl	8000904 <__aeabi_ddiv>
 8009712:	e7dd      	b.n	80096d0 <__ieee754_pow+0xc0>
 8009714:	f04f 0b02 	mov.w	fp, #2
 8009718:	e7c4      	b.n	80096a4 <__ieee754_pow+0x94>
 800971a:	f04f 0b00 	mov.w	fp, #0
 800971e:	e7c1      	b.n	80096a4 <__ieee754_pow+0x94>
 8009720:	f1b9 0f00 	cmp.w	r9, #0
 8009724:	dad2      	bge.n	80096cc <__ieee754_pow+0xbc>
 8009726:	e89d 0009 	ldmia.w	sp, {r0, r3}
 800972a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800972e:	e7cf      	b.n	80096d0 <__ieee754_pow+0xc0>
 8009730:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009734:	d106      	bne.n	8009744 <__ieee754_pow+0x134>
 8009736:	4632      	mov	r2, r6
 8009738:	463b      	mov	r3, r7
 800973a:	4610      	mov	r0, r2
 800973c:	4619      	mov	r1, r3
 800973e:	f7f6 ffb7 	bl	80006b0 <__aeabi_dmul>
 8009742:	e7c5      	b.n	80096d0 <__ieee754_pow+0xc0>
 8009744:	4b39      	ldr	r3, [pc, #228]	; (800982c <__ieee754_pow+0x21c>)
 8009746:	4599      	cmp	r9, r3
 8009748:	d10a      	bne.n	8009760 <__ieee754_pow+0x150>
 800974a:	2d00      	cmp	r5, #0
 800974c:	db08      	blt.n	8009760 <__ieee754_pow+0x150>
 800974e:	ec47 6b10 	vmov	d0, r6, r7
 8009752:	b011      	add	sp, #68	; 0x44
 8009754:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009758:	f000 bc6c 	b.w	800a034 <__ieee754_sqrt>
 800975c:	f04f 0b00 	mov.w	fp, #0
 8009760:	ec47 6b10 	vmov	d0, r6, r7
 8009764:	f000 fd5d 	bl	800a222 <fabs>
 8009768:	ec51 0b10 	vmov	r0, r1, d0
 800976c:	f1ba 0f00 	cmp.w	sl, #0
 8009770:	d127      	bne.n	80097c2 <__ieee754_pow+0x1b2>
 8009772:	b124      	cbz	r4, 800977e <__ieee754_pow+0x16e>
 8009774:	4b2c      	ldr	r3, [pc, #176]	; (8009828 <__ieee754_pow+0x218>)
 8009776:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800977a:	429a      	cmp	r2, r3
 800977c:	d121      	bne.n	80097c2 <__ieee754_pow+0x1b2>
 800977e:	f1b9 0f00 	cmp.w	r9, #0
 8009782:	da05      	bge.n	8009790 <__ieee754_pow+0x180>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	2000      	movs	r0, #0
 800978a:	4927      	ldr	r1, [pc, #156]	; (8009828 <__ieee754_pow+0x218>)
 800978c:	f7f7 f8ba 	bl	8000904 <__aeabi_ddiv>
 8009790:	2d00      	cmp	r5, #0
 8009792:	da9d      	bge.n	80096d0 <__ieee754_pow+0xc0>
 8009794:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009798:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800979c:	ea54 030b 	orrs.w	r3, r4, fp
 80097a0:	d108      	bne.n	80097b4 <__ieee754_pow+0x1a4>
 80097a2:	4602      	mov	r2, r0
 80097a4:	460b      	mov	r3, r1
 80097a6:	4610      	mov	r0, r2
 80097a8:	4619      	mov	r1, r3
 80097aa:	f7f6 fdcd 	bl	8000348 <__aeabi_dsub>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	e7ac      	b.n	800970e <__ieee754_pow+0xfe>
 80097b4:	f1bb 0f01 	cmp.w	fp, #1
 80097b8:	d18a      	bne.n	80096d0 <__ieee754_pow+0xc0>
 80097ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097be:	4619      	mov	r1, r3
 80097c0:	e786      	b.n	80096d0 <__ieee754_pow+0xc0>
 80097c2:	0fed      	lsrs	r5, r5, #31
 80097c4:	1e6b      	subs	r3, r5, #1
 80097c6:	930d      	str	r3, [sp, #52]	; 0x34
 80097c8:	ea5b 0303 	orrs.w	r3, fp, r3
 80097cc:	d102      	bne.n	80097d4 <__ieee754_pow+0x1c4>
 80097ce:	4632      	mov	r2, r6
 80097d0:	463b      	mov	r3, r7
 80097d2:	e7e8      	b.n	80097a6 <__ieee754_pow+0x196>
 80097d4:	4b16      	ldr	r3, [pc, #88]	; (8009830 <__ieee754_pow+0x220>)
 80097d6:	4598      	cmp	r8, r3
 80097d8:	f340 80fe 	ble.w	80099d8 <__ieee754_pow+0x3c8>
 80097dc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80097e0:	4598      	cmp	r8, r3
 80097e2:	dd0a      	ble.n	80097fa <__ieee754_pow+0x1ea>
 80097e4:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <__ieee754_pow+0x214>)
 80097e6:	429c      	cmp	r4, r3
 80097e8:	dc0d      	bgt.n	8009806 <__ieee754_pow+0x1f6>
 80097ea:	f1b9 0f00 	cmp.w	r9, #0
 80097ee:	f6bf af6d 	bge.w	80096cc <__ieee754_pow+0xbc>
 80097f2:	a307      	add	r3, pc, #28	; (adr r3, 8009810 <__ieee754_pow+0x200>)
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	e79f      	b.n	800973a <__ieee754_pow+0x12a>
 80097fa:	4b0e      	ldr	r3, [pc, #56]	; (8009834 <__ieee754_pow+0x224>)
 80097fc:	429c      	cmp	r4, r3
 80097fe:	ddf4      	ble.n	80097ea <__ieee754_pow+0x1da>
 8009800:	4b09      	ldr	r3, [pc, #36]	; (8009828 <__ieee754_pow+0x218>)
 8009802:	429c      	cmp	r4, r3
 8009804:	dd18      	ble.n	8009838 <__ieee754_pow+0x228>
 8009806:	f1b9 0f00 	cmp.w	r9, #0
 800980a:	dcf2      	bgt.n	80097f2 <__ieee754_pow+0x1e2>
 800980c:	e75e      	b.n	80096cc <__ieee754_pow+0xbc>
 800980e:	bf00      	nop
 8009810:	8800759c 	.word	0x8800759c
 8009814:	7e37e43c 	.word	0x7e37e43c
 8009818:	7ff00000 	.word	0x7ff00000
 800981c:	0800a8fa 	.word	0x0800a8fa
 8009820:	433fffff 	.word	0x433fffff
 8009824:	3fefffff 	.word	0x3fefffff
 8009828:	3ff00000 	.word	0x3ff00000
 800982c:	3fe00000 	.word	0x3fe00000
 8009830:	41e00000 	.word	0x41e00000
 8009834:	3feffffe 	.word	0x3feffffe
 8009838:	2200      	movs	r2, #0
 800983a:	4b63      	ldr	r3, [pc, #396]	; (80099c8 <__ieee754_pow+0x3b8>)
 800983c:	f7f6 fd84 	bl	8000348 <__aeabi_dsub>
 8009840:	a355      	add	r3, pc, #340	; (adr r3, 8009998 <__ieee754_pow+0x388>)
 8009842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009846:	4604      	mov	r4, r0
 8009848:	460d      	mov	r5, r1
 800984a:	f7f6 ff31 	bl	80006b0 <__aeabi_dmul>
 800984e:	a354      	add	r3, pc, #336	; (adr r3, 80099a0 <__ieee754_pow+0x390>)
 8009850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009854:	4606      	mov	r6, r0
 8009856:	460f      	mov	r7, r1
 8009858:	4620      	mov	r0, r4
 800985a:	4629      	mov	r1, r5
 800985c:	f7f6 ff28 	bl	80006b0 <__aeabi_dmul>
 8009860:	2200      	movs	r2, #0
 8009862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009866:	4b59      	ldr	r3, [pc, #356]	; (80099cc <__ieee754_pow+0x3bc>)
 8009868:	4620      	mov	r0, r4
 800986a:	4629      	mov	r1, r5
 800986c:	f7f6 ff20 	bl	80006b0 <__aeabi_dmul>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	a14c      	add	r1, pc, #304	; (adr r1, 80099a8 <__ieee754_pow+0x398>)
 8009876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800987a:	f7f6 fd65 	bl	8000348 <__aeabi_dsub>
 800987e:	4622      	mov	r2, r4
 8009880:	462b      	mov	r3, r5
 8009882:	f7f6 ff15 	bl	80006b0 <__aeabi_dmul>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	2000      	movs	r0, #0
 800988c:	4950      	ldr	r1, [pc, #320]	; (80099d0 <__ieee754_pow+0x3c0>)
 800988e:	f7f6 fd5b 	bl	8000348 <__aeabi_dsub>
 8009892:	4622      	mov	r2, r4
 8009894:	462b      	mov	r3, r5
 8009896:	4680      	mov	r8, r0
 8009898:	4689      	mov	r9, r1
 800989a:	4620      	mov	r0, r4
 800989c:	4629      	mov	r1, r5
 800989e:	f7f6 ff07 	bl	80006b0 <__aeabi_dmul>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	4640      	mov	r0, r8
 80098a8:	4649      	mov	r1, r9
 80098aa:	f7f6 ff01 	bl	80006b0 <__aeabi_dmul>
 80098ae:	a340      	add	r3, pc, #256	; (adr r3, 80099b0 <__ieee754_pow+0x3a0>)
 80098b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b4:	f7f6 fefc 	bl	80006b0 <__aeabi_dmul>
 80098b8:	4602      	mov	r2, r0
 80098ba:	460b      	mov	r3, r1
 80098bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098c0:	f7f6 fd42 	bl	8000348 <__aeabi_dsub>
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	4604      	mov	r4, r0
 80098ca:	460d      	mov	r5, r1
 80098cc:	4630      	mov	r0, r6
 80098ce:	4639      	mov	r1, r7
 80098d0:	f7f6 fd3c 	bl	800034c <__adddf3>
 80098d4:	2000      	movs	r0, #0
 80098d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098da:	4632      	mov	r2, r6
 80098dc:	463b      	mov	r3, r7
 80098de:	f7f6 fd33 	bl	8000348 <__aeabi_dsub>
 80098e2:	4602      	mov	r2, r0
 80098e4:	460b      	mov	r3, r1
 80098e6:	4620      	mov	r0, r4
 80098e8:	4629      	mov	r1, r5
 80098ea:	f7f6 fd2d 	bl	8000348 <__aeabi_dsub>
 80098ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098f0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80098f4:	4313      	orrs	r3, r2
 80098f6:	4606      	mov	r6, r0
 80098f8:	460f      	mov	r7, r1
 80098fa:	f040 81eb 	bne.w	8009cd4 <__ieee754_pow+0x6c4>
 80098fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80099b8 <__ieee754_pow+0x3a8>
 8009902:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009906:	2400      	movs	r4, #0
 8009908:	4622      	mov	r2, r4
 800990a:	462b      	mov	r3, r5
 800990c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009910:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009914:	f7f6 fd18 	bl	8000348 <__aeabi_dsub>
 8009918:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800991c:	f7f6 fec8 	bl	80006b0 <__aeabi_dmul>
 8009920:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009924:	4680      	mov	r8, r0
 8009926:	4689      	mov	r9, r1
 8009928:	4630      	mov	r0, r6
 800992a:	4639      	mov	r1, r7
 800992c:	f7f6 fec0 	bl	80006b0 <__aeabi_dmul>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4640      	mov	r0, r8
 8009936:	4649      	mov	r1, r9
 8009938:	f7f6 fd08 	bl	800034c <__adddf3>
 800993c:	4622      	mov	r2, r4
 800993e:	462b      	mov	r3, r5
 8009940:	4680      	mov	r8, r0
 8009942:	4689      	mov	r9, r1
 8009944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009948:	f7f6 feb2 	bl	80006b0 <__aeabi_dmul>
 800994c:	460b      	mov	r3, r1
 800994e:	4604      	mov	r4, r0
 8009950:	460d      	mov	r5, r1
 8009952:	4602      	mov	r2, r0
 8009954:	4649      	mov	r1, r9
 8009956:	4640      	mov	r0, r8
 8009958:	e9cd 4500 	strd	r4, r5, [sp]
 800995c:	f7f6 fcf6 	bl	800034c <__adddf3>
 8009960:	4b1c      	ldr	r3, [pc, #112]	; (80099d4 <__ieee754_pow+0x3c4>)
 8009962:	4299      	cmp	r1, r3
 8009964:	4606      	mov	r6, r0
 8009966:	460f      	mov	r7, r1
 8009968:	468b      	mov	fp, r1
 800996a:	f340 82f7 	ble.w	8009f5c <__ieee754_pow+0x94c>
 800996e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009972:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009976:	4303      	orrs	r3, r0
 8009978:	f000 81ea 	beq.w	8009d50 <__ieee754_pow+0x740>
 800997c:	a310      	add	r3, pc, #64	; (adr r3, 80099c0 <__ieee754_pow+0x3b0>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009986:	f7f6 fe93 	bl	80006b0 <__aeabi_dmul>
 800998a:	a30d      	add	r3, pc, #52	; (adr r3, 80099c0 <__ieee754_pow+0x3b0>)
 800998c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009990:	e6d5      	b.n	800973e <__ieee754_pow+0x12e>
 8009992:	bf00      	nop
 8009994:	f3af 8000 	nop.w
 8009998:	60000000 	.word	0x60000000
 800999c:	3ff71547 	.word	0x3ff71547
 80099a0:	f85ddf44 	.word	0xf85ddf44
 80099a4:	3e54ae0b 	.word	0x3e54ae0b
 80099a8:	55555555 	.word	0x55555555
 80099ac:	3fd55555 	.word	0x3fd55555
 80099b0:	652b82fe 	.word	0x652b82fe
 80099b4:	3ff71547 	.word	0x3ff71547
 80099b8:	00000000 	.word	0x00000000
 80099bc:	bff00000 	.word	0xbff00000
 80099c0:	8800759c 	.word	0x8800759c
 80099c4:	7e37e43c 	.word	0x7e37e43c
 80099c8:	3ff00000 	.word	0x3ff00000
 80099cc:	3fd00000 	.word	0x3fd00000
 80099d0:	3fe00000 	.word	0x3fe00000
 80099d4:	408fffff 	.word	0x408fffff
 80099d8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80099dc:	f04f 0200 	mov.w	r2, #0
 80099e0:	da05      	bge.n	80099ee <__ieee754_pow+0x3de>
 80099e2:	4bd3      	ldr	r3, [pc, #844]	; (8009d30 <__ieee754_pow+0x720>)
 80099e4:	f7f6 fe64 	bl	80006b0 <__aeabi_dmul>
 80099e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80099ec:	460c      	mov	r4, r1
 80099ee:	1523      	asrs	r3, r4, #20
 80099f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80099f4:	4413      	add	r3, r2
 80099f6:	9307      	str	r3, [sp, #28]
 80099f8:	4bce      	ldr	r3, [pc, #824]	; (8009d34 <__ieee754_pow+0x724>)
 80099fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80099fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009a02:	429c      	cmp	r4, r3
 8009a04:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009a08:	dd08      	ble.n	8009a1c <__ieee754_pow+0x40c>
 8009a0a:	4bcb      	ldr	r3, [pc, #812]	; (8009d38 <__ieee754_pow+0x728>)
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	f340 815e 	ble.w	8009cce <__ieee754_pow+0x6be>
 8009a12:	9b07      	ldr	r3, [sp, #28]
 8009a14:	3301      	adds	r3, #1
 8009a16:	9307      	str	r3, [sp, #28]
 8009a18:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009a1c:	f04f 0a00 	mov.w	sl, #0
 8009a20:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009a24:	930c      	str	r3, [sp, #48]	; 0x30
 8009a26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a28:	4bc4      	ldr	r3, [pc, #784]	; (8009d3c <__ieee754_pow+0x72c>)
 8009a2a:	4413      	add	r3, r2
 8009a2c:	ed93 7b00 	vldr	d7, [r3]
 8009a30:	4629      	mov	r1, r5
 8009a32:	ec53 2b17 	vmov	r2, r3, d7
 8009a36:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009a3a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009a3e:	f7f6 fc83 	bl	8000348 <__aeabi_dsub>
 8009a42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a46:	4606      	mov	r6, r0
 8009a48:	460f      	mov	r7, r1
 8009a4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a4e:	f7f6 fc7d 	bl	800034c <__adddf3>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	2000      	movs	r0, #0
 8009a58:	49b9      	ldr	r1, [pc, #740]	; (8009d40 <__ieee754_pow+0x730>)
 8009a5a:	f7f6 ff53 	bl	8000904 <__aeabi_ddiv>
 8009a5e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4630      	mov	r0, r6
 8009a68:	4639      	mov	r1, r7
 8009a6a:	f7f6 fe21 	bl	80006b0 <__aeabi_dmul>
 8009a6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a72:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009a76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	9302      	str	r3, [sp, #8]
 8009a7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009a82:	106d      	asrs	r5, r5, #1
 8009a84:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009a88:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009a92:	4640      	mov	r0, r8
 8009a94:	4649      	mov	r1, r9
 8009a96:	4614      	mov	r4, r2
 8009a98:	461d      	mov	r5, r3
 8009a9a:	f7f6 fe09 	bl	80006b0 <__aeabi_dmul>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	4639      	mov	r1, r7
 8009aa6:	f7f6 fc4f 	bl	8000348 <__aeabi_dsub>
 8009aaa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009aae:	4606      	mov	r6, r0
 8009ab0:	460f      	mov	r7, r1
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	4629      	mov	r1, r5
 8009ab6:	f7f6 fc47 	bl	8000348 <__aeabi_dsub>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ac2:	f7f6 fc41 	bl	8000348 <__aeabi_dsub>
 8009ac6:	4642      	mov	r2, r8
 8009ac8:	464b      	mov	r3, r9
 8009aca:	f7f6 fdf1 	bl	80006b0 <__aeabi_dmul>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	4639      	mov	r1, r7
 8009ad6:	f7f6 fc37 	bl	8000348 <__aeabi_dsub>
 8009ada:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009ade:	f7f6 fde7 	bl	80006b0 <__aeabi_dmul>
 8009ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ae6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009aea:	4610      	mov	r0, r2
 8009aec:	4619      	mov	r1, r3
 8009aee:	f7f6 fddf 	bl	80006b0 <__aeabi_dmul>
 8009af2:	a37b      	add	r3, pc, #492	; (adr r3, 8009ce0 <__ieee754_pow+0x6d0>)
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	4604      	mov	r4, r0
 8009afa:	460d      	mov	r5, r1
 8009afc:	f7f6 fdd8 	bl	80006b0 <__aeabi_dmul>
 8009b00:	a379      	add	r3, pc, #484	; (adr r3, 8009ce8 <__ieee754_pow+0x6d8>)
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	f7f6 fc21 	bl	800034c <__adddf3>
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	462b      	mov	r3, r5
 8009b0e:	f7f6 fdcf 	bl	80006b0 <__aeabi_dmul>
 8009b12:	a377      	add	r3, pc, #476	; (adr r3, 8009cf0 <__ieee754_pow+0x6e0>)
 8009b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b18:	f7f6 fc18 	bl	800034c <__adddf3>
 8009b1c:	4622      	mov	r2, r4
 8009b1e:	462b      	mov	r3, r5
 8009b20:	f7f6 fdc6 	bl	80006b0 <__aeabi_dmul>
 8009b24:	a374      	add	r3, pc, #464	; (adr r3, 8009cf8 <__ieee754_pow+0x6e8>)
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	f7f6 fc0f 	bl	800034c <__adddf3>
 8009b2e:	4622      	mov	r2, r4
 8009b30:	462b      	mov	r3, r5
 8009b32:	f7f6 fdbd 	bl	80006b0 <__aeabi_dmul>
 8009b36:	a372      	add	r3, pc, #456	; (adr r3, 8009d00 <__ieee754_pow+0x6f0>)
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	f7f6 fc06 	bl	800034c <__adddf3>
 8009b40:	4622      	mov	r2, r4
 8009b42:	462b      	mov	r3, r5
 8009b44:	f7f6 fdb4 	bl	80006b0 <__aeabi_dmul>
 8009b48:	a36f      	add	r3, pc, #444	; (adr r3, 8009d08 <__ieee754_pow+0x6f8>)
 8009b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4e:	f7f6 fbfd 	bl	800034c <__adddf3>
 8009b52:	4622      	mov	r2, r4
 8009b54:	4606      	mov	r6, r0
 8009b56:	460f      	mov	r7, r1
 8009b58:	462b      	mov	r3, r5
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	f7f6 fda7 	bl	80006b0 <__aeabi_dmul>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4630      	mov	r0, r6
 8009b68:	4639      	mov	r1, r7
 8009b6a:	f7f6 fda1 	bl	80006b0 <__aeabi_dmul>
 8009b6e:	4642      	mov	r2, r8
 8009b70:	4604      	mov	r4, r0
 8009b72:	460d      	mov	r5, r1
 8009b74:	464b      	mov	r3, r9
 8009b76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b7a:	f7f6 fbe7 	bl	800034c <__adddf3>
 8009b7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b82:	f7f6 fd95 	bl	80006b0 <__aeabi_dmul>
 8009b86:	4622      	mov	r2, r4
 8009b88:	462b      	mov	r3, r5
 8009b8a:	f7f6 fbdf 	bl	800034c <__adddf3>
 8009b8e:	4642      	mov	r2, r8
 8009b90:	4606      	mov	r6, r0
 8009b92:	460f      	mov	r7, r1
 8009b94:	464b      	mov	r3, r9
 8009b96:	4640      	mov	r0, r8
 8009b98:	4649      	mov	r1, r9
 8009b9a:	f7f6 fd89 	bl	80006b0 <__aeabi_dmul>
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	4b68      	ldr	r3, [pc, #416]	; (8009d44 <__ieee754_pow+0x734>)
 8009ba2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009ba6:	f7f6 fbd1 	bl	800034c <__adddf3>
 8009baa:	4632      	mov	r2, r6
 8009bac:	463b      	mov	r3, r7
 8009bae:	f7f6 fbcd 	bl	800034c <__adddf3>
 8009bb2:	9802      	ldr	r0, [sp, #8]
 8009bb4:	460d      	mov	r5, r1
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4640      	mov	r0, r8
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	f7f6 fd76 	bl	80006b0 <__aeabi_dmul>
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	4680      	mov	r8, r0
 8009bc8:	4689      	mov	r9, r1
 8009bca:	4b5e      	ldr	r3, [pc, #376]	; (8009d44 <__ieee754_pow+0x734>)
 8009bcc:	4620      	mov	r0, r4
 8009bce:	4629      	mov	r1, r5
 8009bd0:	f7f6 fbba 	bl	8000348 <__aeabi_dsub>
 8009bd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009bd8:	f7f6 fbb6 	bl	8000348 <__aeabi_dsub>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4630      	mov	r0, r6
 8009be2:	4639      	mov	r1, r7
 8009be4:	f7f6 fbb0 	bl	8000348 <__aeabi_dsub>
 8009be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bec:	f7f6 fd60 	bl	80006b0 <__aeabi_dmul>
 8009bf0:	4622      	mov	r2, r4
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	460f      	mov	r7, r1
 8009bf6:	462b      	mov	r3, r5
 8009bf8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bfc:	f7f6 fd58 	bl	80006b0 <__aeabi_dmul>
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4630      	mov	r0, r6
 8009c06:	4639      	mov	r1, r7
 8009c08:	f7f6 fba0 	bl	800034c <__adddf3>
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	460f      	mov	r7, r1
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	4640      	mov	r0, r8
 8009c16:	4649      	mov	r1, r9
 8009c18:	f7f6 fb98 	bl	800034c <__adddf3>
 8009c1c:	9802      	ldr	r0, [sp, #8]
 8009c1e:	a33c      	add	r3, pc, #240	; (adr r3, 8009d10 <__ieee754_pow+0x700>)
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	4604      	mov	r4, r0
 8009c26:	460d      	mov	r5, r1
 8009c28:	f7f6 fd42 	bl	80006b0 <__aeabi_dmul>
 8009c2c:	4642      	mov	r2, r8
 8009c2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c32:	464b      	mov	r3, r9
 8009c34:	4620      	mov	r0, r4
 8009c36:	4629      	mov	r1, r5
 8009c38:	f7f6 fb86 	bl	8000348 <__aeabi_dsub>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4630      	mov	r0, r6
 8009c42:	4639      	mov	r1, r7
 8009c44:	f7f6 fb80 	bl	8000348 <__aeabi_dsub>
 8009c48:	a333      	add	r3, pc, #204	; (adr r3, 8009d18 <__ieee754_pow+0x708>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f7f6 fd2f 	bl	80006b0 <__aeabi_dmul>
 8009c52:	a333      	add	r3, pc, #204	; (adr r3, 8009d20 <__ieee754_pow+0x710>)
 8009c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c58:	4606      	mov	r6, r0
 8009c5a:	460f      	mov	r7, r1
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	4629      	mov	r1, r5
 8009c60:	f7f6 fd26 	bl	80006b0 <__aeabi_dmul>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	4630      	mov	r0, r6
 8009c6a:	4639      	mov	r1, r7
 8009c6c:	f7f6 fb6e 	bl	800034c <__adddf3>
 8009c70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c72:	4b35      	ldr	r3, [pc, #212]	; (8009d48 <__ieee754_pow+0x738>)
 8009c74:	4413      	add	r3, r2
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	f7f6 fb67 	bl	800034c <__adddf3>
 8009c7e:	4604      	mov	r4, r0
 8009c80:	9807      	ldr	r0, [sp, #28]
 8009c82:	460d      	mov	r5, r1
 8009c84:	f7f6 fcae 	bl	80005e4 <__aeabi_i2d>
 8009c88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c8a:	4b30      	ldr	r3, [pc, #192]	; (8009d4c <__ieee754_pow+0x73c>)
 8009c8c:	4413      	add	r3, r2
 8009c8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c92:	4606      	mov	r6, r0
 8009c94:	460f      	mov	r7, r1
 8009c96:	4622      	mov	r2, r4
 8009c98:	462b      	mov	r3, r5
 8009c9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c9e:	f7f6 fb55 	bl	800034c <__adddf3>
 8009ca2:	4642      	mov	r2, r8
 8009ca4:	464b      	mov	r3, r9
 8009ca6:	f7f6 fb51 	bl	800034c <__adddf3>
 8009caa:	4632      	mov	r2, r6
 8009cac:	463b      	mov	r3, r7
 8009cae:	f7f6 fb4d 	bl	800034c <__adddf3>
 8009cb2:	9802      	ldr	r0, [sp, #8]
 8009cb4:	4632      	mov	r2, r6
 8009cb6:	463b      	mov	r3, r7
 8009cb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cbc:	f7f6 fb44 	bl	8000348 <__aeabi_dsub>
 8009cc0:	4642      	mov	r2, r8
 8009cc2:	464b      	mov	r3, r9
 8009cc4:	f7f6 fb40 	bl	8000348 <__aeabi_dsub>
 8009cc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ccc:	e607      	b.n	80098de <__ieee754_pow+0x2ce>
 8009cce:	f04f 0a01 	mov.w	sl, #1
 8009cd2:	e6a5      	b.n	8009a20 <__ieee754_pow+0x410>
 8009cd4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009d28 <__ieee754_pow+0x718>
 8009cd8:	e613      	b.n	8009902 <__ieee754_pow+0x2f2>
 8009cda:	bf00      	nop
 8009cdc:	f3af 8000 	nop.w
 8009ce0:	4a454eef 	.word	0x4a454eef
 8009ce4:	3fca7e28 	.word	0x3fca7e28
 8009ce8:	93c9db65 	.word	0x93c9db65
 8009cec:	3fcd864a 	.word	0x3fcd864a
 8009cf0:	a91d4101 	.word	0xa91d4101
 8009cf4:	3fd17460 	.word	0x3fd17460
 8009cf8:	518f264d 	.word	0x518f264d
 8009cfc:	3fd55555 	.word	0x3fd55555
 8009d00:	db6fabff 	.word	0xdb6fabff
 8009d04:	3fdb6db6 	.word	0x3fdb6db6
 8009d08:	33333303 	.word	0x33333303
 8009d0c:	3fe33333 	.word	0x3fe33333
 8009d10:	e0000000 	.word	0xe0000000
 8009d14:	3feec709 	.word	0x3feec709
 8009d18:	dc3a03fd 	.word	0xdc3a03fd
 8009d1c:	3feec709 	.word	0x3feec709
 8009d20:	145b01f5 	.word	0x145b01f5
 8009d24:	be3e2fe0 	.word	0xbe3e2fe0
 8009d28:	00000000 	.word	0x00000000
 8009d2c:	3ff00000 	.word	0x3ff00000
 8009d30:	43400000 	.word	0x43400000
 8009d34:	0003988e 	.word	0x0003988e
 8009d38:	000bb679 	.word	0x000bb679
 8009d3c:	0801e898 	.word	0x0801e898
 8009d40:	3ff00000 	.word	0x3ff00000
 8009d44:	40080000 	.word	0x40080000
 8009d48:	0801e8b8 	.word	0x0801e8b8
 8009d4c:	0801e8a8 	.word	0x0801e8a8
 8009d50:	a3b6      	add	r3, pc, #728	; (adr r3, 800a02c <__ieee754_pow+0xa1c>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	4640      	mov	r0, r8
 8009d58:	4649      	mov	r1, r9
 8009d5a:	f7f6 faf7 	bl	800034c <__adddf3>
 8009d5e:	4622      	mov	r2, r4
 8009d60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d64:	462b      	mov	r3, r5
 8009d66:	4630      	mov	r0, r6
 8009d68:	4639      	mov	r1, r7
 8009d6a:	f7f6 faed 	bl	8000348 <__aeabi_dsub>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d76:	f7f6 ff2b 	bl	8000bd0 <__aeabi_dcmpgt>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	f47f adfe 	bne.w	800997c <__ieee754_pow+0x36c>
 8009d80:	4aa5      	ldr	r2, [pc, #660]	; (800a018 <__ieee754_pow+0xa08>)
 8009d82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d86:	4293      	cmp	r3, r2
 8009d88:	f340 810c 	ble.w	8009fa4 <__ieee754_pow+0x994>
 8009d8c:	151b      	asrs	r3, r3, #20
 8009d8e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009d92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009d96:	fa4a f303 	asr.w	r3, sl, r3
 8009d9a:	445b      	add	r3, fp
 8009d9c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009da0:	4e9e      	ldr	r6, [pc, #632]	; (800a01c <__ieee754_pow+0xa0c>)
 8009da2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009da6:	4116      	asrs	r6, r2
 8009da8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009dac:	2000      	movs	r0, #0
 8009dae:	ea23 0106 	bic.w	r1, r3, r6
 8009db2:	f1c2 0214 	rsb	r2, r2, #20
 8009db6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009dba:	fa4a fa02 	asr.w	sl, sl, r2
 8009dbe:	f1bb 0f00 	cmp.w	fp, #0
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	4629      	mov	r1, r5
 8009dca:	bfb8      	it	lt
 8009dcc:	f1ca 0a00 	rsblt	sl, sl, #0
 8009dd0:	f7f6 faba 	bl	8000348 <__aeabi_dsub>
 8009dd4:	e9cd 0100 	strd	r0, r1, [sp]
 8009dd8:	4642      	mov	r2, r8
 8009dda:	464b      	mov	r3, r9
 8009ddc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009de0:	f7f6 fab4 	bl	800034c <__adddf3>
 8009de4:	2000      	movs	r0, #0
 8009de6:	a37a      	add	r3, pc, #488	; (adr r3, 8009fd0 <__ieee754_pow+0x9c0>)
 8009de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dec:	4604      	mov	r4, r0
 8009dee:	460d      	mov	r5, r1
 8009df0:	f7f6 fc5e 	bl	80006b0 <__aeabi_dmul>
 8009df4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009df8:	4606      	mov	r6, r0
 8009dfa:	460f      	mov	r7, r1
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	4629      	mov	r1, r5
 8009e00:	f7f6 faa2 	bl	8000348 <__aeabi_dsub>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4640      	mov	r0, r8
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	f7f6 fa9c 	bl	8000348 <__aeabi_dsub>
 8009e10:	a371      	add	r3, pc, #452	; (adr r3, 8009fd8 <__ieee754_pow+0x9c8>)
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	f7f6 fc4b 	bl	80006b0 <__aeabi_dmul>
 8009e1a:	a371      	add	r3, pc, #452	; (adr r3, 8009fe0 <__ieee754_pow+0x9d0>)
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	4680      	mov	r8, r0
 8009e22:	4689      	mov	r9, r1
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7f6 fc42 	bl	80006b0 <__aeabi_dmul>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4640      	mov	r0, r8
 8009e32:	4649      	mov	r1, r9
 8009e34:	f7f6 fa8a 	bl	800034c <__adddf3>
 8009e38:	4604      	mov	r4, r0
 8009e3a:	460d      	mov	r5, r1
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	4630      	mov	r0, r6
 8009e42:	4639      	mov	r1, r7
 8009e44:	f7f6 fa82 	bl	800034c <__adddf3>
 8009e48:	4632      	mov	r2, r6
 8009e4a:	463b      	mov	r3, r7
 8009e4c:	4680      	mov	r8, r0
 8009e4e:	4689      	mov	r9, r1
 8009e50:	f7f6 fa7a 	bl	8000348 <__aeabi_dsub>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4620      	mov	r0, r4
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	f7f6 fa74 	bl	8000348 <__aeabi_dsub>
 8009e60:	4642      	mov	r2, r8
 8009e62:	4606      	mov	r6, r0
 8009e64:	460f      	mov	r7, r1
 8009e66:	464b      	mov	r3, r9
 8009e68:	4640      	mov	r0, r8
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	f7f6 fc20 	bl	80006b0 <__aeabi_dmul>
 8009e70:	a35d      	add	r3, pc, #372	; (adr r3, 8009fe8 <__ieee754_pow+0x9d8>)
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	4604      	mov	r4, r0
 8009e78:	460d      	mov	r5, r1
 8009e7a:	f7f6 fc19 	bl	80006b0 <__aeabi_dmul>
 8009e7e:	a35c      	add	r3, pc, #368	; (adr r3, 8009ff0 <__ieee754_pow+0x9e0>)
 8009e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e84:	f7f6 fa60 	bl	8000348 <__aeabi_dsub>
 8009e88:	4622      	mov	r2, r4
 8009e8a:	462b      	mov	r3, r5
 8009e8c:	f7f6 fc10 	bl	80006b0 <__aeabi_dmul>
 8009e90:	a359      	add	r3, pc, #356	; (adr r3, 8009ff8 <__ieee754_pow+0x9e8>)
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	f7f6 fa59 	bl	800034c <__adddf3>
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	462b      	mov	r3, r5
 8009e9e:	f7f6 fc07 	bl	80006b0 <__aeabi_dmul>
 8009ea2:	a357      	add	r3, pc, #348	; (adr r3, 800a000 <__ieee754_pow+0x9f0>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	f7f6 fa4e 	bl	8000348 <__aeabi_dsub>
 8009eac:	4622      	mov	r2, r4
 8009eae:	462b      	mov	r3, r5
 8009eb0:	f7f6 fbfe 	bl	80006b0 <__aeabi_dmul>
 8009eb4:	a354      	add	r3, pc, #336	; (adr r3, 800a008 <__ieee754_pow+0x9f8>)
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	f7f6 fa47 	bl	800034c <__adddf3>
 8009ebe:	4622      	mov	r2, r4
 8009ec0:	462b      	mov	r3, r5
 8009ec2:	f7f6 fbf5 	bl	80006b0 <__aeabi_dmul>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4640      	mov	r0, r8
 8009ecc:	4649      	mov	r1, r9
 8009ece:	f7f6 fa3b 	bl	8000348 <__aeabi_dsub>
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	460d      	mov	r5, r1
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4640      	mov	r0, r8
 8009edc:	4649      	mov	r1, r9
 8009ede:	f7f6 fbe7 	bl	80006b0 <__aeabi_dmul>
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	e9cd 0100 	strd	r0, r1, [sp]
 8009ee8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009eec:	4620      	mov	r0, r4
 8009eee:	4629      	mov	r1, r5
 8009ef0:	f7f6 fa2a 	bl	8000348 <__aeabi_dsub>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009efc:	f7f6 fd02 	bl	8000904 <__aeabi_ddiv>
 8009f00:	4632      	mov	r2, r6
 8009f02:	4604      	mov	r4, r0
 8009f04:	460d      	mov	r5, r1
 8009f06:	463b      	mov	r3, r7
 8009f08:	4640      	mov	r0, r8
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	f7f6 fbd0 	bl	80006b0 <__aeabi_dmul>
 8009f10:	4632      	mov	r2, r6
 8009f12:	463b      	mov	r3, r7
 8009f14:	f7f6 fa1a 	bl	800034c <__adddf3>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	4629      	mov	r1, r5
 8009f20:	f7f6 fa12 	bl	8000348 <__aeabi_dsub>
 8009f24:	4642      	mov	r2, r8
 8009f26:	464b      	mov	r3, r9
 8009f28:	f7f6 fa0e 	bl	8000348 <__aeabi_dsub>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	2000      	movs	r0, #0
 8009f32:	493b      	ldr	r1, [pc, #236]	; (800a020 <__ieee754_pow+0xa10>)
 8009f34:	f7f6 fa08 	bl	8000348 <__aeabi_dsub>
 8009f38:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009f3c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	da31      	bge.n	8009faa <__ieee754_pow+0x99a>
 8009f46:	4650      	mov	r0, sl
 8009f48:	ec43 2b10 	vmov	d0, r2, r3
 8009f4c:	f000 fa0c 	bl	800a368 <scalbn>
 8009f50:	ec51 0b10 	vmov	r0, r1, d0
 8009f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f58:	f7ff bbf1 	b.w	800973e <__ieee754_pow+0x12e>
 8009f5c:	4b31      	ldr	r3, [pc, #196]	; (800a024 <__ieee754_pow+0xa14>)
 8009f5e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009f62:	429e      	cmp	r6, r3
 8009f64:	f77f af0c 	ble.w	8009d80 <__ieee754_pow+0x770>
 8009f68:	4b2f      	ldr	r3, [pc, #188]	; (800a028 <__ieee754_pow+0xa18>)
 8009f6a:	440b      	add	r3, r1
 8009f6c:	4303      	orrs	r3, r0
 8009f6e:	d00b      	beq.n	8009f88 <__ieee754_pow+0x978>
 8009f70:	a327      	add	r3, pc, #156	; (adr r3, 800a010 <__ieee754_pow+0xa00>)
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f7a:	f7f6 fb99 	bl	80006b0 <__aeabi_dmul>
 8009f7e:	a324      	add	r3, pc, #144	; (adr r3, 800a010 <__ieee754_pow+0xa00>)
 8009f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f84:	f7ff bbdb 	b.w	800973e <__ieee754_pow+0x12e>
 8009f88:	4622      	mov	r2, r4
 8009f8a:	462b      	mov	r3, r5
 8009f8c:	f7f6 f9dc 	bl	8000348 <__aeabi_dsub>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4640      	mov	r0, r8
 8009f96:	4649      	mov	r1, r9
 8009f98:	f7f6 fe06 	bl	8000ba8 <__aeabi_dcmple>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	f43f aeef 	beq.w	8009d80 <__ieee754_pow+0x770>
 8009fa2:	e7e5      	b.n	8009f70 <__ieee754_pow+0x960>
 8009fa4:	f04f 0a00 	mov.w	sl, #0
 8009fa8:	e716      	b.n	8009dd8 <__ieee754_pow+0x7c8>
 8009faa:	4621      	mov	r1, r4
 8009fac:	e7d2      	b.n	8009f54 <__ieee754_pow+0x944>
 8009fae:	2000      	movs	r0, #0
 8009fb0:	491b      	ldr	r1, [pc, #108]	; (800a020 <__ieee754_pow+0xa10>)
 8009fb2:	f7ff bb8d 	b.w	80096d0 <__ieee754_pow+0xc0>
 8009fb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fba:	f7ff bb89 	b.w	80096d0 <__ieee754_pow+0xc0>
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	4639      	mov	r1, r7
 8009fc2:	f7ff bb85 	b.w	80096d0 <__ieee754_pow+0xc0>
 8009fc6:	4693      	mov	fp, r2
 8009fc8:	f7ff bb96 	b.w	80096f8 <__ieee754_pow+0xe8>
 8009fcc:	f3af 8000 	nop.w
 8009fd0:	00000000 	.word	0x00000000
 8009fd4:	3fe62e43 	.word	0x3fe62e43
 8009fd8:	fefa39ef 	.word	0xfefa39ef
 8009fdc:	3fe62e42 	.word	0x3fe62e42
 8009fe0:	0ca86c39 	.word	0x0ca86c39
 8009fe4:	be205c61 	.word	0xbe205c61
 8009fe8:	72bea4d0 	.word	0x72bea4d0
 8009fec:	3e663769 	.word	0x3e663769
 8009ff0:	c5d26bf1 	.word	0xc5d26bf1
 8009ff4:	3ebbbd41 	.word	0x3ebbbd41
 8009ff8:	af25de2c 	.word	0xaf25de2c
 8009ffc:	3f11566a 	.word	0x3f11566a
 800a000:	16bebd93 	.word	0x16bebd93
 800a004:	3f66c16c 	.word	0x3f66c16c
 800a008:	5555553e 	.word	0x5555553e
 800a00c:	3fc55555 	.word	0x3fc55555
 800a010:	c2f8f359 	.word	0xc2f8f359
 800a014:	01a56e1f 	.word	0x01a56e1f
 800a018:	3fe00000 	.word	0x3fe00000
 800a01c:	000fffff 	.word	0x000fffff
 800a020:	3ff00000 	.word	0x3ff00000
 800a024:	4090cbff 	.word	0x4090cbff
 800a028:	3f6f3400 	.word	0x3f6f3400
 800a02c:	652b82fe 	.word	0x652b82fe
 800a030:	3c971547 	.word	0x3c971547

0800a034 <__ieee754_sqrt>:
 800a034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a038:	ec55 4b10 	vmov	r4, r5, d0
 800a03c:	4e54      	ldr	r6, [pc, #336]	; (800a190 <__ieee754_sqrt+0x15c>)
 800a03e:	43ae      	bics	r6, r5
 800a040:	ee10 0a10 	vmov	r0, s0
 800a044:	462b      	mov	r3, r5
 800a046:	462a      	mov	r2, r5
 800a048:	4621      	mov	r1, r4
 800a04a:	d113      	bne.n	800a074 <__ieee754_sqrt+0x40>
 800a04c:	ee10 2a10 	vmov	r2, s0
 800a050:	462b      	mov	r3, r5
 800a052:	ee10 0a10 	vmov	r0, s0
 800a056:	4629      	mov	r1, r5
 800a058:	f7f6 fb2a 	bl	80006b0 <__aeabi_dmul>
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	4620      	mov	r0, r4
 800a062:	4629      	mov	r1, r5
 800a064:	f7f6 f972 	bl	800034c <__adddf3>
 800a068:	4604      	mov	r4, r0
 800a06a:	460d      	mov	r5, r1
 800a06c:	ec45 4b10 	vmov	d0, r4, r5
 800a070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a074:	2d00      	cmp	r5, #0
 800a076:	dc10      	bgt.n	800a09a <__ieee754_sqrt+0x66>
 800a078:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a07c:	4330      	orrs	r0, r6
 800a07e:	d0f5      	beq.n	800a06c <__ieee754_sqrt+0x38>
 800a080:	b15d      	cbz	r5, 800a09a <__ieee754_sqrt+0x66>
 800a082:	ee10 2a10 	vmov	r2, s0
 800a086:	462b      	mov	r3, r5
 800a088:	4620      	mov	r0, r4
 800a08a:	4629      	mov	r1, r5
 800a08c:	f7f6 f95c 	bl	8000348 <__aeabi_dsub>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	f7f6 fc36 	bl	8000904 <__aeabi_ddiv>
 800a098:	e7e6      	b.n	800a068 <__ieee754_sqrt+0x34>
 800a09a:	151b      	asrs	r3, r3, #20
 800a09c:	d10c      	bne.n	800a0b8 <__ieee754_sqrt+0x84>
 800a09e:	2a00      	cmp	r2, #0
 800a0a0:	d06d      	beq.n	800a17e <__ieee754_sqrt+0x14a>
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	02d6      	lsls	r6, r2, #11
 800a0a6:	d56e      	bpl.n	800a186 <__ieee754_sqrt+0x152>
 800a0a8:	1e44      	subs	r4, r0, #1
 800a0aa:	1b1b      	subs	r3, r3, r4
 800a0ac:	f1c0 0420 	rsb	r4, r0, #32
 800a0b0:	fa21 f404 	lsr.w	r4, r1, r4
 800a0b4:	4322      	orrs	r2, r4
 800a0b6:	4081      	lsls	r1, r0
 800a0b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a0bc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a0c0:	07dd      	lsls	r5, r3, #31
 800a0c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a0c6:	bf42      	ittt	mi
 800a0c8:	0052      	lslmi	r2, r2, #1
 800a0ca:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800a0ce:	0049      	lslmi	r1, r1, #1
 800a0d0:	1058      	asrs	r0, r3, #1
 800a0d2:	2500      	movs	r5, #0
 800a0d4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 800a0d8:	441a      	add	r2, r3
 800a0da:	0049      	lsls	r1, r1, #1
 800a0dc:	2316      	movs	r3, #22
 800a0de:	462c      	mov	r4, r5
 800a0e0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a0e4:	19a7      	adds	r7, r4, r6
 800a0e6:	4297      	cmp	r7, r2
 800a0e8:	bfde      	ittt	le
 800a0ea:	1bd2      	suble	r2, r2, r7
 800a0ec:	19bc      	addle	r4, r7, r6
 800a0ee:	19ad      	addle	r5, r5, r6
 800a0f0:	0052      	lsls	r2, r2, #1
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a0f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a0fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a100:	d1f0      	bne.n	800a0e4 <__ieee754_sqrt+0xb0>
 800a102:	f04f 0e20 	mov.w	lr, #32
 800a106:	469c      	mov	ip, r3
 800a108:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a10c:	42a2      	cmp	r2, r4
 800a10e:	eb06 070c 	add.w	r7, r6, ip
 800a112:	dc02      	bgt.n	800a11a <__ieee754_sqrt+0xe6>
 800a114:	d112      	bne.n	800a13c <__ieee754_sqrt+0x108>
 800a116:	428f      	cmp	r7, r1
 800a118:	d810      	bhi.n	800a13c <__ieee754_sqrt+0x108>
 800a11a:	2f00      	cmp	r7, #0
 800a11c:	eb07 0c06 	add.w	ip, r7, r6
 800a120:	da34      	bge.n	800a18c <__ieee754_sqrt+0x158>
 800a122:	f1bc 0f00 	cmp.w	ip, #0
 800a126:	db31      	blt.n	800a18c <__ieee754_sqrt+0x158>
 800a128:	f104 0801 	add.w	r8, r4, #1
 800a12c:	1b12      	subs	r2, r2, r4
 800a12e:	428f      	cmp	r7, r1
 800a130:	bf88      	it	hi
 800a132:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a136:	1bc9      	subs	r1, r1, r7
 800a138:	4433      	add	r3, r6
 800a13a:	4644      	mov	r4, r8
 800a13c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800a140:	f1be 0e01 	subs.w	lr, lr, #1
 800a144:	443a      	add	r2, r7
 800a146:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a14a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a14e:	d1dd      	bne.n	800a10c <__ieee754_sqrt+0xd8>
 800a150:	430a      	orrs	r2, r1
 800a152:	d006      	beq.n	800a162 <__ieee754_sqrt+0x12e>
 800a154:	1c5c      	adds	r4, r3, #1
 800a156:	bf13      	iteet	ne
 800a158:	3301      	addne	r3, #1
 800a15a:	3501      	addeq	r5, #1
 800a15c:	4673      	moveq	r3, lr
 800a15e:	f023 0301 	bicne.w	r3, r3, #1
 800a162:	106a      	asrs	r2, r5, #1
 800a164:	085b      	lsrs	r3, r3, #1
 800a166:	07e9      	lsls	r1, r5, #31
 800a168:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a16c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a170:	bf48      	it	mi
 800a172:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a176:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a17a:	461c      	mov	r4, r3
 800a17c:	e776      	b.n	800a06c <__ieee754_sqrt+0x38>
 800a17e:	0aca      	lsrs	r2, r1, #11
 800a180:	3b15      	subs	r3, #21
 800a182:	0549      	lsls	r1, r1, #21
 800a184:	e78b      	b.n	800a09e <__ieee754_sqrt+0x6a>
 800a186:	0052      	lsls	r2, r2, #1
 800a188:	3001      	adds	r0, #1
 800a18a:	e78b      	b.n	800a0a4 <__ieee754_sqrt+0x70>
 800a18c:	46a0      	mov	r8, r4
 800a18e:	e7cd      	b.n	800a12c <__ieee754_sqrt+0xf8>
 800a190:	7ff00000 	.word	0x7ff00000

0800a194 <__ieee754_sqrtf>:
 800a194:	ee10 2a10 	vmov	r2, s0
 800a198:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a19c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a1a0:	b570      	push	{r4, r5, r6, lr}
 800a1a2:	d302      	bcc.n	800a1aa <__ieee754_sqrtf+0x16>
 800a1a4:	eea0 0a00 	vfma.f32	s0, s0, s0
 800a1a8:	bd70      	pop	{r4, r5, r6, pc}
 800a1aa:	b3b1      	cbz	r1, 800a21a <__ieee754_sqrtf+0x86>
 800a1ac:	2a00      	cmp	r2, #0
 800a1ae:	da04      	bge.n	800a1ba <__ieee754_sqrtf+0x26>
 800a1b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a1b4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a1b8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ba:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a1be:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800a1c2:	d204      	bcs.n	800a1ce <__ieee754_sqrtf+0x3a>
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	0210      	lsls	r0, r2, #8
 800a1c8:	d528      	bpl.n	800a21c <__ieee754_sqrtf+0x88>
 800a1ca:	3901      	subs	r1, #1
 800a1cc:	1a5b      	subs	r3, r3, r1
 800a1ce:	3b7f      	subs	r3, #127	; 0x7f
 800a1d0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a1d4:	07d9      	lsls	r1, r3, #31
 800a1d6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a1da:	bf48      	it	mi
 800a1dc:	0052      	lslmi	r2, r2, #1
 800a1de:	1059      	asrs	r1, r3, #1
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	0052      	lsls	r2, r2, #1
 800a1e4:	2419      	movs	r4, #25
 800a1e6:	461e      	mov	r6, r3
 800a1e8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a1ec:	1835      	adds	r5, r6, r0
 800a1ee:	4295      	cmp	r5, r2
 800a1f0:	bfde      	ittt	le
 800a1f2:	182e      	addle	r6, r5, r0
 800a1f4:	1b52      	suble	r2, r2, r5
 800a1f6:	181b      	addle	r3, r3, r0
 800a1f8:	3c01      	subs	r4, #1
 800a1fa:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a1fe:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a202:	d1f3      	bne.n	800a1ec <__ieee754_sqrtf+0x58>
 800a204:	b112      	cbz	r2, 800a20c <__ieee754_sqrtf+0x78>
 800a206:	3301      	adds	r3, #1
 800a208:	f023 0301 	bic.w	r3, r3, #1
 800a20c:	105b      	asrs	r3, r3, #1
 800a20e:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 800a212:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 800a216:	ee00 3a10 	vmov	s0, r3
 800a21a:	bd70      	pop	{r4, r5, r6, pc}
 800a21c:	0052      	lsls	r2, r2, #1
 800a21e:	3101      	adds	r1, #1
 800a220:	e7d1      	b.n	800a1c6 <__ieee754_sqrtf+0x32>

0800a222 <fabs>:
 800a222:	ec53 2b10 	vmov	r2, r3, d0
 800a226:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a22a:	ec43 2b10 	vmov	d0, r2, r3
 800a22e:	4770      	bx	lr

0800a230 <finite>:
 800a230:	ee10 3a90 	vmov	r3, s1
 800a234:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a238:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a23c:	0fc0      	lsrs	r0, r0, #31
 800a23e:	4770      	bx	lr

0800a240 <matherr>:
 800a240:	2000      	movs	r0, #0
 800a242:	4770      	bx	lr
 800a244:	0000      	movs	r0, r0
	...

0800a248 <nan>:
 800a248:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a250 <nan+0x8>
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	00000000 	.word	0x00000000
 800a254:	7ff80000 	.word	0x7ff80000

0800a258 <rint>:
 800a258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a25a:	ec51 0b10 	vmov	r0, r1, d0
 800a25e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a262:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800a266:	2e13      	cmp	r6, #19
 800a268:	ee10 7a10 	vmov	r7, s0
 800a26c:	460b      	mov	r3, r1
 800a26e:	4602      	mov	r2, r0
 800a270:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a274:	dc58      	bgt.n	800a328 <rint+0xd0>
 800a276:	2e00      	cmp	r6, #0
 800a278:	da2b      	bge.n	800a2d2 <rint+0x7a>
 800a27a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a27e:	4302      	orrs	r2, r0
 800a280:	d023      	beq.n	800a2ca <rint+0x72>
 800a282:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a286:	4302      	orrs	r2, r0
 800a288:	4251      	negs	r1, r2
 800a28a:	4311      	orrs	r1, r2
 800a28c:	0b09      	lsrs	r1, r1, #12
 800a28e:	0c5b      	lsrs	r3, r3, #17
 800a290:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800a294:	045b      	lsls	r3, r3, #17
 800a296:	ea41 0703 	orr.w	r7, r1, r3
 800a29a:	4b31      	ldr	r3, [pc, #196]	; (800a360 <rint+0x108>)
 800a29c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a2a0:	4639      	mov	r1, r7
 800a2a2:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a2a6:	ee10 0a10 	vmov	r0, s0
 800a2aa:	4632      	mov	r2, r6
 800a2ac:	463b      	mov	r3, r7
 800a2ae:	f7f6 f84d 	bl	800034c <__adddf3>
 800a2b2:	e9cd 0100 	strd	r0, r1, [sp]
 800a2b6:	463b      	mov	r3, r7
 800a2b8:	4632      	mov	r2, r6
 800a2ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2be:	f7f6 f843 	bl	8000348 <__aeabi_dsub>
 800a2c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2c6:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800a2ca:	ec41 0b10 	vmov	d0, r0, r1
 800a2ce:	b003      	add	sp, #12
 800a2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2d2:	4c24      	ldr	r4, [pc, #144]	; (800a364 <rint+0x10c>)
 800a2d4:	4134      	asrs	r4, r6
 800a2d6:	ea01 0704 	and.w	r7, r1, r4
 800a2da:	4307      	orrs	r7, r0
 800a2dc:	d0f5      	beq.n	800a2ca <rint+0x72>
 800a2de:	0861      	lsrs	r1, r4, #1
 800a2e0:	ea03 0001 	and.w	r0, r3, r1
 800a2e4:	4302      	orrs	r2, r0
 800a2e6:	d00b      	beq.n	800a300 <rint+0xa8>
 800a2e8:	ea23 0101 	bic.w	r1, r3, r1
 800a2ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a2f0:	2e13      	cmp	r6, #19
 800a2f2:	fa43 f306 	asr.w	r3, r3, r6
 800a2f6:	bf0c      	ite	eq
 800a2f8:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800a2fc:	2200      	movne	r2, #0
 800a2fe:	430b      	orrs	r3, r1
 800a300:	4619      	mov	r1, r3
 800a302:	4b17      	ldr	r3, [pc, #92]	; (800a360 <rint+0x108>)
 800a304:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a308:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a30c:	4610      	mov	r0, r2
 800a30e:	462b      	mov	r3, r5
 800a310:	4622      	mov	r2, r4
 800a312:	f7f6 f81b 	bl	800034c <__adddf3>
 800a316:	e9cd 0100 	strd	r0, r1, [sp]
 800a31a:	4622      	mov	r2, r4
 800a31c:	462b      	mov	r3, r5
 800a31e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a322:	f7f6 f811 	bl	8000348 <__aeabi_dsub>
 800a326:	e7d0      	b.n	800a2ca <rint+0x72>
 800a328:	2e33      	cmp	r6, #51	; 0x33
 800a32a:	dd08      	ble.n	800a33e <rint+0xe6>
 800a32c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a330:	d1cb      	bne.n	800a2ca <rint+0x72>
 800a332:	ee10 2a10 	vmov	r2, s0
 800a336:	460b      	mov	r3, r1
 800a338:	f7f6 f808 	bl	800034c <__adddf3>
 800a33c:	e7c5      	b.n	800a2ca <rint+0x72>
 800a33e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800a342:	f04f 34ff 	mov.w	r4, #4294967295
 800a346:	40f4      	lsrs	r4, r6
 800a348:	4220      	tst	r0, r4
 800a34a:	d0be      	beq.n	800a2ca <rint+0x72>
 800a34c:	0861      	lsrs	r1, r4, #1
 800a34e:	420f      	tst	r7, r1
 800a350:	bf1f      	itttt	ne
 800a352:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800a356:	ea27 0101 	bicne.w	r1, r7, r1
 800a35a:	4132      	asrne	r2, r6
 800a35c:	430a      	orrne	r2, r1
 800a35e:	e7cf      	b.n	800a300 <rint+0xa8>
 800a360:	0801e8c8 	.word	0x0801e8c8
 800a364:	000fffff 	.word	0x000fffff

0800a368 <scalbn>:
 800a368:	b570      	push	{r4, r5, r6, lr}
 800a36a:	ec55 4b10 	vmov	r4, r5, d0
 800a36e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a372:	4606      	mov	r6, r0
 800a374:	462b      	mov	r3, r5
 800a376:	b9b2      	cbnz	r2, 800a3a6 <scalbn+0x3e>
 800a378:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a37c:	4323      	orrs	r3, r4
 800a37e:	d03c      	beq.n	800a3fa <scalbn+0x92>
 800a380:	2200      	movs	r2, #0
 800a382:	4b33      	ldr	r3, [pc, #204]	; (800a450 <scalbn+0xe8>)
 800a384:	4629      	mov	r1, r5
 800a386:	ee10 0a10 	vmov	r0, s0
 800a38a:	f7f6 f991 	bl	80006b0 <__aeabi_dmul>
 800a38e:	4a31      	ldr	r2, [pc, #196]	; (800a454 <scalbn+0xec>)
 800a390:	4296      	cmp	r6, r2
 800a392:	4604      	mov	r4, r0
 800a394:	460d      	mov	r5, r1
 800a396:	460b      	mov	r3, r1
 800a398:	da13      	bge.n	800a3c2 <scalbn+0x5a>
 800a39a:	a329      	add	r3, pc, #164	; (adr r3, 800a440 <scalbn+0xd8>)
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	f7f6 f986 	bl	80006b0 <__aeabi_dmul>
 800a3a4:	e00a      	b.n	800a3bc <scalbn+0x54>
 800a3a6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a3aa:	428a      	cmp	r2, r1
 800a3ac:	d10c      	bne.n	800a3c8 <scalbn+0x60>
 800a3ae:	ee10 2a10 	vmov	r2, s0
 800a3b2:	462b      	mov	r3, r5
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	f7f5 ffc8 	bl	800034c <__adddf3>
 800a3bc:	4604      	mov	r4, r0
 800a3be:	460d      	mov	r5, r1
 800a3c0:	e01b      	b.n	800a3fa <scalbn+0x92>
 800a3c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a3c6:	3a36      	subs	r2, #54	; 0x36
 800a3c8:	4432      	add	r2, r6
 800a3ca:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a3ce:	428a      	cmp	r2, r1
 800a3d0:	dd0b      	ble.n	800a3ea <scalbn+0x82>
 800a3d2:	ec45 4b11 	vmov	d1, r4, r5
 800a3d6:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800a448 <scalbn+0xe0>
 800a3da:	f000 fa19 	bl	800a810 <copysign>
 800a3de:	a31a      	add	r3, pc, #104	; (adr r3, 800a448 <scalbn+0xe0>)
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	ec51 0b10 	vmov	r0, r1, d0
 800a3e8:	e7da      	b.n	800a3a0 <scalbn+0x38>
 800a3ea:	2a00      	cmp	r2, #0
 800a3ec:	dd08      	ble.n	800a400 <scalbn+0x98>
 800a3ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a3f6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a3fa:	ec45 4b10 	vmov	d0, r4, r5
 800a3fe:	bd70      	pop	{r4, r5, r6, pc}
 800a400:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a404:	da0d      	bge.n	800a422 <scalbn+0xba>
 800a406:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a40a:	429e      	cmp	r6, r3
 800a40c:	ec45 4b11 	vmov	d1, r4, r5
 800a410:	dce1      	bgt.n	800a3d6 <scalbn+0x6e>
 800a412:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800a440 <scalbn+0xd8>
 800a416:	f000 f9fb 	bl	800a810 <copysign>
 800a41a:	a309      	add	r3, pc, #36	; (adr r3, 800a440 <scalbn+0xd8>)
 800a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a420:	e7e0      	b.n	800a3e4 <scalbn+0x7c>
 800a422:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a426:	3236      	adds	r2, #54	; 0x36
 800a428:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a42c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a430:	4620      	mov	r0, r4
 800a432:	4629      	mov	r1, r5
 800a434:	2200      	movs	r2, #0
 800a436:	4b08      	ldr	r3, [pc, #32]	; (800a458 <scalbn+0xf0>)
 800a438:	e7b2      	b.n	800a3a0 <scalbn+0x38>
 800a43a:	bf00      	nop
 800a43c:	f3af 8000 	nop.w
 800a440:	c2f8f359 	.word	0xc2f8f359
 800a444:	01a56e1f 	.word	0x01a56e1f
 800a448:	8800759c 	.word	0x8800759c
 800a44c:	7e37e43c 	.word	0x7e37e43c
 800a450:	43500000 	.word	0x43500000
 800a454:	ffff3cb0 	.word	0xffff3cb0
 800a458:	3c900000 	.word	0x3c900000
 800a45c:	00000000 	.word	0x00000000

0800a460 <__ieee754_log>:
 800a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	ec51 0b10 	vmov	r0, r1, d0
 800a468:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a46c:	b087      	sub	sp, #28
 800a46e:	ee10 3a10 	vmov	r3, s0
 800a472:	460d      	mov	r5, r1
 800a474:	da27      	bge.n	800a4c6 <__ieee754_log+0x66>
 800a476:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a47a:	4313      	orrs	r3, r2
 800a47c:	d10a      	bne.n	800a494 <__ieee754_log+0x34>
 800a47e:	49cc      	ldr	r1, [pc, #816]	; (800a7b0 <__ieee754_log+0x350>)
 800a480:	2200      	movs	r2, #0
 800a482:	2300      	movs	r3, #0
 800a484:	2000      	movs	r0, #0
 800a486:	f7f6 fa3d 	bl	8000904 <__aeabi_ddiv>
 800a48a:	ec41 0b10 	vmov	d0, r0, r1
 800a48e:	b007      	add	sp, #28
 800a490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a494:	2900      	cmp	r1, #0
 800a496:	da07      	bge.n	800a4a8 <__ieee754_log+0x48>
 800a498:	ee10 2a10 	vmov	r2, s0
 800a49c:	460b      	mov	r3, r1
 800a49e:	f7f5 ff53 	bl	8000348 <__aeabi_dsub>
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	e7ee      	b.n	800a486 <__ieee754_log+0x26>
 800a4a8:	4bc2      	ldr	r3, [pc, #776]	; (800a7b4 <__ieee754_log+0x354>)
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f7f6 f900 	bl	80006b0 <__aeabi_dmul>
 800a4b0:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a4b4:	460d      	mov	r5, r1
 800a4b6:	4ac0      	ldr	r2, [pc, #768]	; (800a7b8 <__ieee754_log+0x358>)
 800a4b8:	4295      	cmp	r5, r2
 800a4ba:	dd06      	ble.n	800a4ca <__ieee754_log+0x6a>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	f7f5 ff44 	bl	800034c <__adddf3>
 800a4c4:	e7e1      	b.n	800a48a <__ieee754_log+0x2a>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	e7f5      	b.n	800a4b6 <__ieee754_log+0x56>
 800a4ca:	152c      	asrs	r4, r5, #20
 800a4cc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a4d0:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a4d4:	441c      	add	r4, r3
 800a4d6:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800a4da:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800a4de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4e2:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800a4e6:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800a4ea:	ea42 0105 	orr.w	r1, r2, r5
 800a4ee:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	4bb1      	ldr	r3, [pc, #708]	; (800a7bc <__ieee754_log+0x35c>)
 800a4f6:	f7f5 ff27 	bl	8000348 <__aeabi_dsub>
 800a4fa:	1cab      	adds	r3, r5, #2
 800a4fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a500:	2b02      	cmp	r3, #2
 800a502:	4682      	mov	sl, r0
 800a504:	468b      	mov	fp, r1
 800a506:	f04f 0200 	mov.w	r2, #0
 800a50a:	dc5b      	bgt.n	800a5c4 <__ieee754_log+0x164>
 800a50c:	2300      	movs	r3, #0
 800a50e:	f7f6 fb37 	bl	8000b80 <__aeabi_dcmpeq>
 800a512:	b1d0      	cbz	r0, 800a54a <__ieee754_log+0xea>
 800a514:	2c00      	cmp	r4, #0
 800a516:	f000 8170 	beq.w	800a7fa <__ieee754_log+0x39a>
 800a51a:	4620      	mov	r0, r4
 800a51c:	f7f6 f862 	bl	80005e4 <__aeabi_i2d>
 800a520:	a38f      	add	r3, pc, #572	; (adr r3, 800a760 <__ieee754_log+0x300>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	4606      	mov	r6, r0
 800a528:	460f      	mov	r7, r1
 800a52a:	f7f6 f8c1 	bl	80006b0 <__aeabi_dmul>
 800a52e:	a38e      	add	r3, pc, #568	; (adr r3, 800a768 <__ieee754_log+0x308>)
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	4604      	mov	r4, r0
 800a536:	460d      	mov	r5, r1
 800a538:	4630      	mov	r0, r6
 800a53a:	4639      	mov	r1, r7
 800a53c:	f7f6 f8b8 	bl	80006b0 <__aeabi_dmul>
 800a540:	4602      	mov	r2, r0
 800a542:	460b      	mov	r3, r1
 800a544:	4620      	mov	r0, r4
 800a546:	4629      	mov	r1, r5
 800a548:	e7ba      	b.n	800a4c0 <__ieee754_log+0x60>
 800a54a:	a389      	add	r3, pc, #548	; (adr r3, 800a770 <__ieee754_log+0x310>)
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	4650      	mov	r0, sl
 800a552:	4659      	mov	r1, fp
 800a554:	f7f6 f8ac 	bl	80006b0 <__aeabi_dmul>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	2000      	movs	r0, #0
 800a55e:	4998      	ldr	r1, [pc, #608]	; (800a7c0 <__ieee754_log+0x360>)
 800a560:	f7f5 fef2 	bl	8000348 <__aeabi_dsub>
 800a564:	4652      	mov	r2, sl
 800a566:	4606      	mov	r6, r0
 800a568:	460f      	mov	r7, r1
 800a56a:	465b      	mov	r3, fp
 800a56c:	4650      	mov	r0, sl
 800a56e:	4659      	mov	r1, fp
 800a570:	f7f6 f89e 	bl	80006b0 <__aeabi_dmul>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	4630      	mov	r0, r6
 800a57a:	4639      	mov	r1, r7
 800a57c:	f7f6 f898 	bl	80006b0 <__aeabi_dmul>
 800a580:	4606      	mov	r6, r0
 800a582:	460f      	mov	r7, r1
 800a584:	b934      	cbnz	r4, 800a594 <__ieee754_log+0x134>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	4650      	mov	r0, sl
 800a58c:	4659      	mov	r1, fp
 800a58e:	f7f5 fedb 	bl	8000348 <__aeabi_dsub>
 800a592:	e77a      	b.n	800a48a <__ieee754_log+0x2a>
 800a594:	4620      	mov	r0, r4
 800a596:	f7f6 f825 	bl	80005e4 <__aeabi_i2d>
 800a59a:	a371      	add	r3, pc, #452	; (adr r3, 800a760 <__ieee754_log+0x300>)
 800a59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a0:	4680      	mov	r8, r0
 800a5a2:	4689      	mov	r9, r1
 800a5a4:	f7f6 f884 	bl	80006b0 <__aeabi_dmul>
 800a5a8:	a36f      	add	r3, pc, #444	; (adr r3, 800a768 <__ieee754_log+0x308>)
 800a5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	460d      	mov	r5, r1
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	4649      	mov	r1, r9
 800a5b6:	f7f6 f87b 	bl	80006b0 <__aeabi_dmul>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	4630      	mov	r0, r6
 800a5c0:	4639      	mov	r1, r7
 800a5c2:	e0b2      	b.n	800a72a <__ieee754_log+0x2ca>
 800a5c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a5c8:	f7f5 fec0 	bl	800034c <__adddf3>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	4650      	mov	r0, sl
 800a5d2:	4659      	mov	r1, fp
 800a5d4:	f7f6 f996 	bl	8000904 <__aeabi_ddiv>
 800a5d8:	e9cd 0100 	strd	r0, r1, [sp]
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f7f6 f801 	bl	80005e4 <__aeabi_i2d>
 800a5e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	f7f6 f85f 	bl	80006b0 <__aeabi_dmul>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5fa:	f7f6 f859 	bl	80006b0 <__aeabi_dmul>
 800a5fe:	a35e      	add	r3, pc, #376	; (adr r3, 800a778 <__ieee754_log+0x318>)
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	4606      	mov	r6, r0
 800a606:	460f      	mov	r7, r1
 800a608:	f7f6 f852 	bl	80006b0 <__aeabi_dmul>
 800a60c:	a35c      	add	r3, pc, #368	; (adr r3, 800a780 <__ieee754_log+0x320>)
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f7f5 fe9b 	bl	800034c <__adddf3>
 800a616:	4632      	mov	r2, r6
 800a618:	463b      	mov	r3, r7
 800a61a:	f7f6 f849 	bl	80006b0 <__aeabi_dmul>
 800a61e:	a35a      	add	r3, pc, #360	; (adr r3, 800a788 <__ieee754_log+0x328>)
 800a620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a624:	f7f5 fe92 	bl	800034c <__adddf3>
 800a628:	4632      	mov	r2, r6
 800a62a:	463b      	mov	r3, r7
 800a62c:	f7f6 f840 	bl	80006b0 <__aeabi_dmul>
 800a630:	a357      	add	r3, pc, #348	; (adr r3, 800a790 <__ieee754_log+0x330>)
 800a632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a636:	f7f5 fe89 	bl	800034c <__adddf3>
 800a63a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a63e:	f7f6 f837 	bl	80006b0 <__aeabi_dmul>
 800a642:	a355      	add	r3, pc, #340	; (adr r3, 800a798 <__ieee754_log+0x338>)
 800a644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a648:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a64c:	4630      	mov	r0, r6
 800a64e:	4639      	mov	r1, r7
 800a650:	f7f6 f82e 	bl	80006b0 <__aeabi_dmul>
 800a654:	a352      	add	r3, pc, #328	; (adr r3, 800a7a0 <__ieee754_log+0x340>)
 800a656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65a:	f7f5 fe77 	bl	800034c <__adddf3>
 800a65e:	4632      	mov	r2, r6
 800a660:	463b      	mov	r3, r7
 800a662:	f7f6 f825 	bl	80006b0 <__aeabi_dmul>
 800a666:	a350      	add	r3, pc, #320	; (adr r3, 800a7a8 <__ieee754_log+0x348>)
 800a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66c:	f7f5 fe6e 	bl	800034c <__adddf3>
 800a670:	4632      	mov	r2, r6
 800a672:	463b      	mov	r3, r7
 800a674:	f7f6 f81c 	bl	80006b0 <__aeabi_dmul>
 800a678:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
 800a680:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a688:	f7f5 fe60 	bl	800034c <__adddf3>
 800a68c:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 800a690:	3551      	adds	r5, #81	; 0x51
 800a692:	ea45 0508 	orr.w	r5, r5, r8
 800a696:	2d00      	cmp	r5, #0
 800a698:	4606      	mov	r6, r0
 800a69a:	460f      	mov	r7, r1
 800a69c:	dd50      	ble.n	800a740 <__ieee754_log+0x2e0>
 800a69e:	2200      	movs	r2, #0
 800a6a0:	4b47      	ldr	r3, [pc, #284]	; (800a7c0 <__ieee754_log+0x360>)
 800a6a2:	4650      	mov	r0, sl
 800a6a4:	4659      	mov	r1, fp
 800a6a6:	f7f6 f803 	bl	80006b0 <__aeabi_dmul>
 800a6aa:	4652      	mov	r2, sl
 800a6ac:	465b      	mov	r3, fp
 800a6ae:	f7f5 ffff 	bl	80006b0 <__aeabi_dmul>
 800a6b2:	4680      	mov	r8, r0
 800a6b4:	4689      	mov	r9, r1
 800a6b6:	b994      	cbnz	r4, 800a6de <__ieee754_log+0x27e>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4630      	mov	r0, r6
 800a6be:	4639      	mov	r1, r7
 800a6c0:	f7f5 fe44 	bl	800034c <__adddf3>
 800a6c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6c8:	f7f5 fff2 	bl	80006b0 <__aeabi_dmul>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4640      	mov	r0, r8
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	f7f5 fe38 	bl	8000348 <__aeabi_dsub>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	e755      	b.n	800a58a <__ieee754_log+0x12a>
 800a6de:	a320      	add	r3, pc, #128	; (adr r3, 800a760 <__ieee754_log+0x300>)
 800a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6e8:	f7f5 ffe2 	bl	80006b0 <__aeabi_dmul>
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	460d      	mov	r5, r1
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	4639      	mov	r1, r7
 800a6f8:	f7f5 fe28 	bl	800034c <__adddf3>
 800a6fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a700:	f7f5 ffd6 	bl	80006b0 <__aeabi_dmul>
 800a704:	a318      	add	r3, pc, #96	; (adr r3, 800a768 <__ieee754_log+0x308>)
 800a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70a:	4606      	mov	r6, r0
 800a70c:	460f      	mov	r7, r1
 800a70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a712:	f7f5 ffcd 	bl	80006b0 <__aeabi_dmul>
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	4630      	mov	r0, r6
 800a71c:	4639      	mov	r1, r7
 800a71e:	f7f5 fe15 	bl	800034c <__adddf3>
 800a722:	4602      	mov	r2, r0
 800a724:	460b      	mov	r3, r1
 800a726:	4640      	mov	r0, r8
 800a728:	4649      	mov	r1, r9
 800a72a:	f7f5 fe0d 	bl	8000348 <__aeabi_dsub>
 800a72e:	4652      	mov	r2, sl
 800a730:	465b      	mov	r3, fp
 800a732:	f7f5 fe09 	bl	8000348 <__aeabi_dsub>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4620      	mov	r0, r4
 800a73c:	4629      	mov	r1, r5
 800a73e:	e726      	b.n	800a58e <__ieee754_log+0x12e>
 800a740:	2c00      	cmp	r4, #0
 800a742:	d13f      	bne.n	800a7c4 <__ieee754_log+0x364>
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	4650      	mov	r0, sl
 800a74a:	4659      	mov	r1, fp
 800a74c:	f7f5 fdfc 	bl	8000348 <__aeabi_dsub>
 800a750:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a754:	f7f5 ffac 	bl	80006b0 <__aeabi_dmul>
 800a758:	e7be      	b.n	800a6d8 <__ieee754_log+0x278>
 800a75a:	bf00      	nop
 800a75c:	f3af 8000 	nop.w
 800a760:	fee00000 	.word	0xfee00000
 800a764:	3fe62e42 	.word	0x3fe62e42
 800a768:	35793c76 	.word	0x35793c76
 800a76c:	3dea39ef 	.word	0x3dea39ef
 800a770:	55555555 	.word	0x55555555
 800a774:	3fd55555 	.word	0x3fd55555
 800a778:	df3e5244 	.word	0xdf3e5244
 800a77c:	3fc2f112 	.word	0x3fc2f112
 800a780:	96cb03de 	.word	0x96cb03de
 800a784:	3fc74664 	.word	0x3fc74664
 800a788:	94229359 	.word	0x94229359
 800a78c:	3fd24924 	.word	0x3fd24924
 800a790:	55555593 	.word	0x55555593
 800a794:	3fe55555 	.word	0x3fe55555
 800a798:	d078c69f 	.word	0xd078c69f
 800a79c:	3fc39a09 	.word	0x3fc39a09
 800a7a0:	1d8e78af 	.word	0x1d8e78af
 800a7a4:	3fcc71c5 	.word	0x3fcc71c5
 800a7a8:	9997fa04 	.word	0x9997fa04
 800a7ac:	3fd99999 	.word	0x3fd99999
 800a7b0:	c3500000 	.word	0xc3500000
 800a7b4:	43500000 	.word	0x43500000
 800a7b8:	7fefffff 	.word	0x7fefffff
 800a7bc:	3ff00000 	.word	0x3ff00000
 800a7c0:	3fe00000 	.word	0x3fe00000
 800a7c4:	a30e      	add	r3, pc, #56	; (adr r3, 800a800 <__ieee754_log+0x3a0>)
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ce:	f7f5 ff6f 	bl	80006b0 <__aeabi_dmul>
 800a7d2:	4632      	mov	r2, r6
 800a7d4:	463b      	mov	r3, r7
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	460d      	mov	r5, r1
 800a7da:	4650      	mov	r0, sl
 800a7dc:	4659      	mov	r1, fp
 800a7de:	f7f5 fdb3 	bl	8000348 <__aeabi_dsub>
 800a7e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7e6:	f7f5 ff63 	bl	80006b0 <__aeabi_dmul>
 800a7ea:	a307      	add	r3, pc, #28	; (adr r3, 800a808 <__ieee754_log+0x3a8>)
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	460f      	mov	r7, r1
 800a7f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7f8:	e6dd      	b.n	800a5b6 <__ieee754_log+0x156>
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	e644      	b.n	800a48a <__ieee754_log+0x2a>
 800a800:	fee00000 	.word	0xfee00000
 800a804:	3fe62e42 	.word	0x3fe62e42
 800a808:	35793c76 	.word	0x35793c76
 800a80c:	3dea39ef 	.word	0x3dea39ef

0800a810 <copysign>:
 800a810:	ec53 2b10 	vmov	r2, r3, d0
 800a814:	ee11 0a90 	vmov	r0, s3
 800a818:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a81c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a820:	ea41 0300 	orr.w	r3, r1, r0
 800a824:	ec43 2b10 	vmov	d0, r2, r3
 800a828:	4770      	bx	lr
	...

0800a82c <__errno>:
 800a82c:	4b01      	ldr	r3, [pc, #4]	; (800a834 <__errno+0x8>)
 800a82e:	6818      	ldr	r0, [r3, #0]
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	20000010 	.word	0x20000010

0800a838 <_close>:
 800a838:	4b02      	ldr	r3, [pc, #8]	; (800a844 <_close+0xc>)
 800a83a:	2258      	movs	r2, #88	; 0x58
 800a83c:	601a      	str	r2, [r3, #0]
 800a83e:	f04f 30ff 	mov.w	r0, #4294967295
 800a842:	4770      	bx	lr
 800a844:	20013758 	.word	0x20013758

0800a848 <_fstat>:
 800a848:	4b02      	ldr	r3, [pc, #8]	; (800a854 <_fstat+0xc>)
 800a84a:	2258      	movs	r2, #88	; 0x58
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	f04f 30ff 	mov.w	r0, #4294967295
 800a852:	4770      	bx	lr
 800a854:	20013758 	.word	0x20013758

0800a858 <_isatty>:
 800a858:	4b02      	ldr	r3, [pc, #8]	; (800a864 <_isatty+0xc>)
 800a85a:	2258      	movs	r2, #88	; 0x58
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	2000      	movs	r0, #0
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	20013758 	.word	0x20013758

0800a868 <_lseek>:
 800a868:	4b02      	ldr	r3, [pc, #8]	; (800a874 <_lseek+0xc>)
 800a86a:	2258      	movs	r2, #88	; 0x58
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	f04f 30ff 	mov.w	r0, #4294967295
 800a872:	4770      	bx	lr
 800a874:	20013758 	.word	0x20013758

0800a878 <_read>:
 800a878:	4b02      	ldr	r3, [pc, #8]	; (800a884 <_read+0xc>)
 800a87a:	2258      	movs	r2, #88	; 0x58
 800a87c:	601a      	str	r2, [r3, #0]
 800a87e:	f04f 30ff 	mov.w	r0, #4294967295
 800a882:	4770      	bx	lr
 800a884:	20013758 	.word	0x20013758

0800a888 <_sbrk>:
 800a888:	4b04      	ldr	r3, [pc, #16]	; (800a89c <_sbrk+0x14>)
 800a88a:	6819      	ldr	r1, [r3, #0]
 800a88c:	4602      	mov	r2, r0
 800a88e:	b909      	cbnz	r1, 800a894 <_sbrk+0xc>
 800a890:	4903      	ldr	r1, [pc, #12]	; (800a8a0 <_sbrk+0x18>)
 800a892:	6019      	str	r1, [r3, #0]
 800a894:	6818      	ldr	r0, [r3, #0]
 800a896:	4402      	add	r2, r0
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	4770      	bx	lr
 800a89c:	20013498 	.word	0x20013498
 800a8a0:	2001375c 	.word	0x2001375c

0800a8a4 <_init>:
 800a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a6:	bf00      	nop
 800a8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8aa:	bc08      	pop	{r3}
 800a8ac:	469e      	mov	lr, r3
 800a8ae:	4770      	bx	lr

0800a8b0 <_fini>:
 800a8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b2:	bf00      	nop
 800a8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8b6:	bc08      	pop	{r3}
 800a8b8:	469e      	mov	lr, r3
 800a8ba:	4770      	bx	lr
