
effector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006650  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006890  080067d8  080067d8  000167d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d068  0800d068  0001d068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d070  0800d070  0001d070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d074  0800d074  0001d074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  0800d078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000c250  200001d4  0800d24c  000201d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000c424  0800d24c  0002c424  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b5aa  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004034  00000000  00000000  0003b7ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000d2a6  00000000  00000000  0003f7e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001138  00000000  00000000  0004ca88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001288  00000000  00000000  0004dbc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009e5f  00000000  00000000  0004ee48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000070e6  00000000  00000000  00058ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  0005fd8d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000037d8  00000000  00000000  0005fe78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d4 	.word	0x200001d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080067c0 	.word	0x080067c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001d8 	.word	0x200001d8
 80001c4:	080067c0 	.word	0x080067c0

080001c8 <arm_bitreversal_32>:
 80001c8:	1c4b      	adds	r3, r1, #1
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	bf98      	it	ls
 80001ce:	4770      	bxls	lr
 80001d0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001d4:	1c91      	adds	r1, r2, #2
 80001d6:	089b      	lsrs	r3, r3, #2

080001d8 <arm_bitreversal_32_0>:
 80001d8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001dc:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e0:	880a      	ldrh	r2, [r1, #0]
 80001e2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001e6:	4480      	add	r8, r0
 80001e8:	4481      	add	r9, r0
 80001ea:	4402      	add	r2, r0
 80001ec:	4484      	add	ip, r0
 80001ee:	f8d9 7000 	ldr.w	r7, [r9]
 80001f2:	f8d8 6000 	ldr.w	r6, [r8]
 80001f6:	6815      	ldr	r5, [r2, #0]
 80001f8:	f8dc 4000 	ldr.w	r4, [ip]
 80001fc:	f8c9 6000 	str.w	r6, [r9]
 8000200:	f8c8 7000 	str.w	r7, [r8]
 8000204:	f8cc 5000 	str.w	r5, [ip]
 8000208:	6014      	str	r4, [r2, #0]
 800020a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800020e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000212:	6855      	ldr	r5, [r2, #4]
 8000214:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000218:	f8c9 6004 	str.w	r6, [r9, #4]
 800021c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000220:	f8cc 5004 	str.w	r5, [ip, #4]
 8000224:	6054      	str	r4, [r2, #4]
 8000226:	3108      	adds	r1, #8
 8000228:	3b01      	subs	r3, #1
 800022a:	d1d5      	bne.n	80001d8 <arm_bitreversal_32_0>
 800022c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000230:	4770      	bx	lr

08000232 <arm_bitreversal_16>:
 8000232:	1c4b      	adds	r3, r1, #1
 8000234:	2b01      	cmp	r3, #1
 8000236:	bf98      	it	ls
 8000238:	4770      	bxls	lr
 800023a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800023e:	1c91      	adds	r1, r2, #2
 8000240:	089b      	lsrs	r3, r3, #2

08000242 <arm_bitreversal_16_0>:
 8000242:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000246:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800024a:	880a      	ldrh	r2, [r1, #0]
 800024c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000250:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000254:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000258:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800025c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000260:	f8d9 7000 	ldr.w	r7, [r9]
 8000264:	f8d8 6000 	ldr.w	r6, [r8]
 8000268:	6815      	ldr	r5, [r2, #0]
 800026a:	f8dc 4000 	ldr.w	r4, [ip]
 800026e:	f8c9 6000 	str.w	r6, [r9]
 8000272:	f8c8 7000 	str.w	r7, [r8]
 8000276:	f8cc 5000 	str.w	r5, [ip]
 800027a:	6014      	str	r4, [r2, #0]
 800027c:	3108      	adds	r1, #8
 800027e:	3b01      	subs	r3, #1
 8000280:	d1df      	bne.n	8000242 <arm_bitreversal_16_0>
 8000282:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	4770      	bx	lr

08000288 <strlen>:
 8000288:	4603      	mov	r3, r0
 800028a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028e:	2a00      	cmp	r2, #0
 8000290:	d1fb      	bne.n	800028a <strlen+0x2>
 8000292:	1a18      	subs	r0, r3, r0
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr

08000298 <__aeabi_drsub>:
 8000298:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800029c:	e002      	b.n	80002a4 <__adddf3>
 800029e:	bf00      	nop

080002a0 <__aeabi_dsub>:
 80002a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a4 <__adddf3>:
 80002a4:	b530      	push	{r4, r5, lr}
 80002a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ae:	ea94 0f05 	teq	r4, r5
 80002b2:	bf08      	it	eq
 80002b4:	ea90 0f02 	teqeq	r0, r2
 80002b8:	bf1f      	itttt	ne
 80002ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ca:	f000 80e2 	beq.w	8000492 <__adddf3+0x1ee>
 80002ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d6:	bfb8      	it	lt
 80002d8:	426d      	neglt	r5, r5
 80002da:	dd0c      	ble.n	80002f6 <__adddf3+0x52>
 80002dc:	442c      	add	r4, r5
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	ea82 0000 	eor.w	r0, r2, r0
 80002ea:	ea83 0101 	eor.w	r1, r3, r1
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	2d36      	cmp	r5, #54	; 0x36
 80002f8:	bf88      	it	hi
 80002fa:	bd30      	pophi	{r4, r5, pc}
 80002fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000300:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000304:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000308:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800030c:	d002      	beq.n	8000314 <__adddf3+0x70>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000318:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800031c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000320:	d002      	beq.n	8000328 <__adddf3+0x84>
 8000322:	4252      	negs	r2, r2
 8000324:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000328:	ea94 0f05 	teq	r4, r5
 800032c:	f000 80a7 	beq.w	800047e <__adddf3+0x1da>
 8000330:	f1a4 0401 	sub.w	r4, r4, #1
 8000334:	f1d5 0e20 	rsbs	lr, r5, #32
 8000338:	db0d      	blt.n	8000356 <__adddf3+0xb2>
 800033a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033e:	fa22 f205 	lsr.w	r2, r2, r5
 8000342:	1880      	adds	r0, r0, r2
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	fa03 f20e 	lsl.w	r2, r3, lr
 800034c:	1880      	adds	r0, r0, r2
 800034e:	fa43 f305 	asr.w	r3, r3, r5
 8000352:	4159      	adcs	r1, r3
 8000354:	e00e      	b.n	8000374 <__adddf3+0xd0>
 8000356:	f1a5 0520 	sub.w	r5, r5, #32
 800035a:	f10e 0e20 	add.w	lr, lr, #32
 800035e:	2a01      	cmp	r2, #1
 8000360:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000364:	bf28      	it	cs
 8000366:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	18c0      	adds	r0, r0, r3
 8000370:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000374:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000378:	d507      	bpl.n	800038a <__adddf3+0xe6>
 800037a:	f04f 0e00 	mov.w	lr, #0
 800037e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000382:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000386:	eb6e 0101 	sbc.w	r1, lr, r1
 800038a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038e:	d31b      	bcc.n	80003c8 <__adddf3+0x124>
 8000390:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000394:	d30c      	bcc.n	80003b0 <__adddf3+0x10c>
 8000396:	0849      	lsrs	r1, r1, #1
 8000398:	ea5f 0030 	movs.w	r0, r0, rrx
 800039c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a0:	f104 0401 	add.w	r4, r4, #1
 80003a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ac:	f080 809a 	bcs.w	80004e4 <__adddf3+0x240>
 80003b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b4:	bf08      	it	eq
 80003b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ba:	f150 0000 	adcs.w	r0, r0, #0
 80003be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c2:	ea41 0105 	orr.w	r1, r1, r5
 80003c6:	bd30      	pop	{r4, r5, pc}
 80003c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003cc:	4140      	adcs	r0, r0
 80003ce:	eb41 0101 	adc.w	r1, r1, r1
 80003d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d6:	f1a4 0401 	sub.w	r4, r4, #1
 80003da:	d1e9      	bne.n	80003b0 <__adddf3+0x10c>
 80003dc:	f091 0f00 	teq	r1, #0
 80003e0:	bf04      	itt	eq
 80003e2:	4601      	moveq	r1, r0
 80003e4:	2000      	moveq	r0, #0
 80003e6:	fab1 f381 	clz	r3, r1
 80003ea:	bf08      	it	eq
 80003ec:	3320      	addeq	r3, #32
 80003ee:	f1a3 030b 	sub.w	r3, r3, #11
 80003f2:	f1b3 0220 	subs.w	r2, r3, #32
 80003f6:	da0c      	bge.n	8000412 <__adddf3+0x16e>
 80003f8:	320c      	adds	r2, #12
 80003fa:	dd08      	ble.n	800040e <__adddf3+0x16a>
 80003fc:	f102 0c14 	add.w	ip, r2, #20
 8000400:	f1c2 020c 	rsb	r2, r2, #12
 8000404:	fa01 f00c 	lsl.w	r0, r1, ip
 8000408:	fa21 f102 	lsr.w	r1, r1, r2
 800040c:	e00c      	b.n	8000428 <__adddf3+0x184>
 800040e:	f102 0214 	add.w	r2, r2, #20
 8000412:	bfd8      	it	le
 8000414:	f1c2 0c20 	rsble	ip, r2, #32
 8000418:	fa01 f102 	lsl.w	r1, r1, r2
 800041c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000420:	bfdc      	itt	le
 8000422:	ea41 010c 	orrle.w	r1, r1, ip
 8000426:	4090      	lslle	r0, r2
 8000428:	1ae4      	subs	r4, r4, r3
 800042a:	bfa2      	ittt	ge
 800042c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000430:	4329      	orrge	r1, r5
 8000432:	bd30      	popge	{r4, r5, pc}
 8000434:	ea6f 0404 	mvn.w	r4, r4
 8000438:	3c1f      	subs	r4, #31
 800043a:	da1c      	bge.n	8000476 <__adddf3+0x1d2>
 800043c:	340c      	adds	r4, #12
 800043e:	dc0e      	bgt.n	800045e <__adddf3+0x1ba>
 8000440:	f104 0414 	add.w	r4, r4, #20
 8000444:	f1c4 0220 	rsb	r2, r4, #32
 8000448:	fa20 f004 	lsr.w	r0, r0, r4
 800044c:	fa01 f302 	lsl.w	r3, r1, r2
 8000450:	ea40 0003 	orr.w	r0, r0, r3
 8000454:	fa21 f304 	lsr.w	r3, r1, r4
 8000458:	ea45 0103 	orr.w	r1, r5, r3
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f1c4 040c 	rsb	r4, r4, #12
 8000462:	f1c4 0220 	rsb	r2, r4, #32
 8000466:	fa20 f002 	lsr.w	r0, r0, r2
 800046a:	fa01 f304 	lsl.w	r3, r1, r4
 800046e:	ea40 0003 	orr.w	r0, r0, r3
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	fa21 f004 	lsr.w	r0, r1, r4
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f094 0f00 	teq	r4, #0
 8000482:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000486:	bf06      	itte	eq
 8000488:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800048c:	3401      	addeq	r4, #1
 800048e:	3d01      	subne	r5, #1
 8000490:	e74e      	b.n	8000330 <__adddf3+0x8c>
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf18      	it	ne
 8000498:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049c:	d029      	beq.n	80004f2 <__adddf3+0x24e>
 800049e:	ea94 0f05 	teq	r4, r5
 80004a2:	bf08      	it	eq
 80004a4:	ea90 0f02 	teqeq	r0, r2
 80004a8:	d005      	beq.n	80004b6 <__adddf3+0x212>
 80004aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ae:	bf04      	itt	eq
 80004b0:	4619      	moveq	r1, r3
 80004b2:	4610      	moveq	r0, r2
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	ea91 0f03 	teq	r1, r3
 80004ba:	bf1e      	ittt	ne
 80004bc:	2100      	movne	r1, #0
 80004be:	2000      	movne	r0, #0
 80004c0:	bd30      	popne	{r4, r5, pc}
 80004c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c6:	d105      	bne.n	80004d4 <__adddf3+0x230>
 80004c8:	0040      	lsls	r0, r0, #1
 80004ca:	4149      	adcs	r1, r1
 80004cc:	bf28      	it	cs
 80004ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d8:	bf3c      	itt	cc
 80004da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004de:	bd30      	popcc	{r4, r5, pc}
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f6:	bf1a      	itte	ne
 80004f8:	4619      	movne	r1, r3
 80004fa:	4610      	movne	r0, r2
 80004fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000500:	bf1c      	itt	ne
 8000502:	460b      	movne	r3, r1
 8000504:	4602      	movne	r2, r0
 8000506:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050a:	bf06      	itte	eq
 800050c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000510:	ea91 0f03 	teqeq	r1, r3
 8000514:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	bf00      	nop

0800051c <__aeabi_ui2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000530:	f04f 0500 	mov.w	r5, #0
 8000534:	f04f 0100 	mov.w	r1, #0
 8000538:	e750      	b.n	80003dc <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_i2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000554:	bf48      	it	mi
 8000556:	4240      	negmi	r0, r0
 8000558:	f04f 0100 	mov.w	r1, #0
 800055c:	e73e      	b.n	80003dc <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_f2d>:
 8000560:	0042      	lsls	r2, r0, #1
 8000562:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000566:	ea4f 0131 	mov.w	r1, r1, rrx
 800056a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056e:	bf1f      	itttt	ne
 8000570:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000574:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000578:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800057c:	4770      	bxne	lr
 800057e:	f092 0f00 	teq	r2, #0
 8000582:	bf14      	ite	ne
 8000584:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e720      	b.n	80003dc <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aedc 	beq.w	800038a <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6c1      	b.n	800038a <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b97a 	b.w	8000f64 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	468c      	mov	ip, r1
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	9e08      	ldr	r6, [sp, #32]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d151      	bne.n	8000d3c <__udivmoddi4+0xb4>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d96d      	bls.n	8000d7a <__udivmoddi4+0xf2>
 8000c9e:	fab2 fe82 	clz	lr, r2
 8000ca2:	f1be 0f00 	cmp.w	lr, #0
 8000ca6:	d00b      	beq.n	8000cc0 <__udivmoddi4+0x38>
 8000ca8:	f1ce 0c20 	rsb	ip, lr, #32
 8000cac:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cb0:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cb4:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cb8:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cbc:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cc0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cc4:	0c25      	lsrs	r5, r4, #16
 8000cc6:	fbbc f8fa 	udiv	r8, ip, sl
 8000cca:	fa1f f987 	uxth.w	r9, r7
 8000cce:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cd2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cd6:	fb08 f309 	mul.w	r3, r8, r9
 8000cda:	42ab      	cmp	r3, r5
 8000cdc:	d90a      	bls.n	8000cf4 <__udivmoddi4+0x6c>
 8000cde:	19ed      	adds	r5, r5, r7
 8000ce0:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ce4:	f080 8123 	bcs.w	8000f2e <__udivmoddi4+0x2a6>
 8000ce8:	42ab      	cmp	r3, r5
 8000cea:	f240 8120 	bls.w	8000f2e <__udivmoddi4+0x2a6>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	443d      	add	r5, r7
 8000cf4:	1aed      	subs	r5, r5, r3
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb5 f0fa 	udiv	r0, r5, sl
 8000cfc:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d04:	fb00 f909 	mul.w	r9, r0, r9
 8000d08:	45a1      	cmp	r9, r4
 8000d0a:	d909      	bls.n	8000d20 <__udivmoddi4+0x98>
 8000d0c:	19e4      	adds	r4, r4, r7
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d12:	f080 810a 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000d16:	45a1      	cmp	r9, r4
 8000d18:	f240 8107 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	443c      	add	r4, r7
 8000d20:	eba4 0409 	sub.w	r4, r4, r9
 8000d24:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d061      	beq.n	8000df2 <__udivmoddi4+0x16a>
 8000d2e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d32:	2300      	movs	r3, #0
 8000d34:	6034      	str	r4, [r6, #0]
 8000d36:	6073      	str	r3, [r6, #4]
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0xc8>
 8000d40:	2e00      	cmp	r6, #0
 8000d42:	d054      	beq.n	8000dee <__udivmoddi4+0x166>
 8000d44:	2100      	movs	r1, #0
 8000d46:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	2900      	cmp	r1, #0
 8000d56:	f040 808e 	bne.w	8000e76 <__udivmoddi4+0x1ee>
 8000d5a:	42ab      	cmp	r3, r5
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xdc>
 8000d5e:	4282      	cmp	r2, r0
 8000d60:	f200 80fa 	bhi.w	8000f58 <__udivmoddi4+0x2d0>
 8000d64:	1a84      	subs	r4, r0, r2
 8000d66:	eb65 0503 	sbc.w	r5, r5, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	46ac      	mov	ip, r5
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d03f      	beq.n	8000df2 <__udivmoddi4+0x16a>
 8000d72:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	b912      	cbnz	r2, 8000d82 <__udivmoddi4+0xfa>
 8000d7c:	2701      	movs	r7, #1
 8000d7e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d82:	fab7 fe87 	clz	lr, r7
 8000d86:	f1be 0f00 	cmp.w	lr, #0
 8000d8a:	d134      	bne.n	8000df6 <__udivmoddi4+0x16e>
 8000d8c:	1beb      	subs	r3, r5, r7
 8000d8e:	0c3a      	lsrs	r2, r7, #16
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	2101      	movs	r1, #1
 8000d96:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d9a:	0c25      	lsrs	r5, r4, #16
 8000d9c:	fb02 3318 	mls	r3, r2, r8, r3
 8000da0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000da4:	fb0c f308 	mul.w	r3, ip, r8
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x134>
 8000dac:	19ed      	adds	r5, r5, r7
 8000dae:	f108 30ff 	add.w	r0, r8, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x132>
 8000db4:	42ab      	cmp	r3, r5
 8000db6:	f200 80d1 	bhi.w	8000f5c <__udivmoddi4+0x2d4>
 8000dba:	4680      	mov	r8, r0
 8000dbc:	1aed      	subs	r5, r5, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dc4:	fb02 5510 	mls	r5, r2, r0, r5
 8000dc8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dcc:	fb0c fc00 	mul.w	ip, ip, r0
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x15c>
 8000dd4:	19e4      	adds	r4, r4, r7
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x15a>
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	f200 80b8 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 040c 	sub.w	r4, r4, ip
 8000de8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dec:	e79d      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000dee:	4631      	mov	r1, r6
 8000df0:	4630      	mov	r0, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1ce 0420 	rsb	r4, lr, #32
 8000dfa:	fa05 f30e 	lsl.w	r3, r5, lr
 8000dfe:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e02:	fa20 f804 	lsr.w	r8, r0, r4
 8000e06:	0c3a      	lsrs	r2, r7, #16
 8000e08:	fa25 f404 	lsr.w	r4, r5, r4
 8000e0c:	ea48 0803 	orr.w	r8, r8, r3
 8000e10:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e14:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e18:	fb02 4411 	mls	r4, r2, r1, r4
 8000e1c:	fa1f fc87 	uxth.w	ip, r7
 8000e20:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e24:	fb01 f30c 	mul.w	r3, r1, ip
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x1bc>
 8000e30:	19ed      	adds	r5, r5, r7
 8000e32:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e36:	f080 808a 	bcs.w	8000f4e <__udivmoddi4+0x2c6>
 8000e3a:	42ab      	cmp	r3, r5
 8000e3c:	f240 8087 	bls.w	8000f4e <__udivmoddi4+0x2c6>
 8000e40:	3902      	subs	r1, #2
 8000e42:	443d      	add	r5, r7
 8000e44:	1aeb      	subs	r3, r5, r3
 8000e46:	fa1f f588 	uxth.w	r5, r8
 8000e4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e4e:	fb02 3310 	mls	r3, r2, r0, r3
 8000e52:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e56:	fb00 f30c 	mul.w	r3, r0, ip
 8000e5a:	42ab      	cmp	r3, r5
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x1e6>
 8000e5e:	19ed      	adds	r5, r5, r7
 8000e60:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e64:	d26f      	bcs.n	8000f46 <__udivmoddi4+0x2be>
 8000e66:	42ab      	cmp	r3, r5
 8000e68:	d96d      	bls.n	8000f46 <__udivmoddi4+0x2be>
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	443d      	add	r5, r7
 8000e6e:	1aeb      	subs	r3, r5, r3
 8000e70:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e74:	e78f      	b.n	8000d96 <__udivmoddi4+0x10e>
 8000e76:	f1c1 0720 	rsb	r7, r1, #32
 8000e7a:	fa22 f807 	lsr.w	r8, r2, r7
 8000e7e:	408b      	lsls	r3, r1
 8000e80:	fa05 f401 	lsl.w	r4, r5, r1
 8000e84:	ea48 0303 	orr.w	r3, r8, r3
 8000e88:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e8c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e90:	40fd      	lsrs	r5, r7
 8000e92:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e96:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e9a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e9e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000ea2:	fa1f f883 	uxth.w	r8, r3
 8000ea6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000eaa:	fb09 f408 	mul.w	r4, r9, r8
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb4:	fa00 fa01 	lsl.w	sl, r0, r1
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x244>
 8000eba:	18ed      	adds	r5, r5, r3
 8000ebc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ec0:	d243      	bcs.n	8000f4a <__udivmoddi4+0x2c2>
 8000ec2:	42ac      	cmp	r4, r5
 8000ec4:	d941      	bls.n	8000f4a <__udivmoddi4+0x2c2>
 8000ec6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eca:	441d      	add	r5, r3
 8000ecc:	1b2d      	subs	r5, r5, r4
 8000ece:	fa1f fe8e 	uxth.w	lr, lr
 8000ed2:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ed6:	fb0c 5510 	mls	r5, ip, r0, r5
 8000eda:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ede:	fb00 f808 	mul.w	r8, r0, r8
 8000ee2:	45a0      	cmp	r8, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x26e>
 8000ee6:	18e4      	adds	r4, r4, r3
 8000ee8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000eec:	d229      	bcs.n	8000f42 <__udivmoddi4+0x2ba>
 8000eee:	45a0      	cmp	r8, r4
 8000ef0:	d927      	bls.n	8000f42 <__udivmoddi4+0x2ba>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	441c      	add	r4, r3
 8000ef6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000efa:	eba4 0408 	sub.w	r4, r4, r8
 8000efe:	fba0 8902 	umull	r8, r9, r0, r2
 8000f02:	454c      	cmp	r4, r9
 8000f04:	46c6      	mov	lr, r8
 8000f06:	464d      	mov	r5, r9
 8000f08:	d315      	bcc.n	8000f36 <__udivmoddi4+0x2ae>
 8000f0a:	d012      	beq.n	8000f32 <__udivmoddi4+0x2aa>
 8000f0c:	b156      	cbz	r6, 8000f24 <__udivmoddi4+0x29c>
 8000f0e:	ebba 030e 	subs.w	r3, sl, lr
 8000f12:	eb64 0405 	sbc.w	r4, r4, r5
 8000f16:	fa04 f707 	lsl.w	r7, r4, r7
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431f      	orrs	r7, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	6037      	str	r7, [r6, #0]
 8000f22:	6074      	str	r4, [r6, #4]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	e6f8      	b.n	8000d20 <__udivmoddi4+0x98>
 8000f2e:	4690      	mov	r8, r2
 8000f30:	e6e0      	b.n	8000cf4 <__udivmoddi4+0x6c>
 8000f32:	45c2      	cmp	sl, r8
 8000f34:	d2ea      	bcs.n	8000f0c <__udivmoddi4+0x284>
 8000f36:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f3a:	eb69 0503 	sbc.w	r5, r9, r3
 8000f3e:	3801      	subs	r0, #1
 8000f40:	e7e4      	b.n	8000f0c <__udivmoddi4+0x284>
 8000f42:	4628      	mov	r0, r5
 8000f44:	e7d7      	b.n	8000ef6 <__udivmoddi4+0x26e>
 8000f46:	4640      	mov	r0, r8
 8000f48:	e791      	b.n	8000e6e <__udivmoddi4+0x1e6>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e7be      	b.n	8000ecc <__udivmoddi4+0x244>
 8000f4e:	4601      	mov	r1, r0
 8000f50:	e778      	b.n	8000e44 <__udivmoddi4+0x1bc>
 8000f52:	3802      	subs	r0, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	e745      	b.n	8000de4 <__udivmoddi4+0x15c>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e708      	b.n	8000d6e <__udivmoddi4+0xe6>
 8000f5c:	f1a8 0802 	sub.w	r8, r8, #2
 8000f60:	443d      	add	r5, r7
 8000f62:	e72b      	b.n	8000dbc <__udivmoddi4+0x134>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_InitTick+0x2c>)
{
 8000f6c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f74:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f78:	f000 f892 	bl	80010a0 <HAL_SYSTICK_Config>
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	b938      	cbnz	r0, 8000f90 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000f80:	4602      	mov	r2, r0
 8000f82:	4629      	mov	r1, r5
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f000 f84a 	bl	8001020 <HAL_NVIC_SetPriority>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000f90:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	20000000 	.word	0x20000000

08000f98 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <HAL_Init+0x28>)
 8000f9a:	6813      	ldr	r3, [r2, #0]
 8000f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000fa0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa6:	f000 f829 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff ffdc 	bl	8000f68 <HAL_InitTick>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	b918      	cbnz	r0, 8000fbc <HAL_Init+0x24>
    HAL_MspInit();
 8000fb4:	f002 fc8a 	bl	80038cc <HAL_MspInit>
}
 8000fb8:	4620      	mov	r0, r4
 8000fba:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000fbc:	2401      	movs	r4, #1
 8000fbe:	e7fb      	b.n	8000fb8 <HAL_Init+0x20>
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000fc4:	4a02      	ldr	r2, [pc, #8]	; (8000fd0 <HAL_IncTick+0xc>)
 8000fc6:	6813      	ldr	r3, [r2, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000c230 	.word	0x2000c230

08000fd4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fd4:	4b01      	ldr	r3, [pc, #4]	; (8000fdc <HAL_GetTick+0x8>)
 8000fd6:	6818      	ldr	r0, [r3, #0]
}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2000c230 	.word	0x2000c230

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff fff6 	bl	8000fd4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000fea:	4605      	mov	r5, r0
  {
    wait++;
 8000fec:	bf18      	it	ne
 8000fee:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff0:	f7ff fff0 	bl	8000fd4 <HAL_GetTick>
 8000ff4:	1b40      	subs	r0, r0, r5
 8000ff6:	4284      	cmp	r4, r0
 8000ff8:	d8fa      	bhi.n	8000ff0 <HAL_Delay+0x10>
  {
  }
}
 8000ffa:	bd38      	pop	{r3, r4, r5, pc}

08000ffc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ffe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001000:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001004:	041b      	lsls	r3, r3, #16
 8001006:	0c1b      	lsrs	r3, r3, #16
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800100c:	0200      	lsls	r0, r0, #8
 800100e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001012:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001016:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001018:	60d3      	str	r3, [r2, #12]
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001022:	b530      	push	{r4, r5, lr}
 8001024:	68dc      	ldr	r4, [r3, #12]
 8001026:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	2b04      	cmp	r3, #4
 8001032:	bf28      	it	cs
 8001034:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 0501 	mov.w	r5, #1
 800103c:	fa05 f303 	lsl.w	r3, r5, r3
 8001040:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001044:	bf8c      	ite	hi
 8001046:	3c03      	subhi	r4, #3
 8001048:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104a:	4019      	ands	r1, r3
 800104c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104e:	fa05 f404 	lsl.w	r4, r5, r4
 8001052:	3c01      	subs	r4, #1
 8001054:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001056:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	ea42 0201 	orr.w	r2, r2, r1
 800105c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	bfaf      	iteee	ge
 8001062:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	f000 000f 	andlt.w	r0, r0, #15
 800106a:	4b06      	ldrlt	r3, [pc, #24]	; (8001084 <HAL_NVIC_SetPriority+0x64>)
 800106c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	bfa5      	ittet	ge
 8001070:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001074:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800107c:	bd30      	pop	{r4, r5, pc}
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00
 8001084:	e000ed14 	.word	0xe000ed14

08001088 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001088:	0942      	lsrs	r2, r0, #5
 800108a:	2301      	movs	r3, #1
 800108c:	f000 001f 	and.w	r0, r0, #31
 8001090:	fa03 f000 	lsl.w	r0, r3, r0
 8001094:	4b01      	ldr	r3, [pc, #4]	; (800109c <HAL_NVIC_EnableIRQ+0x14>)
 8001096:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100

080010a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	3801      	subs	r0, #1
 80010a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010a6:	d20a      	bcs.n	80010be <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ac:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	21f0      	movs	r1, #240	; 0xf0
 80010b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010ce:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010d0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010d2:	bf0c      	ite	eq
 80010d4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010d8:	f022 0204 	bicne.w	r2, r2, #4
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	4770      	bx	lr
 80010e0:	e000e010 	.word	0xe000e010

080010e4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010e4:	4770      	bx	lr

080010e6 <HAL_SYSTICK_IRQHandler>:
{
 80010e6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80010e8:	f7ff fffc 	bl	80010e4 <HAL_SYSTICK_Callback>
 80010ec:	bd08      	pop	{r3, pc}

080010ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80010ee:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 80010f0:	4604      	mov	r4, r0
 80010f2:	b168      	cbz	r0, 8001110 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80010f4:	7903      	ldrb	r3, [r0, #4]
 80010f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010fa:	b913      	cbnz	r3, 8001102 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80010fc:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80010fe:	f001 ffd7 	bl	80030b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001102:	2302      	movs	r3, #2
 8001104:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001106:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001108:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800110a:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800110c:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800110e:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8001110:	2001      	movs	r0, #1
}
 8001112:	bd10      	pop	{r4, pc}

08001114 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001114:	7943      	ldrb	r3, [r0, #5]
 8001116:	2b01      	cmp	r3, #1
{
 8001118:	b530      	push	{r4, r5, lr}
 800111a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 800111e:	d017      	beq.n	8001150 <HAL_DAC_Start+0x3c>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001120:	7103      	strb	r3, [r0, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001122:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 8001124:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 8001126:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 8001128:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 800112a:	f001 0510 	and.w	r5, r1, #16
 800112e:	40aa      	lsls	r2, r5
 8001130:	4322      	orrs	r2, r4
 8001132:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001134:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 8001136:	b969      	cbnz	r1, 8001154 <HAL_DAC_Start+0x40>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001138:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 800113c:	2a04      	cmp	r2, #4
 800113e:	d103      	bne.n	8001148 <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001146:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001148:	2301      	movs	r3, #1
 800114a:	7103      	strb	r3, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800114c:	2300      	movs	r3, #0
 800114e:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001150:	4618      	mov	r0, r3

  /* Return function status */
  return HAL_OK;
}
 8001152:	bd30      	pop	{r4, r5, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001154:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8001158:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800115c:	d1f4      	bne.n	8001148 <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	f042 0202 	orr.w	r2, r2, #2
 8001164:	e7ef      	b.n	8001146 <HAL_DAC_Start+0x32>
	...

08001168 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116a:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800116c:	7940      	ldrb	r0, [r0, #5]
 800116e:	2801      	cmp	r0, #1
{
 8001170:	460e      	mov	r6, r1
 8001172:	f04f 0002 	mov.w	r0, #2
 8001176:	4611      	mov	r1, r2
 8001178:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdac);
 800117a:	d054      	beq.n	8001226 <HAL_DAC_Start_DMA+0xbe>
 800117c:	2401      	movs	r4, #1
 800117e:	716c      	strb	r4, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001180:	7128      	strb	r0, [r5, #4]
 8001182:	682c      	ldr	r4, [r5, #0]

  if(Channel == DAC_CHANNEL_1)
 8001184:	b9e6      	cbnz	r6, 80011c0 <HAL_DAC_Start_DMA+0x58>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001186:	68a8      	ldr	r0, [r5, #8]
 8001188:	4f27      	ldr	r7, [pc, #156]	; (8001228 <HAL_DAC_Start_DMA+0xc0>)
 800118a:	62c7      	str	r7, [r0, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800118c:	4f27      	ldr	r7, [pc, #156]	; (800122c <HAL_DAC_Start_DMA+0xc4>)
 800118e:	6307      	str	r7, [r0, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001190:	4f27      	ldr	r7, [pc, #156]	; (8001230 <HAL_DAC_Start_DMA+0xc8>)
 8001192:	6347      	str	r7, [r0, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001194:	6827      	ldr	r7, [r4, #0]

    /* Case of use of channel 1 */
    switch(Alignment)
 8001196:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001198:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 800119c:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 800119e:	d009      	beq.n	80011b4 <HAL_DAC_Start_DMA+0x4c>
 80011a0:	2a08      	cmp	r2, #8
 80011a2:	d00a      	beq.n	80011ba <HAL_DAC_Start_DMA+0x52>
 80011a4:	2a00      	cmp	r2, #0
 80011a6:	d13c      	bne.n	8001222 <HAL_DAC_Start_DMA+0xba>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80011a8:	f104 0208 	add.w	r2, r4, #8

  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80011ac:	6827      	ldr	r7, [r4, #0]
 80011ae:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 80011b2:	e01a      	b.n	80011ea <HAL_DAC_Start_DMA+0x82>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80011b4:	f104 020c 	add.w	r2, r4, #12
        break;
 80011b8:	e7f8      	b.n	80011ac <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80011ba:	f104 0210 	add.w	r2, r4, #16
        break;
 80011be:	e7f5      	b.n	80011ac <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80011c0:	68e8      	ldr	r0, [r5, #12]
 80011c2:	4f1c      	ldr	r7, [pc, #112]	; (8001234 <HAL_DAC_Start_DMA+0xcc>)
 80011c4:	62c7      	str	r7, [r0, #44]	; 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80011c6:	4f1c      	ldr	r7, [pc, #112]	; (8001238 <HAL_DAC_Start_DMA+0xd0>)
 80011c8:	6307      	str	r7, [r0, #48]	; 0x30
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80011ca:	4f1c      	ldr	r7, [pc, #112]	; (800123c <HAL_DAC_Start_DMA+0xd4>)
 80011cc:	6347      	str	r7, [r0, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80011ce:	6827      	ldr	r7, [r4, #0]
    switch(Alignment)
 80011d0:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80011d2:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 80011d6:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 80011d8:	d016      	beq.n	8001208 <HAL_DAC_Start_DMA+0xa0>
 80011da:	2a08      	cmp	r2, #8
 80011dc:	d017      	beq.n	800120e <HAL_DAC_Start_DMA+0xa6>
 80011de:	b9f2      	cbnz	r2, 800121e <HAL_DAC_Start_DMA+0xb6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80011e0:	f104 0214 	add.w	r2, r4, #20
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80011e4:	6827      	ldr	r7, [r4, #0]
 80011e6:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80011ea:	6027      	str	r7, [r4, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80011ec:	f000 faf8 	bl	80017e0 <HAL_DMA_Start_IT>
    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80011f0:	2300      	movs	r3, #0
 80011f2:	716b      	strb	r3, [r5, #5]

  if (status == HAL_OK)
 80011f4:	b970      	cbnz	r0, 8001214 <HAL_DAC_Start_DMA+0xac>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80011f6:	682b      	ldr	r3, [r5, #0]
 80011f8:	f006 0110 	and.w	r1, r6, #16
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	2601      	movs	r6, #1
 8001200:	408e      	lsls	r6, r1
 8001202:	4316      	orrs	r6, r2
 8001204:	601e      	str	r6, [r3, #0]
 8001206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001208:	f104 0218 	add.w	r2, r4, #24
        break;
 800120c:	e7ea      	b.n	80011e4 <HAL_DAC_Start_DMA+0x7c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800120e:	f104 021c 	add.w	r2, r4, #28
        break;
 8001212:	e7e7      	b.n	80011e4 <HAL_DAC_Start_DMA+0x7c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001214:	692b      	ldr	r3, [r5, #16]
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	612b      	str	r3, [r5, #16]
 800121c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpreg = 0U;
 800121e:	2200      	movs	r2, #0
 8001220:	e7e0      	b.n	80011e4 <HAL_DAC_Start_DMA+0x7c>
 8001222:	4632      	mov	r2, r6
 8001224:	e7c2      	b.n	80011ac <HAL_DAC_Start_DMA+0x44>
  }

  /* Return function status */
  return status;
}
 8001226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001228:	08001243 	.word	0x08001243
 800122c:	08001255 	.word	0x08001255
 8001230:	08001261 	.word	0x08001261
 8001234:	08001391 	.word	0x08001391
 8001238:	080013a1 	.word	0x080013a1
 800123c:	080013ab 	.word	0x080013ab

08001240 <HAL_DAC_ConvCpltCallbackCh1>:
 8001240:	4770      	bx	lr

08001242 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001242:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001244:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff fffa 	bl	8001240 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800124c:	2301      	movs	r3, #1
 800124e:	7123      	strb	r3, [r4, #4]
 8001250:	bd10      	pop	{r4, pc}

08001252 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8001252:	4770      	bx	lr

08001254 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001254:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001256:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001258:	f7ff fffb 	bl	8001252 <HAL_DAC_ConvHalfCpltCallbackCh1>
 800125c:	bd08      	pop	{r3, pc}

0800125e <HAL_DAC_ErrorCallbackCh1>:
 800125e:	4770      	bx	lr

08001260 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001260:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001262:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001264:	6923      	ldr	r3, [r4, #16]
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800126c:	4620      	mov	r0, r4
 800126e:	f7ff fff6 	bl	800125e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001272:	2301      	movs	r3, #1
 8001274:	7123      	strb	r3, [r4, #4]
 8001276:	bd10      	pop	{r4, pc}

08001278 <HAL_DAC_ConfigChannel>:
{
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdac);
 800127a:	7943      	ldrb	r3, [r0, #5]
 800127c:	2b01      	cmp	r3, #1
{
 800127e:	4604      	mov	r4, r0
 8001280:	460d      	mov	r5, r1
 8001282:	4616      	mov	r6, r2
 8001284:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8001288:	d063      	beq.n	8001352 <HAL_DAC_ConfigChannel+0xda>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800128a:	680b      	ldr	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800128c:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 800128e:	2201      	movs	r2, #1
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001290:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 8001292:	7162      	strb	r2, [r4, #5]
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001294:	d125      	bne.n	80012e2 <HAL_DAC_ConfigChannel+0x6a>
    if (Channel == DAC_CHANNEL_1)
 8001296:	2e00      	cmp	r6, #0
 8001298:	d16c      	bne.n	8001374 <HAL_DAC_ConfigChannel+0xfc>
      tickstart = HAL_GetTick();
 800129a:	f7ff fe9b 	bl	8000fd4 <HAL_GetTick>
 800129e:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a4:	041b      	lsls	r3, r3, #16
 80012a6:	d455      	bmi.n	8001354 <HAL_DAC_ConfigChannel+0xdc>
      HAL_Delay(1);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f7ff fe99 	bl	8000fe0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	69aa      	ldr	r2, [r5, #24]
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80012b4:	6821      	ldr	r1, [r4, #0]
 80012b6:	f006 0010 	and.w	r0, r6, #16
 80012ba:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80012bc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80012c0:	4083      	lsls	r3, r0
 80012c2:	ea22 0203 	bic.w	r2, r2, r3
 80012c6:	69eb      	ldr	r3, [r5, #28]
 80012c8:	4083      	lsls	r3, r0
 80012ca:	431a      	orrs	r2, r3
 80012cc:	648a      	str	r2, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80012ce:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80012d0:	22ff      	movs	r2, #255	; 0xff
 80012d2:	4082      	lsls	r2, r0
 80012d4:	ea23 0302 	bic.w	r3, r3, r2
 80012d8:	6a2a      	ldr	r2, [r5, #32]
 80012da:	fa02 f000 	lsl.w	r0, r2, r0
 80012de:	4303      	orrs	r3, r0
 80012e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80012e2:	692b      	ldr	r3, [r5, #16]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	f006 0210 	and.w	r2, r6, #16
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	d108      	bne.n	8001300 <HAL_DAC_ConfigChannel+0x88>
  tmpreg1 = hdac->Instance->CCR;
 80012ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80012f0:	201f      	movs	r0, #31
 80012f2:	4090      	lsls	r0, r2
 80012f4:	ea21 0000 	bic.w	r0, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80012f8:	6969      	ldr	r1, [r5, #20]
 80012fa:	4091      	lsls	r1, r2
 80012fc:	4301      	orrs	r1, r0
  hdac->Instance->CCR = tmpreg1;
 80012fe:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg1 = hdac->Instance->MCR;
 8001300:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001302:	68ae      	ldr	r6, [r5, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001304:	2007      	movs	r0, #7
 8001306:	4090      	lsls	r0, r2
 8001308:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800130c:	6829      	ldr	r1, [r5, #0]
 800130e:	4331      	orrs	r1, r6
 8001310:	68ee      	ldr	r6, [r5, #12]
 8001312:	4331      	orrs	r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001314:	4091      	lsls	r1, r2
 8001316:	4301      	orrs	r1, r0
  hdac->Instance->MCR = tmpreg1;
 8001318:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800131a:	6819      	ldr	r1, [r3, #0]
 800131c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001320:	4090      	lsls	r0, r2
 8001322:	ea21 0100 	bic.w	r1, r1, r0
 8001326:	6019      	str	r1, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8001328:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800132a:	f640 70fc 	movw	r0, #4092	; 0xffc
 800132e:	4090      	lsls	r0, r2
 8001330:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001334:	6869      	ldr	r1, [r5, #4]
 8001336:	4091      	lsls	r1, r2
 8001338:	4301      	orrs	r1, r0
  hdac->Instance->CR = tmpreg1;
 800133a:	6019      	str	r1, [r3, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800133c:	6819      	ldr	r1, [r3, #0]
 800133e:	20c0      	movs	r0, #192	; 0xc0
 8001340:	fa00 f202 	lsl.w	r2, r0, r2
 8001344:	ea21 0202 	bic.w	r2, r1, r2
 8001348:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hdac);
 800134a:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 800134c:	2301      	movs	r3, #1
 800134e:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001350:	7160      	strb	r0, [r4, #5]
}
 8001352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001354:	f7ff fe3e 	bl	8000fd4 <HAL_GetTick>
 8001358:	1bc0      	subs	r0, r0, r7
 800135a:	2801      	cmp	r0, #1
 800135c:	d9a0      	bls.n	80012a0 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800135e:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001360:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001362:	f043 0308 	orr.w	r3, r3, #8
 8001366:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001368:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 800136a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800136c:	f7ff fe32 	bl	8000fd4 <HAL_GetTick>
 8001370:	2801      	cmp	r0, #1
 8001372:	d8f4      	bhi.n	800135e <HAL_DAC_ConfigChannel+0xe6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001378:	2b00      	cmp	r3, #0
 800137a:	dbf7      	blt.n	800136c <HAL_DAC_ConfigChannel+0xf4>
      HAL_Delay(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fe2f 	bl	8000fe0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001382:	6823      	ldr	r3, [r4, #0]
 8001384:	69aa      	ldr	r2, [r5, #24]
 8001386:	645a      	str	r2, [r3, #68]	; 0x44
 8001388:	e794      	b.n	80012b4 <HAL_DAC_ConfigChannel+0x3c>

0800138a <HAL_DACEx_ConvCpltCallbackCh2>:
 800138a:	4770      	bx	lr

0800138c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 800138c:	4770      	bx	lr

0800138e <HAL_DACEx_ErrorCallbackCh2>:
 800138e:	4770      	bx	lr

08001390 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001390:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001392:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff fff8 	bl	800138a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 800139a:	2301      	movs	r3, #1
 800139c:	7123      	strb	r3, [r4, #4]
 800139e:	bd10      	pop	{r4, pc}

080013a0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80013a0:	b508      	push	{r3, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80013a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80013a4:	f7ff fff2 	bl	800138c <HAL_DACEx_ConvHalfCpltCallbackCh2>
 80013a8:	bd08      	pop	{r3, pc}

080013aa <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80013aa:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013ac:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80013ae:	6923      	ldr	r3, [r4, #16]
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff ffe9 	bl	800138e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 80013bc:	2301      	movs	r3, #1
 80013be:	7123      	strb	r3, [r4, #4]
 80013c0:	bd10      	pop	{r4, pc}

080013c2 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80013c2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80013c4:	6803      	ldr	r3, [r0, #0]
 80013c6:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 80013ca:	b93a      	cbnz	r2, 80013dc <DFSDM_RegConvStart+0x1a>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80013d2:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80013d4:	2901      	cmp	r1, #1
 80013d6:	d11c      	bne.n	8001412 <DFSDM_RegConvStart+0x50>
 80013d8:	2302      	movs	r3, #2
 80013da:	e01b      	b.n	8001414 <DFSDM_RegConvStart+0x52>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80013ea:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80013ec:	681a      	ldr	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80013ee:	2903      	cmp	r1, #3
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80013f0:	f042 0201 	orr.w	r2, r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80013f6:	d1ed      	bne.n	80013d4 <DFSDM_RegConvStart+0x12>
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80013f8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80013fa:	b91a      	cbnz	r2, 8001404 <DFSDM_RegConvStart+0x42>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	f042 0202 	orr.w	r2, r2, #2
 8001402:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001404:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001408:	2b01      	cmp	r3, #1
 800140a:	bf0c      	ite	eq
 800140c:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 800140e:	2301      	movne	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001410:	6483      	str	r3, [r0, #72]	; 0x48
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001412:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001414:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 8001418:	4770      	bx	lr
	...

0800141c <DFSDM_GetChannelFromInstance>:
  if (Instance == DFSDM1_Channel0)
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <DFSDM_GetChannelFromInstance+0x54>)
 800141e:	4298      	cmp	r0, r3
 8001420:	d017      	beq.n	8001452 <DFSDM_GetChannelFromInstance+0x36>
  else if (Instance == DFSDM1_Channel1)
 8001422:	3320      	adds	r3, #32
 8001424:	4298      	cmp	r0, r3
 8001426:	d016      	beq.n	8001456 <DFSDM_GetChannelFromInstance+0x3a>
  else if (Instance == DFSDM1_Channel2)
 8001428:	3320      	adds	r3, #32
 800142a:	4298      	cmp	r0, r3
 800142c:	d015      	beq.n	800145a <DFSDM_GetChannelFromInstance+0x3e>
  else if (Instance == DFSDM1_Channel3)
 800142e:	3320      	adds	r3, #32
 8001430:	4298      	cmp	r0, r3
 8001432:	d014      	beq.n	800145e <DFSDM_GetChannelFromInstance+0x42>
  else if (Instance == DFSDM1_Channel4)
 8001434:	3320      	adds	r3, #32
 8001436:	4298      	cmp	r0, r3
 8001438:	d013      	beq.n	8001462 <DFSDM_GetChannelFromInstance+0x46>
  else if (Instance == DFSDM1_Channel5)
 800143a:	3320      	adds	r3, #32
 800143c:	4298      	cmp	r0, r3
 800143e:	d012      	beq.n	8001466 <DFSDM_GetChannelFromInstance+0x4a>
  else if (Instance == DFSDM1_Channel6)
 8001440:	3320      	adds	r3, #32
 8001442:	4298      	cmp	r0, r3
 8001444:	d011      	beq.n	800146a <DFSDM_GetChannelFromInstance+0x4e>
    channel = 7;
 8001446:	3320      	adds	r3, #32
 8001448:	4298      	cmp	r0, r3
 800144a:	bf0c      	ite	eq
 800144c:	2007      	moveq	r0, #7
 800144e:	2000      	movne	r0, #0
 8001450:	4770      	bx	lr
    channel = 0;
 8001452:	2000      	movs	r0, #0
 8001454:	4770      	bx	lr
    channel = 1;
 8001456:	2001      	movs	r0, #1
 8001458:	4770      	bx	lr
    channel = 2;
 800145a:	2002      	movs	r0, #2
 800145c:	4770      	bx	lr
    channel = 3;
 800145e:	2003      	movs	r0, #3
 8001460:	4770      	bx	lr
    channel = 4;
 8001462:	2004      	movs	r0, #4
 8001464:	4770      	bx	lr
    channel = 5;
 8001466:	2005      	movs	r0, #5
 8001468:	4770      	bx	lr
    channel = 6;
 800146a:	2006      	movs	r0, #6
}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40016000 	.word	0x40016000

08001474 <HAL_DFSDM_ChannelInit>:
{
 8001474:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 8001476:	4604      	mov	r4, r0
 8001478:	2800      	cmp	r0, #0
 800147a:	d067      	beq.n	800154c <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800147c:	6800      	ldr	r0, [r0, #0]
 800147e:	4d34      	ldr	r5, [pc, #208]	; (8001550 <HAL_DFSDM_ChannelInit+0xdc>)
 8001480:	f7ff ffcc 	bl	800141c <DFSDM_GetChannelFromInstance>
 8001484:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d15f      	bne.n	800154c <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800148c:	4620      	mov	r0, r4
 800148e:	f001 ff0b 	bl	80032a8 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <HAL_DFSDM_ChannelInit+0xe0>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	3201      	adds	r2, #1
 8001498:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d119      	bne.n	80014d4 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_DFSDM_ChannelInit+0xe4>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80014a8:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68a1      	ldr	r1, [r4, #8]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80014b8:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80014ba:	7922      	ldrb	r2, [r4, #4]
 80014bc:	2a01      	cmp	r2, #1
 80014be:	d105      	bne.n	80014cc <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80014c0:	68e1      	ldr	r1, [r4, #12]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	3901      	subs	r1, #1
 80014c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014ca:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014d2:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80014d4:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80014d6:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80014d8:	6803      	ldr	r3, [r0, #0]
 80014da:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 80014de:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80014e0:	6923      	ldr	r3, [r4, #16]
 80014e2:	6802      	ldr	r2, [r0, #0]
 80014e4:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 80014e6:	69a1      	ldr	r1, [r4, #24]
 80014e8:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80014ea:	4313      	orrs	r3, r2
 80014ec:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80014ee:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80014f0:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80014f2:	f023 030f 	bic.w	r3, r3, #15
 80014f6:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80014f8:	69e3      	ldr	r3, [r4, #28]
 80014fa:	6802      	ldr	r2, [r0, #0]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	4313      	orrs	r3, r2
 8001500:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001502:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001504:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001506:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001508:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 800150c:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800150e:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001510:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001512:	430b      	orrs	r3, r1
 8001514:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001518:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800151a:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800151c:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001524:	6843      	ldr	r3, [r0, #4]
 8001526:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800152a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800152c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001530:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001532:	6803      	ldr	r3, [r0, #0]
 8001534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001538:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800153a:	2301      	movs	r3, #1
 800153c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001540:	f7ff ff6c 	bl	800141c <DFSDM_GetChannelFromInstance>
 8001544:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8001548:	2000      	movs	r0, #0
 800154a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800154c:	2001      	movs	r0, #1
}
 800154e:	bd38      	pop	{r3, r4, r5, pc}
 8001550:	200001f0 	.word	0x200001f0
 8001554:	20000210 	.word	0x20000210
 8001558:	40016000 	.word	0x40016000

0800155c <HAL_DFSDM_FilterInit>:
{
 800155c:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_filter == NULL)
 800155e:	4604      	mov	r4, r0
 8001560:	2800      	cmp	r0, #0
 8001562:	d069      	beq.n	8001638 <HAL_DFSDM_FilterInit+0xdc>
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001564:	6802      	ldr	r2, [r0, #0]
 8001566:	4b35      	ldr	r3, [pc, #212]	; (800163c <HAL_DFSDM_FilterInit+0xe0>)
 8001568:	429a      	cmp	r2, r3
 800156a:	d105      	bne.n	8001578 <HAL_DFSDM_FilterInit+0x1c>
 800156c:	6840      	ldr	r0, [r0, #4]
 800156e:	2801      	cmp	r0, #1
 8001570:	d063      	beq.n	800163a <HAL_DFSDM_FilterInit+0xde>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001572:	68e0      	ldr	r0, [r4, #12]
 8001574:	2801      	cmp	r0, #1
 8001576:	d060      	beq.n	800163a <HAL_DFSDM_FilterInit+0xde>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001578:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800157a:	2201      	movs	r2, #1
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800157c:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800157e:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001580:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001582:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001584:	4620      	mov	r0, r4
 8001586:	f001 fe21 	bl	80031cc <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800158a:	6823      	ldr	r3, [r4, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800158c:	7c20      	ldrb	r0, [r4, #16]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001594:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001596:	7a22      	ldrb	r2, [r4, #8]
 8001598:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	bf0c      	ite	eq
 800159e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80015a2:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 80015a6:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80015a8:	7a62      	ldrb	r2, [r4, #9]
 80015aa:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	bf0c      	ite	eq
 80015b0:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80015b4:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 80015b8:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80015ba:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80015bc:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80015be:	f422 42ce 	bic.w	r2, r2, #26368	; 0x6700
 80015c2:	f022 0208 	bic.w	r2, r2, #8
 80015c6:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80015c8:	2d02      	cmp	r5, #2
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80015ca:	bf01      	itttt	eq
 80015cc:	681a      	ldreq	r2, [r3, #0]
 80015ce:	6961      	ldreq	r1, [r4, #20]
 80015d0:	430a      	orreq	r2, r1
 80015d2:	601a      	streq	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80015d4:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80015d6:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80015d8:	bf0c      	ite	eq
 80015da:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80015de:	f022 0210 	bicne.w	r2, r2, #16
 80015e2:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80015e4:	7c62      	ldrb	r2, [r4, #17]
 80015e6:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	bf0c      	ite	eq
 80015ec:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80015f0:	f022 0220 	bicne.w	r2, r2, #32
 80015f4:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 80015fc:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001600:	615a      	str	r2, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001602:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001604:	6959      	ldr	r1, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001606:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001608:	430a      	orrs	r2, r1
 800160a:	69e1      	ldr	r1, [r4, #28]
 800160c:	430a      	orrs	r2, r1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800160e:	6a21      	ldr	r1, [r4, #32]
 8001610:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001612:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001616:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001618:	6862      	ldr	r2, [r4, #4]
 800161a:	6362      	str	r2, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800161c:	69a2      	ldr	r2, [r4, #24]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800161e:	63a5      	str	r5, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001620:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001622:	681a      	ldr	r2, [r3, #0]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001624:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001628:	f042 0201 	orr.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800162e:	2301      	movs	r3, #1
 8001630:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 8001634:	2000      	movs	r0, #0
 8001636:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001638:	2001      	movs	r0, #1
}
 800163a:	bd38      	pop	{r3, r4, r5, pc}
 800163c:	40016100 	.word	0x40016100

08001640 <HAL_DFSDM_FilterConfigRegChannel>:
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001640:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001644:	3b01      	subs	r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2bfd      	cmp	r3, #253	; 0xfd
{
 800164a:	b510      	push	{r4, lr}
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800164c:	d813      	bhi.n	8001676 <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800164e:	6803      	ldr	r3, [r0, #0]
 8001650:	681c      	ldr	r4, [r3, #0]
 8001652:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 8001656:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800165a:	601c      	str	r4, [r3, #0]
 800165c:	0209      	lsls	r1, r1, #8
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800165e:	681c      	ldr	r4, [r3, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001660:	2a01      	cmp	r2, #1
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001662:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8001666:	bf08      	it	eq
 8001668:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800166c:	4321      	orrs	r1, r4
 800166e:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001670:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8001672:	2000      	movs	r0, #0
 8001674:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001676:	2001      	movs	r0, #1
}
 8001678:	bd10      	pop	{r4, pc}
	...

0800167c <HAL_DFSDM_FilterRegularStart_DMA>:
{
 800167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800167e:	4613      	mov	r3, r2
 8001680:	4605      	mov	r5, r0
  if ((pData == NULL) || (Length == 0U))
 8001682:	460a      	mov	r2, r1
 8001684:	b351      	cbz	r1, 80016dc <HAL_DFSDM_FilterRegularStart_DMA+0x60>
 8001686:	b34b      	cbz	r3, 80016dc <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001688:	6807      	ldr	r7, [r0, #0]
 800168a:	6839      	ldr	r1, [r7, #0]
 800168c:	0289      	lsls	r1, r1, #10
 800168e:	d525      	bpl.n	80016dc <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001690:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001692:	b949      	cbnz	r1, 80016a8 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
 8001694:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001696:	b939      	cbnz	r1, 80016a8 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001698:	6a81      	ldr	r1, [r0, #40]	; 0x28
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800169a:	69c8      	ldr	r0, [r1, #28]
 800169c:	b908      	cbnz	r0, 80016a2 <HAL_DFSDM_FilterRegularStart_DMA+0x26>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d11c      	bne.n	80016dc <HAL_DFSDM_FilterRegularStart_DMA+0x60>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80016a2:	69c9      	ldr	r1, [r1, #28]
 80016a4:	2920      	cmp	r1, #32
 80016a6:	d019      	beq.n	80016dc <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80016a8:	f895 604c 	ldrb.w	r6, [r5, #76]	; 0x4c
 80016ac:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
 80016b0:	2e01      	cmp	r6, #1
 80016b2:	d113      	bne.n	80016dc <HAL_DFSDM_FilterRegularStart_DMA+0x60>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80016b4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80016b6:	490d      	ldr	r1, [pc, #52]	; (80016ec <HAL_DFSDM_FilterRegularStart_DMA+0x70>)
 80016b8:	62c1      	str	r1, [r0, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80016ba:	490d      	ldr	r1, [pc, #52]	; (80016f0 <HAL_DFSDM_FilterRegularStart_DMA+0x74>)
 80016bc:	6341      	str	r1, [r0, #52]	; 0x34
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80016be:	69c1      	ldr	r1, [r0, #28]
 80016c0:	4c0c      	ldr	r4, [pc, #48]	; (80016f4 <HAL_DFSDM_FilterRegularStart_DMA+0x78>)
 80016c2:	2920      	cmp	r1, #32
 80016c4:	bf18      	it	ne
 80016c6:	2400      	movne	r4, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80016c8:	6304      	str	r4, [r0, #48]	; 0x30
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80016ca:	f107 011c 	add.w	r1, r7, #28
 80016ce:	f000 f887 	bl	80017e0 <HAL_DMA_Start_IT>
 80016d2:	4604      	mov	r4, r0
 80016d4:	b120      	cbz	r0, 80016e0 <HAL_DFSDM_FilterRegularStart_DMA+0x64>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80016d6:	23ff      	movs	r3, #255	; 0xff
 80016d8:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
    status = HAL_ERROR;
 80016dc:	2401      	movs	r4, #1
 80016de:	e002      	b.n	80016e6 <HAL_DFSDM_FilterRegularStart_DMA+0x6a>
      DFSDM_RegConvStart(hdfsdm_filter);
 80016e0:	4628      	mov	r0, r5
 80016e2:	f7ff fe6e 	bl	80013c2 <DFSDM_RegConvStart>
}
 80016e6:	4620      	mov	r0, r4
 80016e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	080016f9 	.word	0x080016f9
 80016f0:	0800170f 	.word	0x0800170f
 80016f4:	08001703 	.word	0x08001703

080016f8 <DFSDM_DMARegularConvCplt>:
{
 80016f8:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80016fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80016fc:	f002 f8d6 	bl	80038ac <HAL_DFSDM_FilterRegConvCpltCallback>
 8001700:	bd08      	pop	{r3, pc}

08001702 <DFSDM_DMARegularHalfConvCplt>:
{
 8001702:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001704:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001706:	f002 f8c3 	bl	8003890 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
 800170a:	bd08      	pop	{r3, pc}

0800170c <HAL_DFSDM_FilterErrorCallback>:
{
 800170c:	4770      	bx	lr

0800170e <DFSDM_DMAError>:
{
 800170e:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001710:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001712:	2303      	movs	r3, #3
 8001714:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001716:	f7ff fff9 	bl	800170c <HAL_DFSDM_FilterErrorCallback>
 800171a:	bd08      	pop	{r3, pc}

0800171c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800171c:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800171e:	2800      	cmp	r0, #0
 8001720:	d04e      	beq.n	80017c0 <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001722:	6801      	ldr	r1, [r0, #0]
 8001724:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <HAL_DMA_Init+0xa8>)
 8001726:	4299      	cmp	r1, r3
 8001728:	f04f 0414 	mov.w	r4, #20
 800172c:	d840      	bhi.n	80017b0 <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800172e:	4a26      	ldr	r2, [pc, #152]	; (80017c8 <HAL_DMA_Init+0xac>)
 8001730:	440a      	add	r2, r1
 8001732:	fbb2 f2f4 	udiv	r2, r2, r4
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800173a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 800173e:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001740:	2302      	movs	r3, #2
 8001742:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001746:	6884      	ldr	r4, [r0, #8]
 8001748:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800174a:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 800174c:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 800174e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001750:	432b      	orrs	r3, r5
 8001752:	6945      	ldr	r5, [r0, #20]
 8001754:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001756:	6985      	ldr	r5, [r0, #24]
 8001758:	432b      	orrs	r3, r5
 800175a:	69c5      	ldr	r5, [r0, #28]
 800175c:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800175e:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001760:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001764:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001768:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800176a:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800176c:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8001770:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001772:	d014      	beq.n	800179e <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001774:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_DMA_Init+0xb0>)
 8001778:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800177a:	bf0c      	ite	eq
 800177c:	4914      	ldreq	r1, [pc, #80]	; (80017d0 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800177e:	4915      	ldrne	r1, [pc, #84]	; (80017d4 <HAL_DMA_Init+0xb8>)
 8001780:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001782:	680a      	ldr	r2, [r1, #0]
 8001784:	f003 031c 	and.w	r3, r3, #28
 8001788:	240f      	movs	r4, #15
 800178a:	409c      	lsls	r4, r3
 800178c:	ea22 0204 	bic.w	r2, r2, r4
 8001790:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001792:	6842      	ldr	r2, [r0, #4]
 8001794:	680c      	ldr	r4, [r1, #0]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	4323      	orrs	r3, r4
 800179c:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800179e:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80017a0:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017a2:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017a4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80017a8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 80017ac:	4618      	mov	r0, r3
 80017ae:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_DMA_Init+0xbc>)
 80017b2:	440b      	add	r3, r1
 80017b4:	fbb3 f3f4 	udiv	r3, r3, r4
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <HAL_DMA_Init+0xc0>)
 80017be:	e7be      	b.n	800173e <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 80017c0:	2001      	movs	r0, #1
}
 80017c2:	bd30      	pop	{r4, r5, pc}
 80017c4:	40020407 	.word	0x40020407
 80017c8:	bffdfff8 	.word	0xbffdfff8
 80017cc:	40020000 	.word	0x40020000
 80017d0:	400200a8 	.word	0x400200a8
 80017d4:	400204a8 	.word	0x400204a8
 80017d8:	bffdfbf8 	.word	0xbffdfbf8
 80017dc:	40020400 	.word	0x40020400

080017e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017e2:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80017e6:	2c01      	cmp	r4, #1
 80017e8:	d038      	beq.n	800185c <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 80017ea:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 80017ee:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80017f0:	b2ed      	uxtb	r5, r5
 80017f2:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80017f4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 80017f8:	f04f 0600 	mov.w	r6, #0
 80017fc:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8001800:	d12a      	bne.n	8001858 <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001802:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001806:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001808:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800180a:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800180c:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800180e:	f026 0601 	bic.w	r6, r6, #1
 8001812:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001814:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001816:	f006 061c 	and.w	r6, r6, #28
 800181a:	40b5      	lsls	r5, r6
 800181c:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800181e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001820:	6883      	ldr	r3, [r0, #8]
 8001822:	6805      	ldr	r5, [r0, #0]
 8001824:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8001826:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001828:	bf0b      	itete	eq
 800182a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800182c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800182e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001830:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001832:	b14b      	cbz	r3, 8001848 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800183a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800183c:	682b      	ldr	r3, [r5, #0]
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001844:	2000      	movs	r0, #0
 8001846:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	f023 0304 	bic.w	r3, r3, #4
 800184e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	f043 030a 	orr.w	r3, r3, #10
 8001856:	e7f0      	b.n	800183a <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 8001858:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 800185c:	2002      	movs	r0, #2
}
 800185e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001860 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001860:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001864:	2a02      	cmp	r2, #2
{
 8001866:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001868:	d003      	beq.n	8001872 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186a:	2204      	movs	r2, #4
 800186c:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800186e:	2001      	movs	r0, #1
 8001870:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001872:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001874:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001876:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8001878:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800187a:	f021 010e 	bic.w	r1, r1, #14
 800187e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001880:	6811      	ldr	r1, [r2, #0]
 8001882:	f021 0101 	bic.w	r1, r1, #1
 8001886:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001888:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800188a:	2101      	movs	r1, #1
 800188c:	f002 021c 	and.w	r2, r2, #28
 8001890:	fa01 f202 	lsl.w	r2, r1, r2
 8001894:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001896:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001898:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800189c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80018a0:	b113      	cbz	r3, 80018a8 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 80018a2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80018a4:	4620      	mov	r0, r4
 80018a6:	bd10      	pop	{r4, pc}
 80018a8:	4618      	mov	r0, r3
}
 80018aa:	bd10      	pop	{r4, pc}

080018ac <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80018ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80018b0:	6803      	ldr	r3, [r0, #0]
{
 80018b2:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80018b4:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018b8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80018ba:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80018bc:	2404      	movs	r4, #4
 80018be:	4094      	lsls	r4, r2
 80018c0:	4226      	tst	r6, r4
 80018c2:	d00e      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x36>
 80018c4:	f015 0f04 	tst.w	r5, #4
 80018c8:	d00b      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018ce:	bf5e      	ittt	pl
 80018d0:	681a      	ldrpl	r2, [r3, #0]
 80018d2:	f022 0204 	bicpl.w	r2, r2, #4
 80018d6:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80018d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80018da:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80018dc:	b373      	cbz	r3, 800193c <HAL_DMA_IRQHandler+0x90>
}
 80018de:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80018e0:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80018e2:	2402      	movs	r4, #2
 80018e4:	4094      	lsls	r4, r2
 80018e6:	4226      	tst	r6, r4
 80018e8:	d012      	beq.n	8001910 <HAL_DMA_IRQHandler+0x64>
 80018ea:	f015 0f02 	tst.w	r5, #2
 80018ee:	d00f      	beq.n	8001910 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	0695      	lsls	r5, r2, #26
 80018f4:	d406      	bmi.n	8001904 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	f022 020a 	bic.w	r2, r2, #10
 80018fc:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80018fe:	2301      	movs	r3, #1
 8001900:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001904:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001906:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001908:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 800190c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800190e:	e7e5      	b.n	80018dc <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001910:	2408      	movs	r4, #8
 8001912:	4094      	lsls	r4, r2
 8001914:	4234      	tst	r4, r6
 8001916:	d011      	beq.n	800193c <HAL_DMA_IRQHandler+0x90>
 8001918:	072c      	lsls	r4, r5, #28
 800191a:	d50f      	bpl.n	800193c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800191c:	681c      	ldr	r4, [r3, #0]
 800191e:	f024 040e 	bic.w	r4, r4, #14
 8001922:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001924:	2301      	movs	r3, #1
 8001926:	fa03 f202 	lsl.w	r2, r3, r2
 800192a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800192c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800192e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001932:	2300      	movs	r3, #0
 8001934:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001938:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800193a:	e7cf      	b.n	80018dc <HAL_DMA_IRQHandler+0x30>
}
 800193c:	bc70      	pop	{r4, r5, r6}
 800193e:	4770      	bx	lr

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001944:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001946:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001af4 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800194c:	4c67      	ldr	r4, [pc, #412]	; (8001aec <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001950:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001952:	9a01      	ldr	r2, [sp, #4]
 8001954:	40da      	lsrs	r2, r3
 8001956:	d102      	bne.n	800195e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001958:	b005      	add	sp, #20
 800195a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800195e:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001960:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001962:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001964:	ea12 0e06 	ands.w	lr, r2, r6
 8001968:	f000 80b1 	beq.w	8001ace <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800196c:	684a      	ldr	r2, [r1, #4]
 800196e:	f022 0710 	bic.w	r7, r2, #16
 8001972:	2f02      	cmp	r7, #2
 8001974:	d116      	bne.n	80019a4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001976:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800197a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800197e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001982:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001986:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800198a:	f04f 0c0f 	mov.w	ip, #15
 800198e:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001992:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001996:	690d      	ldr	r5, [r1, #16]
 8001998:	fa05 f50a 	lsl.w	r5, r5, sl
 800199c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80019a0:	f8c9 5020 	str.w	r5, [r9, #32]
 80019a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019a8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80019aa:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019ae:	fa05 f50c 	lsl.w	r5, r5, ip
 80019b2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b4:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019b8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019bc:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019c2:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80019c8:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019cc:	d811      	bhi.n	80019f2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80019ce:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019d0:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019d4:	68cf      	ldr	r7, [r1, #12]
 80019d6:	fa07 f70c 	lsl.w	r7, r7, ip
 80019da:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80019de:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80019e0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019e2:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019e6:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80019ea:	409f      	lsls	r7, r3
 80019ec:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80019f0:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019f2:	f1ba 0f03 	cmp.w	sl, #3
 80019f6:	d107      	bne.n	8001a08 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80019f8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019fa:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80019fe:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001a02:	409f      	lsls	r7, r3
 8001a04:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8001a06:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001a08:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a0a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a0c:	688e      	ldr	r6, [r1, #8]
 8001a0e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001a12:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001a14:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a16:	00d5      	lsls	r5, r2, #3
 8001a18:	d559      	bpl.n	8001ace <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001a1e:	f045 0501 	orr.w	r5, r5, #1
 8001a22:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001a26:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001a2a:	f023 0603 	bic.w	r6, r3, #3
 8001a2e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001a32:	f005 0501 	and.w	r5, r5, #1
 8001a36:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001a3a:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a3c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a40:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a42:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a44:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001a48:	270f      	movs	r7, #15
 8001a4a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a4e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a52:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a56:	d03c      	beq.n	8001ad2 <HAL_GPIO_Init+0x192>
 8001a58:	4d25      	ldr	r5, [pc, #148]	; (8001af0 <HAL_GPIO_Init+0x1b0>)
 8001a5a:	42a8      	cmp	r0, r5
 8001a5c:	d03b      	beq.n	8001ad6 <HAL_GPIO_Init+0x196>
 8001a5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a62:	42a8      	cmp	r0, r5
 8001a64:	d039      	beq.n	8001ada <HAL_GPIO_Init+0x19a>
 8001a66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a6a:	42a8      	cmp	r0, r5
 8001a6c:	d037      	beq.n	8001ade <HAL_GPIO_Init+0x19e>
 8001a6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a72:	42a8      	cmp	r0, r5
 8001a74:	d035      	beq.n	8001ae2 <HAL_GPIO_Init+0x1a2>
 8001a76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a7a:	42a8      	cmp	r0, r5
 8001a7c:	d033      	beq.n	8001ae6 <HAL_GPIO_Init+0x1a6>
 8001a7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a82:	42a8      	cmp	r0, r5
 8001a84:	bf14      	ite	ne
 8001a86:	2507      	movne	r5, #7
 8001a88:	2506      	moveq	r5, #6
 8001a8a:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a8e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a90:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001a92:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001a94:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a98:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001a9a:	bf54      	ite	pl
 8001a9c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001a9e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001aa2:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001aa4:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa6:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001aa8:	bf54      	ite	pl
 8001aaa:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001aac:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001ab0:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001ab2:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab4:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001ab6:	bf54      	ite	pl
 8001ab8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001aba:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8001abe:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001ac0:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac2:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001ac4:	bf54      	ite	pl
 8001ac6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001ac8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001acc:	60e5      	str	r5, [r4, #12]
    position++;
 8001ace:	3301      	adds	r3, #1
 8001ad0:	e73f      	b.n	8001952 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad2:	2500      	movs	r5, #0
 8001ad4:	e7d9      	b.n	8001a8a <HAL_GPIO_Init+0x14a>
 8001ad6:	2501      	movs	r5, #1
 8001ad8:	e7d7      	b.n	8001a8a <HAL_GPIO_Init+0x14a>
 8001ada:	2502      	movs	r5, #2
 8001adc:	e7d5      	b.n	8001a8a <HAL_GPIO_Init+0x14a>
 8001ade:	2503      	movs	r5, #3
 8001ae0:	e7d3      	b.n	8001a8a <HAL_GPIO_Init+0x14a>
 8001ae2:	2504      	movs	r5, #4
 8001ae4:	e7d1      	b.n	8001a8a <HAL_GPIO_Init+0x14a>
 8001ae6:	2505      	movs	r5, #5
 8001ae8:	e7cf      	b.n	8001a8a <HAL_GPIO_Init+0x14a>
 8001aea:	bf00      	nop
 8001aec:	40010400 	.word	0x40010400
 8001af0:	48000400 	.word	0x48000400
 8001af4:	40021000 	.word	0x40021000

08001af8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af8:	b10a      	cbz	r2, 8001afe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001afa:	6181      	str	r1, [r0, #24]
 8001afc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001afe:	6281      	str	r1, [r0, #40]	; 0x28
 8001b00:	4770      	bx	lr

08001b02 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b02:	4770      	bx	lr

08001b04 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001b04:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001b08:	6959      	ldr	r1, [r3, #20]
 8001b0a:	4201      	tst	r1, r0
 8001b0c:	d002      	beq.n	8001b14 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b0e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b10:	f7ff fff7 	bl	8001b02 <HAL_GPIO_EXTI_Callback>
 8001b14:	bd08      	pop	{r3, pc}
 8001b16:	bf00      	nop
 8001b18:	40010400 	.word	0x40010400

08001b1c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b1c:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <HAL_PWREx_GetVoltageRange+0xc>)
 8001b1e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001b20:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40007000 	.word	0x40007000

08001b2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b2e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b30:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b34:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b38:	d11c      	bne.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b3a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001b3e:	d015      	beq.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b4a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b4c:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001b4e:	6811      	ldr	r1, [r2, #0]
 8001b50:	2232      	movs	r2, #50	; 0x32
 8001b52:	434a      	muls	r2, r1
 8001b54:	490f      	ldr	r1, [pc, #60]	; (8001b94 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001b56:	fbb2 f2f1 	udiv	r2, r2, r1
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b5e:	6958      	ldr	r0, [r3, #20]
 8001b60:	0540      	lsls	r0, r0, #21
 8001b62:	d500      	bpl.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001b64:	b922      	cbnz	r2, 8001b70 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b66:	694b      	ldr	r3, [r1, #20]
 8001b68:	055b      	lsls	r3, r3, #21
 8001b6a:	d40d      	bmi.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	4770      	bx	lr
        wait_loop_index--;
 8001b70:	3a01      	subs	r2, #1
 8001b72:	e7f4      	b.n	8001b5e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b74:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b78:	bf1f      	itttt	ne
 8001b7a:	681a      	ldrne	r2, [r3, #0]
 8001b7c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001b80:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001b84:	601a      	strne	r2, [r3, #0]
 8001b86:	e7f1      	b.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001b88:	2003      	movs	r0, #3
}
 8001b8a:	4770      	bx	lr
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	20000000 	.word	0x20000000
 8001b94:	000f4240 	.word	0x000f4240

08001b98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b9a:	4d1e      	ldr	r5, [pc, #120]	; (8001c14 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001b9c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b9e:	00da      	lsls	r2, r3, #3
{
 8001ba0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ba2:	d518      	bpl.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ba4:	f7ff ffba 	bl	8001b1c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001bac:	d123      	bne.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bae:	2c80      	cmp	r4, #128	; 0x80
 8001bb0:	d929      	bls.n	8001c06 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bb2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bb4:	bf8c      	ite	hi
 8001bb6:	2002      	movhi	r0, #2
 8001bb8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bba:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001bbc:	6813      	ldr	r3, [r2, #0]
 8001bbe:	f023 0307 	bic.w	r3, r3, #7
 8001bc2:	4303      	orrs	r3, r0
 8001bc4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bc6:	6813      	ldr	r3, [r2, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001bcc:	1a18      	subs	r0, r3, r0
 8001bce:	bf18      	it	ne
 8001bd0:	2001      	movne	r0, #1
 8001bd2:	b003      	add	sp, #12
 8001bd4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	65ab      	str	r3, [r5, #88]	; 0x58
 8001bde:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001be8:	f7ff ff98 	bl	8001b1c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bec:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	65ab      	str	r3, [r5, #88]	; 0x58
 8001bf4:	e7d8      	b.n	8001ba8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001bf6:	2c80      	cmp	r4, #128	; 0x80
 8001bf8:	d807      	bhi.n	8001c0a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001bfa:	d008      	beq.n	8001c0e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001bfc:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001c00:	4258      	negs	r0, r3
 8001c02:	4158      	adcs	r0, r3
 8001c04:	e7d9      	b.n	8001bba <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c06:	2000      	movs	r0, #0
 8001c08:	e7d7      	b.n	8001bba <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c0a:	2003      	movs	r0, #3
 8001c0c:	e7d5      	b.n	8001bba <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c0e:	2002      	movs	r0, #2
 8001c10:	e7d3      	b.n	8001bba <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40022000 	.word	0x40022000

08001c1c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c1e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c20:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c22:	f012 020c 	ands.w	r2, r2, #12
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x18>
 8001c28:	2a0c      	cmp	r2, #12
 8001c2a:	d115      	bne.n	8001c58 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c2c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c30:	2901      	cmp	r1, #1
 8001c32:	d118      	bne.n	8001c66 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c34:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001c36:	4820      	ldr	r0, [pc, #128]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c38:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c3a:	bf55      	itete	pl
 8001c3c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c40:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c42:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c46:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001c4a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c4e:	b382      	cbz	r2, 8001cb2 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c50:	2a0c      	cmp	r2, #12
 8001c52:	d009      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x4c>
 8001c54:	2000      	movs	r0, #0
  return sysclockfreq;
 8001c56:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c58:	2a04      	cmp	r2, #4
 8001c5a:	d029      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x94>
 8001c5c:	2a08      	cmp	r2, #8
 8001c5e:	4817      	ldr	r0, [pc, #92]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c60:	bf18      	it	ne
 8001c62:	2000      	movne	r0, #0
 8001c64:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c66:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c68:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c6a:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c6c:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c70:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8001c74:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c76:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x6c>
 8001c7c:	2903      	cmp	r1, #3
 8001c7e:	d012      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c80:	68d9      	ldr	r1, [r3, #12]
 8001c82:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001c86:	e003      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c88:	68d9      	ldr	r1, [r3, #12]
 8001c8a:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c8c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c90:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c92:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c96:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001c9a:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c9c:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c9e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001ca0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ca4:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ca6:	68d9      	ldr	r1, [r3, #12]
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001caa:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001cae:	e7ef      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8001cb0:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001cb2:	4770      	bx	lr
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	08006820 	.word	0x08006820
 8001cbc:	007a1200 	.word	0x007a1200
 8001cc0:	00f42400 	.word	0x00f42400

08001cc4 <HAL_RCC_OscConfig>:
{
 8001cc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001cc8:	4605      	mov	r5, r0
 8001cca:	b918      	cbnz	r0, 8001cd4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001ccc:	2001      	movs	r0, #1
}
 8001cce:	b003      	add	sp, #12
 8001cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd4:	4ca5      	ldr	r4, [pc, #660]	; (8001f6c <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cd6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd8:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cda:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cdc:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cde:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ce6:	d53c      	bpl.n	8001d62 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ce8:	b11e      	cbz	r6, 8001cf2 <HAL_RCC_OscConfig+0x2e>
 8001cea:	2e0c      	cmp	r6, #12
 8001cec:	d163      	bne.n	8001db6 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cee:	2f01      	cmp	r7, #1
 8001cf0:	d161      	bne.n	8001db6 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	0798      	lsls	r0, r3, #30
 8001cf6:	d502      	bpl.n	8001cfe <HAL_RCC_OscConfig+0x3a>
 8001cf8:	69ab      	ldr	r3, [r5, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0e6      	beq.n	8001ccc <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	6a28      	ldr	r0, [r5, #32]
 8001d02:	0719      	lsls	r1, r3, #28
 8001d04:	bf56      	itet	pl
 8001d06:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001d0a:	6823      	ldrmi	r3, [r4, #0]
 8001d0c:	091b      	lsrpl	r3, r3, #4
 8001d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d12:	4283      	cmp	r3, r0
 8001d14:	d23a      	bcs.n	8001d8c <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d16:	f7ff ff3f 	bl	8001b98 <RCC_SetFlashLatencyFromMSIRange>
 8001d1a:	2800      	cmp	r0, #0
 8001d1c:	d1d6      	bne.n	8001ccc <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	f043 0308 	orr.w	r3, r3, #8
 8001d24:	6023      	str	r3, [r4, #0]
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	6a2a      	ldr	r2, [r5, #32]
 8001d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d32:	6863      	ldr	r3, [r4, #4]
 8001d34:	69ea      	ldr	r2, [r5, #28]
 8001d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d3e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d40:	f7ff ff6c 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001d44:	68a3      	ldr	r3, [r4, #8]
 8001d46:	4a8a      	ldr	r2, [pc, #552]	; (8001f70 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d4c:	5cd3      	ldrb	r3, [r2, r3]
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	40d8      	lsrs	r0, r3
 8001d54:	4b87      	ldr	r3, [pc, #540]	; (8001f74 <HAL_RCC_OscConfig+0x2b0>)
 8001d56:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7ff f905 	bl	8000f68 <HAL_InitTick>
        if(status != HAL_OK)
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	d1b5      	bne.n	8001cce <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d62:	682b      	ldr	r3, [r5, #0]
 8001d64:	07d8      	lsls	r0, r3, #31
 8001d66:	d45d      	bmi.n	8001e24 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	0799      	lsls	r1, r3, #30
 8001d6c:	f100 809c 	bmi.w	8001ea8 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	0718      	lsls	r0, r3, #28
 8001d74:	f100 80d0 	bmi.w	8001f18 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d78:	682b      	ldr	r3, [r5, #0]
 8001d7a:	0759      	lsls	r1, r3, #29
 8001d7c:	f100 80fc 	bmi.w	8001f78 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d80:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 8165 	bne.w	8002052 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8001d88:	2000      	movs	r0, #0
 8001d8a:	e7a0      	b.n	8001cce <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	6023      	str	r3, [r4, #0]
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d9a:	4303      	orrs	r3, r0
 8001d9c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d9e:	6863      	ldr	r3, [r4, #4]
 8001da0:	69ea      	ldr	r2, [r5, #28]
 8001da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001daa:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dac:	f7ff fef4 	bl	8001b98 <RCC_SetFlashLatencyFromMSIRange>
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d0c5      	beq.n	8001d40 <HAL_RCC_OscConfig+0x7c>
 8001db4:	e78a      	b.n	8001ccc <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001db6:	69ab      	ldr	r3, [r5, #24]
 8001db8:	b31b      	cbz	r3, 8001e02 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dc2:	f7ff f907 	bl	8000fd4 <HAL_GetTick>
 8001dc6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	079a      	lsls	r2, r3, #30
 8001dcc:	d511      	bpl.n	8001df2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	6023      	str	r3, [r4, #0]
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	6a2a      	ldr	r2, [r5, #32]
 8001dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dde:	4313      	orrs	r3, r2
 8001de0:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de2:	6863      	ldr	r3, [r4, #4]
 8001de4:	69ea      	ldr	r2, [r5, #28]
 8001de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001dee:	6063      	str	r3, [r4, #4]
 8001df0:	e7b7      	b.n	8001d62 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001df2:	f7ff f8ef 	bl	8000fd4 <HAL_GetTick>
 8001df6:	eba0 0008 	sub.w	r0, r0, r8
 8001dfa:	2802      	cmp	r0, #2
 8001dfc:	d9e4      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8001dfe:	2003      	movs	r0, #3
 8001e00:	e765      	b.n	8001cce <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e0a:	f7ff f8e3 	bl	8000fd4 <HAL_GetTick>
 8001e0e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	079b      	lsls	r3, r3, #30
 8001e14:	d5a5      	bpl.n	8001d62 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e16:	f7ff f8dd 	bl	8000fd4 <HAL_GetTick>
 8001e1a:	eba0 0008 	sub.w	r0, r0, r8
 8001e1e:	2802      	cmp	r0, #2
 8001e20:	d9f6      	bls.n	8001e10 <HAL_RCC_OscConfig+0x14c>
 8001e22:	e7ec      	b.n	8001dfe <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e24:	2e08      	cmp	r6, #8
 8001e26:	d003      	beq.n	8001e30 <HAL_RCC_OscConfig+0x16c>
 8001e28:	2e0c      	cmp	r6, #12
 8001e2a:	d108      	bne.n	8001e3e <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8001e2c:	2f03      	cmp	r7, #3
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	039a      	lsls	r2, r3, #14
 8001e34:	d598      	bpl.n	8001d68 <HAL_RCC_OscConfig+0xa4>
 8001e36:	686b      	ldr	r3, [r5, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d195      	bne.n	8001d68 <HAL_RCC_OscConfig+0xa4>
 8001e3c:	e746      	b.n	8001ccc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3e:	686b      	ldr	r3, [r5, #4]
 8001e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e44:	d110      	bne.n	8001e68 <HAL_RCC_OscConfig+0x1a4>
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e4e:	f7ff f8c1 	bl	8000fd4 <HAL_GetTick>
 8001e52:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e54:	6823      	ldr	r3, [r4, #0]
 8001e56:	039b      	lsls	r3, r3, #14
 8001e58:	d486      	bmi.n	8001d68 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5a:	f7ff f8bb 	bl	8000fd4 <HAL_GetTick>
 8001e5e:	eba0 0008 	sub.w	r0, r0, r8
 8001e62:	2864      	cmp	r0, #100	; 0x64
 8001e64:	d9f6      	bls.n	8001e54 <HAL_RCC_OscConfig+0x190>
 8001e66:	e7ca      	b.n	8001dfe <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e6c:	d104      	bne.n	8001e78 <HAL_RCC_OscConfig+0x1b4>
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e74:	6023      	str	r3, [r4, #0]
 8001e76:	e7e6      	b.n	8001e46 <HAL_RCC_OscConfig+0x182>
 8001e78:	6822      	ldr	r2, [r4, #0]
 8001e7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e7e:	6022      	str	r2, [r4, #0]
 8001e80:	6822      	ldr	r2, [r4, #0]
 8001e82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e86:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8001e8c:	f7ff f8a2 	bl	8000fd4 <HAL_GetTick>
 8001e90:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	0398      	lsls	r0, r3, #14
 8001e96:	f57f af67 	bpl.w	8001d68 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9a:	f7ff f89b 	bl	8000fd4 <HAL_GetTick>
 8001e9e:	eba0 0008 	sub.w	r0, r0, r8
 8001ea2:	2864      	cmp	r0, #100	; 0x64
 8001ea4:	d9f5      	bls.n	8001e92 <HAL_RCC_OscConfig+0x1ce>
 8001ea6:	e7aa      	b.n	8001dfe <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ea8:	2e04      	cmp	r6, #4
 8001eaa:	d003      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x1f0>
 8001eac:	2e0c      	cmp	r6, #12
 8001eae:	d110      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001eb0:	2f02      	cmp	r7, #2
 8001eb2:	d10e      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	0559      	lsls	r1, r3, #21
 8001eb8:	d503      	bpl.n	8001ec2 <HAL_RCC_OscConfig+0x1fe>
 8001eba:	68eb      	ldr	r3, [r5, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f43f af05 	beq.w	8001ccc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec2:	6863      	ldr	r3, [r4, #4]
 8001ec4:	692a      	ldr	r2, [r5, #16]
 8001ec6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001eca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ece:	6063      	str	r3, [r4, #4]
 8001ed0:	e74e      	b.n	8001d70 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed2:	68eb      	ldr	r3, [r5, #12]
 8001ed4:	b17b      	cbz	r3, 8001ef6 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ede:	f7ff f879 	bl	8000fd4 <HAL_GetTick>
 8001ee2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	055a      	lsls	r2, r3, #21
 8001ee8:	d4eb      	bmi.n	8001ec2 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eea:	f7ff f873 	bl	8000fd4 <HAL_GetTick>
 8001eee:	1bc0      	subs	r0, r0, r7
 8001ef0:	2802      	cmp	r0, #2
 8001ef2:	d9f7      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x220>
 8001ef4:	e783      	b.n	8001dfe <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001efc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001efe:	f7ff f869 	bl	8000fd4 <HAL_GetTick>
 8001f02:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	055b      	lsls	r3, r3, #21
 8001f08:	f57f af32 	bpl.w	8001d70 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7ff f862 	bl	8000fd4 <HAL_GetTick>
 8001f10:	1bc0      	subs	r0, r0, r7
 8001f12:	2802      	cmp	r0, #2
 8001f14:	d9f6      	bls.n	8001f04 <HAL_RCC_OscConfig+0x240>
 8001f16:	e772      	b.n	8001dfe <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f18:	696b      	ldr	r3, [r5, #20]
 8001f1a:	b19b      	cbz	r3, 8001f44 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001f1c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f28:	f7ff f854 	bl	8000fd4 <HAL_GetTick>
 8001f2c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f2e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f32:	079a      	lsls	r2, r3, #30
 8001f34:	f53f af20 	bmi.w	8001d78 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f38:	f7ff f84c 	bl	8000fd4 <HAL_GetTick>
 8001f3c:	1bc0      	subs	r0, r0, r7
 8001f3e:	2802      	cmp	r0, #2
 8001f40:	d9f5      	bls.n	8001f2e <HAL_RCC_OscConfig+0x26a>
 8001f42:	e75c      	b.n	8001dfe <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8001f44:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f50:	f7ff f840 	bl	8000fd4 <HAL_GetTick>
 8001f54:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f56:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f5a:	079b      	lsls	r3, r3, #30
 8001f5c:	f57f af0c 	bpl.w	8001d78 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f60:	f7ff f838 	bl	8000fd4 <HAL_GetTick>
 8001f64:	1bc0      	subs	r0, r0, r7
 8001f66:	2802      	cmp	r0, #2
 8001f68:	d9f5      	bls.n	8001f56 <HAL_RCC_OscConfig+0x292>
 8001f6a:	e748      	b.n	8001dfe <HAL_RCC_OscConfig+0x13a>
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	08006805 	.word	0x08006805
 8001f74:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f7a:	00d8      	lsls	r0, r3, #3
 8001f7c:	d429      	bmi.n	8001fd2 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f84:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f90:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f94:	4f5d      	ldr	r7, [pc, #372]	; (800210c <HAL_RCC_OscConfig+0x448>)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	05d9      	lsls	r1, r3, #23
 8001f9a:	d51d      	bpl.n	8001fd8 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9c:	68ab      	ldr	r3, [r5, #8]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d12b      	bne.n	8001ffa <HAL_RCC_OscConfig+0x336>
 8001fa2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001fae:	f7ff f811 	bl	8000fd4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001fb6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001fbc:	079b      	lsls	r3, r3, #30
 8001fbe:	d542      	bpl.n	8002046 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8001fc0:	f1b8 0f00 	cmp.w	r8, #0
 8001fc4:	f43f aedc 	beq.w	8001d80 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fce:	65a3      	str	r3, [r4, #88]	; 0x58
 8001fd0:	e6d6      	b.n	8001d80 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8001fd2:	f04f 0800 	mov.w	r8, #0
 8001fd6:	e7dd      	b.n	8001f94 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fde:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001fe0:	f7fe fff8 	bl	8000fd4 <HAL_GetTick>
 8001fe4:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	05da      	lsls	r2, r3, #23
 8001fea:	d4d7      	bmi.n	8001f9c <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fec:	f7fe fff2 	bl	8000fd4 <HAL_GetTick>
 8001ff0:	eba0 0009 	sub.w	r0, r0, r9
 8001ff4:	2802      	cmp	r0, #2
 8001ff6:	d9f6      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x322>
 8001ff8:	e701      	b.n	8001dfe <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffa:	2b05      	cmp	r3, #5
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_OscConfig+0x348>
 8001ffe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800200a:	e7ca      	b.n	8001fa2 <HAL_RCC_OscConfig+0x2de>
 800200c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002010:	f022 0201 	bic.w	r2, r2, #1
 8002014:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002018:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800201c:	f022 0204 	bic.w	r2, r2, #4
 8002020:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1c2      	bne.n	8001fae <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8002028:	f7fe ffd4 	bl	8000fd4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002030:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002032:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002036:	0798      	lsls	r0, r3, #30
 8002038:	d5c2      	bpl.n	8001fc0 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7fe ffcb 	bl	8000fd4 <HAL_GetTick>
 800203e:	1bc0      	subs	r0, r0, r7
 8002040:	4548      	cmp	r0, r9
 8002042:	d9f6      	bls.n	8002032 <HAL_RCC_OscConfig+0x36e>
 8002044:	e6db      	b.n	8001dfe <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7fe ffc5 	bl	8000fd4 <HAL_GetTick>
 800204a:	1bc0      	subs	r0, r0, r7
 800204c:	4548      	cmp	r0, r9
 800204e:	d9b3      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x2f4>
 8002050:	e6d5      	b.n	8001dfe <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002052:	2e0c      	cmp	r6, #12
 8002054:	f43f ae3a 	beq.w	8001ccc <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002058:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002060:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002062:	d137      	bne.n	80020d4 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8002064:	f7fe ffb6 	bl	8000fd4 <HAL_GetTick>
 8002068:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	0199      	lsls	r1, r3, #6
 800206e:	d42b      	bmi.n	80020c8 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002070:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002072:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002074:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002078:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800207a:	3a01      	subs	r2, #1
 800207c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002080:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002082:	0912      	lsrs	r2, r2, #4
 8002084:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002088:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800208a:	0852      	lsrs	r2, r2, #1
 800208c:	3a01      	subs	r2, #1
 800208e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002092:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002094:	0852      	lsrs	r2, r2, #1
 8002096:	3a01      	subs	r2, #1
 8002098:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800209c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a4:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020a6:	68e3      	ldr	r3, [r4, #12]
 80020a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ac:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80020ae:	f7fe ff91 	bl	8000fd4 <HAL_GetTick>
 80020b2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	019a      	lsls	r2, r3, #6
 80020b8:	f53f ae66 	bmi.w	8001d88 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020bc:	f7fe ff8a 	bl	8000fd4 <HAL_GetTick>
 80020c0:	1b40      	subs	r0, r0, r5
 80020c2:	2802      	cmp	r0, #2
 80020c4:	d9f6      	bls.n	80020b4 <HAL_RCC_OscConfig+0x3f0>
 80020c6:	e69a      	b.n	8001dfe <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7fe ff84 	bl	8000fd4 <HAL_GetTick>
 80020cc:	1b80      	subs	r0, r0, r6
 80020ce:	2802      	cmp	r0, #2
 80020d0:	d9cb      	bls.n	800206a <HAL_RCC_OscConfig+0x3a6>
 80020d2:	e694      	b.n	8001dfe <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020da:	bf02      	ittt	eq
 80020dc:	68e3      	ldreq	r3, [r4, #12]
 80020de:	f023 0303 	biceq.w	r3, r3, #3
 80020e2:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020e4:	68e3      	ldr	r3, [r4, #12]
 80020e6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80020f0:	f7fe ff70 	bl	8000fd4 <HAL_GetTick>
 80020f4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	019b      	lsls	r3, r3, #6
 80020fa:	f57f ae45 	bpl.w	8001d88 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fe:	f7fe ff69 	bl	8000fd4 <HAL_GetTick>
 8002102:	1b40      	subs	r0, r0, r5
 8002104:	2802      	cmp	r0, #2
 8002106:	d9f6      	bls.n	80020f6 <HAL_RCC_OscConfig+0x432>
 8002108:	e679      	b.n	8001dfe <HAL_RCC_OscConfig+0x13a>
 800210a:	bf00      	nop
 800210c:	40007000 	.word	0x40007000

08002110 <HAL_RCC_ClockConfig>:
{
 8002110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002114:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002116:	4604      	mov	r4, r0
 8002118:	b910      	cbnz	r0, 8002120 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800211a:	2001      	movs	r0, #1
 800211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_RCC_ClockConfig+0x114>)
 8002122:	6813      	ldr	r3, [r2, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	428b      	cmp	r3, r1
 800212a:	d329      	bcc.n	8002180 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	07d9      	lsls	r1, r3, #31
 8002130:	d431      	bmi.n	8002196 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002132:	6821      	ldr	r1, [r4, #0]
 8002134:	078a      	lsls	r2, r1, #30
 8002136:	d45b      	bmi.n	80021f0 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002138:	4a3a      	ldr	r2, [pc, #232]	; (8002224 <HAL_RCC_ClockConfig+0x114>)
 800213a:	6813      	ldr	r3, [r2, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	429e      	cmp	r6, r3
 8002142:	d35d      	bcc.n	8002200 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	f011 0f04 	tst.w	r1, #4
 8002148:	4d37      	ldr	r5, [pc, #220]	; (8002228 <HAL_RCC_ClockConfig+0x118>)
 800214a:	d164      	bne.n	8002216 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214c:	070b      	lsls	r3, r1, #28
 800214e:	d506      	bpl.n	800215e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002150:	68ab      	ldr	r3, [r5, #8]
 8002152:	6922      	ldr	r2, [r4, #16]
 8002154:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002158:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800215c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800215e:	f7ff fd5d 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8002162:	68ab      	ldr	r3, [r5, #8]
 8002164:	4a31      	ldr	r2, [pc, #196]	; (800222c <HAL_RCC_ClockConfig+0x11c>)
 8002166:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800216a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	40d8      	lsrs	r0, r3
 8002176:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <HAL_RCC_ClockConfig+0x120>)
 8002178:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800217a:	2000      	movs	r0, #0
 800217c:	f7fe bef4 	b.w	8000f68 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002180:	6813      	ldr	r3, [r2, #0]
 8002182:	f023 0307 	bic.w	r3, r3, #7
 8002186:	430b      	orrs	r3, r1
 8002188:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	6813      	ldr	r3, [r2, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4299      	cmp	r1, r3
 8002192:	d1c2      	bne.n	800211a <HAL_RCC_ClockConfig+0xa>
 8002194:	e7ca      	b.n	800212c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002196:	6862      	ldr	r2, [r4, #4]
 8002198:	4d23      	ldr	r5, [pc, #140]	; (8002228 <HAL_RCC_ClockConfig+0x118>)
 800219a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219e:	d11b      	bne.n	80021d8 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a4:	d0b9      	beq.n	800211a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021a6:	68ab      	ldr	r3, [r5, #8]
 80021a8:	f023 0303 	bic.w	r3, r3, #3
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80021b0:	f7fe ff10 	bl	8000fd4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80021b8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ba:	68ab      	ldr	r3, [r5, #8]
 80021bc:	6862      	ldr	r2, [r4, #4]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021c6:	d0b4      	beq.n	8002132 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7fe ff04 	bl	8000fd4 <HAL_GetTick>
 80021cc:	1bc0      	subs	r0, r0, r7
 80021ce:	4540      	cmp	r0, r8
 80021d0:	d9f3      	bls.n	80021ba <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80021d2:	2003      	movs	r0, #3
}
 80021d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d8:	2a02      	cmp	r2, #2
 80021da:	d102      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021e0:	e7e0      	b.n	80021a4 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021e2:	b912      	cbnz	r2, 80021ea <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021e4:	f013 0f02 	tst.w	r3, #2
 80021e8:	e7dc      	b.n	80021a4 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80021ee:	e7d9      	b.n	80021a4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <HAL_RCC_ClockConfig+0x118>)
 80021f2:	68a0      	ldr	r0, [r4, #8]
 80021f4:	6893      	ldr	r3, [r2, #8]
 80021f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021fa:	4303      	orrs	r3, r0
 80021fc:	6093      	str	r3, [r2, #8]
 80021fe:	e79b      	b.n	8002138 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002200:	6813      	ldr	r3, [r2, #0]
 8002202:	f023 0307 	bic.w	r3, r3, #7
 8002206:	4333      	orrs	r3, r6
 8002208:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	6813      	ldr	r3, [r2, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	429e      	cmp	r6, r3
 8002212:	d182      	bne.n	800211a <HAL_RCC_ClockConfig+0xa>
 8002214:	e796      	b.n	8002144 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002216:	68ab      	ldr	r3, [r5, #8]
 8002218:	68e2      	ldr	r2, [r4, #12]
 800221a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800221e:	4313      	orrs	r3, r2
 8002220:	60ab      	str	r3, [r5, #8]
 8002222:	e793      	b.n	800214c <HAL_RCC_ClockConfig+0x3c>
 8002224:	40022000 	.word	0x40022000
 8002228:	40021000 	.word	0x40021000
 800222c:	08006805 	.word	0x08006805
 8002230:	20000000 	.word	0x20000000

08002234 <HAL_RCC_GetHCLKFreq>:
}
 8002234:	4b01      	ldr	r3, [pc, #4]	; (800223c <HAL_RCC_GetHCLKFreq+0x8>)
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000000 	.word	0x20000000

08002240 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002242:	4a06      	ldr	r2, [pc, #24]	; (800225c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800224a:	5cd3      	ldrb	r3, [r2, r3]
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800224e:	6810      	ldr	r0, [r2, #0]
 8002250:	f003 031f 	and.w	r3, r3, #31
}
 8002254:	40d8      	lsrs	r0, r3
 8002256:	4770      	bx	lr
 8002258:	40021000 	.word	0x40021000
 800225c:	08006815 	.word	0x08006815
 8002260:	20000000 	.word	0x20000000

08002264 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002266:	4a06      	ldr	r2, [pc, #24]	; (8002280 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800226e:	5cd3      	ldrb	r3, [r2, r3]
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002272:	6810      	ldr	r0, [r2, #0]
 8002274:	f003 031f 	and.w	r3, r3, #31
}
 8002278:	40d8      	lsrs	r0, r3
 800227a:	4770      	bx	lr
 800227c:	40021000 	.word	0x40021000
 8002280:	08006815 	.word	0x08006815
 8002284:	20000000 	.word	0x20000000

08002288 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800228a:	4b45      	ldr	r3, [pc, #276]	; (80023a0 <RCCEx_PLLSAI1_Config+0x118>)
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	f012 0f03 	tst.w	r2, #3
{
 8002292:	4605      	mov	r5, r0
 8002294:	460e      	mov	r6, r1
 8002296:	461c      	mov	r4, r3
 8002298:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800229a:	d02a      	beq.n	80022f2 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	f002 0203 	and.w	r2, r2, #3
 80022a2:	4282      	cmp	r2, r0
 80022a4:	d13c      	bne.n	8002320 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80022a6:	2a00      	cmp	r2, #0
 80022a8:	d03a      	beq.n	8002320 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022aa:	68db      	ldr	r3, [r3, #12]
       ||
 80022ac:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022ae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80022b2:	3301      	adds	r3, #1
       ||
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d133      	bne.n	8002320 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022b8:	6823      	ldr	r3, [r4, #0]
 80022ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022be:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c0:	f7fe fe88 	bl	8000fd4 <HAL_GetTick>
 80022c4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	011a      	lsls	r2, r3, #4
 80022ca:	d432      	bmi.n	8002332 <RCCEx_PLLSAI1_Config+0xaa>
 80022cc:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022ce:	2e00      	cmp	r6, #0
 80022d0:	d036      	beq.n	8002340 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80022d2:	2e01      	cmp	r6, #1
 80022d4:	d150      	bne.n	8002378 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022d6:	6922      	ldr	r2, [r4, #16]
 80022d8:	6928      	ldr	r0, [r5, #16]
 80022da:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80022de:	0840      	lsrs	r0, r0, #1
 80022e0:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80022e4:	3801      	subs	r0, #1
 80022e6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80022ea:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80022ee:	6122      	str	r2, [r4, #16]
 80022f0:	e032      	b.n	8002358 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80022f2:	2802      	cmp	r0, #2
 80022f4:	d010      	beq.n	8002318 <RCCEx_PLLSAI1_Config+0x90>
 80022f6:	2803      	cmp	r0, #3
 80022f8:	d014      	beq.n	8002324 <RCCEx_PLLSAI1_Config+0x9c>
 80022fa:	2801      	cmp	r0, #1
 80022fc:	d110      	bne.n	8002320 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	079f      	lsls	r7, r3, #30
 8002302:	d538      	bpl.n	8002376 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002304:	68e3      	ldr	r3, [r4, #12]
 8002306:	686a      	ldr	r2, [r5, #4]
 8002308:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800230c:	3a01      	subs	r2, #1
 800230e:	4318      	orrs	r0, r3
 8002310:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002314:	60e0      	str	r0, [r4, #12]
 8002316:	e7cf      	b.n	80022b8 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800231e:	d1f1      	bne.n	8002304 <RCCEx_PLLSAI1_Config+0x7c>
 8002320:	2001      	movs	r0, #1
 8002322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	0391      	lsls	r1, r2, #14
 8002328:	d4ec      	bmi.n	8002304 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002330:	e7f5      	b.n	800231e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002332:	f7fe fe4f 	bl	8000fd4 <HAL_GetTick>
 8002336:	1bc0      	subs	r0, r0, r7
 8002338:	2802      	cmp	r0, #2
 800233a:	d9c4      	bls.n	80022c6 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800233c:	2003      	movs	r0, #3
 800233e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002340:	6921      	ldr	r1, [r4, #16]
 8002342:	68eb      	ldr	r3, [r5, #12]
 8002344:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002348:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800234c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002356:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800235e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002360:	f7fe fe38 	bl	8000fd4 <HAL_GetTick>
 8002364:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	d513      	bpl.n	8002394 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800236c:	6923      	ldr	r3, [r4, #16]
 800236e:	69aa      	ldr	r2, [r5, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	6123      	str	r3, [r4, #16]
 8002374:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002378:	6923      	ldr	r3, [r4, #16]
 800237a:	6968      	ldr	r0, [r5, #20]
 800237c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002380:	0840      	lsrs	r0, r0, #1
 8002382:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002386:	3801      	subs	r0, #1
 8002388:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800238c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002390:	6123      	str	r3, [r4, #16]
 8002392:	e7e1      	b.n	8002358 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002394:	f7fe fe1e 	bl	8000fd4 <HAL_GetTick>
 8002398:	1b80      	subs	r0, r0, r6
 800239a:	2802      	cmp	r0, #2
 800239c:	d9e3      	bls.n	8002366 <RCCEx_PLLSAI1_Config+0xde>
 800239e:	e7cd      	b.n	800233c <RCCEx_PLLSAI1_Config+0xb4>
 80023a0:	40021000 	.word	0x40021000

080023a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80023a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023a6:	4b3d      	ldr	r3, [pc, #244]	; (800249c <RCCEx_PLLSAI2_Config+0xf8>)
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	f012 0f03 	tst.w	r2, #3
{
 80023ae:	4605      	mov	r5, r0
 80023b0:	460e      	mov	r6, r1
 80023b2:	461c      	mov	r4, r3
 80023b4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023b6:	d028      	beq.n	800240a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	f002 0203 	and.w	r2, r2, #3
 80023be:	4282      	cmp	r2, r0
 80023c0:	d13a      	bne.n	8002438 <RCCEx_PLLSAI2_Config+0x94>
       ||
 80023c2:	2a00      	cmp	r2, #0
 80023c4:	d038      	beq.n	8002438 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80023c6:	68db      	ldr	r3, [r3, #12]
       ||
 80023c8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80023ca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80023ce:	3301      	adds	r3, #1
       ||
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d131      	bne.n	8002438 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023da:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023dc:	f7fe fdfa 	bl	8000fd4 <HAL_GetTick>
 80023e0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	009a      	lsls	r2, r3, #2
 80023e6:	d430      	bmi.n	800244a <RCCEx_PLLSAI2_Config+0xa6>
 80023e8:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023ea:	2e00      	cmp	r6, #0
 80023ec:	d034      	beq.n	8002458 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80023ee:	6963      	ldr	r3, [r4, #20]
 80023f0:	6929      	ldr	r1, [r5, #16]
 80023f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023f6:	0849      	lsrs	r1, r1, #1
 80023f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023fc:	3901      	subs	r1, #1
 80023fe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002402:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002406:	6163      	str	r3, [r4, #20]
 8002408:	e032      	b.n	8002470 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800240a:	2802      	cmp	r0, #2
 800240c:	d010      	beq.n	8002430 <RCCEx_PLLSAI2_Config+0x8c>
 800240e:	2803      	cmp	r0, #3
 8002410:	d014      	beq.n	800243c <RCCEx_PLLSAI2_Config+0x98>
 8002412:	2801      	cmp	r0, #1
 8002414:	d110      	bne.n	8002438 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	079f      	lsls	r7, r3, #30
 800241a:	d538      	bpl.n	800248e <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800241c:	68e3      	ldr	r3, [r4, #12]
 800241e:	686a      	ldr	r2, [r5, #4]
 8002420:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002424:	3a01      	subs	r2, #1
 8002426:	4318      	orrs	r0, r3
 8002428:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800242c:	60e0      	str	r0, [r4, #12]
 800242e:	e7d1      	b.n	80023d4 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002436:	d1f1      	bne.n	800241c <RCCEx_PLLSAI2_Config+0x78>
 8002438:	2001      	movs	r0, #1
 800243a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	0391      	lsls	r1, r2, #14
 8002440:	d4ec      	bmi.n	800241c <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002448:	e7f5      	b.n	8002436 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800244a:	f7fe fdc3 	bl	8000fd4 <HAL_GetTick>
 800244e:	1bc0      	subs	r0, r0, r7
 8002450:	2802      	cmp	r0, #2
 8002452:	d9c6      	bls.n	80023e2 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002454:	2003      	movs	r0, #3
 8002456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002458:	6962      	ldr	r2, [r4, #20]
 800245a:	68eb      	ldr	r3, [r5, #12]
 800245c:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002460:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002464:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800246e:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002476:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002478:	f7fe fdac 	bl	8000fd4 <HAL_GetTick>
 800247c:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	d505      	bpl.n	8002490 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002484:	6963      	ldr	r3, [r4, #20]
 8002486:	696a      	ldr	r2, [r5, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	6163      	str	r3, [r4, #20]
 800248c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800248e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002490:	f7fe fda0 	bl	8000fd4 <HAL_GetTick>
 8002494:	1b80      	subs	r0, r0, r6
 8002496:	2802      	cmp	r0, #2
 8002498:	d9f1      	bls.n	800247e <RCCEx_PLLSAI2_Config+0xda>
 800249a:	e7db      	b.n	8002454 <RCCEx_PLLSAI2_Config+0xb0>
 800249c:	40021000 	.word	0x40021000

080024a0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80024a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024a4:	6806      	ldr	r6, [r0, #0]
 80024a6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80024aa:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024ac:	d024      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80024ae:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80024b0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80024b4:	d02c      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80024b6:	d802      	bhi.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80024b8:	b1c1      	cbz	r1, 80024ec <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80024ba:	2601      	movs	r6, #1
 80024bc:	e01c      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80024be:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80024c2:	d00d      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80024c4:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80024c8:	d1f7      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024ca:	4a4d      	ldr	r2, [pc, #308]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024cc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80024ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80024d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80024d6:	430b      	orrs	r3, r1
 80024d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80024dc:	2600      	movs	r6, #0
 80024de:	e00b      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024e0:	4a47      	ldr	r2, [pc, #284]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e2:	68d3      	ldr	r3, [r2, #12]
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	60d3      	str	r3, [r2, #12]
      break;
 80024ea:	e7ee      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024ec:	3004      	adds	r0, #4
 80024ee:	f7ff fecb 	bl	8002288 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024f2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d0e8      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	04d8      	lsls	r0, r3, #19
 80024fc:	d506      	bpl.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80024fe:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002500:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002504:	d074      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002506:	d808      	bhi.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002508:	b1a9      	cbz	r1, 8002536 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800250a:	2601      	movs	r6, #1
 800250c:	4635      	mov	r5, r6
 800250e:	e021      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002510:	2100      	movs	r1, #0
 8002512:	3020      	adds	r0, #32
 8002514:	f7ff ff46 	bl	80023a4 <RCCEx_PLLSAI2_Config>
 8002518:	e7eb      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800251a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800251e:	d004      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002520:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002524:	d1f1      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002526:	4635      	mov	r5, r6
 8002528:	e009      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800252a:	4a35      	ldr	r2, [pc, #212]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252c:	68d3      	ldr	r3, [r2, #12]
 800252e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002532:	60d3      	str	r3, [r2, #12]
 8002534:	e7f7      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002536:	1d20      	adds	r0, r4, #4
 8002538:	f7ff fea6 	bl	8002288 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800253c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800253e:	2d00      	cmp	r5, #0
 8002540:	d15c      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002542:	4a2f      	ldr	r2, [pc, #188]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002544:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002546:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800254a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800254e:	430b      	orrs	r3, r1
 8002550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	0399      	lsls	r1, r3, #14
 8002558:	f140 814f 	bpl.w	80027fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800255c:	4f28      	ldr	r7, [pc, #160]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002560:	00da      	lsls	r2, r3, #3
 8002562:	f140 8176 	bpl.w	8002852 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002566:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800256a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002604 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800256e:	f8d9 3000 	ldr.w	r3, [r9]
 8002572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002576:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800257a:	f7fe fd2b 	bl	8000fd4 <HAL_GetTick>
 800257e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002580:	f8d9 3000 	ldr.w	r3, [r9]
 8002584:	05db      	lsls	r3, r3, #23
 8002586:	d53f      	bpl.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002588:	2d00      	cmp	r5, #0
 800258a:	d144      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800258c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002590:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002594:	d015      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002596:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800259a:	4293      	cmp	r3, r2
 800259c:	d011      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800259e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80025a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80025a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025ae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80025be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025c2:	07d8      	lsls	r0, r3, #31
 80025c4:	d509      	bpl.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80025c6:	f7fe fd05 	bl	8000fd4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80025ce:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025d4:	0799      	lsls	r1, r3, #30
 80025d6:	f140 8109 	bpl.w	80027ec <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025de:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80025e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025ec:	4635      	mov	r5, r6
 80025ee:	e012      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025f0:	2100      	movs	r1, #0
 80025f2:	f104 0020 	add.w	r0, r4, #32
 80025f6:	f7ff fed5 	bl	80023a4 <RCCEx_PLLSAI2_Config>
 80025fa:	e79f      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80025fc:	462e      	mov	r6, r5
 80025fe:	e7a9      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002600:	40021000 	.word	0x40021000
 8002604:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002608:	f7fe fce4 	bl	8000fd4 <HAL_GetTick>
 800260c:	eba0 000a 	sub.w	r0, r0, sl
 8002610:	2802      	cmp	r0, #2
 8002612:	d9b5      	bls.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002614:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002616:	f1b8 0f00 	cmp.w	r8, #0
 800261a:	d003      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 800261c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800261e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002622:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	07da      	lsls	r2, r3, #31
 8002628:	d508      	bpl.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800262a:	4990      	ldr	r1, [pc, #576]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800262c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800262e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002632:	f022 0203 	bic.w	r2, r2, #3
 8002636:	4302      	orrs	r2, r0
 8002638:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800263c:	079f      	lsls	r7, r3, #30
 800263e:	d508      	bpl.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002640:	498a      	ldr	r1, [pc, #552]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002642:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002644:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002648:	f022 020c 	bic.w	r2, r2, #12
 800264c:	4302      	orrs	r2, r0
 800264e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002652:	075e      	lsls	r6, r3, #29
 8002654:	d508      	bpl.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002656:	4985      	ldr	r1, [pc, #532]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002658:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800265a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800265e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002662:	4302      	orrs	r2, r0
 8002664:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002668:	0718      	lsls	r0, r3, #28
 800266a:	d508      	bpl.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800266c:	497f      	ldr	r1, [pc, #508]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800266e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002670:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002674:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002678:	4302      	orrs	r2, r0
 800267a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800267e:	06d9      	lsls	r1, r3, #27
 8002680:	d508      	bpl.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002682:	497a      	ldr	r1, [pc, #488]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002684:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002686:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800268a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800268e:	4302      	orrs	r2, r0
 8002690:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002694:	069a      	lsls	r2, r3, #26
 8002696:	d508      	bpl.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002698:	4974      	ldr	r1, [pc, #464]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800269a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800269c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026a4:	4302      	orrs	r2, r0
 80026a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026aa:	059f      	lsls	r7, r3, #22
 80026ac:	d508      	bpl.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ae:	496f      	ldr	r1, [pc, #444]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026b0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80026b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026b6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80026ba:	4302      	orrs	r2, r0
 80026bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026c0:	055e      	lsls	r6, r3, #21
 80026c2:	d508      	bpl.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026c4:	4969      	ldr	r1, [pc, #420]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026c6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80026c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026cc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80026d0:	4302      	orrs	r2, r0
 80026d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d6:	0658      	lsls	r0, r3, #25
 80026d8:	d508      	bpl.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026da:	4964      	ldr	r1, [pc, #400]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026dc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80026de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026e2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80026e6:	4302      	orrs	r2, r0
 80026e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ec:	0619      	lsls	r1, r3, #24
 80026ee:	d508      	bpl.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026f0:	495e      	ldr	r1, [pc, #376]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026f8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80026fc:	4302      	orrs	r2, r0
 80026fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002702:	05da      	lsls	r2, r3, #23
 8002704:	d508      	bpl.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002706:	4959      	ldr	r1, [pc, #356]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800270a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800270e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002712:	4302      	orrs	r2, r0
 8002714:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002718:	049b      	lsls	r3, r3, #18
 800271a:	d50f      	bpl.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800271c:	4a53      	ldr	r2, [pc, #332]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800271e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002720:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002724:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002728:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800272a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002732:	d164      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002734:	68d3      	ldr	r3, [r2, #12]
 8002736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800273a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	031f      	lsls	r7, r3, #12
 8002740:	d50f      	bpl.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002742:	4a4a      	ldr	r2, [pc, #296]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002744:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002746:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800274a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800274e:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002750:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002758:	d15c      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800275a:	68d3      	ldr	r3, [r2, #12]
 800275c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002760:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	035e      	lsls	r6, r3, #13
 8002766:	d50f      	bpl.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002768:	4a40      	ldr	r2, [pc, #256]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800276a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800276c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002770:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002774:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002776:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800277a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277e:	d154      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002780:	68d3      	ldr	r3, [r2, #12]
 8002782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002786:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	0458      	lsls	r0, r3, #17
 800278c:	d512      	bpl.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800278e:	4937      	ldr	r1, [pc, #220]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002790:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002792:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002796:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800279a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800279c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027a4:	d14c      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027a6:	2102      	movs	r1, #2
 80027a8:	1d20      	adds	r0, r4, #4
 80027aa:	f7ff fd6d 	bl	8002288 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80027ae:	2800      	cmp	r0, #0
 80027b0:	bf18      	it	ne
 80027b2:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027b4:	6822      	ldr	r2, [r4, #0]
 80027b6:	0411      	lsls	r1, r2, #16
 80027b8:	d508      	bpl.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027ba:	492c      	ldr	r1, [pc, #176]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80027bc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80027be:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80027c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027c6:	4303      	orrs	r3, r0
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027cc:	03d3      	lsls	r3, r2, #15
 80027ce:	d509      	bpl.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027d0:	4a26      	ldr	r2, [pc, #152]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80027d2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80027d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027de:	430b      	orrs	r3, r1
 80027e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80027e4:	4628      	mov	r0, r5
 80027e6:	b002      	add	sp, #8
 80027e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ec:	f7fe fbf2 	bl	8000fd4 <HAL_GetTick>
 80027f0:	1b40      	subs	r0, r0, r5
 80027f2:	4548      	cmp	r0, r9
 80027f4:	f67f aeec 	bls.w	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80027f8:	e70c      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80027fa:	4635      	mov	r5, r6
 80027fc:	e712      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027fe:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002802:	d19b      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002804:	2101      	movs	r1, #1
 8002806:	1d20      	adds	r0, r4, #4
 8002808:	f7ff fd3e 	bl	8002288 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800280c:	2800      	cmp	r0, #0
 800280e:	bf18      	it	ne
 8002810:	4605      	movne	r5, r0
 8002812:	e793      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002814:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002818:	d1a3      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800281a:	2101      	movs	r1, #1
 800281c:	1d20      	adds	r0, r4, #4
 800281e:	f7ff fd33 	bl	8002288 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002822:	2800      	cmp	r0, #0
 8002824:	bf18      	it	ne
 8002826:	4605      	movne	r5, r0
 8002828:	e79b      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800282a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800282e:	d1ab      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002830:	2101      	movs	r1, #1
 8002832:	1d20      	adds	r0, r4, #4
 8002834:	f7ff fd28 	bl	8002288 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002838:	2800      	cmp	r0, #0
 800283a:	bf18      	it	ne
 800283c:	4605      	movne	r5, r0
 800283e:	e7a3      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002840:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002844:	d1b6      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002846:	2102      	movs	r1, #2
 8002848:	f104 0020 	add.w	r0, r4, #32
 800284c:	f7ff fdaa 	bl	80023a4 <RCCEx_PLLSAI2_Config>
 8002850:	e7ad      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002858:	65bb      	str	r3, [r7, #88]	; 0x58
 800285a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800285c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002864:	f04f 0801 	mov.w	r8, #1
 8002868:	e67f      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0xca>
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000

08002870 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	2302      	movs	r3, #2
{
 8002872:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8002878:	6803      	ldr	r3, [r0, #0]
 800287a:	4c09      	ldr	r4, [pc, #36]	; (80028a0 <HAL_TIM_Base_Start+0x30>)
 800287c:	6899      	ldr	r1, [r3, #8]
 800287e:	4021      	ands	r1, r4
 8002880:	2906      	cmp	r1, #6
 8002882:	d008      	beq.n	8002896 <HAL_TIM_Base_Start+0x26>
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	4022      	ands	r2, r4
 8002888:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 800288c:	bf1e      	ittt	ne
 800288e:	681a      	ldrne	r2, [r3, #0]
 8002890:	f042 0201 	orrne.w	r2, r2, #1
 8002894:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002896:	2301      	movs	r3, #1
 8002898:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 800289c:	2000      	movs	r0, #0
 800289e:	bd10      	pop	{r4, pc}
 80028a0:	00010007 	.word	0x00010007

080028a4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a4:	4a30      	ldr	r2, [pc, #192]	; (8002968 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80028a6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a8:	4290      	cmp	r0, r2
 80028aa:	d012      	beq.n	80028d2 <TIM_Base_SetConfig+0x2e>
 80028ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80028b0:	d00f      	beq.n	80028d2 <TIM_Base_SetConfig+0x2e>
 80028b2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80028b6:	4290      	cmp	r0, r2
 80028b8:	d00b      	beq.n	80028d2 <TIM_Base_SetConfig+0x2e>
 80028ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028be:	4290      	cmp	r0, r2
 80028c0:	d007      	beq.n	80028d2 <TIM_Base_SetConfig+0x2e>
 80028c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028c6:	4290      	cmp	r0, r2
 80028c8:	d003      	beq.n	80028d2 <TIM_Base_SetConfig+0x2e>
 80028ca:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80028ce:	4290      	cmp	r0, r2
 80028d0:	d119      	bne.n	8002906 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80028d2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80028d8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028da:	4a23      	ldr	r2, [pc, #140]	; (8002968 <TIM_Base_SetConfig+0xc4>)
 80028dc:	4290      	cmp	r0, r2
 80028de:	d01d      	beq.n	800291c <TIM_Base_SetConfig+0x78>
 80028e0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80028e4:	d01a      	beq.n	800291c <TIM_Base_SetConfig+0x78>
 80028e6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80028ea:	4290      	cmp	r0, r2
 80028ec:	d016      	beq.n	800291c <TIM_Base_SetConfig+0x78>
 80028ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028f2:	4290      	cmp	r0, r2
 80028f4:	d012      	beq.n	800291c <TIM_Base_SetConfig+0x78>
 80028f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028fa:	4290      	cmp	r0, r2
 80028fc:	d00e      	beq.n	800291c <TIM_Base_SetConfig+0x78>
 80028fe:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002902:	4290      	cmp	r0, r2
 8002904:	d00a      	beq.n	800291c <TIM_Base_SetConfig+0x78>
 8002906:	4a19      	ldr	r2, [pc, #100]	; (800296c <TIM_Base_SetConfig+0xc8>)
 8002908:	4290      	cmp	r0, r2
 800290a:	d007      	beq.n	800291c <TIM_Base_SetConfig+0x78>
 800290c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002910:	4290      	cmp	r0, r2
 8002912:	d003      	beq.n	800291c <TIM_Base_SetConfig+0x78>
 8002914:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002918:	4290      	cmp	r0, r2
 800291a:	d103      	bne.n	8002924 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800291c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800291e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002922:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002924:	694a      	ldr	r2, [r1, #20]
 8002926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800292a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800292c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800292e:	688b      	ldr	r3, [r1, #8]
 8002930:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002932:	680b      	ldr	r3, [r1, #0]
 8002934:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <TIM_Base_SetConfig+0xc4>)
 8002938:	4298      	cmp	r0, r3
 800293a:	d00f      	beq.n	800295c <TIM_Base_SetConfig+0xb8>
 800293c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002940:	4298      	cmp	r0, r3
 8002942:	d00b      	beq.n	800295c <TIM_Base_SetConfig+0xb8>
 8002944:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002948:	4298      	cmp	r0, r3
 800294a:	d007      	beq.n	800295c <TIM_Base_SetConfig+0xb8>
 800294c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002950:	4298      	cmp	r0, r3
 8002952:	d003      	beq.n	800295c <TIM_Base_SetConfig+0xb8>
 8002954:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002958:	4298      	cmp	r0, r3
 800295a:	d101      	bne.n	8002960 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800295c:	690b      	ldr	r3, [r1, #16]
 800295e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002960:	2301      	movs	r3, #1
 8002962:	6143      	str	r3, [r0, #20]
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40014000 	.word	0x40014000

08002970 <HAL_TIM_Base_Init>:
{
 8002970:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002972:	4604      	mov	r4, r0
 8002974:	b1a0      	cbz	r0, 80029a0 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002976:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800297a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800297e:	b91b      	cbnz	r3, 8002988 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002980:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002984:	f001 f856 	bl	8003a34 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	2302      	movs	r3, #2
 800298a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800298e:	6820      	ldr	r0, [r4, #0]
 8002990:	1d21      	adds	r1, r4, #4
 8002992:	f7ff ff87 	bl	80028a4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002996:	2301      	movs	r3, #1
 8002998:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800299c:	2000      	movs	r0, #0
 800299e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029a0:	2001      	movs	r0, #1
}
 80029a2:	bd10      	pop	{r4, pc}

080029a4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80029a8:	2b01      	cmp	r3, #1
{
 80029aa:	b530      	push	{r4, r5, lr}
 80029ac:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80029b0:	d01f      	beq.n	80029f2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029b2:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029b4:	4d10      	ldr	r5, [pc, #64]	; (80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 80029b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029ba:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80029bc:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80029be:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029c0:	d003      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80029c2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80029c6:	42aa      	cmp	r2, r5
 80029c8:	d103      	bne.n	80029d2 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029ca:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029d0:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029d2:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029d4:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029da:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80029dc:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029e0:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e2:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029e4:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 80029e6:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80029e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ec:	2300      	movs	r3, #0
 80029ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80029f2:	4618      	mov	r0, r3

  return HAL_OK;
}
 80029f4:	bd30      	pop	{r4, r5, pc}
 80029f6:	bf00      	nop
 80029f8:	40012c00 	.word	0x40012c00

080029fc <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029fc:	6803      	ldr	r3, [r0, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a04:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a0e:	2320      	movs	r3, #32
 8002a10:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	6603      	str	r3, [r0, #96]	; 0x60
 8002a18:	4770      	bx	lr

08002a1a <HAL_UART_TxCpltCallback>:
 8002a1a:	4770      	bx	lr

08002a1c <HAL_UART_ErrorCallback>:
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a20:	6803      	ldr	r3, [r0, #0]
 8002a22:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a24:	6819      	ldr	r1, [r3, #0]
{
 8002a26:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002a28:	0716      	lsls	r6, r2, #28
{
 8002a2a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a2c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8002a2e:	d10a      	bne.n	8002a46 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 8002a30:	0696      	lsls	r6, r2, #26
 8002a32:	d564      	bpl.n	8002afe <HAL_UART_IRQHandler+0xde>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a34:	068e      	lsls	r6, r1, #26
 8002a36:	d562      	bpl.n	8002afe <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8002a38:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8083 	beq.w	8002b46 <HAL_UART_IRQHandler+0x126>
}
 8002a40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8002a44:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != RESET)
 8002a46:	f015 0001 	ands.w	r0, r5, #1
 8002a4a:	d102      	bne.n	8002a52 <HAL_UART_IRQHandler+0x32>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a4c:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002a50:	d055      	beq.n	8002afe <HAL_UART_IRQHandler+0xde>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a52:	07d5      	lsls	r5, r2, #31
 8002a54:	d507      	bpl.n	8002a66 <HAL_UART_IRQHandler+0x46>
 8002a56:	05ce      	lsls	r6, r1, #23
 8002a58:	d505      	bpl.n	8002a66 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a5a:	2501      	movs	r5, #1
 8002a5c:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a5e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002a60:	f045 0501 	orr.w	r5, r5, #1
 8002a64:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a66:	0795      	lsls	r5, r2, #30
 8002a68:	d506      	bpl.n	8002a78 <HAL_UART_IRQHandler+0x58>
 8002a6a:	b128      	cbz	r0, 8002a78 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a6c:	2502      	movs	r5, #2
 8002a6e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a70:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002a72:	f045 0504 	orr.w	r5, r5, #4
 8002a76:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a78:	0756      	lsls	r6, r2, #29
 8002a7a:	d506      	bpl.n	8002a8a <HAL_UART_IRQHandler+0x6a>
 8002a7c:	b128      	cbz	r0, 8002a8a <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a7e:	2504      	movs	r5, #4
 8002a80:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a82:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002a84:	f045 0502 	orr.w	r5, r5, #2
 8002a88:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 8002a8a:	0715      	lsls	r5, r2, #28
 8002a8c:	d507      	bpl.n	8002a9e <HAL_UART_IRQHandler+0x7e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8002a8e:	068e      	lsls	r6, r1, #26
 8002a90:	d400      	bmi.n	8002a94 <HAL_UART_IRQHandler+0x74>
 8002a92:	b120      	cbz	r0, 8002a9e <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a94:	2008      	movs	r0, #8
 8002a96:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a98:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002a9a:	4303      	orrs	r3, r0
 8002a9c:	6763      	str	r3, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a9e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d050      	beq.n	8002b46 <HAL_UART_IRQHandler+0x126>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8002aa4:	0695      	lsls	r5, r2, #26
 8002aa6:	d505      	bpl.n	8002ab4 <HAL_UART_IRQHandler+0x94>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aa8:	0688      	lsls	r0, r1, #26
 8002aaa:	d503      	bpl.n	8002ab4 <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL)
 8002aac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002aae:	b10b      	cbz	r3, 8002ab4 <HAL_UART_IRQHandler+0x94>
          huart->RxISR(huart);
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002ab4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002ab6:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8002ab8:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002aba:	d404      	bmi.n	8002ac6 <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002abc:	6823      	ldr	r3, [r4, #0]
 8002abe:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002ac0:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002ac4:	d017      	beq.n	8002af6 <HAL_UART_IRQHandler+0xd6>
        UART_EndRxTransfer(huart);
 8002ac6:	f7ff ff99 	bl	80029fc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	0652      	lsls	r2, r2, #25
 8002ad0:	d50d      	bpl.n	8002aee <HAL_UART_IRQHandler+0xce>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad2:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002ad4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ada:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002adc:	b138      	cbz	r0, 8002aee <HAL_UART_IRQHandler+0xce>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ade:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <HAL_UART_IRQHandler+0x128>)
 8002ae0:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	f7fe febd 	bl	8001860 <HAL_DMA_Abort_IT>
 8002ae6:	b370      	cbz	r0, 8002b46 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ae8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002aea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002aec:	e7a8      	b.n	8002a40 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8002aee:	4620      	mov	r0, r4
 8002af0:	f7ff ff94 	bl	8002a1c <HAL_UART_ErrorCallback>
 8002af4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002af6:	f7ff ff91 	bl	8002a1c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afa:	6765      	str	r5, [r4, #116]	; 0x74
 8002afc:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002afe:	02d6      	lsls	r6, r2, #11
 8002b00:	d509      	bpl.n	8002b16 <HAL_UART_IRQHandler+0xf6>
 8002b02:	0268      	lsls	r0, r5, #9
 8002b04:	d507      	bpl.n	8002b16 <HAL_UART_IRQHandler+0xf6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8002b0a:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b0c:	621a      	str	r2, [r3, #32]
}
 8002b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002b12:	f000 baa6 	b.w	8003062 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != RESET)
 8002b16:	0616      	lsls	r6, r2, #24
 8002b18:	d505      	bpl.n	8002b26 <HAL_UART_IRQHandler+0x106>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b1a:	060d      	lsls	r5, r1, #24
 8002b1c:	d503      	bpl.n	8002b26 <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 8002b1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b20:	b18b      	cbz	r3, 8002b46 <HAL_UART_IRQHandler+0x126>
      huart->TxISR(huart);
 8002b22:	4620      	mov	r0, r4
 8002b24:	e78c      	b.n	8002a40 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b26:	0650      	lsls	r0, r2, #25
 8002b28:	d50d      	bpl.n	8002b46 <HAL_UART_IRQHandler+0x126>
 8002b2a:	064a      	lsls	r2, r1, #25
 8002b2c:	d50b      	bpl.n	8002b46 <HAL_UART_IRQHandler+0x126>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b34:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b36:	2320      	movs	r3, #32
 8002b38:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b40:	4620      	mov	r0, r4
 8002b42:	f7ff ff6a 	bl	8002a1a <HAL_UART_TxCpltCallback>
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	08002b4d 	.word	0x08002b4d

08002b4c <UART_DMAAbortOnError>:
{
 8002b4c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b4e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002b56:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002b5a:	f7ff ff5f 	bl	8002a1c <HAL_UART_ErrorCallback>
 8002b5e:	bd08      	pop	{r3, pc}

08002b60 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b60:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b62:	69c1      	ldr	r1, [r0, #28]
{
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b66:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b68:	6883      	ldr	r3, [r0, #8]
 8002b6a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b6c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b6e:	4303      	orrs	r3, r0
 8002b70:	6960      	ldr	r0, [r4, #20]
 8002b72:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b74:	48ba      	ldr	r0, [pc, #744]	; (8002e60 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b76:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b78:	4028      	ands	r0, r5
 8002b7a:	4303      	orrs	r3, r0
 8002b7c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b7e:	6853      	ldr	r3, [r2, #4]
 8002b80:	68e0      	ldr	r0, [r4, #12]
 8002b82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b86:	4303      	orrs	r3, r0
 8002b88:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b8a:	4bb6      	ldr	r3, [pc, #728]	; (8002e64 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b8c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b8e:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8002b90:	bf1c      	itt	ne
 8002b92:	6a23      	ldrne	r3, [r4, #32]
 8002b94:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b96:	6893      	ldr	r3, [r2, #8]
 8002b98:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002b9c:	4303      	orrs	r3, r0
 8002b9e:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ba0:	4bb1      	ldr	r3, [pc, #708]	; (8002e68 <UART_SetConfig+0x308>)
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d119      	bne.n	8002bda <UART_SetConfig+0x7a>
 8002ba6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002baa:	4ab0      	ldr	r2, [pc, #704]	; (8002e6c <UART_SetConfig+0x30c>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb0:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bb4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002bb8:	5cd3      	ldrb	r3, [r2, r3]
 8002bba:	f040 8138 	bne.w	8002e2e <UART_SetConfig+0x2ce>
    switch (clocksource)
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	f200 808f 	bhi.w	8002ce2 <UART_SetConfig+0x182>
 8002bc4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002bc8:	00ca011a 	.word	0x00ca011a
 8002bcc:	008d00f9 	.word	0x008d00f9
 8002bd0:	008d0114 	.word	0x008d0114
 8002bd4:	008d008d 	.word	0x008d008d
 8002bd8:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bda:	4ba5      	ldr	r3, [pc, #660]	; (8002e70 <UART_SetConfig+0x310>)
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d107      	bne.n	8002bf0 <UART_SetConfig+0x90>
 8002be0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002be4:	4aa3      	ldr	r2, [pc, #652]	; (8002e74 <UART_SetConfig+0x314>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	e7e1      	b.n	8002bb4 <UART_SetConfig+0x54>
 8002bf0:	4ba1      	ldr	r3, [pc, #644]	; (8002e78 <UART_SetConfig+0x318>)
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d123      	bne.n	8002c3e <UART_SetConfig+0xde>
 8002bf6:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c02:	2b10      	cmp	r3, #16
 8002c04:	f000 80f1 	beq.w	8002dea <UART_SetConfig+0x28a>
 8002c08:	d80b      	bhi.n	8002c22 <UART_SetConfig+0xc2>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80f3 	beq.w	8002df6 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c10:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        ret = HAL_ERROR;
 8002c14:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002c18:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c1c:	f000 80f8 	beq.w	8002e10 <UART_SetConfig+0x2b0>
 8002c20:	e0a8      	b.n	8002d74 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	f000 80c6 	beq.w	8002db4 <UART_SetConfig+0x254>
 8002c28:	2b30      	cmp	r3, #48	; 0x30
 8002c2a:	d1f1      	bne.n	8002c10 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c2c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002c30:	f040 80b8 	bne.w	8002da4 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c34:	6860      	ldr	r0, [r4, #4]
 8002c36:	0843      	lsrs	r3, r0, #1
 8002c38:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002c3c:	e0c3      	b.n	8002dc6 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c3e:	4b8f      	ldr	r3, [pc, #572]	; (8002e7c <UART_SetConfig+0x31c>)
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d11e      	bne.n	8002c82 <UART_SetConfig+0x122>
 8002c44:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c50:	2b40      	cmp	r3, #64	; 0x40
 8002c52:	f000 80bb 	beq.w	8002dcc <UART_SetConfig+0x26c>
 8002c56:	d80a      	bhi.n	8002c6e <UART_SetConfig+0x10e>
 8002c58:	b97b      	cbnz	r3, 8002c7a <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c5a:	4b82      	ldr	r3, [pc, #520]	; (8002e64 <UART_SetConfig+0x304>)
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	f040 80ca 	bne.w	8002df6 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002c62:	f7ff faed 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
        break;
 8002c66:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002c68:	bbb0      	cbnz	r0, 8002cd8 <UART_SetConfig+0x178>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	e03a      	b.n	8002ce4 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c6e:	2b80      	cmp	r3, #128	; 0x80
 8002c70:	f000 809d 	beq.w	8002dae <UART_SetConfig+0x24e>
 8002c74:	2bc0      	cmp	r3, #192	; 0xc0
 8002c76:	f000 80b0 	beq.w	8002dda <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c7a:	4b7a      	ldr	r3, [pc, #488]	; (8002e64 <UART_SetConfig+0x304>)
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d1c7      	bne.n	8002c10 <UART_SetConfig+0xb0>
 8002c80:	e02f      	b.n	8002ce2 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c82:	4b7f      	ldr	r3, [pc, #508]	; (8002e80 <UART_SetConfig+0x320>)
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d111      	bne.n	8002cac <UART_SetConfig+0x14c>
 8002c88:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c98:	f000 8098 	beq.w	8002dcc <UART_SetConfig+0x26c>
 8002c9c:	d9dc      	bls.n	8002c58 <UART_SetConfig+0xf8>
 8002c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca2:	f000 8084 	beq.w	8002dae <UART_SetConfig+0x24e>
 8002ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002caa:	e7e4      	b.n	8002c76 <UART_SetConfig+0x116>
 8002cac:	4b6d      	ldr	r3, [pc, #436]	; (8002e64 <UART_SetConfig+0x304>)
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d1ae      	bne.n	8002c10 <UART_SetConfig+0xb0>
 8002cb2:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc2:	f000 8083 	beq.w	8002dcc <UART_SetConfig+0x26c>
 8002cc6:	d9c7      	bls.n	8002c58 <UART_SetConfig+0xf8>
 8002cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ccc:	d06f      	beq.n	8002dae <UART_SetConfig+0x24e>
 8002cce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cd2:	e7d0      	b.n	8002c76 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002cd4:	486b      	ldr	r0, [pc, #428]	; (8002e84 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cd6:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002cd8:	6862      	ldr	r2, [r4, #4]
 8002cda:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002cde:	4281      	cmp	r1, r0
 8002ce0:	d905      	bls.n	8002cee <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8002ce2:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002ce8:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002cea:	4610      	mov	r0, r2
 8002cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002cee:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002cf2:	d8f6      	bhi.n	8002ce2 <UART_SetConfig+0x182>
        switch (clocksource)
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d82e      	bhi.n	8002d56 <UART_SetConfig+0x1f6>
 8002cf8:	e8df f003 	tbb	[pc, r3]
 8002cfc:	2d1c2d05 	.word	0x2d1c2d05
 8002d00:	2d2d2d24 	.word	0x2d2d2d24
 8002d04:	27          	.byte	0x27
 8002d05:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d06:	f7ff fa9b 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d0a:	6862      	ldr	r2, [r4, #4]
 8002d0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d10:	0856      	lsrs	r6, r2, #1
 8002d12:	2700      	movs	r7, #0
 8002d14:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002d18:	2300      	movs	r3, #0
 8002d1a:	4630      	mov	r0, r6
 8002d1c:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002d1e:	f7fd ff9b 	bl	8000c58 <__aeabi_uldivmod>
            break;
 8002d22:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d24:	4b58      	ldr	r3, [pc, #352]	; (8002e88 <UART_SetConfig+0x328>)
 8002d26:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002d2a:	4299      	cmp	r1, r3
 8002d2c:	d8d9      	bhi.n	8002ce2 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	60d8      	str	r0, [r3, #12]
 8002d32:	e7d7      	b.n	8002ce4 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002d34:	4855      	ldr	r0, [pc, #340]	; (8002e8c <UART_SetConfig+0x32c>)
 8002d36:	0855      	lsrs	r5, r2, #1
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002d3e:	f141 0100 	adc.w	r1, r1, #0
 8002d42:	e7ec      	b.n	8002d1e <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d44:	f7fe ff6a 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8002d48:	e7df      	b.n	8002d0a <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002d4a:	0850      	lsrs	r0, r2, #1
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002d54:	e7f3      	b.n	8002d3e <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8002d56:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002d58:	2000      	movs	r0, #0
 8002d5a:	e7e3      	b.n	8002d24 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d5c:	f7ff fa82 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8002d60:	e04e      	b.n	8002e00 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d62:	f7ff fa6d 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d66:	6862      	ldr	r2, [r4, #4]
 8002d68:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002d6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d70:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d72:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d74:	f1a3 0010 	sub.w	r0, r3, #16
 8002d78:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002d7c:	4288      	cmp	r0, r1
 8002d7e:	d8b0      	bhi.n	8002ce2 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8002d80:	6821      	ldr	r1, [r4, #0]
 8002d82:	60cb      	str	r3, [r1, #12]
 8002d84:	e7ae      	b.n	8002ce4 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d86:	f7ff fa6d 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8002d8a:	e7ec      	b.n	8002d66 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d8c:	6860      	ldr	r0, [r4, #4]
 8002d8e:	0843      	lsrs	r3, r0, #1
 8002d90:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002d94:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d98:	fbb3 f3f0 	udiv	r3, r3, r0
 8002d9c:	e7e8      	b.n	8002d70 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d9e:	f7fe ff3d 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8002da2:	e7e0      	b.n	8002d66 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002da4:	6860      	ldr	r0, [r4, #4]
 8002da6:	0843      	lsrs	r3, r0, #1
 8002da8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002dac:	e7f4      	b.n	8002d98 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dae:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <UART_SetConfig+0x304>)
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d08f      	beq.n	8002cd4 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002db4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002db8:	d1e8      	bne.n	8002d8c <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002dba:	6860      	ldr	r0, [r4, #4]
 8002dbc:	0843      	lsrs	r3, r0, #1
 8002dbe:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002dc2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002dc6:	fbb3 f3f0 	udiv	r3, r3, r0
 8002dca:	e01f      	b.n	8002e0c <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dcc:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <UART_SetConfig+0x304>)
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d10b      	bne.n	8002dea <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002dd2:	f7fe ff23 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
        break;
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	e746      	b.n	8002c68 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <UART_SetConfig+0x304>)
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	f47f af25 	bne.w	8002c2c <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002de2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8002de6:	2308      	movs	r3, #8
 8002de8:	e776      	b.n	8002cd8 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dea:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002dee:	d1d6      	bne.n	8002d9e <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002df0:	f7fe ff14 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8002df4:	e004      	b.n	8002e00 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002df6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002dfa:	d1b2      	bne.n	8002d62 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002dfc:	f7ff fa20 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e00:	6861      	ldr	r1, [r4, #4]
 8002e02:	084a      	lsrs	r2, r1, #1
 8002e04:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002e08:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e0c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e0e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e10:	f1a3 0010 	sub.w	r0, r3, #16
 8002e14:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002e18:	4288      	cmp	r0, r1
 8002e1a:	f63f af62 	bhi.w	8002ce2 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8002e1e:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002e22:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e24:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	60c3      	str	r3, [r0, #12]
 8002e2c:	e75a      	b.n	8002ce4 <UART_SetConfig+0x184>
    switch (clocksource)
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	f63f af57 	bhi.w	8002ce2 <UART_SetConfig+0x182>
 8002e34:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <UART_SetConfig+0x2dc>)
 8002e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3a:	bf00      	nop
 8002e3c:	08002d63 	.word	0x08002d63
 8002e40:	08002d87 	.word	0x08002d87
 8002e44:	08002d8d 	.word	0x08002d8d
 8002e48:	08002ce3 	.word	0x08002ce3
 8002e4c:	08002d9f 	.word	0x08002d9f
 8002e50:	08002ce3 	.word	0x08002ce3
 8002e54:	08002ce3 	.word	0x08002ce3
 8002e58:	08002ce3 	.word	0x08002ce3
 8002e5c:	08002da5 	.word	0x08002da5
 8002e60:	efff69f3 	.word	0xefff69f3
 8002e64:	40008000 	.word	0x40008000
 8002e68:	40013800 	.word	0x40013800
 8002e6c:	080067d8 	.word	0x080067d8
 8002e70:	40004400 	.word	0x40004400
 8002e74:	080067dc 	.word	0x080067dc
 8002e78:	40004800 	.word	0x40004800
 8002e7c:	40004c00 	.word	0x40004c00
 8002e80:	40005000 	.word	0x40005000
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	000ffcff 	.word	0x000ffcff
 8002e8c:	f4240000 	.word	0xf4240000

08002e90 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002e92:	07da      	lsls	r2, r3, #31
{
 8002e94:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e96:	d506      	bpl.n	8002ea6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e98:	6801      	ldr	r1, [r0, #0]
 8002e9a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002e9c:	684a      	ldr	r2, [r1, #4]
 8002e9e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002ea2:	4322      	orrs	r2, r4
 8002ea4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ea6:	079c      	lsls	r4, r3, #30
 8002ea8:	d506      	bpl.n	8002eb8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eaa:	6801      	ldr	r1, [r0, #0]
 8002eac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002eae:	684a      	ldr	r2, [r1, #4]
 8002eb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002eb4:	4322      	orrs	r2, r4
 8002eb6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eb8:	0759      	lsls	r1, r3, #29
 8002eba:	d506      	bpl.n	8002eca <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ebc:	6801      	ldr	r1, [r0, #0]
 8002ebe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002ec0:	684a      	ldr	r2, [r1, #4]
 8002ec2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ec6:	4322      	orrs	r2, r4
 8002ec8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eca:	071a      	lsls	r2, r3, #28
 8002ecc:	d506      	bpl.n	8002edc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ece:	6801      	ldr	r1, [r0, #0]
 8002ed0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002ed2:	684a      	ldr	r2, [r1, #4]
 8002ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ed8:	4322      	orrs	r2, r4
 8002eda:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002edc:	06dc      	lsls	r4, r3, #27
 8002ede:	d506      	bpl.n	8002eee <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ee0:	6801      	ldr	r1, [r0, #0]
 8002ee2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002ee4:	688a      	ldr	r2, [r1, #8]
 8002ee6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eea:	4322      	orrs	r2, r4
 8002eec:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eee:	0699      	lsls	r1, r3, #26
 8002ef0:	d506      	bpl.n	8002f00 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ef2:	6801      	ldr	r1, [r0, #0]
 8002ef4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002ef6:	688a      	ldr	r2, [r1, #8]
 8002ef8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002efc:	4322      	orrs	r2, r4
 8002efe:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f00:	065a      	lsls	r2, r3, #25
 8002f02:	d50f      	bpl.n	8002f24 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f04:	6801      	ldr	r1, [r0, #0]
 8002f06:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002f08:	684a      	ldr	r2, [r1, #4]
 8002f0a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002f0e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f10:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f14:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f16:	d105      	bne.n	8002f24 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f18:	684a      	ldr	r2, [r1, #4]
 8002f1a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002f1c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002f20:	4322      	orrs	r2, r4
 8002f22:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f24:	061b      	lsls	r3, r3, #24
 8002f26:	d506      	bpl.n	8002f36 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f28:	6802      	ldr	r2, [r0, #0]
 8002f2a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002f2c:	6853      	ldr	r3, [r2, #4]
 8002f2e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002f32:	430b      	orrs	r3, r1
 8002f34:	6053      	str	r3, [r2, #4]
 8002f36:	bd10      	pop	{r4, pc}

08002f38 <UART_WaitOnFlagUntilTimeout>:
{
 8002f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f3c:	9d06      	ldr	r5, [sp, #24]
 8002f3e:	4604      	mov	r4, r0
 8002f40:	460f      	mov	r7, r1
 8002f42:	4616      	mov	r6, r2
 8002f44:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f46:	6821      	ldr	r1, [r4, #0]
 8002f48:	69ca      	ldr	r2, [r1, #28]
 8002f4a:	ea37 0302 	bics.w	r3, r7, r2
 8002f4e:	bf0c      	ite	eq
 8002f50:	2201      	moveq	r2, #1
 8002f52:	2200      	movne	r2, #0
 8002f54:	42b2      	cmp	r2, r6
 8002f56:	d002      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002f58:	2000      	movs	r0, #0
}
 8002f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	1c6b      	adds	r3, r5, #1
 8002f60:	d0f2      	beq.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f62:	b99d      	cbnz	r5, 8002f8c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f6c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002f76:	2320      	movs	r3, #32
 8002f78:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8002f7c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002f80:	2300      	movs	r3, #0
 8002f82:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002f86:	2003      	movs	r0, #3
 8002f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f8c:	f7fe f822 	bl	8000fd4 <HAL_GetTick>
 8002f90:	eba0 0008 	sub.w	r0, r0, r8
 8002f94:	4285      	cmp	r5, r0
 8002f96:	d2d6      	bcs.n	8002f46 <UART_WaitOnFlagUntilTimeout+0xe>
 8002f98:	e7e4      	b.n	8002f64 <UART_WaitOnFlagUntilTimeout+0x2c>

08002f9a <UART_CheckIdleState>:
{
 8002f9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f9c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9e:	2600      	movs	r6, #0
 8002fa0:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002fa2:	f7fe f817 	bl	8000fd4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002fac:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fae:	d417      	bmi.n	8002fe0 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	075b      	lsls	r3, r3, #29
 8002fb6:	d50a      	bpl.n	8002fce <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	462b      	mov	r3, r5
 8002fc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f7ff ffb6 	bl	8002f38 <UART_WaitOnFlagUntilTimeout>
 8002fcc:	b9a0      	cbnz	r0, 8002ff8 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002fce:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002fd0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002fd2:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8002fd6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002fda:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002fde:	e00c      	b.n	8002ffa <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	4632      	mov	r2, r6
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f7ff ffa2 	bl	8002f38 <UART_WaitOnFlagUntilTimeout>
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d0db      	beq.n	8002fb0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002ff8:	2003      	movs	r0, #3
}
 8002ffa:	b002      	add	sp, #8
 8002ffc:	bd70      	pop	{r4, r5, r6, pc}

08002ffe <HAL_UART_Init>:
{
 8002ffe:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003000:	4604      	mov	r4, r0
 8003002:	b360      	cbz	r0, 800305e <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003004:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003008:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800300c:	b91b      	cbnz	r3, 8003016 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800300e:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003012:	f000 fd45 	bl	8003aa0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003016:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003018:	2324      	movs	r3, #36	; 0x24
 800301a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 800301e:	6813      	ldr	r3, [r2, #0]
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003026:	4620      	mov	r0, r4
 8003028:	f7ff fd9a 	bl	8002b60 <UART_SetConfig>
 800302c:	2801      	cmp	r0, #1
 800302e:	d016      	beq.n	800305e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003032:	b113      	cbz	r3, 800303a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003034:	4620      	mov	r0, r4
 8003036:	f7ff ff2b 	bl	8002e90 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800304a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003052:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003054:	601a      	str	r2, [r3, #0]
}
 8003056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800305a:	f7ff bf9e 	b.w	8002f9a <UART_CheckIdleState>
}
 800305e:	2001      	movs	r0, #1
 8003060:	bd10      	pop	{r4, pc}

08003062 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003062:	4770      	bx	lr

08003064 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003064:	b500      	push	{lr}
  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac1.Instance = DAC1;
 8003066:	480f      	ldr	r0, [pc, #60]	; (80030a4 <MX_DAC1_Init+0x40>)
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <MX_DAC1_Init+0x44>)
 800306a:	6003      	str	r3, [r0, #0]
{
 800306c:	b08b      	sub	sp, #44	; 0x2c
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800306e:	f7fe f83e 	bl	80010ee <HAL_DAC_Init>
 8003072:	b118      	cbz	r0, 800307c <MX_DAC1_Init+0x18>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003074:	213f      	movs	r1, #63	; 0x3f
 8003076:	480d      	ldr	r0, [pc, #52]	; (80030ac <MX_DAC1_Init+0x48>)
 8003078:	f000 fc26 	bl	80038c8 <_Error_Handler>
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800307c:	2304      	movs	r3, #4
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800307e:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8003080:	9302      	str	r3, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003082:	a901      	add	r1, sp, #4
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8003084:	2301      	movs	r3, #1
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003086:	4807      	ldr	r0, [pc, #28]	; (80030a4 <MX_DAC1_Init+0x40>)
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003088:	9201      	str	r2, [sp, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800308a:	9203      	str	r2, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800308c:	9304      	str	r3, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800308e:	9205      	str	r2, [sp, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003090:	f7fe f8f2 	bl	8001278 <HAL_DAC_ConfigChannel>
 8003094:	b118      	cbz	r0, 800309e <MX_DAC1_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003096:	214b      	movs	r1, #75	; 0x4b
 8003098:	4804      	ldr	r0, [pc, #16]	; (80030ac <MX_DAC1_Init+0x48>)
 800309a:	f000 fc15 	bl	80038c8 <_Error_Handler>
  }

}
 800309e:	b00b      	add	sp, #44	; 0x2c
 80030a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80030a4:	2000c234 	.word	0x2000c234
 80030a8:	40007400 	.word	0x40007400
 80030ac:	080067e9 	.word	0x080067e9

080030b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80030b0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(dacHandle->Instance==DAC1)
 80030b2:	6802      	ldr	r2, [r0, #0]
 80030b4:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <HAL_DAC_MspInit+0x78>)
 80030b6:	429a      	cmp	r2, r3
{
 80030b8:	b087      	sub	sp, #28
 80030ba:	4605      	mov	r5, r0
  if(dacHandle->Instance==DAC1)
 80030bc:	d131      	bne.n	8003122 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80030be:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2600      	movs	r6, #0
    __HAL_RCC_DAC1_CLK_ENABLE();
 80030c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80030c6:	4c19      	ldr	r4, [pc, #100]	; (800312c <HAL_DAC_MspInit+0x7c>)
    __HAL_RCC_DAC1_CLK_ENABLE();
 80030c8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80030cc:	659a      	str	r2, [r3, #88]	; 0x58
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	9603      	str	r6, [sp, #12]
    __HAL_RCC_DAC1_CLK_ENABLE();
 80030d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030da:	2710      	movs	r7, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030dc:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030e4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030e6:	9701      	str	r7, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e8:	f7fe fc2a 	bl	8001940 <HAL_GPIO_Init>
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80030ec:	4a10      	ldr	r2, [pc, #64]	; (8003130 <HAL_DAC_MspInit+0x80>)
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030ee:	60a7      	str	r7, [r4, #8]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80030f0:	2306      	movs	r3, #6
 80030f2:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	6123      	str	r3, [r4, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030fe:	6163      	str	r3, [r4, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003104:	61a3      	str	r3, [r4, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003106:	4620      	mov	r0, r4
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8003108:	2320      	movs	r3, #32
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800310a:	60e6      	str	r6, [r4, #12]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800310c:	61e3      	str	r3, [r4, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800310e:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003110:	f7fe fb04 	bl	800171c <HAL_DMA_Init>
 8003114:	b118      	cbz	r0, 800311e <HAL_DAC_MspInit+0x6e>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003116:	2171      	movs	r1, #113	; 0x71
 8003118:	4806      	ldr	r0, [pc, #24]	; (8003134 <HAL_DAC_MspInit+0x84>)
 800311a:	f000 fbd5 	bl	80038c8 <_Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 800311e:	60ac      	str	r4, [r5, #8]
 8003120:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8003122:	b007      	add	sp, #28
 8003124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003126:	bf00      	nop
 8003128:	40007400 	.word	0x40007400
 800312c:	2000c248 	.word	0x2000c248
 8003130:	40020030 	.word	0x40020030
 8003134:	080067e9 	.word	0x080067e9

08003138 <MX_DFSDM1_Init>:

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8003138:	481e      	ldr	r0, [pc, #120]	; (80031b4 <MX_DFSDM1_Init+0x7c>)
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800313a:	4a1f      	ldr	r2, [pc, #124]	; (80031b8 <MX_DFSDM1_Init+0x80>)
{
 800313c:	b508      	push	{r3, lr}
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800313e:	2300      	movs	r3, #0
 8003140:	e880 000c 	stmia.w	r0, {r2, r3}
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8003144:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8003148:	2301      	movs	r3, #1
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800314a:	61c2      	str	r2, [r0, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 32;
 800314c:	2220      	movs	r2, #32
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800314e:	7203      	strb	r3, [r0, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8003150:	7243      	strb	r3, [r0, #9]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 32;
 8003152:	6202      	str	r2, [r0, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8003154:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8003156:	f7fe fa01 	bl	800155c <HAL_DFSDM_FilterInit>
 800315a:	b118      	cbz	r0, 8003164 <MX_DFSDM1_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800315c:	2143      	movs	r1, #67	; 0x43
 800315e:	4817      	ldr	r0, [pc, #92]	; (80031bc <MX_DFSDM1_Init+0x84>)
 8003160:	f000 fbb2 	bl	80038c8 <_Error_Handler>
  }

  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8003164:	4816      	ldr	r0, [pc, #88]	; (80031c0 <MX_DFSDM1_Init+0x88>)
 8003166:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <MX_DFSDM1_Init+0x8c>)
 8003168:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel2.Init.OutputClock.Divider = 52;
 800316a:	2234      	movs	r2, #52	; 0x34
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800316c:	2301      	movs	r3, #1
  hdfsdm1_channel2.Init.OutputClock.Divider = 52;
 800316e:	60c2      	str	r2, [r0, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8003170:	2204      	movs	r2, #4
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8003172:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8003174:	6202      	str	r2, [r0, #32]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8003176:	2300      	movs	r3, #0
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
  hdfsdm1_channel2.Init.Awd.Oversampling = 10;
 8003178:	220a      	movs	r2, #10
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800317a:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800317c:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800317e:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8003180:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8003182:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8003184:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 10;
 8003186:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8003188:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0;
 800318a:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800318c:	f7fe f972 	bl	8001474 <HAL_DFSDM_ChannelInit>
 8003190:	b118      	cbz	r0, 800319a <MX_DFSDM1_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003192:	2155      	movs	r1, #85	; 0x55
 8003194:	4809      	ldr	r0, [pc, #36]	; (80031bc <MX_DFSDM1_Init+0x84>)
 8003196:	f000 fb97 	bl	80038c8 <_Error_Handler>
  }

  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800319a:	2201      	movs	r2, #1
 800319c:	490a      	ldr	r1, [pc, #40]	; (80031c8 <MX_DFSDM1_Init+0x90>)
 800319e:	4805      	ldr	r0, [pc, #20]	; (80031b4 <MX_DFSDM1_Init+0x7c>)
 80031a0:	f7fe fa4e 	bl	8001640 <HAL_DFSDM_FilterConfigRegChannel>
 80031a4:	b128      	cbz	r0, 80031b2 <MX_DFSDM1_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80031a6:	215a      	movs	r1, #90	; 0x5a
 80031a8:	4804      	ldr	r0, [pc, #16]	; (80031bc <MX_DFSDM1_Init+0x84>)
  }

}
 80031aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80031ae:	f000 bb8b 	b.w	80038c8 <_Error_Handler>
 80031b2:	bd08      	pop	{r3, pc}
 80031b4:	2000c290 	.word	0x2000c290
 80031b8:	40016100 	.word	0x40016100
 80031bc:	080067f6 	.word	0x080067f6
 80031c0:	2000c32c 	.word	0x2000c32c
 80031c4:	40016040 	.word	0x40016040
 80031c8:	00020004 	.word	0x00020004

080031cc <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80031cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 80031d0:	4c2d      	ldr	r4, [pc, #180]	; (8003288 <HAL_DFSDM_FilterMspInit+0xbc>)
 80031d2:	6823      	ldr	r3, [r4, #0]
{
 80031d4:	b086      	sub	sp, #24
 80031d6:	4605      	mov	r5, r0
  if(DFSDM1_Init == 0)
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d12e      	bne.n	800323a <HAL_DFSDM_FilterMspInit+0x6e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80031dc:	4a2b      	ldr	r2, [pc, #172]	; (800328c <HAL_DFSDM_FilterMspInit+0xc0>)
 80031de:	6813      	ldr	r3, [r2, #0]
 80031e0:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80031e2:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80031e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80031e6:	d109      	bne.n	80031fc <HAL_DFSDM_FilterMspInit+0x30>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80031e8:	4b29      	ldr	r3, [pc, #164]	; (8003290 <HAL_DFSDM_FilterMspInit+0xc4>)
 80031ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031ec:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80031f0:	661a      	str	r2, [r3, #96]	; 0x60
 80031f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fc:	4825      	ldr	r0, [pc, #148]	; (8003294 <HAL_DFSDM_FilterMspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031fe:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003202:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800320a:	2706      	movs	r7, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800320c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	f8cd 8008 	str.w	r8, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003214:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003216:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003218:	f7fe fb92 	bl	8001940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800321c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003220:	a901      	add	r1, sp, #4
 8003222:	481d      	ldr	r0, [pc, #116]	; (8003298 <HAL_DFSDM_FilterMspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003224:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	f8cd 8008 	str.w	r8, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800322e:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003230:	f7fe fb86 	bl	8001940 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800323a:	682a      	ldr	r2, [r5, #0]
 800323c:	4b17      	ldr	r3, [pc, #92]	; (800329c <HAL_DFSDM_FilterMspInit+0xd0>)
 800323e:	429a      	cmp	r2, r3
 8003240:	d11e      	bne.n	8003280 <HAL_DFSDM_FilterMspInit+0xb4>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003242:	4c17      	ldr	r4, [pc, #92]	; (80032a0 <HAL_DFSDM_FilterMspInit+0xd4>)
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003244:	2280      	movs	r2, #128	; 0x80
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003246:	f503 431f 	add.w	r3, r3, #40704	; 0x9f00
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800324a:	6122      	str	r2, [r4, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800324c:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003250:	3344      	adds	r3, #68	; 0x44
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003252:	6162      	str	r2, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003254:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003258:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800325a:	61a2      	str	r2, [r4, #24]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 800325c:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800325e:	2220      	movs	r2, #32
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8003260:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8003262:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003264:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8003266:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8003268:	61e2      	str	r2, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 800326a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800326c:	f7fe fa56 	bl	800171c <HAL_DMA_Init>
 8003270:	b118      	cbz	r0, 800327a <HAL_DFSDM_FilterMspInit+0xae>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003272:	2198      	movs	r1, #152	; 0x98
 8003274:	480b      	ldr	r0, [pc, #44]	; (80032a4 <HAL_DFSDM_FilterMspInit+0xd8>)
 8003276:	f000 fb27 	bl	80038c8 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 800327a:	62a5      	str	r5, [r4, #40]	; 0x28
 800327c:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 800327e:	62ac      	str	r4, [r5, #40]	; 0x28
  }

}
 8003280:	b006      	add	sp, #24
 8003282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003286:	bf00      	nop
 8003288:	20000214 	.word	0x20000214
 800328c:	20000218 	.word	0x20000218
 8003290:	40021000 	.word	0x40021000
 8003294:	48000800 	.word	0x48000800
 8003298:	48000400 	.word	0x48000400
 800329c:	40016100 	.word	0x40016100
 80032a0:	2000c2e4 	.word	0x2000c2e4
 80032a4:	080067f6 	.word	0x080067f6

080032a8 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80032a8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 80032aa:	4c19      	ldr	r4, [pc, #100]	; (8003310 <HAL_DFSDM_ChannelMspInit+0x68>)
 80032ac:	6823      	ldr	r3, [r4, #0]
{
 80032ae:	b087      	sub	sp, #28
  if(DFSDM1_Init == 0)
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d12b      	bne.n	800330c <HAL_DFSDM_ChannelMspInit+0x64>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80032b4:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_DFSDM_ChannelMspInit+0x6c>)
 80032b6:	6813      	ldr	r3, [r2, #0]
 80032b8:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80032ba:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80032bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80032be:	d109      	bne.n	80032d4 <HAL_DFSDM_ChannelMspInit+0x2c>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80032c0:	4b15      	ldr	r3, [pc, #84]	; (8003318 <HAL_DFSDM_ChannelMspInit+0x70>)
 80032c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032c4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80032c8:	661a      	str	r2, [r3, #96]	; 0x60
 80032ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032d4:	4811      	ldr	r0, [pc, #68]	; (800331c <HAL_DFSDM_ChannelMspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032d6:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032da:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032de:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80032e0:	2606      	movs	r6, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e4:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80032ea:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ec:	f7fe fb28 	bl	8001940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80032f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f4:	a901      	add	r1, sp, #4
 80032f6:	480a      	ldr	r0, [pc, #40]	; (8003320 <HAL_DFSDM_ChannelMspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80032f8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fa:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fe:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003300:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003302:	f7fe fb1d 	bl	8001940 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	3301      	adds	r3, #1
 800330a:	6023      	str	r3, [r4, #0]
  }
}
 800330c:	b007      	add	sp, #28
 800330e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003310:	20000214 	.word	0x20000214
 8003314:	20000218 	.word	0x20000218
 8003318:	40021000 	.word	0x40021000
 800331c:	48000800 	.word	0x48000800
 8003320:	48000400 	.word	0x48000400

08003324 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <MX_DMA_Init+0x3c>)
{
 8003326:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003328:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	649a      	str	r2, [r3, #72]	; 0x48
 8003330:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003332:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003334:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003338:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800333a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800333c:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 800333e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003340:	f7fd fe6e 	bl	8001020 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003344:	200d      	movs	r0, #13
 8003346:	f7fd fe9f 	bl	8001088 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800334a:	2200      	movs	r2, #0
 800334c:	4611      	mov	r1, r2
 800334e:	200e      	movs	r0, #14
 8003350:	f7fd fe66 	bl	8001020 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003354:	200e      	movs	r0, #14
 8003356:	f7fd fe97 	bl	8001088 <HAL_NVIC_EnableIRQ>

}
 800335a:	b003      	add	sp, #12
 800335c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003360:	40021000 	.word	0x40021000

08003364 <hann>:

float32_t hann_window[NN*2] = { 0.0f };
float32_t impulse_response[NN*2*2] = { 0.0f };

// hann window generation
void hann(int num) {
 8003364:	b570      	push	{r4, r5, r6, lr}
  arm_fill_f32(0.0f, hann_window, NN*2);
 8003366:	f44f 6100 	mov.w	r1, #2048	; 0x800
void hann(int num) {
 800336a:	ed2d 8b02 	vpush	{d8}
 800336e:	4605      	mov	r5, r0
  arm_fill_f32(0.0f, hann_window, NN*2);
 8003370:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80033bc <hann+0x58>
 8003374:	4812      	ldr	r0, [pc, #72]	; (80033c0 <hann+0x5c>)
 8003376:	4e12      	ldr	r6, [pc, #72]	; (80033c0 <hann+0x5c>)
 8003378:	f000 fbe8 	bl	8003b4c <arm_fill_f32>
  float32_t scale = 2.0f * PI / (float32_t) num;
 800337c:	ee07 5a90 	vmov	s15, r5
 8003380:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80033c4 <hann+0x60>
 8003384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int n = 0; n < num; n++) {
 8003388:	2400      	movs	r4, #0
  float32_t scale = 2.0f * PI / (float32_t) num;
 800338a:	eec7 8a27 	vdiv.f32	s17, s14, s15
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 800338e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
  for (int n = 0; n < num; n++) {
 8003392:	42ac      	cmp	r4, r5
 8003394:	db02      	blt.n	800339c <hann+0x38>
  }
}
 8003396:	ecbd 8b02 	vpop	{d8}
 800339a:	bd70      	pop	{r4, r5, r6, pc}
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 800339c:	ee07 4a90 	vmov	s15, r4
 80033a0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  for (int n = 0; n < num; n++) {
 80033a4:	3401      	adds	r4, #1
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 80033a6:	ee20 0a28 	vmul.f32	s0, s0, s17
 80033aa:	f001 f91f 	bl	80045ec <arm_cos_f32>
 80033ae:	eef0 7a48 	vmov.f32	s15, s16
 80033b2:	eee0 7a48 	vfms.f32	s15, s0, s16
 80033b6:	ece6 7a01 	vstmia	r6!, {s15}
 80033ba:	e7ea      	b.n	8003392 <hann+0x2e>
 80033bc:	00000000 	.word	0x00000000
 80033c0:	20002220 	.word	0x20002220
 80033c4:	40c90fdb 	.word	0x40c90fdb

080033c8 <sinc>:

// sinc function
float32_t sinc(float32_t x) {
 80033c8:	b508      	push	{r3, lr}
  float32_t y;
  if (x == 0.0) {
 80033ca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80033ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
float32_t sinc(float32_t x) {
 80033d2:	ed2d 8b02 	vpush	{d8}
 80033d6:	eeb0 8a40 	vmov.f32	s16, s0
  if (x == 0.0) {
 80033da:	d006      	beq.n	80033ea <sinc+0x22>
    y = 1.0;
  } else {
    y = arm_sin_f32(x) / x;
 80033dc:	f001 f8b8 	bl	8004550 <arm_sin_f32>
 80033e0:	ee80 0a08 	vdiv.f32	s0, s0, s16
  }
  return y;
}
 80033e4:	ecbd 8b02 	vpop	{d8}
 80033e8:	bd08      	pop	{r3, pc}
    y = 1.0;
 80033ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  return y;
 80033ee:	e7f9      	b.n	80033e4 <sinc+0x1c>

080033f0 <init_effector>:
/*
 * Effector initialization
 */
void init_effector(float32_t sampling_frequency) {
  // Generate Hanning window
  fs = sampling_frequency;
 80033f0:	4b01      	ldr	r3, [pc, #4]	; (80033f8 <init_effector+0x8>)
 80033f2:	ed83 0a00 	vstr	s0, [r3]
 80033f6:	4770      	bx	lr
 80033f8:	2000221c 	.word	0x2000221c

080033fc <overlap_add>:
    }
    signal[n] *= gain;
  }
}

void overlap_add(float32_t *in, float32_t *out) {
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static float32_t buf[NN * 2] = { 0.0f };
  arm_copy_f32(buf + NN, buf, NN);
 80033fe:	4c10      	ldr	r4, [pc, #64]	; (8003440 <overlap_add+0x44>)
 8003400:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
void overlap_add(float32_t *in, float32_t *out) {
 8003404:	4605      	mov	r5, r0
 8003406:	460f      	mov	r7, r1
  arm_copy_f32(buf + NN, buf, NN);
 8003408:	4630      	mov	r0, r6
 800340a:	4621      	mov	r1, r4
 800340c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003410:	f000 fbba 	bl	8003b88 <arm_copy_f32>
  arm_copy_f32(in + NN, buf + NN, NN);
 8003414:	4631      	mov	r1, r6
 8003416:	f505 5080 	add.w	r0, r5, #4096	; 0x1000
 800341a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800341e:	f000 fbb3 	bl	8003b88 <arm_copy_f32>
  arm_add_f32(buf, in, buf, NN);
 8003422:	4622      	mov	r2, r4
 8003424:	4629      	mov	r1, r5
 8003426:	4620      	mov	r0, r4
 8003428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800342c:	f001 f91e 	bl	800466c <arm_add_f32>
  arm_copy_f32(buf, out, NN);
 8003430:	4639      	mov	r1, r7
 8003432:	4620      	mov	r0, r4
 8003434:	f44f 6280 	mov.w	r2, #1024	; 0x400
}
 8003438:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  arm_copy_f32(buf, out, NN);
 800343c:	f000 bba4 	b.w	8003b88 <arm_copy_f32>
 8003440:	2000021c 	.word	0x2000021c
 8003444:	00000000 	.word	0x00000000

08003448 <init_fir>:
 *
 * fe: edge frequency
 * j: number of filter coefficients - 1
 * mode: 0 for LPR
 */
void init_fir(float32_t fe, int j, int mode) {
 8003448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800344c:	ed2d 8b02 	vpush	{d8}
 8003450:	4604      	mov	r4, r0
 8003452:	b083      	sub	sp, #12
  int m;
  int re;
  int offset;

  offset = j / 2;
  hann(j + 1);
 8003454:	3001      	adds	r0, #1
void init_fir(float32_t fe, int j, int mode) {
 8003456:	460d      	mov	r5, r1
 8003458:	eef0 8a40 	vmov.f32	s17, s0
  hann(j + 1);
 800345c:	f7ff ff82 	bl	8003364 <hann>
  fe = fe/fs;  // normalization
 8003460:	4b37      	ldr	r3, [pc, #220]	; (8003540 <init_fir+0xf8>)

  arm_fill_f32(0.0f, impulse_response, NN*2*2);
 8003462:	4838      	ldr	r0, [pc, #224]	; (8003544 <init_fir+0xfc>)
 8003464:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8003548 <init_fir+0x100>
  fe = fe/fs;  // normalization
 8003468:	ed93 8a00 	vldr	s16, [r3]
  arm_fill_f32(0.0f, impulse_response, NN*2*2);
 800346c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003470:	f000 fb6c 	bl	8003b4c <arm_fill_f32>

  switch (mode) {
 8003474:	2d00      	cmp	r5, #0
 8003476:	d158      	bne.n	800352a <init_fir+0xe2>
  case 0:  // LPF
    for (m = -j / 2; m <= j / 2; m++) {
      re = (offset + m) * 2;
      impulse_response[re] = 2.0 * fe * sinc(2.0 * PI * fe * m);
 8003478:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003544 <init_fir+0xfc>
  offset = j / 2;
 800347c:	2302      	movs	r3, #2
 800347e:	fb94 f4f3 	sdiv	r4, r4, r3
    for (m = -j / 2; m <= j / 2; m++) {
 8003482:	4265      	negs	r5, r4
 8003484:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8003488:	42a5      	cmp	r5, r4
 800348a:	dd11      	ble.n	80034b0 <init_fir+0x68>
    }
    arm_cmplx_mult_real_f32(impulse_response, hann_window, impulse_response, NN*2);
 800348c:	4a2d      	ldr	r2, [pc, #180]	; (8003544 <init_fir+0xfc>)
 800348e:	492f      	ldr	r1, [pc, #188]	; (800354c <init_fir+0x104>)
 8003490:	4610      	mov	r0, r2
 8003492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003496:	f000 ff4f 	bl	8004338 <arm_cmplx_mult_real_f32>
    arm_cfft_f32(&arm_cfft_sR_f32_len2048, impulse_response, 0, 1);
 800349a:	492a      	ldr	r1, [pc, #168]	; (8003544 <init_fir+0xfc>)
 800349c:	482c      	ldr	r0, [pc, #176]	; (8003550 <init_fir+0x108>)
 800349e:	2301      	movs	r3, #1
 80034a0:	2200      	movs	r2, #0
    break;
  default:
    break;
  }
}
 80034a2:	b003      	add	sp, #12
 80034a4:	ecbd 8b02 	vpop	{d8}
 80034a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_cfft_f32(&arm_cfft_sR_f32_len2048, impulse_response, 0, 1);
 80034ac:	f000 beca 	b.w	8004244 <arm_cfft_f32>
      impulse_response[re] = 2.0 * fe * sinc(2.0 * PI * fe * m);
 80034b0:	eec8 7a88 	vdiv.f32	s15, s17, s16
 80034b4:	ee17 0a90 	vmov	r0, s15
 80034b8:	f7fd f852 	bl	8000560 <__aeabi_f2d>
 80034bc:	a31e      	add	r3, pc, #120	; (adr r3, 8003538 <init_fir+0xf0>)
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	4606      	mov	r6, r0
 80034c4:	460f      	mov	r7, r1
 80034c6:	f7fd f89f 	bl	8000608 <__aeabi_dmul>
 80034ca:	4680      	mov	r8, r0
 80034cc:	4628      	mov	r0, r5
 80034ce:	4689      	mov	r9, r1
 80034d0:	f7fd f834 	bl	800053c <__aeabi_i2d>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4640      	mov	r0, r8
 80034da:	4649      	mov	r1, r9
 80034dc:	f7fd f894 	bl	8000608 <__aeabi_dmul>
 80034e0:	f7fd fb6a 	bl	8000bb8 <__aeabi_d2f>
 80034e4:	ee00 0a10 	vmov	s0, r0
 80034e8:	f7ff ff6e 	bl	80033c8 <sinc>
 80034ec:	4632      	mov	r2, r6
 80034ee:	463b      	mov	r3, r7
 80034f0:	4630      	mov	r0, r6
 80034f2:	4639      	mov	r1, r7
 80034f4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80034f8:	f7fc fed4 	bl	80002a4 <__adddf3>
 80034fc:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003500:	4606      	mov	r6, r0
 8003502:	ee10 0a10 	vmov	r0, s0
 8003506:	460f      	mov	r7, r1
 8003508:	f7fd f82a 	bl	8000560 <__aeabi_f2d>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4630      	mov	r0, r6
 8003512:	4639      	mov	r1, r7
 8003514:	f7fd f878 	bl	8000608 <__aeabi_dmul>
 8003518:	eb0b 08c5 	add.w	r8, fp, r5, lsl #3
 800351c:	f7fd fb4c 	bl	8000bb8 <__aeabi_d2f>
 8003520:	44d0      	add	r8, sl
    for (m = -j / 2; m <= j / 2; m++) {
 8003522:	3501      	adds	r5, #1
      impulse_response[re] = 2.0 * fe * sinc(2.0 * PI * fe * m);
 8003524:	f8c8 0000 	str.w	r0, [r8]
 8003528:	e7ae      	b.n	8003488 <init_fir+0x40>
}
 800352a:	b003      	add	sp, #12
 800352c:	ecbd 8b02 	vpop	{d8}
 8003530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003534:	f3af 8000 	nop.w
 8003538:	60000000 	.word	0x60000000
 800353c:	401921fb 	.word	0x401921fb
 8003540:	2000221c 	.word	0x2000221c
 8003544:	20004220 	.word	0x20004220
 8003548:	00000000 	.word	0x00000000
 800354c:	20002220 	.word	0x20002220
 8003550:	0800686c 	.word	0x0800686c

08003554 <fir>:

/*
 * FIR filter
 */
void fir(float32_t *signal) {
 8003554:	b530      	push	{r4, r5, lr}
 8003556:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 800355a:	b081      	sub	sp, #4
 800355c:	4604      	mov	r4, r0
  float32_t buf[NN * 2 * 2] = { 0.0f };
 800355e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003562:	2100      	movs	r1, #0
 8003564:	4668      	mov	r0, sp
 8003566:	f001 fbdd 	bl	8004d24 <memset>
 800356a:	4623      	mov	r3, r4
 800356c:	aa01      	add	r2, sp, #4
 800356e:	f504 5180 	add.w	r1, r4, #4096	; 0x1000

  for (int n = 0; n < NN; n++) {
    re = n * 2;
    im = re + 1;
    buf[re] = signal[n];
    buf[im] = 0.0f;
 8003572:	2000      	movs	r0, #0
    buf[re] = signal[n];
 8003574:	f853 5b04 	ldr.w	r5, [r3], #4
 8003578:	f842 5c04 	str.w	r5, [r2, #-4]
  for (int n = 0; n < NN; n++) {
 800357c:	428b      	cmp	r3, r1
    buf[im] = 0.0f;
 800357e:	f842 0b08 	str.w	r0, [r2], #8
  for (int n = 0; n < NN; n++) {
 8003582:	d1f7      	bne.n	8003574 <fir+0x20>
  }
  arm_fill_f32(0.0f, buf + NN * 2, NN * 2);
 8003584:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80035e0 <fir+0x8c>
 8003588:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800358c:	f50d 5000 	add.w	r0, sp, #8192	; 0x2000
 8003590:	f000 fadc 	bl	8003b4c <arm_fill_f32>

  arm_cfft_f32(&arm_cfft_sR_f32_len2048, buf, 0, 1);
 8003594:	2301      	movs	r3, #1
 8003596:	2200      	movs	r2, #0
 8003598:	4669      	mov	r1, sp
 800359a:	4812      	ldr	r0, [pc, #72]	; (80035e4 <fir+0x90>)
 800359c:	f000 fe52 	bl	8004244 <arm_cfft_f32>
  arm_cmplx_mult_cmplx_f32(impulse_response, buf, buf, NN * 2);
 80035a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035a4:	466a      	mov	r2, sp
 80035a6:	4669      	mov	r1, sp
 80035a8:	480f      	ldr	r0, [pc, #60]	; (80035e8 <fir+0x94>)
 80035aa:	f000 ff31 	bl	8004410 <arm_cmplx_mult_cmplx_f32>
  arm_cfft_f32(&arm_cfft_sR_f32_len2048, buf, 1, 1);
 80035ae:	2301      	movs	r3, #1
 80035b0:	461a      	mov	r2, r3
 80035b2:	4669      	mov	r1, sp
 80035b4:	480b      	ldr	r0, [pc, #44]	; (80035e4 <fir+0x90>)
 80035b6:	f000 fe45 	bl	8004244 <arm_cfft_f32>
 80035ba:	466a      	mov	r2, sp
 80035bc:	2300      	movs	r3, #0

  for (int n = 0; n < NN * 2; n++) {
    re = n * 2;
    buf[n] = buf[re];
 80035be:	eb0d 0103 	add.w	r1, sp, r3
 80035c2:	3308      	adds	r3, #8
 80035c4:	6809      	ldr	r1, [r1, #0]
 80035c6:	f842 1b04 	str.w	r1, [r2], #4
  for (int n = 0; n < NN * 2; n++) {
 80035ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ce:	d1f6      	bne.n	80035be <fir+0x6a>
  }

  overlap_add(buf, signal);
 80035d0:	4621      	mov	r1, r4
 80035d2:	4668      	mov	r0, sp
 80035d4:	f7ff ff12 	bl	80033fc <overlap_add>
}
 80035d8:	f50d 4d80 	add.w	sp, sp, #16384	; 0x4000
 80035dc:	b001      	add	sp, #4
 80035de:	bd30      	pop	{r4, r5, pc}
 80035e0:	00000000 	.word	0x00000000
 80035e4:	0800686c 	.word	0x0800686c
 80035e8:	20004220 	.word	0x20004220

080035ec <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ec:	4b21      	ldr	r3, [pc, #132]	; (8003674 <MX_GPIO_Init+0x88>)
{
 80035ee:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035f2:	f042 0204 	orr.w	r2, r2, #4
 80035f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80035f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 80035fa:	b088      	sub	sp, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035fc:	f002 0204 	and.w	r2, r2, #4
 8003600:	9200      	str	r2, [sp, #0]
 8003602:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003604:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	64da      	str	r2, [r3, #76]	; 0x4c
 800360c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800360e:	f002 0201 	and.w	r2, r2, #1
 8003612:	9201      	str	r2, [sp, #4]
 8003614:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003618:	f042 0202 	orr.w	r2, r2, #2
 800361c:	64da      	str	r2, [r3, #76]	; 0x4c
 800361e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003620:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003624:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003626:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003628:	2120      	movs	r1, #32
 800362a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800362e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003630:	f7fe fa62 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 800363a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800363c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800363e:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <MX_GPIO_Init+0x8c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003640:	480e      	ldr	r0, [pc, #56]	; (800367c <MX_GPIO_Init+0x90>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003642:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003646:	f7fe f97b 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800364a:	2320      	movs	r3, #32
 800364c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800364e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003650:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003656:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800365c:	f7fe f970 	bl	8001940 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003660:	4622      	mov	r2, r4
 8003662:	4621      	mov	r1, r4
 8003664:	2028      	movs	r0, #40	; 0x28
 8003666:	f7fd fcdb 	bl	8001020 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800366a:	2028      	movs	r0, #40	; 0x28
 800366c:	f7fd fd0c 	bl	8001088 <HAL_NVIC_EnableIRQ>

}
 8003670:	b008      	add	sp, #32
 8003672:	bd10      	pop	{r4, pc}
 8003674:	40021000 	.word	0x40021000
 8003678:	10210000 	.word	0x10210000
 800367c:	48000800 	.word	0x48000800

08003680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003680:	b510      	push	{r4, lr}
 8003682:	b0b8      	sub	sp, #224	; 0xe0
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003688:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800368a:	2210      	movs	r2, #16
 800368c:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 800368e:	2201      	movs	r2, #1
 8003690:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003692:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003694:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003696:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003698:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800369a:	2207      	movs	r2, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800369c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800369e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036a0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80036a2:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80036a4:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80036a6:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036a8:	f7fe fb0c 	bl	8001cc4 <HAL_RCC_OscConfig>
 80036ac:	b100      	cbz	r0, 80036b0 <SystemClock_Config+0x30>
 80036ae:	e7fe      	b.n	80036ae <SystemClock_Config+0x2e>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036b0:	220f      	movs	r2, #15
 80036b2:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036b4:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036b6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036b8:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80036ba:	2104      	movs	r1, #4
 80036bc:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036be:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80036c2:	f7fe fd25 	bl	8002110 <HAL_RCC_ClockConfig>
 80036c6:	b100      	cbz	r0, 80036ca <SystemClock_Config+0x4a>
 80036c8:	e7fe      	b.n	80036c8 <SystemClock_Config+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_DFSDM1;
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <SystemClock_Config+0x90>)
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036cc:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80036ce:	9036      	str	r0, [sp, #216]	; 0xd8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036d0:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_DFSDM1;
 80036d2:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036d4:	f7fe fee4 	bl	80024a0 <HAL_RCCEx_PeriphCLKConfig>
 80036d8:	b100      	cbz	r0, 80036dc <SystemClock_Config+0x5c>
 80036da:	e7fe      	b.n	80036da <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80036dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80036e0:	f7fe fa24 	bl	8001b2c <HAL_PWREx_ControlVoltageScaling>
 80036e4:	4604      	mov	r4, r0
 80036e6:	b100      	cbz	r0, 80036ea <SystemClock_Config+0x6a>
 80036e8:	e7fe      	b.n	80036e8 <SystemClock_Config+0x68>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80036ea:	f7fe fda3 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 80036ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80036f6:	f7fd fcd3 	bl	80010a0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80036fa:	2004      	movs	r0, #4
 80036fc:	f7fd fce6 	bl	80010cc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003700:	4622      	mov	r2, r4
 8003702:	4621      	mov	r1, r4
 8003704:	f04f 30ff 	mov.w	r0, #4294967295
 8003708:	f7fd fc8a 	bl	8001020 <HAL_NVIC_SetPriority>
}
 800370c:	b038      	add	sp, #224	; 0xe0
 800370e:	bd10      	pop	{r4, pc}
 8003710:	00010002 	.word	0x00010002

08003714 <main>:
{
 8003714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  HAL_Init();
 8003718:	f7fd fc3e 	bl	8000f98 <HAL_Init>
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 800371c:	4c50      	ldr	r4, [pc, #320]	; (8003860 <main+0x14c>)
  SystemClock_Config();
 800371e:	f7ff ffaf 	bl	8003680 <SystemClock_Config>
  MX_GPIO_Init();
 8003722:	f7ff ff63 	bl	80035ec <MX_GPIO_Init>
  MX_DMA_Init();
 8003726:	f7ff fdfd 	bl	8003324 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800372a:	f000 f997 	bl	8003a5c <MX_USART2_UART_Init>
  MX_DFSDM1_Init();
 800372e:	f7ff fd03 	bl	8003138 <MX_DFSDM1_Init>
  MX_DAC1_Init();
 8003732:	f7ff fc97 	bl	8003064 <MX_DAC1_Init>
  MX_TIM6_Init();
 8003736:	f000 f953 	bl	80039e0 <MX_TIM6_Init>
  sampling_frequency = SystemCoreClock / hdfsdm1_channel2.Init.OutputClock.Divider
 800373a:	4b4a      	ldr	r3, [pc, #296]	; (8003864 <main+0x150>)
 800373c:	4a4a      	ldr	r2, [pc, #296]	; (8003868 <main+0x154>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68d2      	ldr	r2, [r2, #12]
 8003742:	fbb3 f3f2 	udiv	r3, r3, r2
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 8003746:	6a22      	ldr	r2, [r4, #32]
 8003748:	fbb3 f3f2 	udiv	r3, r3, r2
      / hdfsdm1_filter0.Init.FilterParam.IntOversampling;
 800374c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800374e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003752:	ee00 3a10 	vmov	s0, r3
  sampling_frequency = SystemCoreClock / hdfsdm1_channel2.Init.OutputClock.Divider
 8003756:	4b45      	ldr	r3, [pc, #276]	; (800386c <main+0x158>)
 8003758:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800375c:	ed83 0a00 	vstr	s0, [r3]
  init_effector(sampling_frequency);
 8003760:	f7ff fe46 	bl	80033f0 <init_effector>
  init_fir(1000.0, 128, 0);  // edge freq = 1000, j = 128, LPF
 8003764:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8003870 <main+0x15c>
 8003768:	2100      	movs	r1, #0
 800376a:	2080      	movs	r0, #128	; 0x80
 800376c:	f7ff fe6c 	bl	8003448 <init_fir>
  HAL_TIM_Base_Start(&htim6);
 8003770:	4840      	ldr	r0, [pc, #256]	; (8003874 <main+0x160>)
 8003772:	f7ff f87d 	bl	8002870 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003776:	2100      	movs	r1, #0
 8003778:	483f      	ldr	r0, [pc, #252]	; (8003878 <main+0x164>)
 800377a:	f7fd fccb 	bl	8001114 <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)output_buf, NN*2,
 800377e:	2100      	movs	r1, #0
 8003780:	9100      	str	r1, [sp, #0]
 8003782:	4a3e      	ldr	r2, [pc, #248]	; (800387c <main+0x168>)
 8003784:	483c      	ldr	r0, [pc, #240]	; (8003878 <main+0x164>)
 8003786:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800378a:	f7fd fced 	bl	8001168 <HAL_DAC_Start_DMA>
  HAL_Delay(1);
 800378e:	2001      	movs	r0, #1
 8003790:	f7fd fc26 	bl	8000fe0 <HAL_Delay>
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, input_buf, NN*2)
 8003794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003798:	4939      	ldr	r1, [pc, #228]	; (8003880 <main+0x16c>)
 800379a:	4620      	mov	r0, r4
 800379c:	f7fd ff6e 	bl	800167c <HAL_DFSDM_FilterRegularStart_DMA>
 80037a0:	2800      	cmp	r0, #0
 80037a2:	d15c      	bne.n	800385e <main+0x14a>
    if (new_pcm_data_a) {
 80037a4:	4d37      	ldr	r5, [pc, #220]	; (8003884 <main+0x170>)
         signal[n] = (float32_t)(input_buf[n] >> 9);
 80037a6:	4f36      	ldr	r7, [pc, #216]	; (8003880 <main+0x16c>)
 80037a8:	462e      	mov	r6, r5
    if (new_pcm_data_a) {
 80037aa:	782b      	ldrb	r3, [r5, #0]
 80037ac:	b333      	cbz	r3, 80037fc <main+0xe8>
 80037ae:	4c36      	ldr	r4, [pc, #216]	; (8003888 <main+0x174>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	4621      	mov	r1, r4
         signal[n] = (float32_t)(input_buf[n] >> 9);
 80037b4:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 80037b8:	125b      	asrs	r3, r3, #9
 80037ba:	ee07 3a90 	vmov	s15, r3
      for (uint32_t n = 0; n < NN; n++) {
 80037be:	3201      	adds	r2, #1
         signal[n] = (float32_t)(input_buf[n] >> 9);
 80037c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for (uint32_t n = 0; n < NN; n++) {
 80037c4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
         signal[n] = (float32_t)(input_buf[n] >> 9);
 80037c8:	ece1 7a01 	vstmia	r1!, {s15}
      for (uint32_t n = 0; n < NN; n++) {
 80037cc:	d1f2      	bne.n	80037b4 <main+0xa0>
  fir(s);
 80037ce:	482e      	ldr	r0, [pc, #184]	; (8003888 <main+0x174>)
 80037d0:	f7ff fec0 	bl	8003554 <fir>
        output_buf[n] = (uint16_t)(((int32_t)signal[n] >> 4) + 2048);
 80037d4:	4929      	ldr	r1, [pc, #164]	; (800387c <main+0x168>)
      for (uint32_t n = 0; n < NN; n++) {
 80037d6:	2200      	movs	r2, #0
        output_buf[n] = (uint16_t)(((int32_t)signal[n] >> 4) + 2048);
 80037d8:	ecf4 7a01 	vldmia	r4!, {s15}
 80037dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037e0:	ee17 3a90 	vmov	r3, s15
 80037e4:	111b      	asrs	r3, r3, #4
 80037e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
      for (uint32_t n = 0; n < NN; n++) {
 80037f0:	3201      	adds	r2, #1
 80037f2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80037f6:	d1ef      	bne.n	80037d8 <main+0xc4>
      new_pcm_data_a = false;
 80037f8:	2300      	movs	r3, #0
 80037fa:	7033      	strb	r3, [r6, #0]
    if (new_pcm_data_b) {
 80037fc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800388c <main+0x178>
 8003800:	f899 3000 	ldrb.w	r3, [r9]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0d0      	beq.n	80037aa <main+0x96>
 8003808:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8003888 <main+0x174>
 800380c:	2400      	movs	r4, #0
 800380e:	4642      	mov	r2, r8
         signal[n] = (float32_t)(input_buf[n+NN] >> 9);
 8003810:	00a3      	lsls	r3, r4, #2
 8003812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
      for (uint32_t n = 0; n < NN; n++) {
 8003816:	3401      	adds	r4, #1
         signal[n] = (float32_t)(input_buf[n+NN] >> 9);
 8003818:	58fb      	ldr	r3, [r7, r3]
 800381a:	125b      	asrs	r3, r3, #9
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for (uint32_t n = 0; n < NN; n++) {
 8003824:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
         signal[n] = (float32_t)(input_buf[n+NN] >> 9);
 8003828:	ece2 7a01 	vstmia	r2!, {s15}
      for (uint32_t n = 0; n < NN; n++) {
 800382c:	d1f0      	bne.n	8003810 <main+0xfc>
  fir(s);
 800382e:	4816      	ldr	r0, [pc, #88]	; (8003888 <main+0x174>)
 8003830:	f7ff fe90 	bl	8003554 <fir>
        output_buf[n+NN] = (uint16_t)(((int32_t)signal[n] >> 4) + 2048);
 8003834:	4a11      	ldr	r2, [pc, #68]	; (800387c <main+0x168>)
 8003836:	ecf8 7a01 	vldmia	r8!, {s15}
 800383a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800383e:	ee17 3a90 	vmov	r3, s15
 8003842:	111b      	asrs	r3, r3, #4
 8003844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003848:	b29b      	uxth	r3, r3
 800384a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 800384e:	3401      	adds	r4, #1
      for (uint32_t n = 0; n < NN; n++) {
 8003850:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8003854:	d1ef      	bne.n	8003836 <main+0x122>
      new_pcm_data_b = false;
 8003856:	2300      	movs	r3, #0
 8003858:	f889 3000 	strb.w	r3, [r9]
 800385c:	e7a5      	b.n	80037aa <main+0x96>
 800385e:	e7fe      	b.n	800385e <main+0x14a>
 8003860:	2000c290 	.word	0x2000c290
 8003864:	20000000 	.word	0x20000000
 8003868:	2000c32c 	.word	0x2000c32c
 800386c:	2000c364 	.word	0x2000c364
 8003870:	447a0000 	.word	0x447a0000
 8003874:	2000c368 	.word	0x2000c368
 8003878:	2000c234 	.word	0x2000c234
 800387c:	2000a222 	.word	0x2000a222
 8003880:	20008220 	.word	0x20008220
 8003884:	2000a220 	.word	0x2000a220
 8003888:	2000b224 	.word	0x2000b224
 800388c:	2000a221 	.word	0x2000a221

08003890 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
  if (!new_pcm_data_a && (hdfsdm_filter == &hdfsdm1_filter0)) {
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x14>)
 8003892:	781a      	ldrb	r2, [r3, #0]
 8003894:	b922      	cbnz	r2, 80038a0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x10>
 8003896:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>)
 8003898:	4290      	cmp	r0, r2
    new_pcm_data_a = true;
 800389a:	bf04      	itt	eq
 800389c:	2201      	moveq	r2, #1
 800389e:	701a      	strbeq	r2, [r3, #0]
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	2000a220 	.word	0x2000a220
 80038a8:	2000c290 	.word	0x2000c290

080038ac <HAL_DFSDM_FilterRegConvCpltCallback>:
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
  if (!new_pcm_data_b && (hdfsdm_filter == &hdfsdm1_filter0)) {
 80038ac:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <HAL_DFSDM_FilterRegConvCpltCallback+0x14>)
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	b922      	cbnz	r2, 80038bc <HAL_DFSDM_FilterRegConvCpltCallback+0x10>
 80038b2:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>)
 80038b4:	4290      	cmp	r0, r2
    new_pcm_data_b = true;
 80038b6:	bf04      	itt	eq
 80038b8:	2201      	moveq	r2, #1
 80038ba:	701a      	strbeq	r2, [r3, #0]
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	2000a221 	.word	0x2000a221
 80038c4:	2000c290 	.word	0x2000c290

080038c8 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80038c8:	e7fe      	b.n	80038c8 <_Error_Handler>
	...

080038cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038cc:	4b21      	ldr	r3, [pc, #132]	; (8003954 <HAL_MspInit+0x88>)
{
 80038ce:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	661a      	str	r2, [r3, #96]	; 0x60
 80038d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038da:	f002 0201 	and.w	r2, r2, #1
 80038de:	9200      	str	r2, [sp, #0]
 80038e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038e8:	659a      	str	r2, [r3, #88]	; 0x58
 80038ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f0:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038f2:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038f6:	f7fd fb81 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80038fa:	2200      	movs	r2, #0
 80038fc:	4611      	mov	r1, r2
 80038fe:	f06f 000b 	mvn.w	r0, #11
 8003902:	f7fd fb8d 	bl	8001020 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	4611      	mov	r1, r2
 800390a:	f06f 000a 	mvn.w	r0, #10
 800390e:	f7fd fb87 	bl	8001020 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003912:	2200      	movs	r2, #0
 8003914:	4611      	mov	r1, r2
 8003916:	f06f 0009 	mvn.w	r0, #9
 800391a:	f7fd fb81 	bl	8001020 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800391e:	2200      	movs	r2, #0
 8003920:	4611      	mov	r1, r2
 8003922:	f06f 0004 	mvn.w	r0, #4
 8003926:	f7fd fb7b 	bl	8001020 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800392a:	2200      	movs	r2, #0
 800392c:	4611      	mov	r1, r2
 800392e:	f06f 0003 	mvn.w	r0, #3
 8003932:	f7fd fb75 	bl	8001020 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	4611      	mov	r1, r2
 800393a:	f06f 0001 	mvn.w	r0, #1
 800393e:	f7fd fb6f 	bl	8001020 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003942:	2200      	movs	r2, #0
 8003944:	4611      	mov	r1, r2
 8003946:	f04f 30ff 	mov.w	r0, #4294967295
 800394a:	f7fd fb69 	bl	8001020 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800394e:	b003      	add	sp, #12
 8003950:	f85d fb04 	ldr.w	pc, [sp], #4
 8003954:	40021000 	.word	0x40021000

08003958 <SVC_Handler>:
 8003958:	4770      	bx	lr

0800395a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800395a:	4770      	bx	lr

0800395c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800395c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800395e:	f7fd fb31 	bl	8000fc4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003966:	f7fd bbbe 	b.w	80010e6 <HAL_SYSTICK_IRQHandler>
	...

0800396c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800396c:	4801      	ldr	r0, [pc, #4]	; (8003974 <DMA1_Channel3_IRQHandler+0x8>)
 800396e:	f7fd bf9d 	b.w	80018ac <HAL_DMA_IRQHandler>
 8003972:	bf00      	nop
 8003974:	2000c248 	.word	0x2000c248

08003978 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8003978:	4801      	ldr	r0, [pc, #4]	; (8003980 <DMA1_Channel4_IRQHandler+0x8>)
 800397a:	f7fd bf97 	b.w	80018ac <HAL_DMA_IRQHandler>
 800397e:	bf00      	nop
 8003980:	2000c2e4 	.word	0x2000c2e4

08003984 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003984:	4801      	ldr	r0, [pc, #4]	; (800398c <USART2_IRQHandler+0x8>)
 8003986:	f7ff b84b 	b.w	8002a20 <HAL_UART_IRQHandler>
 800398a:	bf00      	nop
 800398c:	2000c3a8 	.word	0x2000c3a8

08003990 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003990:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003994:	f7fe b8b6 	b.w	8001b04 <HAL_GPIO_EXTI_IRQHandler>

08003998 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003998:	490f      	ldr	r1, [pc, #60]	; (80039d8 <SystemInit+0x40>)
 800399a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800399e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80039a6:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <SystemInit+0x44>)
 80039a8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80039aa:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80039b2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80039ba:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80039be:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80039c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039cc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80039ce:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039d4:	608b      	str	r3, [r1, #8]
 80039d6:	4770      	bx	lr
 80039d8:	e000ed00 	.word	0xe000ed00
 80039dc:	40021000 	.word	0x40021000

080039e0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80039e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 80039e2:	4811      	ldr	r0, [pc, #68]	; (8003a28 <MX_TIM6_Init+0x48>)
 80039e4:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <MX_TIM6_Init+0x4c>)
 80039e6:	6003      	str	r3, [r0, #0]
  htim6.Init.Prescaler = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ec:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 1663;
 80039ee:	f240 637f 	movw	r3, #1663	; 0x67f
 80039f2:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80039f8:	f7fe ffba 	bl	8002970 <HAL_TIM_Base_Init>
 80039fc:	b118      	cbz	r0, 8003a06 <MX_TIM6_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
 80039fe:	213d      	movs	r1, #61	; 0x3d
 8003a00:	480b      	ldr	r0, [pc, #44]	; (8003a30 <MX_TIM6_Init+0x50>)
 8003a02:	f7ff ff61 	bl	80038c8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003a06:	2320      	movs	r3, #32
 8003a08:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a0a:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a0c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a0e:	4806      	ldr	r0, [pc, #24]	; (8003a28 <MX_TIM6_Init+0x48>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a10:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a12:	f7fe ffc7 	bl	80029a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a16:	b118      	cbz	r0, 8003a20 <MX_TIM6_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003a18:	2144      	movs	r1, #68	; 0x44
 8003a1a:	4805      	ldr	r0, [pc, #20]	; (8003a30 <MX_TIM6_Init+0x50>)
 8003a1c:	f7ff ff54 	bl	80038c8 <_Error_Handler>
  }

}
 8003a20:	b005      	add	sp, #20
 8003a22:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a26:	bf00      	nop
 8003a28:	2000c368 	.word	0x2000c368
 8003a2c:	40001000 	.word	0x40001000
 8003a30:	08006850 	.word	0x08006850

08003a34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8003a34:	6802      	ldr	r2, [r0, #0]
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <HAL_TIM_Base_MspInit+0x24>)
 8003a38:	429a      	cmp	r2, r3
{
 8003a3a:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM6)
 8003a3c:	d10a      	bne.n	8003a54 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a3e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003a42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a44:	f042 0210 	orr.w	r2, r2, #16
 8003a48:	659a      	str	r2, [r3, #88]	; 0x58
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003a54:	b002      	add	sp, #8
 8003a56:	4770      	bx	lr
 8003a58:	40001000 	.word	0x40001000

08003a5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003a5c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8003a5e:	480d      	ldr	r0, [pc, #52]	; (8003a94 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <MX_USART2_UART_Init+0x3c>)
 8003a62:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003a66:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a6a:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a70:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a72:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a74:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a76:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a78:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a7a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a7c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a7e:	f7ff fabe 	bl	8002ffe <HAL_UART_Init>
 8003a82:	b128      	cbz	r0, 8003a90 <MX_USART2_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003a84:	2144      	movs	r1, #68	; 0x44
 8003a86:	4805      	ldr	r0, [pc, #20]	; (8003a9c <MX_USART2_UART_Init+0x40>)
  }

}
 8003a88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003a8c:	f7ff bf1c 	b.w	80038c8 <_Error_Handler>
 8003a90:	bd08      	pop	{r3, pc}
 8003a92:	bf00      	nop
 8003a94:	2000c3a8 	.word	0x2000c3a8
 8003a98:	40004400 	.word	0x40004400
 8003a9c:	0800685d 	.word	0x0800685d

08003aa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003aa0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8003aa2:	6802      	ldr	r2, [r0, #0]
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_UART_MspInit+0x54>)
 8003aa6:	429a      	cmp	r2, r3
{
 8003aa8:	b086      	sub	sp, #24
  if(uartHandle->Instance==USART2)
 8003aaa:	d121      	bne.n	8003af0 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003aac:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ab2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ab4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003ab8:	659a      	str	r2, [r3, #88]	; 0x58
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abc:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aca:	2302      	movs	r3, #2
 8003acc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ad4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ada:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003adc:	f7fd ff30 	bl	8001940 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ae0:	2026      	movs	r0, #38	; 0x26
 8003ae2:	4622      	mov	r2, r4
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	f7fd fa9b 	bl	8001020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003aea:	2026      	movs	r0, #38	; 0x26
 8003aec:	f7fd facc 	bl	8001088 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003af0:	b006      	add	sp, #24
 8003af2:	bd10      	pop	{r4, pc}
 8003af4:	40004400 	.word	0x40004400

08003af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b30 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003afc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003afe:	e003      	b.n	8003b08 <LoopCopyDataInit>

08003b00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003b02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b06:	3104      	adds	r1, #4

08003b08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b08:	480b      	ldr	r0, [pc, #44]	; (8003b38 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003b0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b10:	d3f6      	bcc.n	8003b00 <CopyDataInit>
	ldr	r2, =_sbss
 8003b12:	4a0b      	ldr	r2, [pc, #44]	; (8003b40 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003b14:	e002      	b.n	8003b1c <LoopFillZerobss>

08003b16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b18:	f842 3b04 	str.w	r3, [r2], #4

08003b1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b1c:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <LoopForever+0x16>)
	cmp	r2, r3
 8003b1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b20:	d3f9      	bcc.n	8003b16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b22:	f7ff ff39 	bl	8003998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b26:	f001 f8d9 	bl	8004cdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b2a:	f7ff fdf3 	bl	8003714 <main>

08003b2e <LoopForever>:

LoopForever:
    b LoopForever
 8003b2e:	e7fe      	b.n	8003b2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b30:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003b34:	0800d078 	.word	0x0800d078
	ldr	r0, =_sdata
 8003b38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b3c:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8003b40:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8003b44:	2000c424 	.word	0x2000c424

08003b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b48:	e7fe      	b.n	8003b48 <ADC1_2_IRQHandler>
	...

08003b4c <arm_fill_f32>:
 8003b4c:	b410      	push	{r4}
 8003b4e:	088c      	lsrs	r4, r1, #2
 8003b50:	d010      	beq.n	8003b74 <arm_fill_f32+0x28>
 8003b52:	f100 0310 	add.w	r3, r0, #16
 8003b56:	4622      	mov	r2, r4
 8003b58:	3a01      	subs	r2, #1
 8003b5a:	ed03 0a04 	vstr	s0, [r3, #-16]
 8003b5e:	ed03 0a03 	vstr	s0, [r3, #-12]
 8003b62:	ed03 0a02 	vstr	s0, [r3, #-8]
 8003b66:	ed03 0a01 	vstr	s0, [r3, #-4]
 8003b6a:	f103 0310 	add.w	r3, r3, #16
 8003b6e:	d1f3      	bne.n	8003b58 <arm_fill_f32+0xc>
 8003b70:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8003b74:	f011 0103 	ands.w	r1, r1, #3
 8003b78:	d003      	beq.n	8003b82 <arm_fill_f32+0x36>
 8003b7a:	3901      	subs	r1, #1
 8003b7c:	eca0 0a01 	vstmia	r0!, {s0}
 8003b80:	d1fb      	bne.n	8003b7a <arm_fill_f32+0x2e>
 8003b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <arm_copy_f32>:
 8003b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b8c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8003b90:	d01e      	beq.n	8003bd0 <arm_copy_f32+0x48>
 8003b92:	f100 0410 	add.w	r4, r0, #16
 8003b96:	f101 0310 	add.w	r3, r1, #16
 8003b9a:	4645      	mov	r5, r8
 8003b9c:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8003ba0:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 8003ba4:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8003ba8:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8003bac:	f843 6c04 	str.w	r6, [r3, #-4]
 8003bb0:	3d01      	subs	r5, #1
 8003bb2:	f843 cc10 	str.w	ip, [r3, #-16]
 8003bb6:	f843 ec0c 	str.w	lr, [r3, #-12]
 8003bba:	f843 7c08 	str.w	r7, [r3, #-8]
 8003bbe:	f104 0410 	add.w	r4, r4, #16
 8003bc2:	f103 0310 	add.w	r3, r3, #16
 8003bc6:	d1e9      	bne.n	8003b9c <arm_copy_f32+0x14>
 8003bc8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8003bcc:	4440      	add	r0, r8
 8003bce:	4441      	add	r1, r8
 8003bd0:	f012 0203 	ands.w	r2, r2, #3
 8003bd4:	d005      	beq.n	8003be2 <arm_copy_f32+0x5a>
 8003bd6:	f850 3b04 	ldr.w	r3, [r0], #4
 8003bda:	f841 3b04 	str.w	r3, [r1], #4
 8003bde:	3a01      	subs	r2, #1
 8003be0:	d1f9      	bne.n	8003bd6 <arm_copy_f32+0x4e>
 8003be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003be6:	bf00      	nop

08003be8 <arm_cfft_radix8by2_f32>:
 8003be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bec:	ed2d 8b08 	vpush	{d8-d11}
 8003bf0:	4607      	mov	r7, r0
 8003bf2:	4608      	mov	r0, r1
 8003bf4:	f8b7 e000 	ldrh.w	lr, [r7]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8003bfe:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8003c02:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8003c06:	f000 80b0 	beq.w	8003d6a <arm_cfft_radix8by2_f32+0x182>
 8003c0a:	008b      	lsls	r3, r1, #2
 8003c0c:	3310      	adds	r3, #16
 8003c0e:	18c6      	adds	r6, r0, r3
 8003c10:	3210      	adds	r2, #16
 8003c12:	4443      	add	r3, r8
 8003c14:	f100 0510 	add.w	r5, r0, #16
 8003c18:	f108 0410 	add.w	r4, r8, #16
 8003c1c:	ed54 1a04 	vldr	s3, [r4, #-16]
 8003c20:	ed54 6a03 	vldr	s13, [r4, #-12]
 8003c24:	ed13 4a04 	vldr	s8, [r3, #-16]
 8003c28:	ed53 3a03 	vldr	s7, [r3, #-12]
 8003c2c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8003c30:	ed13 5a01 	vldr	s10, [r3, #-4]
 8003c34:	ed14 0a02 	vldr	s0, [r4, #-8]
 8003c38:	ed54 7a01 	vldr	s15, [r4, #-4]
 8003c3c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8003c40:	ed56 2a03 	vldr	s5, [r6, #-12]
 8003c44:	ed15 6a03 	vldr	s12, [r5, #-12]
 8003c48:	ed15 7a01 	vldr	s14, [r5, #-4]
 8003c4c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8003c50:	ed56 0a02 	vldr	s1, [r6, #-8]
 8003c54:	ed16 1a01 	vldr	s2, [r6, #-4]
 8003c58:	ed55 4a02 	vldr	s9, [r5, #-8]
 8003c5c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8003c60:	ee36 ba26 	vadd.f32	s22, s12, s13
 8003c64:	ee37 aa27 	vadd.f32	s20, s14, s15
 8003c68:	ee72 9a04 	vadd.f32	s19, s4, s8
 8003c6c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8003c70:	ee31 8a05 	vadd.f32	s16, s2, s10
 8003c74:	ee74 aa80 	vadd.f32	s21, s9, s0
 8003c78:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8003c7c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8003c80:	ed05 ba03 	vstr	s22, [r5, #-12]
 8003c84:	ed45 aa02 	vstr	s21, [r5, #-8]
 8003c88:	ed05 aa01 	vstr	s20, [r5, #-4]
 8003c8c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003c90:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003c94:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003c98:	ed46 8a02 	vstr	s17, [r6, #-8]
 8003c9c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8003ca0:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8003ca4:	ed12 6a03 	vldr	s12, [r2, #-12]
 8003ca8:	ed52 2a04 	vldr	s5, [r2, #-16]
 8003cac:	ee33 3a61 	vsub.f32	s6, s6, s3
 8003cb0:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003cb4:	ee26 8a86 	vmul.f32	s16, s13, s12
 8003cb8:	ee24 2a06 	vmul.f32	s4, s8, s12
 8003cbc:	ee63 1a22 	vmul.f32	s3, s6, s5
 8003cc0:	ee24 4a22 	vmul.f32	s8, s8, s5
 8003cc4:	ee23 3a06 	vmul.f32	s6, s6, s12
 8003cc8:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8003ccc:	ee23 6a86 	vmul.f32	s12, s7, s12
 8003cd0:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8003cd4:	ee36 6a04 	vadd.f32	s12, s12, s8
 8003cd8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003cdc:	ee72 3a63 	vsub.f32	s7, s4, s7
 8003ce0:	ee71 2a88 	vadd.f32	s5, s3, s16
 8003ce4:	ed44 6a03 	vstr	s13, [r4, #-12]
 8003ce8:	ed44 2a04 	vstr	s5, [r4, #-16]
 8003cec:	ed43 3a04 	vstr	s7, [r3, #-16]
 8003cf0:	ed03 6a03 	vstr	s12, [r3, #-12]
 8003cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cf8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8003cfc:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003d00:	ed52 5a02 	vldr	s11, [r2, #-8]
 8003d04:	ee35 6a41 	vsub.f32	s12, s10, s2
 8003d08:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8003d0c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003d10:	ee26 5a87 	vmul.f32	s10, s13, s14
 8003d14:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8003d18:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003d1c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8003d20:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003d24:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003d28:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003d2c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003d30:	ee74 5a23 	vadd.f32	s11, s8, s7
 8003d34:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003d38:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003d3c:	f1be 0e01 	subs.w	lr, lr, #1
 8003d40:	ed44 5a02 	vstr	s11, [r4, #-8]
 8003d44:	f105 0510 	add.w	r5, r5, #16
 8003d48:	ed44 7a01 	vstr	s15, [r4, #-4]
 8003d4c:	f106 0610 	add.w	r6, r6, #16
 8003d50:	ed03 6a02 	vstr	s12, [r3, #-8]
 8003d54:	ed03 7a01 	vstr	s14, [r3, #-4]
 8003d58:	f102 0210 	add.w	r2, r2, #16
 8003d5c:	f104 0410 	add.w	r4, r4, #16
 8003d60:	f103 0310 	add.w	r3, r3, #16
 8003d64:	f47f af5a 	bne.w	8003c1c <arm_cfft_radix8by2_f32+0x34>
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	b28c      	uxth	r4, r1
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	2302      	movs	r3, #2
 8003d70:	f000 fcc2 	bl	80046f8 <arm_radix8_butterfly_f32>
 8003d74:	ecbd 8b08 	vpop	{d8-d11}
 8003d78:	4621      	mov	r1, r4
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d84:	f000 bcb8 	b.w	80046f8 <arm_radix8_butterfly_f32>

08003d88 <arm_cfft_radix8by4_f32>:
 8003d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8c:	ed2d 8b0a 	vpush	{d8-d12}
 8003d90:	8802      	ldrh	r2, [r0, #0]
 8003d92:	ed91 6a00 	vldr	s12, [r1]
 8003d96:	b08f      	sub	sp, #60	; 0x3c
 8003d98:	460f      	mov	r7, r1
 8003d9a:	0852      	lsrs	r2, r2, #1
 8003d9c:	6841      	ldr	r1, [r0, #4]
 8003d9e:	900c      	str	r0, [sp, #48]	; 0x30
 8003da0:	0093      	lsls	r3, r2, #2
 8003da2:	4638      	mov	r0, r7
 8003da4:	4418      	add	r0, r3
 8003da6:	4606      	mov	r6, r0
 8003da8:	9009      	str	r0, [sp, #36]	; 0x24
 8003daa:	4418      	add	r0, r3
 8003dac:	edd0 6a00 	vldr	s13, [r0]
 8003db0:	ed96 4a00 	vldr	s8, [r6]
 8003db4:	edd6 2a01 	vldr	s5, [r6, #4]
 8003db8:	edd0 7a01 	vldr	s15, [r0, #4]
 8003dbc:	900a      	str	r0, [sp, #40]	; 0x28
 8003dbe:	ee76 5a26 	vadd.f32	s11, s12, s13
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	4625      	mov	r5, r4
 8003dc6:	441c      	add	r4, r3
 8003dc8:	edd4 4a00 	vldr	s9, [r4]
 8003dcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003dd0:	ed94 3a01 	vldr	s6, [r4, #4]
 8003dd4:	9401      	str	r4, [sp, #4]
 8003dd6:	ee35 5a84 	vadd.f32	s10, s11, s8
 8003dda:	4630      	mov	r0, r6
 8003ddc:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003de0:	463e      	mov	r6, r7
 8003de2:	ee15 ea10 	vmov	lr, s10
 8003de6:	ee76 6a66 	vsub.f32	s13, s12, s13
 8003dea:	f846 eb08 	str.w	lr, [r6], #8
 8003dee:	ee37 6a27 	vadd.f32	s12, s14, s15
 8003df2:	ed90 5a01 	vldr	s10, [r0, #4]
 8003df6:	9605      	str	r6, [sp, #20]
 8003df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dfc:	9e01      	ldr	r6, [sp, #4]
 8003dfe:	9707      	str	r7, [sp, #28]
 8003e00:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8003e04:	ed96 2a01 	vldr	s4, [r6, #4]
 8003e08:	ee36 7a05 	vadd.f32	s14, s12, s10
 8003e0c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8003e10:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8003e14:	ee77 7a84 	vadd.f32	s15, s15, s8
 8003e18:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	46a3      	mov	fp, r4
 8003e20:	ee37 7a02 	vadd.f32	s14, s14, s4
 8003e24:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003e28:	ee14 8a10 	vmov	r8, s8
 8003e2c:	46a4      	mov	ip, r4
 8003e2e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8003e32:	ed87 7a01 	vstr	s14, [r7, #4]
 8003e36:	f84b 8b08 	str.w	r8, [fp], #8
 8003e3a:	f1ac 0704 	sub.w	r7, ip, #4
 8003e3e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8003e42:	f101 0c08 	add.w	ip, r1, #8
 8003e46:	462c      	mov	r4, r5
 8003e48:	f8cd c010 	str.w	ip, [sp, #16]
 8003e4c:	ee15 ca90 	vmov	ip, s11
 8003e50:	ee36 6a62 	vsub.f32	s12, s12, s5
 8003e54:	f844 cb08 	str.w	ip, [r4], #8
 8003e58:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8003e5c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8003e60:	9406      	str	r4, [sp, #24]
 8003e62:	ee76 6a83 	vadd.f32	s13, s13, s6
 8003e66:	f101 0410 	add.w	r4, r1, #16
 8003e6a:	0852      	lsrs	r2, r2, #1
 8003e6c:	9402      	str	r4, [sp, #8]
 8003e6e:	ed85 6a01 	vstr	s12, [r5, #4]
 8003e72:	462c      	mov	r4, r5
 8003e74:	f101 0518 	add.w	r5, r1, #24
 8003e78:	920b      	str	r2, [sp, #44]	; 0x2c
 8003e7a:	46b2      	mov	sl, r6
 8003e7c:	9503      	str	r5, [sp, #12]
 8003e7e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003e82:	3a02      	subs	r2, #2
 8003e84:	ee16 5a90 	vmov	r5, s13
 8003e88:	46b6      	mov	lr, r6
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	0852      	lsrs	r2, r2, #1
 8003e8e:	f84a 5b08 	str.w	r5, [sl], #8
 8003e92:	f1a0 0604 	sub.w	r6, r0, #4
 8003e96:	edce 7a01 	vstr	s15, [lr, #4]
 8003e9a:	9208      	str	r2, [sp, #32]
 8003e9c:	f000 8130 	beq.w	8004100 <arm_cfft_radix8by4_f32+0x378>
 8003ea0:	4691      	mov	r9, r2
 8003ea2:	9a07      	ldr	r2, [sp, #28]
 8003ea4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003ea8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003eac:	3b08      	subs	r3, #8
 8003eae:	f102 0510 	add.w	r5, r2, #16
 8003eb2:	f101 0c20 	add.w	ip, r1, #32
 8003eb6:	f1a4 020c 	sub.w	r2, r4, #12
 8003eba:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8003ebe:	4433      	add	r3, r6
 8003ec0:	3410      	adds	r4, #16
 8003ec2:	4650      	mov	r0, sl
 8003ec4:	4659      	mov	r1, fp
 8003ec6:	ed55 3a02 	vldr	s7, [r5, #-8]
 8003eca:	ed14 5a02 	vldr	s10, [r4, #-8]
 8003ece:	ed91 7a00 	vldr	s14, [r1]
 8003ed2:	edd0 7a00 	vldr	s15, [r0]
 8003ed6:	ed54 5a01 	vldr	s11, [r4, #-4]
 8003eda:	ed15 4a01 	vldr	s8, [r5, #-4]
 8003ede:	edd0 6a01 	vldr	s13, [r0, #4]
 8003ee2:	ed91 6a01 	vldr	s12, [r1, #4]
 8003ee6:	ee33 8a85 	vadd.f32	s16, s7, s10
 8003eea:	ee34 0a25 	vadd.f32	s0, s8, s11
 8003eee:	ee78 4a07 	vadd.f32	s9, s16, s14
 8003ef2:	ee74 5a65 	vsub.f32	s11, s8, s11
 8003ef6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8003efa:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8003efe:	ed45 4a02 	vstr	s9, [r5, #-8]
 8003f02:	edd1 4a01 	vldr	s9, [r1, #4]
 8003f06:	ed90 4a01 	vldr	s8, [r0, #4]
 8003f0a:	ee70 4a24 	vadd.f32	s9, s0, s9
 8003f0e:	ee75 aa06 	vadd.f32	s21, s10, s12
 8003f12:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003f16:	ee35 aac7 	vsub.f32	s20, s11, s14
 8003f1a:	ed45 4a01 	vstr	s9, [r5, #-4]
 8003f1e:	edd6 1a00 	vldr	s3, [r6]
 8003f22:	edd7 0a00 	vldr	s1, [r7]
 8003f26:	ed92 4a02 	vldr	s8, [r2, #8]
 8003f2a:	edd3 3a02 	vldr	s7, [r3, #8]
 8003f2e:	ed93 2a01 	vldr	s4, [r3, #4]
 8003f32:	ed16 1a01 	vldr	s2, [r6, #-4]
 8003f36:	edd2 2a01 	vldr	s5, [r2, #4]
 8003f3a:	ed57 9a01 	vldr	s19, [r7, #-4]
 8003f3e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8003f42:	ee39 3a81 	vadd.f32	s6, s19, s2
 8003f46:	ee74 8a84 	vadd.f32	s17, s9, s8
 8003f4a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8003f4e:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8003f52:	ee7a aae6 	vsub.f32	s21, s21, s13
 8003f56:	ee18 aa90 	vmov	sl, s17
 8003f5a:	f847 a908 	str.w	sl, [r7], #-8
 8003f5e:	edd2 8a01 	vldr	s17, [r2, #4]
 8003f62:	ed93 9a01 	vldr	s18, [r3, #4]
 8003f66:	ee73 8a28 	vadd.f32	s17, s6, s17
 8003f6a:	ee3a aa27 	vadd.f32	s20, s20, s15
 8003f6e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003f72:	ee74 0a63 	vsub.f32	s1, s8, s7
 8003f76:	edc7 8a01 	vstr	s17, [r7, #4]
 8003f7a:	ed18 ba02 	vldr	s22, [r8, #-8]
 8003f7e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8003f82:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8003f86:	ee6a ba28 	vmul.f32	s23, s20, s17
 8003f8a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8003f8e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8003f92:	ee31 9a20 	vadd.f32	s18, s2, s1
 8003f96:	ee79 9a82 	vadd.f32	s19, s19, s4
 8003f9a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8003f9e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8003fa2:	ee69 baa8 	vmul.f32	s23, s19, s17
 8003fa6:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8003faa:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8003fae:	ee69 8a28 	vmul.f32	s17, s18, s17
 8003fb2:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8003fb6:	ee1c aa10 	vmov	sl, s24
 8003fba:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8003fbe:	f841 ab08 	str.w	sl, [r1], #8
 8003fc2:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8003fc6:	ee3b bacb 	vsub.f32	s22, s23, s22
 8003fca:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8003fce:	ee33 3a62 	vsub.f32	s6, s6, s5
 8003fd2:	ed01 aa01 	vstr	s20, [r1, #-4]
 8003fd6:	edc2 8a01 	vstr	s17, [r2, #4]
 8003fda:	ed82 ba02 	vstr	s22, [r2, #8]
 8003fde:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8003fe2:	ee74 3a63 	vsub.f32	s7, s8, s7
 8003fe6:	ee38 8a47 	vsub.f32	s16, s16, s14
 8003fea:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8003fee:	ee30 0a46 	vsub.f32	s0, s0, s12
 8003ff2:	ee33 3a42 	vsub.f32	s6, s6, s4
 8003ff6:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003ffa:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003ffe:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8004002:	ee63 8a04 	vmul.f32	s17, s6, s8
 8004006:	ee28 aa24 	vmul.f32	s20, s16, s9
 800400a:	ee60 9a04 	vmul.f32	s19, s0, s8
 800400e:	ee28 8a04 	vmul.f32	s16, s16, s8
 8004012:	ee20 0a24 	vmul.f32	s0, s0, s9
 8004016:	ee63 3a84 	vmul.f32	s7, s7, s8
 800401a:	ee39 4a68 	vsub.f32	s8, s18, s17
 800401e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8004022:	ee14 aa10 	vmov	sl, s8
 8004026:	ee30 0a48 	vsub.f32	s0, s0, s16
 800402a:	ee63 4a24 	vmul.f32	s9, s6, s9
 800402e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8004032:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8004036:	ed04 0a01 	vstr	s0, [r4, #-4]
 800403a:	f846 a908 	str.w	sl, [r6], #-8
 800403e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004042:	ee35 7a87 	vadd.f32	s14, s11, s14
 8004046:	edc6 3a01 	vstr	s7, [r6, #4]
 800404a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800404e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004052:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8004056:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800405a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800405e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004062:	ee72 2a62 	vsub.f32	s5, s4, s5
 8004066:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800406a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800406e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8004072:	ee62 0a86 	vmul.f32	s1, s5, s12
 8004076:	ee66 6a86 	vmul.f32	s13, s13, s12
 800407a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800407e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8004082:	ee62 2a87 	vmul.f32	s5, s5, s14
 8004086:	ee21 1a07 	vmul.f32	s2, s2, s14
 800408a:	ee15 aa90 	vmov	sl, s11
 800408e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004092:	f840 ab08 	str.w	sl, [r0], #8
 8004096:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800409a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800409e:	f1b9 0901 	subs.w	r9, r9, #1
 80040a2:	ed40 7a01 	vstr	s15, [r0, #-4]
 80040a6:	f105 0508 	add.w	r5, r5, #8
 80040aa:	ed83 1a02 	vstr	s2, [r3, #8]
 80040ae:	edc3 2a01 	vstr	s5, [r3, #4]
 80040b2:	f108 0808 	add.w	r8, r8, #8
 80040b6:	f1a2 0208 	sub.w	r2, r2, #8
 80040ba:	f10c 0c10 	add.w	ip, ip, #16
 80040be:	f104 0408 	add.w	r4, r4, #8
 80040c2:	f10e 0e18 	add.w	lr, lr, #24
 80040c6:	f1a3 0308 	sub.w	r3, r3, #8
 80040ca:	f47f aefc 	bne.w	8003ec6 <arm_cfft_radix8by4_f32+0x13e>
 80040ce:	9908      	ldr	r1, [sp, #32]
 80040d0:	9802      	ldr	r0, [sp, #8]
 80040d2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80040d6:	00cb      	lsls	r3, r1, #3
 80040d8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80040dc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80040e0:	9102      	str	r1, [sp, #8]
 80040e2:	9905      	ldr	r1, [sp, #20]
 80040e4:	4419      	add	r1, r3
 80040e6:	9105      	str	r1, [sp, #20]
 80040e8:	9904      	ldr	r1, [sp, #16]
 80040ea:	4419      	add	r1, r3
 80040ec:	9104      	str	r1, [sp, #16]
 80040ee:	9906      	ldr	r1, [sp, #24]
 80040f0:	449b      	add	fp, r3
 80040f2:	4419      	add	r1, r3
 80040f4:	449a      	add	sl, r3
 80040f6:	9b03      	ldr	r3, [sp, #12]
 80040f8:	9106      	str	r1, [sp, #24]
 80040fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040fe:	9303      	str	r3, [sp, #12]
 8004100:	9a05      	ldr	r2, [sp, #20]
 8004102:	9806      	ldr	r0, [sp, #24]
 8004104:	ed92 4a00 	vldr	s8, [r2]
 8004108:	ed90 7a00 	vldr	s14, [r0]
 800410c:	ed9b 3a00 	vldr	s6, [fp]
 8004110:	edda 3a00 	vldr	s7, [sl]
 8004114:	edd2 4a01 	vldr	s9, [r2, #4]
 8004118:	edd0 6a01 	vldr	s13, [r0, #4]
 800411c:	ed9a 2a01 	vldr	s4, [sl, #4]
 8004120:	eddb 7a01 	vldr	s15, [fp, #4]
 8004124:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8004128:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800412a:	ee34 6a07 	vadd.f32	s12, s8, s14
 800412e:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8004132:	ee36 5a03 	vadd.f32	s10, s12, s6
 8004136:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800413a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800413e:	ee34 7a47 	vsub.f32	s14, s8, s14
 8004142:	ed82 5a00 	vstr	s10, [r2]
 8004146:	ed9b 5a01 	vldr	s10, [fp, #4]
 800414a:	edda 4a01 	vldr	s9, [sl, #4]
 800414e:	ee35 5a85 	vadd.f32	s10, s11, s10
 8004152:	ee37 4a27 	vadd.f32	s8, s14, s15
 8004156:	ee35 5a24 	vadd.f32	s10, s10, s9
 800415a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800415e:	ed82 5a01 	vstr	s10, [r2, #4]
 8004162:	9a04      	ldr	r2, [sp, #16]
 8004164:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8004168:	edd2 1a00 	vldr	s3, [r2]
 800416c:	edd2 2a01 	vldr	s5, [r2, #4]
 8004170:	9a02      	ldr	r2, [sp, #8]
 8004172:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004176:	ee36 6a43 	vsub.f32	s12, s12, s6
 800417a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800417e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004182:	ee65 2a22 	vmul.f32	s5, s10, s5
 8004186:	ee25 5a21 	vmul.f32	s10, s10, s3
 800418a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800418e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004192:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004196:	edcb 2a00 	vstr	s5, [fp]
 800419a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800419e:	ed92 4a01 	vldr	s8, [r2, #4]
 80041a2:	ed92 5a00 	vldr	s10, [r2]
 80041a6:	9a03      	ldr	r2, [sp, #12]
 80041a8:	ee36 6a63 	vsub.f32	s12, s12, s7
 80041ac:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80041b0:	ee66 4a05 	vmul.f32	s9, s12, s10
 80041b4:	ee25 5a85 	vmul.f32	s10, s11, s10
 80041b8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80041bc:	ee65 5a84 	vmul.f32	s11, s11, s8
 80041c0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80041c4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80041c8:	ee76 6a83 	vadd.f32	s13, s13, s6
 80041cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041d0:	ed80 6a01 	vstr	s12, [r0, #4]
 80041d4:	edc0 5a00 	vstr	s11, [r0]
 80041d8:	edd2 5a01 	vldr	s11, [r2, #4]
 80041dc:	9807      	ldr	r0, [sp, #28]
 80041de:	ee77 7a02 	vadd.f32	s15, s14, s4
 80041e2:	ee36 7ae3 	vsub.f32	s14, s13, s7
 80041e6:	edd2 6a00 	vldr	s13, [r2]
 80041ea:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80041ee:	ee67 6a26 	vmul.f32	s13, s14, s13
 80041f2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80041f6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80041fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80041fe:	ee36 7a07 	vadd.f32	s14, s12, s14
 8004202:	edca 7a01 	vstr	s15, [sl, #4]
 8004206:	ed8a 7a00 	vstr	s14, [sl]
 800420a:	6872      	ldr	r2, [r6, #4]
 800420c:	4621      	mov	r1, r4
 800420e:	2304      	movs	r3, #4
 8004210:	f000 fa72 	bl	80046f8 <arm_radix8_butterfly_f32>
 8004214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004216:	6872      	ldr	r2, [r6, #4]
 8004218:	4621      	mov	r1, r4
 800421a:	2304      	movs	r3, #4
 800421c:	f000 fa6c 	bl	80046f8 <arm_radix8_butterfly_f32>
 8004220:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004222:	6872      	ldr	r2, [r6, #4]
 8004224:	4621      	mov	r1, r4
 8004226:	2304      	movs	r3, #4
 8004228:	f000 fa66 	bl	80046f8 <arm_radix8_butterfly_f32>
 800422c:	6872      	ldr	r2, [r6, #4]
 800422e:	9801      	ldr	r0, [sp, #4]
 8004230:	4621      	mov	r1, r4
 8004232:	2304      	movs	r3, #4
 8004234:	b00f      	add	sp, #60	; 0x3c
 8004236:	ecbd 8b0a 	vpop	{d8-d12}
 800423a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423e:	f000 ba5b 	b.w	80046f8 <arm_radix8_butterfly_f32>
 8004242:	bf00      	nop

08004244 <arm_cfft_f32>:
 8004244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004248:	2a01      	cmp	r2, #1
 800424a:	4606      	mov	r6, r0
 800424c:	4617      	mov	r7, r2
 800424e:	460c      	mov	r4, r1
 8004250:	4698      	mov	r8, r3
 8004252:	8805      	ldrh	r5, [r0, #0]
 8004254:	d054      	beq.n	8004300 <arm_cfft_f32+0xbc>
 8004256:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800425a:	d04c      	beq.n	80042f6 <arm_cfft_f32+0xb2>
 800425c:	d916      	bls.n	800428c <arm_cfft_f32+0x48>
 800425e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004262:	d01a      	beq.n	800429a <arm_cfft_f32+0x56>
 8004264:	d95c      	bls.n	8004320 <arm_cfft_f32+0xdc>
 8004266:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800426a:	d044      	beq.n	80042f6 <arm_cfft_f32+0xb2>
 800426c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8004270:	d105      	bne.n	800427e <arm_cfft_f32+0x3a>
 8004272:	2301      	movs	r3, #1
 8004274:	6872      	ldr	r2, [r6, #4]
 8004276:	4629      	mov	r1, r5
 8004278:	4620      	mov	r0, r4
 800427a:	f000 fa3d 	bl	80046f8 <arm_radix8_butterfly_f32>
 800427e:	f1b8 0f00 	cmp.w	r8, #0
 8004282:	d111      	bne.n	80042a8 <arm_cfft_f32+0x64>
 8004284:	2f01      	cmp	r7, #1
 8004286:	d016      	beq.n	80042b6 <arm_cfft_f32+0x72>
 8004288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800428c:	2d20      	cmp	r5, #32
 800428e:	d032      	beq.n	80042f6 <arm_cfft_f32+0xb2>
 8004290:	d94a      	bls.n	8004328 <arm_cfft_f32+0xe4>
 8004292:	2d40      	cmp	r5, #64	; 0x40
 8004294:	d0ed      	beq.n	8004272 <arm_cfft_f32+0x2e>
 8004296:	2d80      	cmp	r5, #128	; 0x80
 8004298:	d1f1      	bne.n	800427e <arm_cfft_f32+0x3a>
 800429a:	4621      	mov	r1, r4
 800429c:	4630      	mov	r0, r6
 800429e:	f7ff fca3 	bl	8003be8 <arm_cfft_radix8by2_f32>
 80042a2:	f1b8 0f00 	cmp.w	r8, #0
 80042a6:	d0ed      	beq.n	8004284 <arm_cfft_f32+0x40>
 80042a8:	68b2      	ldr	r2, [r6, #8]
 80042aa:	89b1      	ldrh	r1, [r6, #12]
 80042ac:	4620      	mov	r0, r4
 80042ae:	f7fb ff8b 	bl	80001c8 <arm_bitreversal_32>
 80042b2:	2f01      	cmp	r7, #1
 80042b4:	d1e8      	bne.n	8004288 <arm_cfft_f32+0x44>
 80042b6:	ee07 5a90 	vmov	s15, r5
 80042ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80042c6:	2d00      	cmp	r5, #0
 80042c8:	d0de      	beq.n	8004288 <arm_cfft_f32+0x44>
 80042ca:	f104 0108 	add.w	r1, r4, #8
 80042ce:	2300      	movs	r3, #0
 80042d0:	3301      	adds	r3, #1
 80042d2:	429d      	cmp	r5, r3
 80042d4:	f101 0108 	add.w	r1, r1, #8
 80042d8:	ed11 7a04 	vldr	s14, [r1, #-16]
 80042dc:	ed51 7a03 	vldr	s15, [r1, #-12]
 80042e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80042e4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80042e8:	ed01 7a04 	vstr	s14, [r1, #-16]
 80042ec:	ed41 7a03 	vstr	s15, [r1, #-12]
 80042f0:	d1ee      	bne.n	80042d0 <arm_cfft_f32+0x8c>
 80042f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f6:	4621      	mov	r1, r4
 80042f8:	4630      	mov	r0, r6
 80042fa:	f7ff fd45 	bl	8003d88 <arm_cfft_radix8by4_f32>
 80042fe:	e7be      	b.n	800427e <arm_cfft_f32+0x3a>
 8004300:	b1ad      	cbz	r5, 800432e <arm_cfft_f32+0xea>
 8004302:	f101 030c 	add.w	r3, r1, #12
 8004306:	2200      	movs	r2, #0
 8004308:	ed53 7a02 	vldr	s15, [r3, #-8]
 800430c:	3201      	adds	r2, #1
 800430e:	eef1 7a67 	vneg.f32	s15, s15
 8004312:	4295      	cmp	r5, r2
 8004314:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004318:	f103 0308 	add.w	r3, r3, #8
 800431c:	d1f4      	bne.n	8004308 <arm_cfft_f32+0xc4>
 800431e:	e79a      	b.n	8004256 <arm_cfft_f32+0x12>
 8004320:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8004324:	d0a5      	beq.n	8004272 <arm_cfft_f32+0x2e>
 8004326:	e7aa      	b.n	800427e <arm_cfft_f32+0x3a>
 8004328:	2d10      	cmp	r5, #16
 800432a:	d0b6      	beq.n	800429a <arm_cfft_f32+0x56>
 800432c:	e7a7      	b.n	800427e <arm_cfft_f32+0x3a>
 800432e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004332:	d894      	bhi.n	800425e <arm_cfft_f32+0x1a>
 8004334:	e7aa      	b.n	800428c <arm_cfft_f32+0x48>
 8004336:	bf00      	nop

08004338 <arm_cmplx_mult_real_f32>:
 8004338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433a:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800433e:	d04c      	beq.n	80043da <arm_cmplx_mult_real_f32+0xa2>
 8004340:	f100 0520 	add.w	r5, r0, #32
 8004344:	f101 0610 	add.w	r6, r1, #16
 8004348:	f102 0420 	add.w	r4, r2, #32
 800434c:	4677      	mov	r7, lr
 800434e:	ed56 3a04 	vldr	s7, [r6, #-16]
 8004352:	ed16 7a03 	vldr	s14, [r6, #-12]
 8004356:	ed56 7a02 	vldr	s15, [r6, #-8]
 800435a:	ed16 3a01 	vldr	s6, [r6, #-4]
 800435e:	ed15 4a07 	vldr	s8, [r5, #-28]	; 0xffffffe4
 8004362:	ed55 4a06 	vldr	s9, [r5, #-24]	; 0xffffffe8
 8004366:	ed15 2a05 	vldr	s4, [r5, #-20]	; 0xffffffec
 800436a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800436e:	ed15 5a04 	vldr	s10, [r5, #-16]
 8004372:	ed15 6a01 	vldr	s12, [r5, #-4]
 8004376:	ed55 2a03 	vldr	s5, [r5, #-12]
 800437a:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800437e:	ee67 4a24 	vmul.f32	s9, s14, s9
 8004382:	ee27 5a85 	vmul.f32	s10, s15, s10
 8004386:	ee23 4a84 	vmul.f32	s8, s7, s8
 800438a:	ee27 7a02 	vmul.f32	s14, s14, s4
 800438e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8004392:	ee65 5a83 	vmul.f32	s11, s11, s6
 8004396:	ee26 6a03 	vmul.f32	s12, s12, s6
 800439a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800439e:	3f01      	subs	r7, #1
 80043a0:	ed04 4a07 	vstr	s8, [r4, #-28]	; 0xffffffe4
 80043a4:	ed44 4a06 	vstr	s9, [r4, #-24]	; 0xffffffe8
 80043a8:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 80043ac:	ed04 5a04 	vstr	s10, [r4, #-16]
 80043b0:	ed44 7a03 	vstr	s15, [r4, #-12]
 80043b4:	ed44 5a02 	vstr	s11, [r4, #-8]
 80043b8:	ed04 6a01 	vstr	s12, [r4, #-4]
 80043bc:	ed44 6a08 	vstr	s13, [r4, #-32]	; 0xffffffe0
 80043c0:	f106 0610 	add.w	r6, r6, #16
 80043c4:	f105 0520 	add.w	r5, r5, #32
 80043c8:	f104 0420 	add.w	r4, r4, #32
 80043cc:	d1bf      	bne.n	800434e <arm_cmplx_mult_real_f32+0x16>
 80043ce:	ea4f 144e 	mov.w	r4, lr, lsl #5
 80043d2:	eb01 110e 	add.w	r1, r1, lr, lsl #4
 80043d6:	4420      	add	r0, r4
 80043d8:	4422      	add	r2, r4
 80043da:	f013 0303 	ands.w	r3, r3, #3
 80043de:	d015      	beq.n	800440c <arm_cmplx_mult_real_f32+0xd4>
 80043e0:	3208      	adds	r2, #8
 80043e2:	3008      	adds	r0, #8
 80043e4:	ecf1 6a01 	vldmia	r1!, {s13}
 80043e8:	ed10 7a02 	vldr	s14, [r0, #-8]
 80043ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80043f0:	3b01      	subs	r3, #1
 80043f2:	ed02 7a02 	vstr	s14, [r2, #-8]
 80043f6:	ed50 7a01 	vldr	s15, [r0, #-4]
 80043fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80043fe:	f100 0008 	add.w	r0, r0, #8
 8004402:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004406:	f102 0208 	add.w	r2, r2, #8
 800440a:	d1eb      	bne.n	80043e4 <arm_cmplx_mult_real_f32+0xac>
 800440c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800440e:	bf00      	nop

08004410 <arm_cmplx_mult_cmplx_f32>:
 8004410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004412:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8004416:	d073      	beq.n	8004500 <arm_cmplx_mult_cmplx_f32+0xf0>
 8004418:	f100 0620 	add.w	r6, r0, #32
 800441c:	f101 0520 	add.w	r5, r1, #32
 8004420:	f102 0420 	add.w	r4, r2, #32
 8004424:	4677      	mov	r7, lr
 8004426:	ed16 7a08 	vldr	s14, [r6, #-32]	; 0xffffffe0
 800442a:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 800442e:	ed16 2a07 	vldr	s4, [r6, #-28]	; 0xffffffe4
 8004432:	ed55 2a07 	vldr	s5, [r5, #-28]	; 0xffffffe4
 8004436:	ed16 3a05 	vldr	s6, [r6, #-20]	; 0xffffffec
 800443a:	ed16 6a06 	vldr	s12, [r6, #-24]	; 0xffffffe8
 800443e:	ed55 7a06 	vldr	s15, [r5, #-24]	; 0xffffffe8
 8004442:	ed55 5a05 	vldr	s11, [r5, #-20]	; 0xffffffec
 8004446:	ed56 6a04 	vldr	s13, [r6, #-16]
 800444a:	ed55 3a04 	vldr	s7, [r5, #-16]
 800444e:	ee67 4a05 	vmul.f32	s9, s14, s10
 8004452:	ee22 4a22 	vmul.f32	s8, s4, s5
 8004456:	ee25 5a02 	vmul.f32	s10, s10, s4
 800445a:	ee27 7a22 	vmul.f32	s14, s14, s5
 800445e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8004462:	ee66 4a27 	vmul.f32	s9, s12, s15
 8004466:	ee26 6a25 	vmul.f32	s12, s12, s11
 800446a:	ee67 7a83 	vmul.f32	s15, s15, s6
 800446e:	ee65 5a83 	vmul.f32	s11, s11, s6
 8004472:	ee37 7a05 	vadd.f32	s14, s14, s10
 8004476:	ed04 4a08 	vstr	s8, [r4, #-32]	; 0xffffffe0
 800447a:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800447e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004482:	ed16 5a03 	vldr	s10, [r6, #-12]
 8004486:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 800448a:	ed15 7a03 	vldr	s14, [r5, #-12]
 800448e:	ed44 5a06 	vstr	s11, [r4, #-24]	; 0xffffffe8
 8004492:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8004496:	ed56 7a02 	vldr	s15, [r6, #-8]
 800449a:	ed15 6a02 	vldr	s12, [r5, #-8]
 800449e:	ed56 5a01 	vldr	s11, [r6, #-4]
 80044a2:	ed15 4a01 	vldr	s8, [r5, #-4]
 80044a6:	ee67 4a86 	vmul.f32	s9, s15, s12
 80044aa:	ee23 3a85 	vmul.f32	s6, s7, s10
 80044ae:	ee26 6a25 	vmul.f32	s12, s12, s11
 80044b2:	ee25 5a07 	vmul.f32	s10, s10, s14
 80044b6:	ee65 5a84 	vmul.f32	s11, s11, s8
 80044ba:	ee26 7a87 	vmul.f32	s14, s13, s14
 80044be:	ee67 7a84 	vmul.f32	s15, s15, s8
 80044c2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80044c6:	ee37 7a03 	vadd.f32	s14, s14, s6
 80044ca:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80044ce:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80044d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80044d6:	3f01      	subs	r7, #1
 80044d8:	ed44 6a04 	vstr	s13, [r4, #-16]
 80044dc:	ed04 7a03 	vstr	s14, [r4, #-12]
 80044e0:	ed44 5a02 	vstr	s11, [r4, #-8]
 80044e4:	ed44 7a01 	vstr	s15, [r4, #-4]
 80044e8:	f106 0620 	add.w	r6, r6, #32
 80044ec:	f105 0520 	add.w	r5, r5, #32
 80044f0:	f104 0420 	add.w	r4, r4, #32
 80044f4:	d197      	bne.n	8004426 <arm_cmplx_mult_cmplx_f32+0x16>
 80044f6:	ea4f 144e 	mov.w	r4, lr, lsl #5
 80044fa:	4420      	add	r0, r4
 80044fc:	4421      	add	r1, r4
 80044fe:	4422      	add	r2, r4
 8004500:	f013 0303 	ands.w	r3, r3, #3
 8004504:	d022      	beq.n	800454c <arm_cmplx_mult_cmplx_f32+0x13c>
 8004506:	3008      	adds	r0, #8
 8004508:	3108      	adds	r1, #8
 800450a:	3208      	adds	r2, #8
 800450c:	ed50 7a02 	vldr	s15, [r0, #-8]
 8004510:	ed11 7a02 	vldr	s14, [r1, #-8]
 8004514:	ed50 6a01 	vldr	s13, [r0, #-4]
 8004518:	ed51 5a01 	vldr	s11, [r1, #-4]
 800451c:	ee27 6a87 	vmul.f32	s12, s15, s14
 8004520:	ee26 7a87 	vmul.f32	s14, s13, s14
 8004524:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004528:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800452c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004530:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004534:	3b01      	subs	r3, #1
 8004536:	ed42 6a02 	vstr	s13, [r2, #-8]
 800453a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800453e:	f100 0008 	add.w	r0, r0, #8
 8004542:	f101 0108 	add.w	r1, r1, #8
 8004546:	f102 0208 	add.w	r2, r2, #8
 800454a:	d1df      	bne.n	800450c <arm_cmplx_mult_cmplx_f32+0xfc>
 800454c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800454e:	bf00      	nop

08004550 <arm_sin_f32>:
 8004550:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004558:	d42c      	bmi.n	80045b4 <arm_sin_f32+0x64>
 800455a:	eddf 7a20 	vldr	s15, [pc, #128]	; 80045dc <arm_sin_f32+0x8c>
 800455e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004562:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004566:	d432      	bmi.n	80045ce <arm_sin_f32+0x7e>
 8004568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800456c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80045e0 <arm_sin_f32+0x90>
 8004570:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <arm_sin_f32+0x94>)
 8004572:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800457a:	ee20 0a26 	vmul.f32	s0, s0, s13
 800457e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8004582:	ee17 3a90 	vmov	r3, s15
 8004586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004592:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8004596:	ee70 7a67 	vsub.f32	s15, s0, s15
 800459a:	edd1 6a01 	vldr	s13, [r1, #4]
 800459e:	ed91 0a00 	vldr	s0, [r1]
 80045a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80045aa:	ee27 0a00 	vmul.f32	s0, s14, s0
 80045ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80045b2:	4770      	bx	lr
 80045b4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80045e8 <arm_sin_f32+0x98>
 80045b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80045bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c0:	da0b      	bge.n	80045da <arm_sin_f32+0x8a>
 80045c2:	eddf 7a06 	vldr	s15, [pc, #24]	; 80045dc <arm_sin_f32+0x8c>
 80045c6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80045ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80045ce:	ee17 3a90 	vmov	r3, s15
 80045d2:	3b01      	subs	r3, #1
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	e7c6      	b.n	8004568 <arm_sin_f32+0x18>
 80045da:	4770      	bx	lr
 80045dc:	3e22f983 	.word	0x3e22f983
 80045e0:	44000000 	.word	0x44000000
 80045e4:	0800a87c 	.word	0x0800a87c
 80045e8:	b44c02cd 	.word	0xb44c02cd

080045ec <arm_cos_f32>:
 80045ec:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004660 <arm_cos_f32+0x74>
 80045f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80045f4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80045f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80045fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004604:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004608:	d504      	bpl.n	8004614 <arm_cos_f32+0x28>
 800460a:	ee17 3a90 	vmov	r3, s15
 800460e:	3b01      	subs	r3, #1
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004618:	eddf 6a12 	vldr	s13, [pc, #72]	; 8004664 <arm_cos_f32+0x78>
 800461c:	4a12      	ldr	r2, [pc, #72]	; (8004668 <arm_cos_f32+0x7c>)
 800461e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004626:	ee20 0a26 	vmul.f32	s0, s0, s13
 800462a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800462e:	ee17 3a90 	vmov	r3, s15
 8004632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8004642:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004646:	edd1 6a01 	vldr	s13, [r1, #4]
 800464a:	ed91 0a00 	vldr	s0, [r1]
 800464e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004652:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004656:	ee27 0a00 	vmul.f32	s0, s14, s0
 800465a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800465e:	4770      	bx	lr
 8004660:	3e22f983 	.word	0x3e22f983
 8004664:	44000000 	.word	0x44000000
 8004668:	0800a87c 	.word	0x0800a87c

0800466c <arm_add_f32>:
 800466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8004672:	d033      	beq.n	80046dc <arm_add_f32+0x70>
 8004674:	f100 0610 	add.w	r6, r0, #16
 8004678:	f101 0510 	add.w	r5, r1, #16
 800467c:	f102 0410 	add.w	r4, r2, #16
 8004680:	4677      	mov	r7, lr
 8004682:	ed16 6a03 	vldr	s12, [r6, #-12]
 8004686:	ed15 4a03 	vldr	s8, [r5, #-12]
 800468a:	ed56 6a02 	vldr	s13, [r6, #-8]
 800468e:	ed55 4a02 	vldr	s9, [r5, #-8]
 8004692:	ed16 7a01 	vldr	s14, [r6, #-4]
 8004696:	ed15 5a01 	vldr	s10, [r5, #-4]
 800469a:	ed56 7a04 	vldr	s15, [r6, #-16]
 800469e:	ed55 5a04 	vldr	s11, [r5, #-16]
 80046a2:	ee36 6a04 	vadd.f32	s12, s12, s8
 80046a6:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80046aa:	ee37 7a05 	vadd.f32	s14, s14, s10
 80046ae:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80046b2:	3f01      	subs	r7, #1
 80046b4:	ed04 6a03 	vstr	s12, [r4, #-12]
 80046b8:	ed44 6a02 	vstr	s13, [r4, #-8]
 80046bc:	ed04 7a01 	vstr	s14, [r4, #-4]
 80046c0:	ed44 7a04 	vstr	s15, [r4, #-16]
 80046c4:	f106 0610 	add.w	r6, r6, #16
 80046c8:	f105 0510 	add.w	r5, r5, #16
 80046cc:	f104 0410 	add.w	r4, r4, #16
 80046d0:	d1d7      	bne.n	8004682 <arm_add_f32+0x16>
 80046d2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80046d6:	4420      	add	r0, r4
 80046d8:	4421      	add	r1, r4
 80046da:	4422      	add	r2, r4
 80046dc:	f013 0303 	ands.w	r3, r3, #3
 80046e0:	d009      	beq.n	80046f6 <arm_add_f32+0x8a>
 80046e2:	ecf0 7a01 	vldmia	r0!, {s15}
 80046e6:	ecb1 7a01 	vldmia	r1!, {s14}
 80046ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046ee:	3b01      	subs	r3, #1
 80046f0:	ece2 7a01 	vstmia	r2!, {s15}
 80046f4:	d1f5      	bne.n	80046e2 <arm_add_f32+0x76>
 80046f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046f8 <arm_radix8_butterfly_f32>:
 80046f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fc:	ed2d 8b10 	vpush	{d8-d15}
 8004700:	461c      	mov	r4, r3
 8004702:	b09d      	sub	sp, #116	; 0x74
 8004704:	4603      	mov	r3, r0
 8004706:	3304      	adds	r3, #4
 8004708:	ed9f bac4 	vldr	s22, [pc, #784]	; 8004a1c <arm_radix8_butterfly_f32+0x324>
 800470c:	9019      	str	r0, [sp, #100]	; 0x64
 800470e:	921a      	str	r2, [sp, #104]	; 0x68
 8004710:	468b      	mov	fp, r1
 8004712:	931b      	str	r3, [sp, #108]	; 0x6c
 8004714:	468a      	mov	sl, r1
 8004716:	46a1      	mov	r9, r4
 8004718:	4607      	mov	r7, r0
 800471a:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800471e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004722:	eb03 0508 	add.w	r5, r3, r8
 8004726:	195c      	adds	r4, r3, r5
 8004728:	00de      	lsls	r6, r3, #3
 800472a:	191a      	adds	r2, r3, r4
 800472c:	9600      	str	r6, [sp, #0]
 800472e:	1898      	adds	r0, r3, r2
 8004730:	4619      	mov	r1, r3
 8004732:	9e00      	ldr	r6, [sp, #0]
 8004734:	9311      	str	r3, [sp, #68]	; 0x44
 8004736:	4401      	add	r1, r0
 8004738:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800473c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8004740:	19be      	adds	r6, r7, r6
 8004742:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8004746:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800474a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800474e:	9f00      	ldr	r7, [sp, #0]
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	eb06 0e07 	add.w	lr, r6, r7
 8004756:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004758:	9302      	str	r3, [sp, #8]
 800475a:	3204      	adds	r2, #4
 800475c:	3104      	adds	r1, #4
 800475e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004762:	f04f 0c00 	mov.w	ip, #0
 8004766:	edde 7a00 	vldr	s15, [lr]
 800476a:	edd6 6a00 	vldr	s13, [r6]
 800476e:	ed95 2a00 	vldr	s4, [r5]
 8004772:	ed17 aa01 	vldr	s20, [r7, #-4]
 8004776:	edd4 4a00 	vldr	s9, [r4]
 800477a:	ed90 5a00 	vldr	s10, [r0]
 800477e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004782:	ed51 0a01 	vldr	s1, [r1, #-4]
 8004786:	ee77 8a85 	vadd.f32	s17, s15, s10
 800478a:	ee76 3a87 	vadd.f32	s7, s13, s14
 800478e:	ee32 4a20 	vadd.f32	s8, s4, s1
 8004792:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8004796:	ee33 6a84 	vadd.f32	s12, s7, s8
 800479a:	ee73 5a28 	vadd.f32	s11, s6, s17
 800479e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80047a2:	ee75 6a86 	vadd.f32	s13, s11, s12
 80047a6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80047aa:	ed47 6a01 	vstr	s13, [r7, #-4]
 80047ae:	edc4 5a00 	vstr	s11, [r4]
 80047b2:	ed92 9a00 	vldr	s18, [r2]
 80047b6:	ed95 1a01 	vldr	s2, [r5, #4]
 80047ba:	edd6 5a01 	vldr	s11, [r6, #4]
 80047be:	ed91 6a00 	vldr	s12, [r1]
 80047c2:	edd7 2a00 	vldr	s5, [r7]
 80047c6:	edd4 1a01 	vldr	s3, [r4, #4]
 80047ca:	edde 6a01 	vldr	s13, [lr, #4]
 80047ce:	edd0 9a01 	vldr	s19, [r0, #4]
 80047d2:	ee72 0a60 	vsub.f32	s1, s4, s1
 80047d6:	ee71 aa46 	vsub.f32	s21, s2, s12
 80047da:	ee35 2ac9 	vsub.f32	s4, s11, s18
 80047de:	ee37 0a60 	vsub.f32	s0, s14, s1
 80047e2:	ee32 8a2a 	vadd.f32	s16, s4, s21
 80047e6:	ee37 7a20 	vadd.f32	s14, s14, s1
 80047ea:	ee32 2a6a 	vsub.f32	s4, s4, s21
 80047ee:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80047f2:	ee75 5a89 	vadd.f32	s11, s11, s18
 80047f6:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80047fa:	ee7a 4a64 	vsub.f32	s9, s20, s9
 80047fe:	ee31 6a06 	vadd.f32	s12, s2, s12
 8004802:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8004806:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800480a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800480e:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8004812:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8004816:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800481a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800481e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8004822:	ee36 0a88 	vadd.f32	s0, s13, s16
 8004826:	ee75 8a86 	vadd.f32	s17, s11, s12
 800482a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800482e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004832:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8004836:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800483a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800483e:	ee75 4a27 	vadd.f32	s9, s10, s15
 8004842:	ee71 5a49 	vsub.f32	s11, s2, s18
 8004846:	ee31 2a09 	vadd.f32	s4, s2, s18
 800484a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800484e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8004852:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8004856:	ee73 0a06 	vadd.f32	s1, s6, s12
 800485a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800485e:	ee36 5a87 	vadd.f32	s10, s13, s14
 8004862:	ee32 8a28 	vadd.f32	s16, s4, s17
 8004866:	ee33 6a46 	vsub.f32	s12, s6, s12
 800486a:	ee34 4a25 	vadd.f32	s8, s8, s11
 800486e:	ee33 3a80 	vadd.f32	s6, s7, s0
 8004872:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004876:	ee71 5a64 	vsub.f32	s11, s2, s9
 800487a:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800487e:	ee32 2a68 	vsub.f32	s4, s4, s17
 8004882:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8004886:	ee74 4a81 	vadd.f32	s9, s9, s2
 800488a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800488e:	44dc      	add	ip, fp
 8004890:	45e2      	cmp	sl, ip
 8004892:	ed87 8a00 	vstr	s16, [r7]
 8004896:	ed84 2a01 	vstr	s4, [r4, #4]
 800489a:	441f      	add	r7, r3
 800489c:	edce 0a00 	vstr	s1, [lr]
 80048a0:	441c      	add	r4, r3
 80048a2:	ed80 6a00 	vstr	s12, [r0]
 80048a6:	edce 1a01 	vstr	s3, [lr, #4]
 80048aa:	ed80 4a01 	vstr	s8, [r0, #4]
 80048ae:	449e      	add	lr, r3
 80048b0:	ed86 3a00 	vstr	s6, [r6]
 80048b4:	4418      	add	r0, r3
 80048b6:	ed41 3a01 	vstr	s7, [r1, #-4]
 80048ba:	ed02 5a01 	vstr	s10, [r2, #-4]
 80048be:	ed85 7a00 	vstr	s14, [r5]
 80048c2:	edc6 5a01 	vstr	s11, [r6, #4]
 80048c6:	edc1 4a00 	vstr	s9, [r1]
 80048ca:	441e      	add	r6, r3
 80048cc:	edc2 6a00 	vstr	s13, [r2]
 80048d0:	4419      	add	r1, r3
 80048d2:	edc5 7a01 	vstr	s15, [r5, #4]
 80048d6:	441a      	add	r2, r3
 80048d8:	441d      	add	r5, r3
 80048da:	f63f af44 	bhi.w	8004766 <arm_radix8_butterfly_f32+0x6e>
 80048de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80048e0:	2a07      	cmp	r2, #7
 80048e2:	f240 81f5 	bls.w	8004cd0 <arm_radix8_butterfly_f32+0x5d8>
 80048e6:	f108 0101 	add.w	r1, r8, #1
 80048ea:	188f      	adds	r7, r1, r2
 80048ec:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 80048f0:	19d6      	adds	r6, r2, r7
 80048f2:	eb08 0c09 	add.w	ip, r8, r9
 80048f6:	1994      	adds	r4, r2, r6
 80048f8:	eb0c 0e09 	add.w	lr, ip, r9
 80048fc:	4610      	mov	r0, r2
 80048fe:	9701      	str	r7, [sp, #4]
 8004900:	4420      	add	r0, r4
 8004902:	eb0e 0709 	add.w	r7, lr, r9
 8004906:	1815      	adds	r5, r2, r0
 8004908:	eb07 0209 	add.w	r2, r7, r9
 800490c:	9203      	str	r2, [sp, #12]
 800490e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004910:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004914:	9117      	str	r1, [sp, #92]	; 0x5c
 8004916:	440a      	add	r2, r1
 8004918:	9900      	ldr	r1, [sp, #0]
 800491a:	3108      	adds	r1, #8
 800491c:	9100      	str	r1, [sp, #0]
 800491e:	9902      	ldr	r1, [sp, #8]
 8004920:	3108      	adds	r1, #8
 8004922:	9102      	str	r1, [sp, #8]
 8004924:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004926:	00ff      	lsls	r7, r7, #3
 8004928:	9715      	str	r7, [sp, #84]	; 0x54
 800492a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800492e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004932:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8004936:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004938:	9903      	ldr	r1, [sp, #12]
 800493a:	19d7      	adds	r7, r2, r7
 800493c:	00c9      	lsls	r1, r1, #3
 800493e:	9114      	str	r1, [sp, #80]	; 0x50
 8004940:	9710      	str	r7, [sp, #64]	; 0x40
 8004942:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004944:	9f00      	ldr	r7, [sp, #0]
 8004946:	19cf      	adds	r7, r1, r7
 8004948:	970d      	str	r7, [sp, #52]	; 0x34
 800494a:	9f02      	ldr	r7, [sp, #8]
 800494c:	19cf      	adds	r7, r1, r7
 800494e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8004952:	970c      	str	r7, [sp, #48]	; 0x30
 8004954:	9f01      	ldr	r7, [sp, #4]
 8004956:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800495a:	3504      	adds	r5, #4
 800495c:	3004      	adds	r0, #4
 800495e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8004962:	9508      	str	r5, [sp, #32]
 8004964:	9009      	str	r0, [sp, #36]	; 0x24
 8004966:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8004968:	981a      	ldr	r0, [sp, #104]	; 0x68
 800496a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800496e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004972:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8004976:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004978:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800497c:	1945      	adds	r5, r0, r5
 800497e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004982:	460f      	mov	r7, r1
 8004984:	3404      	adds	r4, #4
 8004986:	4641      	mov	r1, r8
 8004988:	1841      	adds	r1, r0, r1
 800498a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800498e:	940a      	str	r4, [sp, #40]	; 0x28
 8004990:	eb00 0c06 	add.w	ip, r0, r6
 8004994:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004998:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800499a:	9506      	str	r5, [sp, #24]
 800499c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800499e:	9105      	str	r1, [sp, #20]
 80049a0:	4639      	mov	r1, r7
 80049a2:	1905      	adds	r5, r0, r4
 80049a4:	3108      	adds	r1, #8
 80049a6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80049a8:	9507      	str	r5, [sp, #28]
 80049aa:	910f      	str	r1, [sp, #60]	; 0x3c
 80049ac:	ea4f 1509 	mov.w	r5, r9, lsl #4
 80049b0:	2101      	movs	r1, #1
 80049b2:	eb00 0e06 	add.w	lr, r0, r6
 80049b6:	9518      	str	r5, [sp, #96]	; 0x60
 80049b8:	9404      	str	r4, [sp, #16]
 80049ba:	9103      	str	r1, [sp, #12]
 80049bc:	4620      	mov	r0, r4
 80049be:	4689      	mov	r9, r1
 80049c0:	9e06      	ldr	r6, [sp, #24]
 80049c2:	ed90 fa00 	vldr	s30, [r0]
 80049c6:	edd6 7a01 	vldr	s15, [r6, #4]
 80049ca:	edd0 ba01 	vldr	s23, [r0, #4]
 80049ce:	edcd 7a00 	vstr	s15, [sp]
 80049d2:	a80d      	add	r0, sp, #52	; 0x34
 80049d4:	edde 7a01 	vldr	s15, [lr, #4]
 80049d8:	9c05      	ldr	r4, [sp, #20]
 80049da:	9d07      	ldr	r5, [sp, #28]
 80049dc:	edd2 fa00 	vldr	s31, [r2]
 80049e0:	ed92 ca01 	vldr	s24, [r2, #4]
 80049e4:	edcd 7a01 	vstr	s15, [sp, #4]
 80049e8:	c807      	ldmia	r0, {r0, r1, r2}
 80049ea:	eddc 7a01 	vldr	s15, [ip, #4]
 80049ee:	edd4 ea00 	vldr	s29, [r4]
 80049f2:	ed95 ea00 	vldr	s28, [r5]
 80049f6:	edd6 da00 	vldr	s27, [r6]
 80049fa:	edd4 aa01 	vldr	s21, [r4, #4]
 80049fe:	ed95 aa01 	vldr	s20, [r5, #4]
 8004a02:	ed9e da00 	vldr	s26, [lr]
 8004a06:	eddc ca00 	vldr	s25, [ip]
 8004a0a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a0e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004a10:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004a12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004a14:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004a16:	edcd 7a02 	vstr	s15, [sp, #8]
 8004a1a:	e001      	b.n	8004a20 <arm_radix8_butterfly_f32+0x328>
 8004a1c:	3f3504f3 	.word	0x3f3504f3
 8004a20:	ed16 6a01 	vldr	s12, [r6, #-4]
 8004a24:	ed91 5a00 	vldr	s10, [r1]
 8004a28:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004a2c:	edd5 7a00 	vldr	s15, [r5]
 8004a30:	ed18 7a01 	vldr	s14, [r8, #-4]
 8004a34:	edd2 3a00 	vldr	s7, [r2]
 8004a38:	ed94 3a00 	vldr	s6, [r4]
 8004a3c:	ed90 2a00 	vldr	s4, [r0]
 8004a40:	ed92 0a01 	vldr	s0, [r2, #4]
 8004a44:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004a48:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004a4c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8004a50:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004a54:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004a58:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004a5c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004a60:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004a64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a68:	ed82 6a00 	vstr	s12, [r2]
 8004a6c:	edd5 8a01 	vldr	s17, [r5, #4]
 8004a70:	ed90 9a01 	vldr	s18, [r0, #4]
 8004a74:	edd6 2a00 	vldr	s5, [r6]
 8004a78:	ed98 7a00 	vldr	s14, [r8]
 8004a7c:	edd4 0a01 	vldr	s1, [r4, #4]
 8004a80:	ed91 6a01 	vldr	s12, [r1, #4]
 8004a84:	edd7 5a00 	vldr	s11, [r7]
 8004a88:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004a8c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004a90:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004a94:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8004a98:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004a9c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004aa0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004aa4:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004aa8:	ee75 8a69 	vsub.f32	s17, s10, s19
 8004aac:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004ab0:	ee35 5a29 	vadd.f32	s10, s10, s19
 8004ab4:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004ab8:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004abc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8004ac0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004ac4:	ee32 9a08 	vadd.f32	s18, s4, s16
 8004ac8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004acc:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004ad0:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004ad4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004ad8:	ee32 1a87 	vadd.f32	s2, s5, s14
 8004adc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004ae0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004ae4:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004ae8:	ee73 0a29 	vadd.f32	s1, s6, s19
 8004aec:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004af0:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004af4:	ee32 7a64 	vsub.f32	s14, s4, s9
 8004af8:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8004afc:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004b00:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004b04:	ee75 8a85 	vadd.f32	s17, s11, s10
 8004b08:	ee74 3a22 	vadd.f32	s7, s8, s5
 8004b0c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8004b10:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004b14:	ee79 1a41 	vsub.f32	s3, s18, s2
 8004b18:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8004b1c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8004b20:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004b24:	ee74 4a82 	vadd.f32	s9, s9, s4
 8004b28:	ee30 4a60 	vsub.f32	s8, s0, s1
 8004b2c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8004b30:	ee30 0a80 	vadd.f32	s0, s1, s0
 8004b34:	ee77 9a85 	vadd.f32	s19, s15, s10
 8004b38:	ee33 6a06 	vadd.f32	s12, s6, s12
 8004b3c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004b40:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8004b44:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8004b48:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8004b4c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8004b50:	ee39 1a01 	vadd.f32	s2, s18, s2
 8004b54:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8004b58:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8004b5c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8004b60:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8004b64:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8004b68:	ee35 3a03 	vadd.f32	s6, s10, s6
 8004b6c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8004b70:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8004b74:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8004b78:	ed9d 4a02 	vldr	s8, [sp, #8]
 8004b7c:	ed82 1a01 	vstr	s2, [r2, #4]
 8004b80:	ee77 3a63 	vsub.f32	s7, s14, s7
 8004b84:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004b88:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004b8c:	ed81 3a00 	vstr	s6, [r1]
 8004b90:	ee30 9a89 	vadd.f32	s18, s1, s18
 8004b94:	ee32 2a05 	vadd.f32	s4, s4, s10
 8004b98:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8004b9c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8004ba0:	ee67 2a22 	vmul.f32	s5, s14, s5
 8004ba4:	ee64 1a00 	vmul.f32	s3, s8, s0
 8004ba8:	ee27 7a24 	vmul.f32	s14, s14, s9
 8004bac:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8004bb0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8004bb4:	ee64 8a28 	vmul.f32	s17, s8, s17
 8004bb8:	ed9d 4a00 	vldr	s8, [sp]
 8004bbc:	edc1 6a01 	vstr	s13, [r1, #4]
 8004bc0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8004bc4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8004bc8:	ee64 9a29 	vmul.f32	s19, s8, s19
 8004bcc:	ee24 4a25 	vmul.f32	s8, s8, s11
 8004bd0:	ee30 7a87 	vadd.f32	s14, s1, s14
 8004bd4:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004bd8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8004bdc:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8004be0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8004be4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8004be8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8004bec:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8004bf0:	ee75 1a21 	vadd.f32	s3, s10, s3
 8004bf4:	ee30 0a68 	vsub.f32	s0, s0, s17
 8004bf8:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8004bfc:	ee70 0a84 	vadd.f32	s1, s1, s8
 8004c00:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004c04:	44d9      	add	r9, fp
 8004c06:	45ca      	cmp	sl, r9
 8004c08:	ed84 9a00 	vstr	s18, [r4]
 8004c0c:	edc4 3a01 	vstr	s7, [r4, #4]
 8004c10:	441a      	add	r2, r3
 8004c12:	ed07 7a01 	vstr	s14, [r7, #-4]
 8004c16:	edc7 2a00 	vstr	s5, [r7]
 8004c1a:	4419      	add	r1, r3
 8004c1c:	ed80 2a00 	vstr	s4, [r0]
 8004c20:	ed80 8a01 	vstr	s16, [r0, #4]
 8004c24:	441c      	add	r4, r3
 8004c26:	ed48 1a01 	vstr	s3, [r8, #-4]
 8004c2a:	ed88 0a00 	vstr	s0, [r8]
 8004c2e:	441f      	add	r7, r3
 8004c30:	ed46 4a01 	vstr	s9, [r6, #-4]
 8004c34:	4418      	add	r0, r3
 8004c36:	edc6 9a00 	vstr	s19, [r6]
 8004c3a:	4498      	add	r8, r3
 8004c3c:	edc5 0a00 	vstr	s1, [r5]
 8004c40:	ed85 6a01 	vstr	s12, [r5, #4]
 8004c44:	441e      	add	r6, r3
 8004c46:	441d      	add	r5, r3
 8004c48:	f63f aeea 	bhi.w	8004a20 <arm_radix8_butterfly_f32+0x328>
 8004c4c:	9a03      	ldr	r2, [sp, #12]
 8004c4e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004c50:	3201      	adds	r2, #1
 8004c52:	4611      	mov	r1, r2
 8004c54:	9203      	str	r2, [sp, #12]
 8004c56:	9a04      	ldr	r2, [sp, #16]
 8004c58:	4402      	add	r2, r0
 8004c5a:	9204      	str	r2, [sp, #16]
 8004c5c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004c5e:	9a05      	ldr	r2, [sp, #20]
 8004c60:	4402      	add	r2, r0
 8004c62:	9205      	str	r2, [sp, #20]
 8004c64:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004c66:	9a07      	ldr	r2, [sp, #28]
 8004c68:	4402      	add	r2, r0
 8004c6a:	9207      	str	r2, [sp, #28]
 8004c6c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004c6e:	9a06      	ldr	r2, [sp, #24]
 8004c70:	4402      	add	r2, r0
 8004c72:	9206      	str	r2, [sp, #24]
 8004c74:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004c76:	4496      	add	lr, r2
 8004c78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004c7a:	4494      	add	ip, r2
 8004c7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c7e:	3208      	adds	r2, #8
 8004c80:	920f      	str	r2, [sp, #60]	; 0x3c
 8004c82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c84:	3208      	adds	r2, #8
 8004c86:	920e      	str	r2, [sp, #56]	; 0x38
 8004c88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c8a:	3208      	adds	r2, #8
 8004c8c:	920d      	str	r2, [sp, #52]	; 0x34
 8004c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c90:	3208      	adds	r2, #8
 8004c92:	920c      	str	r2, [sp, #48]	; 0x30
 8004c94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c96:	3208      	adds	r2, #8
 8004c98:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c9c:	3208      	adds	r2, #8
 8004c9e:	920a      	str	r2, [sp, #40]	; 0x28
 8004ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ca2:	3208      	adds	r2, #8
 8004ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ca6:	9a08      	ldr	r2, [sp, #32]
 8004ca8:	3208      	adds	r2, #8
 8004caa:	9208      	str	r2, [sp, #32]
 8004cac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8004cae:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004cb0:	4288      	cmp	r0, r1
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	d007      	beq.n	8004cc6 <arm_radix8_butterfly_f32+0x5ce>
 8004cb6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004cb8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	4401      	add	r1, r0
 8004cc0:	9110      	str	r1, [sp, #64]	; 0x40
 8004cc2:	9804      	ldr	r0, [sp, #16]
 8004cc4:	e67c      	b.n	80049c0 <arm_radix8_butterfly_f32+0x2c8>
 8004cc6:	4683      	mov	fp, r0
 8004cc8:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8004ccc:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8004cce:	e524      	b.n	800471a <arm_radix8_butterfly_f32+0x22>
 8004cd0:	b01d      	add	sp, #116	; 0x74
 8004cd2:	ecbd 8b10 	vpop	{d8-d15}
 8004cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cda:	bf00      	nop

08004cdc <__libc_init_array>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	4e0d      	ldr	r6, [pc, #52]	; (8004d14 <__libc_init_array+0x38>)
 8004ce0:	4c0d      	ldr	r4, [pc, #52]	; (8004d18 <__libc_init_array+0x3c>)
 8004ce2:	1ba4      	subs	r4, r4, r6
 8004ce4:	10a4      	asrs	r4, r4, #2
 8004ce6:	2500      	movs	r5, #0
 8004ce8:	42a5      	cmp	r5, r4
 8004cea:	d109      	bne.n	8004d00 <__libc_init_array+0x24>
 8004cec:	4e0b      	ldr	r6, [pc, #44]	; (8004d1c <__libc_init_array+0x40>)
 8004cee:	4c0c      	ldr	r4, [pc, #48]	; (8004d20 <__libc_init_array+0x44>)
 8004cf0:	f001 fd66 	bl	80067c0 <_init>
 8004cf4:	1ba4      	subs	r4, r4, r6
 8004cf6:	10a4      	asrs	r4, r4, #2
 8004cf8:	2500      	movs	r5, #0
 8004cfa:	42a5      	cmp	r5, r4
 8004cfc:	d105      	bne.n	8004d0a <__libc_init_array+0x2e>
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}
 8004d00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d04:	4798      	blx	r3
 8004d06:	3501      	adds	r5, #1
 8004d08:	e7ee      	b.n	8004ce8 <__libc_init_array+0xc>
 8004d0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d0e:	4798      	blx	r3
 8004d10:	3501      	adds	r5, #1
 8004d12:	e7f2      	b.n	8004cfa <__libc_init_array+0x1e>
 8004d14:	0800d070 	.word	0x0800d070
 8004d18:	0800d070 	.word	0x0800d070
 8004d1c:	0800d070 	.word	0x0800d070
 8004d20:	0800d074 	.word	0x0800d074

08004d24 <memset>:
 8004d24:	4402      	add	r2, r0
 8004d26:	4603      	mov	r3, r0
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d100      	bne.n	8004d2e <memset+0xa>
 8004d2c:	4770      	bx	lr
 8004d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d32:	e7f9      	b.n	8004d28 <memset+0x4>

08004d34 <__cvt>:
 8004d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	ec55 4b10 	vmov	r4, r5, d0
 8004d3c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004d3e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d42:	2d00      	cmp	r5, #0
 8004d44:	460e      	mov	r6, r1
 8004d46:	4691      	mov	r9, r2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	bfb8      	it	lt
 8004d4c:	4622      	movlt	r2, r4
 8004d4e:	462b      	mov	r3, r5
 8004d50:	f027 0720 	bic.w	r7, r7, #32
 8004d54:	bfbb      	ittet	lt
 8004d56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d5a:	461d      	movlt	r5, r3
 8004d5c:	2300      	movge	r3, #0
 8004d5e:	232d      	movlt	r3, #45	; 0x2d
 8004d60:	bfb8      	it	lt
 8004d62:	4614      	movlt	r4, r2
 8004d64:	2f46      	cmp	r7, #70	; 0x46
 8004d66:	700b      	strb	r3, [r1, #0]
 8004d68:	d004      	beq.n	8004d74 <__cvt+0x40>
 8004d6a:	2f45      	cmp	r7, #69	; 0x45
 8004d6c:	d100      	bne.n	8004d70 <__cvt+0x3c>
 8004d6e:	3601      	adds	r6, #1
 8004d70:	2102      	movs	r1, #2
 8004d72:	e000      	b.n	8004d76 <__cvt+0x42>
 8004d74:	2103      	movs	r1, #3
 8004d76:	ab03      	add	r3, sp, #12
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	ab02      	add	r3, sp, #8
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	4632      	mov	r2, r6
 8004d80:	4653      	mov	r3, sl
 8004d82:	ec45 4b10 	vmov	d0, r4, r5
 8004d86:	f000 fbaf 	bl	80054e8 <_dtoa_r>
 8004d8a:	2f47      	cmp	r7, #71	; 0x47
 8004d8c:	4680      	mov	r8, r0
 8004d8e:	d102      	bne.n	8004d96 <__cvt+0x62>
 8004d90:	f019 0f01 	tst.w	r9, #1
 8004d94:	d026      	beq.n	8004de4 <__cvt+0xb0>
 8004d96:	2f46      	cmp	r7, #70	; 0x46
 8004d98:	eb08 0906 	add.w	r9, r8, r6
 8004d9c:	d111      	bne.n	8004dc2 <__cvt+0x8e>
 8004d9e:	f898 3000 	ldrb.w	r3, [r8]
 8004da2:	2b30      	cmp	r3, #48	; 0x30
 8004da4:	d10a      	bne.n	8004dbc <__cvt+0x88>
 8004da6:	2200      	movs	r2, #0
 8004da8:	2300      	movs	r3, #0
 8004daa:	4620      	mov	r0, r4
 8004dac:	4629      	mov	r1, r5
 8004dae:	f7fb fe93 	bl	8000ad8 <__aeabi_dcmpeq>
 8004db2:	b918      	cbnz	r0, 8004dbc <__cvt+0x88>
 8004db4:	f1c6 0601 	rsb	r6, r6, #1
 8004db8:	f8ca 6000 	str.w	r6, [sl]
 8004dbc:	f8da 3000 	ldr.w	r3, [sl]
 8004dc0:	4499      	add	r9, r3
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	4629      	mov	r1, r5
 8004dca:	f7fb fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dce:	b938      	cbnz	r0, 8004de0 <__cvt+0xac>
 8004dd0:	2230      	movs	r2, #48	; 0x30
 8004dd2:	9b03      	ldr	r3, [sp, #12]
 8004dd4:	4599      	cmp	r9, r3
 8004dd6:	d905      	bls.n	8004de4 <__cvt+0xb0>
 8004dd8:	1c59      	adds	r1, r3, #1
 8004dda:	9103      	str	r1, [sp, #12]
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	e7f8      	b.n	8004dd2 <__cvt+0x9e>
 8004de0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004de4:	9b03      	ldr	r3, [sp, #12]
 8004de6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004de8:	eba3 0308 	sub.w	r3, r3, r8
 8004dec:	4640      	mov	r0, r8
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	b004      	add	sp, #16
 8004df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004df6 <__exponent>:
 8004df6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2900      	cmp	r1, #0
 8004dfc:	bfb8      	it	lt
 8004dfe:	4249      	neglt	r1, r1
 8004e00:	f803 2b02 	strb.w	r2, [r3], #2
 8004e04:	bfb4      	ite	lt
 8004e06:	222d      	movlt	r2, #45	; 0x2d
 8004e08:	222b      	movge	r2, #43	; 0x2b
 8004e0a:	2909      	cmp	r1, #9
 8004e0c:	7042      	strb	r2, [r0, #1]
 8004e0e:	dd20      	ble.n	8004e52 <__exponent+0x5c>
 8004e10:	f10d 0207 	add.w	r2, sp, #7
 8004e14:	4617      	mov	r7, r2
 8004e16:	260a      	movs	r6, #10
 8004e18:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e1c:	fb06 1115 	mls	r1, r6, r5, r1
 8004e20:	3130      	adds	r1, #48	; 0x30
 8004e22:	2d09      	cmp	r5, #9
 8004e24:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e28:	f102 34ff 	add.w	r4, r2, #4294967295
 8004e2c:	4629      	mov	r1, r5
 8004e2e:	dc09      	bgt.n	8004e44 <__exponent+0x4e>
 8004e30:	3130      	adds	r1, #48	; 0x30
 8004e32:	3a02      	subs	r2, #2
 8004e34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e38:	42ba      	cmp	r2, r7
 8004e3a:	461c      	mov	r4, r3
 8004e3c:	d304      	bcc.n	8004e48 <__exponent+0x52>
 8004e3e:	1a20      	subs	r0, r4, r0
 8004e40:	b003      	add	sp, #12
 8004e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e44:	4622      	mov	r2, r4
 8004e46:	e7e7      	b.n	8004e18 <__exponent+0x22>
 8004e48:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004e4c:	f803 1b01 	strb.w	r1, [r3], #1
 8004e50:	e7f2      	b.n	8004e38 <__exponent+0x42>
 8004e52:	2230      	movs	r2, #48	; 0x30
 8004e54:	461c      	mov	r4, r3
 8004e56:	4411      	add	r1, r2
 8004e58:	f804 2b02 	strb.w	r2, [r4], #2
 8004e5c:	7059      	strb	r1, [r3, #1]
 8004e5e:	e7ee      	b.n	8004e3e <__exponent+0x48>

08004e60 <_printf_float>:
 8004e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e64:	b08d      	sub	sp, #52	; 0x34
 8004e66:	460c      	mov	r4, r1
 8004e68:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004e6c:	4616      	mov	r6, r2
 8004e6e:	461f      	mov	r7, r3
 8004e70:	4605      	mov	r5, r0
 8004e72:	f001 f907 	bl	8006084 <_localeconv_r>
 8004e76:	6803      	ldr	r3, [r0, #0]
 8004e78:	9304      	str	r3, [sp, #16]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fb fa04 	bl	8000288 <strlen>
 8004e80:	2300      	movs	r3, #0
 8004e82:	930a      	str	r3, [sp, #40]	; 0x28
 8004e84:	f8d8 3000 	ldr.w	r3, [r8]
 8004e88:	9005      	str	r0, [sp, #20]
 8004e8a:	3307      	adds	r3, #7
 8004e8c:	f023 0307 	bic.w	r3, r3, #7
 8004e90:	f103 0208 	add.w	r2, r3, #8
 8004e94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004e98:	f8d4 b000 	ldr.w	fp, [r4]
 8004e9c:	f8c8 2000 	str.w	r2, [r8]
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ea8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004eac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004eb0:	9307      	str	r3, [sp, #28]
 8004eb2:	f8cd 8018 	str.w	r8, [sp, #24]
 8004eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eba:	4ba5      	ldr	r3, [pc, #660]	; (8005150 <_printf_float+0x2f0>)
 8004ebc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ec0:	f7fb fe3c 	bl	8000b3c <__aeabi_dcmpun>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	f040 81fb 	bne.w	80052c0 <_printf_float+0x460>
 8004eca:	f04f 32ff 	mov.w	r2, #4294967295
 8004ece:	4ba0      	ldr	r3, [pc, #640]	; (8005150 <_printf_float+0x2f0>)
 8004ed0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ed4:	f7fb fe14 	bl	8000b00 <__aeabi_dcmple>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	f040 81f1 	bne.w	80052c0 <_printf_float+0x460>
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	f7fb fe01 	bl	8000aec <__aeabi_dcmplt>
 8004eea:	b110      	cbz	r0, 8004ef2 <_printf_float+0x92>
 8004eec:	232d      	movs	r3, #45	; 0x2d
 8004eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef2:	4b98      	ldr	r3, [pc, #608]	; (8005154 <_printf_float+0x2f4>)
 8004ef4:	4a98      	ldr	r2, [pc, #608]	; (8005158 <_printf_float+0x2f8>)
 8004ef6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004efa:	bf8c      	ite	hi
 8004efc:	4690      	movhi	r8, r2
 8004efe:	4698      	movls	r8, r3
 8004f00:	2303      	movs	r3, #3
 8004f02:	f02b 0204 	bic.w	r2, fp, #4
 8004f06:	6123      	str	r3, [r4, #16]
 8004f08:	6022      	str	r2, [r4, #0]
 8004f0a:	f04f 0900 	mov.w	r9, #0
 8004f0e:	9700      	str	r7, [sp, #0]
 8004f10:	4633      	mov	r3, r6
 8004f12:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f14:	4621      	mov	r1, r4
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 f9e2 	bl	80052e0 <_printf_common>
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	f040 8093 	bne.w	8005048 <_printf_float+0x1e8>
 8004f22:	f04f 30ff 	mov.w	r0, #4294967295
 8004f26:	b00d      	add	sp, #52	; 0x34
 8004f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2c:	6861      	ldr	r1, [r4, #4]
 8004f2e:	1c4b      	adds	r3, r1, #1
 8004f30:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004f34:	d13f      	bne.n	8004fb6 <_printf_float+0x156>
 8004f36:	2306      	movs	r3, #6
 8004f38:	6063      	str	r3, [r4, #4]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9303      	str	r3, [sp, #12]
 8004f3e:	ab0a      	add	r3, sp, #40	; 0x28
 8004f40:	9302      	str	r3, [sp, #8]
 8004f42:	ab09      	add	r3, sp, #36	; 0x24
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	ec49 8b10 	vmov	d0, r8, r9
 8004f4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f4e:	6022      	str	r2, [r4, #0]
 8004f50:	f8cd a004 	str.w	sl, [sp, #4]
 8004f54:	6861      	ldr	r1, [r4, #4]
 8004f56:	4628      	mov	r0, r5
 8004f58:	f7ff feec 	bl	8004d34 <__cvt>
 8004f5c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004f60:	2b47      	cmp	r3, #71	; 0x47
 8004f62:	4680      	mov	r8, r0
 8004f64:	d109      	bne.n	8004f7a <_printf_float+0x11a>
 8004f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f68:	1cd8      	adds	r0, r3, #3
 8004f6a:	db02      	blt.n	8004f72 <_printf_float+0x112>
 8004f6c:	6862      	ldr	r2, [r4, #4]
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	dd57      	ble.n	8005022 <_printf_float+0x1c2>
 8004f72:	f1aa 0a02 	sub.w	sl, sl, #2
 8004f76:	fa5f fa8a 	uxtb.w	sl, sl
 8004f7a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004f7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f80:	d834      	bhi.n	8004fec <_printf_float+0x18c>
 8004f82:	3901      	subs	r1, #1
 8004f84:	4652      	mov	r2, sl
 8004f86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f8a:	9109      	str	r1, [sp, #36]	; 0x24
 8004f8c:	f7ff ff33 	bl	8004df6 <__exponent>
 8004f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f92:	1883      	adds	r3, r0, r2
 8004f94:	2a01      	cmp	r2, #1
 8004f96:	4681      	mov	r9, r0
 8004f98:	6123      	str	r3, [r4, #16]
 8004f9a:	dc02      	bgt.n	8004fa2 <_printf_float+0x142>
 8004f9c:	6822      	ldr	r2, [r4, #0]
 8004f9e:	07d1      	lsls	r1, r2, #31
 8004fa0:	d501      	bpl.n	8004fa6 <_printf_float+0x146>
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	6123      	str	r3, [r4, #16]
 8004fa6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0af      	beq.n	8004f0e <_printf_float+0xae>
 8004fae:	232d      	movs	r3, #45	; 0x2d
 8004fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb4:	e7ab      	b.n	8004f0e <_printf_float+0xae>
 8004fb6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004fba:	d002      	beq.n	8004fc2 <_printf_float+0x162>
 8004fbc:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004fc0:	d1bb      	bne.n	8004f3a <_printf_float+0xda>
 8004fc2:	b189      	cbz	r1, 8004fe8 <_printf_float+0x188>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	9303      	str	r3, [sp, #12]
 8004fc8:	ab0a      	add	r3, sp, #40	; 0x28
 8004fca:	9302      	str	r3, [sp, #8]
 8004fcc:	ab09      	add	r3, sp, #36	; 0x24
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	ec49 8b10 	vmov	d0, r8, r9
 8004fd4:	6022      	str	r2, [r4, #0]
 8004fd6:	f8cd a004 	str.w	sl, [sp, #4]
 8004fda:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f7ff fea8 	bl	8004d34 <__cvt>
 8004fe4:	4680      	mov	r8, r0
 8004fe6:	e7be      	b.n	8004f66 <_printf_float+0x106>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e7a5      	b.n	8004f38 <_printf_float+0xd8>
 8004fec:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004ff0:	d119      	bne.n	8005026 <_printf_float+0x1c6>
 8004ff2:	2900      	cmp	r1, #0
 8004ff4:	6863      	ldr	r3, [r4, #4]
 8004ff6:	dd0c      	ble.n	8005012 <_printf_float+0x1b2>
 8004ff8:	6121      	str	r1, [r4, #16]
 8004ffa:	b913      	cbnz	r3, 8005002 <_printf_float+0x1a2>
 8004ffc:	6822      	ldr	r2, [r4, #0]
 8004ffe:	07d2      	lsls	r2, r2, #31
 8005000:	d502      	bpl.n	8005008 <_printf_float+0x1a8>
 8005002:	3301      	adds	r3, #1
 8005004:	440b      	add	r3, r1
 8005006:	6123      	str	r3, [r4, #16]
 8005008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800500a:	65a3      	str	r3, [r4, #88]	; 0x58
 800500c:	f04f 0900 	mov.w	r9, #0
 8005010:	e7c9      	b.n	8004fa6 <_printf_float+0x146>
 8005012:	b913      	cbnz	r3, 800501a <_printf_float+0x1ba>
 8005014:	6822      	ldr	r2, [r4, #0]
 8005016:	07d0      	lsls	r0, r2, #31
 8005018:	d501      	bpl.n	800501e <_printf_float+0x1be>
 800501a:	3302      	adds	r3, #2
 800501c:	e7f3      	b.n	8005006 <_printf_float+0x1a6>
 800501e:	2301      	movs	r3, #1
 8005020:	e7f1      	b.n	8005006 <_printf_float+0x1a6>
 8005022:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800502a:	4293      	cmp	r3, r2
 800502c:	db05      	blt.n	800503a <_printf_float+0x1da>
 800502e:	6822      	ldr	r2, [r4, #0]
 8005030:	6123      	str	r3, [r4, #16]
 8005032:	07d1      	lsls	r1, r2, #31
 8005034:	d5e8      	bpl.n	8005008 <_printf_float+0x1a8>
 8005036:	3301      	adds	r3, #1
 8005038:	e7e5      	b.n	8005006 <_printf_float+0x1a6>
 800503a:	2b00      	cmp	r3, #0
 800503c:	bfd4      	ite	le
 800503e:	f1c3 0302 	rsble	r3, r3, #2
 8005042:	2301      	movgt	r3, #1
 8005044:	4413      	add	r3, r2
 8005046:	e7de      	b.n	8005006 <_printf_float+0x1a6>
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	055a      	lsls	r2, r3, #21
 800504c:	d407      	bmi.n	800505e <_printf_float+0x1fe>
 800504e:	6923      	ldr	r3, [r4, #16]
 8005050:	4642      	mov	r2, r8
 8005052:	4631      	mov	r1, r6
 8005054:	4628      	mov	r0, r5
 8005056:	47b8      	blx	r7
 8005058:	3001      	adds	r0, #1
 800505a:	d12b      	bne.n	80050b4 <_printf_float+0x254>
 800505c:	e761      	b.n	8004f22 <_printf_float+0xc2>
 800505e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005062:	f240 80e2 	bls.w	800522a <_printf_float+0x3ca>
 8005066:	2200      	movs	r2, #0
 8005068:	2300      	movs	r3, #0
 800506a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800506e:	f7fb fd33 	bl	8000ad8 <__aeabi_dcmpeq>
 8005072:	2800      	cmp	r0, #0
 8005074:	d03c      	beq.n	80050f0 <_printf_float+0x290>
 8005076:	2301      	movs	r3, #1
 8005078:	4a38      	ldr	r2, [pc, #224]	; (800515c <_printf_float+0x2fc>)
 800507a:	4631      	mov	r1, r6
 800507c:	4628      	mov	r0, r5
 800507e:	47b8      	blx	r7
 8005080:	3001      	adds	r0, #1
 8005082:	f43f af4e 	beq.w	8004f22 <_printf_float+0xc2>
 8005086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800508a:	429a      	cmp	r2, r3
 800508c:	db02      	blt.n	8005094 <_printf_float+0x234>
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	07d8      	lsls	r0, r3, #31
 8005092:	d50f      	bpl.n	80050b4 <_printf_float+0x254>
 8005094:	9b05      	ldr	r3, [sp, #20]
 8005096:	9a04      	ldr	r2, [sp, #16]
 8005098:	4631      	mov	r1, r6
 800509a:	4628      	mov	r0, r5
 800509c:	47b8      	blx	r7
 800509e:	3001      	adds	r0, #1
 80050a0:	f43f af3f 	beq.w	8004f22 <_printf_float+0xc2>
 80050a4:	f04f 0800 	mov.w	r8, #0
 80050a8:	f104 091a 	add.w	r9, r4, #26
 80050ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ae:	3b01      	subs	r3, #1
 80050b0:	4598      	cmp	r8, r3
 80050b2:	db12      	blt.n	80050da <_printf_float+0x27a>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	079b      	lsls	r3, r3, #30
 80050b8:	d509      	bpl.n	80050ce <_printf_float+0x26e>
 80050ba:	f04f 0800 	mov.w	r8, #0
 80050be:	f104 0919 	add.w	r9, r4, #25
 80050c2:	68e3      	ldr	r3, [r4, #12]
 80050c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	4598      	cmp	r8, r3
 80050ca:	f2c0 80ee 	blt.w	80052aa <_printf_float+0x44a>
 80050ce:	68e0      	ldr	r0, [r4, #12]
 80050d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050d2:	4298      	cmp	r0, r3
 80050d4:	bfb8      	it	lt
 80050d6:	4618      	movlt	r0, r3
 80050d8:	e725      	b.n	8004f26 <_printf_float+0xc6>
 80050da:	2301      	movs	r3, #1
 80050dc:	464a      	mov	r2, r9
 80050de:	4631      	mov	r1, r6
 80050e0:	4628      	mov	r0, r5
 80050e2:	47b8      	blx	r7
 80050e4:	3001      	adds	r0, #1
 80050e6:	f43f af1c 	beq.w	8004f22 <_printf_float+0xc2>
 80050ea:	f108 0801 	add.w	r8, r8, #1
 80050ee:	e7dd      	b.n	80050ac <_printf_float+0x24c>
 80050f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	dc34      	bgt.n	8005160 <_printf_float+0x300>
 80050f6:	2301      	movs	r3, #1
 80050f8:	4a18      	ldr	r2, [pc, #96]	; (800515c <_printf_float+0x2fc>)
 80050fa:	4631      	mov	r1, r6
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b8      	blx	r7
 8005100:	3001      	adds	r0, #1
 8005102:	f43f af0e 	beq.w	8004f22 <_printf_float+0xc2>
 8005106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005108:	b923      	cbnz	r3, 8005114 <_printf_float+0x2b4>
 800510a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800510c:	b913      	cbnz	r3, 8005114 <_printf_float+0x2b4>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	07d9      	lsls	r1, r3, #31
 8005112:	d5cf      	bpl.n	80050b4 <_printf_float+0x254>
 8005114:	9b05      	ldr	r3, [sp, #20]
 8005116:	9a04      	ldr	r2, [sp, #16]
 8005118:	4631      	mov	r1, r6
 800511a:	4628      	mov	r0, r5
 800511c:	47b8      	blx	r7
 800511e:	3001      	adds	r0, #1
 8005120:	f43f aeff 	beq.w	8004f22 <_printf_float+0xc2>
 8005124:	f04f 0900 	mov.w	r9, #0
 8005128:	f104 0a1a 	add.w	sl, r4, #26
 800512c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800512e:	425b      	negs	r3, r3
 8005130:	4599      	cmp	r9, r3
 8005132:	db01      	blt.n	8005138 <_printf_float+0x2d8>
 8005134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005136:	e78b      	b.n	8005050 <_printf_float+0x1f0>
 8005138:	2301      	movs	r3, #1
 800513a:	4652      	mov	r2, sl
 800513c:	4631      	mov	r1, r6
 800513e:	4628      	mov	r0, r5
 8005140:	47b8      	blx	r7
 8005142:	3001      	adds	r0, #1
 8005144:	f43f aeed 	beq.w	8004f22 <_printf_float+0xc2>
 8005148:	f109 0901 	add.w	r9, r9, #1
 800514c:	e7ee      	b.n	800512c <_printf_float+0x2cc>
 800514e:	bf00      	nop
 8005150:	7fefffff 	.word	0x7fefffff
 8005154:	0800ce40 	.word	0x0800ce40
 8005158:	0800ce44 	.word	0x0800ce44
 800515c:	0800ce50 	.word	0x0800ce50
 8005160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005164:	429a      	cmp	r2, r3
 8005166:	bfa8      	it	ge
 8005168:	461a      	movge	r2, r3
 800516a:	2a00      	cmp	r2, #0
 800516c:	4691      	mov	r9, r2
 800516e:	dc38      	bgt.n	80051e2 <_printf_float+0x382>
 8005170:	f104 031a 	add.w	r3, r4, #26
 8005174:	f04f 0b00 	mov.w	fp, #0
 8005178:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800517c:	9306      	str	r3, [sp, #24]
 800517e:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005182:	ebaa 0309 	sub.w	r3, sl, r9
 8005186:	459b      	cmp	fp, r3
 8005188:	db33      	blt.n	80051f2 <_printf_float+0x392>
 800518a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800518c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800518e:	429a      	cmp	r2, r3
 8005190:	db3a      	blt.n	8005208 <_printf_float+0x3a8>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	07da      	lsls	r2, r3, #31
 8005196:	d437      	bmi.n	8005208 <_printf_float+0x3a8>
 8005198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800519a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800519c:	eba3 020a 	sub.w	r2, r3, sl
 80051a0:	eba3 0901 	sub.w	r9, r3, r1
 80051a4:	4591      	cmp	r9, r2
 80051a6:	bfa8      	it	ge
 80051a8:	4691      	movge	r9, r2
 80051aa:	f1b9 0f00 	cmp.w	r9, #0
 80051ae:	dc33      	bgt.n	8005218 <_printf_float+0x3b8>
 80051b0:	f04f 0800 	mov.w	r8, #0
 80051b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051b8:	f104 0a1a 	add.w	sl, r4, #26
 80051bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	eba3 0309 	sub.w	r3, r3, r9
 80051c6:	4598      	cmp	r8, r3
 80051c8:	f6bf af74 	bge.w	80050b4 <_printf_float+0x254>
 80051cc:	2301      	movs	r3, #1
 80051ce:	4652      	mov	r2, sl
 80051d0:	4631      	mov	r1, r6
 80051d2:	4628      	mov	r0, r5
 80051d4:	47b8      	blx	r7
 80051d6:	3001      	adds	r0, #1
 80051d8:	f43f aea3 	beq.w	8004f22 <_printf_float+0xc2>
 80051dc:	f108 0801 	add.w	r8, r8, #1
 80051e0:	e7ec      	b.n	80051bc <_printf_float+0x35c>
 80051e2:	4613      	mov	r3, r2
 80051e4:	4631      	mov	r1, r6
 80051e6:	4642      	mov	r2, r8
 80051e8:	4628      	mov	r0, r5
 80051ea:	47b8      	blx	r7
 80051ec:	3001      	adds	r0, #1
 80051ee:	d1bf      	bne.n	8005170 <_printf_float+0x310>
 80051f0:	e697      	b.n	8004f22 <_printf_float+0xc2>
 80051f2:	2301      	movs	r3, #1
 80051f4:	9a06      	ldr	r2, [sp, #24]
 80051f6:	4631      	mov	r1, r6
 80051f8:	4628      	mov	r0, r5
 80051fa:	47b8      	blx	r7
 80051fc:	3001      	adds	r0, #1
 80051fe:	f43f ae90 	beq.w	8004f22 <_printf_float+0xc2>
 8005202:	f10b 0b01 	add.w	fp, fp, #1
 8005206:	e7ba      	b.n	800517e <_printf_float+0x31e>
 8005208:	9b05      	ldr	r3, [sp, #20]
 800520a:	9a04      	ldr	r2, [sp, #16]
 800520c:	4631      	mov	r1, r6
 800520e:	4628      	mov	r0, r5
 8005210:	47b8      	blx	r7
 8005212:	3001      	adds	r0, #1
 8005214:	d1c0      	bne.n	8005198 <_printf_float+0x338>
 8005216:	e684      	b.n	8004f22 <_printf_float+0xc2>
 8005218:	464b      	mov	r3, r9
 800521a:	eb08 020a 	add.w	r2, r8, sl
 800521e:	4631      	mov	r1, r6
 8005220:	4628      	mov	r0, r5
 8005222:	47b8      	blx	r7
 8005224:	3001      	adds	r0, #1
 8005226:	d1c3      	bne.n	80051b0 <_printf_float+0x350>
 8005228:	e67b      	b.n	8004f22 <_printf_float+0xc2>
 800522a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800522c:	2a01      	cmp	r2, #1
 800522e:	dc01      	bgt.n	8005234 <_printf_float+0x3d4>
 8005230:	07db      	lsls	r3, r3, #31
 8005232:	d537      	bpl.n	80052a4 <_printf_float+0x444>
 8005234:	2301      	movs	r3, #1
 8005236:	4642      	mov	r2, r8
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	f43f ae6f 	beq.w	8004f22 <_printf_float+0xc2>
 8005244:	9b05      	ldr	r3, [sp, #20]
 8005246:	9a04      	ldr	r2, [sp, #16]
 8005248:	4631      	mov	r1, r6
 800524a:	4628      	mov	r0, r5
 800524c:	47b8      	blx	r7
 800524e:	3001      	adds	r0, #1
 8005250:	f43f ae67 	beq.w	8004f22 <_printf_float+0xc2>
 8005254:	2200      	movs	r2, #0
 8005256:	2300      	movs	r3, #0
 8005258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800525c:	f7fb fc3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005260:	b158      	cbz	r0, 800527a <_printf_float+0x41a>
 8005262:	f04f 0800 	mov.w	r8, #0
 8005266:	f104 0a1a 	add.w	sl, r4, #26
 800526a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800526c:	3b01      	subs	r3, #1
 800526e:	4598      	cmp	r8, r3
 8005270:	db0d      	blt.n	800528e <_printf_float+0x42e>
 8005272:	464b      	mov	r3, r9
 8005274:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005278:	e6eb      	b.n	8005052 <_printf_float+0x1f2>
 800527a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800527c:	f108 0201 	add.w	r2, r8, #1
 8005280:	3b01      	subs	r3, #1
 8005282:	4631      	mov	r1, r6
 8005284:	4628      	mov	r0, r5
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	d1f2      	bne.n	8005272 <_printf_float+0x412>
 800528c:	e649      	b.n	8004f22 <_printf_float+0xc2>
 800528e:	2301      	movs	r3, #1
 8005290:	4652      	mov	r2, sl
 8005292:	4631      	mov	r1, r6
 8005294:	4628      	mov	r0, r5
 8005296:	47b8      	blx	r7
 8005298:	3001      	adds	r0, #1
 800529a:	f43f ae42 	beq.w	8004f22 <_printf_float+0xc2>
 800529e:	f108 0801 	add.w	r8, r8, #1
 80052a2:	e7e2      	b.n	800526a <_printf_float+0x40a>
 80052a4:	2301      	movs	r3, #1
 80052a6:	4642      	mov	r2, r8
 80052a8:	e7eb      	b.n	8005282 <_printf_float+0x422>
 80052aa:	2301      	movs	r3, #1
 80052ac:	464a      	mov	r2, r9
 80052ae:	4631      	mov	r1, r6
 80052b0:	4628      	mov	r0, r5
 80052b2:	47b8      	blx	r7
 80052b4:	3001      	adds	r0, #1
 80052b6:	f43f ae34 	beq.w	8004f22 <_printf_float+0xc2>
 80052ba:	f108 0801 	add.w	r8, r8, #1
 80052be:	e700      	b.n	80050c2 <_printf_float+0x262>
 80052c0:	4642      	mov	r2, r8
 80052c2:	464b      	mov	r3, r9
 80052c4:	4640      	mov	r0, r8
 80052c6:	4649      	mov	r1, r9
 80052c8:	f7fb fc38 	bl	8000b3c <__aeabi_dcmpun>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	f43f ae2d 	beq.w	8004f2c <_printf_float+0xcc>
 80052d2:	4b01      	ldr	r3, [pc, #4]	; (80052d8 <_printf_float+0x478>)
 80052d4:	4a01      	ldr	r2, [pc, #4]	; (80052dc <_printf_float+0x47c>)
 80052d6:	e60e      	b.n	8004ef6 <_printf_float+0x96>
 80052d8:	0800ce48 	.word	0x0800ce48
 80052dc:	0800ce4c 	.word	0x0800ce4c

080052e0 <_printf_common>:
 80052e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e4:	4691      	mov	r9, r2
 80052e6:	461f      	mov	r7, r3
 80052e8:	688a      	ldr	r2, [r1, #8]
 80052ea:	690b      	ldr	r3, [r1, #16]
 80052ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052f0:	4293      	cmp	r3, r2
 80052f2:	bfb8      	it	lt
 80052f4:	4613      	movlt	r3, r2
 80052f6:	f8c9 3000 	str.w	r3, [r9]
 80052fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052fe:	4606      	mov	r6, r0
 8005300:	460c      	mov	r4, r1
 8005302:	b112      	cbz	r2, 800530a <_printf_common+0x2a>
 8005304:	3301      	adds	r3, #1
 8005306:	f8c9 3000 	str.w	r3, [r9]
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	0699      	lsls	r1, r3, #26
 800530e:	bf42      	ittt	mi
 8005310:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005314:	3302      	addmi	r3, #2
 8005316:	f8c9 3000 	strmi.w	r3, [r9]
 800531a:	6825      	ldr	r5, [r4, #0]
 800531c:	f015 0506 	ands.w	r5, r5, #6
 8005320:	d107      	bne.n	8005332 <_printf_common+0x52>
 8005322:	f104 0a19 	add.w	sl, r4, #25
 8005326:	68e3      	ldr	r3, [r4, #12]
 8005328:	f8d9 2000 	ldr.w	r2, [r9]
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	429d      	cmp	r5, r3
 8005330:	db29      	blt.n	8005386 <_printf_common+0xa6>
 8005332:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	3300      	adds	r3, #0
 800533a:	bf18      	it	ne
 800533c:	2301      	movne	r3, #1
 800533e:	0692      	lsls	r2, r2, #26
 8005340:	d42e      	bmi.n	80053a0 <_printf_common+0xc0>
 8005342:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005346:	4639      	mov	r1, r7
 8005348:	4630      	mov	r0, r6
 800534a:	47c0      	blx	r8
 800534c:	3001      	adds	r0, #1
 800534e:	d021      	beq.n	8005394 <_printf_common+0xb4>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	68e5      	ldr	r5, [r4, #12]
 8005354:	f8d9 2000 	ldr.w	r2, [r9]
 8005358:	f003 0306 	and.w	r3, r3, #6
 800535c:	2b04      	cmp	r3, #4
 800535e:	bf08      	it	eq
 8005360:	1aad      	subeq	r5, r5, r2
 8005362:	68a3      	ldr	r3, [r4, #8]
 8005364:	6922      	ldr	r2, [r4, #16]
 8005366:	bf0c      	ite	eq
 8005368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800536c:	2500      	movne	r5, #0
 800536e:	4293      	cmp	r3, r2
 8005370:	bfc4      	itt	gt
 8005372:	1a9b      	subgt	r3, r3, r2
 8005374:	18ed      	addgt	r5, r5, r3
 8005376:	f04f 0900 	mov.w	r9, #0
 800537a:	341a      	adds	r4, #26
 800537c:	454d      	cmp	r5, r9
 800537e:	d11b      	bne.n	80053b8 <_printf_common+0xd8>
 8005380:	2000      	movs	r0, #0
 8005382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005386:	2301      	movs	r3, #1
 8005388:	4652      	mov	r2, sl
 800538a:	4639      	mov	r1, r7
 800538c:	4630      	mov	r0, r6
 800538e:	47c0      	blx	r8
 8005390:	3001      	adds	r0, #1
 8005392:	d103      	bne.n	800539c <_printf_common+0xbc>
 8005394:	f04f 30ff 	mov.w	r0, #4294967295
 8005398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539c:	3501      	adds	r5, #1
 800539e:	e7c2      	b.n	8005326 <_printf_common+0x46>
 80053a0:	18e1      	adds	r1, r4, r3
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	2030      	movs	r0, #48	; 0x30
 80053a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053aa:	4422      	add	r2, r4
 80053ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053b4:	3302      	adds	r3, #2
 80053b6:	e7c4      	b.n	8005342 <_printf_common+0x62>
 80053b8:	2301      	movs	r3, #1
 80053ba:	4622      	mov	r2, r4
 80053bc:	4639      	mov	r1, r7
 80053be:	4630      	mov	r0, r6
 80053c0:	47c0      	blx	r8
 80053c2:	3001      	adds	r0, #1
 80053c4:	d0e6      	beq.n	8005394 <_printf_common+0xb4>
 80053c6:	f109 0901 	add.w	r9, r9, #1
 80053ca:	e7d7      	b.n	800537c <_printf_common+0x9c>

080053cc <quorem>:
 80053cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d0:	6903      	ldr	r3, [r0, #16]
 80053d2:	690c      	ldr	r4, [r1, #16]
 80053d4:	429c      	cmp	r4, r3
 80053d6:	4680      	mov	r8, r0
 80053d8:	f300 8082 	bgt.w	80054e0 <quorem+0x114>
 80053dc:	3c01      	subs	r4, #1
 80053de:	f101 0714 	add.w	r7, r1, #20
 80053e2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80053e6:	f100 0614 	add.w	r6, r0, #20
 80053ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80053ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80053f2:	eb06 030e 	add.w	r3, r6, lr
 80053f6:	3501      	adds	r5, #1
 80053f8:	eb07 090e 	add.w	r9, r7, lr
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8005402:	b395      	cbz	r5, 800546a <quorem+0x9e>
 8005404:	f04f 0a00 	mov.w	sl, #0
 8005408:	4638      	mov	r0, r7
 800540a:	46b4      	mov	ip, r6
 800540c:	46d3      	mov	fp, sl
 800540e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005412:	b293      	uxth	r3, r2
 8005414:	fb05 a303 	mla	r3, r5, r3, sl
 8005418:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800541c:	b29b      	uxth	r3, r3
 800541e:	ebab 0303 	sub.w	r3, fp, r3
 8005422:	0c12      	lsrs	r2, r2, #16
 8005424:	f8bc b000 	ldrh.w	fp, [ip]
 8005428:	fb05 a202 	mla	r2, r5, r2, sl
 800542c:	fa13 f38b 	uxtah	r3, r3, fp
 8005430:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005434:	fa1f fb82 	uxth.w	fp, r2
 8005438:	f8dc 2000 	ldr.w	r2, [ip]
 800543c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005440:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005444:	b29b      	uxth	r3, r3
 8005446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800544a:	4581      	cmp	r9, r0
 800544c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005450:	f84c 3b04 	str.w	r3, [ip], #4
 8005454:	d2db      	bcs.n	800540e <quorem+0x42>
 8005456:	f856 300e 	ldr.w	r3, [r6, lr]
 800545a:	b933      	cbnz	r3, 800546a <quorem+0x9e>
 800545c:	9b01      	ldr	r3, [sp, #4]
 800545e:	3b04      	subs	r3, #4
 8005460:	429e      	cmp	r6, r3
 8005462:	461a      	mov	r2, r3
 8005464:	d330      	bcc.n	80054c8 <quorem+0xfc>
 8005466:	f8c8 4010 	str.w	r4, [r8, #16]
 800546a:	4640      	mov	r0, r8
 800546c:	f001 f835 	bl	80064da <__mcmp>
 8005470:	2800      	cmp	r0, #0
 8005472:	db25      	blt.n	80054c0 <quorem+0xf4>
 8005474:	3501      	adds	r5, #1
 8005476:	4630      	mov	r0, r6
 8005478:	f04f 0e00 	mov.w	lr, #0
 800547c:	f857 2b04 	ldr.w	r2, [r7], #4
 8005480:	f8d0 c000 	ldr.w	ip, [r0]
 8005484:	b293      	uxth	r3, r2
 8005486:	ebae 0303 	sub.w	r3, lr, r3
 800548a:	0c12      	lsrs	r2, r2, #16
 800548c:	fa13 f38c 	uxtah	r3, r3, ip
 8005490:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005494:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005498:	b29b      	uxth	r3, r3
 800549a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800549e:	45b9      	cmp	r9, r7
 80054a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80054a4:	f840 3b04 	str.w	r3, [r0], #4
 80054a8:	d2e8      	bcs.n	800547c <quorem+0xb0>
 80054aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80054ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80054b2:	b92a      	cbnz	r2, 80054c0 <quorem+0xf4>
 80054b4:	3b04      	subs	r3, #4
 80054b6:	429e      	cmp	r6, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	d30b      	bcc.n	80054d4 <quorem+0x108>
 80054bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80054c0:	4628      	mov	r0, r5
 80054c2:	b003      	add	sp, #12
 80054c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c8:	6812      	ldr	r2, [r2, #0]
 80054ca:	3b04      	subs	r3, #4
 80054cc:	2a00      	cmp	r2, #0
 80054ce:	d1ca      	bne.n	8005466 <quorem+0x9a>
 80054d0:	3c01      	subs	r4, #1
 80054d2:	e7c5      	b.n	8005460 <quorem+0x94>
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	3b04      	subs	r3, #4
 80054d8:	2a00      	cmp	r2, #0
 80054da:	d1ef      	bne.n	80054bc <quorem+0xf0>
 80054dc:	3c01      	subs	r4, #1
 80054de:	e7ea      	b.n	80054b6 <quorem+0xea>
 80054e0:	2000      	movs	r0, #0
 80054e2:	e7ee      	b.n	80054c2 <quorem+0xf6>
 80054e4:	0000      	movs	r0, r0
	...

080054e8 <_dtoa_r>:
 80054e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ec:	ec57 6b10 	vmov	r6, r7, d0
 80054f0:	b097      	sub	sp, #92	; 0x5c
 80054f2:	e9cd 6700 	strd	r6, r7, [sp]
 80054f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054f8:	9107      	str	r1, [sp, #28]
 80054fa:	4604      	mov	r4, r0
 80054fc:	920a      	str	r2, [sp, #40]	; 0x28
 80054fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005500:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005502:	b93e      	cbnz	r6, 8005514 <_dtoa_r+0x2c>
 8005504:	2010      	movs	r0, #16
 8005506:	f000 fdcb 	bl	80060a0 <malloc>
 800550a:	6260      	str	r0, [r4, #36]	; 0x24
 800550c:	6046      	str	r6, [r0, #4]
 800550e:	6086      	str	r6, [r0, #8]
 8005510:	6006      	str	r6, [r0, #0]
 8005512:	60c6      	str	r6, [r0, #12]
 8005514:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005516:	6819      	ldr	r1, [r3, #0]
 8005518:	b151      	cbz	r1, 8005530 <_dtoa_r+0x48>
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	604a      	str	r2, [r1, #4]
 800551e:	2301      	movs	r3, #1
 8005520:	4093      	lsls	r3, r2
 8005522:	608b      	str	r3, [r1, #8]
 8005524:	4620      	mov	r0, r4
 8005526:	f000 fe02 	bl	800612e <_Bfree>
 800552a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	9b01      	ldr	r3, [sp, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	bfbf      	itttt	lt
 8005536:	2301      	movlt	r3, #1
 8005538:	602b      	strlt	r3, [r5, #0]
 800553a:	9b01      	ldrlt	r3, [sp, #4]
 800553c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005540:	bfb2      	itee	lt
 8005542:	9301      	strlt	r3, [sp, #4]
 8005544:	2300      	movge	r3, #0
 8005546:	602b      	strge	r3, [r5, #0]
 8005548:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800554c:	4ba8      	ldr	r3, [pc, #672]	; (80057f0 <_dtoa_r+0x308>)
 800554e:	ea33 0308 	bics.w	r3, r3, r8
 8005552:	d11b      	bne.n	800558c <_dtoa_r+0xa4>
 8005554:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005556:	f242 730f 	movw	r3, #9999	; 0x270f
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	9b00      	ldr	r3, [sp, #0]
 800555e:	b923      	cbnz	r3, 800556a <_dtoa_r+0x82>
 8005560:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005564:	2800      	cmp	r0, #0
 8005566:	f000 8578 	beq.w	800605a <_dtoa_r+0xb72>
 800556a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800556c:	b953      	cbnz	r3, 8005584 <_dtoa_r+0x9c>
 800556e:	4ba1      	ldr	r3, [pc, #644]	; (80057f4 <_dtoa_r+0x30c>)
 8005570:	e021      	b.n	80055b6 <_dtoa_r+0xce>
 8005572:	4ba1      	ldr	r3, [pc, #644]	; (80057f8 <_dtoa_r+0x310>)
 8005574:	9302      	str	r3, [sp, #8]
 8005576:	3308      	adds	r3, #8
 8005578:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	9802      	ldr	r0, [sp, #8]
 800557e:	b017      	add	sp, #92	; 0x5c
 8005580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005584:	4b9b      	ldr	r3, [pc, #620]	; (80057f4 <_dtoa_r+0x30c>)
 8005586:	9302      	str	r3, [sp, #8]
 8005588:	3303      	adds	r3, #3
 800558a:	e7f5      	b.n	8005578 <_dtoa_r+0x90>
 800558c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005590:	2200      	movs	r2, #0
 8005592:	2300      	movs	r3, #0
 8005594:	4630      	mov	r0, r6
 8005596:	4639      	mov	r1, r7
 8005598:	f7fb fa9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800559c:	4681      	mov	r9, r0
 800559e:	b160      	cbz	r0, 80055ba <_dtoa_r+0xd2>
 80055a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055a2:	2301      	movs	r3, #1
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8553 	beq.w	8006054 <_dtoa_r+0xb6c>
 80055ae:	4b93      	ldr	r3, [pc, #588]	; (80057fc <_dtoa_r+0x314>)
 80055b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	9302      	str	r3, [sp, #8]
 80055b8:	e7e0      	b.n	800557c <_dtoa_r+0x94>
 80055ba:	aa14      	add	r2, sp, #80	; 0x50
 80055bc:	a915      	add	r1, sp, #84	; 0x54
 80055be:	ec47 6b10 	vmov	d0, r6, r7
 80055c2:	4620      	mov	r0, r4
 80055c4:	f001 f801 	bl	80065ca <__d2b>
 80055c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80055cc:	4682      	mov	sl, r0
 80055ce:	2d00      	cmp	r5, #0
 80055d0:	d07e      	beq.n	80056d0 <_dtoa_r+0x1e8>
 80055d2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80055d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80055da:	4630      	mov	r0, r6
 80055dc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80055e0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80055e4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80055e8:	2200      	movs	r2, #0
 80055ea:	4b85      	ldr	r3, [pc, #532]	; (8005800 <_dtoa_r+0x318>)
 80055ec:	f7fa fe58 	bl	80002a0 <__aeabi_dsub>
 80055f0:	a379      	add	r3, pc, #484	; (adr r3, 80057d8 <_dtoa_r+0x2f0>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fb f807 	bl	8000608 <__aeabi_dmul>
 80055fa:	a379      	add	r3, pc, #484	; (adr r3, 80057e0 <_dtoa_r+0x2f8>)
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	f7fa fe50 	bl	80002a4 <__adddf3>
 8005604:	4606      	mov	r6, r0
 8005606:	4628      	mov	r0, r5
 8005608:	460f      	mov	r7, r1
 800560a:	f7fa ff97 	bl	800053c <__aeabi_i2d>
 800560e:	a376      	add	r3, pc, #472	; (adr r3, 80057e8 <_dtoa_r+0x300>)
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f7fa fff8 	bl	8000608 <__aeabi_dmul>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4630      	mov	r0, r6
 800561e:	4639      	mov	r1, r7
 8005620:	f7fa fe40 	bl	80002a4 <__adddf3>
 8005624:	4606      	mov	r6, r0
 8005626:	460f      	mov	r7, r1
 8005628:	f7fb fa9e 	bl	8000b68 <__aeabi_d2iz>
 800562c:	2200      	movs	r2, #0
 800562e:	4683      	mov	fp, r0
 8005630:	2300      	movs	r3, #0
 8005632:	4630      	mov	r0, r6
 8005634:	4639      	mov	r1, r7
 8005636:	f7fb fa59 	bl	8000aec <__aeabi_dcmplt>
 800563a:	b158      	cbz	r0, 8005654 <_dtoa_r+0x16c>
 800563c:	4658      	mov	r0, fp
 800563e:	f7fa ff7d 	bl	800053c <__aeabi_i2d>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4630      	mov	r0, r6
 8005648:	4639      	mov	r1, r7
 800564a:	f7fb fa45 	bl	8000ad8 <__aeabi_dcmpeq>
 800564e:	b908      	cbnz	r0, 8005654 <_dtoa_r+0x16c>
 8005650:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005654:	f1bb 0f16 	cmp.w	fp, #22
 8005658:	d859      	bhi.n	800570e <_dtoa_r+0x226>
 800565a:	496a      	ldr	r1, [pc, #424]	; (8005804 <_dtoa_r+0x31c>)
 800565c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005660:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005664:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005668:	f7fb fa5e 	bl	8000b28 <__aeabi_dcmpgt>
 800566c:	2800      	cmp	r0, #0
 800566e:	d050      	beq.n	8005712 <_dtoa_r+0x22a>
 8005670:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005674:	2300      	movs	r3, #0
 8005676:	930e      	str	r3, [sp, #56]	; 0x38
 8005678:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800567a:	1b5d      	subs	r5, r3, r5
 800567c:	1e6b      	subs	r3, r5, #1
 800567e:	9306      	str	r3, [sp, #24]
 8005680:	bf45      	ittet	mi
 8005682:	f1c5 0301 	rsbmi	r3, r5, #1
 8005686:	9305      	strmi	r3, [sp, #20]
 8005688:	2300      	movpl	r3, #0
 800568a:	2300      	movmi	r3, #0
 800568c:	bf4c      	ite	mi
 800568e:	9306      	strmi	r3, [sp, #24]
 8005690:	9305      	strpl	r3, [sp, #20]
 8005692:	f1bb 0f00 	cmp.w	fp, #0
 8005696:	db3e      	blt.n	8005716 <_dtoa_r+0x22e>
 8005698:	9b06      	ldr	r3, [sp, #24]
 800569a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800569e:	445b      	add	r3, fp
 80056a0:	9306      	str	r3, [sp, #24]
 80056a2:	2300      	movs	r3, #0
 80056a4:	9308      	str	r3, [sp, #32]
 80056a6:	9b07      	ldr	r3, [sp, #28]
 80056a8:	2b09      	cmp	r3, #9
 80056aa:	f200 80af 	bhi.w	800580c <_dtoa_r+0x324>
 80056ae:	2b05      	cmp	r3, #5
 80056b0:	bfc4      	itt	gt
 80056b2:	3b04      	subgt	r3, #4
 80056b4:	9307      	strgt	r3, [sp, #28]
 80056b6:	9b07      	ldr	r3, [sp, #28]
 80056b8:	f1a3 0302 	sub.w	r3, r3, #2
 80056bc:	bfcc      	ite	gt
 80056be:	2600      	movgt	r6, #0
 80056c0:	2601      	movle	r6, #1
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	f200 80ae 	bhi.w	8005824 <_dtoa_r+0x33c>
 80056c8:	e8df f003 	tbb	[pc, r3]
 80056cc:	772f8482 	.word	0x772f8482
 80056d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056d2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80056d4:	441d      	add	r5, r3
 80056d6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80056da:	2b20      	cmp	r3, #32
 80056dc:	dd11      	ble.n	8005702 <_dtoa_r+0x21a>
 80056de:	9a00      	ldr	r2, [sp, #0]
 80056e0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80056e4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80056e8:	fa22 f000 	lsr.w	r0, r2, r0
 80056ec:	fa08 f303 	lsl.w	r3, r8, r3
 80056f0:	4318      	orrs	r0, r3
 80056f2:	f7fa ff13 	bl	800051c <__aeabi_ui2d>
 80056f6:	2301      	movs	r3, #1
 80056f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80056fc:	3d01      	subs	r5, #1
 80056fe:	9312      	str	r3, [sp, #72]	; 0x48
 8005700:	e772      	b.n	80055e8 <_dtoa_r+0x100>
 8005702:	f1c3 0020 	rsb	r0, r3, #32
 8005706:	9b00      	ldr	r3, [sp, #0]
 8005708:	fa03 f000 	lsl.w	r0, r3, r0
 800570c:	e7f1      	b.n	80056f2 <_dtoa_r+0x20a>
 800570e:	2301      	movs	r3, #1
 8005710:	e7b1      	b.n	8005676 <_dtoa_r+0x18e>
 8005712:	900e      	str	r0, [sp, #56]	; 0x38
 8005714:	e7b0      	b.n	8005678 <_dtoa_r+0x190>
 8005716:	9b05      	ldr	r3, [sp, #20]
 8005718:	eba3 030b 	sub.w	r3, r3, fp
 800571c:	9305      	str	r3, [sp, #20]
 800571e:	f1cb 0300 	rsb	r3, fp, #0
 8005722:	9308      	str	r3, [sp, #32]
 8005724:	2300      	movs	r3, #0
 8005726:	930b      	str	r3, [sp, #44]	; 0x2c
 8005728:	e7bd      	b.n	80056a6 <_dtoa_r+0x1be>
 800572a:	2301      	movs	r3, #1
 800572c:	9309      	str	r3, [sp, #36]	; 0x24
 800572e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005730:	2b00      	cmp	r3, #0
 8005732:	dd7a      	ble.n	800582a <_dtoa_r+0x342>
 8005734:	9304      	str	r3, [sp, #16]
 8005736:	9303      	str	r3, [sp, #12]
 8005738:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800573a:	2200      	movs	r2, #0
 800573c:	606a      	str	r2, [r5, #4]
 800573e:	2104      	movs	r1, #4
 8005740:	f101 0214 	add.w	r2, r1, #20
 8005744:	429a      	cmp	r2, r3
 8005746:	d975      	bls.n	8005834 <_dtoa_r+0x34c>
 8005748:	6869      	ldr	r1, [r5, #4]
 800574a:	4620      	mov	r0, r4
 800574c:	f000 fcbb 	bl	80060c6 <_Balloc>
 8005750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005752:	6028      	str	r0, [r5, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	9302      	str	r3, [sp, #8]
 8005758:	9b03      	ldr	r3, [sp, #12]
 800575a:	2b0e      	cmp	r3, #14
 800575c:	f200 80e5 	bhi.w	800592a <_dtoa_r+0x442>
 8005760:	2e00      	cmp	r6, #0
 8005762:	f000 80e2 	beq.w	800592a <_dtoa_r+0x442>
 8005766:	ed9d 7b00 	vldr	d7, [sp]
 800576a:	f1bb 0f00 	cmp.w	fp, #0
 800576e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005772:	dd74      	ble.n	800585e <_dtoa_r+0x376>
 8005774:	4a23      	ldr	r2, [pc, #140]	; (8005804 <_dtoa_r+0x31c>)
 8005776:	f00b 030f 	and.w	r3, fp, #15
 800577a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800577e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005782:	06f0      	lsls	r0, r6, #27
 8005784:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005788:	d559      	bpl.n	800583e <_dtoa_r+0x356>
 800578a:	4b1f      	ldr	r3, [pc, #124]	; (8005808 <_dtoa_r+0x320>)
 800578c:	ec51 0b17 	vmov	r0, r1, d7
 8005790:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005794:	f7fb f862 	bl	800085c <__aeabi_ddiv>
 8005798:	e9cd 0100 	strd	r0, r1, [sp]
 800579c:	f006 060f 	and.w	r6, r6, #15
 80057a0:	2503      	movs	r5, #3
 80057a2:	4f19      	ldr	r7, [pc, #100]	; (8005808 <_dtoa_r+0x320>)
 80057a4:	2e00      	cmp	r6, #0
 80057a6:	d14c      	bne.n	8005842 <_dtoa_r+0x35a>
 80057a8:	4642      	mov	r2, r8
 80057aa:	464b      	mov	r3, r9
 80057ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057b0:	f7fb f854 	bl	800085c <__aeabi_ddiv>
 80057b4:	e9cd 0100 	strd	r0, r1, [sp]
 80057b8:	e06a      	b.n	8005890 <_dtoa_r+0x3a8>
 80057ba:	2301      	movs	r3, #1
 80057bc:	9309      	str	r3, [sp, #36]	; 0x24
 80057be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c0:	445b      	add	r3, fp
 80057c2:	9304      	str	r3, [sp, #16]
 80057c4:	3301      	adds	r3, #1
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	9303      	str	r3, [sp, #12]
 80057ca:	bfb8      	it	lt
 80057cc:	2301      	movlt	r3, #1
 80057ce:	e7b3      	b.n	8005738 <_dtoa_r+0x250>
 80057d0:	2300      	movs	r3, #0
 80057d2:	e7ab      	b.n	800572c <_dtoa_r+0x244>
 80057d4:	2300      	movs	r3, #0
 80057d6:	e7f1      	b.n	80057bc <_dtoa_r+0x2d4>
 80057d8:	636f4361 	.word	0x636f4361
 80057dc:	3fd287a7 	.word	0x3fd287a7
 80057e0:	8b60c8b3 	.word	0x8b60c8b3
 80057e4:	3fc68a28 	.word	0x3fc68a28
 80057e8:	509f79fb 	.word	0x509f79fb
 80057ec:	3fd34413 	.word	0x3fd34413
 80057f0:	7ff00000 	.word	0x7ff00000
 80057f4:	0800ce5b 	.word	0x0800ce5b
 80057f8:	0800ce52 	.word	0x0800ce52
 80057fc:	0800ce51 	.word	0x0800ce51
 8005800:	3ff80000 	.word	0x3ff80000
 8005804:	0800ce88 	.word	0x0800ce88
 8005808:	0800ce60 	.word	0x0800ce60
 800580c:	2601      	movs	r6, #1
 800580e:	2300      	movs	r3, #0
 8005810:	9307      	str	r3, [sp, #28]
 8005812:	9609      	str	r6, [sp, #36]	; 0x24
 8005814:	f04f 33ff 	mov.w	r3, #4294967295
 8005818:	9304      	str	r3, [sp, #16]
 800581a:	9303      	str	r3, [sp, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	2312      	movs	r3, #18
 8005820:	920a      	str	r2, [sp, #40]	; 0x28
 8005822:	e789      	b.n	8005738 <_dtoa_r+0x250>
 8005824:	2301      	movs	r3, #1
 8005826:	9309      	str	r3, [sp, #36]	; 0x24
 8005828:	e7f4      	b.n	8005814 <_dtoa_r+0x32c>
 800582a:	2301      	movs	r3, #1
 800582c:	9304      	str	r3, [sp, #16]
 800582e:	9303      	str	r3, [sp, #12]
 8005830:	461a      	mov	r2, r3
 8005832:	e7f5      	b.n	8005820 <_dtoa_r+0x338>
 8005834:	686a      	ldr	r2, [r5, #4]
 8005836:	3201      	adds	r2, #1
 8005838:	606a      	str	r2, [r5, #4]
 800583a:	0049      	lsls	r1, r1, #1
 800583c:	e780      	b.n	8005740 <_dtoa_r+0x258>
 800583e:	2502      	movs	r5, #2
 8005840:	e7af      	b.n	80057a2 <_dtoa_r+0x2ba>
 8005842:	07f1      	lsls	r1, r6, #31
 8005844:	d508      	bpl.n	8005858 <_dtoa_r+0x370>
 8005846:	4640      	mov	r0, r8
 8005848:	4649      	mov	r1, r9
 800584a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800584e:	f7fa fedb 	bl	8000608 <__aeabi_dmul>
 8005852:	3501      	adds	r5, #1
 8005854:	4680      	mov	r8, r0
 8005856:	4689      	mov	r9, r1
 8005858:	1076      	asrs	r6, r6, #1
 800585a:	3708      	adds	r7, #8
 800585c:	e7a2      	b.n	80057a4 <_dtoa_r+0x2bc>
 800585e:	f000 809d 	beq.w	800599c <_dtoa_r+0x4b4>
 8005862:	f1cb 0600 	rsb	r6, fp, #0
 8005866:	4b9f      	ldr	r3, [pc, #636]	; (8005ae4 <_dtoa_r+0x5fc>)
 8005868:	4f9f      	ldr	r7, [pc, #636]	; (8005ae8 <_dtoa_r+0x600>)
 800586a:	f006 020f 	and.w	r2, r6, #15
 800586e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800587a:	f7fa fec5 	bl	8000608 <__aeabi_dmul>
 800587e:	e9cd 0100 	strd	r0, r1, [sp]
 8005882:	1136      	asrs	r6, r6, #4
 8005884:	2300      	movs	r3, #0
 8005886:	2502      	movs	r5, #2
 8005888:	2e00      	cmp	r6, #0
 800588a:	d17c      	bne.n	8005986 <_dtoa_r+0x49e>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d191      	bne.n	80057b4 <_dtoa_r+0x2cc>
 8005890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8084 	beq.w	80059a0 <_dtoa_r+0x4b8>
 8005898:	e9dd 8900 	ldrd	r8, r9, [sp]
 800589c:	2200      	movs	r2, #0
 800589e:	4b93      	ldr	r3, [pc, #588]	; (8005aec <_dtoa_r+0x604>)
 80058a0:	4640      	mov	r0, r8
 80058a2:	4649      	mov	r1, r9
 80058a4:	f7fb f922 	bl	8000aec <__aeabi_dcmplt>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d079      	beq.n	80059a0 <_dtoa_r+0x4b8>
 80058ac:	9b03      	ldr	r3, [sp, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d076      	beq.n	80059a0 <_dtoa_r+0x4b8>
 80058b2:	9b04      	ldr	r3, [sp, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	dd34      	ble.n	8005922 <_dtoa_r+0x43a>
 80058b8:	2200      	movs	r2, #0
 80058ba:	4b8d      	ldr	r3, [pc, #564]	; (8005af0 <_dtoa_r+0x608>)
 80058bc:	4640      	mov	r0, r8
 80058be:	4649      	mov	r1, r9
 80058c0:	f7fa fea2 	bl	8000608 <__aeabi_dmul>
 80058c4:	e9cd 0100 	strd	r0, r1, [sp]
 80058c8:	9e04      	ldr	r6, [sp, #16]
 80058ca:	f10b 37ff 	add.w	r7, fp, #4294967295
 80058ce:	3501      	adds	r5, #1
 80058d0:	4628      	mov	r0, r5
 80058d2:	f7fa fe33 	bl	800053c <__aeabi_i2d>
 80058d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058da:	f7fa fe95 	bl	8000608 <__aeabi_dmul>
 80058de:	2200      	movs	r2, #0
 80058e0:	4b84      	ldr	r3, [pc, #528]	; (8005af4 <_dtoa_r+0x60c>)
 80058e2:	f7fa fcdf 	bl	80002a4 <__adddf3>
 80058e6:	4680      	mov	r8, r0
 80058e8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80058ec:	2e00      	cmp	r6, #0
 80058ee:	d15a      	bne.n	80059a6 <_dtoa_r+0x4be>
 80058f0:	2200      	movs	r2, #0
 80058f2:	4b81      	ldr	r3, [pc, #516]	; (8005af8 <_dtoa_r+0x610>)
 80058f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058f8:	f7fa fcd2 	bl	80002a0 <__aeabi_dsub>
 80058fc:	4642      	mov	r2, r8
 80058fe:	464b      	mov	r3, r9
 8005900:	e9cd 0100 	strd	r0, r1, [sp]
 8005904:	f7fb f910 	bl	8000b28 <__aeabi_dcmpgt>
 8005908:	2800      	cmp	r0, #0
 800590a:	f040 829b 	bne.w	8005e44 <_dtoa_r+0x95c>
 800590e:	4642      	mov	r2, r8
 8005910:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005918:	f7fb f8e8 	bl	8000aec <__aeabi_dcmplt>
 800591c:	2800      	cmp	r0, #0
 800591e:	f040 828f 	bne.w	8005e40 <_dtoa_r+0x958>
 8005922:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005926:	e9cd 2300 	strd	r2, r3, [sp]
 800592a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800592c:	2b00      	cmp	r3, #0
 800592e:	f2c0 8150 	blt.w	8005bd2 <_dtoa_r+0x6ea>
 8005932:	f1bb 0f0e 	cmp.w	fp, #14
 8005936:	f300 814c 	bgt.w	8005bd2 <_dtoa_r+0x6ea>
 800593a:	4b6a      	ldr	r3, [pc, #424]	; (8005ae4 <_dtoa_r+0x5fc>)
 800593c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005940:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005946:	2b00      	cmp	r3, #0
 8005948:	f280 80da 	bge.w	8005b00 <_dtoa_r+0x618>
 800594c:	9b03      	ldr	r3, [sp, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	f300 80d6 	bgt.w	8005b00 <_dtoa_r+0x618>
 8005954:	f040 8273 	bne.w	8005e3e <_dtoa_r+0x956>
 8005958:	2200      	movs	r2, #0
 800595a:	4b67      	ldr	r3, [pc, #412]	; (8005af8 <_dtoa_r+0x610>)
 800595c:	4640      	mov	r0, r8
 800595e:	4649      	mov	r1, r9
 8005960:	f7fa fe52 	bl	8000608 <__aeabi_dmul>
 8005964:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005968:	f7fb f8d4 	bl	8000b14 <__aeabi_dcmpge>
 800596c:	9e03      	ldr	r6, [sp, #12]
 800596e:	4637      	mov	r7, r6
 8005970:	2800      	cmp	r0, #0
 8005972:	f040 824a 	bne.w	8005e0a <_dtoa_r+0x922>
 8005976:	9b02      	ldr	r3, [sp, #8]
 8005978:	9a02      	ldr	r2, [sp, #8]
 800597a:	1c5d      	adds	r5, r3, #1
 800597c:	2331      	movs	r3, #49	; 0x31
 800597e:	7013      	strb	r3, [r2, #0]
 8005980:	f10b 0b01 	add.w	fp, fp, #1
 8005984:	e245      	b.n	8005e12 <_dtoa_r+0x92a>
 8005986:	07f2      	lsls	r2, r6, #31
 8005988:	d505      	bpl.n	8005996 <_dtoa_r+0x4ae>
 800598a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800598e:	f7fa fe3b 	bl	8000608 <__aeabi_dmul>
 8005992:	3501      	adds	r5, #1
 8005994:	2301      	movs	r3, #1
 8005996:	1076      	asrs	r6, r6, #1
 8005998:	3708      	adds	r7, #8
 800599a:	e775      	b.n	8005888 <_dtoa_r+0x3a0>
 800599c:	2502      	movs	r5, #2
 800599e:	e777      	b.n	8005890 <_dtoa_r+0x3a8>
 80059a0:	465f      	mov	r7, fp
 80059a2:	9e03      	ldr	r6, [sp, #12]
 80059a4:	e794      	b.n	80058d0 <_dtoa_r+0x3e8>
 80059a6:	9a02      	ldr	r2, [sp, #8]
 80059a8:	4b4e      	ldr	r3, [pc, #312]	; (8005ae4 <_dtoa_r+0x5fc>)
 80059aa:	4432      	add	r2, r6
 80059ac:	9213      	str	r2, [sp, #76]	; 0x4c
 80059ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059b0:	1e71      	subs	r1, r6, #1
 80059b2:	2a00      	cmp	r2, #0
 80059b4:	d048      	beq.n	8005a48 <_dtoa_r+0x560>
 80059b6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	2000      	movs	r0, #0
 80059c0:	494e      	ldr	r1, [pc, #312]	; (8005afc <_dtoa_r+0x614>)
 80059c2:	f7fa ff4b 	bl	800085c <__aeabi_ddiv>
 80059c6:	4642      	mov	r2, r8
 80059c8:	464b      	mov	r3, r9
 80059ca:	f7fa fc69 	bl	80002a0 <__aeabi_dsub>
 80059ce:	9d02      	ldr	r5, [sp, #8]
 80059d0:	4680      	mov	r8, r0
 80059d2:	4689      	mov	r9, r1
 80059d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059d8:	f7fb f8c6 	bl	8000b68 <__aeabi_d2iz>
 80059dc:	4606      	mov	r6, r0
 80059de:	f7fa fdad 	bl	800053c <__aeabi_i2d>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059ea:	f7fa fc59 	bl	80002a0 <__aeabi_dsub>
 80059ee:	3630      	adds	r6, #48	; 0x30
 80059f0:	f805 6b01 	strb.w	r6, [r5], #1
 80059f4:	4642      	mov	r2, r8
 80059f6:	464b      	mov	r3, r9
 80059f8:	e9cd 0100 	strd	r0, r1, [sp]
 80059fc:	f7fb f876 	bl	8000aec <__aeabi_dcmplt>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d165      	bne.n	8005ad0 <_dtoa_r+0x5e8>
 8005a04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a08:	2000      	movs	r0, #0
 8005a0a:	4938      	ldr	r1, [pc, #224]	; (8005aec <_dtoa_r+0x604>)
 8005a0c:	f7fa fc48 	bl	80002a0 <__aeabi_dsub>
 8005a10:	4642      	mov	r2, r8
 8005a12:	464b      	mov	r3, r9
 8005a14:	f7fb f86a 	bl	8000aec <__aeabi_dcmplt>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	f040 80ba 	bne.w	8005b92 <_dtoa_r+0x6aa>
 8005a1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a20:	429d      	cmp	r5, r3
 8005a22:	f43f af7e 	beq.w	8005922 <_dtoa_r+0x43a>
 8005a26:	2200      	movs	r2, #0
 8005a28:	4b31      	ldr	r3, [pc, #196]	; (8005af0 <_dtoa_r+0x608>)
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	f7fa fdeb 	bl	8000608 <__aeabi_dmul>
 8005a32:	2200      	movs	r2, #0
 8005a34:	4680      	mov	r8, r0
 8005a36:	4689      	mov	r9, r1
 8005a38:	4b2d      	ldr	r3, [pc, #180]	; (8005af0 <_dtoa_r+0x608>)
 8005a3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a3e:	f7fa fde3 	bl	8000608 <__aeabi_dmul>
 8005a42:	e9cd 0100 	strd	r0, r1, [sp]
 8005a46:	e7c5      	b.n	80059d4 <_dtoa_r+0x4ec>
 8005a48:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	464b      	mov	r3, r9
 8005a50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a54:	f7fa fdd8 	bl	8000608 <__aeabi_dmul>
 8005a58:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a5c:	9d02      	ldr	r5, [sp, #8]
 8005a5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a62:	f7fb f881 	bl	8000b68 <__aeabi_d2iz>
 8005a66:	4606      	mov	r6, r0
 8005a68:	f7fa fd68 	bl	800053c <__aeabi_i2d>
 8005a6c:	3630      	adds	r6, #48	; 0x30
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a76:	f7fa fc13 	bl	80002a0 <__aeabi_dsub>
 8005a7a:	f805 6b01 	strb.w	r6, [r5], #1
 8005a7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a80:	42ab      	cmp	r3, r5
 8005a82:	4680      	mov	r8, r0
 8005a84:	4689      	mov	r9, r1
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	d125      	bne.n	8005ad8 <_dtoa_r+0x5f0>
 8005a8c:	4b1b      	ldr	r3, [pc, #108]	; (8005afc <_dtoa_r+0x614>)
 8005a8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a92:	f7fa fc07 	bl	80002a4 <__adddf3>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	f7fb f843 	bl	8000b28 <__aeabi_dcmpgt>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d175      	bne.n	8005b92 <_dtoa_r+0x6aa>
 8005aa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005aaa:	2000      	movs	r0, #0
 8005aac:	4913      	ldr	r1, [pc, #76]	; (8005afc <_dtoa_r+0x614>)
 8005aae:	f7fa fbf7 	bl	80002a0 <__aeabi_dsub>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4640      	mov	r0, r8
 8005ab8:	4649      	mov	r1, r9
 8005aba:	f7fb f817 	bl	8000aec <__aeabi_dcmplt>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	f43f af2f 	beq.w	8005922 <_dtoa_r+0x43a>
 8005ac4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ac8:	2b30      	cmp	r3, #48	; 0x30
 8005aca:	f105 32ff 	add.w	r2, r5, #4294967295
 8005ace:	d001      	beq.n	8005ad4 <_dtoa_r+0x5ec>
 8005ad0:	46bb      	mov	fp, r7
 8005ad2:	e04d      	b.n	8005b70 <_dtoa_r+0x688>
 8005ad4:	4615      	mov	r5, r2
 8005ad6:	e7f5      	b.n	8005ac4 <_dtoa_r+0x5dc>
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <_dtoa_r+0x608>)
 8005ada:	f7fa fd95 	bl	8000608 <__aeabi_dmul>
 8005ade:	e9cd 0100 	strd	r0, r1, [sp]
 8005ae2:	e7bc      	b.n	8005a5e <_dtoa_r+0x576>
 8005ae4:	0800ce88 	.word	0x0800ce88
 8005ae8:	0800ce60 	.word	0x0800ce60
 8005aec:	3ff00000 	.word	0x3ff00000
 8005af0:	40240000 	.word	0x40240000
 8005af4:	401c0000 	.word	0x401c0000
 8005af8:	40140000 	.word	0x40140000
 8005afc:	3fe00000 	.word	0x3fe00000
 8005b00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005b04:	9d02      	ldr	r5, [sp, #8]
 8005b06:	4642      	mov	r2, r8
 8005b08:	464b      	mov	r3, r9
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	4639      	mov	r1, r7
 8005b0e:	f7fa fea5 	bl	800085c <__aeabi_ddiv>
 8005b12:	f7fb f829 	bl	8000b68 <__aeabi_d2iz>
 8005b16:	9000      	str	r0, [sp, #0]
 8005b18:	f7fa fd10 	bl	800053c <__aeabi_i2d>
 8005b1c:	4642      	mov	r2, r8
 8005b1e:	464b      	mov	r3, r9
 8005b20:	f7fa fd72 	bl	8000608 <__aeabi_dmul>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4630      	mov	r0, r6
 8005b2a:	4639      	mov	r1, r7
 8005b2c:	f7fa fbb8 	bl	80002a0 <__aeabi_dsub>
 8005b30:	9e00      	ldr	r6, [sp, #0]
 8005b32:	9f03      	ldr	r7, [sp, #12]
 8005b34:	3630      	adds	r6, #48	; 0x30
 8005b36:	f805 6b01 	strb.w	r6, [r5], #1
 8005b3a:	9e02      	ldr	r6, [sp, #8]
 8005b3c:	1bae      	subs	r6, r5, r6
 8005b3e:	42b7      	cmp	r7, r6
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	d138      	bne.n	8005bb8 <_dtoa_r+0x6d0>
 8005b46:	f7fa fbad 	bl	80002a4 <__adddf3>
 8005b4a:	4606      	mov	r6, r0
 8005b4c:	460f      	mov	r7, r1
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4640      	mov	r0, r8
 8005b54:	4649      	mov	r1, r9
 8005b56:	f7fa ffc9 	bl	8000aec <__aeabi_dcmplt>
 8005b5a:	b9c8      	cbnz	r0, 8005b90 <_dtoa_r+0x6a8>
 8005b5c:	4632      	mov	r2, r6
 8005b5e:	463b      	mov	r3, r7
 8005b60:	4640      	mov	r0, r8
 8005b62:	4649      	mov	r1, r9
 8005b64:	f7fa ffb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b68:	b110      	cbz	r0, 8005b70 <_dtoa_r+0x688>
 8005b6a:	9b00      	ldr	r3, [sp, #0]
 8005b6c:	07db      	lsls	r3, r3, #31
 8005b6e:	d40f      	bmi.n	8005b90 <_dtoa_r+0x6a8>
 8005b70:	4651      	mov	r1, sl
 8005b72:	4620      	mov	r0, r4
 8005b74:	f000 fadb 	bl	800612e <_Bfree>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b7c:	702b      	strb	r3, [r5, #0]
 8005b7e:	f10b 0301 	add.w	r3, fp, #1
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f43f acf8 	beq.w	800557c <_dtoa_r+0x94>
 8005b8c:	601d      	str	r5, [r3, #0]
 8005b8e:	e4f5      	b.n	800557c <_dtoa_r+0x94>
 8005b90:	465f      	mov	r7, fp
 8005b92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005b96:	2a39      	cmp	r2, #57	; 0x39
 8005b98:	f105 33ff 	add.w	r3, r5, #4294967295
 8005b9c:	d106      	bne.n	8005bac <_dtoa_r+0x6c4>
 8005b9e:	9a02      	ldr	r2, [sp, #8]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d107      	bne.n	8005bb4 <_dtoa_r+0x6cc>
 8005ba4:	2330      	movs	r3, #48	; 0x30
 8005ba6:	7013      	strb	r3, [r2, #0]
 8005ba8:	3701      	adds	r7, #1
 8005baa:	4613      	mov	r3, r2
 8005bac:	781a      	ldrb	r2, [r3, #0]
 8005bae:	3201      	adds	r2, #1
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	e78d      	b.n	8005ad0 <_dtoa_r+0x5e8>
 8005bb4:	461d      	mov	r5, r3
 8005bb6:	e7ec      	b.n	8005b92 <_dtoa_r+0x6aa>
 8005bb8:	2200      	movs	r2, #0
 8005bba:	4ba4      	ldr	r3, [pc, #656]	; (8005e4c <_dtoa_r+0x964>)
 8005bbc:	f7fa fd24 	bl	8000608 <__aeabi_dmul>
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	460f      	mov	r7, r1
 8005bc8:	f7fa ff86 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d09a      	beq.n	8005b06 <_dtoa_r+0x61e>
 8005bd0:	e7ce      	b.n	8005b70 <_dtoa_r+0x688>
 8005bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bd4:	2a00      	cmp	r2, #0
 8005bd6:	f000 80cd 	beq.w	8005d74 <_dtoa_r+0x88c>
 8005bda:	9a07      	ldr	r2, [sp, #28]
 8005bdc:	2a01      	cmp	r2, #1
 8005bde:	f300 80af 	bgt.w	8005d40 <_dtoa_r+0x858>
 8005be2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005be4:	2a00      	cmp	r2, #0
 8005be6:	f000 80a7 	beq.w	8005d38 <_dtoa_r+0x850>
 8005bea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005bee:	9e08      	ldr	r6, [sp, #32]
 8005bf0:	9d05      	ldr	r5, [sp, #20]
 8005bf2:	9a05      	ldr	r2, [sp, #20]
 8005bf4:	441a      	add	r2, r3
 8005bf6:	9205      	str	r2, [sp, #20]
 8005bf8:	9a06      	ldr	r2, [sp, #24]
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	441a      	add	r2, r3
 8005bfe:	4620      	mov	r0, r4
 8005c00:	9206      	str	r2, [sp, #24]
 8005c02:	f000 fb34 	bl	800626e <__i2b>
 8005c06:	4607      	mov	r7, r0
 8005c08:	2d00      	cmp	r5, #0
 8005c0a:	dd0c      	ble.n	8005c26 <_dtoa_r+0x73e>
 8005c0c:	9b06      	ldr	r3, [sp, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	dd09      	ble.n	8005c26 <_dtoa_r+0x73e>
 8005c12:	42ab      	cmp	r3, r5
 8005c14:	9a05      	ldr	r2, [sp, #20]
 8005c16:	bfa8      	it	ge
 8005c18:	462b      	movge	r3, r5
 8005c1a:	1ad2      	subs	r2, r2, r3
 8005c1c:	9205      	str	r2, [sp, #20]
 8005c1e:	9a06      	ldr	r2, [sp, #24]
 8005c20:	1aed      	subs	r5, r5, r3
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	9306      	str	r3, [sp, #24]
 8005c26:	9b08      	ldr	r3, [sp, #32]
 8005c28:	b1f3      	cbz	r3, 8005c68 <_dtoa_r+0x780>
 8005c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80a5 	beq.w	8005d7c <_dtoa_r+0x894>
 8005c32:	2e00      	cmp	r6, #0
 8005c34:	dd10      	ble.n	8005c58 <_dtoa_r+0x770>
 8005c36:	4639      	mov	r1, r7
 8005c38:	4632      	mov	r2, r6
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 fbae 	bl	800639c <__pow5mult>
 8005c40:	4652      	mov	r2, sl
 8005c42:	4601      	mov	r1, r0
 8005c44:	4607      	mov	r7, r0
 8005c46:	4620      	mov	r0, r4
 8005c48:	f000 fb1a 	bl	8006280 <__multiply>
 8005c4c:	4651      	mov	r1, sl
 8005c4e:	4680      	mov	r8, r0
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 fa6c 	bl	800612e <_Bfree>
 8005c56:	46c2      	mov	sl, r8
 8005c58:	9b08      	ldr	r3, [sp, #32]
 8005c5a:	1b9a      	subs	r2, r3, r6
 8005c5c:	d004      	beq.n	8005c68 <_dtoa_r+0x780>
 8005c5e:	4651      	mov	r1, sl
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 fb9b 	bl	800639c <__pow5mult>
 8005c66:	4682      	mov	sl, r0
 8005c68:	2101      	movs	r1, #1
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f000 faff 	bl	800626e <__i2b>
 8005c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	4606      	mov	r6, r0
 8005c76:	f340 8083 	ble.w	8005d80 <_dtoa_r+0x898>
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	4601      	mov	r1, r0
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f000 fb8c 	bl	800639c <__pow5mult>
 8005c84:	9b07      	ldr	r3, [sp, #28]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	4606      	mov	r6, r0
 8005c8a:	dd7c      	ble.n	8005d86 <_dtoa_r+0x89e>
 8005c8c:	f04f 0800 	mov.w	r8, #0
 8005c90:	6933      	ldr	r3, [r6, #16]
 8005c92:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c96:	6918      	ldr	r0, [r3, #16]
 8005c98:	f000 fa9b 	bl	80061d2 <__hi0bits>
 8005c9c:	f1c0 0020 	rsb	r0, r0, #32
 8005ca0:	9b06      	ldr	r3, [sp, #24]
 8005ca2:	4418      	add	r0, r3
 8005ca4:	f010 001f 	ands.w	r0, r0, #31
 8005ca8:	f000 8096 	beq.w	8005dd8 <_dtoa_r+0x8f0>
 8005cac:	f1c0 0320 	rsb	r3, r0, #32
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	f340 8087 	ble.w	8005dc4 <_dtoa_r+0x8dc>
 8005cb6:	9b05      	ldr	r3, [sp, #20]
 8005cb8:	f1c0 001c 	rsb	r0, r0, #28
 8005cbc:	4403      	add	r3, r0
 8005cbe:	9305      	str	r3, [sp, #20]
 8005cc0:	9b06      	ldr	r3, [sp, #24]
 8005cc2:	4405      	add	r5, r0
 8005cc4:	4403      	add	r3, r0
 8005cc6:	9306      	str	r3, [sp, #24]
 8005cc8:	9b05      	ldr	r3, [sp, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	dd05      	ble.n	8005cda <_dtoa_r+0x7f2>
 8005cce:	4651      	mov	r1, sl
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f000 fbb0 	bl	8006438 <__lshift>
 8005cd8:	4682      	mov	sl, r0
 8005cda:	9b06      	ldr	r3, [sp, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	dd05      	ble.n	8005cec <_dtoa_r+0x804>
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 fba7 	bl	8006438 <__lshift>
 8005cea:	4606      	mov	r6, r0
 8005cec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d074      	beq.n	8005ddc <_dtoa_r+0x8f4>
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4650      	mov	r0, sl
 8005cf6:	f000 fbf0 	bl	80064da <__mcmp>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	da6e      	bge.n	8005ddc <_dtoa_r+0x8f4>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	4651      	mov	r1, sl
 8005d02:	220a      	movs	r2, #10
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 fa29 	bl	800615c <__multadd>
 8005d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d10:	4682      	mov	sl, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 81a8 	beq.w	8006068 <_dtoa_r+0xb80>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	4639      	mov	r1, r7
 8005d1c:	220a      	movs	r2, #10
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f000 fa1c 	bl	800615c <__multadd>
 8005d24:	9b04      	ldr	r3, [sp, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	4607      	mov	r7, r0
 8005d2a:	f300 80c8 	bgt.w	8005ebe <_dtoa_r+0x9d6>
 8005d2e:	9b07      	ldr	r3, [sp, #28]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	f340 80c4 	ble.w	8005ebe <_dtoa_r+0x9d6>
 8005d36:	e059      	b.n	8005dec <_dtoa_r+0x904>
 8005d38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d3e:	e756      	b.n	8005bee <_dtoa_r+0x706>
 8005d40:	9b03      	ldr	r3, [sp, #12]
 8005d42:	1e5e      	subs	r6, r3, #1
 8005d44:	9b08      	ldr	r3, [sp, #32]
 8005d46:	42b3      	cmp	r3, r6
 8005d48:	bfbf      	itttt	lt
 8005d4a:	9b08      	ldrlt	r3, [sp, #32]
 8005d4c:	9608      	strlt	r6, [sp, #32]
 8005d4e:	1af2      	sublt	r2, r6, r3
 8005d50:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8005d52:	bfb6      	itet	lt
 8005d54:	189b      	addlt	r3, r3, r2
 8005d56:	1b9e      	subge	r6, r3, r6
 8005d58:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8005d5a:	9b03      	ldr	r3, [sp, #12]
 8005d5c:	bfb8      	it	lt
 8005d5e:	2600      	movlt	r6, #0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bfb9      	ittee	lt
 8005d64:	9b05      	ldrlt	r3, [sp, #20]
 8005d66:	9a03      	ldrlt	r2, [sp, #12]
 8005d68:	9d05      	ldrge	r5, [sp, #20]
 8005d6a:	9b03      	ldrge	r3, [sp, #12]
 8005d6c:	bfbc      	itt	lt
 8005d6e:	1a9d      	sublt	r5, r3, r2
 8005d70:	2300      	movlt	r3, #0
 8005d72:	e73e      	b.n	8005bf2 <_dtoa_r+0x70a>
 8005d74:	9e08      	ldr	r6, [sp, #32]
 8005d76:	9d05      	ldr	r5, [sp, #20]
 8005d78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005d7a:	e745      	b.n	8005c08 <_dtoa_r+0x720>
 8005d7c:	9a08      	ldr	r2, [sp, #32]
 8005d7e:	e76e      	b.n	8005c5e <_dtoa_r+0x776>
 8005d80:	9b07      	ldr	r3, [sp, #28]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	dc19      	bgt.n	8005dba <_dtoa_r+0x8d2>
 8005d86:	9b00      	ldr	r3, [sp, #0]
 8005d88:	b9bb      	cbnz	r3, 8005dba <_dtoa_r+0x8d2>
 8005d8a:	9b01      	ldr	r3, [sp, #4]
 8005d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d90:	b99b      	cbnz	r3, 8005dba <_dtoa_r+0x8d2>
 8005d92:	9b01      	ldr	r3, [sp, #4]
 8005d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d98:	0d1b      	lsrs	r3, r3, #20
 8005d9a:	051b      	lsls	r3, r3, #20
 8005d9c:	b183      	cbz	r3, 8005dc0 <_dtoa_r+0x8d8>
 8005d9e:	9b05      	ldr	r3, [sp, #20]
 8005da0:	3301      	adds	r3, #1
 8005da2:	9305      	str	r3, [sp, #20]
 8005da4:	9b06      	ldr	r3, [sp, #24]
 8005da6:	3301      	adds	r3, #1
 8005da8:	9306      	str	r3, [sp, #24]
 8005daa:	f04f 0801 	mov.w	r8, #1
 8005dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f47f af6d 	bne.w	8005c90 <_dtoa_r+0x7a8>
 8005db6:	2001      	movs	r0, #1
 8005db8:	e772      	b.n	8005ca0 <_dtoa_r+0x7b8>
 8005dba:	f04f 0800 	mov.w	r8, #0
 8005dbe:	e7f6      	b.n	8005dae <_dtoa_r+0x8c6>
 8005dc0:	4698      	mov	r8, r3
 8005dc2:	e7f4      	b.n	8005dae <_dtoa_r+0x8c6>
 8005dc4:	d080      	beq.n	8005cc8 <_dtoa_r+0x7e0>
 8005dc6:	9a05      	ldr	r2, [sp, #20]
 8005dc8:	331c      	adds	r3, #28
 8005dca:	441a      	add	r2, r3
 8005dcc:	9205      	str	r2, [sp, #20]
 8005dce:	9a06      	ldr	r2, [sp, #24]
 8005dd0:	441a      	add	r2, r3
 8005dd2:	441d      	add	r5, r3
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	e776      	b.n	8005cc6 <_dtoa_r+0x7de>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	e7f4      	b.n	8005dc6 <_dtoa_r+0x8de>
 8005ddc:	9b03      	ldr	r3, [sp, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	dc36      	bgt.n	8005e50 <_dtoa_r+0x968>
 8005de2:	9b07      	ldr	r3, [sp, #28]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	dd33      	ble.n	8005e50 <_dtoa_r+0x968>
 8005de8:	9b03      	ldr	r3, [sp, #12]
 8005dea:	9304      	str	r3, [sp, #16]
 8005dec:	9b04      	ldr	r3, [sp, #16]
 8005dee:	b963      	cbnz	r3, 8005e0a <_dtoa_r+0x922>
 8005df0:	4631      	mov	r1, r6
 8005df2:	2205      	movs	r2, #5
 8005df4:	4620      	mov	r0, r4
 8005df6:	f000 f9b1 	bl	800615c <__multadd>
 8005dfa:	4601      	mov	r1, r0
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	4650      	mov	r0, sl
 8005e00:	f000 fb6b 	bl	80064da <__mcmp>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	f73f adb6 	bgt.w	8005976 <_dtoa_r+0x48e>
 8005e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e0c:	9d02      	ldr	r5, [sp, #8]
 8005e0e:	ea6f 0b03 	mvn.w	fp, r3
 8005e12:	2300      	movs	r3, #0
 8005e14:	9303      	str	r3, [sp, #12]
 8005e16:	4631      	mov	r1, r6
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 f988 	bl	800612e <_Bfree>
 8005e1e:	2f00      	cmp	r7, #0
 8005e20:	f43f aea6 	beq.w	8005b70 <_dtoa_r+0x688>
 8005e24:	9b03      	ldr	r3, [sp, #12]
 8005e26:	b12b      	cbz	r3, 8005e34 <_dtoa_r+0x94c>
 8005e28:	42bb      	cmp	r3, r7
 8005e2a:	d003      	beq.n	8005e34 <_dtoa_r+0x94c>
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f000 f97d 	bl	800612e <_Bfree>
 8005e34:	4639      	mov	r1, r7
 8005e36:	4620      	mov	r0, r4
 8005e38:	f000 f979 	bl	800612e <_Bfree>
 8005e3c:	e698      	b.n	8005b70 <_dtoa_r+0x688>
 8005e3e:	2600      	movs	r6, #0
 8005e40:	4637      	mov	r7, r6
 8005e42:	e7e2      	b.n	8005e0a <_dtoa_r+0x922>
 8005e44:	46bb      	mov	fp, r7
 8005e46:	4637      	mov	r7, r6
 8005e48:	e595      	b.n	8005976 <_dtoa_r+0x48e>
 8005e4a:	bf00      	nop
 8005e4c:	40240000 	.word	0x40240000
 8005e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e52:	bb93      	cbnz	r3, 8005eba <_dtoa_r+0x9d2>
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	9304      	str	r3, [sp, #16]
 8005e58:	9d02      	ldr	r5, [sp, #8]
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4650      	mov	r0, sl
 8005e5e:	f7ff fab5 	bl	80053cc <quorem>
 8005e62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005e66:	f805 9b01 	strb.w	r9, [r5], #1
 8005e6a:	9b02      	ldr	r3, [sp, #8]
 8005e6c:	9a04      	ldr	r2, [sp, #16]
 8005e6e:	1aeb      	subs	r3, r5, r3
 8005e70:	429a      	cmp	r2, r3
 8005e72:	f300 80dc 	bgt.w	800602e <_dtoa_r+0xb46>
 8005e76:	9b02      	ldr	r3, [sp, #8]
 8005e78:	2a01      	cmp	r2, #1
 8005e7a:	bfac      	ite	ge
 8005e7c:	189b      	addge	r3, r3, r2
 8005e7e:	3301      	addlt	r3, #1
 8005e80:	4698      	mov	r8, r3
 8005e82:	2300      	movs	r3, #0
 8005e84:	9303      	str	r3, [sp, #12]
 8005e86:	4651      	mov	r1, sl
 8005e88:	2201      	movs	r2, #1
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 fad4 	bl	8006438 <__lshift>
 8005e90:	4631      	mov	r1, r6
 8005e92:	4682      	mov	sl, r0
 8005e94:	f000 fb21 	bl	80064da <__mcmp>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	f300 808d 	bgt.w	8005fb8 <_dtoa_r+0xad0>
 8005e9e:	d103      	bne.n	8005ea8 <_dtoa_r+0x9c0>
 8005ea0:	f019 0f01 	tst.w	r9, #1
 8005ea4:	f040 8088 	bne.w	8005fb8 <_dtoa_r+0xad0>
 8005ea8:	4645      	mov	r5, r8
 8005eaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005eae:	2b30      	cmp	r3, #48	; 0x30
 8005eb0:	f105 32ff 	add.w	r2, r5, #4294967295
 8005eb4:	d1af      	bne.n	8005e16 <_dtoa_r+0x92e>
 8005eb6:	4615      	mov	r5, r2
 8005eb8:	e7f7      	b.n	8005eaa <_dtoa_r+0x9c2>
 8005eba:	9b03      	ldr	r3, [sp, #12]
 8005ebc:	9304      	str	r3, [sp, #16]
 8005ebe:	2d00      	cmp	r5, #0
 8005ec0:	dd05      	ble.n	8005ece <_dtoa_r+0x9e6>
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	462a      	mov	r2, r5
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f000 fab6 	bl	8006438 <__lshift>
 8005ecc:	4607      	mov	r7, r0
 8005ece:	f1b8 0f00 	cmp.w	r8, #0
 8005ed2:	d04c      	beq.n	8005f6e <_dtoa_r+0xa86>
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f000 f8f5 	bl	80060c6 <_Balloc>
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	3202      	adds	r2, #2
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	0092      	lsls	r2, r2, #2
 8005ee4:	f107 010c 	add.w	r1, r7, #12
 8005ee8:	300c      	adds	r0, #12
 8005eea:	f000 f8e1 	bl	80060b0 <memcpy>
 8005eee:	2201      	movs	r2, #1
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 faa0 	bl	8006438 <__lshift>
 8005ef8:	9b00      	ldr	r3, [sp, #0]
 8005efa:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005efe:	9703      	str	r7, [sp, #12]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	4607      	mov	r7, r0
 8005f06:	9305      	str	r3, [sp, #20]
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4650      	mov	r0, sl
 8005f0c:	f7ff fa5e 	bl	80053cc <quorem>
 8005f10:	9903      	ldr	r1, [sp, #12]
 8005f12:	4605      	mov	r5, r0
 8005f14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005f18:	4650      	mov	r0, sl
 8005f1a:	f000 fade 	bl	80064da <__mcmp>
 8005f1e:	463a      	mov	r2, r7
 8005f20:	9000      	str	r0, [sp, #0]
 8005f22:	4631      	mov	r1, r6
 8005f24:	4620      	mov	r0, r4
 8005f26:	f000 faf2 	bl	800650e <__mdiff>
 8005f2a:	68c3      	ldr	r3, [r0, #12]
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	bb03      	cbnz	r3, 8005f72 <_dtoa_r+0xa8a>
 8005f30:	4601      	mov	r1, r0
 8005f32:	9006      	str	r0, [sp, #24]
 8005f34:	4650      	mov	r0, sl
 8005f36:	f000 fad0 	bl	80064da <__mcmp>
 8005f3a:	9a06      	ldr	r2, [sp, #24]
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	4611      	mov	r1, r2
 8005f40:	4620      	mov	r0, r4
 8005f42:	9306      	str	r3, [sp, #24]
 8005f44:	f000 f8f3 	bl	800612e <_Bfree>
 8005f48:	9b06      	ldr	r3, [sp, #24]
 8005f4a:	b9a3      	cbnz	r3, 8005f76 <_dtoa_r+0xa8e>
 8005f4c:	9a07      	ldr	r2, [sp, #28]
 8005f4e:	b992      	cbnz	r2, 8005f76 <_dtoa_r+0xa8e>
 8005f50:	9a05      	ldr	r2, [sp, #20]
 8005f52:	b982      	cbnz	r2, 8005f76 <_dtoa_r+0xa8e>
 8005f54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005f58:	d029      	beq.n	8005fae <_dtoa_r+0xac6>
 8005f5a:	9b00      	ldr	r3, [sp, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dd01      	ble.n	8005f64 <_dtoa_r+0xa7c>
 8005f60:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8005f64:	f108 0501 	add.w	r5, r8, #1
 8005f68:	f888 9000 	strb.w	r9, [r8]
 8005f6c:	e753      	b.n	8005e16 <_dtoa_r+0x92e>
 8005f6e:	4638      	mov	r0, r7
 8005f70:	e7c2      	b.n	8005ef8 <_dtoa_r+0xa10>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e7e3      	b.n	8005f3e <_dtoa_r+0xa56>
 8005f76:	9a00      	ldr	r2, [sp, #0]
 8005f78:	2a00      	cmp	r2, #0
 8005f7a:	db04      	blt.n	8005f86 <_dtoa_r+0xa9e>
 8005f7c:	d125      	bne.n	8005fca <_dtoa_r+0xae2>
 8005f7e:	9a07      	ldr	r2, [sp, #28]
 8005f80:	bb1a      	cbnz	r2, 8005fca <_dtoa_r+0xae2>
 8005f82:	9a05      	ldr	r2, [sp, #20]
 8005f84:	bb0a      	cbnz	r2, 8005fca <_dtoa_r+0xae2>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	ddec      	ble.n	8005f64 <_dtoa_r+0xa7c>
 8005f8a:	4651      	mov	r1, sl
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f000 fa52 	bl	8006438 <__lshift>
 8005f94:	4631      	mov	r1, r6
 8005f96:	4682      	mov	sl, r0
 8005f98:	f000 fa9f 	bl	80064da <__mcmp>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	dc03      	bgt.n	8005fa8 <_dtoa_r+0xac0>
 8005fa0:	d1e0      	bne.n	8005f64 <_dtoa_r+0xa7c>
 8005fa2:	f019 0f01 	tst.w	r9, #1
 8005fa6:	d0dd      	beq.n	8005f64 <_dtoa_r+0xa7c>
 8005fa8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005fac:	d1d8      	bne.n	8005f60 <_dtoa_r+0xa78>
 8005fae:	2339      	movs	r3, #57	; 0x39
 8005fb0:	f888 3000 	strb.w	r3, [r8]
 8005fb4:	f108 0801 	add.w	r8, r8, #1
 8005fb8:	4645      	mov	r5, r8
 8005fba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fbe:	2b39      	cmp	r3, #57	; 0x39
 8005fc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8005fc4:	d03b      	beq.n	800603e <_dtoa_r+0xb56>
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	e040      	b.n	800604c <_dtoa_r+0xb64>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f108 0501 	add.w	r5, r8, #1
 8005fd0:	dd05      	ble.n	8005fde <_dtoa_r+0xaf6>
 8005fd2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005fd6:	d0ea      	beq.n	8005fae <_dtoa_r+0xac6>
 8005fd8:	f109 0901 	add.w	r9, r9, #1
 8005fdc:	e7c4      	b.n	8005f68 <_dtoa_r+0xa80>
 8005fde:	9b02      	ldr	r3, [sp, #8]
 8005fe0:	9a04      	ldr	r2, [sp, #16]
 8005fe2:	f805 9c01 	strb.w	r9, [r5, #-1]
 8005fe6:	1aeb      	subs	r3, r5, r3
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	46a8      	mov	r8, r5
 8005fec:	f43f af4b 	beq.w	8005e86 <_dtoa_r+0x99e>
 8005ff0:	4651      	mov	r1, sl
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	220a      	movs	r2, #10
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f000 f8b0 	bl	800615c <__multadd>
 8005ffc:	9b03      	ldr	r3, [sp, #12]
 8005ffe:	9903      	ldr	r1, [sp, #12]
 8006000:	42bb      	cmp	r3, r7
 8006002:	4682      	mov	sl, r0
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	f04f 020a 	mov.w	r2, #10
 800600c:	4620      	mov	r0, r4
 800600e:	d104      	bne.n	800601a <_dtoa_r+0xb32>
 8006010:	f000 f8a4 	bl	800615c <__multadd>
 8006014:	9003      	str	r0, [sp, #12]
 8006016:	4607      	mov	r7, r0
 8006018:	e776      	b.n	8005f08 <_dtoa_r+0xa20>
 800601a:	f000 f89f 	bl	800615c <__multadd>
 800601e:	2300      	movs	r3, #0
 8006020:	9003      	str	r0, [sp, #12]
 8006022:	220a      	movs	r2, #10
 8006024:	4639      	mov	r1, r7
 8006026:	4620      	mov	r0, r4
 8006028:	f000 f898 	bl	800615c <__multadd>
 800602c:	e7f3      	b.n	8006016 <_dtoa_r+0xb2e>
 800602e:	4651      	mov	r1, sl
 8006030:	2300      	movs	r3, #0
 8006032:	220a      	movs	r2, #10
 8006034:	4620      	mov	r0, r4
 8006036:	f000 f891 	bl	800615c <__multadd>
 800603a:	4682      	mov	sl, r0
 800603c:	e70d      	b.n	8005e5a <_dtoa_r+0x972>
 800603e:	9b02      	ldr	r3, [sp, #8]
 8006040:	4293      	cmp	r3, r2
 8006042:	d105      	bne.n	8006050 <_dtoa_r+0xb68>
 8006044:	9a02      	ldr	r2, [sp, #8]
 8006046:	f10b 0b01 	add.w	fp, fp, #1
 800604a:	2331      	movs	r3, #49	; 0x31
 800604c:	7013      	strb	r3, [r2, #0]
 800604e:	e6e2      	b.n	8005e16 <_dtoa_r+0x92e>
 8006050:	4615      	mov	r5, r2
 8006052:	e7b2      	b.n	8005fba <_dtoa_r+0xad2>
 8006054:	4b09      	ldr	r3, [pc, #36]	; (800607c <_dtoa_r+0xb94>)
 8006056:	f7ff baae 	b.w	80055b6 <_dtoa_r+0xce>
 800605a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800605c:	2b00      	cmp	r3, #0
 800605e:	f47f aa88 	bne.w	8005572 <_dtoa_r+0x8a>
 8006062:	4b07      	ldr	r3, [pc, #28]	; (8006080 <_dtoa_r+0xb98>)
 8006064:	f7ff baa7 	b.w	80055b6 <_dtoa_r+0xce>
 8006068:	9b04      	ldr	r3, [sp, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	f73f aef4 	bgt.w	8005e58 <_dtoa_r+0x970>
 8006070:	9b07      	ldr	r3, [sp, #28]
 8006072:	2b02      	cmp	r3, #2
 8006074:	f77f aef0 	ble.w	8005e58 <_dtoa_r+0x970>
 8006078:	e6b8      	b.n	8005dec <_dtoa_r+0x904>
 800607a:	bf00      	nop
 800607c:	0800ce50 	.word	0x0800ce50
 8006080:	0800ce52 	.word	0x0800ce52

08006084 <_localeconv_r>:
 8006084:	4b04      	ldr	r3, [pc, #16]	; (8006098 <_localeconv_r+0x14>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6a18      	ldr	r0, [r3, #32]
 800608a:	4b04      	ldr	r3, [pc, #16]	; (800609c <_localeconv_r+0x18>)
 800608c:	2800      	cmp	r0, #0
 800608e:	bf08      	it	eq
 8006090:	4618      	moveq	r0, r3
 8006092:	30f0      	adds	r0, #240	; 0xf0
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	20000004 	.word	0x20000004
 800609c:	20000068 	.word	0x20000068

080060a0 <malloc>:
 80060a0:	4b02      	ldr	r3, [pc, #8]	; (80060ac <malloc+0xc>)
 80060a2:	4601      	mov	r1, r0
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	f000 baed 	b.w	8006684 <_malloc_r>
 80060aa:	bf00      	nop
 80060ac:	20000004 	.word	0x20000004

080060b0 <memcpy>:
 80060b0:	b510      	push	{r4, lr}
 80060b2:	1e43      	subs	r3, r0, #1
 80060b4:	440a      	add	r2, r1
 80060b6:	4291      	cmp	r1, r2
 80060b8:	d100      	bne.n	80060bc <memcpy+0xc>
 80060ba:	bd10      	pop	{r4, pc}
 80060bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060c4:	e7f7      	b.n	80060b6 <memcpy+0x6>

080060c6 <_Balloc>:
 80060c6:	b570      	push	{r4, r5, r6, lr}
 80060c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060ca:	4604      	mov	r4, r0
 80060cc:	460e      	mov	r6, r1
 80060ce:	b93d      	cbnz	r5, 80060e0 <_Balloc+0x1a>
 80060d0:	2010      	movs	r0, #16
 80060d2:	f7ff ffe5 	bl	80060a0 <malloc>
 80060d6:	6260      	str	r0, [r4, #36]	; 0x24
 80060d8:	6045      	str	r5, [r0, #4]
 80060da:	6085      	str	r5, [r0, #8]
 80060dc:	6005      	str	r5, [r0, #0]
 80060de:	60c5      	str	r5, [r0, #12]
 80060e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80060e2:	68eb      	ldr	r3, [r5, #12]
 80060e4:	b183      	cbz	r3, 8006108 <_Balloc+0x42>
 80060e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80060ee:	b9b8      	cbnz	r0, 8006120 <_Balloc+0x5a>
 80060f0:	2101      	movs	r1, #1
 80060f2:	fa01 f506 	lsl.w	r5, r1, r6
 80060f6:	1d6a      	adds	r2, r5, #5
 80060f8:	0092      	lsls	r2, r2, #2
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 fab4 	bl	8006668 <_calloc_r>
 8006100:	b160      	cbz	r0, 800611c <_Balloc+0x56>
 8006102:	6046      	str	r6, [r0, #4]
 8006104:	6085      	str	r5, [r0, #8]
 8006106:	e00e      	b.n	8006126 <_Balloc+0x60>
 8006108:	2221      	movs	r2, #33	; 0x21
 800610a:	2104      	movs	r1, #4
 800610c:	4620      	mov	r0, r4
 800610e:	f000 faab 	bl	8006668 <_calloc_r>
 8006112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006114:	60e8      	str	r0, [r5, #12]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e4      	bne.n	80060e6 <_Balloc+0x20>
 800611c:	2000      	movs	r0, #0
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	6802      	ldr	r2, [r0, #0]
 8006122:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006126:	2300      	movs	r3, #0
 8006128:	6103      	str	r3, [r0, #16]
 800612a:	60c3      	str	r3, [r0, #12]
 800612c:	bd70      	pop	{r4, r5, r6, pc}

0800612e <_Bfree>:
 800612e:	b570      	push	{r4, r5, r6, lr}
 8006130:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006132:	4606      	mov	r6, r0
 8006134:	460d      	mov	r5, r1
 8006136:	b93c      	cbnz	r4, 8006148 <_Bfree+0x1a>
 8006138:	2010      	movs	r0, #16
 800613a:	f7ff ffb1 	bl	80060a0 <malloc>
 800613e:	6270      	str	r0, [r6, #36]	; 0x24
 8006140:	6044      	str	r4, [r0, #4]
 8006142:	6084      	str	r4, [r0, #8]
 8006144:	6004      	str	r4, [r0, #0]
 8006146:	60c4      	str	r4, [r0, #12]
 8006148:	b13d      	cbz	r5, 800615a <_Bfree+0x2c>
 800614a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800614c:	686a      	ldr	r2, [r5, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006154:	6029      	str	r1, [r5, #0]
 8006156:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800615a:	bd70      	pop	{r4, r5, r6, pc}

0800615c <__multadd>:
 800615c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006160:	690d      	ldr	r5, [r1, #16]
 8006162:	461f      	mov	r7, r3
 8006164:	4606      	mov	r6, r0
 8006166:	460c      	mov	r4, r1
 8006168:	f101 0e14 	add.w	lr, r1, #20
 800616c:	2300      	movs	r3, #0
 800616e:	f8de 0000 	ldr.w	r0, [lr]
 8006172:	b281      	uxth	r1, r0
 8006174:	fb02 7101 	mla	r1, r2, r1, r7
 8006178:	0c0f      	lsrs	r7, r1, #16
 800617a:	0c00      	lsrs	r0, r0, #16
 800617c:	fb02 7000 	mla	r0, r2, r0, r7
 8006180:	b289      	uxth	r1, r1
 8006182:	3301      	adds	r3, #1
 8006184:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006188:	429d      	cmp	r5, r3
 800618a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800618e:	f84e 1b04 	str.w	r1, [lr], #4
 8006192:	dcec      	bgt.n	800616e <__multadd+0x12>
 8006194:	b1d7      	cbz	r7, 80061cc <__multadd+0x70>
 8006196:	68a3      	ldr	r3, [r4, #8]
 8006198:	429d      	cmp	r5, r3
 800619a:	db12      	blt.n	80061c2 <__multadd+0x66>
 800619c:	6861      	ldr	r1, [r4, #4]
 800619e:	4630      	mov	r0, r6
 80061a0:	3101      	adds	r1, #1
 80061a2:	f7ff ff90 	bl	80060c6 <_Balloc>
 80061a6:	6922      	ldr	r2, [r4, #16]
 80061a8:	3202      	adds	r2, #2
 80061aa:	f104 010c 	add.w	r1, r4, #12
 80061ae:	4680      	mov	r8, r0
 80061b0:	0092      	lsls	r2, r2, #2
 80061b2:	300c      	adds	r0, #12
 80061b4:	f7ff ff7c 	bl	80060b0 <memcpy>
 80061b8:	4621      	mov	r1, r4
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7ff ffb7 	bl	800612e <_Bfree>
 80061c0:	4644      	mov	r4, r8
 80061c2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061c6:	3501      	adds	r5, #1
 80061c8:	615f      	str	r7, [r3, #20]
 80061ca:	6125      	str	r5, [r4, #16]
 80061cc:	4620      	mov	r0, r4
 80061ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080061d2 <__hi0bits>:
 80061d2:	0c02      	lsrs	r2, r0, #16
 80061d4:	0412      	lsls	r2, r2, #16
 80061d6:	4603      	mov	r3, r0
 80061d8:	b9b2      	cbnz	r2, 8006208 <__hi0bits+0x36>
 80061da:	0403      	lsls	r3, r0, #16
 80061dc:	2010      	movs	r0, #16
 80061de:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80061e2:	bf04      	itt	eq
 80061e4:	021b      	lsleq	r3, r3, #8
 80061e6:	3008      	addeq	r0, #8
 80061e8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80061ec:	bf04      	itt	eq
 80061ee:	011b      	lsleq	r3, r3, #4
 80061f0:	3004      	addeq	r0, #4
 80061f2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80061f6:	bf04      	itt	eq
 80061f8:	009b      	lsleq	r3, r3, #2
 80061fa:	3002      	addeq	r0, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	db06      	blt.n	800620e <__hi0bits+0x3c>
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	d503      	bpl.n	800620c <__hi0bits+0x3a>
 8006204:	3001      	adds	r0, #1
 8006206:	4770      	bx	lr
 8006208:	2000      	movs	r0, #0
 800620a:	e7e8      	b.n	80061de <__hi0bits+0xc>
 800620c:	2020      	movs	r0, #32
 800620e:	4770      	bx	lr

08006210 <__lo0bits>:
 8006210:	6803      	ldr	r3, [r0, #0]
 8006212:	f013 0207 	ands.w	r2, r3, #7
 8006216:	4601      	mov	r1, r0
 8006218:	d00b      	beq.n	8006232 <__lo0bits+0x22>
 800621a:	07da      	lsls	r2, r3, #31
 800621c:	d423      	bmi.n	8006266 <__lo0bits+0x56>
 800621e:	0798      	lsls	r0, r3, #30
 8006220:	bf49      	itett	mi
 8006222:	085b      	lsrmi	r3, r3, #1
 8006224:	089b      	lsrpl	r3, r3, #2
 8006226:	2001      	movmi	r0, #1
 8006228:	600b      	strmi	r3, [r1, #0]
 800622a:	bf5c      	itt	pl
 800622c:	600b      	strpl	r3, [r1, #0]
 800622e:	2002      	movpl	r0, #2
 8006230:	4770      	bx	lr
 8006232:	b298      	uxth	r0, r3
 8006234:	b9a8      	cbnz	r0, 8006262 <__lo0bits+0x52>
 8006236:	0c1b      	lsrs	r3, r3, #16
 8006238:	2010      	movs	r0, #16
 800623a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800623e:	bf04      	itt	eq
 8006240:	0a1b      	lsreq	r3, r3, #8
 8006242:	3008      	addeq	r0, #8
 8006244:	071a      	lsls	r2, r3, #28
 8006246:	bf04      	itt	eq
 8006248:	091b      	lsreq	r3, r3, #4
 800624a:	3004      	addeq	r0, #4
 800624c:	079a      	lsls	r2, r3, #30
 800624e:	bf04      	itt	eq
 8006250:	089b      	lsreq	r3, r3, #2
 8006252:	3002      	addeq	r0, #2
 8006254:	07da      	lsls	r2, r3, #31
 8006256:	d402      	bmi.n	800625e <__lo0bits+0x4e>
 8006258:	085b      	lsrs	r3, r3, #1
 800625a:	d006      	beq.n	800626a <__lo0bits+0x5a>
 800625c:	3001      	adds	r0, #1
 800625e:	600b      	str	r3, [r1, #0]
 8006260:	4770      	bx	lr
 8006262:	4610      	mov	r0, r2
 8006264:	e7e9      	b.n	800623a <__lo0bits+0x2a>
 8006266:	2000      	movs	r0, #0
 8006268:	4770      	bx	lr
 800626a:	2020      	movs	r0, #32
 800626c:	4770      	bx	lr

0800626e <__i2b>:
 800626e:	b510      	push	{r4, lr}
 8006270:	460c      	mov	r4, r1
 8006272:	2101      	movs	r1, #1
 8006274:	f7ff ff27 	bl	80060c6 <_Balloc>
 8006278:	2201      	movs	r2, #1
 800627a:	6144      	str	r4, [r0, #20]
 800627c:	6102      	str	r2, [r0, #16]
 800627e:	bd10      	pop	{r4, pc}

08006280 <__multiply>:
 8006280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	4614      	mov	r4, r2
 8006286:	690a      	ldr	r2, [r1, #16]
 8006288:	6923      	ldr	r3, [r4, #16]
 800628a:	429a      	cmp	r2, r3
 800628c:	bfb8      	it	lt
 800628e:	460b      	movlt	r3, r1
 8006290:	4689      	mov	r9, r1
 8006292:	bfbc      	itt	lt
 8006294:	46a1      	movlt	r9, r4
 8006296:	461c      	movlt	r4, r3
 8006298:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800629c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80062a0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80062a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80062a8:	eb07 060a 	add.w	r6, r7, sl
 80062ac:	429e      	cmp	r6, r3
 80062ae:	bfc8      	it	gt
 80062b0:	3101      	addgt	r1, #1
 80062b2:	f7ff ff08 	bl	80060c6 <_Balloc>
 80062b6:	f100 0514 	add.w	r5, r0, #20
 80062ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062be:	462b      	mov	r3, r5
 80062c0:	2200      	movs	r2, #0
 80062c2:	4543      	cmp	r3, r8
 80062c4:	d316      	bcc.n	80062f4 <__multiply+0x74>
 80062c6:	f104 0214 	add.w	r2, r4, #20
 80062ca:	f109 0114 	add.w	r1, r9, #20
 80062ce:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80062d2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	9c01      	ldr	r4, [sp, #4]
 80062da:	4294      	cmp	r4, r2
 80062dc:	4613      	mov	r3, r2
 80062de:	d80c      	bhi.n	80062fa <__multiply+0x7a>
 80062e0:	2e00      	cmp	r6, #0
 80062e2:	dd03      	ble.n	80062ec <__multiply+0x6c>
 80062e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d054      	beq.n	8006396 <__multiply+0x116>
 80062ec:	6106      	str	r6, [r0, #16]
 80062ee:	b003      	add	sp, #12
 80062f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f4:	f843 2b04 	str.w	r2, [r3], #4
 80062f8:	e7e3      	b.n	80062c2 <__multiply+0x42>
 80062fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80062fe:	3204      	adds	r2, #4
 8006300:	f1ba 0f00 	cmp.w	sl, #0
 8006304:	d020      	beq.n	8006348 <__multiply+0xc8>
 8006306:	46ae      	mov	lr, r5
 8006308:	4689      	mov	r9, r1
 800630a:	f04f 0c00 	mov.w	ip, #0
 800630e:	f859 4b04 	ldr.w	r4, [r9], #4
 8006312:	f8be b000 	ldrh.w	fp, [lr]
 8006316:	b2a3      	uxth	r3, r4
 8006318:	fb0a b303 	mla	r3, sl, r3, fp
 800631c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006320:	f8de 4000 	ldr.w	r4, [lr]
 8006324:	4463      	add	r3, ip
 8006326:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800632a:	fb0a c40b 	mla	r4, sl, fp, ip
 800632e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006332:	b29b      	uxth	r3, r3
 8006334:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006338:	454f      	cmp	r7, r9
 800633a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800633e:	f84e 3b04 	str.w	r3, [lr], #4
 8006342:	d8e4      	bhi.n	800630e <__multiply+0x8e>
 8006344:	f8ce c000 	str.w	ip, [lr]
 8006348:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800634c:	f1b9 0f00 	cmp.w	r9, #0
 8006350:	d01f      	beq.n	8006392 <__multiply+0x112>
 8006352:	682b      	ldr	r3, [r5, #0]
 8006354:	46ae      	mov	lr, r5
 8006356:	468c      	mov	ip, r1
 8006358:	f04f 0a00 	mov.w	sl, #0
 800635c:	f8bc 4000 	ldrh.w	r4, [ip]
 8006360:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006364:	fb09 b404 	mla	r4, r9, r4, fp
 8006368:	44a2      	add	sl, r4
 800636a:	b29b      	uxth	r3, r3
 800636c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006370:	f84e 3b04 	str.w	r3, [lr], #4
 8006374:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006378:	f8be 4000 	ldrh.w	r4, [lr]
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	fb09 4303 	mla	r3, r9, r3, r4
 8006382:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8006386:	4567      	cmp	r7, ip
 8006388:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800638c:	d8e6      	bhi.n	800635c <__multiply+0xdc>
 800638e:	f8ce 3000 	str.w	r3, [lr]
 8006392:	3504      	adds	r5, #4
 8006394:	e7a0      	b.n	80062d8 <__multiply+0x58>
 8006396:	3e01      	subs	r6, #1
 8006398:	e7a2      	b.n	80062e0 <__multiply+0x60>
	...

0800639c <__pow5mult>:
 800639c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063a0:	4615      	mov	r5, r2
 80063a2:	f012 0203 	ands.w	r2, r2, #3
 80063a6:	4606      	mov	r6, r0
 80063a8:	460f      	mov	r7, r1
 80063aa:	d007      	beq.n	80063bc <__pow5mult+0x20>
 80063ac:	3a01      	subs	r2, #1
 80063ae:	4c21      	ldr	r4, [pc, #132]	; (8006434 <__pow5mult+0x98>)
 80063b0:	2300      	movs	r3, #0
 80063b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063b6:	f7ff fed1 	bl	800615c <__multadd>
 80063ba:	4607      	mov	r7, r0
 80063bc:	10ad      	asrs	r5, r5, #2
 80063be:	d035      	beq.n	800642c <__pow5mult+0x90>
 80063c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80063c2:	b93c      	cbnz	r4, 80063d4 <__pow5mult+0x38>
 80063c4:	2010      	movs	r0, #16
 80063c6:	f7ff fe6b 	bl	80060a0 <malloc>
 80063ca:	6270      	str	r0, [r6, #36]	; 0x24
 80063cc:	6044      	str	r4, [r0, #4]
 80063ce:	6084      	str	r4, [r0, #8]
 80063d0:	6004      	str	r4, [r0, #0]
 80063d2:	60c4      	str	r4, [r0, #12]
 80063d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80063d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063dc:	b94c      	cbnz	r4, 80063f2 <__pow5mult+0x56>
 80063de:	f240 2171 	movw	r1, #625	; 0x271
 80063e2:	4630      	mov	r0, r6
 80063e4:	f7ff ff43 	bl	800626e <__i2b>
 80063e8:	2300      	movs	r3, #0
 80063ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80063ee:	4604      	mov	r4, r0
 80063f0:	6003      	str	r3, [r0, #0]
 80063f2:	f04f 0800 	mov.w	r8, #0
 80063f6:	07eb      	lsls	r3, r5, #31
 80063f8:	d50a      	bpl.n	8006410 <__pow5mult+0x74>
 80063fa:	4639      	mov	r1, r7
 80063fc:	4622      	mov	r2, r4
 80063fe:	4630      	mov	r0, r6
 8006400:	f7ff ff3e 	bl	8006280 <__multiply>
 8006404:	4639      	mov	r1, r7
 8006406:	4681      	mov	r9, r0
 8006408:	4630      	mov	r0, r6
 800640a:	f7ff fe90 	bl	800612e <_Bfree>
 800640e:	464f      	mov	r7, r9
 8006410:	106d      	asrs	r5, r5, #1
 8006412:	d00b      	beq.n	800642c <__pow5mult+0x90>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	b938      	cbnz	r0, 8006428 <__pow5mult+0x8c>
 8006418:	4622      	mov	r2, r4
 800641a:	4621      	mov	r1, r4
 800641c:	4630      	mov	r0, r6
 800641e:	f7ff ff2f 	bl	8006280 <__multiply>
 8006422:	6020      	str	r0, [r4, #0]
 8006424:	f8c0 8000 	str.w	r8, [r0]
 8006428:	4604      	mov	r4, r0
 800642a:	e7e4      	b.n	80063f6 <__pow5mult+0x5a>
 800642c:	4638      	mov	r0, r7
 800642e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006432:	bf00      	nop
 8006434:	0800cf50 	.word	0x0800cf50

08006438 <__lshift>:
 8006438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800643c:	460c      	mov	r4, r1
 800643e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	6849      	ldr	r1, [r1, #4]
 8006446:	eb0a 0903 	add.w	r9, sl, r3
 800644a:	68a3      	ldr	r3, [r4, #8]
 800644c:	4607      	mov	r7, r0
 800644e:	4616      	mov	r6, r2
 8006450:	f109 0501 	add.w	r5, r9, #1
 8006454:	42ab      	cmp	r3, r5
 8006456:	db31      	blt.n	80064bc <__lshift+0x84>
 8006458:	4638      	mov	r0, r7
 800645a:	f7ff fe34 	bl	80060c6 <_Balloc>
 800645e:	2200      	movs	r2, #0
 8006460:	4680      	mov	r8, r0
 8006462:	f100 0314 	add.w	r3, r0, #20
 8006466:	4611      	mov	r1, r2
 8006468:	4552      	cmp	r2, sl
 800646a:	db2a      	blt.n	80064c2 <__lshift+0x8a>
 800646c:	6920      	ldr	r0, [r4, #16]
 800646e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006472:	f104 0114 	add.w	r1, r4, #20
 8006476:	f016 021f 	ands.w	r2, r6, #31
 800647a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800647e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006482:	d022      	beq.n	80064ca <__lshift+0x92>
 8006484:	f1c2 0c20 	rsb	ip, r2, #32
 8006488:	2000      	movs	r0, #0
 800648a:	680e      	ldr	r6, [r1, #0]
 800648c:	4096      	lsls	r6, r2
 800648e:	4330      	orrs	r0, r6
 8006490:	f843 0b04 	str.w	r0, [r3], #4
 8006494:	f851 0b04 	ldr.w	r0, [r1], #4
 8006498:	458e      	cmp	lr, r1
 800649a:	fa20 f00c 	lsr.w	r0, r0, ip
 800649e:	d8f4      	bhi.n	800648a <__lshift+0x52>
 80064a0:	6018      	str	r0, [r3, #0]
 80064a2:	b108      	cbz	r0, 80064a8 <__lshift+0x70>
 80064a4:	f109 0502 	add.w	r5, r9, #2
 80064a8:	3d01      	subs	r5, #1
 80064aa:	4638      	mov	r0, r7
 80064ac:	f8c8 5010 	str.w	r5, [r8, #16]
 80064b0:	4621      	mov	r1, r4
 80064b2:	f7ff fe3c 	bl	800612e <_Bfree>
 80064b6:	4640      	mov	r0, r8
 80064b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064bc:	3101      	adds	r1, #1
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	e7c8      	b.n	8006454 <__lshift+0x1c>
 80064c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80064c6:	3201      	adds	r2, #1
 80064c8:	e7ce      	b.n	8006468 <__lshift+0x30>
 80064ca:	3b04      	subs	r3, #4
 80064cc:	f851 2b04 	ldr.w	r2, [r1], #4
 80064d0:	f843 2f04 	str.w	r2, [r3, #4]!
 80064d4:	458e      	cmp	lr, r1
 80064d6:	d8f9      	bhi.n	80064cc <__lshift+0x94>
 80064d8:	e7e6      	b.n	80064a8 <__lshift+0x70>

080064da <__mcmp>:
 80064da:	6903      	ldr	r3, [r0, #16]
 80064dc:	690a      	ldr	r2, [r1, #16]
 80064de:	1a9b      	subs	r3, r3, r2
 80064e0:	b530      	push	{r4, r5, lr}
 80064e2:	d10c      	bne.n	80064fe <__mcmp+0x24>
 80064e4:	0092      	lsls	r2, r2, #2
 80064e6:	3014      	adds	r0, #20
 80064e8:	3114      	adds	r1, #20
 80064ea:	1884      	adds	r4, r0, r2
 80064ec:	4411      	add	r1, r2
 80064ee:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80064f2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80064f6:	4295      	cmp	r5, r2
 80064f8:	d003      	beq.n	8006502 <__mcmp+0x28>
 80064fa:	d305      	bcc.n	8006508 <__mcmp+0x2e>
 80064fc:	2301      	movs	r3, #1
 80064fe:	4618      	mov	r0, r3
 8006500:	bd30      	pop	{r4, r5, pc}
 8006502:	42a0      	cmp	r0, r4
 8006504:	d3f3      	bcc.n	80064ee <__mcmp+0x14>
 8006506:	e7fa      	b.n	80064fe <__mcmp+0x24>
 8006508:	f04f 33ff 	mov.w	r3, #4294967295
 800650c:	e7f7      	b.n	80064fe <__mcmp+0x24>

0800650e <__mdiff>:
 800650e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006512:	460d      	mov	r5, r1
 8006514:	4607      	mov	r7, r0
 8006516:	4611      	mov	r1, r2
 8006518:	4628      	mov	r0, r5
 800651a:	4614      	mov	r4, r2
 800651c:	f7ff ffdd 	bl	80064da <__mcmp>
 8006520:	1e06      	subs	r6, r0, #0
 8006522:	d108      	bne.n	8006536 <__mdiff+0x28>
 8006524:	4631      	mov	r1, r6
 8006526:	4638      	mov	r0, r7
 8006528:	f7ff fdcd 	bl	80060c6 <_Balloc>
 800652c:	2301      	movs	r3, #1
 800652e:	6103      	str	r3, [r0, #16]
 8006530:	6146      	str	r6, [r0, #20]
 8006532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006536:	bfa4      	itt	ge
 8006538:	4623      	movge	r3, r4
 800653a:	462c      	movge	r4, r5
 800653c:	4638      	mov	r0, r7
 800653e:	6861      	ldr	r1, [r4, #4]
 8006540:	bfa6      	itte	ge
 8006542:	461d      	movge	r5, r3
 8006544:	2600      	movge	r6, #0
 8006546:	2601      	movlt	r6, #1
 8006548:	f7ff fdbd 	bl	80060c6 <_Balloc>
 800654c:	692b      	ldr	r3, [r5, #16]
 800654e:	60c6      	str	r6, [r0, #12]
 8006550:	6926      	ldr	r6, [r4, #16]
 8006552:	f105 0914 	add.w	r9, r5, #20
 8006556:	f104 0214 	add.w	r2, r4, #20
 800655a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800655e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006562:	f100 0514 	add.w	r5, r0, #20
 8006566:	f04f 0c00 	mov.w	ip, #0
 800656a:	f852 ab04 	ldr.w	sl, [r2], #4
 800656e:	f859 4b04 	ldr.w	r4, [r9], #4
 8006572:	fa1c f18a 	uxtah	r1, ip, sl
 8006576:	b2a3      	uxth	r3, r4
 8006578:	1ac9      	subs	r1, r1, r3
 800657a:	0c23      	lsrs	r3, r4, #16
 800657c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006580:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006584:	b289      	uxth	r1, r1
 8006586:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800658a:	45c8      	cmp	r8, r9
 800658c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006590:	4696      	mov	lr, r2
 8006592:	f845 3b04 	str.w	r3, [r5], #4
 8006596:	d8e8      	bhi.n	800656a <__mdiff+0x5c>
 8006598:	45be      	cmp	lr, r7
 800659a:	d305      	bcc.n	80065a8 <__mdiff+0x9a>
 800659c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80065a0:	b18b      	cbz	r3, 80065c6 <__mdiff+0xb8>
 80065a2:	6106      	str	r6, [r0, #16]
 80065a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a8:	f85e 1b04 	ldr.w	r1, [lr], #4
 80065ac:	fa1c f381 	uxtah	r3, ip, r1
 80065b0:	141a      	asrs	r2, r3, #16
 80065b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065c0:	f845 3b04 	str.w	r3, [r5], #4
 80065c4:	e7e8      	b.n	8006598 <__mdiff+0x8a>
 80065c6:	3e01      	subs	r6, #1
 80065c8:	e7e8      	b.n	800659c <__mdiff+0x8e>

080065ca <__d2b>:
 80065ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065ce:	460e      	mov	r6, r1
 80065d0:	2101      	movs	r1, #1
 80065d2:	ec59 8b10 	vmov	r8, r9, d0
 80065d6:	4615      	mov	r5, r2
 80065d8:	f7ff fd75 	bl	80060c6 <_Balloc>
 80065dc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80065e0:	4607      	mov	r7, r0
 80065e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065e6:	bb34      	cbnz	r4, 8006636 <__d2b+0x6c>
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	f1b8 0f00 	cmp.w	r8, #0
 80065ee:	d027      	beq.n	8006640 <__d2b+0x76>
 80065f0:	a802      	add	r0, sp, #8
 80065f2:	f840 8d08 	str.w	r8, [r0, #-8]!
 80065f6:	f7ff fe0b 	bl	8006210 <__lo0bits>
 80065fa:	9900      	ldr	r1, [sp, #0]
 80065fc:	b1f0      	cbz	r0, 800663c <__d2b+0x72>
 80065fe:	9a01      	ldr	r2, [sp, #4]
 8006600:	f1c0 0320 	rsb	r3, r0, #32
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	430b      	orrs	r3, r1
 800660a:	40c2      	lsrs	r2, r0
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	9201      	str	r2, [sp, #4]
 8006610:	9b01      	ldr	r3, [sp, #4]
 8006612:	61bb      	str	r3, [r7, #24]
 8006614:	2b00      	cmp	r3, #0
 8006616:	bf14      	ite	ne
 8006618:	2102      	movne	r1, #2
 800661a:	2101      	moveq	r1, #1
 800661c:	6139      	str	r1, [r7, #16]
 800661e:	b1c4      	cbz	r4, 8006652 <__d2b+0x88>
 8006620:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006624:	4404      	add	r4, r0
 8006626:	6034      	str	r4, [r6, #0]
 8006628:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800662c:	6028      	str	r0, [r5, #0]
 800662e:	4638      	mov	r0, r7
 8006630:	b003      	add	sp, #12
 8006632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800663a:	e7d5      	b.n	80065e8 <__d2b+0x1e>
 800663c:	6179      	str	r1, [r7, #20]
 800663e:	e7e7      	b.n	8006610 <__d2b+0x46>
 8006640:	a801      	add	r0, sp, #4
 8006642:	f7ff fde5 	bl	8006210 <__lo0bits>
 8006646:	9b01      	ldr	r3, [sp, #4]
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	2101      	movs	r1, #1
 800664c:	6139      	str	r1, [r7, #16]
 800664e:	3020      	adds	r0, #32
 8006650:	e7e5      	b.n	800661e <__d2b+0x54>
 8006652:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006656:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800665a:	6030      	str	r0, [r6, #0]
 800665c:	6918      	ldr	r0, [r3, #16]
 800665e:	f7ff fdb8 	bl	80061d2 <__hi0bits>
 8006662:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006666:	e7e1      	b.n	800662c <__d2b+0x62>

08006668 <_calloc_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	fb02 f401 	mul.w	r4, r2, r1
 800666e:	4621      	mov	r1, r4
 8006670:	f000 f808 	bl	8006684 <_malloc_r>
 8006674:	4605      	mov	r5, r0
 8006676:	b118      	cbz	r0, 8006680 <_calloc_r+0x18>
 8006678:	4622      	mov	r2, r4
 800667a:	2100      	movs	r1, #0
 800667c:	f7fe fb52 	bl	8004d24 <memset>
 8006680:	4628      	mov	r0, r5
 8006682:	bd38      	pop	{r3, r4, r5, pc}

08006684 <_malloc_r>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	1ccd      	adds	r5, r1, #3
 8006688:	f025 0503 	bic.w	r5, r5, #3
 800668c:	3508      	adds	r5, #8
 800668e:	2d0c      	cmp	r5, #12
 8006690:	bf38      	it	cc
 8006692:	250c      	movcc	r5, #12
 8006694:	2d00      	cmp	r5, #0
 8006696:	4606      	mov	r6, r0
 8006698:	db01      	blt.n	800669e <_malloc_r+0x1a>
 800669a:	42a9      	cmp	r1, r5
 800669c:	d903      	bls.n	80066a6 <_malloc_r+0x22>
 800669e:	230c      	movs	r3, #12
 80066a0:	6033      	str	r3, [r6, #0]
 80066a2:	2000      	movs	r0, #0
 80066a4:	bd70      	pop	{r4, r5, r6, pc}
 80066a6:	f000 f86d 	bl	8006784 <__malloc_lock>
 80066aa:	4a23      	ldr	r2, [pc, #140]	; (8006738 <_malloc_r+0xb4>)
 80066ac:	6814      	ldr	r4, [r2, #0]
 80066ae:	4621      	mov	r1, r4
 80066b0:	b991      	cbnz	r1, 80066d8 <_malloc_r+0x54>
 80066b2:	4c22      	ldr	r4, [pc, #136]	; (800673c <_malloc_r+0xb8>)
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	b91b      	cbnz	r3, 80066c0 <_malloc_r+0x3c>
 80066b8:	4630      	mov	r0, r6
 80066ba:	f000 f841 	bl	8006740 <_sbrk_r>
 80066be:	6020      	str	r0, [r4, #0]
 80066c0:	4629      	mov	r1, r5
 80066c2:	4630      	mov	r0, r6
 80066c4:	f000 f83c 	bl	8006740 <_sbrk_r>
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	d126      	bne.n	800671a <_malloc_r+0x96>
 80066cc:	230c      	movs	r3, #12
 80066ce:	6033      	str	r3, [r6, #0]
 80066d0:	4630      	mov	r0, r6
 80066d2:	f000 f858 	bl	8006786 <__malloc_unlock>
 80066d6:	e7e4      	b.n	80066a2 <_malloc_r+0x1e>
 80066d8:	680b      	ldr	r3, [r1, #0]
 80066da:	1b5b      	subs	r3, r3, r5
 80066dc:	d41a      	bmi.n	8006714 <_malloc_r+0x90>
 80066de:	2b0b      	cmp	r3, #11
 80066e0:	d90f      	bls.n	8006702 <_malloc_r+0x7e>
 80066e2:	600b      	str	r3, [r1, #0]
 80066e4:	50cd      	str	r5, [r1, r3]
 80066e6:	18cc      	adds	r4, r1, r3
 80066e8:	4630      	mov	r0, r6
 80066ea:	f000 f84c 	bl	8006786 <__malloc_unlock>
 80066ee:	f104 000b 	add.w	r0, r4, #11
 80066f2:	1d23      	adds	r3, r4, #4
 80066f4:	f020 0007 	bic.w	r0, r0, #7
 80066f8:	1ac3      	subs	r3, r0, r3
 80066fa:	d01b      	beq.n	8006734 <_malloc_r+0xb0>
 80066fc:	425a      	negs	r2, r3
 80066fe:	50e2      	str	r2, [r4, r3]
 8006700:	bd70      	pop	{r4, r5, r6, pc}
 8006702:	428c      	cmp	r4, r1
 8006704:	bf0d      	iteet	eq
 8006706:	6863      	ldreq	r3, [r4, #4]
 8006708:	684b      	ldrne	r3, [r1, #4]
 800670a:	6063      	strne	r3, [r4, #4]
 800670c:	6013      	streq	r3, [r2, #0]
 800670e:	bf18      	it	ne
 8006710:	460c      	movne	r4, r1
 8006712:	e7e9      	b.n	80066e8 <_malloc_r+0x64>
 8006714:	460c      	mov	r4, r1
 8006716:	6849      	ldr	r1, [r1, #4]
 8006718:	e7ca      	b.n	80066b0 <_malloc_r+0x2c>
 800671a:	1cc4      	adds	r4, r0, #3
 800671c:	f024 0403 	bic.w	r4, r4, #3
 8006720:	42a0      	cmp	r0, r4
 8006722:	d005      	beq.n	8006730 <_malloc_r+0xac>
 8006724:	1a21      	subs	r1, r4, r0
 8006726:	4630      	mov	r0, r6
 8006728:	f000 f80a 	bl	8006740 <_sbrk_r>
 800672c:	3001      	adds	r0, #1
 800672e:	d0cd      	beq.n	80066cc <_malloc_r+0x48>
 8006730:	6025      	str	r5, [r4, #0]
 8006732:	e7d9      	b.n	80066e8 <_malloc_r+0x64>
 8006734:	bd70      	pop	{r4, r5, r6, pc}
 8006736:	bf00      	nop
 8006738:	2000c224 	.word	0x2000c224
 800673c:	2000c228 	.word	0x2000c228

08006740 <_sbrk_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4c06      	ldr	r4, [pc, #24]	; (800675c <_sbrk_r+0x1c>)
 8006744:	2300      	movs	r3, #0
 8006746:	4605      	mov	r5, r0
 8006748:	4608      	mov	r0, r1
 800674a:	6023      	str	r3, [r4, #0]
 800674c:	f000 f82a 	bl	80067a4 <_sbrk>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_sbrk_r+0x1a>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	b103      	cbz	r3, 800675a <_sbrk_r+0x1a>
 8006758:	602b      	str	r3, [r5, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	2000c420 	.word	0x2000c420

08006760 <__ascii_mbtowc>:
 8006760:	b082      	sub	sp, #8
 8006762:	b901      	cbnz	r1, 8006766 <__ascii_mbtowc+0x6>
 8006764:	a901      	add	r1, sp, #4
 8006766:	b142      	cbz	r2, 800677a <__ascii_mbtowc+0x1a>
 8006768:	b14b      	cbz	r3, 800677e <__ascii_mbtowc+0x1e>
 800676a:	7813      	ldrb	r3, [r2, #0]
 800676c:	600b      	str	r3, [r1, #0]
 800676e:	7812      	ldrb	r2, [r2, #0]
 8006770:	1c10      	adds	r0, r2, #0
 8006772:	bf18      	it	ne
 8006774:	2001      	movne	r0, #1
 8006776:	b002      	add	sp, #8
 8006778:	4770      	bx	lr
 800677a:	4610      	mov	r0, r2
 800677c:	e7fb      	b.n	8006776 <__ascii_mbtowc+0x16>
 800677e:	f06f 0001 	mvn.w	r0, #1
 8006782:	e7f8      	b.n	8006776 <__ascii_mbtowc+0x16>

08006784 <__malloc_lock>:
 8006784:	4770      	bx	lr

08006786 <__malloc_unlock>:
 8006786:	4770      	bx	lr

08006788 <__ascii_wctomb>:
 8006788:	b149      	cbz	r1, 800679e <__ascii_wctomb+0x16>
 800678a:	2aff      	cmp	r2, #255	; 0xff
 800678c:	bf85      	ittet	hi
 800678e:	238a      	movhi	r3, #138	; 0x8a
 8006790:	6003      	strhi	r3, [r0, #0]
 8006792:	700a      	strbls	r2, [r1, #0]
 8006794:	f04f 30ff 	movhi.w	r0, #4294967295
 8006798:	bf98      	it	ls
 800679a:	2001      	movls	r0, #1
 800679c:	4770      	bx	lr
 800679e:	4608      	mov	r0, r1
 80067a0:	4770      	bx	lr
	...

080067a4 <_sbrk>:
 80067a4:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <_sbrk+0x14>)
 80067a6:	6819      	ldr	r1, [r3, #0]
 80067a8:	4602      	mov	r2, r0
 80067aa:	b909      	cbnz	r1, 80067b0 <_sbrk+0xc>
 80067ac:	4903      	ldr	r1, [pc, #12]	; (80067bc <_sbrk+0x18>)
 80067ae:	6019      	str	r1, [r3, #0]
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	4402      	add	r2, r0
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	4770      	bx	lr
 80067b8:	2000c22c 	.word	0x2000c22c
 80067bc:	2000c424 	.word	0x2000c424

080067c0 <_init>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	bf00      	nop
 80067c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c6:	bc08      	pop	{r3}
 80067c8:	469e      	mov	lr, r3
 80067ca:	4770      	bx	lr

080067cc <_fini>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	bf00      	nop
 80067d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d2:	bc08      	pop	{r3}
 80067d4:	469e      	mov	lr, r3
 80067d6:	4770      	bx	lr
